{
	"titleSlug": "arranging-coins",
	"slug": "pai-lie-ying-bi-by-leetcode-solution-w52c",
	"url": "https://leetcode-cn.com/problems/arranging-coins/solution/pai-lie-ying-bi-by-leetcode-solution-w52c/",
	"content": "#### 方法一：二分查找\n\n**思路和算法**\n\n根据等差数列求和公式可知，前 $k$ 个完整阶梯行所需的硬币数量为\n\n$$\n\\textit{total} = \\frac{k \\times (k+1)}{2}\n$$\n\n因此，可以通过二分查找计算 $n$ 枚硬币可形成的完整阶梯行的总行数。\n\n因为 $1 \\le n \\le 2^{31} -1$，所以 $n$ 枚硬币至少可以组成 $1$ 个完整阶梯行，至多可以组成 $n$ 个完整阶梯行（在 $n = 1$ 时得到）。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def arrangeCoins(self, n: int) -> int:\n        left, right = 1, n\n        while left < right:\n            mid = (left + right + 1) // 2\n            if mid * (mid + 1) <= 2 * n:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int arrangeCoins(int n) {\n        int left = 1, right = n;\n        while (left < right) {\n            int mid = (right - left + 1) / 2 + left;\n            if ((long) mid * (mid + 1) <= (long) 2 * n) {\n                left = mid;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int ArrangeCoins(int n) {\n        int left = 1, right = n;\n        while (left < right) {\n            int mid = (right - left + 1) / 2 + left;\n            if ((long) mid * (mid + 1) <= (long) 2 * n) {\n                left = mid;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar arrangeCoins = function(n) {\n    let left = 1, right = n;\n    while (left < right) {\n        const mid = Math.floor((right - left + 1) / 2) + left;\n        if (mid * (mid + 1) <= 2 * n) {\n            left = mid;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int arrangeCoins(int n) {\n        int left = 1, right = n;\n        while (left < right) {\n            int mid = (right - left + 1) / 2 + left;\n            if ((long long) mid * (mid + 1) <= (long long) 2 * n) {\n                left = mid;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc arrangeCoins(n int) int {\n    return sort.Search(n, func(k int) bool { k++; return k*(k+1) > 2*n })\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：数学\n\n**思路和算法**\n\n考虑直接通过求解方程来计算 $n$ 枚硬币可形成的完整阶梯行的总行数。不妨设可以形成的行数为 $x$，则有\n\n$$\n\\frac{(x+1) \\times x}{2} = n\n$$\n\n整理得一元二次方程\n\n$$\nx^2 + x - 2n = 0\n$$\n\n因为 $n \\ge 1$ ，所以判别式\n\n$$\n\\Delta = b^2 - 4ac = 8n + 1 > 0\n$$\n\n解得\n\n$$\nx_1 = \\frac{-1 - \\sqrt{8n+1}}{2}, \\hspace{1em} x_2 = \\frac{-1 + \\sqrt{8n+1}}{2}\n$$\n\n因为 $x_1 < 0$，故舍去。此时 $x_2$ 即为硬币可以排列成的行数，可以完整排列的行数即 $\\lfloor x_2 \\rfloor$，其中符号 $\\lfloor x \\rfloor$ 表示 $x$ 的向下取整。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def arrangeCoins(self, n: int) -> int:\n        return int((pow(8 * n + 1, 0.5) - 1) / 2)\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int arrangeCoins(int n) {\n        return (int) ((Math.sqrt((long) 8 * n + 1) - 1) / 2);\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int ArrangeCoins(int n) {\n        return (int) ((Math.Sqrt((long) 8 * n + 1) - 1) / 2);\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar arrangeCoins = function(n) {\n    return Math.floor((Math.sqrt(8 * n + 1) - 1) / 2);\n};\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int arrangeCoins(int n) {\n        return (int) ((sqrt((long long) 8 * n + 1) - 1) / 2);\n    }\n};\n```\n\n```go [sol2-Golang]\nfunc arrangeCoins(n int) int {\n    return int((math.Sqrt(float64(8*n+1)) - 1) / 2)\n}\n```\n\n**复杂度分析**\n\n代码中使用的 $\\texttt{pow}$ 函数的时空复杂度与 CPU 支持的指令集相关，这里不深入分析。"
}