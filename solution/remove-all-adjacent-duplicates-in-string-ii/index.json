{
	"titleSlug": "remove-all-adjacent-duplicates-in-string-ii",
	"slug": "shan-chu-zi-fu-chuan-zhong-de-suo-you-xiang-lin--4",
	"url": "https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string-ii/solution/shan-chu-zi-fu-chuan-zhong-de-suo-you-xiang-lin--4/",
	"content": "#### 方法一：暴力解法\n\n按照问题要求操作：对重复的相邻字母计数，当计数达到 `k` 时将其删除。重复此操作，直到没有删除的字符为止。\n\n![](https://pic.leetcode-cn.com/Figures/1209/1209_approach1.png){:width=500}\n\n**算法**\n\n1. 记录字符串的长度。\n\n2. 遍历字符串：\n\n    - 如果当前字符与前一个相同，计数器加 1。\n\n        - 否则，重置计数器为 `1`。\n\n    - 如果计数器等于 `k`，删除这 `k` 个字符。\n\n3. 如果字符串的长度被改变，从头开始重新遍历字符串。\n\n```java [solution1-Java]\npublic String removeDuplicates(String s, int k) {\n    StringBuilder sb = new StringBuilder(s);\n    int length = -1;\n    while (length != sb.length()) {\n        length = sb.length();\n        for (int i = 0, count = 1; i < sb.length(); ++i) {\n            if (i == 0 || sb.charAt(i) != sb.charAt(i - 1)) {\n                count = 1;\n            } else if (++count == k) {\n                sb.delete(i - k + 1, i + 1);\n                break;\n            }\n        }\n    }\n    return sb.toString();\n}\n```\n\n```cpp [solution1-Cpp]\nstring removeDuplicates(string s, int k) {\n    int length = -1;\n    while (length != s.size()) {\n        length = s.size();\n        for (int i = 0, count = 1; i < s.size(); ++i) {\n            if (i == 0 || s[i] != s[i - 1]) {\n                count = 1;\n            } else if (++count == k) {\n                s.erase(i - k + 1, k);\n                break;\n            }\n        }\n    }\n    return s;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$\\mathcal{O}(n^2 / k)$，其中 $n$ 是字符串的长度。字符串扫描不超过 $n / k$ 次。\n\n- 空间复杂度：$\\mathcal{O}(1)$。某些语言会创建字符串的副本，但算法只在字符串本身上操作。\n\n\n#### 方法二：记忆计数\n\n从方法一中可以看出，如果为每个字符设置计数器，就不必每次删除完字符后从头开始。这种方法具有线性复杂度，但需要额外空间存储字符的计数器。\n\n**算法**\n\n1. 初始长度为 `n` 的数组 `counts`。\n\n2. 遍历字符串：\n\n    - 如果当前字符与上一个字符相等，令 `counts[i] = counts[i - 1] + 1`。\n\n        - 否则，令 `counts[i] = 1`。\n\n    - 如果 `counts[i] = k`，删除这 `k` 个字符，令 `i = i - k`。\n\n```java [solution2-Java]\npublic String removeDuplicates(String s, int k) {\n    StringBuilder sb = new StringBuilder(s);\n    int count[] = new int[sb.length()];\n    for (int i = 0; i < sb.length(); ++i) {\n        if (i == 0 || sb.charAt(i) != sb.charAt(i - 1)) {\n            count[i] = 1;\n        } else {\n            count[i] = count[i - 1] + 1;\n            if (count[i] == k) {\n                sb.delete(i - k + 1, i + 1);\n                i = i - k;\n            }\n        }\n    }\n    return sb.toString();\n}\n```\n\n```cpp [solution2-Cpp]\nstring removeDuplicates(string s, int k) {\n    vector<int> count(s.size());\n    for (int i = 0; i < s.size(); ++i) {\n        if (i == 0 || s[i] != s[i - 1]) {\n            count[i] = 1;\n        } else {\n            count[i] = count[i - 1] + 1;\n            if (count[i] == k) {\n                s.erase(i - k + 1, k);\n                i = i - k;\n            }\n        };\n    }\n    return s;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$\\mathcal{O}(n)$，其中 $n$ 是字符串长度。每个字符仅被处理一次。\n\n- 空间复杂度：$\\mathcal{O}(n)$，存储每个字符的计数器。\n\n\n#### 方法三：栈\n\n当前字符与前一个不同时，往栈中压入 `1`。否则栈顶元素加 `1`。\n\n![](https://pic.leetcode-cn.com/Figures/1209/1209_approach3.png){:width=500}\n\n**算法**\n\n1. 迭代字符串：\n\n    - 如果当前字符与前一个相同，栈顶元素加 1。\n\n        - 否则，往栈中压入 `1`。\n\n    - 如果栈顶元素等于 `k`，则从字符串中删除这 `k` 个字符，并将 `k` 从栈顶移除。\n\n> 注意：因为在 Java 中 `Integer` 是不可变的，需要先弹出栈顶元素，然后加 1，再压入栈顶。\n\n```java [solution3-Java]\npublic String removeDuplicates(String s, int k) {\n    StringBuilder sb = new StringBuilder(s);\n    Stack<Integer> counts = new Stack<>();\n    for (int i = 0; i < sb.length(); ++i) {\n        if (i == 0 || sb.charAt(i) != sb.charAt(i - 1)) {\n            counts.push(1);\n        } else {\n            int incremented = counts.pop() + 1;\n            if (incremented == k) {\n                sb.delete(i - k + 1, i + 1);\n                i = i - k;\n            } else {\n                counts.push(incremented);\n            }\n        }\n    }\n    return sb.toString();\n}\n```\n\n```cpp [solution3-Cpp]\nstring removeDuplicates(string s, int k) {\n    stack<int> counts;\n    for (int i = 0; i < s.size(); ++i) {\n        if (i == 0 || s[i] != s[i - 1]) {\n            counts.push(1);\n        } else if (++counts.top() == k) {\n            counts.pop();\n            s.erase(i - k + 1, k);\n            i = i - k;\n        }\n    }\n    return s;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$\\mathcal{O}(n)$，其中 $n$ 是字符串长度。每个字符只处理一次。\n\n- 空间复杂度：$\\mathcal{O}(n)$，栈空间。\n\n\n#### 方法四：栈重建\n\n如果将计数器和字符都存储在栈中，则不需要修改字符串，只需要根据栈中结果重建字符串即可。\n\n**算法**\n\n1. 迭代字符串：\n\n    - 如果当前字符与栈顶元素相同，则栈顶元素计数器加 1。\n\n        - 否则，计数器设为 `1`，当前字符压入栈。\n\n    - 如果栈顶元素计数器等于 `k`，则弹出栈顶元素。\n\n2. 使用栈中元素和计数器构建结果字符串。\n\n```java [solution4-Java]\nclass Pair {\n    int cnt;\n    char ch;\n    public Pair(int cnt, char ch) {\n        this.ch = ch;\n        this.cnt = cnt;\n    }\n}\npublic String removeDuplicates(String s, int k) {\n    Stack<Pair> counts = new Stack<>();\n    for (int i = 0; i < s.length(); ++i) {\n        if (counts.empty() || s.charAt(i) != counts.peek().ch) {\n            counts.push(new Pair(1, s.charAt(i)));\n        } else {\n            if (++counts.peek().cnt == k) {\n                counts.pop();\n            }\n        }\n    }\n    StringBuilder b = new StringBuilder();\n    while (!counts.empty()) {\n        Pair p = counts.pop();\n        for (int i = 0; i < p.cnt; i++) {\n            b.append(p.ch);\n        }\n    }\n    return b.reverse().toString();\n}\n```\n\n```cpp [solution4-Cpp]\nstring removeDuplicates(string s, int k) {\n    vector<pair<int, char>> counts;\n    for (int i = 0; i < s.size(); ++i) {\n        if (counts.empty() || s[i] != counts.back().second) {\n            counts.push_back({ 1, s[i] });\n        } else if (++counts.back().first == k) {\n            counts.pop_back();\n        }\n    }\n    s = \"\";\n    for (auto &p : counts) {\n        s += string(p.first, p.second);\n    }\n    return s;\n}\n```\n\n**复杂度分析**\n\n- 与方法三相同。\n\n\n#### 方法五：双指针\n\n该方法由[lee215](https://leetcode-cn.com/u/lee215/)提出，使用双指针可以优化方法二和三中的字符串操作。这里，使用快慢指针复制字符。每次需要删除 `k` 个元素时，只需要将慢指针回退 `k` 个位置。\n\n![](https://pic.leetcode-cn.com/Figures/1209/1209_approach5.png){:width=500}\n\n**算法**\n\n1. 初始慢指针 `j` 等于 0。\n\n2. 使用快指针 `i` 遍历字符串：\n\n    - 令 `s[i] = s[j]`。\n\n    - 如果 `s[j] = s[j - 1]`，则栈顶元素加 1。\n\n        - 否则，栈中压入 `1`。\n\n    - 如果计数器等于 `k`，`j = j - k`，并弹出栈顶元素。\n\n3. 返回字符串的前 `j` 个字符。\n\n```java [solution5-Java]\npublic String removeDuplicates(String s, int k) {\n    Stack<Integer> counts = new Stack<>();\n    char[] sa = s.toCharArray();\n    int j = 0;\n    for (int i = 0; i < s.length(); ++i, ++j) {\n        sa[j] = sa[i];\n        if (j == 0 || sa[j] != sa[j - 1]) {\n            counts.push(1);\n        } else {\n            int incremented = counts.pop() + 1;\n            if (incremented == k) {\n                j = j - k;\n            } else {\n                counts.push(incremented);\n            }\n        }\n    }\n    return new String(sa, 0, j);\n}\n```\n\n```cpp [solution5-Cpp]\nstring removeDuplicates(string s, int k) {\n    auto j = 0;\n    stack<int> counts;\n    for (auto i = 0; i < s.size(); ++i, ++j) {\n        s[j] = s[i];\n        if (j == 0 || s[j] != s[j - 1]) {\n            counts.push(1);\n        } else if (++counts.top() == k) {\n            counts.pop();\n            j -= k;\n        }\n    }\n    return s.substr(0, j);\n}\n```\n\n**复杂度分析**\n\n- 与方法三相同。"
}