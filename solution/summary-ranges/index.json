{
	"titleSlug": "summary-ranges",
	"slug": "hui-zong-qu-jian-by-leetcode-solution-6zrs",
	"url": "https://leetcode-cn.com/problems/summary-ranges/solution/hui-zong-qu-jian-by-leetcode-solution-6zrs/",
	"content": "#### 方法一：一次遍历\n\n我们从数组的位置 $0$ 出发，向右遍历。每次遇到相邻元素之间的差值大于 $1$ 时，我们就找到了一个区间。遍历完数组之后，就能得到一系列的区间的列表。\n\n在遍历过程中，维护下标 $\\textit{low}$ 和 $\\textit{high}$ 分别记录区间的起点和终点，对于任何区间都有 $\\textit{low} \\le \\textit{high}$。当得到一个区间时，根据 $\\textit{low}$ 和 $\\textit{high}$ 的值生成区间的字符串表示。\n\n- 当 $\\textit{low}<\\textit{high}$ 时，区间的字符串表示为 $``\\textit{low} \\rightarrow \\textit{high}\"$；\n\n- 当 $\\textit{low}=\\textit{high}$ 时，区间的字符串表示为 $``\\textit{low}\"$。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<string> summaryRanges(vector<int>& nums) {\n        vector<string> ret;\n        int i = 0;\n        int n = nums.size();\n        while (i < n) {\n            int low = i;\n            i++;\n            while (i < n && nums[i] == nums[i - 1] + 1) {\n                i++;\n            }\n            int high = i - 1;\n            string temp = to_string(nums[low]);\n            if (low < high) {\n                temp.append(\"->\");\n                temp.append(to_string(nums[high]));\n            }\n            ret.push_back(move(temp));\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<String> summaryRanges(int[] nums) {\n        List<String> ret = new ArrayList<String>();\n        int i = 0;\n        int n = nums.length;\n        while (i < n) {\n            int low = i;\n            i++;\n            while (i < n && nums[i] == nums[i - 1] + 1) {\n                i++;\n            }\n            int high = i - 1;\n            StringBuffer temp = new StringBuffer(Integer.toString(nums[low]));\n            if (low < high) {\n                temp.append(\"->\");\n                temp.append(Integer.toString(nums[high]));\n            }\n            ret.add(temp.toString());\n        }\n        return ret;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc summaryRanges(nums []int) (ans []string) {\n    for i, n := 0, len(nums); i < n; {\n        left := i\n        for i++; i < n && nums[i-1]+1 == nums[i]; i++ {\n        }\n        s := strconv.Itoa(nums[left])\n        if left < i-1 {\n            s += \"->\" + strconv.Itoa(nums[i-1])\n        }\n        ans = append(ans, s)\n    }\n    return\n}\n```\n\n```C [sol1-C]\nchar** summaryRanges(int* nums, int numsSize, int* returnSize) {\n    char** ret = malloc(sizeof(char*) * numsSize);\n    *returnSize = 0;\n    int i = 0;\n    while (i < numsSize) {\n        int low = i;\n        i++;\n        while (i < numsSize && nums[i] == nums[i - 1] + 1) {\n            i++;\n        }\n        int high = i - 1;\n        char* temp = malloc(sizeof(char) * 25);\n        sprintf(temp, \"%d\", nums[low]);\n        if (low < high) {\n            sprintf(temp + strlen(temp), \"->\");\n            sprintf(temp + strlen(temp), \"%d\", nums[high]);\n        }\n        ret[(*returnSize)++] = temp;\n    }\n    return ret;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar summaryRanges = function(nums) {\n    const ret = [];\n    let i = 0;\n    const n = nums.length;\n    while (i < n) {\n        const low = i;\n        i++;\n        while (i < n && nums[i] === nums[i - 1] + 1) {\n            i++;\n        }\n        const high = i - 1;\n        const temp = ['' + nums[low]];\n        if (low < high) {\n            temp.push('->');\n            temp.push('' + nums[high]);\n        }\n        ret.push(temp.join(''));\n    }\n    return ret;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。\n\n- 空间复杂度：$O(1)$。除了用于输出的空间外，额外使用的空间为常数。"
}