{
	"titleSlug": "escape-a-large-maze",
	"slug": "tao-chi-da-mi-gong-by-leetcode-solution-qxhz",
	"url": "https://leetcode-cn.com/problems/escape-a-large-maze/solution/tao-chi-da-mi-gong-by-leetcode-solution-qxhz/",
	"content": "#### 方法一：有限步数的广度优先搜索\n\n**思路**\n\n判断能否从 $\\textit{source}$ 走到 $\\textit{target}$，最简单且直观的方法就是从 $\\textit{source}$ 开始进行广度优先搜索，如果搜索的过程中经过了 $\\textit{target}$，则说明可以到达。\n\n然而本题中给定的网格规模是 $10^6 \\times 10^6$ 的，常规的广度优先搜索会达到 $O(10^6 \\times 10^6) = O(10^{12})$ 的时间复杂度，远远超出了时间限制。因此我们必须进行优化。\n\n注意到障碍的个数不超过 $200$ 个，这说明网格中大部分的位置都不是障碍，只有极少一部分的位置是障碍。分析从 $\\textit{source}$ 无法走到 $\\textit{target}$ 的情况，无非就是以下两种：\n\n- $\\textit{source}$ 被障碍完全包围，并且 $\\textit{target}$ 不在包围圈中；\n\n- $\\textit{target}$ 被障碍完全包围，并且 $\\textit{source}$ 不在包围圈中。\n\n在「障碍的个数不超过 $200$ 个前提下」，我们可以猜测「包围圈」的大小也不会很大。也就是说，如果障碍的个数为 $n$ 个，那么我们希望得到「包围圈」中包含的非障碍位置的数量的上界，假设其为 $\\textit{limit}$，那么：\n\n> 如果我们从 $\\textit{source}$ 开始进行广度优先搜索，搜索到的非障碍位置的数量严格大于 $\\textit{limit}$，那么说明 $\\textit{source}$ 一定不在任何包围圈中。同时，如果从 $\\textit{target}$ 开始进行广度优先搜索也是如此，那么同样说明 $\\textit{target}$ 一定也不在任何包围圈中。此时我们就可以断定，一定能从 $\\textit{source}$ 走到 $\\textit{target}$。\n\n因此我们的目标就是正确估计「包围圈」的上界。当障碍的个数固定为 $n$ 个时（我们只考虑 $n \\geq 2$ 的情况，如果 $n=0,1$，那么无法形成「包围圈」，任意两个位置都互相可达），要想使得非障碍位置的数量最大，这些障碍一定是靠着网格的一个角进行包围的，因为这样可以利用到网格的两条边。\n\n不失一般性，我们假设靠着的是网格的左上角，那么可以证明，最优的包围方法一定是选择：\n\n$$\n(0, n-1), (1, n-2), (2, n-3), \\cdots, (n-3, 2), (n-2, 1), (n-1, 0)\n$$\n\n这 $n$ 个位置，此时「包围圈」组成一个等腰直角三角形，如下图所示。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/1036/1.png)\n\n其中包含的非障碍位置的数量为：\n\n$$\n\\frac{n(n-1)}{2}\n$$\n\n最优性可以通过构造法证明。可以发现，上面给出的包围方法保证了每一行和每一列不会有超过 $1$ 个障碍。对于其它的包围方法，不失一般性，设某一行有 $2$ 个或以上的障碍，此时有两种情况：\n\n- 如果这两个障碍不八连通，那么其中一个障碍的设置是无意义的，因为它不和「包围圈」的外界连通，放置该障碍只会减少「包围圈」中非障碍位置的数量；\n\n- 如果这两个障碍八连通，如下图所示，我们可以将从第一个障碍开始，到离第二个障碍最近的并且行坐标小于等于它为止的所有障碍的行坐标增加 $1$，这样就可以构造出一个包含非障碍位置数量更多的「包围圈」。\n\n![fig2](https://assets.leetcode-cn.com/solution-static/1036/2.png)\n\n因此，最优的包围方法一定保证每一行和每一列不会有超过 $1$ 个障碍。由于我们需要包围住左上角，因此列坐标的必须取 $0, 1, 2, \\cdots, n-1$ 这 $n$ 个位置（如果取 $\\geq n$，那么该障碍就无法与「包围圈」连通，因为它至少还需要借助 $n$ 个障碍来连接到左边界）。同时，每一行只有一个障碍，因此每个障碍右侧的所有位置是不可能被包围的，只有左侧的位置才可能被包围。而左侧位置的总数为：\n\n$$\n0 + 1 + 2 + \\cdots + (n-1) = \\frac{n(n-1)}{2}\n$$\n\n因此最多包含非障碍位置的数量为 $\\dfrac{n(n-1)}{2}$。\n\n**算法**\n\n通过上述的证明，我们就可以设计出如下的算法：\n\n- 我们从 $\\textit{source}$ 开始进行广度优先搜索。如果经过了不超过 $\\dfrac{n(n-1)}{2}$ 个非障碍位置就已经结束搜索，说明 $\\textit{source}$ 在「包围圈」中。但如果我们在过程中经过了 $\\textit{target}$，那么说明它们是可达的，否则一定不可达。\n\n- 我们再从 $\\textit{target}$ 开始进行广度优先搜索。如果经过了不超过 $\\dfrac{n(n-1)}{2}$ 个非障碍位置就已经结束搜索，说明 $\\textit{target}$ 在「包围圈」中。否则说明 $\\textit{source}$ 和 $\\textit{target}$ 均不在「包围圈」中，此时一定可达。\n\n搜索的过程中需要借助哈希表来标记每个位置是否已经搜索过。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    // 在包围圈中\n    static constexpr int BLOCKED = -1;\n    // 不在包围圈中\n    static constexpr int VALID = 0;\n    // 无论在不在包围圈中，但在 n(n-1)/2 步搜索的过程中经过了 target\n    static constexpr int FOUND = 1;\n    \n    static constexpr int dirs[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    static constexpr int BOUNDARY = 1000000;\n\npublic:\n    bool isEscapePossible(vector<vector<int>>& blocked, vector<int>& source, vector<int>& target) {\n        if (blocked.size() < 2) {\n            return true;\n        }\n\n        auto hash_fn = [fn = hash<long long>()](const pair<int, int>& o) -> size_t {\n            auto& [x, y] = o;\n            return fn((long long)x << 20 | y);\n        };\n        unordered_set<pair<int, int>, decltype(hash_fn)> hash_blocked(0, hash_fn);\n        for (const auto& pos: blocked) {\n            hash_blocked.emplace(pos[0], pos[1]);\n        }\n\n        auto check = [&](vector<int>& start, vector<int>& finish) -> int {\n            int sx = start[0], sy = start[1];\n            int fx = finish[0], fy = finish[1];\n            int countdown = blocked.size() * (blocked.size() - 1) / 2;\n            queue<pair<int, int>> q;\n            q.emplace(sx, sy);\n            unordered_set<pair<int, int>, decltype(hash_fn)> visited(0, hash_fn);\n            visited.emplace(sx, sy);\n            while (!q.empty() && countdown > 0) {\n                auto [x, y] = q.front();\n                q.pop();\n                for (int d = 0; d < 4; ++d) {\n                    int nx = x + dirs[d][0], ny = y + dirs[d][1];\n                    if (nx >= 0 && nx < BOUNDARY && ny >= 0 && ny < BOUNDARY && !hash_blocked.count({nx, ny}) && !visited.count({nx, ny})) {\n                        if (nx == fx && ny == fy) {\n                            return FOUND;\n                        }\n                        --countdown;\n                        q.emplace(nx, ny);\n                        visited.emplace(nx, ny);\n                    }\n                }\n            }\n            if (countdown > 0) {\n                return BLOCKED;\n            }\n            return VALID;\n        };\n\n        if (int result = check(source, target); result == FOUND) {\n            return true;\n        }\n        else if (result == BLOCKED) {\n            return false;\n        }\n        else {\n            result = check(target, source);\n            if (result == BLOCKED) {\n                return false;\n            }\n            return true;\n        }\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    // 在包围圈中\n    static final int BLOCKED = -1;\n    // 不在包围圈中\n    static final int VALID = 0;\n    // 无论在不在包围圈中，但在 n(n-1)/2 步搜索的过程中经过了 target\n    static final int FOUND = 1;\n    \n    static final int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    static final int BOUNDARY = 1000000;\n\n    public boolean isEscapePossible(int[][] blocked, int[] source, int[] target) {\n        if (blocked.length < 2) {\n            return true;\n        }\n\n        Set<Pair> hashBlocked = new HashSet<Pair>();\n        for (int[] pos : blocked) {\n            hashBlocked.add(new Pair(pos[0], pos[1]));\n        }\n\n        int result = check(blocked, source, target, hashBlocked);\n        if (result == FOUND) {\n            return true;\n        } else if (result == BLOCKED) {\n            return false;\n        } else {\n            result = check(blocked, target, source, hashBlocked);\n            return result != BLOCKED;\n        }\n    }\n\n    public int check(int[][] blocked, int[] start, int[] finish, Set<Pair> hashBlocked) {\n        int sx = start[0], sy = start[1];\n        int fx = finish[0], fy = finish[1];\n        int countdown = blocked.length * (blocked.length - 1) / 2;\n        Pair startPair = new Pair(sx, sy);\n        Queue<Pair> queue = new ArrayDeque<Pair>();\n        queue.offer(startPair);\n        Set<Pair> visited = new HashSet<Pair>();\n        visited.add(startPair);\n        while (!queue.isEmpty() && countdown > 0) {\n            Pair pair = queue.poll();\n            int x = pair.x, y = pair.y;\n            for (int d = 0; d < 4; ++d) {\n                int nx = x + dirs[d][0], ny = y + dirs[d][1];\n                Pair newPair = new Pair(nx, ny);\n                if (nx >= 0 && nx < BOUNDARY && ny >= 0 && ny < BOUNDARY && !hashBlocked.contains(newPair) && !visited.contains(newPair)) {\n                    if (nx == fx && ny == fy) {\n                        return FOUND;\n                    }\n                    --countdown;\n                    queue.offer(newPair);\n                    visited.add(newPair);\n                }\n            }\n        }\n        if (countdown > 0) {\n            return BLOCKED;\n        }\n        return VALID;\n    }\n}\n\nclass Pair {\n    int x;\n    int y;\n\n    public Pair(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public int hashCode() {\n        return (int) ((long) x << 20 | y);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Pair) {\n            Pair pair2 = (Pair) obj;\n            return x == pair2.x && y == pair2.y;\n        }\n        return false;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    // 在包围圈中\n    const int BLOCKED = -1;\n    // 不在包围圈中\n    const int VALID = 0;\n    // 无论在不在包围圈中，但在 n(n-1)/2 步搜索的过程中经过了 target\n    const int FOUND = 1;\n    \n    int[][] dirs = {new int[]{0, 1}, new int[]{0, -1}, new int[]{1, 0}, new int[]{-1, 0}};\n    const int BOUNDARY = 1000000;\n\n    public bool IsEscapePossible(int[][] blocked, int[] source, int[] target) {\n        if (blocked.Length < 2) {\n            return true;\n        }\n\n        ISet<Pair> hashBlocked = new HashSet<Pair>();\n        foreach (int[] pos in blocked) {\n            hashBlocked.Add(new Pair(pos[0], pos[1]));\n        }\n\n        int result = Check(blocked, source, target, hashBlocked);\n        if (result == FOUND) {\n            return true;\n        } else if (result == BLOCKED) {\n            return false;\n        } else {\n            result = Check(blocked, target, source, hashBlocked);\n            return result != BLOCKED;\n        }\n    }\n\n    public int Check(int[][] blocked, int[] start, int[] finish, ISet<Pair> hashBlocked) {\n        int sx = start[0], sy = start[1];\n        int fx = finish[0], fy = finish[1];\n        int countdown = blocked.Length * (blocked.Length - 1) / 2;\n        Pair startPair = new Pair(sx, sy);\n        Queue<Pair> queue = new Queue<Pair>();\n        queue.Enqueue(startPair);\n        ISet<Pair> visited = new HashSet<Pair>();\n        visited.Add(startPair);\n        while (queue.Count > 0 && countdown > 0) {\n            Pair pair = queue.Dequeue();\n            int x = pair.X, y = pair.Y;\n            for (int d = 0; d < 4; ++d) {\n                int nx = x + dirs[d][0], ny = y + dirs[d][1];\n                Pair newPair = new Pair(nx, ny);\n                if (nx >= 0 && nx < BOUNDARY && ny >= 0 && ny < BOUNDARY && !hashBlocked.Contains(newPair) && !visited.Contains(newPair)) {\n                    if (nx == fx && ny == fy) {\n                        return FOUND;\n                    }\n                    --countdown;\n                    queue.Enqueue(newPair);\n                    visited.Add(newPair);\n                }\n            }\n        }\n        if (countdown > 0) {\n            return BLOCKED;\n        }\n        return VALID;\n    }\n}\n\npublic class Pair {\n    public int X { get; set; }\n    public int Y { get; set; }\n\n    public Pair(int x, int y) {\n        this.X = x;\n        this.Y = y;\n    }\n\n    public override int GetHashCode() {\n        return (int) (((long) X) << 20 | Y);\n    }\n\n    public override bool Equals(object obj) {\n        Pair pair2 = obj as Pair;\n        if (pair2 == null) {\n            return false;\n        }\n        return X == pair2.X && Y == pair2.Y;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def isEscapePossible(self, blocked: List[List[int]], source: List[int], target: List[int]) -> bool:\n        \"\"\"\n        BLOCKED: 在包围圈中\n        VALID:   不在包围圈中\n        FOUND:   无论在不在包围圈中，但在 n(n-1)/2 步搜索的过程中经过了 target\n        \"\"\"\n        BLOCKED, VALID, FOUND = -1, 0, 1\n        BOUNDARY = 10**6\n\n        if len(blocked) < 2:\n            return True\n\n        hash_blocked = set(tuple(pos) for pos in blocked)\n\n        def check(start: List[int], finish: List[int]) -> int:\n            sx, sy = start\n            fx, fy = finish\n            countdown = len(blocked) * (len(blocked) - 1) // 2\n            \n            q = deque([(sx, sy)])\n            visited = set([(sx, sy)])\n            \n            while q and countdown > 0:\n                x, y = q.popleft()\n                for nx, ny in [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]:\n                    if 0 <= nx < BOUNDARY and 0 <= ny < BOUNDARY and (nx, ny) not in hash_blocked and (nx, ny) not in visited:\n                        if (nx, ny) == (fx, fy):\n                            return FOUND\n                        countdown -= 1\n                        q.append((nx, ny))\n                        visited.add((nx, ny))\n            \n            if countdown > 0:\n                return BLOCKED\n            return VALID\n\n        if (result := check(source, target)) == FOUND:\n            return True\n        elif result == BLOCKED:\n            return False\n        else:\n            result = check(target, source)\n            if result == BLOCKED:\n                return False\n            return True\n```\n\n```go [sol1-Golang]\ntype pair struct{ x, y int }\nvar dirs = []pair{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\nfunc isEscapePossible(block [][]int, source, target []int) bool {\n    const (\n        blocked = -1 // 在包围圈中\n        valid   = 0  // 不在包围圈中\n        found   = 1  // 无论在不在包围圈中，但在 n(n-1)/2 步搜索的过程中经过了 target\n\n        boundary int = 1e6\n    )\n\n    n := len(block)\n    if n < 2 {\n        return true\n    }\n\n    blockSet := map[pair]bool{}\n    for _, b := range block {\n        blockSet[pair{b[0], b[1]}] = true\n    }\n\n    check := func(start, finish []int) int {\n        sx, sy := start[0], start[1]\n        fx, fy := finish[0], finish[1]\n        countdown := n * (n - 1) / 2\n\n        q := []pair{{sx, sy}}\n        vis := map[pair]bool{{sx, sy}: true}\n        for len(q) > 0 && countdown > 0 {\n            p := q[0]\n            q = q[1:]\n            for _, d := range dirs {\n                x, y := p.x+d.x, p.y+d.y\n                np := pair{x, y}\n                if 0 <= x && x < boundary && 0 <= y && y < boundary && !blockSet[np] && !vis[np] {\n                    if x == fx && y == fy {\n                        return found\n                    }\n                    countdown--\n                    vis[np] = true\n                    q = append(q, np)\n                }\n            }\n        }\n\n        if countdown > 0 {\n            return blocked\n        }\n        return valid\n    }\n\n    res := check(source, target)\n    return res == found || res == valid && check(target, source) != blocked\n}\n```\n\n```JavaScript [sol1-JavaScript]\n// 在包围圈中\nconst BLOCKED = -1;\n// 不在包围圈中\nconst VALID = 0;\n// 无论在不在包围圈中，但在 n(n-1)/2 步搜索的过程中经过了 target\nconst FOUND = 1;\n\nconst dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];\nconst BOUNDARY = 1000000;\n\nvar isEscapePossible = function(blocked, source, target) {\n    if (blocked.length < 2) {\n        return true;\n    }\n\n    const hashBlocked = new Set();\n    for (const pos of blocked) {\n        hashBlocked.add([pos[0], pos[1]].toString());\n    }\n\n    let result = check(blocked, source, target, hashBlocked);\n    if (result === FOUND) {\n        return true;\n    } else if (result === BLOCKED) {\n        return false;\n    } else {\n        result = check(blocked, target, source, hashBlocked);\n        return result !== BLOCKED;\n    }\n};\n\nconst check = (blocked, start, finish, hashBlocked) => {\n    const sx = start[0], sy = start[1];\n    const fx = finish[0], fy = finish[1];\n    let countdown = Math.floor(blocked.length * (blocked.length - 1) / 2);\n    const startPair = [sx, sy];\n    const queue = [];\n    queue.push(startPair);\n    const visited = new Set();\n    visited.add(startPair.toString());\n    while (queue.length && countdown > 0) {\n        const [x, y] = queue.shift();\n        for (let d = 0; d < 4; ++d) {\n            const nx = x + dirs[d][0], ny = y + dirs[d][1];\n            const newPair = [nx, ny];\n            if (nx >= 0 && nx < BOUNDARY && ny >= 0 && ny < BOUNDARY && !hashBlocked.has(newPair.toString()) && !visited.has(newPair.toString())) {\n                if (nx === fx && ny === fy) {\n                    return FOUND;\n                }\n                --countdown;\n                queue.push(newPair);\n                visited.add(newPair.toString());\n            }\n        }\n    }\n    if (countdown > 0) {\n        return BLOCKED;\n    }\n    return VALID;\n}\n```\n\n```C [sol1-C]\n// 在包围圈中\n#define  BLOCKED -1\n// 不在包围圈中\n#define VALID  0\n// 无论在不在包围圈中，但在 n(n-1)/2 步搜索的过程中经过了 target\n#define FOUND  1\n\n#define BOUNDARY 1000000\n\nint dirs[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n#define HashCode(x, y) ((long long)(x) << 20 | (y))\n\nstruct Pair{\n    int x;\n    int y;\n};\n\nstruct HashEntry {\n    long long key;                  \n    long long val;\n    UT_hash_handle hh;         \n};\n\nvoid hashAddItem(struct HashEntry **obj, long long key) {\n    struct HashEntry *pEntry;\n    pEntry = malloc(sizeof(struct HashEntry));\n    pEntry->key = key;\n    pEntry->val = 1;\n    HASH_ADD(hh, *obj, key, sizeof(long long), pEntry);\n} \n\nstruct HashEntry *hashFindItem(struct HashEntry **obj, long long key)\n{\n    struct HashEntry *pEntry = NULL;\n    HASH_FIND(hh, *obj, &key, sizeof(long long), pEntry);\n    return pEntry;\n}\n\nvoid hashEraseItem(struct HashEntry **obj, long long key)\n{   \n    struct HashEntry *pEntry = NULL;\n    HASH_FIND(hh, *obj, &key, sizeof(long long), pEntry);\n    if (NULL != pEntry) {\n        HASH_DEL(*obj, pEntry);\n        free(pEntry);\n    } \n}\n\nvoid hashFreeAll(struct HashEntry **obj)\n{\n    struct HashEntry *curr, *next;\n    HASH_ITER(hh, *obj, curr, next)\n    {\n        HASH_DEL(*obj, curr);  \n        free(curr);      \n    }\n}\n\nint check(int** blocked, int blockedSize, const int* start, const int* finish, struct HashEntry ** hashBlocked) {\n    int sx = start[0], sy = start[1];\n    int fx = finish[0], fy = finish[1];\n    int countdown = blockedSize * (blockedSize - 1) / 2;\n\n    int head = 0;\n    int tail = 0;\n    struct Pair * queue = (struct Pair *)malloc(sizeof(struct Pair) * countdown * 4);\n    queue[tail].x = sx;\n    queue[tail].y = sy;\n    tail++;\n    struct HashEntry * visited = NULL;\n    hashAddItem(&visited, HashCode(sx, sy));\n\n    while(head != tail && countdown > 0) {\n        int x = queue[head].x;\n        int y = queue[head].y;\n        head++;\n        for (int d = 0; d < 4; d++) {\n            int nx = x + dirs[d][0], ny = y + dirs[d][1];\n            if (nx >= 0 && nx < BOUNDARY && ny >= 0 && ny < BOUNDARY && \n                !hashFindItem(hashBlocked, HashCode(nx, ny)) && \n                !hashFindItem(&visited, HashCode(nx, ny))) {\n                if (nx == fx && ny == fy) {\n                    hashFreeAll(&visited);\n                    free(queue);\n                    return FOUND;\n                }\n                countdown--;\n                queue[tail].x = nx;\n                queue[tail].y = ny;\n                tail++;\n                hashAddItem(&visited, HashCode(nx, ny));\n            }\n        }\n    }\n    if (countdown > 0) {\n        hashFreeAll(&visited);\n        free(queue);\n        return BLOCKED;\n    }\n    hashFreeAll(&visited);\n    free(queue);\n    return VALID;\n}\n\nbool isEscapePossible(int** blocked, int blockedSize, int* blockedColSize, int* source, int sourceSize, int* target, int targetSize){\n    if (blockedSize < 2) {\n        return true;\n    }\n\n    struct HashEntry * hashBlocked = NULL;\n    for (int i = 0; i < blockedSize; i++) {\n        hashAddItem(&hashBlocked, HashCode(blocked[i][0], blocked[i][1]));\n    }\n    int result = check(blocked, blockedSize, source, target, &hashBlocked);\n    if (result == FOUND) {\n        hashFreeAll(&hashBlocked);\n        return true;\n    } else if (result == BLOCKED) {\n        hashFreeAll(&hashBlocked);\n        return false;\n    } else {\n        result = check(blocked, blockedSize, target, source, &hashBlocked);\n        hashFreeAll(&hashBlocked);\n        return result != BLOCKED;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\\textit{block}$ 的长度。我们需要 $O(n^2)$ 的时间进行广度优先搜索，此外所有的步骤的时间复杂度在渐进意义下小于 $O(n^2)$。\n\n- 空间复杂度：$O(n^2)$，即为广度优先搜索中用来存储已搜索位置的哈希表需要使用的空间，此外所有的额外空间在渐进意义下小于 $O(n^2)$。\n\n#### 方法二：离散化 + 广度优先搜索\n\n**思路与算法**\n\n我们也可以借助离散化技巧将网格「压缩」成一个规模较小的但等价的新网格，并在新网格上进行常规的广度优先搜索。\n\n以网格的每一行为例，可以发现，不同的行坐标只有：\n\n- 障碍所在的行，最多有 $n$ 个；\n\n- $\\textit{source}$ 和 $\\textit{target}$ 所在的行，最多有 $2$ 个。\n\n- 网格的上下边界（即 $-1$ 和 $10^6$），有 $2$ 个。\n\n因此不同的行坐标最多只有 $n+4$ 个，我们可以对行坐标进行离散化，具体的规则如下：\n\n- 我们将行坐标进行升序排序；\n\n- 将上边界离散化为 $-1$。上边界是排序后的第 $0$ 个行坐标；\n\n- 如果排序后的第 $i$ 个行坐标与第 $i-1$ 个行坐标相同，那么它们离散化之后的值也相同；\n\n- 如果排序后的第 $i$ 个行坐标与第 $i-1$ 个行坐标相差 $1$，那么它们离散化之后的值也相差 $1$；\n\n- 如果排序后的第 $i$ 个行坐标与第 $i-1$ 个行坐标相差超过 $1$，那么它们离散化之后的值相差 $2$。\n\n这样的正确性在于：在离散化前，如果两个行坐标本身相邻，那么在离散化之后它们也必须相邻。如果它们不相邻，可以把它们之间间隔的若干行直接「压缩」成一行，即行坐标相差 $2$。\n\n对于列坐标的离散化方法也是如此。在离散化完成之后，新的网格的规模不会超过 $2(n+4) \\times 2(n+4)$，进行广度优先搜索需要的时间是可接受的。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    static constexpr int BOUNDARY = 1000000;\n    static constexpr int dirs[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    \npublic:\n    bool isEscapePossible(vector<vector<int>>& blocked, vector<int>& source, vector<int>& target) {\n        if (blocked.size() < 2) {\n            return true;\n        }\n        vector<int> rows, columns;\n        for (const auto& pos: blocked) {\n            rows.push_back(pos[0]);\n            columns.push_back(pos[1]);\n        }\n        rows.push_back(source[0]);\n        rows.push_back(target[0]);\n        columns.push_back(source[1]);\n        columns.push_back(target[1]);\n        \n        // 离散化\n        sort(rows.begin(), rows.end());\n        sort(columns.begin(), columns.end());\n        rows.erase(unique(rows.begin(), rows.end()), rows.end());\n        columns.erase(unique(columns.begin(), columns.end()), columns.end());\n        unordered_map<int, int> r_mapping, c_mapping;\n\n        int r_id = (rows[0] == 0 ? 0 : 1);\n        r_mapping[rows[0]] = r_id;\n        for (int i = 1; i < rows.size(); ++i) {\n            r_id += (rows[i] == rows[i - 1] + 1 ? 1 : 2);\n            r_mapping[rows[i]] = r_id;\n        }\n        if (rows.back() != BOUNDARY - 1) {\n            ++r_id;\n        }\n\n        int c_id = (columns[0] == 0 ? 0 : 1);\n        c_mapping[columns[0]] = c_id;\n        for (int i = 1; i < columns.size(); ++i) {\n            c_id += (columns[i] == columns[i - 1] + 1 ? 1 : 2);\n            c_mapping[columns[i]] = c_id;\n        }\n        if (columns.back() != BOUNDARY - 1) {\n            ++c_id;\n        }\n\n        vector<vector<int>> grid(r_id + 1, vector<int>(c_id + 1));\n        for (const auto& pos: blocked) {\n            int x = pos[0], y = pos[1];\n            grid[r_mapping[x]][c_mapping[y]] = 1;\n        }\n        \n        int sx = r_mapping[source[0]], sy = c_mapping[source[1]];\n        int tx = r_mapping[target[0]], ty = c_mapping[target[1]];\n\n        queue<pair<int, int>> q;\n        q.emplace(sx, sy);\n        grid[sx][sy] = 1;\n        while (!q.empty()) {\n            auto [x, y] = q.front();\n            q.pop();\n            for (int d = 0; d < 4; ++d) {\n                int nx = x + dirs[d][0], ny = y + dirs[d][1];\n                if (nx >= 0 && nx <= r_id && ny >= 0 && ny <= c_id && grid[nx][ny] != 1) {\n                    if (nx == tx && ny == ty) {\n                        return true;\n                    }\n                    q.emplace(nx, ny);\n                    grid[nx][ny] = 1;\n                }\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    static final int BOUNDARY = 1000000;\n    static final int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    public boolean isEscapePossible(int[][] blocked, int[] source, int[] target) {\n        if (blocked.length < 2) {\n            return true;\n        }\n        // 离散化\n        TreeSet<Integer> rows = new TreeSet<Integer>();\n        TreeSet<Integer> columns = new TreeSet<Integer>();\n        for (int[] pos : blocked) {\n            rows.add(pos[0]);\n            columns.add(pos[1]);\n        }\n        rows.add(source[0]);\n        rows.add(target[0]);\n        columns.add(source[1]);\n        columns.add(target[1]);\n\n        Map<Integer, Integer> rMapping = new HashMap<Integer, Integer>();\n        Map<Integer, Integer> cMapping = new HashMap<Integer, Integer>();\n\n        int firstRow = rows.first();\n        int rId = (firstRow == 0 ? 0 : 1);\n        rMapping.put(firstRow, rId);\n        int prevRow = firstRow;\n        for (int row : rows) {\n            if (row == firstRow) {\n                continue;\n            }\n            rId += (row == prevRow + 1 ? 1 : 2);\n            rMapping.put(row, rId);\n            prevRow = row;\n        }\n        if (prevRow != BOUNDARY - 1) {\n            ++rId;\n        }\n\n        int firstColumn = columns.first();\n        int cId = (firstColumn == 0 ? 0 : 1);\n        cMapping.put(firstColumn, cId);\n        int prevColumn = firstColumn;\n        for (int column : columns) {\n            if (column == firstColumn) {\n                continue;\n            }\n            cId += (column == prevColumn + 1 ? 1 : 2);\n            cMapping.put(column, cId);\n            prevColumn = column;\n        }\n        if (prevColumn != BOUNDARY - 1) {\n            ++cId;\n        }\n\n        int[][] grid = new int[rId + 1][cId + 1];\n        for (int[] pos : blocked) {\n            int x = pos[0], y = pos[1];\n            grid[rMapping.get(x)][cMapping.get(y)] = 1;\n        }\n        \n        int sx = rMapping.get(source[0]), sy = cMapping.get(source[1]);\n        int tx = rMapping.get(target[0]), ty = cMapping.get(target[1]);\n\n        Queue<int[]> queue = new ArrayDeque<int[]>();\n        queue.offer(new int[]{sx, sy});\n        grid[sx][sy] = 1;\n        while (!queue.isEmpty()) {\n            int[] arr = queue.poll();\n            int x = arr[0], y = arr[1];\n            for (int d = 0; d < 4; ++d) {\n                int nx = x + dirs[d][0], ny = y + dirs[d][1];\n                if (nx >= 0 && nx <= rId && ny >= 0 && ny <= cId && grid[nx][ny] != 1) {\n                    if (nx == tx && ny == ty) {\n                        return true;\n                    }\n                    queue.offer(new int[]{nx, ny});\n                    grid[nx][ny] = 1;\n                }\n            }\n        }\n        return false;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    const int BOUNDARY = 1000000;\n    int[][] dirs = {new int[]{0, 1}, new int[]{0, -1}, new int[]{1, 0}, new int[]{-1, 0}};\n\n    public bool IsEscapePossible(int[][] blocked, int[] source, int[] target) {\n    　　if (blocked.Length < 2) {\n            return true;\n        }\n        ISet<int> rowsSet = new HashSet<int>();\n        ISet<int> columnsSet = new HashSet<int>();\n        List<int> rows = new List<int>();\n        List<int> columns = new List<int>();\n        // 离散化\n        foreach (int[] pos in blocked) {\n            if (rowsSet.Add(pos[0])) {\n                rows.Add(pos[0]);\n            }\n            if (columnsSet.Add(pos[1])) {\n                columns.Add(pos[1]);\n            }\n        }\n        if (rowsSet.Add(source[0])) {\n            rows.Add(source[0]);\n        }\n        if (rowsSet.Add(target[0])) {\n            rows.Add(target[0]);\n        }\n        if (columnsSet.Add(source[1])) {\n            columns.Add(source[1]);\n        }\n        if (columnsSet.Add(target[1])) {\n            columns.Add(target[1]);\n        }\n        rows.Sort();\n        columns.Sort();\n\n        Dictionary<int, int> rDictionary = new Dictionary<int, int>();\n        Dictionary<int, int> cDictionary = new Dictionary<int, int>();\n\n        int rId = (rows[0] == 0 ? 0 : 1);\n        rDictionary.Add(rows[0], rId);\n        for (int i = 1; i < rows.Count; ++i) {\n            rId += (rows[i] == rows[i - 1] + 1 ? 1 : 2);\n            rDictionary.Add(rows[i], rId);\n        }\n        if (rows[rows.Count - 1] != BOUNDARY - 1) {\n            ++rId;\n        }\n\n        int cId = (columns[0] == 0 ? 0 : 1);\n        cDictionary.Add(columns[0], cId);\n        for (int i = 1; i < columns.Count; ++i) {\n            cId += (columns[i] == columns[i - 1] + 1 ? 1 : 2);\n            cDictionary.Add(columns[i], cId);\n        }\n        if (columns[columns.Count - 1] != BOUNDARY - 1) {\n            ++cId;\n        }\n\n        int[][] grid = new int[rId + 1][];\n        for (int i = 0; i <= rId; ++i) {\n            grid[i] = new int[cId + 1];\n        }\n        foreach (int[] pos in blocked) {\n            int x = pos[0], y = pos[1];\n            grid[rDictionary[x]][cDictionary[y]] = 1;\n        }\n        \n        int sx = rDictionary[source[0]], sy = cDictionary[source[1]];\n        int tx = rDictionary[target[0]], ty = cDictionary[target[1]];\n\n        Queue<Tuple<int, int>> queue = new Queue<Tuple<int, int>>();\n        queue.Enqueue(new Tuple<int, int>(sx, sy));\n        grid[sx][sy] = 1;\n        while (queue.Count > 0) {\n            Tuple<int, int> tuple = queue.Dequeue();\n            int x = tuple.Item1, y = tuple.Item2;\n            for (int d = 0; d < 4; ++d) {\n                int nx = x + dirs[d][0], ny = y + dirs[d][1];\n                if (nx >= 0 && nx <= rId && ny >= 0 && ny <= cId && grid[nx][ny] != 1) {\n                    if (nx == tx && ny == ty) {\n                        return true;\n                    }\n                    queue.Enqueue(new Tuple<int, int>(nx, ny));\n                    grid[nx][ny] = 1;\n                }\n            }\n        }\n        return false;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def isEscapePossible(self, blocked: List[List[int]], source: List[int], target: List[int]) -> bool:\n        if len(blocked) < 2:\n            return True\n            \n        BOUNDARY = 10**6\n\n        # 离散化\n        rows = sorted(set(pos[0] for pos in blocked) | {source[0], target[0]})\n        columns = sorted(set(pos[1] for pos in blocked) | {source[1], target[1]})\n        r_mapping, c_mapping = dict(), dict()\n        \n\n        r_id = (0 if rows[0] == 0 else 1)\n        r_mapping[rows[0]] = r_id\n        for i in range(1, len(rows)):\n            r_id += (1 if rows[i] == rows[i - 1] + 1 else 2)\n            r_mapping[rows[i]] = r_id\n        if rows[-1] != BOUNDARY - 1:\n            r_id += 1\n\n        c_id = (0 if columns[0] == 0 else 1)\n        c_mapping[columns[0]] = c_id\n        for i in range(1, len(columns)):\n            c_id += (1 if columns[i] == columns[i - 1] + 1 else 2)\n            c_mapping[columns[i]] = c_id\n        if columns[-1] != BOUNDARY - 1:\n            c_id += 1\n\n        grid = [[0] * (c_id + 1) for _ in range(r_id + 1)]\n        for x, y in blocked:\n            grid[r_mapping[x]][c_mapping[y]] = 1\n        \n        sx, sy = r_mapping[source[0]], c_mapping[source[1]]\n        tx, ty = r_mapping[target[0]], c_mapping[target[1]]\n\n        q = deque([(sx, sy)])\n        grid[sx][sy] = 1\n        while q:\n            x, y = q.popleft()\n            for nx, ny in [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]:\n                if 0 <= nx <= r_id and 0 <= ny <= c_id and grid[nx][ny] != 1:\n                    if (nx, ny) == (tx, ty):\n                        return True\n                    q.append((nx, ny))\n                    grid[nx][ny] = 1\n        \n        return False\n```\n\n```go [sol2-Golang]\ntype pair struct{ x, y int }\nvar dirs = []pair{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\n// 离散化 a，返回的哈希表中的键值对分别为 a 中的原始值及其离散化后的对应值\nfunc discrete(a []int) (map[int]int, int) {\n    sort.Ints(a)\n\n    id := 0\n    if a[0] > 0 {\n        id = 1\n    }\n    mapping := map[int]int{a[0]: id}\n    pre := a[0]\n    for _, v := range a[1:] {\n        if v != pre {\n            if v == pre+1 {\n                id++\n            } else {\n                id += 2\n            }\n            mapping[v] = id\n            pre = v\n        }\n    }\n\n    const boundary int = 1e6\n    if a[len(a)-1] != boundary-1 {\n        id++\n    }\n\n    return mapping, id\n}\n\nfunc isEscapePossible(block [][]int, source, target []int) bool {\n    n := len(block)\n    if n < 2 {\n        return true\n    }\n    rows := []int{source[0], target[0]}\n    cols := []int{source[1], target[1]}\n    for _, b := range block {\n        rows = append(rows, b[0])\n        cols = append(cols, b[1])\n    }\n\n    // 离散化行列坐标\n    rMapping, rBound := discrete(rows)\n    cMapping, cBound := discrete(cols)\n\n    grid := make([][]bool, rBound+1)\n    for i := range grid {\n        grid[i] = make([]bool, cBound+1)\n    }\n    for _, b := range block {\n        grid[rMapping[b[0]]][cMapping[b[1]]] = true\n    }\n\n    sx, sy := rMapping[source[0]], cMapping[source[1]]\n    tx, ty := rMapping[target[0]], cMapping[target[1]]\n    grid[sx][sy] = true\n    q := []pair{{sx, sy}}\n    for len(q) > 0 {\n        p := q[0]\n        q = q[1:]\n        for _, d := range dirs {\n            x, y := p.x+d.x, p.y+d.y\n            if 0 <= x && x <= rBound && 0 <= y && y <= cBound && !grid[x][y] {\n                if x == tx && y == ty {\n                    return true\n                }\n                grid[x][y] = true\n                q = append(q, pair{x, y})\n            }\n        }\n    }\n    return false\n}\n```\n\n```C [sol2-C]\n#define BOUNDARY 1000000\n\nint dirs[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\nstruct Pair{\n    int x;\n    int y;\n};\n\nstruct HashEntry {\n    int key;                  \n    int val;\n    UT_hash_handle hh;         \n};\n\nvoid hashAddItem(struct HashEntry **obj, int key, int val) {\n    struct HashEntry *pEntry;\n    pEntry = malloc(sizeof(struct HashEntry));\n    pEntry->key = key;\n    pEntry->val = val;\n    HASH_ADD(hh, *obj, key, sizeof(int), pEntry);\n} \n\nstruct HashEntry *hashFindItem(struct HashEntry **obj, int key)\n{\n    struct HashEntry *pEntry = NULL;\n    HASH_FIND(hh, *obj, &key, sizeof(int), pEntry);\n    return pEntry;\n}\n\nint hashGetValue(struct HashEntry **obj, int key) {\n    struct HashEntry *pEntry = NULL;\n    HASH_FIND(hh, *obj, &key, sizeof(int), pEntry);\n    return pEntry->val;\n}\n\nvoid hashEraseItem(struct HashEntry **obj, int key)\n{   \n    struct HashEntry *pEntry = NULL;\n    HASH_FIND(hh, *obj, &key, sizeof(int), pEntry);\n    if (NULL != pEntry) {\n        HASH_DEL(*obj, pEntry);\n        free(pEntry);\n    } \n}\n\nvoid hashFreeAll(struct HashEntry **obj)\n{\n    struct HashEntry *curr, *next;\n    HASH_ITER(hh, *obj, curr, next)\n    {\n        HASH_DEL(*obj, curr);  \n        free(curr);      \n    }\n}\n\nint cmp(const void * pa, const void * pb) {\n    int a = *((int *)pa);\n    int b = *((int *)pb);\n    return a - b;\n}\n\nint unique(int ** arr, int arrSize) {\n    int pos = 0;\n    int * p = *arr;\n    qsort(*arr, arrSize, sizeof(int), cmp);\n    for (int i = 1; i < arrSize; i++) {\n        if(p[i] > p[pos]) {\n            pos++;\n            p[pos] = p[i];\n        }\n    }\n    return pos + 1;\n}\n\nbool isEscapePossible(int** blocked, int blockedSize, int* blockedColSize, int* source, int sourceSize, int* target, int targetSize){\n    if (blockedSize < 2) {\n        return true;\n    }\n    int * rows = (int *)malloc(sizeof(int) * (blockedSize + 2));\n    int * columns = (int *)malloc(sizeof(int) * (blockedSize + 2));\n    for (int i = 0; i < blockedSize; i++) {\n        rows[i] = blocked[i][0];\n        columns[i] = blocked[i][1];\n    }\n    rows[blockedSize] = source[0];\n    rows[blockedSize + 1] = target[0];\n    columns[blockedSize] = source[1];\n    columns[blockedSize + 1] = target[1];\n    \n    // 离散化\n    int rowsSize = unique(&rows, blockedSize + 2);\n    int columnsSize = unique(&columns, blockedSize + 2);\n    struct HashEntry * r_mapping = NULL;\n    struct HashEntry * c_mapping = NULL;\n\n    int r_id = (rows[0] == 0 ? 0 : 1);\n    hashAddItem(&r_mapping, rows[0], r_id);\n    for (int i = 1; i < rowsSize; i++) {\n        r_id += (rows[i] == rows[i - 1] + 1 ? 1 : 2);\n        hashAddItem(&r_mapping, rows[i], r_id);\n    }\n    if (rows[rowsSize - 1] != BOUNDARY - 1) {\n        r_id++;\n    }\n\n    int c_id = (columns[0] == 0 ? 0 : 1);\n    hashAddItem(&c_mapping, columns[0], c_id);\n    for (int i = 1; i < columnsSize; ++i) {\n        c_id += (columns[i] == columns[i - 1] + 1 ? 1 : 2);\n        hashAddItem(&c_mapping, columns[i], c_id);\n    }\n    if (columns[columnsSize - 1] != BOUNDARY - 1) {\n        c_id++;\n    }\n\n    int ** grid = (int **)malloc(sizeof(int *) * (r_id + 1));\n    for (int i = 0; i <= r_id; i++) {\n        grid[i] = (int *)malloc(sizeof(int) * (c_id + 1));\n    }\n    for (int i = 0; i < blockedSize; i++) {\n         int x = hashGetValue(&r_mapping, blocked[i][0]);\n         int y = hashGetValue(&c_mapping, blocked[i][1]);\n         grid[x][y] = 1;\n    }\n    \n    int sx = hashGetValue(&r_mapping, source[0]);\n    int sy = hashGetValue(&c_mapping, source[1]);\n    int tx = hashGetValue(&r_mapping, target[0]);\n    int ty = hashGetValue(&c_mapping, target[1]);\n\n    struct Pair * queue = (struct Pair *)malloc(sizeof(struct Pair) * c_id * r_id * 4);\n    int head = 0, tail = 0;\n    queue[tail].x = sx;\n    queue[tail].y = sy;\n    tail++;\n    grid[sx][sy] = 1;\n    while (head != tail) {\n        int x = queue[head].x;\n        int y = queue[head].y;\n        head++;\n        for (int d = 0; d < 4; ++d) {\n            int nx = x + dirs[d][0], ny = y + dirs[d][1];\n            if (nx >= 0 && nx <= r_id && ny >= 0 && ny <= c_id && grid[nx][ny] != 1) {\n                if (nx == tx && ny == ty) {\n                    hashFreeAll(&r_mapping);\n                    hashFreeAll(&c_mapping);\n                    free(rows);\n                    free(columns);\n                    free(queue);\n                    return true;\n                }\n                queue[tail].x = nx;\n                queue[tail].y = ny;\n                tail++;\n                grid[nx][ny] = 1;\n            }\n        }\n    }\n    \n    hashFreeAll(&r_mapping);\n    hashFreeAll(&c_mapping);\n    free(rows);\n    free(columns);\n    free(queue);\n    return false;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\\textit{block}$ 的长度。我们需要 $O(n^2)$ 的时间进行广度优先搜索，此外所有的步骤的时间复杂度在渐进意义下小于 $O(n^2)$。\n\n- 空间复杂度：$O(n^2)$，即为新的网格需要使用的空间，此外所有的额外空间在渐进意义下小于 $O(n^2)$。\n\n#### 结语\n\n除了基于广度优先搜索的方法外，本题还有时间复杂度更优（例如可以达到 $O(n)$ 线性时间复杂度）的，基于「交点数判定」的方法。这种方法的精髓在于：如果 $\\textit{source}$ 和 $\\textit{target}$ 相互可达，那么任意一条从 $\\textit{source}$ 到 $\\textit{target}$ 的路径（可以直接越过障碍），以及任意一个「包围圈」，「进入」该「包围圈」和「离开」该「包围圈」的次数必须相等。我们可以这样理解：如果路径从外界进入了某一个「包围圈」，那么它必须在未来的某一时刻再离开该「包围圈」并返回外界，否则它就被困在该「包围圈」内部了。同理，如果路径离开了某一个「包围圈」，那么它必须在未来的某一时刻再从外界进入该「包围圈」。\n\n因此，我们可以随意挑选一条从 $\\textit{source}$ 到 $\\textit{target}$ 的路径（最简单的路径就是先水平走到与 $\\textit{target}$ 同一列的位置，再竖直走到 $\\textit{target}$），并统计这条路径上进入「包围圈」和离开「包围圈」的次数，不同的「包围圈」需要分别进行统计。无论是进入「包围圈」还是离开「包围圈」，它在路径上的表现形式均为，上一个非障碍的位置在包围圈外（内）侧，而当前非障碍的位置在包围圈内（外）侧，也就是说：**上一个非障碍的位置与当前非障碍的位置不连通**。我们可以使用并查集维护「包围圈」本身的连通性，而由于我们需要考虑的非障碍位置一定是与障碍相邻的，因此同样使用并查集维护所有障碍的上下左右四连通的非障碍位置的连通性。这样一来，我们就可以知道上一个非障碍的位置与当前非障碍的位置是否连通了。\n\n由于进入「包围圈」和离开「包围圈」（对于同一个「包围圈」而言）一定是交替出现的，因此我们只需要统计进入「包围圈」和离开「包围圈」的次数之和即可，而不需要区分究竟是进入还是离开。我们需要保证每一个「包围圈」的次数之和均为偶数。\n\n这种方法过于复杂且思维难度和编码难度都较大，因此这里不给出具体的代码实现。感兴趣的读者可以参考其它题解。"
}