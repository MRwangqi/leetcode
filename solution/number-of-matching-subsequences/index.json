{
	"titleSlug": "number-of-matching-subsequences",
	"slug": "pi-pei-zi-xu-lie-de-dan-ci-shu-by-leetcode",
	"url": "https://leetcode-cn.com/problems/number-of-matching-subsequences/solution/pi-pei-zi-xu-lie-de-dan-ci-shu-by-leetcode/",
	"content": "#### 方法一：暴力解法【超出时间限制】\n\n**思路和算法**\n\n在 `S` 上遍历每个 `word`，首先找到第一个字母 `word[0]`，然后接着找第二个字母 `word[1]`，以此类推，直到在 `S` 中找到 `word` 的全部字母为止。\n\n```java [solution1-Java]\nclass Solution {\n    char[] ca, cb;\n    public int numMatchingSubseq(String S, String[] words) {\n        int ans = 0;\n        ca = S.toCharArray();\n        for (String word: words)\n            if (subseq(word)) ans++;\n        return ans;\n    }\n\n    public boolean subseq(String word) {\n        int i = 0;\n        cb = word.toCharArray();\n        for (char c: ca) {\n            if (i < cb.length && c == cb[i]) i++;\n        }\n        return (i == cb.length);\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def numMatchingSubseq(self, S, words):\n        def subseq(word):\n           it = iter(S)\n           return all(x in it for x in word)\n\n        return sum(subseq(word) for word in words)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\text{words.length} * S\\text{.length} + \\sum_i \\text{words[i].length})$，`subseq` 在 `S` 上遍历每个 `word[i]` 的时间复杂度为 $O(S\\text{.length} + \\text{words[i].length})$。\n\n* 空间复杂度：$O(1)$。在 Java 中空间复杂度为 $O(S\\text{.length} + \\text{max(words[i].length)})$，但是如果使用指针可以实现 $O(1)$ 的空间复杂度。\n\n#### 方法二：指向下一个字母的指针【通过】\n\n**思路**\n\n因为 `S` 很长，所以寻找一种只需遍历一次 `S` 的方法，避免暴力解法的多次遍历。\n\n将所有单词根据首字母不同放入不同的桶中。例如当 `words = ['dog', 'cat', 'cop']`，根据首字母不同可以分为 `'c' : ('cat', 'cop'), 'd' : ('dog',)`。换句话说，每个桶中的单词就是该单词正在等待匹配的下一个字母。在遍历 `S` 的同时，将匹配到单词根据下一个需要匹配的字母移动到不同的桶中。\n\n例如，有字符串 `S = 'dcaog'`：\n\n* 初始化 `heads = 'c' : ('cat', 'cop'), 'd' : ('dog',)`；\n* 遍历 `S[0] = 'd'` 后，`heads = 'c' : ('cat', 'cop'), 'o' : ('og',)`； \n* 遍历 `S[1] = 'c'` 后，`heads = 'a' : ('at',), 'o' : ('og', 'op')`；\n* 遍历 `S[2] = 'a'` 后，`heads = 'o' : ('og', 'op'), 't': ('t',)` ;\n* 遍历 `S[3] = 'o'` 后，`heads = 'g' : ('g',), 'p': ('p',), 't': ('t',)`；\n* 遍历 `S[0] = 'g'` 后，`heads = 'p': ('p',), 't': ('t',)`。\n\n**算法**\n\n使用长度为 `26` 的数组 `heads` 做桶，每个字母对应一个桶。访问 `S` 中的每个字母时，将该字母对应桶中的所有单词，根据下一个等待匹配字母放入到不同的桶中。如果已经匹配到单词的最后一个字母，那么子序列单词数加 1。\n\n```java [solution2-Java]\nclass Solution {\n    public int numMatchingSubseq(String S, String[] words) {\n        int ans = 0;\n        ArrayList<Node>[] heads = new ArrayList[26];\n        for (int i = 0; i < 26; ++i)\n            heads[i] = new ArrayList<Node>();\n\n        for (String word: words)\n            heads[word.charAt(0) - 'a'].add(new Node(word, 0));\n\n        for (char c: S.toCharArray()) {\n            ArrayList<Node> old_bucket = heads[c - 'a'];\n            heads[c - 'a'] = new ArrayList<Node>();\n\n            for (Node node: old_bucket) {\n                node.index++;\n                if (node.index == node.word.length()) {\n                    ans++;\n                } else {\n                    heads[node.word.charAt(node.index) - 'a'].add(node);\n                }\n            }\n            old_bucket.clear();\n        }\n        return ans;\n    }\n\n}\n\nclass Node {\n    String word;\n    int index;\n    public Node(String w, int i) {\n        word = w;\n        index = i;\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution(object):\n    def numMatchingSubseq(self, S, words):\n        ans = 0\n        heads = [[] for _ in xrange(26)]\n        for word in words:\n            it = iter(word)\n            heads[ord(next(it)) - ord('a')].append(it)\n\n        for letter in S:\n            letter_index = ord(letter) - ord('a')\n            old_bucket = heads[letter_index]\n            heads[letter_index] = []\n\n            while old_bucket:\n                it = old_bucket.pop()\n                nxt = next(it, None)\n                if nxt:\n                    heads[ord(nxt) - ord('a')].append(it)\n                else:\n                    ans += 1\n\n        return ans\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(S\\text{.length} + \\sum_i \\text{words[i].length})$。\n\n* 空间复杂度：$O(\\text{words.length})$。在 Java 中使用的额外空间为 $O(\\sum_i \\text{words[i].length})$，但是如果使用指针可以实现 $O(\\text{words.length})$ 的空间复杂度。"
}