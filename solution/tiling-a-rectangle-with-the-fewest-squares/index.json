{
	"titleSlug": "tiling-a-rectangle-with-the-fewest-squares",
	"slug": "er-xu-cheng-ming-jiu-xu-zui-python3shen-o878z",
	"url": "https://leetcode-cn.com/problems/tiling-a-rectangle-with-the-fewest-squares/solution/er-xu-cheng-ming-jiu-xu-zui-python3shen-o878z/",
	"content": "### 解题思路\nPython3+深度优先搜索+前缀和+回溯+剪枝\n\n### 代码\n\n```python3\n\nfrom functools import lru_cache\n\n\n@lru_cache(None)\ndef bound(n, m):\n    if n > m:\n        m, n = n, m\n    if n == m:\n        return 1\n    return 1+bound(n, m-n)\n\n\nclass Solution:\n    def tilingRectangle(self, n: int, m: int) -> int:\n        # 模拟数组为0时为分割为1时表示已经参与分割\n        lst = [[0]*n for _ in range(m)]\n        # 按照最简单的方法确定一个上界\n        self.ans = bound(n, m)\n        # 使用深搜进行分割实验\n        def dfs(pre):\n            # 剪枝\n            if pre >= self.ans:\n                return\n            # 使用前缀和进行可能分割的长度确认\n            dp = [[0]*(n+1) for _ in range(m+1)]\n            for i in range(m):\n                for j in range(n):\n                    dp[i+1][j+1] = dp[i+1][j]+dp[i][j+1] - dp[i][j] + lst[i][j]\n            # 分割完成则退出\n            if dp[-1][-1] == m*n:\n                self.ans = min(self.ans, pre)\n                return\n            # 找寻第一个没有分割即为0的点作为顶点进行切割\n            for i in range(m):\n                for j in range(n):\n                    if not lst[i][j]:\n                        # 优先进行大长度切割\n                        length = [le for le in range(1, min(m-i+1, n-j+1)) if dp[i+le][j+le]-dp[i+le][j]-dp[i][j+le]+dp[i][j]==0]\n                        for le in length[::-1]:\n                            # 使用回溯进行跟踪\n                            for k in range(i, i+le):\n                                for p in range(j, j+le):\n                                    lst[k][p] = 1\n                            dfs(pre+1)\n                            for k in range(i, i+le):\n                                for p in range(j, j+le):\n                                    lst[k][p] = 0\n                        return\n\n            return\n        dfs(0)\n        return self.ans\n```"
}