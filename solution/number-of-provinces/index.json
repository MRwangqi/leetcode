{
	"titleSlug": "number-of-provinces",
	"slug": "sheng-fen-shu-liang-by-leetcode-solution-eyk0",
	"url": "https://leetcode-cn.com/problems/number-of-provinces/solution/sheng-fen-shu-liang-by-leetcode-solution-eyk0/",
	"content": "#### 前言\n\n可以把 $n$ 个城市和它们之间的相连关系看成图，城市是图中的节点，相连关系是图中的边，给定的矩阵 $\\textit{isConnected}$ 即为图的邻接矩阵，省份即为图中的连通分量。\n\n计算省份总数，等价于计算图中的连通分量数，可以通过深度优先搜索或广度优先搜索实现，也可以通过并查集实现。\n\n#### 方法一：深度优先搜索\n\n深度优先搜索的思路是很直观的。遍历所有城市，对于每个城市，如果该城市尚未被访问过，则从该城市开始深度优先搜索，通过矩阵 $\\textit{isConnected}$ 得到与该城市直接相连的城市有哪些，这些城市和该城市属于同一个连通分量，然后对这些城市继续深度优先搜索，直到同一个连通分量的所有城市都被访问到，即可得到一个省份。遍历完全部城市以后，即可得到连通分量的总数，即省份的总数。\n\n```Java [sol1-Java]\nclass Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int cities = isConnected.length;\n        boolean[] visited = new boolean[cities];\n        int provinces = 0;\n        for (int i = 0; i < cities; i++) {\n            if (!visited[i]) {\n                dfs(isConnected, visited, cities, i);\n                provinces++;\n            }\n        }\n        return provinces;\n    }\n\n    public void dfs(int[][] isConnected, boolean[] visited, int cities, int i) {\n        for (int j = 0; j < cities; j++) {\n            if (isConnected[i][j] == 1 && !visited[j]) {\n                visited[j] = true;\n                dfs(isConnected, visited, cities, j);\n            }\n        }\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findCircleNum = function(isConnected) {\n    const cities = isConnected.length;\n    const visited = new Set();\n    let provinces = 0;\n    for (let i = 0; i < cities; i++) {\n        if (!visited.has(i)) {\n            dfs(isConnected, visited, cities, i);\n            provinces++;\n        }\n    }\n    return provinces;\n};\n\nconst dfs = (isConnected, visited, cities, i) => {\n    for (let j = 0; j < cities; j++) {\n        if (isConnected[i][j] == 1 && !visited.has(j)) {\n            visited.add(j);\n            dfs(isConnected, visited, cities, j);\n        }\n    }\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void dfs(vector<vector<int>>& isConnected, vector<int>& visited, int cities, int i) {\n        for (int j = 0; j < cities; j++) {\n            if (isConnected[i][j] == 1 && !visited[j]) {\n                visited[j] = 1;\n                dfs(isConnected, visited, cities, j);\n            }\n        }\n    }\n\n    int findCircleNum(vector<vector<int>>& isConnected) {\n        int cities = isConnected.size();\n        vector<int> visited(cities);\n        int provinces = 0;\n        for (int i = 0; i < cities; i++) {\n            if (!visited[i]) {\n                dfs(isConnected, visited, cities, i);\n                provinces++;\n            }\n        }\n        return provinces;\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc findCircleNum(isConnected [][]int) (ans int) {\n    vis := make([]bool, len(isConnected))\n    var dfs func(int)\n    dfs = func(from int) {\n        vis[from] = true\n        for to, conn := range isConnected[from] {\n            if conn == 1 && !vis[to] {\n                dfs(to)\n            }\n        }\n    }\n    for i, v := range vis {\n        if !v {\n            ans++\n            dfs(i)\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nvoid dfs(int** isConnected, int* visited, int cities, int i) {\n    for (int j = 0; j < cities; j++) {\n        if (isConnected[i][j] == 1 && !visited[j]) {\n            visited[j] = 1;\n            dfs(isConnected, visited, cities, j);\n        }\n    }\n}\n\nint findCircleNum(int** isConnected, int isConnectedSize, int* isConnectedColSize) {\n    int cities = isConnectedSize;\n    int visited[cities];\n    memset(visited, 0, sizeof(visited));\n    int provinces = 0;\n    for (int i = 0; i < cities; i++) {\n        if (!visited[i]) {\n            dfs(isConnected, visited, cities, i);\n            provinces++;\n        }\n    }\n    return provinces;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n        def dfs(i: int):\n            for j in range(cities):\n                if isConnected[i][j] == 1 and j not in visited:\n                    visited.add(j)\n                    dfs(j)\n        \n        cities = len(isConnected)\n        visited = set()\n        provinces = 0\n\n        for i in range(cities):\n            if i not in visited:\n                dfs(i)\n                provinces += 1\n        \n        return provinces\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是城市的数量。需要遍历矩阵 $n$ 中的每个元素。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是城市的数量。需要使用数组 $\\textit{visited}$ 记录每个城市是否被访问过，数组长度是 $n$，递归调用栈的深度不会超过 $n$。\n\n#### 方法二：广度优先搜索\n\n也可以通过广度优先搜索的方法得到省份的总数。对于每个城市，如果该城市尚未被访问过，则从该城市开始广度优先搜索，直到同一个连通分量中的所有城市都被访问到，即可得到一个省份。\n\n```Java [sol2-Java]\nclass Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int cities = isConnected.length;\n        boolean[] visited = new boolean[cities];\n        int provinces = 0;\n        Queue<Integer> queue = new LinkedList<Integer>();\n        for (int i = 0; i < cities; i++) {\n            if (!visited[i]) {\n                queue.offer(i);\n                while (!queue.isEmpty()) {\n                    int j = queue.poll();\n                    visited[j] = true;\n                    for (int k = 0; k < cities; k++) {\n                        if (isConnected[j][k] == 1 && !visited[k]) {\n                            queue.offer(k);\n                        }\n                    }\n                }\n                provinces++;\n            }\n        }\n        return provinces;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findCircleNum = function(isConnected) {\n    const cities = isConnected.length;\n    const visited = new Set();\n    let provinces = 0;\n    const queue = new Array();\n    for (let i = 0; i < cities; i++) {\n        if (!visited.has(i)) {\n            queue.push(i);\n            while (queue.length) {\n                const j = queue.shift();\n                visited.add(j);\n                for (let k = 0; k < cities; k++) {\n                    if (isConnected[j][k] === 1 && !visited.has(k)) {\n                        queue.push(k);\n                    }\n                }\n            }\n            provinces++;\n        }\n    }\n    return provinces;\n};\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int findCircleNum(vector<vector<int>>& isConnected) {\n        int cities = isConnected.size();\n        vector<int> visited(cities);\n        int provinces = 0;\n        queue<int> Q;\n        for (int i = 0; i < cities; i++) {\n            if (!visited[i]) {\n                Q.push(i);\n                while (!Q.empty()) {\n                    int j = Q.front(); Q.pop();\n                    visited[j] = 1;\n                    for (int k = 0; k < cities; k++) {\n                        if (isConnected[j][k] == 1 && !visited[k]) {\n                            Q.push(k);\n                        }\n                    }\n                }\n                provinces++;\n            }\n        }\n        return provinces;\n    }\n};\n```\n\n```go [sol2-Golang]\nfunc findCircleNum(isConnected [][]int) (ans int) {\n    vis := make([]bool, len(isConnected))\n    for i, v := range vis {\n        if !v {\n            ans++\n            queue := []int{i}\n            for len(queue) > 0 {\n                from := queue[0]\n                queue = queue[1:]\n                vis[from] = true\n                for to, conn := range isConnected[from] {\n                    if conn == 1 && !vis[to] {\n                        queue = append(queue, to)\n                    }\n                }\n            }\n        }\n    }\n    return\n}\n```\n\n```C [sol2-C]\nint findCircleNum(int** isConnected, int isConnectedSize, int* isConnectedColSize) {\n    int cities = isConnectedSize;\n    int visited[cities];\n    memset(visited, 0, sizeof(visited));\n    int provinces = 0;\n    int que[cities * cities];\n    int left = 0, right = 0;\n    for (int i = 0; i < cities; i++) {\n        if (!visited[i]) {\n            que[right++] = i;\n            while (left < right) {\n                int j = que[left++];\n                visited[j] = true;\n                for (int k = 0; k < cities; k++) {\n                    if (isConnected[j][k] == 1 && !visited[k]) {\n                        que[right++] = k;\n                    }\n                }\n            }\n            provinces++;\n        }\n    }\n    return provinces;\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n        cities = len(isConnected)\n        visited = set()\n        provinces = 0\n        \n        for i in range(cities):\n            if i not in visited:\n                Q = collections.deque([i])\n                while Q:\n                    j = Q.popleft()\n                    visited.add(j)\n                    for k in range(cities):\n                        if isConnected[j][k] == 1 and k not in visited:\n                            Q.append(k)\n                provinces += 1\n        \n        return provinces\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是城市的数量。需要遍历矩阵 $\\textit{isConnected}$ 中的每个元素。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是城市的数量。需要使用数组 $\\textit{visited}$ 记录每个城市是否被访问过，数组长度是 $n$，广度优先搜索使用的队列的元素个数不会超过 $n$。\n\n#### 方法三：并查集\n\n计算连通分量数的另一个方法是使用并查集。初始时，每个城市都属于不同的连通分量。遍历矩阵 $\\textit{isConnected}$，如果两个城市之间有相连关系，则它们属于同一个连通分量，对它们进行合并。\n\n遍历矩阵 $\\textit{isConnected}$ 的全部元素之后，计算连通分量的总数，即为省份的总数。\n\n```Java [sol3-Java]\nclass Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int cities = isConnected.length;\n        int[] parent = new int[cities];\n        for (int i = 0; i < cities; i++) {\n            parent[i] = i;\n        }\n        for (int i = 0; i < cities; i++) {\n            for (int j = i + 1; j < cities; j++) {\n                if (isConnected[i][j] == 1) {\n                    union(parent, i, j);\n                }\n            }\n        }\n        int provinces = 0;\n        for (int i = 0; i < cities; i++) {\n            if (parent[i] == i) {\n                provinces++;\n            }\n        }\n        return provinces;\n    }\n\n    public void union(int[] parent, int index1, int index2) {\n        parent[find(parent, index1)] = find(parent, index2);\n    }\n\n    public int find(int[] parent, int index) {\n        if (parent[index] != index) {\n            parent[index] = find(parent, parent[index]);\n        }\n        return parent[index];\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar findCircleNum = function(isConnected) {\n    const cities = isConnected.length;\n    const parent = new Array(cities).fill(0)\n                                       .map((element, index) => index);\n\n    for (let i = 0; i < cities; i++) {\n        for (let j = i + 1; j < cities; j++) {\n            if (isConnected[i][j] == 1) {\n                union(parent, i, j);\n            }\n        }\n    }\n    let provinces = 0;\n    parent.forEach((element, index) => {\n        if (element === index) {\n            provinces++;\n        }\n    });\n\n    return provinces;\n};\n\nconst union = (parent, index1, index2) => {\n    parent[find(parent, index1)] = find(parent, index2);\n}\n\nconst find = (parent, index) => {\n    if (parent[index] !== index) {\n        parent[index] = find(parent, parent[index]);\n    }\n    return parent[index];\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int Find(vector<int>& parent, int index) {\n        if (parent[index] != index) {\n            parent[index] = Find(parent, parent[index]);\n        }\n        return parent[index];\n    }\n\n    void Union(vector<int>& parent, int index1, int index2) {\n        parent[Find(parent, index1)] = Find(parent, index2);\n    }\n\n    int findCircleNum(vector<vector<int>>& isConnected) {\n        int cities = isConnected.size();\n        vector<int> parent(cities);\n        for (int i = 0; i < cities; i++) {\n            parent[i] = i;\n        }\n        for (int i = 0; i < cities; i++) {\n            for (int j = i + 1; j < cities; j++) {\n                if (isConnected[i][j] == 1) {\n                    Union(parent, i, j);\n                }\n            }\n        }\n        int provinces = 0;\n        for (int i = 0; i < cities; i++) {\n            if (parent[i] == i) {\n                provinces++;\n            }\n        }\n        return provinces;\n    }\n};\n```\n\n```go [sol3-Golang]\nfunc findCircleNum(isConnected [][]int) (ans int) {\n    n := len(isConnected)\n    parent := make([]int, n)\n    for i := range parent {\n        parent[i] = i\n    }\n    var find func(int) int\n    find = func(x int) int {\n        if parent[x] != x {\n            parent[x] = find(parent[x])\n        }\n        return parent[x]\n    }\n    union := func(from, to int) {\n        parent[find(from)] = find(to)\n    }\n\n    for i, row := range isConnected {\n        for j := i + 1; j < n; j++ {\n            if row[j] == 1 {\n                union(i, j)\n            }\n        }\n    }\n    for i, p := range parent {\n        if i == p {\n            ans++\n        }\n    }\n    return\n}\n```\n\n```C [sol3-C]\nint Find(int* parent, int index) {\n    if (parent[index] != index) {\n        parent[index] = Find(parent, parent[index]);\n    }\n    return parent[index];\n}\n\nvoid Union(int* parent, int index1, int index2) {\n    parent[Find(parent, index1)] = Find(parent, index2);\n}\n\nint findCircleNum(int** isConnected, int isConnectedSize, int* isConnectedColSize) {\n    int cities = isConnectedSize;\n    int parent[cities];\n    for (int i = 0; i < cities; i++) {\n        parent[i] = i;\n    }\n    for (int i = 0; i < cities; i++) {\n        for (int j = i + 1; j < cities; j++) {\n            if (isConnected[i][j] == 1) {\n                Union(parent, i, j);\n            }\n        }\n    }\n    int provinces = 0;\n    for (int i = 0; i < cities; i++) {\n        if (parent[i] == i) {\n            provinces++;\n        }\n    }\n    return provinces;\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n        def find(index: int) -> int:\n            if parent[index] != index:\n                parent[index] = find(parent[index])\n            return parent[index]\n        \n        def union(index1: int, index2: int):\n            parent[find(index1)] = find(index2)\n        \n        cities = len(isConnected)\n        parent = list(range(cities))\n        \n        for i in range(cities):\n            for j in range(i + 1, cities):\n                if isConnected[i][j] == 1:\n                    union(i, j)\n        \n        provinces = sum(parent[i] == i for i in range(cities))\n        return provinces\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2 \\log n)$，其中 $n$ 是城市的数量。需要遍历矩阵 $\\textit{isConnected}$ 中的所有元素，时间复杂度是 $O(n^2)$，如果遇到相连关系，则需要进行 $2$ 次查找和最多 $1$ 次合并，一共需要进行 $2n^2$ 次查找和最多 $n^2$ 次合并，因此总时间复杂度是 $O(2n^2 \\log n^2)=O(n^2 \\log n)$。这里的并查集使用了路径压缩，但是没有使用按秩合并，最坏情况下的时间复杂度是 $O(n^2 \\log n)$，平均情况下的时间复杂度依然是 $O(n^2 \\alpha (n))$，其中 $\\alpha$ 为阿克曼函数的反函数，$\\alpha (n)$ 可以认为是一个很小的常数。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是城市的数量。需要使用数组 $\\textit{parent}$ 记录每个城市所属的连通分量的祖先。"
}