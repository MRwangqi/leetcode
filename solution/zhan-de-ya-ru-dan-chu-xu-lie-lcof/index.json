{
	"titleSlug": "zhan-de-ya-ru-dan-chu-xu-lie-lcof",
	"slug": "zhan-de-ya-ru-dan-chu-xu-lie-by-leetcode-6myl",
	"url": "https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/solution/zhan-de-ya-ru-dan-chu-xu-lie-by-leetcode-6myl/",
	"content": "#### 方法一：栈模拟\n\n这道题需要利用给定的两个数组 $\\textit{pushed}$ 和 $\\textit{popped}$ 的如下性质：\n\n- 数组 $\\textit{pushed}$ 中的元素互不相同；\n\n- 数组 $\\textit{popped}$ 和数组 $\\textit{pushed}$ 的长度相同；\n\n- 数组 $\\textit{popped}$ 是数组 $\\textit{pushed}$ 的一个排列。\n\n根据上述性质，可以得到如下结论：\n\n- 栈内不可能出现重复元素；\n\n- 如果 $\\textit{pushed}$ 和 $\\textit{popped}$ 是有效的栈操作序列，则经过所有的入栈和出栈操作之后，每个元素各入栈和出栈一次，栈为空。\n\n因此，可以遍历两个数组，模拟入栈和出栈操作，判断两个数组是否为有效的栈操作序列。\n\n模拟入栈操作可以通过遍历数组 $\\textit{pushed}$ 实现。由于只有栈顶的元素可以出栈，因此模拟出栈操作需要判断栈顶元素是否与 $\\textit{popped}$ 的当前元素相同，如果相同则将栈顶元素出栈。由于元素互不相同，因此当栈顶元素与 $\\textit{popped}$ 的当前元素相同时必须将栈顶元素出栈，否则出栈顺序一定不等于 $\\textit{popped}$。\n\n根据上述分析，验证栈序列的模拟做法如下：\n\n1. 遍历数组 $\\textit{pushed}$，将 $\\textit{pushed}$ 的每个元素依次入栈；\n\n2. 每次将 $\\textit{pushed}$ 的元素入栈之后，如果栈不为空且栈顶元素与 $\\textit{popped}$ 的当前元素相同，则将栈顶元素出栈，同时遍历数组 $\\textit{popped}$，直到栈为空或栈顶元素与 $\\textit{popped}$ 的当前元素不同。\n\n遍历数组 $\\textit{pushed}$ 结束之后，每个元素都按照数组 $\\textit{pushed}$ 的顺序入栈一次。如果栈为空，则每个元素都按照数组 $\\textit{popped}$ 的顺序出栈，返回 $\\text{true}$。如果栈不为空，则元素不能按照数组 $\\textit{popped}$ 的顺序出栈，返回 $\\text{false}$。\n\n```Python [sol1-Python3]\nclass Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n        st, j = [], 0\n        for x in pushed:\n            st.append(x)\n            while st and st[-1] == popped[j]:\n                st.pop()\n                j += 1\n        return len(st) == 0\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean validateStackSequences(int[] pushed, int[] popped) {\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n        int n = pushed.length;\n        for (int i = 0, j = 0; i < n; i++) {\n            stack.push(pushed[i]);\n            while (!stack.isEmpty() && stack.peek() == popped[j]) {\n                stack.pop();\n                j++;\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool ValidateStackSequences(int[] pushed, int[] popped) {\n        Stack<int> stack = new Stack<int>();\n        int n = pushed.Length;\n        for (int i = 0, j = 0; i < n; i++) {\n            stack.Push(pushed[i]);\n            while (stack.Count > 0 && stack.Peek() == popped[j]) {\n                stack.Pop();\n                j++;\n            }\n        }\n        return stack.Count == 0;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {\n        stack<int> st;\n        int n = pushed.size();\n        for (int i = 0, j = 0; i < n; i++) {\n            st.emplace(pushed[i]);\n            while (!st.empty() && st.top() == popped[j]) {\n                st.pop();\n                j++;\n            }\n        }\n        return st.empty();\n    }\n};\n```\n\n```C [sol1-C]\nbool validateStackSequences(int* pushed, int pushedSize, int* popped, int poppedSize){\n    int *stack = (int *)malloc(sizeof(int) * pushedSize);\n    int top = 0;\n    for (int i = 0, j = 0; i < pushedSize; i++) {\n        stack[top++] = pushed[i];\n        while (top > 0 && stack[top - 1] == popped[j]) {\n            top--;\n            j++;\n        }\n    }\n    free(stack);\n    return top == 0;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar validateStackSequences = function(pushed, popped) {\n    const stack = [];\n    const n = pushed.length;\n    for (let i = 0, j = 0; i < n; i++) {\n        stack.push(pushed[i]);\n        while (stack.length && stack[stack.length - 1] == popped[j]) {\n            stack.pop();\n            j++;\n        }\n    }\n    return stack.length === 0;\n};\n```\n\n```go [sol1-Golang]\nfunc validateStackSequences(pushed, popped []int) bool {\n    st := []int{}\n    j := 0\n    for _, x := range pushed {\n        st = append(st, x)\n        for len(st) > 0 && st[len(st)-1] == popped[j] {\n            st = st[:len(st)-1]\n            j++\n        }\n    }\n    return len(st) == 0\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{pushed}$ 和 $\\textit{popped}$ 的长度。需要遍历数组 $\\textit{pushed}$ 和 $\\textit{popped}$ 各一次，判断两个数组是否为有效的栈操作序列。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{pushed}$ 和 $\\textit{popped}$ 的长度。空间复杂度主要取决于栈空间，栈内元素个数不超过 $n$。"
}