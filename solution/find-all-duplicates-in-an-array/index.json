{
	"titleSlug": "find-all-duplicates-in-an-array",
	"slug": "shu-zu-zhong-zhong-fu-de-shu-ju-by-leetc-782l",
	"url": "https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/solution/shu-zu-zhong-zhong-fu-de-shu-ju-by-leetc-782l/",
	"content": "#### 方法一：将元素交换到对应的位置\n\n**思路与算法**\n\n由于给定的 $n$ 个数都在 $[1, n]$ 的范围内，如果有数字出现了两次，就意味着 $[1,n]$ 中有数字没有出现过。\n\n因此，我们可以尝试将每一个数放在对应的位置。由于数组的下标范围是 $[0, n-1]$，我们需要将数 $i$ 放在数组中下标为 $i-1$ 的位置：\n\n- 如果 $i$ 恰好出现了一次，那么将 $i$ 放在数组中下标为 $i-1$ 的位置即可；\n- 如果 $i$ 出现了两次，那么我们希望其中的一个 $i$ 放在数组下标中为 $i-1$ 的位置，另一个 $i$ 放置在任意「不冲突」的位置 $j$。也就是说，数 $j+1$ 没有在数组中出现过。\n\n这样一来，如果我们按照上述的规则放置每一个数，那么我们只需要对数组进行一次遍历。当遍历到位置 $i$ 时，如果 $\\textit{nums}[i]-1 \\neq i$，说明 $\\textit{nums}[i]$ 出现了两次（另一次出现在位置 $\\textit{num}[i] - 1$），我们就可以将 $\\textit{num}[i]$ 放入答案。\n\n放置的方法也很直观：我们对数组进行一次遍历。当遍历到位置 $i$ 时，我们知道 $\\textit{nums}[i]$ 应该被放在位置 $\\textit{nums}[i] - 1$。因此我们交换 $\\textit{num}[i]$ 和 $\\textit{nums}[\\textit{nums}[i] - 1]$ 即可，直到待交换的两个元素相等为止。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        for i in range(len(nums)):\n            while nums[i] != nums[nums[i] - 1]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        return [num for i, num in enumerate(nums) if num - 1 != i]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> findDuplicates(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            while (nums[i] != nums[nums[i] - 1]) {\n                swap(nums[i], nums[nums[i] - 1]);\n            }\n        }\n        vector<int> ans;\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] - 1 != i) {\n                ans.push_back(nums[i]);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> findDuplicates(int[] nums) {\n        int n = nums.length;\n        for (int i = 0; i < n; ++i) {\n            while (nums[i] != nums[nums[i] - 1]) {\n                swap(nums, i, nums[i] - 1);\n            }\n        }\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] - 1 != i) {\n                ans.add(nums[i]);\n            }\n        }\n        return ans;\n    }\n\n    public void swap(int[] nums, int index1, int index2) {\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<int> FindDuplicates(int[] nums) {\n        int n = nums.Length;\n        for (int i = 0; i < n; ++i) {\n            while (nums[i] != nums[nums[i] - 1]) {\n                Swap(nums, i, nums[i] - 1);\n            }\n        }\n        IList<int> ans = new List<int>();\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] - 1 != i) {\n                ans.Add(nums[i]);\n            }\n        }\n        return ans;\n    }\n\n    public void Swap(int[] nums, int index1, int index2) {\n        int temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc findDuplicates(nums []int) (ans []int) {\n    for i := range nums {\n        for nums[i] != nums[nums[i]-1] {\n            nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]\n        }\n    }\n    for i, num := range nums {\n        if num-1 != i {\n            ans = append(ans, num)\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findDuplicates = function(nums) {\n    const swap = (nums, index1, index2) => {\n        const temp = nums[index1];\n        nums[index1] = nums[index2];\n        nums[index2] = temp;\n    };\n    const n = nums.length;\n    for (let i = 0; i < n; ++i) {\n        while (nums[i] != nums[nums[i] - 1]) {\n            swap(nums, i, nums[i] - 1);\n        }\n    }\n    const ans = [];\n    for (let i = 0; i < n; ++i) {\n        if (nums[i] - 1 !== i) {\n            ans.push(nums[i]);\n        }\n    }\n    return ans;\n}\n```\n\n```C [sol1-C]\nint* findDuplicates(int* nums, int numsSize, int* returnSize) {\n    for (int i = 0; i < numsSize; ++i) {\n        while (nums[i] != nums[nums[i] - 1]) {\n            int tmp = nums[i];\n            nums[i] = nums[tmp - 1];\n            nums[tmp - 1] = tmp;\n        }\n    }\n    int *ans = (int *)malloc(sizeof(int) * numsSize);\n    int pos = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        if (nums[i] - 1 != i) {\n            ans[pos++] = nums[i];\n        }\n    }\n    *returnSize = pos;\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。每一次交换操作会使得至少一个元素被交换到对应的正确位置，因此交换的次数为 $O(n)$，总时间复杂度为 $O(n)$。\n\n- 空间复杂度：$O(1)$。返回值不计入空间复杂度。\n\n#### 方法二：使用正负号作为标记\n\n**思路与算法**\n\n我们也可以给 $\\textit{nums}[i]$ 加上「负号」表示数 $i+1$ 已经出现过一次。具体地，我们首先对数组进行一次遍历。当遍历到位置 $i$ 时，我们考虑 $\\textit{nums}[\\textit{nums}[i] - 1]$ 的正负性：\n\n- 如果 $\\textit{nums}[\\textit{nums}[i] - 1]$ 是正数，说明 $\\textit{nums}[i]$ 还没有出现过，我们将 $\\textit{nums}[\\textit{nums}[i] - 1]$ 加上负号；\n\n- 如果 $\\textit{nums}[\\textit{nums}[i] - 1]$ 是负数，说明 $\\textit{nums}[i]$ 已经出现过一次，我们将 $\\textit{nums}[i]$ 放入答案。\n\n**细节**\n\n由于 $\\textit{nums}[i]$ 本身可能已经为负数，因此在将 $\\textit{nums}[i]$ 作为下标或者放入答案时，需要取绝对值。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def findDuplicates(self, nums: List[int]) -> List[int]:\n        ans = []\n        for x in nums:\n            x = abs(x)\n            if nums[x - 1] > 0:\n                nums[x - 1] = -nums[x - 1]\n            else:\n                ans.append(x)\n        return ans\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> findDuplicates(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> ans;\n        for (int i = 0; i < n; ++i) {\n            int x = abs(nums[i]);\n            if (nums[x - 1] > 0) {\n                nums[x - 1] = -nums[x - 1];\n            }\n            else {\n                ans.push_back(x);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Integer> findDuplicates(int[] nums) {\n        int n = nums.length;\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < n; ++i) {\n            int x = Math.abs(nums[i]);\n            if (nums[x - 1] > 0) {\n                nums[x - 1] = -nums[x - 1];\n            } else {\n                ans.add(x);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public IList<int> FindDuplicates(int[] nums) {\n        int n = nums.Length;\n        IList<int> ans = new List<int>();\n        for (int i = 0; i < n; ++i) {\n            int x = Math.Abs(nums[i]);\n            if (nums[x - 1] > 0) {\n                nums[x - 1] = -nums[x - 1];\n            } else {\n                ans.Add(x);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc findDuplicates(nums []int) (ans []int) {\n    for _, x := range nums {\n        if x < 0 {\n            x = -x\n        }\n        if nums[x-1] > 0 {\n            nums[x-1] = - nums[x-1]\n        } else {\n            ans = append(ans, x)\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findDuplicates = function(nums) {\n    const n = nums.length;\n    const ans = [];\n    for (let i = 0; i < n; ++i) {\n        const x = Math.abs(nums[i]);\n        if (nums[x - 1] > 0) {\n            nums[x - 1] = -nums[x - 1];\n        } else {\n            ans.push(x);\n        }\n    }\n    return ans;\n}\n```\n\n```C [sol2-C]\nint* findDuplicates(int* nums, int numsSize, int* returnSize) {    \n    int *ans = (int *)malloc(sizeof(int) * numsSize);\n    int pos = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        int x = abs(nums[i]);\n        if (nums[x - 1] > 0) {\n            nums[x - 1] = -nums[x - 1];\n        } else {\n            ans[pos++] = x;\n        }\n    }\n    *returnSize = pos;\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。我们只需要对数组 $\\textit{nums}$ 进行一次遍历。\n\n- 空间复杂度：$O(1)$。返回值不计入空间复杂度。"
}