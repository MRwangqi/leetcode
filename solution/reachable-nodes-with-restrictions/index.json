{
	"titleSlug": "reachable-nodes-with-restrictions",
	"slug": "by-endlesscheng-fg6o",
	"url": "https://leetcode-cn.com/problems/reachable-nodes-with-restrictions/solution/by-endlesscheng-fg6o/",
	"content": "[视频讲解](https://www.bilibili.com/video/BV1CN4y1V7uE) 已出炉，欢迎点赞三连，在评论区分享你对这场周赛的看法~\r\n\r\n--- \r\n \r\n用哈希表记录哪些节点是受限的，建图的时候只有当两个节点都不是受限的才连边。然后 DFS 这棵树，统计从 $0$ 出发能访问到的节点数，即为答案。\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def reachableNodes(self, n: int, edges: List[List[int]], restricted: List[int]) -> int:\r\n        r = set(restricted)\r\n        g = [[] for _ in range(n)]\r\n        for x, y in edges:\r\n            if x not in r and y not in r:\r\n                g[x].append(y)\r\n                g[y].append(x)\r\n        ans = 0\r\n        def dfs(x: int, fa: int) -> None:\r\n            nonlocal ans\r\n            ans += 1\r\n            for y in g[x]:\r\n                if y != fa:\r\n                    dfs(y, x)\r\n        dfs(0, -1)\r\n        return ans\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc reachableNodes(n int, edges [][]int, restricted []int) (ans int) {\r\n\tr := make(map[int]bool, len(restricted))\r\n\tfor _, x := range restricted {\r\n\t\tr[x] = true\r\n\t}\r\n\tg := make([][]int, n)\r\n\tfor _, e := range edges {\r\n\t\tx, y := e[0], e[1]\r\n\t\tif !r[x] && !r[y] {\r\n\t\t\tg[x] = append(g[x], y)\r\n\t\t\tg[y] = append(g[y], x)\r\n\t\t}\r\n\t}\r\n\tvar dfs func(int, int)\r\n\tdfs = func(x, fa int) {\r\n\t\tans++\r\n\t\tfor _, y := range g[x] {\r\n\t\t\tif y != fa {\r\n\t\t\t\tdfs(y, x)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tdfs(0, -1)\r\n\treturn\r\n}\r\n```\r\n"
}