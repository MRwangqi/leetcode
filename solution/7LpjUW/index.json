{
	"titleSlug": "7LpjUW",
	"slug": "duo-yu-de-bian-by-leetcode-solution-pnt2",
	"url": "https://leetcode-cn.com/problems/7LpjUW/solution/duo-yu-de-bian-by-leetcode-solution-pnt2/",
	"content": "#### 方法一：并查集\n\n在一棵树中，边的数量比节点的数量少 $1$。如果一棵树有 $n$ 个节点，则这棵树有 $n-1$ 条边。这道题中的图在树的基础上多了一条边，因此边的数量也是 $n$。\n\n树是一个连通且无环的无向图，在树中多了一条边之后就会出现环，因此多余的边即为导致环出现的边。\n\n可以通过并查集寻找多余的边。初始时，每个节点都属于不同的连通分量。遍历每一条边，判断这条边连接的两个顶点是否属于相同的连通分量。\n\n- 如果两个顶点属于不同的连通分量，则说明在遍历到当前的边之前，这两个顶点之间不连通，因此当前的边不会导致环出现，合并这两个顶点的连通分量。\n\n- 如果两个顶点属于相同的连通分量，则说明在遍历到当前的边之前，这两个顶点之间已经连通，因此当前的边导致环出现，为多余的边，将当前的边作为答案返回。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] findRedundantConnection(int[][] edges) {\n        int n = edges.length;\n        int[] parent = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            parent[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            int[] edge = edges[i];\n            int node1 = edge[0], node2 = edge[1];\n            if (find(parent, node1) != find(parent, node2)) {\n                union(parent, node1, node2);\n            } else {\n                return edge;\n            }\n        }\n        return new int[0];\n    }\n\n    public void union(int[] parent, int index1, int index2) {\n        parent[find(parent, index1)] = find(parent, index2);\n    }\n\n    public int find(int[] parent, int index) {\n        if (parent[index] != index) {\n            parent[index] = find(parent, parent[index]);\n        }\n        return parent[index];\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int Find(vector<int>& parent, int index) {\n        if (parent[index] != index) {\n            parent[index] = Find(parent, parent[index]);\n        }\n        return parent[index];\n    }\n\n    void Union(vector<int>& parent, int index1, int index2) {\n        parent[Find(parent, index1)] = Find(parent, index2);\n    }\n\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        int n = edges.size();\n        vector<int> parent(n + 1);\n        for (int i = 1; i <= n; ++i) {\n            parent[i] = i;\n        }\n        for (auto& edge: edges) {\n            int node1 = edge[0], node2 = edge[1];\n            if (Find(parent, node1) != Find(parent, node2)) {\n                Union(parent, node1, node2);\n            } else {\n                return edge;\n            }\n        }\n        return vector<int>{};\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar findRedundantConnection = function(edges) {\n    const n = edges.length;\n    const parent = new Array(n + 1).fill(0).map((value, index) => index);\n    for (let i = 0; i < n; i++) {\n        const edge = edges[i];\n        const node1 = edge[0], node2 = edge[1];\n        if (find(parent, node1) != find(parent, node2)) {\n            union(parent, node1, node2);\n        } else {\n            return edge;\n        }\n    }\n    return [0];\n};\n\nconst union = (parent, index1, index2) => {\n    parent[find(parent, index1)] = find(parent, index2);\n}\n\nconst find = (parent, index) => {\n    if (parent[index] !== index) {\n        parent[index] = find(parent, parent[index]);\n    }\n    return parent[index];\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges)\n        parent = list(range(n + 1))\n\n        def find(index: int) -> int:\n            if parent[index] != index:\n                parent[index] = find(parent[index])\n            return parent[index]\n        \n        def union(index1: int, index2: int):\n            parent[find(index1)] = find(index2)\n\n        for node1, node2 in edges:\n            if find(node1) != find(node2):\n                union(node1, node2)\n            else:\n                return [node1, node2]\n        \n        return []\n```\n\n```go [sol1-Golang]\nfunc findRedundantConnection(edges [][]int) []int {\n    parent := make([]int, len(edges)+1)\n    for i := range parent {\n        parent[i] = i\n    }\n    var find func(int) int\n    find = func(x int) int {\n        if parent[x] != x {\n            parent[x] = find(parent[x])\n        }\n        return parent[x]\n    }\n    union := func(from, to int) bool {\n        x, y := find(from), find(to)\n        if x == y {\n            return false\n        }\n        parent[x] = y\n        return true\n    }\n    for _, e := range edges {\n        if !union(e[0], e[1]) {\n            return e\n        }\n    }\n    return nil\n}\n```\n\n```C [sol1-C]\nint Find(int* parent, int index) {\n    if (parent[index] != index) {\n        parent[index] = Find(parent, parent[index]);\n    }\n    return parent[index];\n}\n\nvoid Union(int* parent, int index1, int index2) {\n    parent[Find(parent, index1)] = Find(parent, index2);\n}\n\nint* findRedundantConnection(int** edges, int edgesSize, int* edgesColSize, int* returnSize) {\n    int n = edgesSize;\n    int parent[n + 1];\n    for (int i = 1; i <= n; ++i) {\n        parent[i] = i;\n    }\n    for (int i = 0; i < edgesSize; ++i) {\n        int node1 = edges[i][0], node2 = edges[i][1];\n        if (Find(parent, node1) != Find(parent, node2)) {\n            Union(parent, node1, node2);\n        } else {\n            *returnSize = 2;\n            return edges[i];\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是图中的节点个数。需要遍历图中的 $n$ 条边，对于每条边，需要对两个节点查找祖先，如果两个节点的祖先不同则需要进行合并，需要进行 $2$ 次查找和最多 $1$ 次合并。一共需要进行 $2n$ 次查找和最多 $n$ 次合并，因此总时间复杂度是 $O(2n \\log n)=O(n \\log n)$。这里的并查集使用了路径压缩，但是没有使用按秩合并，最坏情况下的时间复杂度是 $O(n \\log n)$，平均情况下的时间复杂度依然是 $O(n \\alpha (n))$，其中 $\\alpha$ 为阿克曼函数的反函数，$\\alpha (n)$ 可以认为是一个很小的常数。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是图中的节点个数。使用数组 $\\textit{parent}$ 记录每个节点的祖先。"
}