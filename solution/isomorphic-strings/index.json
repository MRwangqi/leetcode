{
	"titleSlug": "isomorphic-strings",
	"slug": "tong-gou-zi-fu-chuan-by-leetcode-solutio-s6fd",
	"url": "https://leetcode-cn.com/problems/isomorphic-strings/solution/tong-gou-zi-fu-chuan-by-leetcode-solutio-s6fd/",
	"content": "#### 方法一：哈希表\n\n此题是「[290. 单词规律](https://leetcode-cn.com/problems/word-pattern/)」的简化版，需要我们判断 $s$ 和 $t$ 每个位置上的字符是否都一一对应，即 $s$ 的任意一个字符被 $t$ 中唯一的字符对应，同时 $t$ 的任意一个字符被 $s$ 中唯一的字符对应。这也被称为「双射」的关系。\n\n以示例 $2$ 为例，$t$ 中的字符 $a$ 和 $r$ 虽然有唯一的映射 $o$，但对于 $s$ 中的字符 $o$ 来说其存在两个映射 $\\{a,r\\}$，故不满足条件。\n\n因此，我们维护两张哈希表，第一张哈希表 $\\textit{s2t}$ 以 $s$ 中字符为键，映射至 $t$ 的字符为值，第二张哈希表 $\\textit{t2s}$ 以 $t$ 中字符为键，映射至 $s$ 的字符为值。从左至右遍历两个字符串的字符，不断更新两张哈希表，如果出现冲突（即当前下标 $\\textit{index}$ 对应的字符 $s[\\textit{index}]$ 已经存在映射且不为 $t[\\textit{index}]$ 或当前下标 $\\textit{index}$ 对应的字符 $t[\\textit{index}]$ 已经存在映射且不为 $s[\\textit{index}]$）时说明两个字符串无法构成同构，返回 $\\rm false$。\n\n如果遍历结束没有出现冲突，则表明两个字符串是同构的，返回 $\\rm true$ 即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isIsomorphic(string s, string t) {\n        unordered_map<char, char> s2t;\n        unordered_map<char, char> t2s;\n        int len = s.length();\n        for (int i = 0; i < len; ++i) {\n            char x = s[i], y = t[i];\n            if ((s2t.count(x) && s2t[x] != y) || (t2s.count(y) && t2s[y] != x)) {\n                return false;\n            }\n            s2t[x] = y;\n            t2s[y] = x;\n        }\n        return true;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isIsomorphic(String s, String t) {\n        Map<Character, Character> s2t = new HashMap<Character, Character>();\n        Map<Character, Character> t2s = new HashMap<Character, Character>();\n        int len = s.length();\n        for (int i = 0; i < len; ++i) {\n            char x = s.charAt(i), y = t.charAt(i);\n            if ((s2t.containsKey(x) && s2t.get(x) != y) || (t2s.containsKey(y) && t2s.get(y) != x)) {\n                return false;\n            }\n            s2t.put(x, y);\n            t2s.put(y, x);\n        }\n        return true;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar isIsomorphic = function(s, t) {\n    const s2t = {};\n    const t2s = {};\n    const len = s.length;\n    for (let i = 0; i < len; ++i) {\n        const x = s[i], y = t[i];\n        if ((s2t[x] && s2t[x] !== y) || (t2s[y] && t2s[y] !== x)) {\n            return false;\n        }\n        s2t[x] = y;\n        t2s[y] = x;\n    }\n    return true;\n};\n```\n\n```go [sol1-Golang]\nfunc isIsomorphic(s, t string) bool {\n    s2t := map[byte]byte{}\n    t2s := map[byte]byte{}\n    for i := range s {\n        x, y := s[i], t[i]\n        if s2t[x] > 0 && s2t[x] != y || t2s[y] > 0 && t2s[y] != x {\n            return false\n        }\n        s2t[x] = y\n        t2s[y] = x\n    }\n    return true\n}\n```\n\n```C [sol1-C]\nstruct HashTable {\n    char key;\n    char val;\n    UT_hash_handle hh;\n};\n\nbool isIsomorphic(char* s, char* t) {\n    struct HashTable* s2t = NULL;\n    struct HashTable* t2s = NULL;\n    int len = strlen(s);\n    for (int i = 0; i < len; ++i) {\n        char x = s[i], y = t[i];\n        struct HashTable *tmp1, *tmp2;\n        HASH_FIND(hh, s2t, &x, sizeof(char), tmp1);\n        HASH_FIND(hh, t2s, &y, sizeof(char), tmp2);\n        if (tmp1 != NULL) {\n            if (tmp1->val != y) {\n                return false;\n            }\n        } else {\n            tmp1 = malloc(sizeof(struct HashTable));\n            tmp1->key = x;\n            tmp1->val = y;\n            HASH_ADD(hh, s2t, key, sizeof(char), tmp1);\n        }\n        if (tmp2 != NULL) {\n            if (tmp2->val != x) {\n                return false;\n            }\n        } else {\n            tmp2 = malloc(sizeof(struct HashTable));\n            tmp2->key = y;\n            tmp2->val = x;\n            HASH_ADD(hh, t2s, key, sizeof(char), tmp2);\n        }\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为字符串的长度。我们只需同时遍历一遍字符串 $s$ 和 $t$ 即可。\n- 空间复杂度：$O(|\\Sigma|)$，其中 $\\Sigma$ 是字符串的字符集。哈希表存储字符的空间取决于字符串的字符集大小，最坏情况下每个字符均不相同，需要 $O(|\\Sigma|)$ 的空间。"
}