{
	"titleSlug": "two-best-non-overlapping-events",
	"slug": "liang-ge-zui-hao-de-bu-zhong-die-huo-don-urq5",
	"url": "https://leetcode-cn.com/problems/two-best-non-overlapping-events/solution/liang-ge-zui-hao-de-bu-zhong-die-huo-don-urq5/",
	"content": "#### 方法一：时间戳排序\n\n**思路与算法**\n\n我们可以将所有活动的左右边界放在一起进行自定义排序。具体地，我们用 $(\\textit{ts}, \\textit{op}, \\textit{val})$ 表示一个「事件」：\n\n- $\\textit{op}$ 表示该事件的类型。如果 $\\textit{op} = 0$，说明该事件表示一个活动的开始；如果 $\\textit{op} = 1$，说明该事件表示一个活动的结束。\n\n- $\\textit{ts}$ 表示该事件发生的时间，即活动的开始时间或结束时间。\n\n- $\\textit{val}$ 表示该事件的价值，即对应活动的 $\\textit{value}$ 值。\n\n我们将所有的时间按照 $\\textit{ts}$ 为第一关键字升序排序，这样我们就能按照时间顺序依次处理每一个事件。当 $\\textit{ts}$ 相等时，我们按照 $\\textit{op}$ 为第二关键字升序排序，这是因为题目中要求了「第一个活动的结束时间不能等于第二个活动的起始时间」，因此当时间相同时，我们先处理开始的事件，再处理结束的事件。\n\n当排序完成后，我们就可以通过对所有的事件进行一次遍历，从而算出最多两个时间不重叠的活动的最大价值：\n\n- 当我们遍历到一个结束事件时，我们用 $\\textit{val}$ 来更新 $\\textit{bestFirst}$，其中 $\\textit{bestFirst}$ 表示当前已经结束的所有活动的最大价值。这样做的意义在于，**所有已经结束的事件都可以当作第一个活动**。\n\n- 当我们遍历到一个开始事件时，我们将该活动当作第二个活动，由于第一个活动的最大价值为 $\\textit{bestFirst}$，因此我们用 $\\textit{val} + \\textit{bestFirst}$ 更新答案即可。\n\n**代码**\n\n```C++ [sol1-C++]\nstruct Event {\n    // 时间戳\n    int ts;\n    // op = 0 表示左边界，op = 1 表示右边界\n    int op;\n    int val;\n    Event(int _ts, int _op, int _val): ts(_ts), op(_op), val(_val) {}\n    bool operator< (const Event& that) const {\n        return tie(ts, op) < tie(that.ts, that.op);\n    }\n};\n\nclass Solution {\npublic:\n    int maxTwoEvents(vector<vector<int>>& events) {\n        vector<Event> evs;\n        for (const auto& event: events) {\n            evs.emplace_back(event[0], 0, event[2]);\n            evs.emplace_back(event[1], 1, event[2]);\n        }\n        sort(evs.begin(), evs.end());\n        \n        int ans = 0, bestFirst = 0;\n        for (const auto& [ts, op, val]: evs) {\n            if (op == 0) {\n                ans = max(ans, val + bestFirst);\n            }\n            else {\n                bestFirst = max(bestFirst, val);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Event:\n    def __init__(self, ts: int, op: int, val: int):\n        self.ts = ts\n        self.op = op\n        self.val = val\n    \n    def __lt__(self, other: \"Event\") -> bool:\n        return (self.ts, self.op) < (other.ts, other.op)\n\n\nclass Solution:\n    def maxTwoEvents(self, events: List[List[int]]) -> int:\n        evs = list()\n        for event in events:\n            evs.append(Event(event[0], 0, event[2]))\n            evs.append(Event(event[1], 1, event[2]))\n        evs.sort()\n\n        ans = bestFirst = 0\n        for ev in evs:\n            if ev.op == 0:\n                ans = max(ans, ev.val + bestFirst)\n            else:\n                bestFirst = max(bestFirst, ev.val)\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{events}$ 的长度。\n\n- 空间复杂度：$O(n)$。"
}