{
	"titleSlug": "rectangle-area",
	"slug": "ju-xing-mian-ji-by-leetcode-solution-xzbl",
	"url": "https://leetcode-cn.com/problems/rectangle-area/solution/ju-xing-mian-ji-by-leetcode-solution-xzbl/",
	"content": "#### 方法一：计算重叠面积\n\n两个矩形覆盖的总面积等于两个矩形的面积之和减去两个矩形的重叠部分的面积。由于两个矩形的左下顶点和右上顶点已知，因此两个矩形的面积可以直接计算。如果两个矩形重叠，则两个矩形的重叠部分也是矩形，重叠部分的面积可以根据重叠部分的边界计算。\n\n两个矩形的水平边投影到 $x$ 轴上的线段分别为 $[\\textit{ax}_1, \\textit{ax}_2]$ 和 $[\\textit{bx}_1, \\textit{bx}_2]$，竖直边投影到 $y$ 轴上的线段分别为 $[\\textit{ay}_1, \\textit{ay}_2]$ 和 $[\\textit{by}_1, \\textit{by}_2]$。如果两个矩形重叠，则重叠部分的水平边投影到 $x$ 轴上的线段为 $[\\max(\\textit{ax}_1, \\textit{bx}_1), \\min(\\textit{ax}_2, \\textit{bx}_2)]$，竖直边投影到 $y$ 轴上的线段为 $[\\max(\\textit{ay}_1, \\textit{by}_1), \\min(\\textit{ay}_2, \\textit{by}_2)]$，根据重叠部分的水平边投影到 $x$ 轴上的线段长度和竖直边投影到 $y$ 轴上的线段长度即可计算重叠部分的面积。只有当两条线段的长度都大于 $0$ 时，重叠部分的面积才大于 $0$，否则重叠部分的面积为 $0$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {\n        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);\n        int overlapWidth = Math.min(ax2, bx2) - Math.max(ax1, bx1), overlapHeight = Math.min(ay2, by2) - Math.max(ay1, by1);\n        int overlapArea = Math.max(overlapWidth, 0) * Math.max(overlapHeight, 0);\n        return area1 + area2 - overlapArea;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int ComputeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {\n        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);\n        int overlapWidth = Math.Min(ax2, bx2) - Math.Max(ax1, bx1), overlapHeight = Math.Min(ay2, by2) - Math.Max(ay1, by1);\n        int overlapArea = Math.Max(overlapWidth, 0) * Math.Max(overlapHeight, 0);\n        return area1 + area2 - overlapArea;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {\n        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);\n        int overlapWidth = min(ax2, bx2) - max(ax1, bx1), overlapHeight = min(ay2, by2) - max(ay1, by1);\n        int overlapArea = max(overlapWidth, 0) * max(overlapHeight, 0);\n        return area1 + area2 - overlapArea;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar computeArea = function(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n    const area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);\n    const overlapWidth = Math.min(ax2, bx2) - Math.max(ax1, bx1), overlapHeight = Math.min(ay2, by2) - Math.max(ay1, by1);\n    const overlapArea = Math.max(overlapWidth, 0) * Math.max(overlapHeight, 0);\n    return area1 + area2 - overlapArea;\n};\n```\n\n```C [sol1-C]\nint computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {\n    int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);\n    int overlapWidth = fmin(ax2, bx2) - fmax(ax1, bx1), overlapHeight = fmin(ay2, by2) - fmax(ay1, by1);\n    int overlapArea = fmax(overlapWidth, 0) * fmax(overlapHeight, 0);\n    return area1 + area2 - overlapArea;\n}\n```\n\n```go [sol1-Golang]\nfunc computeArea(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2 int) int {\n    area1 := (ax2 - ax1) * (ay2 - ay1)\n    area2 := (bx2 - bx1) * (by2 - by1)\n    overlapWidth := min(ax2, bx2) - max(ax1, bx1)\n    overlapHeight := min(ay2, by2) - max(ay1, by1)\n    overlapArea := max(overlapWidth, 0) * max(overlapHeight, 0)\n    return area1 + area2 - overlapArea\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:\n        area1 = (ax2 - ax1) * (ay2 - ay1)\n        area2 = (bx2 - bx1) * (by2 - by1)\n        overlapWidth = min(ax2, bx2) - max(ax1, bx1)\n        overlapHeight = min(ay2, by2) - max(ay1, by1)\n        overlapArea = max(overlapWidth, 0) * max(overlapHeight, 0)\n        return area1 + area2 - overlapArea\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。\n\n- 空间复杂度：$O(1)$。"
}