{
	"titleSlug": "words-frequency-lcci",
	"slug": "by-liupengsay-288q",
	"url": "https://leetcode-cn.com/problems/words-frequency-lcci/solution/by-liupengsay-288q/",
	"content": "# 【儿须成名酒须醉】Python3+哈希     \n***    \n## 提交结果    \n- 执行用时： 280 ms , 在所有 Python3 提交中击败了 54.07% 的用户   \n- 内存消耗： 43.3 MB , 在所有 Python3 提交中击败了 41.06% 的用户     \n\n## 解题思路    \n\n- 遍历使用哈希对书中出现的单词进行计数\n\n## 性能优化\n\n- 没有什么优化点，可以使用库类$collections.defaultdict$以及$Counter$方便计数\n\n## 复杂度分析\n\n- 设book长度为$n$，不同的单词个数为$m$，则有\n    - 时间复杂度：$O(n)$    \n    - 空间复杂度：$O(m)$   \n\n## 代码\n```python3\nfrom collections import defaultdict\n\n\nclass WordsFrequency:\n  def __init__(self, book: List[str]):\n    self.count = defaultdict(int)\n    for word in book:\n      self.count[word] += 1\n\n  def get(self, word: str) -> int:\n    return self.count[word]\n\n\n# Your WordsFrequency object will be instantiated and called as such:\n# obj = WordsFrequency(book)\n# param_1 = obj.get(word)\n```"
}