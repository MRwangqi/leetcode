{
	"titleSlug": "two-city-scheduling",
	"slug": "er-cha-shu-de-chui-xu-bian-li-by-leetcode",
	"url": "https://leetcode-cn.com/problems/two-city-scheduling/solution/er-cha-shu-de-chui-xu-bian-li-by-leetcode/",
	"content": "#### 方法一：贪心\n\n**分析**\n\n我们这样来看这个问题，公司首先将这 $2N$ 个人全都安排飞往 $B$ 市，再选出 $N$ 个人改变它们的行程，让他们飞往 $A$ 市。如果选择改变一个人的行程，那么公司将会额外付出 `price_A - price_B` 的费用，这个费用可正可负。\n\n![bla](https://pic.leetcode-cn.com/Figures/1029/users.png){:width=600}\n{:align=center}\n\n因此最优的方案是，选出 `price_A - price_B` 最小的 $N$ 个人，让他们飞往 `A` 市，其余人飞往 `B` 市。\n\n**算法**\n\n- 按照 `price_A - price_B` 从小到大排序；\n\n- 将前 $N$ 个人飞往 `A` 市，其余人飞往 `B` 市，并计算出总费用。\n\n```Python [sol1]\nclass Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        # Sort by a gain which company has \n        # by sending a person to city A and not to city B\n        costs.sort(key = lambda x : x[0] - x[1])\n        \n        total = 0\n        n = len(costs) // 2\n        # To optimize the company expenses,\n        # send the first n persons to the city A\n        # and the others to the city B\n        for i in range(n):\n            total += costs[i][0] + costs[i + n][1]\n        return total\n```\n\n```Java [sol1]\nclass Solution {\n    public int twoCitySchedCost(int[][] costs) {\n      // Sort by a gain which company has \n      // by sending a person to city A and not to city B\n      Arrays.sort(costs, new Comparator<int[]>() {\n          @Override\n          public int compare(int[] o1, int[] o2) {\n              return o1[0] - o1[1] - (o2[0] - o2[1]);\n          }\n      });\n\n      int total = 0;\n      int n = costs.length / 2;\n      // To optimize the company expenses,\n      // send the first n persons to the city A\n      // and the others to the city B\n      for (int i = 0; i < n; ++i) total += costs[i][0] + costs[i + n][1];\n      return total;\n    }\n}\n```\n\n```C++ [sol1]\nclass Solution {\n    public:\n    int twoCitySchedCost(vector<vector<int>>& costs) {\n        // Sort by a gain which company has \n        // by sending a person to city A and not to city B\n        sort(begin(costs), end(costs),\n                [](const vector<int> &o1, const vector<int> &o2) {\n            return (o1[0] - o1[1] < o2[0] - o2[1]);\n        });\n\n        int total = 0;\n        int n = costs.size() / 2;\n        // To optimize the company expenses,\n        // send the first n persons to the city A\n        // and the others to the city B\n        for (int i = 0; i < n; ++i) total += costs[i][0] + costs[i + n][1];\n        return total;\n    }\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log N)$，需要对 `price_A - price_B` 进行排序。\n\n* 空间复杂度：$O(1)$。"
}