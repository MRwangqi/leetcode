{
	"titleSlug": "minimum-absolute-sum-difference",
	"slug": "jue-dui-chai-zhi-he-by-leetcode-solution-gv78",
	"url": "https://leetcode-cn.com/problems/minimum-absolute-sum-difference/solution/jue-dui-chai-zhi-he-by-leetcode-solution-gv78/",
	"content": "#### 方法一：排序 + 二分查找\n\n**思路及算法**\n\n本题中单个二元组 $\\{\\textit{nums}_1[i],\\textit{nums}_2[i]\\}$ 对答案的贡献为 $\\Big |\\textit{nums}_1[i]-\\textit{nums}_2[i]\\Big |$。假设我们用元素 $\\textit{nums}_1[j]$ 替换了元素 $\\textit{nums}_1[i]$，那么此时该二元组对答案的贡献为 $\\Big |\\textit{nums}_1[j]-\\textit{nums}_2[i]\\Big |$。改变前后的差值为：\n\n$$\n\\Big |\\textit{nums}_1[i]-\\textit{nums}_2[i]\\Big | - \\Big |\\textit{nums}_1[j]-\\textit{nums}_2[i]\\Big |\n$$\n\n我们希望能最大化该差值，这样可以使得答案尽可能小。因为我们只能修改一个位置，所以我们需要检查每一个 $i$ 对应的差值的最大值。当 $i$ 确定时，该式的前半部分的值即可确定，而后半部分的值取决于 $j$ 的选择。观察该式，我们只需要找到和 $\\textit{nums}_2[i]$ 尽可能接近的 $\\textit{nums}_1[j]$ 即可。\n\n为了优化查找的时间复杂度，我们可以使用辅助数组 $\\textit{rec}$ 记录 $\\textit{nums}_1$ 中所有的元素并排序。这样我们就可以使用二分查找的方法快速找到 $\\textit{nums}_1$ 数组中尽可能接近 $\\textit{nums}_2[i]$ 的元素。需要注意的是，该元素既可能大于等于 $\\textit{nums}_2[i]$，也可能小于 $\\textit{nums}_2[i]$，因此我们需要各检查一次。\n\n在实际代码中，我们使用 $\\textit{sum}$ 记录所有的差值和，用 $\\textit{maxn}$ 记录最大的改变前后的差值，这样答案即为 $\\textit{sum}-\\textit{maxn}$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    static constexpr int mod = 1'000'000'007;\n\n    int minAbsoluteSumDiff(vector<int>& nums1, vector<int>& nums2) {\n        vector<int> rec(nums1);\n        sort(rec.begin(), rec.end());\n        int sum = 0, maxn = 0;\n        int n = nums1.size();\n        for (int i = 0; i < n; i++) {\n            int diff = abs(nums1[i] - nums2[i]);\n            sum = (sum + diff) % mod;\n            int j = lower_bound(rec.begin(), rec.end(), nums2[i]) - rec.begin();\n            if (j < n) {\n                maxn = max(maxn, diff - (rec[j] - nums2[i]));\n            }\n            if (j > 0) {\n                maxn = max(maxn, diff - (nums2[i] - rec[j - 1]));\n            }\n        }\n        return (sum - maxn + mod) % mod;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minAbsoluteSumDiff(int[] nums1, int[] nums2) {\n        final int MOD = 1000000007;\n        int n = nums1.length;\n        int[] rec = new int[n];\n        System.arraycopy(nums1, 0, rec, 0, n);\n        Arrays.sort(rec);\n        int sum = 0, maxn = 0;\n        for (int i = 0; i < n; i++) {\n            int diff = Math.abs(nums1[i] - nums2[i]);\n            sum = (sum + diff) % MOD;\n            int j = binarySearch(rec, nums2[i]);\n            if (j < n) {\n                maxn = Math.max(maxn, diff - (rec[j] - nums2[i]));\n            }\n            if (j > 0) {\n                maxn = Math.max(maxn, diff - (nums2[i] - rec[j - 1]));\n            }\n        }\n        return (sum - maxn + MOD) % MOD;\n    }\n\n    public int binarySearch(int[] rec, int target) {\n        int low = 0, high = rec.length - 1;\n        if (rec[high] < target) {\n            return high + 1;\n        }\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (rec[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MinAbsoluteSumDiff(int[] nums1, int[] nums2) {\n        const int MOD = 1000000007;\n        int n = nums1.Length;\n        int[] rec = new int[n];\n        Array.Copy(nums1, rec, n);\n        Array.Sort(rec);\n        int sum = 0, maxn = 0;\n        for (int i = 0; i < n; i++) {\n            int diff = Math.Abs(nums1[i] - nums2[i]);\n            sum = (sum + diff) % MOD;\n            int j = BinarySearch(rec, nums2[i]);\n            if (j < n) {\n                maxn = Math.Max(maxn, diff - (rec[j] - nums2[i]));\n            }\n            if (j > 0) {\n                maxn = Math.Max(maxn, diff - (nums2[i] - rec[j - 1]));\n            }\n        }\n        return (sum - maxn + MOD) % MOD;\n    }\n\n    public int BinarySearch(int[] rec, int target) {\n        int low = 0, high = rec.Length - 1;\n        if (rec[high] < target) {\n            return high + 1;\n        }\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (rec[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minAbsoluteSumDiff = function(nums1, nums2) {\n    const MOD = 1000000007;\n    const n = nums1.length;\n    const rec = [...nums1];\n    rec.sort((a, b) => a - b);\n    let sum = 0, maxn = 0;\n    for (let i = 0; i < n; i++) {\n        const diff = Math.abs(nums1[i] - nums2[i]);\n        sum = (sum + diff) % MOD;\n        const j = binarySearch(rec, nums2[i]);\n        if (j < n) {\n            maxn = Math.max(maxn, diff - (rec[j] - nums2[i]));\n        }\n        if (j > 0) {\n            maxn = Math.max(maxn, diff - (nums2[i] - rec[j - 1]));\n        }\n    }\n    return (sum - maxn + MOD) % MOD;\n};\n\nconst binarySearch = (rec, target) => {\n    let low = 0, high = rec.length - 1;\n    if (rec[high] < target) {\n        return high + 1;\n    }\n    while (low < high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        if (rec[mid] < target) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n```\n\n```go [sol1-Golang]\nfunc minAbsoluteSumDiff(nums1, nums2 []int) int {\n    rec := append(sort.IntSlice(nil), nums1...)\n    rec.Sort()\n    sum, maxn, n := 0, 0, len(nums1)\n    for i, v := range nums2 {\n        diff := abs(nums1[i] - v)\n        sum += diff\n        j := rec.Search(v)\n        if j < n {\n            maxn = max(maxn, diff-(rec[j]-v))\n        }\n        if j > 0 {\n            maxn = max(maxn, diff-(v-rec[j-1]))\n        }\n    }\n    return (sum - maxn) % (1e9 + 7)\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol1-C]\nint lower_bound(int* a, int n, int x) {\n    int l = 0, r = n;\n    while (l < r) {\n        int mid = (l + r) >> 1;\n        if (a[mid] < x) {\n            l = mid + 1;\n        } else {\n            r = mid;\n        }\n    }\n    return l;\n}\n\nint cmp(int* a, int* b) {\n    return *a - *b;\n}\n\nconst int mod = 1000000007;\n\nint minAbsoluteSumDiff(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    int n = nums1Size;\n    int rec[n];\n    memcpy(rec, nums1, sizeof(int) * n);\n    qsort(rec, n, sizeof(int), cmp);\n    int sum = 0, maxn = 0;\n    for (int i = 0; i < n; i++) {\n        int diff = abs(nums1[i] - nums2[i]);\n        sum = (sum + diff) % mod;\n        int j = lower_bound(rec, n, nums2[i]);\n        if (j < n) {\n            maxn = fmax(maxn, diff - (rec[j] - nums2[i]));\n        }\n        if (j > 0) {\n            maxn = fmax(maxn, diff - (nums2[i] - rec[j - 1]));\n        }\n    }\n    return (sum - maxn + mod) % mod;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 的长度。我们需要记录 $\\textit{nums}_1$ 中的元素，并进行排序，时间复杂度是 $O(n \\log n)$。计算 $\\textit{maxn}$ 需要进行 $n$ 次二分查找，每次二分查找的时间为 $O(\\log n)$，因此时间复杂度也是 $O(n \\log n)$。所以总的时间复杂度为 $O(n \\log n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 的长度。我们需要创建大小为 $n$ 的辅助数组。"
}