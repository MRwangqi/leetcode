{
	"titleSlug": "stone-game-v",
	"slug": "shi-zi-you-xi-v-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/stone-game-v/solution/shi-zi-you-xi-v-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n**思路与算法**\n\n我们用 $f[l][r]$ 表示当 Alice 面对数组 $\\textit{stoneValue}$ 中从位置 $l$ 到 $r$ 这一段连续的石子时，她能获得的最大分数。\n\n由于 Alice 需要选择将这一段石子分成两部分，因此我们可以枚举分隔位置 $i$，左侧部分的石子从位置 $l$ 到 $i$，右侧部分的石子从位置 $i+1$ 到 $r$。记 $\\textit{sum}(l, r)$ 表示位置 $l$ 到 $r$ 的石子的分数之和，根据题目要求：\n\n- 如果 $\\textit{sum}(l, i) < \\textit{sum}(i+1, r)$，那么 Bob 会丢弃右侧部分，状态转移方程为：\n\n    $$\n    f[l][r] = f[l][i] + \\textit{sum}(l, i)\n    $$\n\n- 如果 $\\textit{sum}(l, i) > \\textit{sum}(i+1, r)$，那么 Bob 会丢弃左侧部分，状态转移方程为：\n\n    $$\n    f[l][r] = f[i+1][r] + \\textit{sum}(i+1, r)\n    $$\n\n- 如果 $\\textit{sum}(l, i) = \\textit{sum}(i+1, r)$，那么 Bob 会让 Alice 选择丢弃的部分，状态转移方程为：\n\n    $$\n    f[l][r] = \\max\\{ f[l][i], f[i+1][r] \\} + \\textit{sum}(l, i)\n    $$\n\n我们可以预先计算出 $\\textit{sum}(l, r)$ 的值，可以使用前缀和或直接遍历计算的方法。在枚举 $i$ 时，我们可以同时计算出 $\\textit{sum}(l, i)$ 的值，这样 $\\textit{sum}(i+1, r)$ 的值就可以通过\n\n$$\n\\textit{sum}(i+1, r) = \\textit{sum}(l, r) - \\textit{sum}(l, i)\n$$\n\n在 $O(1)$ 的时间得出。\n\n当只剩下一颗石子时，Alice 的得分为 $0$，对应的边界条件为：\n\n$$\nf[l][l] = 0\n$$\n\n最终的答案即为 $f[0][n-1]$，其中 $n$ 是数组 $\\textit{stoneValue}$ 的长度。\n\n**注意**：如果使用三重循环枚举 $l$，$r$，$i$ 进行状态转移，那么 `C++` 语言的代码可能会超出时间限制。因此下面给出的代码使用了自顶向下的记忆化搜索方法来完成动态规划。这样可以跳过一部分无需计算的状态，并在合理的时间内通过本题。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    vector<vector<int>> f;\n\npublic:\n    int dfs(const vector<int>& stoneValue, int left, int right) {\n        if (left == right) {\n            return 0;\n        }\n        if (f[left][right]) {\n            return f[left][right];\n        }\n\n        int sum = accumulate(stoneValue.begin() + left, stoneValue.begin() + right + 1, 0);\n        int suml = 0;\n        for (int i = left; i < right; ++i) {\n            suml += stoneValue[i];\n            int sumr = sum - suml;\n            if (suml < sumr) {\n                f[left][right] = max(f[left][right], dfs(stoneValue, left, i) + suml);\n            } else if (suml > sumr) {\n                f[left][right] = max(f[left][right], dfs(stoneValue, i + 1, right) + sumr);\n            } else {\n                f[left][right] = max(f[left][right], max(dfs(stoneValue, left, i), dfs(stoneValue, i + 1, right)) + suml);\n            }\n        }\n        return f[left][right];\n    }\n\n    int stoneGameV(vector<int>& stoneValue) {\n        int n = stoneValue.size();\n        f.assign(n, vector<int>(n));\n        return dfs(stoneValue, 0, n - 1);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int[][] f;\n\n    public int stoneGameV(int[] stoneValue) {\n        int n = stoneValue.length;\n        f = new int[n][n];\n        return dfs(stoneValue, 0, n - 1);\n    }\n\n    public int dfs(int[] stoneValue, int left, int right) {\n        if (left == right) {\n            return 0;\n        }\n        if (f[left][right] != 0) {\n            return f[left][right];\n        }\n\n        int sum = 0;\n        for (int i = left; i <= right; ++i) {\n            sum += stoneValue[i];\n        }\n        int suml = 0;\n        for (int i = left; i < right; ++i) {\n            suml += stoneValue[i];\n            int sumr = sum - suml;\n            if (suml < sumr) {\n                f[left][right] = Math.max(f[left][right], dfs(stoneValue, left, i) + suml);\n            } else if (suml > sumr) {\n                f[left][right] = Math.max(f[left][right], dfs(stoneValue, i + 1, right) + sumr);\n            } else {\n                f[left][right] = Math.max(f[left][right], Math.max(dfs(stoneValue, left, i), dfs(stoneValue, i + 1, right)) + suml);\n            }\n        }\n        return f[left][right];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def stoneGameV(self, stoneValue: List[int]) -> int:\n        @lru_cache(None)\n        def dfs(left: int, right: int) -> int:\n            if left == right:\n                return 0\n            \n            total = sum(stoneValue[left:right+1])\n            suml = ans = 0\n            for i in range(left, right):\n                suml += stoneValue[i]\n                sumr = total - suml\n                if suml < sumr:\n                    ans = max(ans, dfs(left, i) + suml)\n                elif suml > sumr:\n                    ans = max(ans, dfs(i + 1, right) + sumr)\n                else:\n                    ans = max(ans, max(dfs(left, i), dfs(i + 1, right)) + suml)\n            return ans\n        \n        n = len(stoneValue)\n        return dfs(0, n - 1)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^3)$，其中 $n$ 是数组 $\\textit{stoneValue}$ 的长度。\n\n- 空间复杂度：$O(n^2)$，为存储所有状态需要的空间。\n\n#### 方法二：动态规划优化\n\n**说明**\n\n本方法为进阶方法，但无需高级的优化技巧，感兴趣的读者可以尝试学习。\n\n**思路与算法**\n\n考虑某次状态转移中的 $l$，$r$，$i$，如果 $\\textit{sum}(l, i) < \\textit{sum}(i+1, r)$，那么有状态转移方程：\n\n$$\nf[l][r] = f[l][i] + \\textit{sum}(l, i)\n$$\n\n而对于 $r+1$ 而言，$\\textit{sum}(l, i) < \\textit{sum}(i+1, r+1)$ 一定也成立，那么有状态转移方程：\n\n$$\nf[l][r+1] = f[l][i] + \\textit{sum}(l, i)\n$$\n\n可以发现这两个状态转移方程的右侧相同，$f[l][i] + \\textit{sum}(l, i)$ 被重复计算，这也是方法一的瓶颈所在。因此，我们可以考虑维护两个辅助数组 $\\textit{maxl}$ 和 $\\textit{maxr}$：\n\n$$\n\\left \\{ \\begin{aligned}\n\\textit{maxl}[l][r] &= \\max_{i=l}^r \\big\\{ f[l][i] + \\textit{sum}(l, i) \\big\\} \\\\ \\\\\n\\textit{maxr}[l][r] &= \\max_{i=l}^r \\big\\{ f[i][r] + \\textit{sum}(i, r) \\big\\}\n\\end{aligned} \\right.\n$$\n\n这样一来，对于任意的 $l$，$r$，存在 $i_0 \\in [l-1, r)$ 满足：\n\n$$\n\\left \\{ \\begin{aligned}\n& \\textit{sum}(l, i_0) \\leq \\textit{sum}(i_0+1, r) \\\\\n& \\textit{sum}(l, i_0+1) > \\textit{sum}(i_0+2, r)\n\\end{aligned} \\right.\n$$\n\n> 其中 $\\textit{sum}(x, y)$ 在 $x > y$ 时的值为 $0$。\n\n那么当 $i \\leq i_0$ 时，对应的状态转移方程合并在一起即为：\n\n$$\nf[l][r] = \\textit{maxl}[l][i_0]\n$$\n\n当 $i > i_0$ 时，对应的状态转移方程合并在一起即为：\n\n$$\nf[l][r] = \\textit{maxr}[i_0+2][r]\n$$\n\n特别地，如果 $\\textit{sum}(l, i_0) = \\textit{sum}(i_0+1, r)$，还可以有额外的转移：\n\n$$\nf[l][r] = \\textit{maxr}[i_0+1][r]\n$$\n\n因此，**如果我们知道数组 $\\textit{maxl}$，数组 $\\textit{maxr}$ 以及 $i_0$**，那么就可以在 $O(1)$ 的时间计算出 $f[l][r]$，完成状态转移。那么我们如何计算出这些需要的信息呢？\n\n**细节**\n\n观察数组 $\\textit{maxl}$ 和 $\\textit{maxr}$ 的表示，它提示我们可以使用递推的方法，在枚举 $l$，$r$ 并计算 $f[l][r]$ 的同时，计算出 $\\textit{maxl}[l][r]$ 和 $\\textit{maxr}[l][r]$：\n\n$$\n\\left \\{ \\begin{aligned}\n\\textit{maxl}[l][r] &= \\max \\{ \\textit{maxl}[l][r-1], f[l][r] + \\textit{sum}(l, r) \\} \\\\\n\\textit{maxr}[l][r] &= \\max \\{ \\textit{maxr}[l+1][r], f[l][r] + \\textit{sum}(i, r) \\}\n\\end{aligned} \\right.\n$$\n\n边界条件为：\n\n$$\n\\textit{maxl}[l][l] = \\textit{maxr}[l][l] = \\textit{stoneValue}[l]\n$$\n\n而对于 $i_0$，记 $i_{l,r}$ 表示在枚举 $l$，$r$ 时 $i_0$ 的值，由于数组 $\\textit{stoneValue}$ 中所有的数都是正整数，那么有\n\n$$\ni_{l,r} \\leq i_{l,r+1}\n$$\n\n即固定 $l$，$i_{l,r}$ 是单调递增的。因此我们可以递减地枚举 $l$ 并且（在固定 $l$ 时）递增地枚举 $r$，同时维护 $i_{l,r}$：\n\n- $i_{l,r}$ 的初始值为 $i_{l,l} = l-1$；\n\n- 当我们已知 $i_{l,r}$ 时，要求出 $i_{l,r+1}$，我们只需不断地增加 $i_{l,r}$，直到 $\\textit{sum}(l, i_{l,r}) \\leq \\textit{sum}(i_{l,r}+1, r+1)$ 不满足为止。此时 $i_{l,r+1}$ 的值就为 $i_{l,r} - 1$。\n\n这样一来，计算 $\\textit{maxl}[l][r]$ 和 $\\textit{maxr}[l][r]$ 的时间为 $O(1)$，计算 $i_0$ 的时间为均摊 $O(1)$，我们就可以在 $O(1)$ 的时间计算出 $f[l][r]$ 了。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    vector<vector<int>> f;\n    vector<vector<int>> maxl, maxr;\n\npublic:\n    int stoneGameV(vector<int>& stoneValue) {\n        int n = stoneValue.size();\n        f.assign(n, vector<int>(n));\n        maxl.assign(n, vector<int>(n));\n        maxr.assign(n, vector<int>(n));\n        for (int left = n - 1; left >= 0; --left) {\n            maxl[left][left] = maxr[left][left] = stoneValue[left];\n            int sum = stoneValue[left], suml = 0;\n            for (int right = left + 1, i = left - 1; right < n; ++right) {\n                sum += stoneValue[right];\n                while (i + 1 < right && (suml + stoneValue[i + 1]) * 2 <= sum) {\n                    suml += stoneValue[i + 1];\n                    ++i;\n                }\n                if (left <= i) {\n                    f[left][right] = max(f[left][right], maxl[left][i]);\n                }\n                if (i + 1 < right) {\n                    f[left][right] = max(f[left][right], maxr[i + 2][right]);\n                }\n                if (suml * 2 == sum) {\n                    f[left][right] = max(f[left][right], maxr[i + 1][right]);\n                }\n                maxl[left][right] = max(maxl[left][right - 1], sum + f[left][right]);\n                maxr[left][right] = max(maxr[left + 1][right], sum + f[left][right]);\n            }\n        }\n        return f[0][n - 1];\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    int[][] f;\n    int[][] maxl;\n    int[][] maxr;\n\n    public int stoneGameV(int[] stoneValue) {\n        int n = stoneValue.length;\n        f = new int[n][n];\n        maxl = new int[n][n];\n        maxr = new int[n][n];\n        for (int left = n - 1; left >= 0; --left) {\n            maxl[left][left] = maxr[left][left] = stoneValue[left];\n            int sum = stoneValue[left], suml = 0;\n            for (int right = left + 1, i = left - 1; right < n; ++right) {\n                sum += stoneValue[right];\n                while (i + 1 < right && (suml + stoneValue[i + 1]) * 2 <= sum) {\n                    suml += stoneValue[i + 1];\n                    ++i;\n                }\n                if (left <= i) {\n                    f[left][right] = Math.max(f[left][right], maxl[left][i]);\n                }\n                if (i + 1 < right) {\n                    f[left][right] = Math.max(f[left][right], maxr[i + 2][right]);\n                }\n                if (suml * 2 == sum) {\n                    f[left][right] = Math.max(f[left][right], maxr[i + 1][right]);\n                }\n                maxl[left][right] = Math.max(maxl[left][right - 1], sum + f[left][right]);\n                maxr[left][right] = Math.max(maxr[left + 1][right], sum + f[left][right]);\n            }\n        }\n        return f[0][n - 1];\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def stoneGameV(self, stoneValue: List[int]) -> int:\n        n = len(stoneValue)\n        f = [[0] * n for _ in range(n)]\n        maxl = [[0] * n for _ in range(n)]\n        maxr = [[0] * n for _ in range(n)]\n\n        for left in range(n - 1, -1, -1):\n            maxl[left][left] = maxr[left][left] = stoneValue[left]\n            total = stoneValue[left]\n            suml = 0\n            i = left - 1\n            for right in range(left + 1, n):\n                total += stoneValue[right]\n                while i + 1 < right and (suml + stoneValue[i + 1]) * 2 <= total:\n                    suml += stoneValue[i + 1]\n                    i += 1\n                if left <= i:\n                    f[left][right] = max(f[left][right], maxl[left][i])\n                if i + 1 < right:\n                    f[left][right] = max(f[left][right], maxr[i + 2][right])\n                if suml * 2 == total:\n                    f[left][right] = max(f[left][right], maxr[i + 1][right])\n                maxl[left][right] = max(maxl[left][right - 1], total + f[left][right])\n                maxr[left][right] = max(maxr[left + 1][right], total + f[left][right])\n        \n        return f[0][n - 1]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\\textit{stoneValue}$ 的长度。\n\n- 空间复杂度：$O(n^2)$，为存储所有状态以及辅助数组需要的空间。"
}