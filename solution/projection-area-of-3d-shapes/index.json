{
	"titleSlug": "projection-area-of-3d-shapes",
	"slug": "san-wei-xing-ti-tou-ying-mian-ji-by-leet-d66y",
	"url": "https://leetcode-cn.com/problems/projection-area-of-3d-shapes/solution/san-wei-xing-ti-tou-ying-mian-ji-by-leet-d66y/",
	"content": "#### 方法一：数学\n\n**思路与算法**\n\n根据题意，$\\texttt{x}$ 轴对应行，$\\texttt{y}$ 轴对应列，$\\texttt{z}$ 轴对应网格的数值。\n\n因此：\n\n- $\\texttt{xy}$ 平面的投影面积等于网格上非零数值的数目；\n- $\\texttt{yz}$ 平面的投影面积等于网格上每一列最大数值之和；\n- $\\texttt{zx}$ 平面的投影面积等于网格上每一行最大数值之和。\n\n返回上述三个投影面积之和。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def projectionArea(self, grid: List[List[int]]) -> int:\n        xyArea = sum(v > 0 for row in grid for v in row)\n        yzArea = sum(map(max, zip(*grid)))  # 注意这里为 O(n) 空间复杂度，改为下标枚举则可以 O(1)\n        zxArea = sum(map(max, grid))\n        return xyArea + yzArea + zxArea\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int projectionArea(vector<vector<int>> &grid) {\n        int n = grid.size();\n        int xyArea = 0, yzArea = 0, zxArea = 0;\n        for (int i = 0; i < n; i++) {\n            int yzHeight = 0, zxHeight = 0;\n            for (int j = 0; j < n; j++) {\n                xyArea += grid[i][j] > 0 ? 1 : 0;\n                yzHeight = max(yzHeight, grid[j][i]);\n                zxHeight = max(zxHeight, grid[i][j]);\n            }\n            yzArea += yzHeight;\n            zxArea += zxHeight;\n        }\n        return xyArea + yzArea + zxArea;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int projectionArea(int[][] grid) {\n        int n = grid.length;\n        int xyArea = 0, yzArea = 0, zxArea = 0;\n        for (int i = 0; i < n; i++) {\n            int yzHeight = 0, zxHeight = 0;\n            for (int j = 0; j < n; j++) {\n                xyArea += grid[i][j] > 0 ? 1 : 0;\n                yzHeight = Math.max(yzHeight, grid[j][i]);\n                zxHeight = Math.max(zxHeight, grid[i][j]);\n            }\n            yzArea += yzHeight;\n            zxArea += zxHeight;\n        }\n        return xyArea + yzArea + zxArea;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int ProjectionArea(int[][] grid) {\n        int n = grid.Length;\n        int xyArea = 0, yzArea = 0, zxArea = 0;\n        for (int i = 0; i < n; i++) {\n            int yzHeight = 0, zxHeight = 0;\n            for (int j = 0; j < n; j++) {\n                xyArea += grid[i][j] > 0 ? 1 : 0;\n                yzHeight = Math.Max(yzHeight, grid[j][i]);\n                zxHeight = Math.Max(zxHeight, grid[i][j]);\n            }\n            yzArea += yzHeight;\n            zxArea += zxHeight;\n        }\n        return xyArea + yzArea + zxArea;\n    }\n}\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n\nint projectionArea(int** grid, int gridSize, int* gridColSize) {\n    int xyArea = 0, yzArea = 0, zxArea = 0;\n    for (int i = 0; i < gridSize; i++) {\n        int yzHeight = 0, zxHeight = 0;\n        for (int j = 0; j < gridSize; j++) {\n            xyArea += grid[i][j] > 0 ? 1 : 0;\n            yzHeight = MAX(yzHeight, grid[j][i]);\n            zxHeight = MAX(zxHeight, grid[i][j]);\n        }\n        yzArea += yzHeight;\n        zxArea += zxHeight;\n    }\n    return xyArea + yzArea + zxArea;\n}\n```\n\n```go [sol1-Golang]\nfunc projectionArea(grid [][]int) int {\n    var xyArea, yzArea, zxArea int\n    for i, row := range grid {\n        yzHeight, zxHeight := 0, 0\n        for j, v := range row {\n            if v > 0 {\n                xyArea++\n            }\n            yzHeight = max(yzHeight, grid[j][i])\n            zxHeight = max(zxHeight, v)\n        }\n        yzArea += yzHeight\n        zxArea += zxHeight\n    }\n    return xyArea + yzArea + zxArea\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar projectionArea = function(grid) {\n    const n = grid.length;\n    let xyArea = 0, yzArea = 0, zxArea = 0;\n    for (let i = 0; i < n; i++) {\n        let yzHeight = 0, zxHeight = 0;\n        for (let j = 0; j < n; j++) {\n            xyArea += grid[i][j] > 0 ? 1 : 0;\n            yzHeight = Math.max(yzHeight, grid[j][i]);\n            zxHeight = Math.max(zxHeight, grid[i][j]);\n        }\n        yzArea += yzHeight;\n        zxArea += zxHeight;\n    }\n    return xyArea + yzArea + zxArea;\n};\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n^2)$，其中 $n$ 是网格的行数或列数。\n\n+ 空间复杂度：$O(1)$。"
}