{
	"titleSlug": "6UEx57",
	"slug": "by-wanglongjiang-7vyv",
	"url": "https://leetcode-cn.com/problems/6UEx57/solution/by-wanglongjiang-7vyv/",
	"content": "### 解题思路\n思路：BFS 堆\n从开始单元格开始，单元格原本前进方向上前进代价为0，其余方向上前进代价为1，将下一个单元格的代价和坐标加入堆。\n如果下一个单元格已经遍历过，再次遍历时距离变短，也需要加入堆再次遍历，否则不再遍历。\n直至找到end\n\n时间复杂度：O(mn)\n空间复杂度：O(mn)\n\n### 代码\n\n```python3\n\nclass Solution:\n    def conveyorBelt(self, matrix: List[str], start: List[int], end: List[int]) -> int:\n        h = [(0, (start[0], start[1]))]  # 初始节点加入堆\n        m, n = len(matrix), len(matrix[0])\n        end = (end[0], end[1])\n        dists = {}\n        dists[(start[0], start[1])] = 0\n        while h:\n            dis, node = heapq.heappop(h)\n            if node == end:\n                return dis\n            x, y = node[0], node[1]\n            if x > 0:\n                newdist = dis if matrix[x][y] == '^' else dis + 1\n                newpos = (x - 1, y)\n                if newpos not in dists or dists[newpos] > newdist:\n                    heapq.heappush(h, (newdist, newpos))\n                    dists[newpos] = newdist\n            if x < m - 1:\n                newdist = dis if matrix[x][y] == 'v' else dis + 1\n                newpos = (x + 1, y)\n                if newpos not in dists or dists[newpos] > newdist:\n                    heapq.heappush(h, (newdist, newpos))\n                    dists[newpos] = newdist\n            if y > 0:\n                newdist = dis if matrix[x][y] == '<' else dis + 1\n                newpos = (x, y - 1)\n                if newpos not in dists or dists[newpos] > newdist:\n                    heapq.heappush(h, (newdist, newpos))\n                    dists[newpos] = newdist\n            if y < n - 1:\n                newdist = dis if matrix[x][y] == '>' else dis + 1\n                newpos = (x, y + 1)\n                if newpos not in dists or dists[newpos] > newdist:\n                    heapq.heappush(h, (newdist, newpos))\n                    dists[newpos] = newdist\n        return -1\n```"
}