{
	"titleSlug": "max-consecutive-ones",
	"slug": "zui-da-lian-xu-1de-ge-shu-by-leetcode-so-252a",
	"url": "https://leetcode-cn.com/problems/max-consecutive-ones/solution/zui-da-lian-xu-1de-ge-shu-by-leetcode-so-252a/",
	"content": "#### 方法一：一次遍历\n\n为了得到数组中最大连续 $1$ 的个数，需要遍历数组，并记录最大的连续 $1$ 的个数和当前的连续 $1$ 的个数。如果当前元素是 $1$，则将当前的连续 $1$ 的个数加 $1$，否则，使用之前的连续 $1$ 的个数更新最大的连续 $1$ 的个数，并将当前的连续 $1$ 的个数清零。\n\n遍历数组结束之后，需要再次使用当前的连续 $1$ 的个数更新最大的连续 $1$ 的个数，因为数组的最后一个元素可能是 $1$，且最长连续 $1$ 的子数组可能出现在数组的末尾，如果遍历数组结束之后不更新最大的连续 $1$ 的个数，则会导致结果错误。\n\n```Java [sol1-Java]\nclass Solution {\n    public int findMaxConsecutiveOnes(int[] nums) {\n        int maxCount = 0, count = 0;\n        int n = nums.length;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == 1) {\n                count++;\n            } else {\n                maxCount = Math.max(maxCount, count);\n                count = 0;\n            }\n        }\n        maxCount = Math.max(maxCount, count);\n        return maxCount;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findMaxConsecutiveOnes(vector<int>& nums) {\n        int maxCount = 0, count = 0;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == 1) {\n                count++;\n            } else {\n                maxCount = max(maxCount, count);\n                count = 0;\n            }\n        }\n        maxCount = max(maxCount, count);\n        return maxCount;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar findMaxConsecutiveOnes = function(nums) {\n    let maxCount = 0, count = 0;\n    const n = nums.length;\n    for (let i = 0; i < n; i++) {\n        if (nums[i] === 1) {\n            count++;\n        } else {\n            maxCount = Math.max(maxCount, count);\n            count = 0;\n        }\n    }\n    maxCount = Math.max(maxCount, count);\n    return maxCount;\n};\n```\n\n```go [sol1-Golang]\nfunc findMaxConsecutiveOnes(nums []int) (maxCnt int) {\n    cnt := 0\n    for _, v := range nums {\n        if v == 1 {\n            cnt++\n        } else {\n            maxCnt = max(maxCnt, cnt)\n            cnt = 0\n        }\n    }\n    maxCnt = max(maxCnt, cnt)\n    return\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol1-C]\nint findMaxConsecutiveOnes(int* nums, int numsSize) {\n    int maxCount = 0, count = 0;\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] == 1) {\n            count++;\n        } else {\n            maxCount = fmax(maxCount, count);\n            count = 0;\n        }\n    }\n    maxCount = fmax(maxCount, count);\n    return maxCount;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        maxCount = count = 0\n\n        for i, num in enumerate(nums):\n            if num == 1:\n                count += 1\n            else:\n                maxCount = max(maxCount, count)\n                count = 0\n        \n        maxCount = max(maxCount, count)\n        return maxCount\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组的长度。需要遍历数组一次。\n\n- 空间复杂度：$O(1)$。"
}