{
	"titleSlug": "number-of-valid-words-in-a-sentence",
	"slug": "ju-zi-zhong-de-you-xiao-dan-ci-shu-by-le-hvow",
	"url": "https://leetcode-cn.com/problems/number-of-valid-words-in-a-sentence/solution/ju-zi-zhong-de-you-xiao-dan-ci-shu-by-le-hvow/",
	"content": "#### 方法一：遍历\n\n**思路与算法**\n\n首先将句子按空格分隔成单词，然后判断单词是否有效。由题意知，单词不有效的条件为以下其中之一：\n\n* 单词中包含数字；\n\n* 单词中包含两个以上连字符；\n\n* 连字符在单词头部或者单词末尾；\n\n* 连字符的左/右边字符不是小写字母；\n\n* 单词中的标点符号不在单词的末尾。\n\n记录有效的单词的个数，即为答案。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def countValidWords(self, sentence: str) -> int:\n        def valid(s: str) -> bool:\n            hasHyphens = False\n            for i, ch in enumerate(s):\n                if ch.isdigit() or ch in \"!.,\" and i < len(s) - 1:\n                    return False\n                if ch == '-':\n                    if hasHyphens or i == 0 or i == len(s) - 1 or not s[i - 1].islower() or not s[i + 1].islower():\n                        return False\n                    hasHyphens = True\n            return True\n\n        return sum(valid(s) for s in sentence.split())\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countValidWords(string sentence) {\n        int n = sentence.length();\n        int l = 0, r = 0;\n        int ret = 0;\n        string_view slice(sentence);\n        while (true) {\n            while (l < n && sentence[l] == ' ') {\n                l++;\n            }\n            if (l >= n) {\n                break;\n            }\n            r = l + 1;\n            while (r < n && sentence[r] != ' ') {\n                r++;\n            }\n            if (isValid(slice.substr(l, r - l))) { // 判断根据空格分解出来的 token 是否有效\n                ret++;\n            }\n            l = r + 1;\n        }\n        return ret;\n    }\n\n    bool isValid(const string_view &word) {\n        int n = word.length();\n        bool has_hyphens = false;\n        for (int i = 0; i < n; i++) {\n            if (word[i] >= '0' && word[i] <= '9') {\n                return false;\n            } else if (word[i] == '-') {\n                if (has_hyphens == true || i == 0 || i == n - 1 || !islower(word[i - 1]) || !islower(word[i + 1])) {\n                    return false;\n                }\n                has_hyphens = true;\n            } else if (word[i] == '!' || word[i] == '.' || word[i] == ',') {\n                if (i != n - 1) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countValidWords(String sentence) {\n        int n = sentence.length();\n        int l = 0, r = 0;\n        int ret = 0;\n        while (true) {\n            while (l < n && sentence.charAt(l) == ' ') {\n                l++;\n            }\n            if (l >= n) {\n                break;\n            }\n            r = l + 1;\n            while (r < n && sentence.charAt(r) != ' ') {\n                r++;\n            }\n            if (isValid(sentence.substring(l, r))) { // 判断根据空格分解出来的 token 是否有效\n                ret++;\n            }\n            l = r + 1;\n        }\n        return ret;\n    }\n\n    public boolean isValid(String word) {\n        int n = word.length();\n        boolean hasHyphens = false;\n        for (int i = 0; i < n; i++) {\n            if (Character.isDigit(word.charAt(i))) {\n                return false;\n            } else if (word.charAt(i) == '-') {\n                if (hasHyphens == true || i == 0 || i == n - 1 || !Character.isLetter(word.charAt(i - 1)) || !Character.isLetter(word.charAt(i + 1))) {\n                    return false;\n                }\n                hasHyphens = true;\n            } else if (word.charAt(i) == '!' || word.charAt(i) == '.' || word.charAt(i) == ',') {\n                if (i != n - 1) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int CountValidWords(string sentence) {\n        int n = sentence.Length;\n        int l = 0, r = 0;\n        int ret = 0;\n        while (true) {\n            while (l < n && sentence[l] == ' ') {\n                l++;\n            }\n            if (l >= n) {\n                break;\n            }\n            r = l + 1;\n            while (r < n && sentence[r] != ' ') {\n                r++;\n            }\n            if (isValid(sentence.Substring(l, r - l))) { // 判断根据空格分解出来的 token 是否有效\n                ret++;\n            }\n            l = r + 1;\n        }\n        return ret;\n    }\n\n    public bool isValid(string word) {\n        int n = word.Length;\n        bool hasHyphens = false;\n        for (int i = 0; i < n; i++) {\n            if (char.IsDigit(word[i])) {\n                return false;\n            } else if (word[i] == '-') {\n                if (hasHyphens == true || i == 0 || i == n - 1 || !char.IsLetter(word[i - 1]) || !char.IsLetter(word[i + 1])) {\n                    return false;\n                }\n                hasHyphens = true;\n            } else if (word[i] == '!' || word[i] == '.' || word[i] == ',') {\n                if (i != n - 1) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C [sol1-C]\nbool isValid(char *word, int n) {\n    int has_hyphens = 0;\n    for (int i = 0; i < n; i++) {\n        if (word[i] >= '0' && word[i] <= '9') {\n            return false;\n        } else if (word[i] == '-') {\n            if (has_hyphens == 1 || i == 0 || i == n - 1 || !islower(word[i - 1]) || !islower(word[i + 1])) {\n                return false;\n            }\n            has_hyphens = 1;\n        } else if (word[i] == '!' || word[i] == '.' || word[i] == ',') {\n            if (i != n - 1) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nint countValidWords(char * sentence){\n    int n = strlen(sentence);\n    int l = 0, r = 0;\n    int ret = 0;\n    while (true) {\n        while (l < n && sentence[l] == ' ') {\n            l++;\n        }\n        if (l >= n) {\n            break;\n        }\n        r = l + 1;\n        while (r < n && sentence[r] != ' ') {\n            r++;\n        }\n        if (isValid(sentence + l, r - l)) { // 判断根据空格分解出来的 token 是否有效\n            ret++;\n        }\n        l = r + 1;\n    }\n    return ret;\n}\n```\n\n```go [sol1-Golang]\nfunc valid(s string) bool {\n    hasHyphens := false\n    for i, ch := range s {\n        if unicode.IsDigit(ch) || strings.ContainsRune(\"!.,\", ch) && i < len(s)-1 {\n            return false\n        }\n        if ch == '-' {\n            if hasHyphens || i == 0 || i == len(s)-1 || !unicode.IsLower(rune(s[i-1])) || !unicode.IsLower(rune(s[i+1])) {\n                return false\n            }\n            hasHyphens = true\n        }\n    }\n    return true\n}\n\nfunc countValidWords(sentence string) (ans int) {\n    for _, s := range strings.Fields(sentence) { // 按照空格分割\n        if valid(s) {\n            ans++\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar countValidWords = function(sentence) {\n    const n = sentence.length;\n    let l = 0, r = 0;\n    let ret = 0;\n    while (true) {\n        while (l < n && sentence[l] === ' ') {\n            l++;\n        }\n        if (l >= n) {\n            break;\n        }\n        r = l + 1;\n        while (r < n && sentence[r] != ' ') {\n            r++;\n        }\n        if (isValid(sentence.slice(l, r))) { // 判断根据空格分解出来的 token 是否有效\n            ret++;\n        }\n        l = r + 1;\n    }\n    return ret;\n};\n\nconst isValid = (word) => {\n    const n = word.length;\n    let hasHyphens = false;\n    for (let i = 0; i < n; i++) {\n        if (word[i] >= '0' && word[i] <= '9') {\n            return false;\n        } else if (word[i] === '-') {\n            if (hasHyphens === true || i === 0 || i === n - 1 || !isLetter(word[i - 1]) || !isLetter(word[i + 1])) {\n                return false;\n            }\n            hasHyphens = true;\n        } else if (word[i] === '!' || word[i] === '.' || word[i] === ',') {\n            if (i !== n - 1) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconst isLetter = (ch) => {\n    if (ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z') {\n        return true;\n    }\n    return false;\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 是句子的长度。切分整个句子，并处理单词需要 $O(n)$。\n\n+ 空间复杂度：$O(1)$。只需要常数空间保存变量。"
}