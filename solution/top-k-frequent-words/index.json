{
	"titleSlug": "top-k-frequent-words",
	"slug": "qian-kge-gao-pin-dan-ci-by-leetcode-solu-3qk0",
	"url": "https://leetcode-cn.com/problems/top-k-frequent-words/solution/qian-kge-gao-pin-dan-ci-by-leetcode-solu-3qk0/",
	"content": "#### 方法一：哈希表 + 排序\n\n**思路及算法**\n\n我们可以预处理出每一个单词出现的频率，然后依据每个单词出现的频率降序排序，最后返回前 $k$ 个字符串即可。\n\n具体地，我们利用哈希表记录每一个字符串出现的频率，然后将哈希表中所有字符串进行排序，排序时，如果两个字符串出现频率相同，那么我们让两字符串中字典序较小的排在前面，否则我们让出现频率较高的排在前面。最后我们只需要保留序列中的前 $k$ 个字符串即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<string> topKFrequent(vector<string>& words, int k) {\n        unordered_map<string, int> cnt;\n        for (auto& word : words) {\n            ++cnt[word];\n        }\n        vector<string> rec;\n        for (auto& [key, value] : cnt) {\n            rec.emplace_back(key);\n        }\n        sort(rec.begin(), rec.end(), [&](const string& a, const string& b) -> bool {\n            return cnt[a] == cnt[b] ? a < b : cnt[a] > cnt[b];\n        });\n        rec.erase(rec.begin() + k, rec.end());\n        return rec;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<String> topKFrequent(String[] words, int k) {\n        Map<String, Integer> cnt = new HashMap<String, Integer>();\n        for (String word : words) {\n            cnt.put(word, cnt.getOrDefault(word, 0) + 1);\n        }\n        List<String> rec = new ArrayList<String>();\n        for (Map.Entry<String, Integer> entry : cnt.entrySet()) {\n            rec.add(entry.getKey());\n        }\n        Collections.sort(rec, new Comparator<String>() {\n            public int compare(String word1, String word2) {\n                return cnt.get(word1) == cnt.get(word2) ? word1.compareTo(word2) : cnt.get(word2) - cnt.get(word1);\n            }\n        });\n        return rec.subList(0, k);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<string> TopKFrequent(string[] words, int k) {\n        Dictionary<string, int> cnt = new Dictionary<string, int>();\n        foreach (string word in words) {\n            if (cnt.ContainsKey(word)) {\n                cnt[word]++;\n            } else {\n                cnt.Add(word, 1);\n            }\n        }\n        List<string> rec = new List<string>();\n        foreach (var item in cnt) {\n            rec.Add(item.Key);\n        }\n        rec.Sort(\n            delegate(string word1, string word2) {\n                return cnt[word1] == cnt[word2] ? word1.CompareTo(word2) : cnt[word2] - cnt[word1];\n            }\n        );\n        return rec.GetRange(0, k);\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc topKFrequent(words []string, k int) []string {\n    cnt := map[string]int{}\n    for _, w := range words {\n        cnt[w]++\n    }\n    uniqueWords := make([]string, 0, len(cnt))\n    for w := range cnt {\n        uniqueWords = append(uniqueWords, w)\n    }\n    sort.Slice(uniqueWords, func(i, j int) bool {\n        s, t := uniqueWords[i], uniqueWords[j]\n        return cnt[s] > cnt[t] || cnt[s] == cnt[t] && s < t\n    })\n    return uniqueWords[:k]\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar topKFrequent = function(words, k) {\n    const cnt = new Map();\n    for (const word of words) {\n        cnt.set(word, (cnt.get(word) || 0) + 1);\n    }\n    const rec = [];\n    for (const entry of cnt.keys()) {\n        rec.push(entry);\n    }\n    rec.sort((word1, word2) => {\n        return cnt.get(word1) === cnt.get(word2) ? word1.localeCompare(word2) : cnt.get(word2) - cnt.get(word1);\n    })\n    return rec.slice(0, k);\n};\n```\n\n```C [sol1-C]\nstruct HashTable {\n    char* key;\n    int val;\n    UT_hash_handle hh;\n};\n\nstruct HashTable* cnt;\n\nint queryVal(struct HashTable* hashTable, char* ikey) {\n    struct HashTable* tmp;\n    HASH_FIND_STR(hashTable, ikey, tmp);\n    return tmp == NULL ? 0 : tmp->val;\n}\n\nint cmp(char** a, char** b) {\n    int valA = queryVal(cnt, *a), valB = queryVal(cnt, *b);\n    if (valA != valB) {\n        return valB - valA;\n    }\n    int lenA = strlen(*a), lenB = strlen(*b);\n    int len = fmin(lenA, lenB);\n    for (int i = 0; i < len; i++) {\n        if ((*a)[i] != (*b)[i]) {\n            return (*a)[i] - (*b)[i];\n        }\n    }\n    return lenA - lenB;\n}\n\nchar** topKFrequent(char** words, int wordsSize, int k, int* returnSize) {\n    cnt = NULL;\n    for (int i = 0; i < wordsSize; i++) {\n        struct HashTable* tmp;\n        HASH_FIND_STR(cnt, words[i], tmp);\n        if (tmp == NULL) {\n            struct HashTable* tmp = malloc(sizeof(struct HashTable));\n            tmp->key = words[i];\n            tmp->val = 1;\n            HASH_ADD_KEYPTR(hh, cnt, tmp->key, strlen(tmp->key), tmp);\n        } else {\n            tmp->val++;\n        }\n    }\n    char** ret = malloc(sizeof(char*) * HASH_COUNT(cnt));\n    *returnSize = 0;\n\n    struct HashTable *iter, *tmp;\n    HASH_ITER(hh, cnt, iter, tmp) {\n        ret[(*returnSize)++] = iter->key;\n    }\n\n    qsort(ret, *returnSize, sizeof(char*), cmp);\n    *returnSize = k;\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(l \\times n + l \\times m \\log m)$，其中 $n$ 表示给定字符串序列的长度，$l$ 表示字符串的平均长度，$m$ 表示实际字符串种类数。我们需要 $l \\times n$ 的时间将字符串插入到哈希表中，以及 $l \\times m \\log m$ 的时间完成字符串比较（最坏情况下所有字符串出现频率都相同，我们需要将它们两两比较）。\n\n- 空间复杂度：$O(l \\times m)$，其中 $l$ 表示字符串的平均长度，$m$ 表示实际字符串种类数。哈希表和生成的排序数组空间占用均为 $O(l \\times m)$。\n\n#### 方法二：优先队列\n\n**思路及算法**\n\n对于前 $k$ 大或前 $k$ 小这类问题，有一个通用的解法：优先队列。优先队列可以在 $O(\\log n)$ 的时间内完成插入或删除元素的操作（其中 $n$ 为优先队列的大小），并可以 $O(1)$ 地查询优先队列顶端元素。\n\n在本题中，我们可以创建一个小根优先队列（顾名思义，就是优先队列顶端元素是最小元素的优先队列）。我们将每一个字符串插入到优先队列中，如果优先队列的大小超过了 $k$，那么我们就将优先队列顶端元素弹出。这样最终优先队列中剩下的 $k$ 个元素就是前 $k$ 个出现次数最多的单词。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<string> topKFrequent(vector<string>& words, int k) {\n        unordered_map<string, int> cnt;\n        for (auto& word : words) {\n            cnt[word]++;\n        }\n        auto cmp = [](const pair<string, int>& a, const pair<string, int>& b) {\n            return a.second == b.second ? a.first < b.first : a.second > b.second;\n        };\n        priority_queue<pair<string, int>, vector<pair<string, int>>, decltype(cmp)> que(cmp);\n        for (auto& it : cnt) {\n            que.emplace(it);\n            if (que.size() > k) {\n                que.pop();\n            }\n        }\n        vector<string> ret(k);\n        for (int i = k - 1; i >= 0; i--) {\n            ret[i] = que.top().first;\n            que.pop();\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<String> topKFrequent(String[] words, int k) {\n        Map<String, Integer> cnt = new HashMap<String, Integer>();\n        for (String word : words) {\n            cnt.put(word, cnt.getOrDefault(word, 0) + 1);\n        }\n        PriorityQueue<Map.Entry<String, Integer>> pq = new PriorityQueue<Map.Entry<String, Integer>>(new Comparator<Map.Entry<String, Integer>>() {\n            public int compare(Map.Entry<String, Integer> entry1, Map.Entry<String, Integer> entry2) {\n                return entry1.getValue() == entry2.getValue() ? entry2.getKey().compareTo(entry1.getKey()) : entry1.getValue() - entry2.getValue();\n            }\n        });\n        for (Map.Entry<String, Integer> entry : cnt.entrySet()) {\n            pq.offer(entry);\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n        List<String> ret = new ArrayList<String>();\n        while (!pq.isEmpty()) {\n            ret.add(pq.poll().getKey());\n        }\n        Collections.reverse(ret);\n        return ret;\n    }\n}\n```\n\n```go [sol2-Golang]\ntype pair struct {\n    w string\n    c int\n}\ntype hp []pair\nfunc (h hp) Len() int            { return len(h) }\nfunc (h hp) Less(i, j int) bool  { a, b := h[i], h[j]; return a.c < b.c || a.c == b.c && a.w > b.w }\nfunc (h hp) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(v interface{}) { *h = append(*h, v.(pair)) }\nfunc (h *hp) Pop() interface{}   { a := *h; v := a[len(a)-1]; *h = a[:len(a)-1]; return v }\n\nfunc topKFrequent(words []string, k int) []string {\n    cnt := map[string]int{}\n    for _, w := range words {\n        cnt[w]++\n    }\n    h := &hp{}\n    for w, c := range cnt {\n        heap.Push(h, pair{w, c})\n        if h.Len() > k {\n            heap.Pop(h)\n        }\n    }\n    ans := make([]string, k)\n    for i := k - 1; i >= 0; i-- {\n        ans[i] = heap.Pop(h).(pair).w\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(l \\times n + m \\times l \\log k)$，其中 $n$ 表示给定字符串序列的长度，$m$ 表示实际字符串种类数，$l$ 表示字符串的平均长度。我们需要 $l \\times n$ 的时间将字符串插入到哈希表中，以及每次插入元素到优先队列中都需要 $l \\log k$ 的时间，共需要插入 $m$ 次。\n\n- 空间复杂度：$O(l \\times (m + k))$，其中 $l$ 表示字符串的平均长度，$m$ 表示实际字符串种类数。哈希表空间占用为 $O(l \\times m)$，优先队列空间占用为 $O(l \\times k)$。\n\n---\n## ✨扣友帮帮团 - 互动答疑\n\n[![讨论.jpg](https://pic.leetcode-cn.com/1621178600-MKHFrl-%E8%AE%A8%E8%AE%BA.jpg){:width=260px}](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/)\n\n\n即日起 - 5 月 30 日，点击 [这里](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/) 前往「[扣友帮帮团](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/)」活动页，把你遇到的问题大胆地提出来，让扣友为你解答～\n\n### 🎁 奖励规则\n被采纳数量排名 1～3 名：「力扣极客套装」 *1 并将获得「力扣神秘应援团」内测资格\n被采纳数量排名 4～10 名：「力扣鼠标垫」 *1 并将获得「力扣神秘应援团」内测资格\n「诲人不倦」：活动期间「解惑者」只要有 1 个回答被采纳，即可获得 20 LeetCoins 奖励！\n「求知若渴」：活动期间「求知者」在活动页发起一次符合要求的疑问帖并至少采纳一次「解惑者」的回答，即可获得 20 LeetCoins 奖励！\n\n活动详情猛戳链接了解更多：[活动｜你有 BUG 我来帮 - 力扣互动答疑季](https://leetcode-cn.com/circle/discuss/xtliW6/)"
}