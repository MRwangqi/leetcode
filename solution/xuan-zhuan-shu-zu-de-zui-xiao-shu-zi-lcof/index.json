{
	"titleSlug": "xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof",
	"slug": "xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-by-leetcode-s",
	"url": "https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-by-leetcode-s/",
	"content": "### 📺 视频题解  \n![...fer》11 旋转数组的最小数字.mp4](9b605d4b-03aa-434f-b30f-62580cbc9381)\n\n### 📖 文字题解\n#### 前言\n\n本题和「[154. 寻找旋转排序数组中的最小值 II](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/)」完全相同，是「[153. 寻找旋转排序数组中的最小值](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/)」的延伸。读者可以先尝试第 153 题，体会在旋转数组中进行二分查找的思路，再来尝试解决本题。\n\n#### 方法一：二分查找\n\n**思路与算法**\n\n一个包含重复元素的升序数组在经过旋转之后，可以得到下面可视化的折线图：\n\n![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_11/1.png)\n\n其中横轴表示数组元素的下标，纵轴表示数组元素的值。图中标出了最小值的位置，是我们需要查找的目标。\n\n我们考虑**数组中的最后一个元素 $x$**：在最小值右侧的元素，它们的值一定都小于等于 $x$；而在最小值左侧的元素，它们的值一定都大于等于 $x$。因此，我们可以根据这一条性质，通过二分查找的方法找出最小值。\n\n在二分查找的每一步中，左边界为 $\\it low$，右边界为 $\\it high$，区间的中点为 $\\it pivot$，最小值就在该区间内。我们将中轴元素 $\\textit{numbers}[\\textit{pivot}]$ 与右边界元素 $\\textit{numbers}[\\textit{high}]$ 进行比较，可能会有以下的三种情况：\n\n第一种情况是 $\\textit{numbers}[\\textit{pivot}] < \\textit{numbers}[\\textit{high}]$。如下图所示，这说明 $\\textit{numbers}[\\textit{pivot}]$ 是最小值右侧的元素，因此我们可以忽略二分查找区间的右半部分。\n\n![fig2](https://assets.leetcode-cn.com/solution-static/jianzhi_11/2.png)\n\n第二种情况是 $\\textit{numbers}[\\textit{pivot}] > \\textit{numbers}[\\textit{high}]$。如下图所示，这说明 $\\textit{numbers}[\\textit{pivot}]$ 是最小值左侧的元素，因此我们可以忽略二分查找区间的左半部分。\n\n![fig3](https://assets.leetcode-cn.com/solution-static/jianzhi_11/3.png)\n\n第三种情况是 $\\textit{numbers}[\\textit{pivot}] == \\textit{numbers}[\\textit{high}]$。如下图所示，由于重复元素的存在，我们并不能确定 $\\textit{numbers}[\\textit{pivot}]$ 究竟在最小值的左侧还是右侧，因此我们不能莽撞地忽略某一部分的元素。我们唯一可以知道的是，由于它们的值相同，所以无论 $\\textit{numbers}[\\textit{high}]$ 是不是最小值，都有一个它的「替代品」$\\textit{numbers}[\\textit{pivot}]$，因此我们可以忽略二分查找区间的右端点。\n\n![fig4](https://assets.leetcode-cn.com/solution-static/jianzhi_11/4.png)\n\n当二分查找结束时，我们就得到了最小值所在的位置。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minArray(vector<int>& numbers) {\n        int low = 0;\n        int high = numbers.size() - 1;\n        while (low < high) {\n            int pivot = low + (high - low) / 2;\n            if (numbers[pivot] < numbers[high]) {\n                high = pivot;\n            }\n            else if (numbers[pivot] > numbers[high]) {\n                low = pivot + 1;\n            }\n            else {\n                high -= 1;\n            }\n        }\n        return numbers[low];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minArray(int[] numbers) {\n        int low = 0;\n        int high = numbers.length - 1;\n        while (low < high) {\n            int pivot = low + (high - low) / 2;\n            if (numbers[pivot] < numbers[high]) {\n                high = pivot;\n            } else if (numbers[pivot] > numbers[high]) {\n                low = pivot + 1;\n            } else {\n                high -= 1;\n            }\n        }\n        return numbers[low];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minArray(self, numbers: List[int]) -> int:\n        low, high = 0, len(numbers) - 1\n        while low < high:\n            pivot = low + (high - low) // 2\n            if numbers[pivot] < numbers[high]:\n                high = pivot \n            elif numbers[pivot] > numbers[high]:\n                low = pivot + 1\n            else:\n                high -= 1\n        return numbers[low]\n```\n\n```C [sol1-C]\nint minArray(int* numbers, int numbersSize) {\n    int low = 0;\n    int high = numbersSize - 1;\n    while (low < high) {\n        int pivot = low + (high - low) / 2;\n        if (numbers[pivot] < numbers[high]) {\n            high = pivot;\n        } else if (numbers[pivot] > numbers[high]) {\n            low = pivot + 1;\n        } else {\n            high -= 1;\n        }\n    }\n    return numbers[low];\n}\n```\n\n```golang [sol1-Golang]\nfunc minArray(numbers []int) int {\n\tlow := 0\n\thigh := len(numbers) - 1\n\tfor low < high {\n\t\tpivot := low + (high - low) / 2\n        if numbers[pivot] < numbers[high] {\n            high = pivot\n        } else if numbers[pivot] > numbers[high] {\n            low = pivot + 1\n        } else {\n            high--\n        }\n\t}\n\treturn numbers[low]\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minArray = function(numbers) {\n    let low = 0;\n    let high = numbers.length - 1;\n    while (low < high) {\n        const pivot = low + Math.floor((high - low) / 2);\n        if (numbers[pivot] < numbers[high]) {\n            high = pivot;\n        } else if (numbers[pivot] > numbers[high]) {\n            low = pivot + 1;\n        } else {\n            high -= 1;\n        }\n    }\n    return numbers[low];\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：平均时间复杂度为 $O(\\log n)$，其中 $n$ 是数组 $\\it numbers$ 的长度。如果数组是随机生成的，那么数组中包含相同元素的概率很低，在二分查找的过程中，大部分情况都会忽略一半的区间。而在最坏情况下，如果数组中的元素完全相同，那么 $\\texttt{while}$ 循环就需要执行 $n$ 次，每次忽略区间的右端点，时间复杂度为 $O(n)$。\n\n* 空间复杂度：$O(1)$。"
}