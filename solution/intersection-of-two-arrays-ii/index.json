{
	"titleSlug": "intersection-of-two-arrays-ii",
	"slug": "liang-ge-shu-zu-de-jiao-ji-ii-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/solution/liang-ge-shu-zu-de-jiao-ji-ii-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n\n![350. 两个数组的交集II.mp4](59b3957f-2bb4-413f-b3f9-3e35c4b9b3d1)\n\n### 📖 文字题解\n\n#### 方法一：哈希表\n\n由于同一个数字在两个数组中都可能出现多次，因此需要用哈希表存储每个数字出现的次数。对于一个数字，其在交集中出现的次数等于该数字在两个数组中出现次数的最小值。\n\n首先遍历第一个数组，并在哈希表中记录第一个数组中的每个数字以及对应出现的次数，然后遍历第二个数组，对于第二个数组中的每个数字，如果在哈希表中存在这个数字，则将该数字添加到答案，并减少哈希表中该数字出现的次数。\n\n为了降低空间复杂度，首先遍历较短的数组并在哈希表中记录每个数字以及对应出现的次数，然后遍历较长的数组得到交集。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/350/350_fig1.gif)\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        if (nums1.length > nums2.length) {\n            return intersect(nums2, nums1);\n        }\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int num : nums1) {\n            int count = map.getOrDefault(num, 0) + 1;\n            map.put(num, count);\n        }\n        int[] intersection = new int[nums1.length];\n        int index = 0;\n        for (int num : nums2) {\n            int count = map.getOrDefault(num, 0);\n            if (count > 0) {\n                intersection[index++] = num;\n                count--;\n                if (count > 0) {\n                    map.put(num, count);\n                } else {\n                    map.remove(num);\n                }\n            }\n        }\n        return Arrays.copyOfRange(intersection, 0, index);\n    }\n}\n```\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n        if (nums1.size() > nums2.size()) {\n            return intersect(nums2, nums1);\n        }\n        unordered_map <int, int> m;\n        for (int num : nums1) {\n            ++m[num];\n        }\n        vector<int> intersection;\n        for (int num : nums2) {\n            if (m.count(num)) {\n                intersection.push_back(num);\n                --m[num];\n                if (m[num] == 0) {\n                    m.erase(num);\n                }\n            }\n        }\n        return intersection;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        m = collections.Counter()\n        for num in nums1:\n            m[num] += 1\n        \n        intersection = list()\n        for num in nums2:\n            if (count := m.get(num, 0)) > 0:\n                intersection.append(num)\n                m[num] -= 1\n                if m[num] == 0:\n                    m.pop(num)\n        \n        return intersection\n```\n\n```golang [sol1-Golang]\nfunc intersect(nums1 []int, nums2 []int) []int {\n    if len(nums1) > len(nums2) {\n        return intersect(nums2, nums1)\n    }\n    m := map[int]int{}\n    for _, num := range nums1 {\n        m[num]++\n    }\n\n    intersection := []int{}\n    for _, num := range nums2 {\n        if m[num] > 0 {\n            intersection = append(intersection, num)\n            m[num]--\n        }\n    }\n    return intersection\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m+n)$，其中 $m$ 和 $n$ 分别是两个数组的长度。需要遍历两个数组并对哈希表进行操作，哈希表操作的时间复杂度是 $O(1)$，因此总时间复杂度与两个数组的长度和呈线性关系。\n\n- 空间复杂度：$O(\\min(m,n))$，其中 $m$ 和 $n$ 分别是两个数组的长度。对较短的数组进行哈希表的操作，哈希表的大小不会超过较短的数组的长度。为返回值创建一个数组 `intersection`，其长度为较短的数组的长度。\n\n#### 方法二：排序 + 双指针\n\n如果两个数组是有序的，则可以使用双指针的方法得到两个数组的交集。\n\n首先对两个数组进行排序，然后使用两个指针遍历两个数组。\n\n初始时，两个指针分别指向两个数组的头部。每次比较两个指针指向的两个数组中的数字，如果两个数字不相等，则将指向较小数字的指针右移一位，如果两个数字相等，将该数字添加到答案，并将两个指针都右移一位。当至少有一个指针超出数组范围时，遍历结束。\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        Arrays.sort(nums1);\n        Arrays.sort(nums2);\n        int length1 = nums1.length, length2 = nums2.length;\n        int[] intersection = new int[Math.min(length1, length2)];\n        int index1 = 0, index2 = 0, index = 0;\n        while (index1 < length1 && index2 < length2) {\n            if (nums1[index1] < nums2[index2]) {\n                index1++;\n            } else if (nums1[index1] > nums2[index2]) {\n                index2++;\n            } else {\n                intersection[index] = nums1[index1];\n                index1++;\n                index2++;\n                index++;\n            }\n        }\n        return Arrays.copyOfRange(intersection, 0, index);\n    }\n}\n```\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n        sort(nums1.begin(), nums1.end());\n        sort(nums2.begin(), nums2.end());\n        int length1 = nums1.size(), length2 = nums2.size();\n        vector<int> intersection;\n        int index1 = 0, index2 = 0;\n        while (index1 < length1 && index2 < length2) {\n            if (nums1[index1] < nums2[index2]) {\n                index1++;\n            } else if (nums1[index1] > nums2[index2]) {\n                index2++;\n            } else {\n                intersection.push_back(nums1[index1]);\n                index1++;\n                index2++;\n            }\n        }\n        return intersection;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        nums1.sort()\n        nums2.sort()\n\n        length1, length2 = len(nums1), len(nums2)\n        intersection = list()\n        index1 = index2 = 0\n        while index1 < length1 and index2 < length2:\n            if nums1[index1] < nums2[index2]:\n                index1 += 1\n            elif nums1[index1] > nums2[index2]:\n                index2 += 1\n            else:\n                intersection.append(nums1[index1])\n                index1 += 1\n                index2 += 1\n        \n        return intersection\n```\n\n```golang [sol2-Golang]\nfunc intersect(nums1 []int, nums2 []int) []int {\n    sort.Ints(nums1)\n    sort.Ints(nums2)\n    length1, length2 := len(nums1), len(nums2)\n    index1, index2 := 0, 0\n\n    intersection := []int{}\n    for index1 < length1 && index2 < length2 {\n        if nums1[index1] < nums2[index2] {\n            index1++\n        } else if nums1[index1] > nums2[index2] {\n            index2++\n        } else {\n            intersection = append(intersection, nums1[index1])\n            index1++\n            index2++\n        }\n    }\n    return intersection\n}\n```\n\n```C [sol2-C]\nint cmp(const void* _a, const void* _b) {\n    int *a = _a, *b = (int*)_b;\n    return *a == *b ? 0 : *a > *b ? 1 : -1;\n}\n\nint* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size,\n               int* returnSize) {\n    qsort(nums1, nums1Size, sizeof(int), cmp);\n    qsort(nums2, nums2Size, sizeof(int), cmp);\n    *returnSize = 0;\n    int* intersection = (int*)malloc(sizeof(int) * fmin(nums1Size, nums2Size));\n    int index1 = 0, index2 = 0;\n    while (index1 < nums1Size && index2 < nums2Size) {\n        if (nums1[index1] < nums2[index2]) {\n            index1++;\n        } else if (nums1[index1] > nums2[index2]) {\n            index2++;\n        } else {\n            intersection[(*returnSize)++] = nums1[index1];\n            index1++;\n            index2++;\n        }\n    }\n    return intersection;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\log m+n \\log n)$，其中 $m$ 和 $n$ 分别是两个数组的长度。对两个数组进行排序的时间复杂度是 $O(m \\log m+n \\log n)$，遍历两个数组的时间复杂度是 $O(m+n)$，因此总时间复杂度是 $O(m \\log m+n \\log n)$。\n\n- 空间复杂度：$O(\\min(m,n))$，其中 $m$ 和 $n$ 分别是两个数组的长度。为返回值创建一个数组 `intersection`，其长度为较短的数组的长度。不过在 C++ 中，我们可以直接创建一个 `vector`，不需要把答案临时存放在一个额外的数组中，所以这种实现的空间复杂度为 $O(1)$。\n\n#### 结语\n\n如果 $\\textit{nums}_2$ 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中。那么就无法高效地对 $\\textit{nums}_2$ 进行排序，因此推荐使用方法一而不是方法二。在方法一中，$\\textit{nums}_2$ 只关系到查询操作，因此每次读取 $\\textit{nums}_2$ 中的一部分数据，并进行处理即可。"
}