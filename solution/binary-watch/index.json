{
	"titleSlug": "binary-watch",
	"slug": "er-jin-zhi-shou-biao-by-leetcode-solutio-3559",
	"url": "https://leetcode-cn.com/problems/binary-watch/solution/er-jin-zhi-shou-biao-by-leetcode-solutio-3559/",
	"content": "#### 方法一：枚举时分\n\n由题意可知，小时由 $4$ 个比特表示，分钟由 $6$ 个比特表示，比特位值为 $0$ 表示灯灭，为 $1$ 表示灯亮。\n\n我们可以枚举小时的所有可能值 $[0,11]$，以及分钟的所有可能值 $[0,59]$，并计算二者的二进制中 $1$ 的个数之和，若为 $\\textit{turnedOn}$，则将其加入到答案中。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<string> readBinaryWatch(int turnedOn) {\n        vector<string> ans;\n        for (int h = 0; h < 12; ++h) {\n            for (int m = 0; m < 60; ++m) {\n                if (__builtin_popcount(h) + __builtin_popcount(m) == turnedOn) {\n                    ans.push_back(to_string(h) + \":\" + (m < 10 ? \"0\" : \"\") + to_string(m));\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<String> readBinaryWatch(int turnedOn) {\n        List<String> ans = new ArrayList<String>();\n        for (int h = 0; h < 12; ++h) {\n            for (int m = 0; m < 60; ++m) {\n                if (Integer.bitCount(h) + Integer.bitCount(m) == turnedOn) {\n                    ans.add(h + \":\" + (m < 10 ? \"0\" : \"\") + m);\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<string> ReadBinaryWatch(int turnedOn) {\n        IList<String> ans = new List<String>();\n        for (int h = 0; h < 12; ++h) {\n            for (int m = 0; m < 60; ++m) {\n                if (BitCount(h) + BitCount(m) == turnedOn) {\n                    ans.Add(h + \":\" + (m < 10 ? \"0\" : \"\") + m);\n                }\n            }\n        }\n        return ans;\n    }\n\n    private static int BitCount(int i) {\n        i = i - ((i >> 1) & 0x55555555);\n        i = (i & 0x33333333) + ((i >> 2) & 0x33333333);\n        i = (i + (i >> 4)) & 0x0f0f0f0f;\n        i = i + (i >> 8);\n        i = i + (i >> 16);\n        return i & 0x3f;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc readBinaryWatch(turnedOn int) (ans []string) {\n    for h := uint8(0); h < 12; h++ {\n        for m := uint8(0); m < 60; m++ {\n            if bits.OnesCount8(h)+bits.OnesCount8(m) == turnedOn {\n                ans = append(ans, fmt.Sprintf(\"%d:%02d\", h, m))\n            }\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar readBinaryWatch = function(turnedOn) {\n    const ans = [];\n    for (let h = 0; h < 12; ++h) {\n        for (let m = 0; m < 60; ++m) {\n            if (h.toString(2).split('0').join('').length + m.toString(2).split('0').join('').length === turnedOn) {\n                ans.push(h + \":\" + (m < 10 ? \"0\" : \"\") + m);\n            }\n        }\n    }\n    return ans;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        ans = list()\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count(\"1\") + bin(m).count(\"1\") == turnedOn:\n                    ans.append(f\"{h}:{m:02d}\")\n        return ans\n```\n\n```C [sol1-C]\nchar** readBinaryWatch(int turnedOn, int* returnSize) {\n    char** ans = malloc(sizeof(char*) * 12 * 60);\n    *returnSize = 0;\n    for (int h = 0; h < 12; ++h) {\n        for (int m = 0; m < 60; ++m) {\n            if (__builtin_popcount(h) + __builtin_popcount(m) == turnedOn) {\n                char* tmp = malloc(sizeof(char) * 6);\n                sprintf(tmp, \"%d:%02d\", h, m);\n                ans[(*returnSize)++] = tmp;\n            }\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。枚举的次数是一个与输入无关的定值。\n\n- 空间复杂度：$O(1)$。仅使用了常数大小的空间。注意返回值不计入空间复杂度。\n\n#### 方法二：二进制枚举\n\n另一种枚举方法是枚举所有 $2^{10}=1024$ 种灯的开闭组合，即用一个二进制数表示灯的开闭，其高 $4$ 位为小时，低 $6$ 位为分钟。若小时和分钟的值均在合法范围内，且二进制中 $1$ 的个数为 $\\textit{turnedOn}$，则将其加入到答案中。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<string> readBinaryWatch(int turnedOn) {\n        vector<string> ans;\n        for (int i = 0; i < 1024; ++i) {\n            int h = i >> 6, m = i & 63; // 用位运算取出高 4 位和低 6 位\n            if (h < 12 && m < 60 && __builtin_popcount(i) == turnedOn) {\n                ans.push_back(to_string(h) + \":\" + (m < 10 ? \"0\" : \"\") + to_string(m));\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<String> readBinaryWatch(int turnedOn) {\n        List<String> ans = new ArrayList<String>();\n        for (int i = 0; i < 1024; ++i) {\n            int h = i >> 6, m = i & 63; // 用位运算取出高 4 位和低 6 位\n            if (h < 12 && m < 60 && Integer.bitCount(i) == turnedOn) {\n                ans.add(h + \":\" + (m < 10 ? \"0\" : \"\") + m);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public IList<string> ReadBinaryWatch(int turnedOn) {\n        IList<String> ans = new List<String>();\n        for (int i = 0; i < 1024; ++i) {\n            int h = i >> 6, m = i & 63; // 用位运算取出高 4 位和低 6 位\n            if (h < 12 && m < 60 && BitCount(i) == turnedOn) {\n                ans.Add(h + \":\" + (m < 10 ? \"0\" : \"\") + m);\n            }\n        }\n        return ans;\n    }\n\n    private static int BitCount(int i) {\n        i = i - ((i >> 1) & 0x55555555);\n        i = (i & 0x33333333) + ((i >> 2) & 0x33333333);\n        i = (i + (i >> 4)) & 0x0f0f0f0f;\n        i = i + (i >> 8);\n        i = i + (i >> 16);\n        return i & 0x3f;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc readBinaryWatch(turnedOn int) (ans []string) {\n    for i := 0; i < 1024; i++ {\n        h, m := i>>6, i&63 // 用位运算取出高 4 位和低 6 位\n        if h < 12 && m < 60 && bits.OnesCount(uint(i)) == turnedOn {\n            ans = append(ans, fmt.Sprintf(\"%d:%02d\", h, m))\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar readBinaryWatch = function(turnedOn) {\n    const ans = [];\n    for (let i = 0; i < 1024; ++i) {\n        let h = i >> 6, m = i & 63; // 用位运算取出高 4 位和低 6 位\n        if (h < 12 && m < 60 && i.toString(2).split('0').join('').length === turnedOn) {\n            ans.push(h + \":\" + (m < 10 ? \"0\" : \"\") + m);\n        }\n    }\n    return ans;\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        ans = list()\n        for i in range(1024):\n            h, m = i >> 6, i & 0x3f   # 用位运算取出高 4 位和低 6 位\n            if h < 12 and m < 60 and bin(i).count(\"1\") == turnedOn:\n                ans.append(f\"{h}:{m:02d}\")\n        return ans\n```\n\n```C [sol2-C]\nchar** readBinaryWatch(int turnedOn, int* returnSize) {\n    char** ans = malloc(sizeof(char*) * 12 * 60);\n    *returnSize = 0;\n    for (int i = 0; i < 1024; ++i) {\n        int h = i >> 6, m = i & 63;  // 用位运算取出高 4 位和低 6 位\n        if (h < 12 && m < 60 && __builtin_popcount(i) == turnedOn) {\n            char* tmp = malloc(sizeof(char) * 6);\n            sprintf(tmp, \"%d:%02d\", h, m);\n            ans[(*returnSize)++] = tmp;\n        }\n    }\n\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。枚举的次数是一个与输入无关的定值。\n\n- 空间复杂度：$O(1)$。仅使用了常数大小的空间。注意返回值不计入空间复杂度。\n\n本题还有利用位运算，枚举恰好有 $\\textit{turnedOn}$ 个 $1$ 的二进制数的方法，但超出了这篇题解的范围，有兴趣的读者可自行查阅相关资料。"
}