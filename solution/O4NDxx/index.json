{
	"titleSlug": "O4NDxx",
	"slug": "er-wei-zi-ju-zhen-de-he-by-leetcode-solu-vtih",
	"url": "https://leetcode-cn.com/problems/O4NDxx/solution/er-wei-zi-ju-zhen-de-he-by-leetcode-solu-vtih/",
	"content": "#### 方法一：一维前缀和\n\n初始化时对矩阵的每一行计算前缀和，检索时对二维区域中的每一行计算子数组和，然后对每一行的子数组和计算总和。\n\n具体实现方面，创建 $m$ 行 $n+1$ 列的二维数组 $\\textit{sums}$，其中 $m$ 和 $n$ 分别是矩阵 $\\textit{matrix}$ 的行数和列数，$\\textit{sums}[i]$ 为 $\\textit{matrix}[i]$ 的前缀和数组。将 $\\textit{sums}$ 的列数设为 $n+1$ 的目的是为了方便计算每一行的子数组和，不需要对 $\\textit{col}_1=0$ 的情况特殊处理。\n\n```Java [sol1-Java]\nclass NumMatrix {\n    int[][] sums;\n\n    public NumMatrix(int[][] matrix) {\n        int m = matrix.length;\n        if (m > 0) {\n            int n = matrix[0].length;\n            sums = new int[m][n + 1];\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    sums[i][j + 1] = sums[i][j] + matrix[i][j];\n                }\n            }\n        }\n    }\n    \n    public int sumRegion(int row1, int col1, int row2, int col2) {\n        int sum = 0;\n        for (int i = row1; i <= row2; i++) {\n            sum += sums[i][col2 + 1] - sums[i][col1];\n        }\n        return sum;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar NumMatrix = function(matrix) {\n    const m = matrix.length;\n    if (m > 0) {\n        const n = matrix[0].length;\n        this.sums = new Array(m).fill(0).map(() => new Array(n + 1).fill(0));\n        for (let i = 0; i < m; i++) {\n            for (let j = 0; j < n; j++) {\n                this.sums[i][j + 1] = this.sums[i][j] + matrix[i][j];\n            }\n        }\n    }\n};\n\nNumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {\n    let sum = 0;\n    for (let i = row1; i <= row2; i++) {\n        sum += this.sums[i][col2 + 1] - this.sums[i][col1];\n    }\n    return sum;\n};\n```\n\n```go [sol1-Golang]\ntype NumMatrix struct {\n    sums [][]int\n}\n\nfunc Constructor(matrix [][]int) NumMatrix {\n    sums := make([][]int, len(matrix))\n    for i, row := range matrix {\n        sums[i] = make([]int, len(row)+1)\n        for j, v := range row {\n            sums[i][j+1] = sums[i][j] + v\n        }\n    }\n    return NumMatrix{sums}\n}\n\nfunc (nm *NumMatrix) SumRegion(row1, col1, row2, col2 int) (sum int) {\n    for i := row1; i <= row2; i++ {\n        sum += nm.sums[i][col2+1] - nm.sums[i][col1]\n    }\n    return\n}\n```\n\n```Python [sol1-Python3]\nclass NumMatrix:\n\n    def __init__(self, matrix: List[List[int]]):\n        m, n = len(matrix), (len(matrix[0]) if matrix else 0)\n        self.sums = [[0] * (n + 1) for _ in range(m)]\n        _sums = self.sums\n\n        for i in range(m):\n            for j in range(n):\n                _sums[i][j + 1] = _sums[i][j] + matrix[i][j]\n\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n        _sums = self.sums\n\n        total = sum(_sums[i][col2 + 1] - _sums[i][col1] for i in range(row1, row2 + 1))\n        return total\n```\n\n```C++ [sol1-C++]\nclass NumMatrix {\npublic:\n    vector<vector<int>> sums;\n\n    NumMatrix(vector<vector<int>>& matrix) {\n        int m = matrix.size();\n        if (m > 0) {\n            int n = matrix[0].size();\n            sums.resize(m, vector<int>(n + 1));\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    sums[i][j + 1] = sums[i][j] + matrix[i][j];\n                }\n            }\n        }\n    }\n\n    int sumRegion(int row1, int col1, int row2, int col2) {\n        int sum = 0;\n        for (int i = row1; i <= row2; i++) {\n            sum += sums[i][col2 + 1] - sums[i][col1];\n        }\n        return sum;\n    }\n};\n```\n\n```C [sol1-C]\ntypedef struct {\n    int** sums;\n    int sumsSize;\n} NumMatrix;\n\nNumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {\n    NumMatrix* ret = malloc(sizeof(NumMatrix));\n    ret->sums = malloc(sizeof(int*) * matrixSize);\n    ret->sumsSize = matrixSize;\n    for (int i = 0; i < matrixSize; i++) {\n        ret->sums[i] = malloc(sizeof(int) * (matrixColSize[i] + 1));\n        ret->sums[i][0] = 0;\n        for (int j = 0; j < matrixColSize[i]; j++) {\n            ret->sums[i][j + 1] = ret->sums[i][j] + matrix[i][j];\n        }\n    }\n    return ret;\n}\n\nint numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {\n    int sum = 0;\n    for (int i = row1; i <= row2; i++) {\n        sum += obj->sums[i][col2 + 1] - obj->sums[i][col1];\n    }\n    return sum;\n}\n\nvoid numMatrixFree(NumMatrix* obj) {\n    for (int i = 0; i < obj->sumsSize; i++) {\n        free(obj->sums[i]);\n    }\n    free(obj->sums);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：初始化 $O(mn)$，每次检索 $O(m)$，其中 $m$ 和 $n$ 分别是矩阵 $\\textit{matrix}$ 的行数和列数。\n  初始化需要遍历矩阵 $\\textit{matrix}$ 计算二维前缀和，时间复杂度是 $O(mn)$。\n  每次检索需要对二维区域中的每一行计算子数组和，二维区域的行数不超过 $m$，计算每一行的子数组和的时间复杂度是 $O(1)$，因此每次检索的时间复杂度是 $O(m)$。\n\n- 空间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是矩阵 $\\textit{matrix}$ 的行数和列数。需要创建一个 $m$ 行 $n+1$ 列的前缀和数组 $\\textit{sums}$。\n\n#### 方法二：二维前缀和\n\n方法一虽然利用了前缀和，但是每次检索的时间复杂度是 $O(m)$，仍然没有降到 $O(1)$。为了将每次检索的时间复杂度降到 $O(1)$，需要使用二维前缀和，在初始化的时候计算二维前缀和数组。\n\n假设 $m$ 和 $n$ 分别是矩阵 $\\textit{matrix}$ 的行数和列数。定义当 $0 \\le i<m$ 且 $0 \\le j<n$ 时，$f(i,j)$ 为矩阵 $\\textit{matrix}$ 的以 $(i,j)$ 为右下角的子矩阵的元素之和：\n\n$$\nf(i,j)=\\sum\\limits_{p=0}^i \\sum\\limits_{q=0}^j \\textit{matrix}[p][q]\n$$\n\n当 $i=0$ 或 $j=0$ 时，计算 $f(i,j)$ 只需要对矩阵 $\\textit{matrix}$ 的最上边的行和最左边的列分别计算前缀和即可。当 $i$ 和 $j$ 都大于 $0$ 时，如何计算 $f(i,j)$ 的值？\n\n当 $i$ 和 $j$ 都大于 $0$ 时，假设计算 $f(i,j)$ 时已经知道了 $f(i-1,j)$、$f(i,j-1)$ 和 $f(i-1,j-1)$ 的值。为了计算 $f(i,j)$，自然而然会想到使用 $f(i-1,j)$、$f(i,j-1)$ 和 $\\textit{matrix}[i][j]$ 的值。\n\n注意到 $f(i-1,j)$ 和 $f(i,j-1)$ 这两项涉及到的矩阵 $\\textit{matrix}$ 的元素有重合，矩阵 $\\textit{matrix}$ 的以 $(i-1,j-1)$ 为右下角的子矩阵都在这两项中出现。因此如果计算 $f(i-1,j)+f(i,j-1)+\\textit{matrix}[i][j]$，则该结果值比 $f(i,j)$ 多了 $f(i-1,j-1)$，因此 $f(i,j)$ 的计算如下：\n\n$$\nf(i,j)=f(i-1,j)+f(i,j-1)-f(i-1,j-1)+\\textit{matrix}[i][j]\n$$\n\n具体推导如下：\n\n$$\n\\begin{aligned}\n&\\quad \\ f(i,j) \\\\\n&=\\sum\\limits_{p=0}^{i-1} \\sum\\limits_{q=0}^{j-1} \\textit{matrix}[p][q]+\\sum\\limits_{p=0}^{i-1} \\textit{matrix}[p][j]+\\sum\\limits_{q=0}^{j-1} \\textit{matrix}[i][q]+\\textit{matrix}[i][j] \\\\\n&=\\Big(\\sum\\limits_{p=0}^{i-1} \\sum\\limits_{q=0}^{j-1} \\textit{matrix}[p][q]+\\sum\\limits_{p=0}^{i-1} \\textit{matrix}[p][j]\\Big) \\\\\n&\\quad+\\Big(\\sum\\limits_{p=0}^{i-1} \\sum\\limits_{q=0}^{j-1} \\textit{matrix}[p][q]+\\sum\\limits_{q=0}^{j-1} \\textit{matrix}[i][q]\\Big) \\\\\n&\\quad-\\sum\\limits_{p=0}^{i-1} \\sum\\limits_{q=0}^{j-1} \\textit{matrix}[p][q] \\\\\n&\\quad+\\textit{matrix}[i][j] \\\\\n&=\\sum\\limits_{p=0}^{i-1} \\sum\\limits_{q=0}^j \\textit{matrix}[p][q]+\\sum\\limits_{p=0}^i \\sum\\limits_{q=0}^{j-1} \\textit{matrix}[p][q]-\\sum\\limits_{p=0}^{i-1} \\sum\\limits_{q=0}^{j-1} \\textit{matrix}[p][q]+\\textit{matrix}[i][j] \\\\\n&=f(i-1,j)+f(i,j-1)-f(i-1,j-1)+\\textit{matrix}[i][j]\n\\end{aligned}\n$$\n\n因此在初始化的时候，即可对所有 $0 \\le i<m$ 和 $0 \\le j<n$ 计算得到 $f(i,j)$ 的值。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_013/1.png)\n\n检索时，应利用预处理得到的 $f$ 的值。当 $\\textit{row}_1=0$ 且 $\\textit{col}_1=0$ 时，$\\text{sumRegion}(\\textit{row}_1,\\textit{col}_1,\\textit{row}_2,\\textit{col}_2)=f(\\textit{row}_2,\\textit{col}_2)$。\n\n当 $\\textit{row}_1 \\le \\textit{row}_2$ 且 $\\textit{col}_1 \\le \\textit{col}_2$ 时，$\\text{sumRegion}(\\textit{row}_1,\\textit{col}_1,\\textit{row}_2,\\textit{col}_2)$ 可以写成如下形式：\n\n$$\n\\begin{aligned}\n&\\quad \\ \\text{sumRegion}(\\textit{row}_1,\\textit{col}_1,\\textit{row}_2,\\textit{col}_2) \\\\\n&=\\text{sumRegion}(0,0,\\textit{row}_2,\\textit{col}_2) \\\\\n&\\quad-\\text{sumRegion}(0,\\textit{col}_1,\\textit{row}_1-1,\\textit{col}_2) \\\\\n&\\quad-\\text{sumRegion}(\\textit{row}_1,0,\\textit{row}_2,\\textit{col}_1-1) \\\\\n&\\quad-\\text{sumRegion}(0,0,\\textit{row}_1-1,\\textit{col}_1-1) \\\\\n&=\\text{sumRegion}(0,0,\\textit{row}_2,\\textit{col}_2) \\\\\n&\\quad-(\\text{sumRegion}(0,\\textit{col}_1,\\textit{row}_1-1,\\textit{col}_2)+\\text{sumRegion}(0,0,\\textit{row}_1-1,\\textit{col}_1-1)) \\\\\n&\\quad-(\\text{sumRegion}(\\textit{row}_1,0,\\textit{row}_2,\\textit{col}_1-1)+\\text{sumRegion}(0,0,\\textit{row}_1-1,\\textit{col}_1-1)) \\\\\n&\\quad-\\text{sumRegion}(0,0,\\textit{row}_1-1,\\textit{col}_1-1) \\\\\n&\\quad+2 \\times \\text{sumRegion}(\\textit{row}_1,0,\\textit{row}_2,\\textit{col}_1-1) \\\\\n&=\\text{sumRegion}(0,0,\\textit{row}_2,\\textit{col}_2) \\\\\n&\\quad-\\text{sumRegion}(0,0,\\textit{row}_1-1,\\textit{col}_2) \\\\\n&\\quad-\\text{sumRegion}(0,0,\\textit{row}_2,\\textit{col}_1-1) \\\\\n&\\quad+\\text{sumRegion}(0,0,\\textit{row}_1-1,\\textit{col}_1-1) \\\\\n&=f(\\textit{row}_2,\\textit{col}_2)-f(\\textit{row}_1-1,\\textit{col}_2)-f(\\textit{row}_2,\\textit{col}_1-1)+f(\\textit{row}_1-1,\\textit{col}_1-1)\n\\end{aligned}\n$$\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_013/2.png),![ppt2](https://assets.leetcode-cn.com/solution-static/jianzhi_II_013/3.png),![ppt3](https://assets.leetcode-cn.com/solution-static/jianzhi_II_013/4.png),![ppt4](https://assets.leetcode-cn.com/solution-static/jianzhi_II_013/5.png)>\n\n即可在 $O(1)$ 时间内得到 $\\text{sumRegion}(\\textit{row}_1,\\textit{col}_1,\\textit{row}_2,\\textit{col}_2)$ 的值。\n\n具体实现方面，创建 $m+1$ 行 $n+1$ 列的二维数组 $\\textit{sums}$，其中 $\\textit{sums}[i+1][j+1]$ 的值为上述 $f(i,j)$ 的值。\n\n将 $\\textit{sums}$ 的行数和列数分别设为 $m+1$ 和 $n+1$ 的目的是为了方便计算 $\\text{sumRegion}(\\textit{row}_1,\\textit{col}_1,\\textit{row}_2,\\textit{col}_2)$ ，不需要对 $\\textit{row}_1=0$ 和 $\\textit{col}_1=0$ 的情况特殊处理。此时有：\n\n$$\n\\begin{aligned}\n&\\quad \\ \\text{sumRegion}(\\textit{row}_1,\\textit{col}_1,\\textit{row}_2,\\textit{col}_2) \\\\\n&=\\textit{sums}[\\textit{row}_2+1][\\textit{col}_2+1]-\\textit{sums}[\\textit{row}_1][\\textit{col}_2+1]-\\textit{sums}[\\textit{row}_2+1][\\textit{col}_1]+\\textit{sums}[\\textit{row}_1][\\textit{col}_1]\n\\end{aligned}\n$$\n\n```Java [sol2-Java]\nclass NumMatrix {\n    int[][] sums;\n\n    public NumMatrix(int[][] matrix) {\n        int m = matrix.length;\n        if (m > 0) {\n            int n = matrix[0].length;\n            sums = new int[m + 1][n + 1];\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    sums[i + 1][j + 1] = sums[i][j + 1] + sums[i + 1][j] - sums[i][j] + matrix[i][j];\n                }\n            }\n        }\n    }\n    \n    public int sumRegion(int row1, int col1, int row2, int col2) {\n        return sums[row2 + 1][col2 + 1] - sums[row1][col2 + 1] - sums[row2 + 1][col1] + sums[row1][col1];\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar NumMatrix = function(matrix) {\n    const m = matrix.length;\n    if (m > 0) {\n        const n = matrix[0].length;\n        this.sums = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0));\n        for (let i = 0; i < m; i++) {\n            for (let j = 0; j < n; j++) {\n                this.sums[i + 1][j + 1] = this.sums[i][j + 1] + this.sums[i + 1][j] - this.sums[i][j] + matrix[i][j];\n            }\n        }\n    }\n};\n\nNumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {\n    return this.sums[row2 + 1][col2 + 1] - this.sums[row1][col2 + 1] - this.sums[row2 + 1][col1] + this.sums[row1][col1];\n};\n```\n\n```go [sol2-Golang]\ntype NumMatrix struct {\n    sums [][]int\n}\n\nfunc Constructor(matrix [][]int) NumMatrix {\n    m := len(matrix)\n    if m == 0 {\n        return NumMatrix{}\n    }\n    n := len(matrix[0])\n    sums := make([][]int, m+1)\n    sums[0] = make([]int, n+1)\n    for i, row := range matrix {\n        sums[i+1] = make([]int, n+1)\n        for j, v := range row {\n            sums[i+1][j+1] = sums[i+1][j] + sums[i][j+1] - sums[i][j] + v\n        }\n    }\n    return NumMatrix{sums}\n}\n\nfunc (nm *NumMatrix) SumRegion(row1, col1, row2, col2 int) int {\n    return nm.sums[row2+1][col2+1] - nm.sums[row1][col2+1] - nm.sums[row2+1][col1] + nm.sums[row1][col1]\n}\n```\n\n```Python [sol2-Python3]\nclass NumMatrix:\n\n    def __init__(self, matrix: List[List[int]]):\n        m, n = len(matrix), (len(matrix[0]) if matrix else 0)\n        self.sums = [[0] * (n + 1) for _ in range(m + 1)]\n        _sums = self.sums\n\n        for i in range(m):\n            for j in range(n):\n                _sums[i + 1][j + 1] = _sums[i][j + 1] + _sums[i + 1][j] - _sums[i][j] + matrix[i][j]\n\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\n        _sums = self.sums\n\n        return _sums[row2 + 1][col2 + 1] - _sums[row1][col2 + 1] - _sums[row2 + 1][col1] + _sums[row1][col1]\n```\n\n```C++ [sol2-C++]\nclass NumMatrix {\npublic:\n    vector<vector<int>> sums;\n\n    NumMatrix(vector<vector<int>>& matrix) {\n        int m = matrix.size();\n        if (m > 0) {\n            int n = matrix[0].size();\n            sums.resize(m + 1, vector<int>(n + 1));\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    sums[i + 1][j + 1] = sums[i][j + 1] + sums[i + 1][j] - sums[i][j] + matrix[i][j];\n                }\n            }\n        }\n    }\n\n    int sumRegion(int row1, int col1, int row2, int col2) {\n        return sums[row2 + 1][col2 + 1] - sums[row1][col2 + 1] - sums[row2 + 1][col1] + sums[row1][col1];\n    }\n};\n```\n\n```C [sol2-C]\ntypedef struct {\n    int** sums;\n    int sumsSize;\n} NumMatrix;\n\nNumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {\n    NumMatrix* ret = malloc(sizeof(NumMatrix));\n    ret->sums = malloc(sizeof(int*) * (matrixSize + 1));\n    ret->sumsSize = matrixSize + 1;\n    int n = matrixSize ? matrixColSize[0] : 0;\n    for (int i = 0; i <= matrixSize; i++) {\n        ret->sums[i] = malloc(sizeof(int) * (n + 1));\n        memset(ret->sums[i], 0, sizeof(int) * (n + 1));\n    }\n    for (int i = 0; i < matrixSize; i++) {\n        for (int j = 0; j < matrixColSize[i]; j++) {\n            ret->sums[i + 1][j + 1] = ret->sums[i][j + 1] + ret->sums[i + 1][j] - ret->sums[i][j] + matrix[i][j];\n        }\n    }\n    return ret;\n}\n\nint numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {\n    return obj->sums[row2 + 1][col2 + 1] - obj->sums[row1][col2 + 1] - obj->sums[row2 + 1][col1] + obj->sums[row1][col1];\n}\n\nvoid numMatrixFree(NumMatrix* obj) {\n    for (int i = 0; i < obj->sumsSize; i++) {\n        free(obj->sums[i]);\n    }\n    free(obj->sums);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：初始化 $O(mn)$，每次检索 $O(1)$，其中 $m$ 和 $n$ 分别是矩阵 $\\textit{matrix}$ 的行数和列数。\n  初始化需要遍历矩阵 $\\textit{matrix}$ 计算二维前缀和，时间复杂度是 $O(mn)$。\n  每次检索的时间复杂度是 $O(1)$。\n\n- 空间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是矩阵 $\\textit{matrix}$ 的行数和列数。需要创建一个 $m+1$ 行 $n+1$ 列的二维前缀和数组 $\\textit{sums}$。"
}