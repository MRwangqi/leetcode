{
	"titleSlug": "number-of-days-between-two-dates",
	"slug": "ri-qi-zhi-jian-ge-ji-tian-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/number-of-days-between-two-dates/solution/ri-qi-zhi-jian-ge-ji-tian-by-leetcode-solution/",
	"content": "#### 方法一：将日期转化为为整数（暴力）\n\n由于题目中的日期不会早于 1971 年，我们可以将两个日期转化为距离 1971 年 1 月 1 日的天数。这一转化过程可以直接暴力求解：从当前日期开始，一天一天递减，直到 1971 年 1 月 1 日为止。\n\n```python []\nclass Solution:\n    def leap_year(self, year):\n        return (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0)\n\n    def date_to_int(self, year, month, day):\n        ans = 0\n        month_length = [31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30]\n        while year != 1971 or month != 1 or day != 1:\n            ans += 1\n            day -= 1\n            if day == 0:\n                month -= 1\n                day = month_length[month]\n                if month == 2 and self.leap_year(year):\n                    day += 1\n            if month == 0:\n                year -= 1\n                month = 12\n        return ans\n            \n    def daysBetweenDates(self, date1: str, date2: str) -> int:\n        date1 = [int(i) for i in date1.split('-')]\n        date2 = [int(i) for i in date2.split('-')]\n        return abs(self.date_to_int(*date1) - self.date_to_int(*date2))\n\n```\n\n```C++ []\nclass Solution {\n    bool leap_year(int year) {\n         return ((year % 400 == 0) || (year % 100 != 0 && year % 4 == 0));\n    }\n    int date_to_int(string date) {\n        int year, month, day;\n        sscanf(date.c_str(), \"%d-%d-%d\", &year, &month, &day);\n        int month_length[] = {31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30};\n        int ans = 0;\n        while (year != 1971 or month != 1 or day != 1) {\n            ++ans;\n            if (--day == 0)\n                if (--month == 0)\n                    --year;\n            if (day == 0) {\n                day = month_length[month];\n                if (month == 2 && leap_year(year))\n                    ++day;\n            }\n            if (month == 0)\n                month = 12;\n        }\n        return ans;\n    }\npublic:\n    int daysBetweenDates(string date1, string date2) {\n        return abs(date_to_int(date1) - date_to_int(date2));\n    }\n};\n```\n\n##### 复杂度分析\n\n  * 时间复杂度：$O(n)$，$n$ 为输入日期到 1971 年的天数。\n  * 空间复杂度：$O(1)$\n\n#### 方法二：优化日期转化过程\n\n日期一天一天递减效率不高。可以先按日，月，年的顺序依次直接转化为 1 日，1 月，1971 年，经过的天数可以直接计算得到。其中年份部分由于有闰年的因素，用 365 乘以年份之后，要再加上闰年的数量。闰年的数量不太好计算。我们采取以下策略：\n\n    1. 先加上所有模 4 为 0 的年份的数量。此时有些模 100 为 0 的不是闰年的年份被加上了。\n    2. 再减去所有模 100 为 0 的年份的数量。此时有些模 400 为 0 的是闰年的年份被减去了。\n    3. 再加上所有模 400 为 0 的年份的数量。完成。\n\n```python []\nclass Solution:\n    def leap_year(self, year):\n        return ((year % 400 == 0) or (year % 100 != 0 and year % 4 == 0))\n    def date_to_int(self, year, month, day):\n        month_length = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        ans = day - 1\n        while month != 0:\n            month -= 1\n            ans += month_length[month]\n            if month == 2 and self.leap_year(year):\n                ans += 1\n        ans += 365 * (year - 1971)\n        ans += (year - 1) // 4 - 1971 // 4\n        ans -= (year - 1) // 100 - 1971 // 100\n        ans += (year - 1) // 400 - 1971 // 400\n        return ans\n            \n    def daysBetweenDates(self, date1: str, date2: str) -> int:\n        date1 = [int(i) for i in date1.split('-')]\n        date2 = [int(i) for i in date2.split('-')]\n        return abs(self.date_to_int(*date1) - self.date_to_int(*date2))\n\n```\n\n```C++ []\nclass Solution {\n    bool leap_year(int year) {\n         return ((year % 400 == 0) || (year % 100 != 0 && year % 4 == 0));\n    }\n    int date_to_int(string date) {\n        int year, month, day;\n        sscanf(date.c_str(), \"%d-%d-%d\", &year, &month, &day);\n        int month_length[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int ans = day - 1;\n        while (month != 0) {\n            --month;\n            ans += month_length[month];\n            if (month == 2 && leap_year(year))\n                ans += 1;\n        }\n        ans += 365 * (year - 1971);\n        ans += (year - 1) / 4 - 1971 / 4;\n        ans -= (year - 1) / 100 - 1971 / 100;\n        ans += (year - 1) / 400 - 1971 / 400;\n        return ans;\n    }\npublic:\n    int daysBetweenDates(string date1, string date2) {\n        return abs(date_to_int(date1) - date_to_int(date2));\n    }\n};\n```\n\n##### 复杂度分析\n\n  * 时间复杂度：$O(1)$\n  * 空间复杂度：$O(1)$"
}