{
	"titleSlug": "count-good-meals",
	"slug": "da-can-ji-shu-by-leetcode-solution-fvg9",
	"url": "https://leetcode-cn.com/problems/count-good-meals/solution/da-can-ji-shu-by-leetcode-solution-fvg9/",
	"content": "#### 方法一：哈希表\n\n朴素的解法是遍历数组 $\\textit{deliciousness}$ 中的每对元素，对于每对元素，计算两个元素之和是否等于 $2$ 的幂。该解法的时间复杂度为 $O(n^2)$，会超出时间限制。\n\n上述朴素解法存在同一个元素被重复计算的情况，因此可以使用哈希表减少重复计算，降低时间复杂度。具体做法是，使用哈希表存储数组中的每个元素的出现次数，遍历到数组 $\\textit{deliciousness}$ 中的某个元素时，在哈希表中寻找与当前元素的和等于 $2$ 的幂的元素个数，然后用当前元素更新哈希表。由于遍历数组时，哈希表中已有的元素的下标一定小于当前元素的下标，因此任意一对元素之和等于 $2$ 的幂的元素都不会被重复计算。\n\n令 $\\textit{maxVal}$ 表示数组 $\\textit{deliciousness}$ 中的最大元素，则数组中的任意两个元素之和都不会超过 $\\textit{maxVal} \\times 2$。令 $\\textit{maxSum} = \\textit{maxVal} \\times 2$，则任意一顿大餐的美味程度之和为不超过 $\\textit{maxSum}$ 的某个 $2$ 的幂。\n\n对于某个特定的 $2$ 的幂 $\\textit{sum}$，可以在 $O(n)$ 的时间内计算数组 $\\textit{deliciousness}$ 中元素之和等于 $\\textit{sum}$ 的元素对的数量。数组 $\\textit{deliciousness}$ 中的最大元素 $\\textit{maxVal}$ 满足 $\\textit{maxVal} \\le C$，其中 $C=2^{20}$，则不超过 $\\textit{maxSum}$ 的 $2$ 的幂有 $O(\\log \\textit{maxSum})=O(\\log \\textit{maxVal})=O(\\log C)$ 个，因此可以在 $O(n \\log C)$ 的时间内计算数组 $\\textit{deliciousness}$ 中的大餐数量。\n\n```Java [sol1-Java]\nclass Solution {\n    public int countPairs(int[] deliciousness) {\n        final int MOD = 1000000007;\n        int maxVal = 0;\n        for (int val : deliciousness) {\n            maxVal = Math.max(maxVal, val);\n        }\n        int maxSum = maxVal * 2;\n        int pairs = 0;\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        int n = deliciousness.length;\n        for (int i = 0; i < n; i++) {\n            int val = deliciousness[i];\n            for (int sum = 1; sum <= maxSum; sum <<= 1) {\n                int count = map.getOrDefault(sum - val, 0);\n                pairs = (pairs + count) % MOD;\n            }\n            map.put(val, map.getOrDefault(val, 0) + 1);\n        }\n        return pairs;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int CountPairs(int[] deliciousness) {\n        const int MOD = 1000000007;\n        int maxVal = 0;\n        foreach (int val in deliciousness) {\n            maxVal = Math.Max(maxVal, val);\n        }\n        int maxSum = maxVal * 2;\n        int pairs = 0;\n        Dictionary<int, int> dictionary = new Dictionary<int, int>();\n        int n = deliciousness.Length;\n        for (int i = 0; i < n; i++) {\n            int val = deliciousness[i];\n            for (int sum = 1; sum <= maxSum; sum <<= 1) {\n                int count = 0;\n                dictionary.TryGetValue(sum - val, out count);\n                pairs = (pairs + count) % MOD;\n            }\n            if (dictionary.ContainsKey(val)) {\n                dictionary[val]++;\n            } else {\n                dictionary.Add(val, 1);\n            }\n        }\n        return pairs;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar countPairs = function(deliciousness) {\n    const MOD = 1000000007;\n    let maxVal = 0;\n    for (const val of deliciousness) {\n        maxVal = Math.max(maxVal, val);\n    }\n    const maxSum = maxVal * 2;\n    let pairs = 0;\n    const map = new Map();\n    const n = deliciousness.length;\n    for (let i = 0; i < n; i++) {\n        const val = deliciousness[i];\n        for (let sum = 1; sum <= maxSum; sum <<= 1) {\n            const count = map.get(sum - val) || 0;\n            pairs = (pairs + count) % MOD;\n        }\n        map.set(val, (map.get(val) || 0) + 1);\n    }\n    return pairs;\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    static constexpr int MOD = 1'000'000'007;\n\n    int countPairs(vector<int>& deliciousness) {\n        int maxVal = *max_element(deliciousness.begin(), deliciousness.end());\n        int maxSum = maxVal * 2;\n        int pairs = 0;\n        unordered_map<int, int> mp;\n        int n = deliciousness.size();\n        for (auto& val : deliciousness) {\n            for (int sum = 1; sum <= maxSum; sum <<= 1) {\n                int count = mp.count(sum - val) ? mp[sum - val] : 0;\n                pairs = (pairs + count) % MOD;\n            }\n            mp[val]++;\n        }\n        return pairs;\n    }\n};\n```\n\n```C [sol1-C]\nstruct HashTable {\n    int key, val;\n    UT_hash_handle hh;\n};\n\nconst int MOD = 1000000007;\n\nint countPairs(int* deliciousness, int deliciousnessSize) {\n    int maxVal = 0;\n    for (int i = 0; i < deliciousnessSize; i++) {\n        maxVal = fmax(maxVal, deliciousness[i]);\n    }\n    int maxSum = maxVal * 2;\n    int pairs = 0;\n    struct HashTable *hashTable = NULL, *tmp;\n    int n = deliciousnessSize;\n    for (int i = 0; i < deliciousnessSize; i++) {\n        int val = deliciousness[i];\n        for (int sum = 1; sum <= maxSum; sum <<= 1) {\n            int target = sum - val;\n            HASH_FIND_INT(hashTable, &target, tmp);\n            int count = tmp == NULL ? 0 : tmp->val;\n            pairs = (pairs + count) % MOD;\n        }\n        HASH_FIND_INT(hashTable, &val, tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct HashTable));\n            tmp->key = val, tmp->val = 1;\n            HASH_ADD_INT(hashTable, key, tmp);\n        } else {\n            tmp->val++;\n        }\n    }\n    return pairs;\n}\n```\n\n```go [sol1-Golang]\nfunc countPairs(deliciousness []int) (ans int) {\n    maxVal := deliciousness[0]\n    for _, val := range deliciousness[1:] {\n        if val > maxVal {\n            maxVal = val\n        }\n    }\n    maxSum := maxVal * 2\n    cnt := map[int]int{}\n    for _, val := range deliciousness {\n        for sum := 1; sum <= maxSum; sum <<= 1 {\n            ans += cnt[sum-val]\n        }\n        cnt[val]++\n    }\n    return ans % (1e9 + 7)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log C)$，其中 $n$ 是数组 $\\textit{deliciousness}$ 的长度，$C$ 是数组 $\\textit{deliciousness}$ 中的元素值上限，这道题中 $C=2^{20}$。需要遍历数组 $\\textit{deliciousness}$ 一次，对于其中的每个元素，需要 $O(\\log C)$ 的时间计算包含该元素的大餐数量，因此总时间复杂度是 $O(n \\log C)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{deliciousness}$ 的长度。需要创建哈希表，哈希表的大小不超过 $n$。"
}