{
	"titleSlug": "maximum-points-you-can-obtain-from-cards",
	"slug": "ke-huo-de-de-zui-da-dian-shu-by-leetcode-7je9",
	"url": "https://leetcode-cn.com/problems/maximum-points-you-can-obtain-from-cards/solution/ke-huo-de-de-zui-da-dian-shu-by-leetcode-7je9/",
	"content": "#### 方法一：滑动窗口\n\n**思路**\n\n记数组 $\\textit{cardPoints}$ 的长度为 $n$，由于只能从开头和末尾拿 $k$ 张卡牌，所以最后剩下的必然是**连续的** $n-k$ 张卡牌。\n\n我们可以通过求出剩余卡牌点数之和的最小值，来求出拿走卡牌点数之和的最大值。\n\n**算法**\n\n由于剩余卡牌是连续的，使用一个固定长度为 $n-k$ 的滑动窗口对数组 $\\textit{cardPoints}$ 进行遍历，求出滑动窗口最小值，然后用所有卡牌的点数之和减去该最小值，即得到了拿走卡牌点数之和的最大值。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxScore(vector<int>& cardPoints, int k) {\n        int n = cardPoints.size();\n        // 滑动窗口大小为 n-k\n        int windowSize = n - k;\n        // 选前 n-k 个作为初始值\n        int sum = accumulate(cardPoints.begin(), cardPoints.begin() + windowSize, 0);\n        int minSum = sum;\n        for (int i = windowSize; i < n; ++i) {\n            // 滑动窗口每向右移动一格，增加从右侧进入窗口的元素值，并减少从左侧离开窗口的元素值\n            sum += cardPoints[i] - cardPoints[i - windowSize];\n            minSum = min(minSum, sum);\n        }\n        return accumulate(cardPoints.begin(), cardPoints.end(), 0) - minSum;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n        n = len(cardPoints)\n        # 滑动窗口大小为 n-k\n        windowSize = n - k\n        # 选前 n-k 个作为初始值\n        s = sum(cardPoints[:windowSize])\n        minSum = s\n        for i in range(windowSize, n):\n            # 滑动窗口每向右移动一格，增加从右侧进入窗口的元素值，并减少从左侧离开窗口的元素值\n            s += cardPoints[i] - cardPoints[i - windowSize]\n            minSum = min(minSum, s)\n        return sum(cardPoints) - minSum\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxScore(int[] cardPoints, int k) {\n        int n = cardPoints.length;\n        // 滑动窗口大小为 n-k\n        int windowSize = n - k;\n        // 选前 n-k 个作为初始值\n        int sum = 0;\n        for (int i = 0; i < windowSize; ++i) {\n            sum += cardPoints[i];\n        }\n        int minSum = sum;\n        for (int i = windowSize; i < n; ++i) {\n            // 滑动窗口每向右移动一格，增加从右侧进入窗口的元素值，并减少从左侧离开窗口的元素值\n            sum += cardPoints[i] - cardPoints[i - windowSize];\n            minSum = Math.min(minSum, sum);\n        }\n        return Arrays.stream(cardPoints).sum() - minSum;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc maxScore(cardPoints []int, k int) int {\n    n := len(cardPoints)\n    // 滑动窗口大小为 n-k\n    windowSize := n - k\n    // 选前 n-k 个作为初始值\n    sum := 0\n    for _, pt := range cardPoints[:windowSize] {\n        sum += pt\n    }\n    minSum := sum\n    for i := windowSize; i < n; i++ {\n        // 滑动窗口每向右移动一格，增加从右侧进入窗口的元素值，并减少从左侧离开窗口的元素值\n        sum += cardPoints[i] - cardPoints[i-windowSize]\n        minSum = min(minSum, sum)\n    }\n    total := 0\n    for _, pt := range cardPoints {\n        total += pt\n    }\n    return total - minSum\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxScore = function(cardPoints, k) {\n    const n = cardPoints.length;\n    // 滑动窗口大小为 n-k\n    const windowSize = n - k;\n    // 选前 n-k 个作为初始值\n    let sum = 0;\n    for (let i = 0; i < windowSize; ++i) {\n        sum += cardPoints[i];\n    }\n    let minSum = sum;\n    for (let i = windowSize; i < n; ++i) {\n        // 滑动窗口每向右移动一格，增加从右侧进入窗口的元素值，并减少从左侧离开窗口的元素值\n        sum += cardPoints[i] - cardPoints[i - windowSize];\n        minSum = Math.min(minSum, sum);\n    }\n    let totalSum = 0;\n    for (let i = 0; i < n; i++) {\n        totalSum += cardPoints[i];\n    }\n    return totalSum - minSum;\n};\n```\n\n```C [sol1-C]\nint maxScore(int* cardPoints, int cardPointsSize, int k) {\n    int n = cardPointsSize;\n    // 滑动窗口大小为 n-k\n    int windowSize = n - k;\n    // 选前 n-k 个作为初始值\n    int sum = 0;\n    for (int i = 0; i < windowSize; i++) {\n        sum += cardPoints[i];\n    }\n    int ret = sum;\n    int minSum = sum;\n    for (int i = windowSize; i < n; ++i) {\n        // 滑动窗口每向右移动一格，增加从右侧进入窗口的元素值，并减少从左侧离开窗口的元素值\n        sum += cardPoints[i] - cardPoints[i - windowSize];\n        minSum = fmin(minSum, sum);\n        ret += cardPoints[i];\n    }\n    return ret - minSum;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{cardPoints}$ 的长度。\n\n- 空间复杂度：$O(1)$。"
}