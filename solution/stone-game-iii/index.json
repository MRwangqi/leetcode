{
	"titleSlug": "stone-game-iii",
	"slug": "shi-zi-you-xi-iii-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/stone-game-iii/solution/shi-zi-you-xi-iii-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n对于这种两个玩家、分先后手、博弈类型的题目，我们一般可以使用动态规划来解决。\n\n由于玩家只能拿走前面的石子，因此我们考虑使用状态 $f[i]$ 表示还剩下第 $i, i+1, \\cdots, n-1$ 堆石子时，**当前玩家**（也就是当前准备拿石子的那一名玩家）的某一个状态。这个「某一个状态」具体是什么状态，我们暂且不表，这里带着大家一步一步来分析这个状态。\n\n根据题目描述，当前玩家有三种策略可以选择，即取走前 $1$、$2$ 或 $3$ 堆石子，那么留给 **下一位玩家（也就是下一个准备拿石子的那一名玩家）** 的状态为 $f[i+1]$、$f[i+2]$ 或 $f[i+3]$。设想一下，假如你是当前玩家，你希望 $f[i]$ 表示什么，才可以帮助你选择自己的 **最优策略** 呢？\n\n一个聪明的读者会说：**我希望 $f[i]$ 表示还剩下第 $i, i+1, \\cdots, n-1$ 堆石子时，当前玩家最多能从剩下的石子中拿到的石子数目（这个「剩下」的意义是，如果 $i, i+1,\\cdots n-1$ 堆石子的总数是 $t$，Alice 拿走了 $x$，Bob 就拿走了 $t - x$，也就是我们只讨论 $i, i+1,\\cdots n-1$ 堆石子，而不讨论对 $0, 1, \\cdots, i - 1$ 堆石子 Alice 和 Bob 作出了怎样的决策）**。这样以来：\n\n- 如果当前玩家选择了一堆石子，那么留给下一位玩家的状态为 $f[i+1]$，表示他可以最多拿到 $f[i+1]$ 数量的石子。\n\n    - 咦？我们之前的定义中，$f[i+1]$ 是表示当前玩家最多能拿到的石子数目，为什么这里变成了下一位玩家呢？仔细想想，「当前玩家」和「下一位玩家」的概念其实是相对的。在「当前玩家」拿完石子后，「下一位玩家」就成了此时的「当前玩家」）。\n\n    由于下一位玩家可以拿 $f[i+1]$ 数量的石子，如果我们用 $\\textit{sum}(l, r)$ 表示第 $l, l+1, \\cdots, r$ 堆石子的的数量之和，那么当前玩家就可以拿到 $\\textit{sum}(i+1,n-1)-f[i+1]$ 数量的石子。加上当前玩家选择了一堆石子，它一共可以拿到 $\\textit{sum}(i,i)+\\textit{sum}(i+1,n-1)-f[i+1]$ 数量的石子。可以发现，它可以化简为 $\\textit{sum}(i,n-1)-f[i+1]$；\n\n- 同理，如果当前玩家选择了两堆石子，那么留给下一位玩家的状态为 $f[i+2]$，当前玩家一共可以拿到 $\\textit{sum}(i,n-1)-f[i+2]$ 数量的石子；\n\n- 同理，如果当前玩家选择了三堆石子，那么留给下一位玩家的状态为 $f[i+3]$，当前玩家一共可以拿到 $\\textit{sum}(i,n-1)-f[i+3]$ 数量的石子。\n\n这样以来，当前玩家只要选择上面三种情况中能拿到最多数量的石子的方案，就是他的最优策略。\n\n因此，我们就可以用动态规划来解决这个问题了。我们首先处理出表示石子数量的数组 $\\textit{values}$ 的后缀和，方便我们快速地求出 $\\textit{sum}(l,r)$。随后，我们就可以倒序地进行动态规划（因为在计算 $f[i]$ 的值的时候，需要已经求出 $f[i+1]$，$f[i+2]$ 和 $f[i+3]$ 的值），状态转移方程为：\n\n$$\n\\begin{aligned}\nf[i] &= \\max( \\textit{sum}(i,n-1) - f[j]) \\\\\n&= \\textit{sum}(i,n-1) - \\min(f[j]) \\quad , j \\in [i+1,i+3]\n\\end{aligned}\n$$\n\n最后的 $f[0]$ 就表示 Alice 最多可以获得的石子数量。我们根据 $f[0]$ 与 $\\textit{sum}(0,n-1)$ 的关系，就可以得到最终的获胜者。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string stoneGameIII(vector<int>& stoneValue) {\n        int n = stoneValue.size();\n        \n        vector<int> suffix_sum(n);\n        suffix_sum[n - 1] = stoneValue[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            suffix_sum[i] = suffix_sum[i + 1] + stoneValue[i];\n        }\n\n        vector<int> f(n + 1);\n        // 边界情况，当没有石子时，分数为 0\n        // 为了代码的可读性，显式声明\n        f[n] = 0;\n        for (int i = n - 1; i >= 0; --i) {\n            int bestj = f[i + 1];\n            for (int j = i + 2; j <= i + 3 && j <= n; ++j) {\n                bestj = min(bestj, f[j]);\n            }\n            f[i] = suffix_sum[i] - bestj;\n        }\n        \n        int total = accumulate(stoneValue.begin(), stoneValue.end(), 0);\n        if (f[0] * 2 == total) {\n            return \"Tie\";\n        }\n        else {\n            return f[0] * 2 > total ? \"Alice\" : \"Bob\";\n        }\n    }\n};\n```\n\n```C++ [sol1-C++17]\nclass Solution {\npublic:\n    string stoneGameIII(vector<int>& stoneValue) {\n        int n = stoneValue.size();\n        \n        vector<int> suffix_sum(n);\n        suffix_sum[n - 1] = stoneValue[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            suffix_sum[i] = suffix_sum[i + 1] + stoneValue[i];\n        }\n\n        vector<int> f(n + 1);\n        // 边界情况，当没有石子时，分数为 0\n        // 为了代码的可读性，显式声明\n        f[n] = 0;\n        for (int i = n - 1; i >= 0; --i) {\n            int bestj = f[i + 1];\n            for (int j = i + 2; j <= i + 3 && j <= n; ++j) {\n                bestj = min(bestj, f[j]);\n            }\n            f[i] = suffix_sum[i] - bestj;\n        }\n        \n        if (int total = accumulate(stoneValue.begin(), stoneValue.end(), 0); f[0] * 2 == total) {\n            return \"Tie\";\n        }\n        else {\n            return f[0] * 2 > total ? \"Alice\" : \"Bob\";\n        }\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def stoneGameIII(self, stoneValue: List[int]) -> str:\n        n = len(stoneValue)\n\n        suffix_sum = [0] * (n - 1) + [stoneValue[-1]]\n        for i in range(n - 2, -1, -1):\n            suffix_sum[i] = suffix_sum[i + 1] + stoneValue[i]\n        \n        # 边界情况，当没有石子时，分数为 0\n        # 为了代码的可读性，显式声明\n        f = [0] * n + [0]\n        for i in range(n - 1, -1, -1):\n            f[i] = suffix_sum[i] - min(f[i+1:i+4])\n        \n        total = sum(stoneValue)\n        if f[0] * 2 == total:\n            return \"Tie\"\n        else:\n            return \"Alice\" if f[0] * 2 > total else \"Bob\"\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String stoneGameIII(int[] stoneValue) {\n        int n = stoneValue.length;\n        int[] suffixSum = new int[n];\n        suffixSum[n - 1] = stoneValue[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            suffixSum[i] = suffixSum[i + 1] + stoneValue[i];\n        }\n        int[] f = new int[n + 1];\n        // 边界情况，当没有石子时，分数为 0\n        // 为了代码的可读性，显式声明\n        f[n] = 0;\n        for (int i = n - 1; i >= 0; --i) {\n            int bestj = f[i + 1];\n            for (int j = i + 2; j <= i + 3 && j <= n; ++j) {\n                bestj = Math.min(bestj, f[j]);\n            }\n            f[i] = suffixSum[i] - bestj;\n        }\n        int total = 0;\n        for (int value : stoneValue) {\n            total += value;\n        }\n        if (f[0] * 2 == total) {\n            return \"Tie\";\n        } else {\n            return f[0] * 2 > total ? \"Alice\" : \"Bob\";\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是数组 $\\textit{values}$ 的长度。\n\n- 空间复杂度：$O(N)$。\n\n#### 方法二：另一种状态的设计思路\n\n一个更聪明的读者会说：**我希望 $f[i]$ 表示还剩下第 $i, i+1, \\cdots, n-1$ 堆石子时，当前玩家比下一位玩家最多能多拿到的石子数目（注意此时依旧是在剩下的石子中定义的）**。这样以来：\n\n- 如果当前玩家选择了一堆石子，那么留给下一位玩家的状态为 $f[i+1]$，表示下一位玩家最多最多可以比当前玩家多拿到 $f[i+1]$ 数量的石子。那么当前玩家可以比下一位玩家多拿到 $\\textit{value}[i] - f[i+1]$ 数量的石子；\n\n- 同理，如果当前玩家选择了两堆石子，那么留给下一位玩家的状态为 $f[i+2]$，当前玩家可以比下一位玩家多拿到 $\\textit{value}[i] + \\textit{value}[i+1] - f[i+2]$ 数量的石子；\n\n- 同理，如果当前玩家选择了三堆石子，那么留给下一位玩家的状态为 $f[i+3]$，当前玩家可以比下一位玩家多拿到 $\\textit{value}[i] + \\textit{value}[i+1] + \\textit{value}[i+2] - f[i+3]$ 数量的石子；\n\n这样以来，当前玩家只要选择上面三种情况中能比下一位玩家多拿到最多数量的石子的方案，就是他的最优策略。\n\n因此，我们就可以写出使用另一种动态规划的状态转移方程：\n\n$$\n\\begin{aligned}\nf[i] &= \\max( \\textit{sum}(i,j-1) - f[j]) \\quad , j \\in [i+1,i+3]\n\\end{aligned}\n$$\n\n最后的 $f[0]$ 就表示 Alice 最多可以比 Bob 多获得的石子数量。我们根据 $f[0]$ 与 $0$ 的关系，就可以得到最终的获胜者。\n\n**注解**\n\n方法二的状态转移方程与方法一实际上是等价的，因为 **A 希望尽可能多地拿到石子** 和 **A 希望进行多地比 B 拿到的石子多** 这两者是等价的。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    string stoneGameIII(vector<int>& stoneValue) {\n        int n = stoneValue.size();\n        \n        vector<int> f(n + 1, INT_MIN);\n        // 边界情况，当没有石子时，分数为 0\n        f[n] = 0;\n        for (int i = n - 1; i >= 0; --i) {\n            int pre = 0;\n            for (int j = i + 1; j <= i + 3 && j <= n; ++j) {\n                pre += stoneValue[j - 1];\n                f[i] = max(f[i], pre - f[j]);\n            }\n        }\n        \n        if (f[0] == 0) {\n            return \"Tie\";\n        }\n        else {\n            return f[0] > 0 ? \"Alice\" : \"Bob\";\n        }\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def stoneGameIII(self, stoneValue: List[int]) -> str:\n        n = len(stoneValue)\n\n        # 边界情况，当没有石子时，分数为 0\n        f = [-10**9] * n + [0]\n        for i in range(n - 1, -1, -1):\n            pre = 0\n            for j in range(i + 1, min(i + 3, n) + 1):\n                pre += stoneValue[j - 1]\n                f[i] = max(f[i], pre - f[j])\n        \n        if f[0] == 0:\n            return \"Tie\"\n        else:\n            return \"Alice\" if f[0] > 0 else \"Bob\"\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public String stoneGameIII(int[] stoneValue) {\n        int n = stoneValue.length;\n        int[] f = new int[n + 1];\n        Arrays.fill(f, Integer.MIN_VALUE);\n        // 边界情况，当没有石子时，分数为 0\n        f[n] = 0;\n        for (int i = n - 1; i >= 0; --i) {\n            int pre = 0;\n            for (int j = i + 1; j <= i + 3 && j <= n; ++j) {\n                pre += stoneValue[j - 1];\n                f[i] = Math.max(f[i], pre - f[j]);\n            }\n        }\n        if (f[0] == 0) {\n            return \"Tie\";\n        } else {\n            return f[0] > 0 ? \"Alice\" : \"Bob\";\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是数组 $\\textit{values}$ 的长度。\n\n- 空间复杂度：$O(N)$。"
}