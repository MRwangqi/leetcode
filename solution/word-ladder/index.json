{
	"titleSlug": "word-ladder",
	"slug": "dan-ci-jie-long-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/word-ladder/solution/dan-ci-jie-long-by-leetcode-solution/",
	"content": "#### 方法一：广度优先搜索 + 优化建图\n\n**思路**\n\n本题要求的是**最短转换序列**的长度，看到最短首先想到的就是**广度优先搜索**。想到**广度优先搜索**自然而然的就能想到图，但是本题并没有直截了当的给出图的模型，因此我们需要把它抽象成图的模型。\n\n我们可以把每个单词都抽象为一个点，如果两个单词可以只改变一个字母进行转换，那么说明他们之间有一条双向边。因此我们只需要把满足转换条件的点相连，就形成了一张**图**。\n\n基于该图，我们以 `beginWord` 为图的起点，以 `endWord` 为终点进行**广度优先搜索**，寻找 `beginWord` 到 `endWord` 的最短路径。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/127/1.png){:width=\"60%\"}\n\n**算法**\n\n基于上面的思路我们考虑如何编程实现。\n\n首先为了方便表示，我们先给每一个单词标号，即给每个单词分配一个 `id`。创建一个由单词 `word` 到 `id` 对应的映射 `wordId`，并将 `beginWord` 与 `wordList` 中所有的单词都加入这个映射中。之后我们检查 `endWord` 是否在该映射内，若不存在，则输入无解。我们可以使用**哈希表**实现上面的映射关系。\n\n然后我们需要建图，依据朴素的思路，我们可以枚举每一对单词的组合，判断它们是否恰好相差一个字符，以判断这两个单词对应的节点是否能够相连。但是这样效率太低，我们可以优化建图。\n\n具体地，我们可以创建虚拟节点。对于单词 `hit`，我们创建三个虚拟节点 `*it`、`h*t`、`hi*`，并让 `hit` 向这三个虚拟节点分别连一条边即可。如果一个单词能够转化为 `hit`，那么该单词必然会连接到这三个虚拟节点之一。对于每一个单词，我们枚举它连接到的虚拟节点，把该单词对应的 `id` 与这些虚拟节点对应的 `id` 相连即可。\n\n最后我们将起点加入队列开始广度优先搜索，当搜索到终点时，我们就找到了最短路径的长度。注意因为添加了虚拟节点，所以我们得到的距离为实际最短路径长度的两倍。同时我们并未计算起点对答案的贡献，所以我们应当返回距离的一半再加一的结果。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    unordered_map<string, int> wordId;\n    vector<vector<int>> edge;\n    int nodeNum = 0;\n\n    void addWord(string& word) {\n        if (!wordId.count(word)) {\n            wordId[word] = nodeNum++;\n            edge.emplace_back();\n        }\n    }\n\n    void addEdge(string& word) {\n        addWord(word);\n        int id1 = wordId[word];\n        for (char& it : word) {\n            char tmp = it;\n            it = '*';\n            addWord(word);\n            int id2 = wordId[word];\n            edge[id1].push_back(id2);\n            edge[id2].push_back(id1);\n            it = tmp;\n        }\n    }\n\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        for (string& word : wordList) {\n            addEdge(word);\n        }\n        addEdge(beginWord);\n        if (!wordId.count(endWord)) {\n            return 0;\n        }\n        vector<int> dis(nodeNum, INT_MAX);\n        int beginId = wordId[beginWord], endId = wordId[endWord];\n        dis[beginId] = 0;\n\n        queue<int> que;\n        que.push(beginId);\n        while (!que.empty()) {\n            int x = que.front();\n            que.pop();\n            if (x == endId) {\n                return dis[endId] / 2 + 1;\n            }\n            for (int& it : edge[x]) {\n                if (dis[it] == INT_MAX) {\n                    dis[it] = dis[x] + 1;\n                    que.push(it);\n                }\n            }\n        }\n        return 0;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    Map<String, Integer> wordId = new HashMap<String, Integer>();\n    List<List<Integer>> edge = new ArrayList<List<Integer>>();\n    int nodeNum = 0;\n\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        for (String word : wordList) {\n            addEdge(word);\n        }\n        addEdge(beginWord);\n        if (!wordId.containsKey(endWord)) {\n            return 0;\n        }\n        int[] dis = new int[nodeNum];\n        Arrays.fill(dis, Integer.MAX_VALUE);\n        int beginId = wordId.get(beginWord), endId = wordId.get(endWord);\n        dis[beginId] = 0;\n\n        Queue<Integer> que = new LinkedList<Integer>();\n        que.offer(beginId);\n        while (!que.isEmpty()) {\n            int x = que.poll();\n            if (x == endId) {\n                return dis[endId] / 2 + 1;\n            }\n            for (int it : edge.get(x)) {\n                if (dis[it] == Integer.MAX_VALUE) {\n                    dis[it] = dis[x] + 1;\n                    que.offer(it);\n                }\n            }\n        }\n        return 0;\n    }\n\n    public void addEdge(String word) {\n        addWord(word);\n        int id1 = wordId.get(word);\n        char[] array = word.toCharArray();\n        int length = array.length;\n        for (int i = 0; i < length; ++i) {\n            char tmp = array[i];\n            array[i] = '*';\n            String newWord = new String(array);\n            addWord(newWord);\n            int id2 = wordId.get(newWord);\n            edge.get(id1).add(id2);\n            edge.get(id2).add(id1);\n            array[i] = tmp;\n        }\n    }\n\n    public void addWord(String word) {\n        if (!wordId.containsKey(word)) {\n            wordId.put(word, nodeNum++);\n            edge.add(new ArrayList<Integer>());\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        def addWord(word: str):\n            if word not in wordId:\n                nonlocal nodeNum\n                wordId[word] = nodeNum\n                nodeNum += 1\n        \n        def addEdge(word: str):\n            addWord(word)\n            id1 = wordId[word]\n            chars = list(word)\n            for i in range(len(chars)):\n                tmp = chars[i]\n                chars[i] = \"*\"\n                newWord = \"\".join(chars)\n                addWord(newWord)\n                id2 = wordId[newWord]\n                edge[id1].append(id2)\n                edge[id2].append(id1)\n                chars[i] = tmp\n\n        wordId = dict()\n        edge = collections.defaultdict(list)\n        nodeNum = 0\n\n        for word in wordList:\n            addEdge(word)\n        \n        addEdge(beginWord)\n        if endWord not in wordId:\n            return 0\n        \n        dis = [float(\"inf\")] * nodeNum\n        beginId, endId = wordId[beginWord], wordId[endWord]\n        dis[beginId] = 0\n\n        que = collections.deque([beginId])\n        while que:\n            x = que.popleft()\n            if x == endId:\n                return dis[endId] // 2 + 1\n            for it in edge[x]:\n                if dis[it] == float(\"inf\"):\n                    dis[it] = dis[x] + 1\n                    que.append(it)\n        \n        return 0\n```\n\n```Golang [sol1-Golang]\nfunc ladderLength(beginWord string, endWord string, wordList []string) int {\n    wordId := map[string]int{}\n    graph := [][]int{}\n    addWord := func(word string) int {\n        id, has := wordId[word]\n        if !has {\n            id = len(wordId)\n            wordId[word] = id\n            graph = append(graph, []int{})\n        }\n        return id\n    }\n    addEdge := func(word string) int {\n        id1 := addWord(word)\n        s := []byte(word)\n        for i, b := range s {\n            s[i] = '*'\n            id2 := addWord(string(s))\n            graph[id1] = append(graph[id1], id2)\n            graph[id2] = append(graph[id2], id1)\n            s[i] = b\n        }\n        return id1\n    }\n\n    for _, word := range wordList {\n        addEdge(word)\n    }\n    beginId := addEdge(beginWord)\n    endId, has := wordId[endWord]\n    if !has {\n        return 0\n    }\n\n    const inf int = math.MaxInt64\n    dist := make([]int, len(wordId))\n    for i := range dist {\n        dist[i] = inf\n    }\n    dist[beginId] = 0\n    queue := []int{beginId}\n    for len(queue) > 0 {\n        v := queue[0]\n        queue = queue[1:]\n        if v == endId {\n            return dist[endId]/2 + 1\n        }\n        for _, w := range graph[v] {\n            if dist[w] == inf {\n                dist[w] = dist[v] + 1\n                queue = append(queue, w)\n            }\n        }\n    }\n    return 0\n}\n```\n\n```C [sol1-C]\nstruct Trie {\n    int ch[27];\n    int val;\n} trie[50001];\n\nint size, nodeNum;\n\nvoid insert(char* s, int num) {\n    int sSize = strlen(s), add = 0;\n    for (int i = 0; i < sSize; ++i) {\n        int x = s[i] - '`';\n        if (trie[add].ch[x] == 0) {\n            trie[add].ch[x] = ++size;\n            memset(trie[size].ch, 0, sizeof(trie[size].ch));\n            trie[size].val = -1;\n        }\n        add = trie[add].ch[x];\n    }\n    trie[add].val = num;\n}\n\nint find(char* s) {\n    int sSize = strlen(s), add = 0;\n    for (int i = 0; i < sSize; ++i) {\n        int x = s[i] - '`';\n        if (trie[add].ch[x] == 0) {\n            return -1;\n        }\n        add = trie[add].ch[x];\n    }\n    return trie[add].val;\n}\n\nint addWord(char* word) {\n    if (find(word) == -1) {\n        insert(word, nodeNum++);\n    }\n    return find(word);\n}\n\nint edge[30001][26];\n\nint edgeSize[30001];\n\nvoid addEdge(char* word) {\n    int wordSize = strlen(word), id1 = addWord(word);\n    for (int i = 0; i < wordSize; ++i) {\n        char tmp = word[i];\n        word[i] = '`';\n        int id2 = addWord(word);\n        edge[id1][edgeSize[id1]++] = id2;\n        edge[id2][edgeSize[id2]++] = id1;\n        word[i] = tmp;\n    }\n}\n\nint ladderLength(char* beginWord, char* endWord, char** wordList, int wordListSize) {\n    size = nodeNum = 0;\n    memset(trie[size].ch, 0, sizeof(trie[size].ch));\n    trie[size].val = -1;\n    memset(edgeSize, 0, sizeof(edgeSize));\n    for (int i = 0; i < wordListSize; ++i) {\n        addEdge(wordList[i]);\n    }\n    addEdge(beginWord);\n    int beginId = find(beginWord), endId = find(endWord);\n    if (endId == -1) {\n        return 0;\n    }\n\n    int dis[nodeNum];\n    memset(dis, -1, sizeof(dis));\n    dis[beginId] = 0;\n\n    int que[nodeNum];\n    int left = 0, right = 0;\n    que[right++] = beginId;\n    while (left < right) {\n        int x = que[left++];\n        for (int i = 0; i < edgeSize[x]; ++i) {\n            if (dis[edge[x][i]] == -1) {\n                dis[edge[x][i]] = dis[x] + 1;\n                if (edge[x][i] == endId) {\n                    return dis[edge[x][i]] / 2 + 1;\n                }\n                que[right++] = edge[x][i];\n            }\n        }\n    }\n    return 0;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N \\times C^2)$。其中 $N$ 为 `wordList` 的长度，$C$ 为列表中单词的长度。\n\n  - 建图过程中，对于每一个单词，我们需要枚举它连接到的所有虚拟节点，时间复杂度为 $O(C)$，将这些单词加入到哈希表中，时间复杂度为 $O(N \\times C)$，因此总时间复杂度为 $O(N \\times C)$。\n\n  - 广度优先搜索的时间复杂度最坏情况下是 $O(N \\times C)$。每一个单词需要拓展出 $O(C)$ 个虚拟节点，因此节点数 $O(N \\times C)$。\n\n- 空间复杂度：$O(N \\times C^2)$。其中 $N$ 为 `wordList` 的长度，$C$ 为列表中单词的长度。哈希表中包含 $O(N \\times C)$ 个节点，每个节点占用空间 $O(C)$，因此总的空间复杂度为 $O(N \\times C^2)$。\n\n#### 方法二：双向广度优先搜索\n\n**思路及解法**\n\n根据给定字典构造的图可能会很大，而广度优先搜索的搜索空间大小依赖于每层节点的分支数量。假如每个节点的分支数量相同，搜索空间会随着层数的增长指数级的增加。考虑一个简单的二叉树，每一层都是满二叉树的扩展，节点的数量会以 $2$ 为底数呈指数增长。\n\n如果使用两个同时进行的广搜可以有效地减少搜索空间。一边从 `beginWord` 开始，另一边从 `endWord` 开始。我们每次从两边各扩展一层节点，当发现某一时刻两边都访问过同一顶点时就停止搜索。这就是双向广度优先搜索，它可以可观地减少搜索空间大小，从而提高代码运行效率。\n\n![fig2](https://assets.leetcode-cn.com/solution-static/127/2.png){:width=\"70%\"}\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    unordered_map<string, int> wordId;\n    vector<vector<int>> edge;\n    int nodeNum = 0;\n\n    void addWord(string& word) {\n        if (!wordId.count(word)) {\n            wordId[word] = nodeNum++;\n            edge.emplace_back();\n        }\n    }\n\n    void addEdge(string& word) {\n        addWord(word);\n        int id1 = wordId[word];\n        for (char& it : word) {\n            char tmp = it;\n            it = '*';\n            addWord(word);\n            int id2 = wordId[word];\n            edge[id1].push_back(id2);\n            edge[id2].push_back(id1);\n            it = tmp;\n        }\n    }\n\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        for (string& word : wordList) {\n            addEdge(word);\n        }\n        addEdge(beginWord);\n        if (!wordId.count(endWord)) {\n            return 0;\n        }\n\n        vector<int> disBegin(nodeNum, INT_MAX);\n        int beginId = wordId[beginWord];\n        disBegin[beginId] = 0;\n        queue<int> queBegin;\n        queBegin.push(beginId);\n\n        vector<int> disEnd(nodeNum, INT_MAX);\n        int endId = wordId[endWord];\n        disEnd[endId] = 0;\n        queue<int> queEnd;\n        queEnd.push(endId);\n\n        while (!queBegin.empty() && !queEnd.empty()) {\n            int queBeginSize = queBegin.size();\n            for (int i = 0; i < queBeginSize; ++i) {\n                int nodeBegin = queBegin.front();\n                queBegin.pop();\n                if (disEnd[nodeBegin] != INT_MAX) {\n                    return (disBegin[nodeBegin] + disEnd[nodeBegin]) / 2 + 1;\n                }\n                for (int& it : edge[nodeBegin]) {\n                    if (disBegin[it] == INT_MAX) {\n                        disBegin[it] = disBegin[nodeBegin] + 1;\n                        queBegin.push(it);\n                    }\n                }\n            }\n\n            int queEndSize = queEnd.size();\n            for (int i = 0; i < queEndSize; ++i) {\n                int nodeEnd = queEnd.front();\n                queEnd.pop();\n                if (disBegin[nodeEnd] != INT_MAX) {\n                    return (disBegin[nodeEnd] + disEnd[nodeEnd]) / 2 + 1;\n                }\n                for (int& it : edge[nodeEnd]) {\n                    if (disEnd[it] == INT_MAX) {\n                        disEnd[it] = disEnd[nodeEnd] + 1;\n                        queEnd.push(it);\n                    }\n                }\n            }\n        }\n        return 0;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    Map<String, Integer> wordId = new HashMap<String, Integer>();\n    List<List<Integer>> edge = new ArrayList<List<Integer>>();\n    int nodeNum = 0;\n\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        for (String word : wordList) {\n            addEdge(word);\n        }\n        addEdge(beginWord);\n        if (!wordId.containsKey(endWord)) {\n            return 0;\n        }\n\n        int[] disBegin = new int[nodeNum];\n        Arrays.fill(disBegin, Integer.MAX_VALUE);\n        int beginId = wordId.get(beginWord);\n        disBegin[beginId] = 0;\n        Queue<Integer> queBegin = new LinkedList<Integer>();\n        queBegin.offer(beginId);\n        \n        int[] disEnd = new int[nodeNum];\n        Arrays.fill(disEnd, Integer.MAX_VALUE);\n        int endId = wordId.get(endWord);\n        disEnd[endId] = 0;\n        Queue<Integer> queEnd = new LinkedList<Integer>();\n        queEnd.offer(endId);\n\n        while (!queBegin.isEmpty() && !queEnd.isEmpty()) {\n            int queBeginSize = queBegin.size();\n            for (int i = 0; i < queBeginSize; ++i) {\n                int nodeBegin = queBegin.poll();\n                if (disEnd[nodeBegin] != Integer.MAX_VALUE) {\n                    return (disBegin[nodeBegin] + disEnd[nodeBegin]) / 2 + 1;\n                }\n                for (int it : edge.get(nodeBegin)) {\n                    if (disBegin[it] == Integer.MAX_VALUE) {\n                        disBegin[it] = disBegin[nodeBegin] + 1;\n                        queBegin.offer(it);\n                    }\n                }\n            }\n\n            int queEndSize = queEnd.size();\n            for (int i = 0; i < queEndSize; ++i) {\n                int nodeEnd = queEnd.poll();\n                if (disBegin[nodeEnd] != Integer.MAX_VALUE) {\n                    return (disBegin[nodeEnd] + disEnd[nodeEnd]) / 2 + 1;\n                }\n                for (int it : edge.get(nodeEnd)) {\n                    if (disEnd[it] == Integer.MAX_VALUE) {\n                        disEnd[it] = disEnd[nodeEnd] + 1;\n                        queEnd.offer(it);\n                    }\n                }\n            }\n        }\n        return 0;\n    }\n\n    public void addEdge(String word) {\n        addWord(word);\n        int id1 = wordId.get(word);\n        char[] array = word.toCharArray();\n        int length = array.length;\n        for (int i = 0; i < length; ++i) {\n            char tmp = array[i];\n            array[i] = '*';\n            String newWord = new String(array);\n            addWord(newWord);\n            int id2 = wordId.get(newWord);\n            edge.get(id1).add(id2);\n            edge.get(id2).add(id1);\n            array[i] = tmp;\n        }\n    }\n\n    public void addWord(String word) {\n        if (!wordId.containsKey(word)) {\n            wordId.put(word, nodeNum++);\n            edge.add(new ArrayList<Integer>());\n        }\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        def addWord(word: str):\n            if word not in wordId:\n                nonlocal nodeNum\n                wordId[word] = nodeNum\n                nodeNum += 1\n        \n        def addEdge(word: str):\n            addWord(word)\n            id1 = wordId[word]\n            chars = list(word)\n            for i in range(len(chars)):\n                tmp = chars[i]\n                chars[i] = \"*\"\n                newWord = \"\".join(chars)\n                addWord(newWord)\n                id2 = wordId[newWord]\n                edge[id1].append(id2)\n                edge[id2].append(id1)\n                chars[i] = tmp\n\n        wordId = dict()\n        edge = collections.defaultdict(list)\n        nodeNum = 0\n\n        for word in wordList:\n            addEdge(word)\n        \n        addEdge(beginWord)\n        if endWord not in wordId:\n            return 0\n        \n        disBegin = [float(\"inf\")] * nodeNum\n        beginId = wordId[beginWord]\n        disBegin[beginId] = 0\n        queBegin = collections.deque([beginId])\n\n        disEnd = [float(\"inf\")] * nodeNum\n        endId = wordId[endWord]\n        disEnd[endId] = 0\n        queEnd = collections.deque([endId])\n\n        while queBegin or queEnd:\n            queBeginSize = len(queBegin)\n            for _ in range(queBeginSize):\n                nodeBegin = queBegin.popleft()\n                if disEnd[nodeBegin] != float(\"inf\"):\n                    return (disBegin[nodeBegin] + disEnd[nodeBegin]) // 2 + 1\n                for it in edge[nodeBegin]:\n                    if disBegin[it] == float(\"inf\"):\n                        disBegin[it] = disBegin[nodeBegin] + 1\n                        queBegin.append(it)\n\n            queEndSize = len(queEnd)\n            for _ in range(queEndSize):\n                nodeEnd = queEnd.popleft()\n                if disBegin[nodeEnd] != float(\"inf\"):\n                    return (disBegin[nodeEnd] + disEnd[nodeEnd]) // 2 + 1\n                for it in edge[nodeEnd]:\n                    if disEnd[it] == float(\"inf\"):\n                        disEnd[it] = disEnd[nodeEnd] + 1\n                        queEnd.append(it)\n        \n        return 0\n```\n\n```Golang [sol2-Golang]\nfunc ladderLength(beginWord string, endWord string, wordList []string) int {\n    wordId := map[string]int{}\n    graph := [][]int{}\n    addWord := func(word string) int {\n        id, has := wordId[word]\n        if !has {\n            id = len(wordId)\n            wordId[word] = id\n            graph = append(graph, []int{})\n        }\n        return id\n    }\n    addEdge := func(word string) int {\n        id1 := addWord(word)\n        s := []byte(word)\n        for i, b := range s {\n            s[i] = '*'\n            id2 := addWord(string(s))\n            graph[id1] = append(graph[id1], id2)\n            graph[id2] = append(graph[id2], id1)\n            s[i] = b\n        }\n        return id1\n    }\n\n    for _, word := range wordList {\n        addEdge(word)\n    }\n    beginId := addEdge(beginWord)\n    endId, has := wordId[endWord]\n    if !has {\n        return 0\n    }\n\n    const inf int = math.MaxInt64\n    distBegin := make([]int, len(wordId))\n    for i := range distBegin {\n        distBegin[i] = inf\n    }\n    distBegin[beginId] = 0\n    queueBegin := []int{beginId}\n\n    distEnd := make([]int, len(wordId))\n    for i := range distEnd {\n        distEnd[i] = inf\n    }\n    distEnd[endId] = 0\n    queueEnd := []int{endId}\n\n    for len(queueBegin) > 0 && len(queueEnd) > 0 {\n        q := queueBegin\n        queueBegin = nil\n        for _, v := range q {\n            if distEnd[v] < inf {\n                return (distBegin[v]+distEnd[v])/2 + 1\n            }\n            for _, w := range graph[v] {\n                if distBegin[w] == inf {\n                    distBegin[w] = distBegin[v] + 1\n                    queueBegin = append(queueBegin, w)\n                }\n            }\n        }\n\n        q = queueEnd\n        queueEnd = nil\n        for _, v := range q {\n            if distBegin[v] < inf {\n                return (distBegin[v]+distEnd[v])/2 + 1\n            }\n            for _, w := range graph[v] {\n                if distEnd[w] == inf {\n                    distEnd[w] = distEnd[v] + 1\n                    queueEnd = append(queueEnd, w)\n                }\n            }\n        }\n    }\n    return 0\n}\n```\n\n```C [sol2-C]\nstruct Trie {\n    int ch[27];\n    int val;\n} trie[50001];\n\nint size, nodeNum;\n\nvoid insert(char* s, int num) {\n    int sSize = strlen(s), add = 0;\n    for (int i = 0; i < sSize; ++i) {\n        int x = s[i] - '`';\n        if (trie[add].ch[x] == 0) {\n            trie[add].ch[x] = ++size;\n            memset(trie[size].ch, 0, sizeof(trie[size].ch));\n            trie[size].val = -1;\n        }\n        add = trie[add].ch[x];\n    }\n    trie[add].val = num;\n}\n\nint find(char* s) {\n    int sSize = strlen(s), add = 0;\n    for (int i = 0; i < sSize; ++i) {\n        int x = s[i] - '`';\n        if (trie[add].ch[x] == 0) {\n            return -1;\n        }\n        add = trie[add].ch[x];\n    }\n    return trie[add].val;\n}\n\nint addWord(char* word) {\n    if (find(word) == -1) {\n        insert(word, nodeNum++);\n    }\n    return find(word);\n}\n\nint edge[30001][26];\n\nint edgeSize[30001];\n\nvoid addEdge(char* word) {\n    int wordSize = strlen(word), id1 = addWord(word);\n    for (int i = 0; i < wordSize; ++i) {\n        char tmp = word[i];\n        word[i] = '`';\n        int id2 = addWord(word);\n        edge[id1][edgeSize[id1]++] = id2;\n        edge[id2][edgeSize[id2]++] = id1;\n        word[i] = tmp;\n    }\n}\n\nint ladderLength(char* beginWord, char* endWord, char** wordList, int wordListSize) {\n    size = nodeNum = 0;\n    memset(trie[size].ch, 0, sizeof(trie[size].ch));\n    trie[size].val = -1;\n    memset(edgeSize, 0, sizeof(edgeSize));\n    for (int i = 0; i < wordListSize; ++i) {\n        addEdge(wordList[i]);\n    }\n    addEdge(beginWord);\n    int beginId = find(beginWord), endId = find(endWord);\n    if (endId == -1) {\n        return 0;\n    }\n\n    int disBegin[nodeNum];\n    memset(disBegin, -1, sizeof(disBegin));\n    disBegin[beginId] = 0;\n    int queBegin[nodeNum];\n    int leftBegin = 0, rightBegin = 0;\n    queBegin[rightBegin++] = beginId;\n\n    int disEnd[nodeNum];\n    memset(disEnd, -1, sizeof(disEnd));\n    disEnd[endId] = 0;\n    int queEnd[nodeNum];\n    int leftEnd = 0, rightEnd = 0;\n    queEnd[rightEnd++] = endId;\n\n    while (leftBegin < rightBegin && leftEnd < rightEnd) {\n        int queBeginSize = rightBegin - leftBegin;\n        for (int i = 0; i < queBeginSize; ++i) {\n            int nodeBegin = queBegin[leftBegin++];\n            if (disEnd[nodeBegin] != -1) {\n                return (disBegin[nodeBegin] + disEnd[nodeBegin]) / 2 + 1;\n            }\n            for (int j = 0; j < edgeSize[nodeBegin]; ++j) {\n                if (disBegin[edge[nodeBegin][j]] == -1) {\n                    disBegin[edge[nodeBegin][j]] = disBegin[nodeBegin] + 1;\n                    queBegin[rightBegin++] = edge[nodeBegin][j];\n                }\n            }\n        }\n        int queEndSize = rightEnd - leftEnd;\n        for (int i = 0; i < queEndSize; ++i) {\n            int nodeEnd = queEnd[leftEnd++];\n            if (disBegin[nodeEnd] != -1) {\n                return (disBegin[nodeEnd] + disEnd[nodeEnd]) / 2 + 1;\n            }\n            for (int j = 0; j < edgeSize[nodeEnd]; ++j) {\n                if (disEnd[edge[nodeEnd][j]] == -1) {\n                    disEnd[edge[nodeEnd][j]] = disEnd[nodeEnd] + 1;\n                    queEnd[rightEnd++] = edge[nodeEnd][j];\n                }\n            }\n        }\n    }\n    return 0;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N \\times C^2)$。其中 $N$ 为 `wordList` 的长度，$C$ 为列表中单词的长度。\n\n  - 建图过程中，对于每一个单词，我们需要枚举它连接到的所有虚拟节点，时间复杂度为 $O(C)$，将这些单词加入到哈希表中，时间复杂度为 $O(N \\times C)$，因此总时间复杂度为 $O(N \\times C)$。\n\n  - 双向广度优先搜索的时间复杂度最坏情况下是 $O(N \\times C)$。每一个单词需要拓展出 $O(C)$ 个虚拟节点，因此节点数 $O(N \\times C)$。\n\n- 空间复杂度：$O(N \\times C^2)$。其中 $N$ 为 `wordList` 的长度，$C$ 为列表中单词的长度。哈希表中包含 $O(N \\times C)$ 个节点，每个节点占用空间 $O(C)$，因此总的空间复杂度为 $O(N \\times C^2)$。"
}