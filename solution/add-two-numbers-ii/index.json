{
	"titleSlug": "add-two-numbers-ii",
	"slug": "liang-shu-xiang-jia-ii-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/add-two-numbers-ii/solution/liang-shu-xiang-jia-ii-by-leetcode-solution/",
	"content": "### 📺 视频题解 \n\n![LeetCode 445.mp4](15db8673-92e9-4991-a9ce-82b721dca389)\n\n### 📖 文字题解\n#### 方法一：栈\n\n**思路与算法**\n\n本题的主要难点在于链表中数位的顺序与我们做加法的顺序是相反的，为了逆序处理所有数位，我们可以使用栈：把所有数字压入栈中，再依次取出相加。计算过程中需要注意进位的情况。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        stack<int> s1, s2;\n        while (l1) {\n            s1.push(l1 -> val);\n            l1 = l1 -> next;\n        }\n        while (l2) {\n            s2.push(l2 -> val);\n            l2 = l2 -> next;\n        }\n        int carry = 0;\n        ListNode* ans = nullptr;\n        while (!s1.empty() or !s2.empty() or carry != 0) {\n            int a = s1.empty() ? 0 : s1.top();\n            int b = s2.empty() ? 0 : s2.top();\n            if (!s1.empty()) s1.pop();\n            if (!s2.empty()) s2.pop();\n            int cur = a + b + carry;\n            carry = cur / 10;\n            cur %= 10;\n            auto curnode = new ListNode(cur);\n            curnode -> next = ans;\n            ans = curnode;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        Deque<Integer> stack1 = new ArrayDeque<Integer>();\n        Deque<Integer> stack2 = new ArrayDeque<Integer>();\n        while (l1 != null) {\n            stack1.push(l1.val);\n            l1 = l1.next;\n        }\n        while (l2 != null) {\n            stack2.push(l2.val);\n            l2 = l2.next;\n        }\n        int carry = 0;\n        ListNode ans = null;\n        while (!stack1.isEmpty() || !stack2.isEmpty() || carry != 0) {\n            int a = stack1.isEmpty() ? 0 : stack1.pop();\n            int b = stack2.isEmpty() ? 0 : stack2.pop();\n            int cur = a + b + carry;\n            carry = cur / 10;\n            cur %= 10;\n            ListNode curnode = new ListNode(cur);\n            curnode.next = ans;\n            ans = curnode;\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\n        Stack<int> stack1 = new Stack<int>();\n        Stack<int> stack2 = new Stack<int>();\n        while (l1 != null) {\n            stack1.Push(l1.val);\n            l1 = l1.next;\n        }\n        while (l2 != null) {\n            stack2.Push(l2.val);\n            l2 = l2.next;\n        }\n        int carry = 0;\n        ListNode ans = null;\n        while (stack1.Count > 0 || stack2.Count > 0 || carry != 0) {\n            int a = stack1.Count == 0 ? 0 : stack1.Pop();\n            int b = stack2.Count == 0 ? 0 : stack2.Pop();\n            int cur = a + b + carry;\n            carry = cur / 10;\n            cur %= 10;\n            ListNode curnode = new ListNode(cur);\n            curnode.next = ans;\n            ans = curnode;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        s1, s2 = [], []\n        while l1:\n            s1.append(l1.val)\n            l1 = l1.next\n        while l2:\n            s2.append(l2.val)\n            l2 = l2.next\n        ans = None\n        carry = 0\n        while s1 or s2 or carry != 0:\n            a = 0 if not s1 else s1.pop()\n            b = 0 if not s2 else s2.pop()\n            cur = a + b + carry\n            carry = cur // 10\n            cur %= 10\n            curnode = ListNode(cur)\n            curnode.next = ans\n            ans = curnode\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\max(m, n))$，其中 $m$ 和 $n$ 分别为两个链表的长度。我们需要遍历两个链表的全部位置，而处理每个位置只需要 $O(1)$ 的时间。\n\n- 空间复杂度：$O(m + n)$，其中 $m$ 和 $n$ 分别为两个链表的长度。空间复杂度主要取决于我们把链表内容放入栈中所用的空间。"
}