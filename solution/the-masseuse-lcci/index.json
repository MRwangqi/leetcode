{
	"titleSlug": "the-masseuse-lcci",
	"slug": "an-mo-shi-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/the-masseuse-lcci/solution/an-mo-shi-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n**思路和算法**\n\n定义 $\\textit{dp}[i][0]$ 表示考虑前 $i$ 个预约，第 $i$ 个预约不接的最长预约时间，$\\textit{dp}[i][1]$ 表示考虑前 $i$ 个预约，第 $i$ 个预约接的最长预约时间。\n\n从前往后计算 $\\textit{dp}$ 值，假设我们已经计算出前 $i-1$ 个 $\\textit{dp}$ 值，考虑计算 $\\textit{dp}[i][0/1]$ 的答案。\n\n首先考虑 $\\textit{dp}[i][0]$ 的转移方程，由于这个状态下第 $i$ 个预约是不接的，所以第 $i-1$ 个预约接或不接都可以，故可以从 $\\textit{dp}[i-1][0]$ 和 $\\textit{dp}[i-1][1]$ 两个状态转移过来，转移方程即为：\n\n$$\n\\textit{dp}[i][0]=max(\\textit{dp}[i-1][0],\\textit{dp}[i-1][1])\n$$\n\n对于 $\\textit{dp}[i][1]$ ，由于这个状态下第 $i$ 个预约要接，根据题目要求按摩师不能接受相邻的预约，所以第 $i-1$ 个预约不能接受，故我们只能从 $\\textit{dp}[i-1][0]$ 这个状态转移过来，转移方程即为：\n\n$$\n\\textit{dp}[i][1]=\\textit{dp}[i-1][0]+\\textit{nums}_i\n$$\n\n其中 $\\textit{nums}_i$ 表示第 $i$ 个预约的时长。\n\n最后答案即为 $max(\\textit{dp}[n][0],\\textit{dp}[n][1])$ ，其中 $n$ 表示预约的个数。\n\n再回来看转移方程，我们发现计算 $\\textit{dp}[i][0/1]$ 时，只与前一个状态 $\\textit{dp}[i-1][0/1]$ 有关，所以我们可以不用开数组，只用两个变量 $\\textit{dp}_0$，$\\textit{dp}_1$ 分别存储 $\\textit{dp}[i-1][0]$ 和 $\\textit{dp}[i-1][1]$ 的答案，然后去转移更新答案即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int massage(vector<int>& nums) {\n        int n = (int)nums.size();\n        if (!n) {\n            return 0;\n        }\n        int dp0 = 0, dp1 = nums[0];\n\n        for (int i = 1; i < n; ++i){\n            int tdp0 = max(dp0, dp1); // 计算 dp[i][0]\n            int tdp1 = dp0 + nums[i]; // 计算 dp[i][1]\n\n            dp0 = tdp0; // 用 dp[i][0] 更新 dp_0\n            dp1 = tdp1; // 用 dp[i][1] 更新 dp_1\n        }\n        return max(dp0, dp1);\n    }\n};\n```\n```Java [sol1-Java]\nclass Solution {\n    public int massage(int[] nums) {\n        int n = nums.length;\n        if (n == 0) {\n            return 0;\n        }\n        int dp0 = 0, dp1 = nums[0];\n\n        for (int i = 1; i < n; ++i){\n            int tdp0 = Math.max(dp0, dp1); // 计算 dp[i][0]\n            int tdp1 = dp0 + nums[i]; // 计算 dp[i][1]\n\n            dp0 = tdp0; // 用 dp[i][0] 更新 dp_0\n            dp1 = tdp1; // 用 dp[i][1] 更新 dp_1\n        }\n        return Math.max(dp0, dp1);\n    }\n}\n```\n```Python [sol1-Python3]\nclass Solution:\n    def massage(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 0:\n            return 0\n\n        dp0, dp1 = 0, nums[0]\n        for i in range(1, n):\n            tdp0 = max(dp0, dp1)   # 计算 dp[i][0]\n            tdp1 = dp0 + nums[i]   # 计算 dp[i][1]\n            dp0, dp1 = tdp0, tdp1\n        \n        return max(dp0, dp1)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为预约的个数。我们有 $2n$ 个状态需要计算，每次状态转移需要 $O(1)$ 的时间，所以一共需要 $O(2n)=O(n)$ 的时间复杂度。\n\n- 空间复杂度：$O(1)$，只需要常数的空间存放若干变量。"
}