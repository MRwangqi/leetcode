{
	"titleSlug": "minimum-amount-of-time-to-fill-cups",
	"slug": "by-tsreaper-158c",
	"url": "https://leetcode-cn.com/problems/minimum-amount-of-time-to-fill-cups/solution/by-tsreaper-158c/",
	"content": "## 解法：贪心 & 分类讨论\r\n将饮料按数量从小到大排序，设数量为 $x$，$y$，$z$。我们的目标是匹配尽量多不同的饮料。\r\n* 若 $x + y \\le z$，显然每次用一个 $z$ 和一个 $x$ 或 $y$ 匹配是最优的。答案就是 $z$。\r\n* 若 $x + y > z$，考虑超出的部分 $t = (x + y - z)$。\r\n  * 若 $t$ 是偶数，那么我们可以先把 $x$ 和 $y$ 互相匹配 $\\frac{t}{2}$ 次进行“内部消化”。操作过后有 $x + y = z$，此时每次用一个 $z$ 和一个 $x$ 或 $y$ 匹配即可。答案就是 $\\frac{t}{2} + z$。\r\n  * 若 $t$ 是奇数，仍然先将 $x$ 和 $y$ 互相匹配 $\\frac{t - }{2}$ 次进行“内部消化”。操作过后有 $x + y - 1 = z$，此时每次用一个 $z$ 和一个 $x$ 或 $y$ 匹配，剩下一杯无法匹配。答案就是 $\\frac{t - 1}{2} + z + 1$。\r\n\r\n分类讨论第二条中的内部消化是一定可以进行那么多次的，如果无法进行那么多次 $x$ 就耗尽了，说明原本 $y > z$，不符合假设。\r\n\r\n总体复杂度 $\\mathcal{O}(1)$。\r\n\r\n## 参考代码（c++）\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int fillCups(vector<int>& amount) {\r\n        sort(amount.begin(), amount.end());\r\n        if (amount[0] + amount[1] <= amount[2]) return amount[2];\r\n        else {\r\n            int t = amount[0] + amount[1] - amount[2];\r\n            return (t + 1) / 2 + amount[2];\r\n        }\r\n    }\r\n};\r\n```"
}