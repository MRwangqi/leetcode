{
	"titleSlug": "cinema-seat-allocation",
	"slug": "an-pai-dian-ying-yuan-zuo-wei-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/cinema-seat-allocation/solution/an-pai-dian-ying-yuan-zuo-wei-by-leetcode-solution/",
	"content": "#### 方法一：位运算\n\n对于一个家庭而言，只有以下三种给他们安排座位的方法：\n\n- 安排位置 2，3，4，5；\n- 安排位置 4，5，6，7；\n- 安排位置 6，7，8，9。\n\n因此每一排的位置 1 和位置 10 都是没有意义的，即使被预约了也对答案没有任何影响。从下面的叙述开始，我们忽略所有在位置 1 和位置 10 的预约。同时我们可以发现，如果一排位置没有被预约，那么恰好可以安排给两个家庭，即给一个家庭安排位置 2，3，4，5，给另一个家庭安排位置 6，7，8，9；如果一排位置被预约了至少一个座位，那么最多只能安排给一个家庭了。\n\n这样以来，我们可以使用 $8$ 个二进制位表示一排座位的预约情况，这里的 $8$ 即表示位置 2 到位置 9 的这些座位。如果位置 $i$ 的座位被预约，那么第 $i-2$ 个二进制位为 $1$，否则为 $0$。例如在示例一中，每一排对应的二进制数分别为：\n\n- 第一排：预约了位置 2，3，8，那么二进制数为 $(01000011)_2$；\n\n- 第二排：预约了位置 6，那么二进制数为 $(00010000)_2$；\n\n- 第三排：预约了位置 1 和 10，那么二进制数为 $(00000000)_2$。\n\n我们可以用哈希映射（HashMap）来存储每一排以及它们的二进制数。对于哈希映射中的每个键值对，键表示电影院中的一排，值表示这一排对应的二进制数。如果某一排没有任何位置被预约（例如上面的第三排），我们实际上知道了这一排一定可以安排给两个家庭，因此可以不必将这个键值对存放在哈希映射中。也就是说，只有某一排的某一座位被预约了，我们才将这一排放入哈希映射。\n\n在处理完了所有的预约之后，我们遍历哈希映射。对于一个键值对 $(\\textit{row}, \\textit{bitmask})$，我们如何知道 $\\textit{row}$ 这一排可以安排给几个家庭呢？根据之前的分析，被存储在哈希映射中的这些排最多只能安排给一个家庭，那么对于三种安排座位的方法：\n\n- 对于安排位置 2，3，4，5，如果 $\\textit{bitmask}$ 中第 0，1，2，3 个二进制位均为 $0$，那么就可以安排给一个家庭；也就是说，$\\textit{bitmask}$ 和 $(11110000)_2$ 的按位或值保持为 $(11110000)_2$ 不变；\n\n- 对于安排位置 4，5，6，7，如果 $\\textit{bitmask}$ 中第 2，3，4，5 个二进制位均为 $0$，那么就可以安排给一个家庭；也就是说，$\\textit{bitmask}$ 和 $(11000011)_2$ 的按位或值保持为 $(11000011)_2$ 不变；\n\n- 对于安排位置 6，7，8，9，如果 $\\textit{bitmask}$ 中第 4，5，6，7 个二进制位均为 $0$，那么就可以安排给一个家庭；也就是说，$\\textit{bitmask}$ 和 $(00001111)_2$ 的按位或值保持为 $(00001111)_2$ 不变。\n\n这样以来，我们只需要将 $\\textit{bitmask}$ 分别与 $(11110000)_2$，$(11000011)_2$ 和 $(00001111)_2$ 进行按位或运算，如果其中有一个在运算后保持不变，那么 $\\textit{row}$ 这一列就可以安排给一个家庭。\n\n在最后，我们知道还有 $n - |S|$ 列是没有任何一个位置被预约的，其中 $|S|$ 是哈希映射中键值对的个数。这些列可以安排给两个家庭，因此最后的答案还需要加上 $2(n - |S|)$。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxNumberOfFamilies(int n, vector<vector<int>>& reservedSeats) {\n        int left = 0b11110000;\n        int middle = 0b11000011;\n        int right = 0b00001111;\n\n        unordered_map<int, int> occupied;\n        for (const vector<int>& seat: reservedSeats) {\n            if (seat[1] >= 2 && seat[1] <= 9) {\n                occupied[seat[0]] |= (1 << (seat[1] - 2));\n            }\n        }\n\n        int ans = (n - occupied.size()) * 2;\n        for (auto& [row, bitmask]: occupied) {\n            if (((bitmask | left) == left) || ((bitmask | middle) == middle) || ((bitmask | right) == right)) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:\n        left, middle, right = 0b11110000, 0b11000011, 0b00001111\n        occupied = collections.defaultdict(int)\n        for seat in reservedSeats:\n            if 2 <= seat[1] <= 9:\n                occupied[seat[0]] |= (1 << (seat[1] - 2))\n        \n        ans = (n - len(occupied)) * 2\n        for row, bitmask in occupied.items():\n            if (bitmask | left) == left or (bitmask | middle) == middle or (bitmask | right) == right:\n                ans += 1\n        return ans\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxNumberOfFamilies(int n, int[][] reservedSeats) {\n        int left = 0b11110000;\n        int middle = 0b11000011;\n        int right = 0b00001111;\n\n        Map <Integer, Integer> occupied = new HashMap <Integer, Integer> ();\n        for (int[] seat: reservedSeats) {\n            if (seat[1] >= 2 && seat[1] <= 9) {\n                int origin = occupied.containsKey(seat[0]) ? occupied.get(seat[0]) : 0;\n                int value = origin | (1 << (seat[1] - 2));\n                occupied.put(seat[0], value);\n            }\n        }\n\n        int ans = (n - occupied.size()) * 2;\n        for (Map.Entry <Integer, Integer> entry : occupied.entrySet()) {\n            int row = entry.getKey(), bitmask = entry.getValue();\n            if (((bitmask | left) == left) || ((bitmask | middle) == middle) || ((bitmask | right) == right)) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(r)$，其中 $r$ 是数组 $\\textit{reservedSeats}$ 的长度。我们首先对数组 $\\textit{reservedSeats}$ 进行遍历并在哈希映射中记录这些预约信息，随后遍历哈希映射统计答案，这两次遍历的时间复杂度均为 $O(r)$。\n\n- 空间复杂度：$O(r)$。额外的使用空间为哈希映射占用的空间，其中的键值对最多有 $r$ 个。"
}