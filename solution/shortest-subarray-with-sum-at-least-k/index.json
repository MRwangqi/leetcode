{
	"titleSlug": "shortest-subarray-with-sum-at-least-k",
	"slug": "he-zhi-shao-wei-k-de-zui-duan-zi-shu-zu-by-leetcod",
	"url": "https://leetcode-cn.com/problems/shortest-subarray-with-sum-at-least-k/solution/he-zhi-shao-wei-k-de-zui-duan-zi-shu-zu-by-leetcod/",
	"content": "#### 方法一：滑动窗口\n\n**分析**\n\n我们用数组 `P` 表示数组 `A` 的前缀和，即 `P[i] = A[0] + A[1] + ... + A[i - 1]`。我们需要找到 `x` 和 `y`，使得 `P[y] - P[x] >= K` 且 `y - x` 最小。\n\n我们用 `opt(y)` 表示对于固定的 `y`，最大的满足 `P[x] <= P[y] - K` 的 `x`，这样所有 `y - opt(y)` 中的最小值即为答案。我们可以发现两条性质：\n\n* 如果 `x1 < x2` 且 `P[x2] <= P[x1]`，那么 `opt(y)` 的值不可能为 `x1`，这是因为 `x2` 比 `x1` 大，并且如果 `x1` 满足了 `P[x1] <= P[y] - K`，那么 `P[x2] <= P[x1] <= P[y] - K`，即 `x2` 同样满足 `P[x2] <= P[y] - K`。\n\n* 如果 `opt(y1)` 的值为 `x`，那么我们以后就不用再考虑 `x` 了。这是因为如果有 `y2 > y1` 且 `opt(y2)` 的值也为 `x`，但此时 `y2 - x` 显然大于 `y1 - x`，不会作为所有 `y - opt(y)` 中的最小值。\n\n**算法**\n\n我们维护一个关于前缀和数组 `P` 的单调队列，它是一个双端队列（deque），其中存放了下标 `x`：`x0, x1, ...` 满足 `P[x0], P[x1], ...` 单调递增。这是为了满足性质一。\n\n当我们遇到了一个新的下标 `y` 时，我们会在队尾移除若干元素，直到 `P[x0], P[x1], ..., P[y]` 单调递增。这同样是为了满足性质一。\n\n同时，我们会在队首也移除若干元素，如果 `P[y] >= P[x0] + K`，则将队首元素移除，直到该不等式不满足。这是为了满足性质二。\n\n```Java [sol1]\nclass Solution {\n    public int shortestSubarray(int[] A, int K) {\n        int N = A.length;\n        long[] P = new long[N+1];\n        for (int i = 0; i < N; ++i)\n            P[i+1] = P[i] + (long) A[i];\n\n        // Want smallest y-x with P[y] - P[x] >= K\n        int ans = N+1; // N+1 is impossible\n        Deque<Integer> monoq = new LinkedList(); //opt(y) candidates, as indices of P\n\n        for (int y = 0; y < P.length; ++y) {\n            // Want opt(y) = largest x with P[x] <= P[y] - K;\n            while (!monoq.isEmpty() && P[y] <= P[monoq.getLast()])\n                monoq.removeLast();\n            while (!monoq.isEmpty() && P[y] >= P[monoq.getFirst()] + K)\n                ans = Math.min(ans, y - monoq.removeFirst());\n\n            monoq.addLast(y);\n        }\n\n        return ans < N+1 ? ans : -1;\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def shortestSubarray(self, A, K):\n        N = len(A)\n        P = [0]\n        for x in A:\n            P.append(P[-1] + x)\n\n        #Want smallest y-x with Py - Px >= K\n        ans = N+1 # N+1 is impossible\n        monoq = collections.deque() #opt(y) candidates, represented as indices of P\n        for y, Py in enumerate(P):\n            #Want opt(y) = largest x with Px <= Py - K\n            while monoq and Py <= P[monoq[-1]]:\n                monoq.pop()\n\n            while monoq and Py - P[monoq[0]] >= K:\n                ans = min(ans, y - monoq.popleft())\n\n            monoq.append(y)\n\n        return ans if ans < N+1 else -1\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是数组 `A` 的长度。\n\n* 空间复杂度：$O(N)$。"
}