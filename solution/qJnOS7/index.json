{
	"titleSlug": "qJnOS7",
	"slug": "zui-chang-gong-gong-zi-xu-lie-by-leetcod-ugg7",
	"url": "https://leetcode-cn.com/problems/qJnOS7/solution/zui-chang-gong-gong-zi-xu-lie-by-leetcod-ugg7/",
	"content": "#### 方法一：动态规划\n\n最长公共子序列问题是典型的二维动态规划问题。\n\n假设字符串 $\\textit{text}_1$ 和 $\\textit{text}_2$ 的长度分别为 $m$ 和 $n$，创建 $m+1$ 行 $n+1$ 列的二维数组 $\\textit{dp}$，其中 $\\textit{dp}[i][j]$ 表示 $\\textit{text}_1[0:i]$ 和 $\\textit{text}_2[0:j]$ 的最长公共子序列的长度。\n\n> 上述表示中，$\\textit{text}_1[0:i]$ 表示 $\\textit{text}_1$ 的长度为 $i$ 的前缀，$\\textit{text}_2[0:j]$ 表示 $\\textit{text}_2$ 的长度为 $j$ 的前缀。\n\n考虑动态规划的边界情况：\n\n- 当 $i=0$ 时，$\\textit{text}_1[0:i]$ 为空，空字符串和任何字符串的最长公共子序列的长度都是 $0$，因此对任意 $0 \\le j \\le n$，有 $\\textit{dp}[0][j]=0$；\n\n- 当 $j=0$ 时，$\\textit{text}_2[0:j]$ 为空，同理可得，对任意 $0 \\le i \\le m$，有 $\\textit{dp}[i][0]=0$。\n\n因此动态规划的边界情况是：当 $i=0$ 或 $j=0$ 时，$\\textit{dp}[i][j]=0$。\n\n当 $i>0$ 且 $j>0$ 时，考虑 $\\textit{dp}[i][j]$ 的计算：\n\n- 当 $\\textit{text}_1[i-1]=\\textit{text}_2[j-1]$ 时，将这两个相同的字符称为公共字符，考虑 $\\textit{text}_1[0:i-1]$ 和 $\\textit{text}_2[0:j-1]$ 的最长公共子序列，再增加一个字符（即公共字符）即可得到 $\\textit{text}_1[0:i]$ 和 $\\textit{text}_2[0:j]$ 的最长公共子序列，因此 $\\textit{dp}[i][j]=\\textit{dp}[i-1][j-1]+1$。\n\n- 当 $\\textit{text}_1[i-1] \\ne \\textit{text}_2[j-1]$ 时，考虑以下两项：\n\n   - $\\textit{text}_1[0:i-1]$ 和 $\\textit{text}_2[0:j]$ 的最长公共子序列；\n\n   - $\\textit{text}_1[0:i]$ 和 $\\textit{text}_2[0:j-1]$ 的最长公共子序列。\n\n   要得到 $\\textit{text}_1[0:i]$ 和 $\\textit{text}_2[0:j]$ 的最长公共子序列，应取两项中的长度较大的一项，因此 $\\textit{dp}[i][j]=\\max(\\textit{dp}[i-1][j],\\textit{dp}[i][j-1])$。\n\n由此可以得到如下状态转移方程：\n\n$$\n\\textit{dp}[i][j] = \\begin{cases}\n\\textit{dp}[i-1][j-1]+1, & \\textit{text}_1[i-1]=\\textit{text}_2[j-1] \\\\\n\\max(\\textit{dp}[i-1][j],\\textit{dp}[i][j-1]), & \\textit{text}_1[i-1] \\ne \\textit{text}_2[j-1]\n\\end{cases}\n$$\n\n最终计算得到 $\\textit{dp}[m][n]$ 即为 $\\textit{text}_1$ 和 $\\textit{text}_2$ 的最长公共子序列的长度。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_095/1.png){:width=\"85%\"}\n\n```Java [sol1-Java]\nclass Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        int m = text1.length(), n = text2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 1; i <= m; i++) {\n            char c1 = text1.charAt(i - 1);\n            for (int j = 1; j <= n; j++) {\n                char c2 = text2.charAt(j - 1);\n                if (c1 == c2) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar longestCommonSubsequence = function(text1, text2) {\n    const m = text1.length, n = text2.length;\n    const dp = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0));\n    for (let i = 1; i <= m; i++) {\n        const c1 = text1[i - 1];\n        for (let j = 1; j <= n; j++) {\n            const c2 = text2[j - 1];\n            if (c1 === c2) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[m][n];\n};\n```\n\n```go [sol1-Golang]\nfunc longestCommonSubsequence(text1, text2 string) int {\n    m, n := len(text1), len(text2)\n    dp := make([][]int, m+1)\n    for i := range dp {\n        dp[i] = make([]int, n+1)\n    }\n    for i, c1 := range text1 {\n        for j, c2 := range text2 {\n            if c1 == c2 {\n                dp[i+1][j+1] = dp[i][j] + 1\n            } else {\n                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n            }\n        }\n    }\n    return dp[m][n]\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        \n        return dp[m][n]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        int m = text1.length(), n = text2.length();\n        vector<vector<int>> dp(m + 1, vector<int>(n + 1));\n        for (int i = 1; i <= m; i++) {\n            char c1 = text1.at(i - 1);\n            for (int j = 1; j <= n; j++) {\n                char c2 = text2.at(j - 1);\n                if (c1 == c2) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};\n```\n\n```C [sol1-C]\nint longestCommonSubsequence(char* text1, char* text2) {\n    int m = strlen(text1), n = strlen(text2);\n    int dp[m + 1][n + 1];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 1; i <= m; i++) {\n        char c1 = text1[i - 1];\n        for (int j = 1; j <= n; j++) {\n            char c2 = text2[j - 1];\n            if (c1 == c2) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            } else {\n                dp[i][j] = fmax(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[m][n];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是字符串 $\\textit{text}_1$ 和 $\\textit{text}_2$ 的长度。二维数组 $\\textit{dp}$ 有 $m+1$ 行和 $n+1$ 列，需要对 $\\textit{dp}$ 中的每个元素进行计算。\n\n- 空间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是字符串 $\\textit{text}_1$ 和 $\\textit{text}_2$ 的长度。创建了 $m+1$ 行 $n+1$ 列的二维数组 $\\textit{dp}$。"
}