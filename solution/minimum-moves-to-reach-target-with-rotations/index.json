{
	"titleSlug": "minimum-moves-to-reach-target-with-rotations",
	"slug": "golang-bfs-by-resara-2",
	"url": "https://leetcode-cn.com/problems/minimum-moves-to-reach-target-with-rotations/solution/golang-bfs-by-resara-2/",
	"content": "#### 解题思路：\n看到最短路径，首先想到的就是 BFS，BFS 不行再考虑 DP。\n\n那么我们先考虑 BFS，很显然，我们只要把蛇每次走位的坐标存到队列中，先进先出（FIFO），只要和目标坐标相等，即可返回。\n我在这里没有存每个点的横坐标和纵坐标。通过一个值去计算两个坐标 比如当前值为 8（表的大小为 `m*n`）， 横坐标 = `8%n`, 纵坐标 = `8/n`，假设当前位置是 `(x1, x2)`\n\n那么蛇都有哪几种走位呢：\n1. **如果没有障碍，则向右移动一个单元格。并仍然保持身体的水平／竖直状态**\n因为题目说了仍然保持身体的水平/竖直状态，所以蛇在竖直状态也是可以向右平移\n![snake1.gif](https://pic.leetcode-cn.com/7d901d3fb531bedbb4fc67c336f89925bf150a0bdd2302d5ec9a71f83ae0bd73-snake1.gif){:width=300}  ![snake2.gif](https://pic.leetcode-cn.com/75c0027d91c15c9909bf8b2a4530de236c0e96cd409f1f9c956c4cddba050088-snake2.gif){:width=300}\n我们不用刻意去考虑这两种状态 只需要检查`(x1 + 1)`和`(x2 + 1)`是否有障碍物\n2. **如果没有障碍，则向下移动一个单元格。并仍然保持身体的水平／竖直状态**\n水平和竖直状态都是可以向下移动\n![snake3.gif](https://pic.leetcode-cn.com/71687d8add024ade4112b2b89f99578cfe2ea3b928aca4b79a2f340b4013458a-snake3.gif){:width=300} ![snake4.gif](https://pic.leetcode-cn.com/ec7eee8a0c8d989e67dc9af26a0494f13996c7214ba2ab2843b8699c3662f034-snake4.gif){:width=300}\n这里也不用刻意去考虑这两种状态 只需要检查`（x1 + n)`和`（x2 + n）`是否有障碍物\n3. **如果它处于水平状态并且其下面的两个单元都是空的，就顺时针旋转 90 度**\n这里只有水平状态才可以移动\n![snake5.gif](https://pic.leetcode-cn.com/ea1b4c837ce7d5cfe865dbd9766650bf69f7357e4e5e387c15089bf7944dfeeb-snake5.gif){:width=300}\n通过图可以发现这种状态是检查`（x1 + n）`和`（x2 + n）`是否有障碍物，可以归到第 2 种状态中\n\n4. **如果它处于竖直状态并且其右面的两个单元都是空的，就逆时针旋转 90 度**\n![snake6.gif](https://pic.leetcode-cn.com/cd54f2f50f4980948f6ac2db337e1f0a39bf06b6fb0b0d3b7fe8d7fc373658b1-snake6.gif){:width=300}\n通过图可以发现这种状态是检查`（x1 + 1）`和`（x2 + 1）`是否有障碍物，可以归到第1种状态中\n\n\n通过分析，我们只需要检查两种状态\n1. 如果`（x1 + 1)` 和 `（x2 + 1)` 没有障碍物，向右平移，如果是竖直状态，还可以旋转\n2. 如果`（x1 + n)` 和 `（x2 + n)` 没有障碍物，向下平移，如果是水平状态，还可以旋转\n\n然后就是基本的 BFS 了，符合条件且没有访问过，加入到队列中，步数 +1，一直循环直到到达目的地或者队列为空。\n#### 代码：\n```go [-Go]\nfunc minimumMoves(grid [][]int) int {\n\tm, n := len(grid), len(grid[0])\n\tvisited := map[[2]int]bool{}\n\ttargetX, targetY := m*n-2, m*n-1\n\tstack := [100000][3]int{}\n\tstart, end := 0, 0\n\tstack[start] = [3]int{0, 1, 0}\n\n\tcheck := func(x, y, step int) bool {\n\t\tif x == targetX && y == targetY {\n\t\t\treturn true\n\t\t}\n\t\tif visited[[2]int{x, y}] {\n\t\t\treturn false\n\t\t}\n\t\tvisited[[2]int{x, y}] = true\n\t\tend++\n\t\tstack[end] = [3]int{x, y, step + 1}\n\t\treturn false\n\t}\n\n\tfor start <= end {\n\t\ta, b, step := stack[start][0], stack[start][1], stack[start][2]\n\t\tstart++\n\t\tx0, y0 := a/n, a%n\n\t\tx1, y1 := b/n, b%n\n\t\t// 向右\n\t\tif y0+1 < n && grid[x0][y0+1] == 0 && y1+1 < n && grid[x1][y1+1] == 0 {\n\t\t\tif check(n*x0+y0+1, n*x1+y1+1, step) {\n\t\t\t\treturn step + 1\n\t\t\t}\n\n\t\t\tif y0 == y1 { // 竖直状态\n\t\t\t\tif check(a, n*x0+y0+1, step) {\n\t\t\t\t\treturn step + 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 向下\n\t\tif x0+1 < m && grid[x0+1][y0] == 0 && x1+1 < m && grid[x1+1][y1] == 0 {\n\t\t\tif check(n*x0+y0+n, n*x1+y1+n, step) {\n\t\t\t\treturn step + 1\n\t\t\t}\n\n\t\t\tif x0 == x1 { // 水平状态\n\t\t\t\tif check(a, n*x0+y0+n, step) {\n\t\t\t\t\treturn step + 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\n\n```\n"
}