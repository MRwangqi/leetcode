{
	"titleSlug": "largest-submatrix-with-rearrangements",
	"slug": "java-yu-chu-li-shu-zu-bian-li-mei-xing-p-qpqu",
	"url": "https://leetcode-cn.com/problems/largest-submatrix-with-rearrangements/solution/java-yu-chu-li-shu-zu-bian-li-mei-xing-p-qpqu/",
	"content": "\r\n预处理数组，计算以这个点为结尾，上面有多少个连续的1，就是这一列以这个点为结尾的最大高度\r\n这样就将二维问题转成一维\r\n\r\n遍历每一行，对每一行进行排序，记录矩形的最长的高度，每次更新结果\r\n```\r\nclass Solution {\r\n    public int largestSubmatrix(int[][] matrix) {\r\n        int n=matrix.length;\r\n        int m=matrix[0].length;\r\n        int res=0;\r\n        for(int i=1;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                if(matrix[i][j]==1){\r\n                    //记录向上连续1的个数\r\n                    matrix[i][j]+=matrix[i-1][j];\r\n                }\r\n            }\r\n        }\r\n        for(int i=0;i<n;i++){\r\n            Arrays.sort(matrix[i]);\r\n            for(int j=m-1;j>=0;j--){\r\n                //更新矩形的最大高度\r\n                int height=matrix[i][j];\r\n                //更新最大面积\r\n                res=Math.max(res,height*(m-j));\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```\r\n"
}