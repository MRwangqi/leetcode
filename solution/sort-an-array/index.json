{
	"titleSlug": "sort-an-array",
	"slug": "pai-xu-shu-zu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/sort-an-array/solution/pai-xu-shu-zu-by-leetcode-solution/",
	"content": "#### 前言\n\n本题你可以选择直接调用库函数来对序列进行排序，但意义不大。由于排序算法有很多，本文只介绍三种常见的基于比较的复杂度较低的排序。\n\n#### 方法一：快速排序\n\n**思路和算法**\n\n快速排序的主要思想是通过划分将待排序的序列分成前后两部分，其中前一部分的数据都比后一部分的数据要小，然后再递归调用函数对两部分的序列分别进行快速排序，以此使整个序列达到有序。\n\n我们定义函数 `randomized_quicksort(nums, l, r)` 为对 `nums` 数组里 $[l,r]$ 的部分进行排序，每次先调用 `randomized_partition` 函数对 `nums` 数组里 $[l,r]$ 的部分进行划分，并返回分界值的下标 `pos`，然后按上述将的递归调用 `randomized_quicksort(nums, l, pos - 1)` 和 `randomized_quicksort(nums, pos + 1, r)` 即可。\n\n那么核心就是划分函数的实现了，划分函数一开始需要确定一个分界值（我们称之为主元 `pivot`)，然后再进行划分。而主元的选取有很多种方式，这里我们采用随机的方式，对当前划分区间 $[l,r]$ 里的数等概率随机一个作为我们的主元，再将主元放到区间末尾，进行划分。\n\n整个划分函数 `partition` 主要涉及两个指针 $i$ 和 $j$，一开始 `i = l - 1`，`j = l`。我们需要实时维护两个指针使得任意时候，对于任意数组下标 $k$，我们有如下条件成立：\n1. $l\\leq k\\leq i$ 时，$\\textit{nums}[k]\\leq \\textit{pivot}$。\n\n2. $i+1\\leq k\\leq j-1$ 时，$\\textit{nums}[k]> \\textit{pivot}$。\n\n3. $k==r$ 时，$\\textit{nums}[k]=\\textit{pivot}$。\n\n我们每次移动指针 $j$ ，如果 $\\textit{nums}[j]> pivot$，我们只需要继续移动指针 $j$ ，即能使上述三个条件成立，否则我们需要将指针 $i$ 加一，然后交换 $\\textit{nums}[i]$ 和 $\\textit{nums}[j]$，再移动指针 $j$ 才能使得三个条件成立。\n\n当 $j$ 移动到 $r-1$ 时结束循环，此时我们可以由上述三个条件知道 $[l,i]$ 的数都小于等于主元 `pivot`，$[i+1,r-1]$ 的数都大于主元 `pivot`，那么我们只要交换 $\\textit{nums}[i+1]$ 和 $\\textit{nums}[r]$ ，即能使得 $[l,i+1]$ 区间的数都小于 $[i+2,r]$ 区间的数，完成一次划分，且分界值下标为 $i+1$，返回即可。\n\n如下的动图展示了一次划分的过程，刚开始随机选了 $4$ 作为主元，与末尾元素交换后开始划分：\n\n![fig1](https://assets.leetcode-cn.com/solution-static/912/912_fig1.gif)\n\n```C++ [sol1-C++]\nclass Solution {\n    int partition(vector<int>& nums, int l, int r) {\n        int pivot = nums[r];\n        int i = l - 1;\n        for (int j = l; j <= r - 1; ++j) {\n            if (nums[j] <= pivot) {\n                i = i + 1;\n                swap(nums[i], nums[j]);\n            }\n        }\n        swap(nums[i + 1], nums[r]);\n        return i + 1;\n    }\n    int randomized_partition(vector<int>& nums, int l, int r) {\n        int i = rand() % (r - l + 1) + l; // 随机选一个作为我们的主元\n        swap(nums[r], nums[i]);\n        return partition(nums, l, r);\n    }\n    void randomized_quicksort(vector<int>& nums, int l, int r) {\n        if (l < r) {\n            int pos = randomized_partition(nums, l, r);\n            randomized_quicksort(nums, l, pos - 1);\n            randomized_quicksort(nums, pos + 1, r);\n        }\n    }\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        srand((unsigned)time(NULL));\n        randomized_quicksort(nums, 0, (int)nums.size() - 1);\n        return nums;\n    }\n};\n```\n```Java [sol1-Java]\nclass Solution {\n    public int[] sortArray(int[] nums) {\n        randomizedQuicksort(nums, 0, nums.length - 1);\n        return nums;\n    }\n\n    public void randomizedQuicksort(int[] nums, int l, int r) {\n        if (l < r) {\n            int pos = randomizedPartition(nums, l, r);\n            randomizedQuicksort(nums, l, pos - 1);\n            randomizedQuicksort(nums, pos + 1, r);\n        }\n    }\n\n    public int randomizedPartition(int[] nums, int l, int r) {\n        int i = new Random().nextInt(r - l + 1) + l; // 随机选一个作为我们的主元\n        swap(nums, r, i);\n        return partition(nums, l, r);\n    }\n\n    public int partition(int[] nums, int l, int r) {\n        int pivot = nums[r];\n        int i = l - 1;\n        for (int j = l; j <= r - 1; ++j) {\n            if (nums[j] <= pivot) {\n                i = i + 1;\n                swap(nums, i, j);\n            }\n        }\n        swap(nums, i + 1, r);\n        return i + 1;\n    }\n\n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n```\n```Python [sol1-Python3]\nclass Solution:\n    def randomized_partition(self, nums, l, r):\n        pivot = random.randint(l, r)\n        nums[pivot], nums[r] = nums[r], nums[pivot]\n        i = l - 1\n        for j in range(l, r):\n            if nums[j] < nums[r]:\n                i += 1\n                nums[j], nums[i] = nums[i], nums[j]\n        i += 1\n        nums[i], nums[r] = nums[r], nums[i]\n        return i\n\n    def randomized_quicksort(self, nums, l, r):\n        if r - l <= 0:\n            return\n        mid = self.randomized_partition(nums, l, r)\n        self.randomized_quicksort(nums, l, mid - 1)\n        self.randomized_quicksort(nums, mid + 1, r)\n\n    def sortArray(self, nums: List[int]) -> List[int]:\n        self.randomized_quicksort(nums, 0, len(nums) - 1)\n        return nums\n```\n\n**复杂度分析**\n\n- 时间复杂度：基于随机选取主元的快速排序时间复杂度为期望 $O(n\\log n)$，其中 $n$ 为数组的长度。详细证明过程可以见《算法导论》第七章，这里不再大篇幅赘述。\n\n- 空间复杂度：$O(h)$，其中 $h$ 为快速排序递归调用的层数。我们需要额外的 $O(h)$ 的递归调用的栈空间，由于划分的结果不同导致了快速排序递归调用的层数也会不同，最坏情况下需 $O(n)$ 的空间，最优情况下每次都平衡，此时整个递归树高度为 $\\log n$，空间复杂度为 $O(\\log n)$。 \n\n#### 方法二：堆排序\n\n**预备知识**\n\n- 堆\n\n**思路和算法**\n\n堆排序的思想就是先将待排序的序列建成大根堆，使得每个父节点的元素大于等于它的子节点。此时整个序列最大值即为堆顶元素，我们将其与末尾元素交换，使末尾元素为最大值，然后再调整堆顶元素使得剩下的 $n-1$ 个元素仍为大根堆，再重复执行以上操作我们即能得到一个有序的序列。\n\n如下两个动图展示了对 `[4, 6, 8, 5, 9]` 这个数组堆排序的过程：\n\n![fig2](https://assets.leetcode-cn.com/solution-static/912/912_fig2.gif)\n\n![fig3](https://assets.leetcode-cn.com/solution-static/912/912_fig3.gif)\n\n```C++ [sol2-C++]\nclass Solution {\n    void maxHeapify(vector<int>& nums, int i, int len) {\n        for (; (i << 1) + 1 <= len;) {\n            int lson = (i << 1) + 1;\n            int rson = (i << 1) + 2;\n            int large;\n            if (lson <= len && nums[lson] > nums[i]) {\n                large = lson;\n            } else {\n                large = i;\n            }\n            if (rson <= len && nums[rson] > nums[large]) {\n                large = rson;\n            }\n            if (large != i) {\n                swap(nums[i], nums[large]);\n                i = large;\n            } else {\n                break;\n            }\n        }\n    }\n    void buildMaxHeap(vector<int>& nums, int len) {\n        for (int i = len / 2; i >= 0; --i) {\n            maxHeapify(nums, i, len);\n        }\n    }\n    void heapSort(vector<int>& nums) {\n        int len = (int)nums.size() - 1;\n        buildMaxHeap(nums, len);\n        for (int i = len; i >= 1; --i) {\n            swap(nums[i], nums[0]);\n            len -= 1;\n            maxHeapify(nums, 0, len);\n        }\n    }\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        heapSort(nums);\n        return nums;\n    }\n};\n```\n```Java [sol2-Java]\nclass Solution {\n    public int[] sortArray(int[] nums) {\n        heapSort(nums);\n        return nums;\n    }\n\n    public void heapSort(int[] nums) {\n        int len = nums.length - 1;\n        buildMaxHeap(nums, len);\n        for (int i = len; i >= 1; --i) {\n            swap(nums, i, 0);\n            len -= 1;\n            maxHeapify(nums, 0, len);\n        }\n    }\n\n    public void buildMaxHeap(int[] nums, int len) {\n        for (int i = len / 2; i >= 0; --i) {\n            maxHeapify(nums, i, len);\n        }\n    }\n\n    public void maxHeapify(int[] nums, int i, int len) {\n        for (; (i << 1) + 1 <= len;) {\n            int lson = (i << 1) + 1;\n            int rson = (i << 1) + 2;\n            int large;\n            if (lson <= len && nums[lson] > nums[i]) {\n                large = lson;\n            } else {\n                large = i;\n            }\n            if (rson <= len && nums[rson] > nums[large]) {\n                large = rson;\n            }\n            if (large != i) {\n                swap(nums, i, large);\n                i = large;\n            } else {\n                break;\n            }\n        }\n    }\n\n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n```\n```Python [sol2-Python3]\nclass Solution:\n    def max_heapify(self, heap, root, heap_len):\n        p = root\n        while p * 2 + 1 < heap_len:\n            l, r = p * 2 + 1, p * 2 + 2\n            if heap_len <= r or heap[r] < heap[l]:\n                nex = l\n            else:\n                nex = r\n            if heap[p] < heap[nex]:\n                heap[p], heap[nex] = heap[nex], heap[p]\n                p = nex\n            else:\n                break\n        \n    def build_heap(self, heap):\n        for i in range(len(heap) - 1, -1, -1):\n            self.max_heapify(heap, i, len(heap))\n\n    def heap_sort(self, nums):\n        self.build_heap(nums)\n        for i in range(len(nums) - 1, -1, -1):\n            nums[i], nums[0] = nums[0], nums[i]\n            self.max_heapify(nums, 0, i)\n            \n    def sortArray(self, nums: List[int]) -> List[int]:\n        self.heap_sort(nums)\n        return nums\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log n)$。初始化建堆的时间复杂度为 $O(n)$，建完堆以后需要进行 $n-1$ 次调整，一次调整（即 `maxHeapify`） 的时间复杂度为 $O(\\log n)$，那么 $n-1$ 次调整即需要 $O(n\\log n)$ 的时间复杂度。因此，总时间复杂度为 $O(n+n\\log n)=O(n\\log n)$。\n\n- 空间复杂度：$O(1)$。只需要常数的空间存放若干变量。\n\n#### 方法三：归并排序\n\n**思路**\n\n归并排序利用了分治的思想来对序列进行排序。对一个长为 $n$ 的待排序的序列，我们将其分解成两个长度为 $\\frac{n}{2}$ 的子序列。每次先递归调用函数使两个子序列有序，然后我们再线性合并两个有序的子序列使整个序列有序。\n\n**算法**\n\n定义 `mergeSort(nums, l, r)` 函数表示对 `nums` 数组里 $[l,r]$ 的部分进行排序，整个函数流程如下：\n\n1. 递归调用函数 `mergeSort(nums, l, mid)` 对 `nums` 数组里 $[l,\\textit{mid}]$ 部分进行排序。\n\n2. 递归调用函数 `mergeSort(nums, mid + 1, r)` 对 `nums` 数组里 $[\\textit{mid}+1,r]$ 部分进行排序。\n\n3. 此时 `nums` 数组里 $[l,\\textit{mid}]$ 和 $[\\textit{mid}+1,r]$ 两个区间已经有序，我们对两个有序区间线性归并即可使 `nums` 数组里 $[l,r]$ 的部分有序。\n\n   线性归并的过程并不难理解，由于两个区间均有序，所以我们维护两个指针 $i$ 和 $j$ 表示当前考虑到 $[l,\\textit{mid}]$ 里的第 $i$ 个位置和 $[\\textit{mid}+1,r]$ 的第 $j$ 个位置。\n\n   如果 `nums[i] <= nums[j]` ，那么我们就将 $\\textit{nums}[i]$ 放入临时数组 `tmp` 中并让 `i += 1` ，即指针往后移。否则我们就将 $\\textit{nums}[j]$ 放入临时数组 `tmp` 中并让 `j += 1` 。如果有一个指针已经移到了区间的末尾，那么就把另一个区间里的数按顺序加入 `tmp` 数组中即可。\n\n   这样能保证我们每次都是让两个区间中较小的数加入临时数组里，那么整个归并过程结束后 $[l,r]$ 即为有序的。\n   \n如下的动图展示了两个有序数组线性归并的过程：\n\n![fig4](https://assets.leetcode-cn.com/solution-static/912/912_fig4.gif)\n\n函数递归调用的入口为 `mergeSort(nums, 0, nums.length - 1)`，递归结束当且仅当 `l >= r`。\n\n```C++ [sol3-C++]\nclass Solution {\n    vector<int> tmp;\n    void mergeSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return;\n        int mid = (l + r) >> 1;\n        mergeSort(nums, l, mid);\n        mergeSort(nums, mid + 1, r);\n        int i = l, j = mid + 1;\n        int cnt = 0;\n        while (i <= mid && j <= r) {\n            if (nums[i] <= nums[j]) {\n                tmp[cnt++] = nums[i++];\n            }\n            else {\n                tmp[cnt++] = nums[j++];\n            }\n        }\n        while (i <= mid) {\n            tmp[cnt++] = nums[i++];\n        }\n        while (j <= r) {\n            tmp[cnt++] = nums[j++];\n        }\n        for (int i = 0; i < r - l + 1; ++i) {\n            nums[i + l] = tmp[i];\n        }\n    }\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        tmp.resize((int)nums.size(), 0);\n        mergeSort(nums, 0, (int)nums.size() - 1);\n        return nums;\n    }\n};\n```\n```Java [sol3-Java]\nclass Solution {\n    int[] tmp;\n\n    public int[] sortArray(int[] nums) {\n        tmp = new int[nums.length];\n        mergeSort(nums, 0, nums.length - 1);\n        return nums;\n    }\n\n    public void mergeSort(int[] nums, int l, int r) {\n        if (l >= r) {\n            return;\n        }\n        int mid = (l + r) >> 1;\n        mergeSort(nums, l, mid);\n        mergeSort(nums, mid + 1, r);\n        int i = l, j = mid + 1;\n        int cnt = 0;\n        while (i <= mid && j <= r) {\n            if (nums[i] <= nums[j]) {\n                tmp[cnt++] = nums[i++];\n            } else {\n                tmp[cnt++] = nums[j++];\n            }\n        }\n        while (i <= mid) {\n            tmp[cnt++] = nums[i++];\n        }\n        while (j <= r) {\n            tmp[cnt++] = nums[j++];\n        }\n        for (int k = 0; k < r - l + 1; ++k) {\n            nums[k + l] = tmp[k];\n        }\n    }\n}\n```\n```Python [sol3-Python3]\nclass Solution:\n    def merge_sort(self, nums, l, r):\n        if l == r:\n            return\n        mid = (l + r) // 2\n        self.merge_sort(nums, l, mid)\n        self.merge_sort(nums, mid + 1, r)\n        tmp = []\n        i, j = l, mid + 1\n        while i <= mid or j <= r:\n            if i > mid or (j <= r and nums[j] < nums[i]):\n                tmp.append(nums[j])\n                j += 1\n            else:\n                tmp.append(nums[i])\n                i += 1\n        nums[l: r + 1] = tmp\n\n    def sortArray(self, nums: List[int]) -> List[int]:\n        self.merge_sort(nums, 0, len(nums) - 1)\n        return nums\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log n)$。由于归并排序每次都将当前待排序的序列折半成两个子序列递归调用，然后再合并两个有序的子序列，而每次合并两个有序的子序列需要 $O(n)$ 的时间复杂度，所以我们可以列出归并排序运行时间 $T(n)$ 的递归表达式：\n$$\nT(n)=2T(\\frac{n}{2})+O(n)\n$$\n​\t\t根据主定理我们可以得出归并排序的时间复杂度为 $O(n\\log n)$。\n\n- 空间复杂度：$O(n)$。我们需要额外 $O(n)$ 空间的 $\\textit{tmp}$ 数组，且归并排序递归调用的层数最深为 $\\log_2 n$，所以我们还需要额外的 $O(\\log n )$ 的栈空间，所需的空间复杂度即为 $O(n+\\log n) = O(n)$。"
}