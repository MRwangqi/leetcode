{
	"titleSlug": "matrix-diagonal-sum",
	"slug": "ju-zhen-dui-jiao-xian-yuan-su-de-he-by-leetcode-so",
	"url": "https://leetcode-cn.com/problems/matrix-diagonal-sum/solution/ju-zhen-dui-jiao-xian-yuan-su-de-he-by-leetcode-so/",
	"content": "#### 方法一：遍历矩阵\n\n**思路与算法**\n\n遍历整个矩阵，如果当前坐标 $(i, j)$ 满足 $i = j$ 或者 $i + j = n - 1$，就把当前的数字加入到答案中。\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    int diagonalSum(vector<vector<int>>& mat) {\n        int n = mat.size(), sum = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i == j || i + j == n - 1) {\n                    sum += mat[i][j];\n                }\n            }\n        }\n        return sum;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int diagonalSum(int[][] mat) {\n        int n = mat.length, sum = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i == j || i + j == n - 1) {\n                    sum += mat[i][j];\n                }\n            }\n        }\n        return sum;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar diagonalSum = function(mat) {\n    const n = mat.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            if (i == j || i + j == n - 1) {\n                sum += mat[i][j];\n            }\n        }\n    }\n    return sum;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        n = len(mat)\n        return sum(mat[i][j] for i in range(n) for j in range(n) \\\n                    if i == j or i + j == n - 1)\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n^2)$，其中 $n$ 是矩阵 $\\textit{mat}$ 的边长。\n+ 空间复杂度：$O(1)$。\n\n#### 方法二：逐行取数\n\n**思路与算法**\n\n逐行遍历，记当前的行号为 $i$，对于一行我们把 $(i, i)$ 位置和 $(i, n - i - 1)$ 加入答案。这样如果 $n$ 是奇数的话，最中间的格子会被加入两次。所以 $n$ 为奇数的时候，我们需要减掉矩阵最中心的那个值。\n\n**代码**\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    int diagonalSum(vector<vector<int>>& mat) {\n        int n = mat.size(), sum = 0, mid = n / 2;\n        for (int i = 0; i < n; ++i) {\n            sum += mat[i][i] + mat[i][n - 1 - i];\n        }\n        return sum - mat[mid][mid] * (n & 1);\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int diagonalSum(int[][] mat) {\n        int n = mat.length, sum = 0, mid = n / 2;\n        for (int i = 0; i < n; ++i) {\n            sum += mat[i][i] + mat[i][n - 1 - i];\n        }\n        return sum - mat[mid][mid] * (n & 1);\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar diagonalSum = function(mat) {\n    const n = mat.length, mid = Math.floor(n / 2);\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += mat[i][i] + mat[i][n - 1 - i];\n    }\n    return sum - mat[mid][mid] * (n & 1);\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        n = len(mat)\n        total = 0\n        mid = n // 2\n        for i in range(n):\n            total += mat[i][i] + mat[i][n - 1 - i]\n        return total - mat[mid][mid] * (n & 1)\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 是矩阵 $\\textit{mat}$ 的边长。\n+ 空间复杂度：$O(1)$。"
}