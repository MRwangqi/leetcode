{
	"titleSlug": "get-the-maximum-score",
	"slug": "zui-da-de-fen-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/get-the-maximum-score/solution/zui-da-de-fen-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n**思路与算法**\n\n如果我们将相同的元素「合并」起来，就可以得到一个形状规则的有向无环图。以题目的示例一为例：\n\n![fig1](https://assets.leetcode-cn.com/solution-static/1537/1537_fig1.png){:width=\"74%\"}\n\n将相同的元素合并后，就可以得到如下的有向无环图：\n\n![fig2](https://assets.leetcode-cn.com/solution-static/1537/1537_fig2.png){:width=\"70%\"}\n\n这样我们就可以使用动态规划解决本题了。我们用 $f[i]$ 和 $g[j]$ 分别表示遍历到数组 $\\textit{nums}_1[i]$ 和 $\\textit{nums}_2[j]$ 时的最大得分。如果遍历到的元素没有合并，那么它只会从相同数组的前一个元素转移而来：\n\n$$\n\\begin{aligned}\nf[i] &= f[i-1] + \\textit{nums}_1[i] \\\\\ng[j] &= g[j-1] + \\textit{nums}_2[j]\n\\end{aligned}\n$$\n\n如果遍历到的元素合并了，例如 $\\textit{nums}_1[i] = \\textit{nums}_2[j]$，那么它可以从任意一个数组中对应位置的前一个元素转移而来，我们选择其中的较大值：\n\n$$\nf[i] = g[j] = \\max{(f[i-1], g[j-1])} + \\textit{nums}_1[i]\n$$\n\n最终的答案即为 $f[m-1]$ 与 $g[n-1]$ 中的较大值，其中 $m$ 和 $n$ 分别是数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 的长度。\n\n**细节**\n\n状态转移方程看似很简单，**但我们应该根据什么顺序进行状态转移呢**？由于我们只能「在同一个数组中从左向右进行遍历」或者「在有相同元素的前提下跳到另一个数组进行遍历」，所以我们遍历的路径上的元素总是单调递增的。\n\n因此，我们可以按照数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 中所有元素从小到大的顺序进行状态转移。由于这两个数组本身已经是有序（单调递增）的，所以我们可以通过类似对两个数组进行「归并排序」的方法，即：\n\n- 使用两个指针 $i$ 和 $j$ 分别指向数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 的首元素；\n\n- 每次在进行状态转移前，比较 $\\textit{nums}_1[i]$ 的 $\\textit{nums}_2[i]$ 的大小关系。如果前者较小，那么对前者进行状态转移：\n\n    $$\n    f[i] = f[i-1] + \\textit{nums}_1[i]\n    $$\n  \n  如果后者较小，那么对后者进行状态转移：\n  \n  $$\n    g[j] = g[j-1] + \\textit{nums}_2[j]\n  $$\n  \n  如果两者相等，那么同时进行状态转移：\n\n  $$\n    f[i] = g[j] = \\max{(f[i-1], g[j-1])} + \\textit{nums}_1[i]\n  $$\n\n  对于进行了状态转移的指针，将其向后移动一个位置。\n\n这样一来，我们就可以顺利地完成动态规划并得到答案。注意到在进行状态转移时，$f[i]$ 和 $g[j]$ 只会从 $f[i-1]$ 和 $g[j-1]$ 转移而来，因此我们并不需要使用两个一维数组来存放动态规划的结果。我们可以仅使用两个变量 $\\textit{best}_1$ 和 $\\textit{best}_2$ 进行转移：\n\n$$\n\\begin{cases}\n\\textit{best}_1 = \\textit{best}_1 + \\textit{nums}_1[i] \\\\\n\\textit{best}_2 = \\textit{best}_2 + \\textit{nums}_2[j] \\\\\n\\textit{best}_1 = \\textit{best}_2 = \\max ( \\textit{best}_1, \\textit{best}_2 ) + \\textit{nums}_1[i]\n\\end{cases}\n$$\n\n它们的初始值均为 $0$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int mod = 1000000007;\n    \npublic:\n    int maxSum(vector<int>& nums1, vector<int>& nums2) {\n        int m = nums1.size();\n        int n = nums2.size();\n        long long best1 = 0, best2 = 0;\n        int i = 0, j = 0;\n        while (i < m || j < n) {\n            if (i < m && j < n) {\n                if (nums1[i] < nums2[j]) {\n                    best1 += nums1[i];\n                    ++i;\n                }\n                else if (nums1[i] > nums2[j]) {\n                    best2 += nums2[j];\n                    ++j;\n                }\n                else {\n                    long long best = max(best1, best2) + nums1[i];\n                    best1 = best2 = best;\n                    ++i;\n                    ++j;\n                }\n            }\n            else if (i < m) {\n                best1 += nums1[i];\n                ++i;\n            }\n            else if (j < n) {\n                best2 += nums2[j];\n                ++j;\n            }\n        }\n        return max(best1, best2) % mod;\n    }\n};  \n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxSum(int[] nums1, int[] nums2) {\n        final int MOD = 1000000007;\n        int m = nums1.length;\n        int n = nums2.length;\n        long best1 = 0, best2 = 0;\n        int i = 0, j = 0;\n        while (i < m || j < n) {\n            if (i < m && j < n) {\n                if (nums1[i] < nums2[j]) {\n                    best1 += nums1[i];\n                    ++i;\n                } else if (nums1[i] > nums2[j]) {\n                    best2 += nums2[j];\n                    ++j;\n                } else {\n                    long best = Math.max(best1, best2) + nums1[i];\n                    best1 = best2 = best;\n                    ++i;\n                    ++j;\n                }\n            } else if (i < m) {\n                best1 += nums1[i];\n                ++i;\n            } else if (j < n) {\n                best2 += nums2[j];\n                ++j;\n            }\n        }\n        return (int) (Math.max(best1, best2) % MOD);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxSum(self, nums1: List[int], nums2: List[int]) -> int:\n        mod = 10**9 + 7\n        m, n = len(nums1), len(nums2)\n        best1 = best2 = 0\n        i = j = 0\n        while i < m or j < n:\n            if i < m and j < n:\n                if nums1[i] < nums2[j]:\n                    best1 += nums1[i]\n                    i += 1\n                elif nums1[i] > nums2[j]:\n                    best2 += nums2[j]\n                    j += 1\n                else:\n                    best = max(best1, best2) + nums1[i]\n                    best1 = best2 = best\n                    i += 1\n                    j += 1\n            elif i < m:\n                best1 += nums1[i]\n                i += 1\n            elif j < n:\n                best2 += nums2[j]\n                j += 1\n        \n        return max(best1, best2) % mod\n```\n\n```C [sol1-C]\nconst int MOD = 1000000007;\n\nlong long max(long long a, long long b) {\n    return a > b ? a : b;\n}\n\nint maxSum(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    long long best1 = 0, best2 = 0;\n    int i = 0, j = 0;\n    while (i < nums1Size || j < nums2Size) {\n        if (i < nums1Size && j < nums2Size) {\n            if (nums1[i] < nums2[j]) {\n                best1 += nums1[i];\n                ++i;\n            } else if (nums1[i] > nums2[j]) {\n                best2 += nums2[j];\n                ++j;\n            } else {\n                long long best = fmax(best1, best2) + nums1[i];\n                best1 = best2 = best;\n                ++i;\n                ++j;\n            }\n        } else if (i < nums1Size) {\n            best1 += nums1[i];\n            ++i;\n        } else if (j < nums2Size) {\n            best2 += nums2[j];\n            ++j;\n        }\n    }\n    return max(best1, best2) % MOD;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m+n)$，其中 $m$ 和 $n$ 分别是数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 的长度。\n\n- 空间复杂度：$O(1)$。"
}