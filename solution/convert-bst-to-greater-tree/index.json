{
	"titleSlug": "convert-bst-to-greater-tree",
	"slug": "ba-er-cha-sou-suo-shu-zhuan-huan-wei-lei-jia-sh-14",
	"url": "https://leetcode-cn.com/problems/convert-bst-to-greater-tree/solution/ba-er-cha-sou-suo-shu-zhuan-huan-wei-lei-jia-sh-14/",
	"content": "#### 前言\n\n二叉搜索树是一棵空树，或者是具有下列性质的二叉树：\n\n1. 若它的左子树不空，则左子树上所有节点的值均小于它的根节点的值；\n   \n2. 若它的右子树不空，则右子树上所有节点的值均大于它的根节点的值；\n   \n3. 它的左、右子树也分别为二叉搜索树。\n\n由这样的性质我们可以发现，二叉搜索树的中序遍历是一个单调递增的有序序列。如果我们反序地中序遍历该二叉搜索树，即可得到一个单调递减的有序序列。\n\n#### 方法一：反序中序遍历\n\n**思路及算法**\n\n本题中要求我们将每个节点的值修改为原来的节点值加上所有大于它的节点值之和。这样我们只需要反序中序遍历该二叉搜索树，记录过程中的节点值之和，并不断更新当前遍历到的节点的节点值，即可得到题目要求的累加树。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int sum = 0;\n\n    TreeNode* convertBST(TreeNode* root) {\n        if (root != nullptr) {\n            convertBST(root->right);\n            sum += root->val;\n            root->val = sum;\n            convertBST(root->left);\n        }\n        return root;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int sum = 0;\n\n    public TreeNode convertBST(TreeNode root) {\n        if (root != null) {\n            convertBST(root.right);\n            sum += root.val;\n            root.val = sum;\n            convertBST(root.left);\n        }\n        return root;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def convertBST(self, root: TreeNode) -> TreeNode:\n        def dfs(root: TreeNode):\n            nonlocal total\n            if root:\n                dfs(root.right)\n                total += root.val\n                root.val = total\n                dfs(root.left)\n        \n        total = 0\n        dfs(root)\n        return root\n```\n\n```Golang [sol1-Golang]\nfunc convertBST(root *TreeNode) *TreeNode {\n    sum := 0\n    var dfs func(*TreeNode)\n    dfs = func(node *TreeNode) {\n        if node != nil {\n            dfs(node.Right)\n            sum += node.Val\n            node.Val = sum\n            dfs(node.Left)\n        }\n    }\n    dfs(root)\n    return root\n}\n```\n\n```C [sol1-C]\nint sum;\n\nstruct TreeNode* dfs(struct TreeNode* root) {\n    if (root != NULL) {\n        dfs(root->right);\n        sum += root->val;\n        root->val = sum;\n        dfs(root->left);\n    }\n    return root;\n}\n\nstruct TreeNode* convertBST(struct TreeNode* root) {\n    sum = 0;\n    dfs(root);\n    return root;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉搜索树的节点数。每一个节点恰好被遍历一次。\n  \n- 空间复杂度：$O(n)$，为递归过程中栈的开销，平均情况下为 $O(\\log n)$，最坏情况下树呈现链状，为 $O(n)$。\n\n#### 方法二：Morris 遍历\n\n**思路及算法**\n\n有一种巧妙的方法可以在线性时间内，只占用常数空间来实现中序遍历。这种方法由 J. H. Morris 在 1979 年的论文「Traversing Binary Trees Simply and Cheaply」中首次提出，因此被称为 Morris 遍历。\n\nMorris 遍历的核心思想是利用树的大量空闲指针，实现空间开销的极限缩减。其反序中序遍历规则总结如下：\n\n1. 如果当前节点的右子节点为空，处理当前节点，并遍历当前节点的左子节点；\n\n2. 如果当前节点的右子节点不为空，找到当前节点右子树的最左节点（该节点为当前节点中序遍历的前驱节点）；\n   \n   - 如果最左节点的左指针为空，将最左节点的左指针指向当前节点，遍历当前节点的右子节点；\n   \n   - 如果最左节点的左指针不为空，将最左节点的左指针重新置为空（恢复树的原状），处理当前节点，并将当前节点置为其左节点；\n\n3. 重复步骤 1 和步骤 2，直到遍历结束。\n\n这样我们利用 Morris 遍历的方法，反序中序遍历该二叉搜索树，即可实现线性时间与常数空间的遍历。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    TreeNode* getSuccessor(TreeNode* node) {\n        TreeNode* succ = node->right;\n        while (succ->left != nullptr && succ->left != node) {\n            succ = succ->left;\n        }\n        return succ;\n    }\n\n    TreeNode* convertBST(TreeNode* root) {\n        int sum = 0;\n        TreeNode* node = root;\n\n        while (node != nullptr) {\n            if (node->right == nullptr) {\n                sum += node->val;\n                node->val = sum;\n                node = node->left;\n            } else {\n                TreeNode* succ = getSuccessor(node);\n                if (succ->left == nullptr) {\n                    succ->left = node;\n                    node = node->right;\n                } else {\n                    succ->left = nullptr;\n                    sum += node->val;\n                    node->val = sum;\n                    node = node->left;\n                }\n            }\n        }\n\n        return root;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public TreeNode convertBST(TreeNode root) {\n        int sum = 0;\n        TreeNode node = root;\n\n        while (node != null) {\n            if (node.right == null) {\n                sum += node.val;\n                node.val = sum;\n                node = node.left;\n            } else {\n                TreeNode succ = getSuccessor(node);\n                if (succ.left == null) {\n                    succ.left = node;\n                    node = node.right;\n                } else {\n                    succ.left = null;\n                    sum += node.val;\n                    node.val = sum;\n                    node = node.left;\n                }\n            }\n        }\n\n        return root;\n    }\n\n    public TreeNode getSuccessor(TreeNode node) {\n        TreeNode succ = node.right;\n        while (succ.left != null && succ.left != node) {\n            succ = succ.left;\n        }\n        return succ;\n    }\n}\n\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def convertBST(self, root: TreeNode) -> TreeNode:\n        def getSuccessor(node: TreeNode) -> TreeNode:\n            succ = node.right\n            while succ.left and succ.left != node:\n                succ = succ.left\n            return succ\n        \n        total = 0\n        node = root\n\n        while node:\n            if not node.right:\n                total += node.val\n                node.val = total\n                node = node.left\n            else:\n                succ = getSuccessor(node)\n                if not succ.left:\n                    succ.left = node\n                    node = node.right\n                else:\n                    succ.left = None\n                    total += node.val\n                    node.val = total\n                    node = node.left\n\n        return roota\n```\n\n```Golang [sol2-Golang]\nfunc getSuccessor(node *TreeNode) *TreeNode {\n    succ := node.Right\n    for succ.Left != nil && succ.Left != node {\n        succ = succ.Left\n    }\n    return succ\n}\n\nfunc convertBST(root *TreeNode) *TreeNode {\n    sum := 0\n    node := root\n    for node != nil {\n        if node.Right == nil {\n            sum += node.Val\n            node.Val = sum\n            node = node.Left\n        } else {\n            succ := getSuccessor(node)\n            if succ.Left == nil {\n                succ.Left = node\n                node = node.Right\n            } else {\n                succ.Left = nil\n                sum += node.Val\n                node.Val = sum\n                node = node.Left\n            }\n        }\n    }\n    return root\n}\n```\n\n```C [sol2-C]\nstruct TreeNode* getSuccessor(struct TreeNode* node) {\n    struct TreeNode* succ = node->right;\n    while (succ->left != NULL && succ->left != node) {\n        succ = succ->left;\n    }\n    return succ;\n}\n\nstruct TreeNode* convertBST(struct TreeNode* root) {\n    int sum = 0;\n    struct TreeNode* node = root;\n\n    while (node != NULL) {\n        if (node->right == NULL) {\n            sum += node->val;\n            node->val = sum;\n            node = node->left;\n        } else {\n            struct TreeNode* succ = getSuccessor(node);\n            if (succ->left == NULL) {\n                succ->left = node;\n                node = node->right;\n            } else {\n                succ->left = NULL;\n                sum += node->val;\n                node->val = sum;\n                node = node->left;\n            }\n        }\n    }\n\n    return root;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉搜索树的节点数。没有左子树的节点只被访问一次，有左子树的节点被访问两次。\n  \n- 空间复杂度：$O(1)$。只操作已经存在的指针（树的空闲指针），因此只需要常数的额外空间。"
}