{
	"titleSlug": "count-unhappy-friends",
	"slug": "tong-ji-bu-kai-xin-de-peng-you-by-leetcode-solutio",
	"url": "https://leetcode-cn.com/problems/count-unhappy-friends/solution/tong-ji-bu-kai-xin-de-peng-you-by-leetcode-solutio/",
	"content": "#### 方法一：模拟\n\n这道题看似复杂，其实只要进行模拟，即可得到答案。\n\n共有 $n$ 位朋友，每位朋友都对应一个其余 $n-1$ 位朋友的亲近程度从高到低排列的朋友列表，列表中的下标越小的朋友亲近程度越高。\n\n题目已经给出了二维数组 $\\textit{preferences}$ 表示每位朋友对应的按亲近程度从高到低排列的朋友列表，但是并没有直接给出其余 $n-1$ 位朋友对应的亲近程度下标，因此需要进行预处理，存储每位朋友的其余 $n-1$ 位朋友对应的亲近程度下标。\n\n具体而言，创建 $n$ 行 $n$ 列的二维数组 $\\textit{order}$，其中 $\\textit{order}[i][j]$ 表示朋友 $j$ 在 $i$ 的朋友列表中的亲近程度下标。遍历 $\\textit{preferences}$ 即可填入 $\\textit{order}$ 中的全部元素的值。\n\n所有的朋友被分成 $\\frac{n}{2}$ 对，为了快速知道每位朋友的配对的朋友，对于配对情况也需要进行预处理。创建长度为 $n$ 的数组 $\\textit{match}$，如果 $x$ 和 $y$ 配对，则有 $\\textit{match}[x]=y$ 以及 $\\textit{match}[y]=x$。\n\n进行预处理之后，即可统计不开心的朋友的数目。\n\n遍历从 $0$ 到 $n-1$ 的每位朋友 $x$，进行如下操作。\n\n1. 找到与朋友 $x$ 配对的朋友 $y$。\n2. 找到朋友 $y$ 在朋友 $x$ 的朋友列表中的亲近程度下标，记为 $\\textit{index}$。\n3. 朋友 $x$ 的朋友列表中的下标从 $0$ 到 $\\textit{index}-1$ 的朋友都是可能的 $u$。遍历每个可能的 $u$，找到与朋友 $u$ 配对的朋友 $v$。\n4. 如果 $\\textit{order}[u][x] < \\textit{order}[u][v]$，则 $x$ 是不开心的朋友。\n\n需要注意的是，对于每个朋友 $x$，只要能找到一个满足条件的四元组 $(x,y,u,v)$，则 $x$ 就是不开心的朋友。\n\n```Java [sol1-Java]\nclass Solution {\n    public int unhappyFriends(int n, int[][] preferences, int[][] pairs) {\n        int[][] order = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - 1; j++) {\n                order[i][preferences[i][j]] = j;\n            }\n        }\n        int[] match = new int[n];\n        for (int[] pair : pairs) {\n            int person0 = pair[0], person1 = pair[1];\n            match[person0] = person1;\n            match[person1] = person0;\n        }\n        int unhappyCount = 0;\n        for (int x = 0; x < n; x++) {\n            int y = match[x];\n            int index = order[x][y];\n            for (int i = 0; i < index; i++) {\n                int u = preferences[x][i];\n                int v = match[u];\n                if (order[u][x] < order[u][v]) {\n                    unhappyCount++;\n                    break;\n                }\n            }\n        }\n        return unhappyCount;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int UnhappyFriends(int n, int[][] preferences, int[][] pairs) {\n        int[,] order = new int[n, n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - 1; j++) {\n                order[i, preferences[i][j]] = j;\n            }\n        }\n        int[] match = new int[n];\n        foreach (int[] pair in pairs) {\n            int person0 = pair[0], person1 = pair[1];\n            match[person0] = person1;\n            match[person1] = person0;\n        }\n        int unhappyCount = 0;\n        for (int x = 0; x < n; x++) {\n            int y = match[x];\n            int index = order[x, y];\n            for (int i = 0; i < index; i++) {\n                int u = preferences[x][i];\n                int v = match[u];\n                if (order[u, x] < order[u, v]) {\n                    unhappyCount++;\n                    break;\n                }\n            }\n        }\n        return unhappyCount;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int unhappyFriends(int n, vector<vector<int>>& preferences, vector<vector<int>>& pairs) {\n        vector<vector<int>> order(n, vector<int>(n));\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n - 1; ++j) {\n                order[i][preferences[i][j]] = j;\n            }\n        }\n        vector<int> match(n);\n        for (const auto& pr: pairs) {\n            match[pr[0]] = pr[1];\n            match[pr[1]] = pr[0];\n        }\n\n        int unhappyCount = 0;\n        for (int x = 0; x < n; ++x) {\n            int y = match[x];\n            int index = order[x][y];\n            for (int i = 0; i < index; ++i) {\n                int u = preferences[x][i];\n                int v = match[u];\n                if (order[u][x] < order[u][v]) {\n                    ++unhappyCount;\n                    break;\n                }\n            }\n        }\n        return unhappyCount;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def unhappyFriends(self, n: int, preferences: List[List[int]], pairs: List[List[int]]) -> int:\n        order = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n - 1):\n                order[i][preferences[i][j]] = j\n        \n        match = [0] * n\n        for x, y in pairs:\n            match[x] = y\n            match[y] = x\n\n        unhappyCount = 0\n        for x in range(n):\n            y = match[x]\n            index = order[x][y]\n            for i in range(index):\n                u = preferences[x][i]\n                v = match[u]\n                if order[u][x] < order[u][v]:\n                    unhappyCount += 1\n                    break\n        \n        return unhappyCount\n```\n\n```JavaScript [sol1-JavaScript]\nvar unhappyFriends = function(n, preferences, pairs) {\n    const order = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n - 1; j++) {\n            order[i][preferences[i][j]] = j;\n        }\n    }\n    const match = new Array(n).fill(0);\n    for (const pair of pairs) {\n        let person0 = pair[0], person1 = pair[1];\n        match[person0] = person1;\n        match[person1] = person0;\n    }\n    let unhappyCount = 0;\n    for (let x = 0; x < n; x++) {\n        const y = match[x];\n        const index = order[x][y];\n        for (let i = 0; i < index; i++) {\n            const u = preferences[x][i];\n            const v = match[u];\n            if (order[u][x] < order[u][v]) {\n                unhappyCount++;\n                break;\n            }\n        }\n    }\n    return unhappyCount;\n};\n```\n\n```C [sol1-C]\nint unhappyFriends(int n, int** preferences, int preferencesSize, int* preferencesColSize, int** pairs, int pairsSize, int* pairsColSize) {\n    int order[n][n];\n    memset(order, 0, sizeof(order));\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n - 1; ++j) {\n            order[i][preferences[i][j]] = j;\n        }\n    }\n    int match[n];\n    memset(match, 0, sizeof(match));\n    for (int i = 0; i < pairsSize; ++i) {\n        int* pr = pairs[i];\n        match[pr[0]] = pr[1];\n        match[pr[1]] = pr[0];\n    }\n\n    int unhappyCount = 0;\n    for (int x = 0; x < n; ++x) {\n        int y = match[x];\n        int index = order[x][y];\n        for (int i = 0; i < index; ++i) {\n            int u = preferences[x][i];\n            int v = match[u];\n            if (order[u][x] < order[u][v]) {\n                ++unhappyCount;\n                break;\n            }\n        }\n    }\n    return unhappyCount;\n}\n```\n\n```go [sol1-Golang]\nfunc unhappyFriends(n int, preferences [][]int, pairs [][]int) (ans int) {\n    order := make([][]int, n)\n    for i, preference := range preferences {\n        order[i] = make([]int, n)\n        for j, p := range preference {\n            order[i][p] = j\n        }\n    }\n    match := make([]int, n)\n    for _, p := range pairs {\n        match[p[0]] = p[1]\n        match[p[1]] = p[0]\n    }\n\n    for x, y := range match {\n        index := order[x][y]\n        for _, u := range preferences[x][:index] {\n            v := match[u]\n            if order[u][x] < order[u][v] {\n                ans++\n                break\n            }\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$。\n  预处理需要填入二维数组 $\\textit{order}$ 和数组 $\\textit{match}$ 中的值，时间复杂度分别是 $O(n^2)$ 和 $O(n)$。\n  统计不开心的朋友的数目时，需要遍历每个 $x$，找到满足要求的四元组 $(x,y,u,v)$，其中遍历 $u$ 的时间复杂度是 $O(n)$，在已知 $x$ 和 $u$ 的情况下，可以在 $O(1)$ 时间内得到 $y$ 和 $v$，因此时间复杂度是 $O(n^2)$。\n  故总时间复杂度是 $O(n^2)$。\n\n- 空间复杂度：$O(n^2)$。空间复杂度取决于预处理时创建的二维数组 $\\textit{order}$ 和数组 $\\textit{match}$，其大小分别为 $n \\times n$ 和 $n$，因此空间复杂度是 $O(n^2)$。"
}