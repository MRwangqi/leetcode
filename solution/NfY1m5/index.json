{
	"titleSlug": "NfY1m5",
	"slug": "python-slopetrickkuang-jia-by-981377660l-c70y",
	"url": "https://leetcode-cn.com/problems/NfY1m5/solution/python-slopetrickkuang-jia-by-981377660l-c70y/",
	"content": "### 解题思路\n**SlopeTrick** 是用来优化 **代价为绝对值函数的dp** 的一种方法，参考\nhttps://maspypy.com/slope-trick-1-%e8%a7%a3%e8%aa%ac%e7%b7%a8\nhttps://codeforces.com/blog/entry/77298\nhttps://codeforces.com/blog/entry/47821\n### 代码\n\n```python3\nclass Solution:\n    def buildBridge(self, _num: int, wood: List[List[int]]) -> int:\n        S = SlopeTrick()\n        length = [b - a for a, b in wood]\n        for i, (left, _) in enumerate(wood):\n            S.addLeftOffset(-length[i])\n            if i > 0:\n                S.addRightOffset(length[i - 1]) \n            S.addAbsXMinusA(left)\n        return S.getMinY()\n\n\n\nINF = int(1e18)\n\nclass SlopeTrick:\n    \"\"\"\n    https://maspypy.com/slope-trick-1-%e8%a7%a3%e8%aa%ac%e7%b7%a8\n\n    上记の记事にもとづき、@caomeinaixiさんが実装したテンプレートです。\n    \"\"\"\n\n    __slots__ = \"_minY\", \"_leftTuring\", \"_rightTuring\", \"_leftOffset\", \"_rightOffset\"\n\n    def __init__(\n        self, leftTuring: Optional[List[int]] = None, rightTuring: Optional[List[int]] = None\n    ) -> None:\n        self._minY = 0  # dp 最小値\n        self._leftTuring = [INF] if leftTuring is None else leftTuring  # 左拐点\n        self._rightTuring = [INF] if rightTuring is None else rightTuring  # 右拐点\n        self._leftOffset = 0  # 左拐点的平移量\n        self._rightOffset = 0  # 右拐点的平移量\n\n    def addAbsXMinusA(self, a: int) -> None:\n        \"\"\"|x-a|の加算:O(logn) 时间\"\"\"\n        self.addXMinusA(a)\n        self.addAMinusX(a)\n\n    def addXMinusA(self, a: int) -> None:\n        \"\"\"(x-a)+の加算:O(logn) 时间\n\n        倾きの変化点に a が追加されます\n        minYの変化はf(left0)に等しい\n        \"\"\"\n        if len(self._leftTuring) != 0:\n            self._minY += max(0, self.leftTop - a)\n        self._pushLeft(a)\n        self._pushRight(self._popLeft())\n\n    def addAMinusX(self, a: int) -> None:\n        \"\"\"(a-x)+の加算:O(logn) 时间\n\n        倾きの変化点に a が追加されます\n        minYの変化はf(right0)に等しい\n        \"\"\"\n        if len(self._rightTuring) != 0:\n            self._minY += max(0, a - self.rightTop)\n        self._pushRight(a)\n        self._pushLeft(self._popRight())\n\n    def addY(self, delta: int) -> None:\n        \"\"\"yの加算:O(1) 时间\"\"\"\n        self._minY += delta\n\n    def addOffset(self, delta: int) -> None:\n        \"\"\"平移:O(1) 时间\n\n        g(x) = f(x - a)\n        fをg に取り换える\n        \"\"\"\n        self._leftOffset += delta\n        self._rightOffset += delta\n\n    def addLeftOffset(self, delta: int) -> None:\n        \"\"\"左拐点の平移:O(1) 时间\"\"\"\n        self._leftOffset += delta\n\n    def addRightOffset(self, delta: int) -> None:\n        \"\"\"右拐点の平移:O(1) 时间\"\"\"\n        self._rightOffset += delta\n\n    def updateLeftMin(self) -> None:\n        \"\"\"累积 min:O(1) 时间\n\n        g(x) = min(f(y) | y <= x)\n        fをg に取り换える\n\n        rightTuringを空集合に取り换える\n        \"\"\"\n        self._rightTuring = [INF]\n\n    def updateRightMin(self) -> None:\n        \"\"\"累积 min:O(1) 时间\n\n        g(x) = min(f(y) | y >= x)\n        fをg に取り替える\n\n        leftTuringを空集合に取り换える\n        \"\"\"\n        self._leftTuring = [INF]\n\n    def updateWindowMin(self, leftDiff: int, rightDiff: int) -> None:\n        \"\"\"累积 min:O(1) 时间\n\n        g(x) = min(f(y) | `x - leftDiff <= y <= x - rightDiff`)\n        fをg に取り替える\n\n        左侧集合・右侧集合それぞれを平行移动する\n        left0, right0 => left0 + rightDiff, right0 + leftDiff\n        \"\"\"\n        self._leftOffset += rightDiff\n        self._rightOffset += leftDiff\n\n    def getMinY(self) -> int:\n        \"\"\"最小値の取得:O(1) 时间\"\"\"\n        return self._minY\n\n    def _pushLeft(self, a: int) -> None:\n        heappush(self._leftTuring, -a + self._leftOffset)\n\n    def _pushRight(self, a: int) -> None:\n        heappush(self._rightTuring, a - self._rightOffset)\n\n    def _popLeft(self) -> int:\n        return -heappop(self._leftTuring) + self._leftOffset\n\n    def _popRight(self) -> int:\n        return heappop(self._rightTuring) + self._rightOffset\n\n    @property\n    def leftTop(self) -> int:\n        \"\"\"左侧の倾きの変化点の最大値left0の取得:O(1)时间\"\"\"\n        return -self._leftTuring[0] + self._leftOffset\n\n    @property\n    def rightTop(self) -> int:\n        \"\"\"右侧の倾きの変化点の最小値right0の取得:O(1)时间\"\"\"\n        return self._rightTuring[0] + self._rightOffset\n\n```"
}