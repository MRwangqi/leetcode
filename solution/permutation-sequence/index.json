{
	"titleSlug": "permutation-sequence",
	"slug": "di-kge-pai-lie-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/permutation-sequence/solution/di-kge-pai-lie-by-leetcode-solution/",
	"content": "#### 方法一：数学 + 缩小问题规模\n\n**思路**\n\n要想解决本题，首先需要了解一个简单的结论：\n\n> 对于 $n$ 个不同的元素（例如数 $1, 2, \\cdots, n$），它们可以组成的排列总数目为 $n!$。\n\n对于给定的 $n$ 和 $k$，我们不妨从左往右确定第 $k$ 个排列中的每一个位置上的元素到底是什么。\n\n我们首先确定排列中的首个元素 $a_1$。根据上述的结论，我们可以知道：\n\n- 以 $1$ 为 $a_1$ 的排列一共有 $(n-1)!$ 个；\n- 以 $2$ 为 $a_1$ 的排列一共有 $(n-1)!$ 个；\n- $\\cdots$\n- 以 $n$ 为 $a_1$ 的排列一共有 $(n-1)!$ 个。\n\n由于我们需要求出从小到大的第 $k$ 个排列，因此：\n\n- 如果 $k \\leq (n-1)!$，我们就可以确定排列的首个元素为 $1$；\n- 如果 $(n-1)! < k \\leq 2 \\cdot (n-1)!$，我们就可以确定排列的首个元素为 $2$；\n- $\\cdots$\n- 如果 $(n-1) \\cdot (n-1)! < k \\leq n \\cdot (n-1)!$，我们就可以确定排列的首个元素为 $n$。\n\n因此，第 $k$ 个排列的首个元素就是：\n\n$$\na_1 = \\lfloor \\frac{k-1}{(n-1)!} \\rfloor + 1\n$$\n\n其中 $\\lfloor x \\rfloor$ 表示将 $x$ 向下取整。\n\n当我们确定了 $a_1$ 后，如何使用相似的思路，确定下一个元素 $a_2$ 呢？实际上，我们考虑以 $a_1$ 为首个元素的所有排列：\n\n- 以 $[1,n] \\backslash a_1$ 最小的元素为 $a_2$ 的排列一共有 $(n-2)!$ 个；\n- 以 $[1,n] \\backslash a_1$ 次小的元素为 $a_2$ 的排列一共有 $(n-2)!$ 个；\n- $\\cdots$\n- 以 $[1,n] \\backslash a_1$ 最大的元素为 $a_2$ 的排列一共有 $(n-2)!$ 个；\n\n其中 $[1,n] \\backslash a_1$ 表示包含 $1, 2, \\cdots n$ 中除去 $a_1$ 以外元素的集合。这些排列从编号 $(a_1-1) \\cdot (n-1)!$ 开始，到 $a_1 \\cdot (n-1)!$ 结束，总计 $(n-1)!$ 个，因此第 $k$ 个排列实际上就对应着这其中的第\n\n$$\nk' = (k-1) \\bmod (n-1)! + 1\n$$\n\n个排列。这样一来，我们就把原问题转化成了一个完全相同但规模减少 $1$ 的子问题：\n\n> 求 $[1, n] \\backslash a_1$ 这 $n-1$ 个元素组成的排列中，第 $k'$ 小的排列。\n\n**算法**\n\n设第 $k$ 个排列为 $a_1, a_2, \\cdots, a_n$，我们从左往右地确定每一个元素 $a_i$。我们用数组 $\\textit{valid}$ 记录每一个元素是否被使用过。\n\n我们从小到大枚举 $i$：\n\n- 我们已经使用过了 $i-1$ 个元素，剩余 $n-i+1$ 个元素未使用过，每一个元素作为 $a_i$ 都对应着 $(n-i)!$ 个排列，总计 $(n-i+1)!$ 个排列；\n\n- 因此在第 $k$ 个排列中，$a_i$ 即为剩余未使用过的元素中第 $\\lfloor \\frac{k-1}{(n-i)!} \\rfloor + 1$ 小的元素；\n\n- 在确定了 $a_i$ 后，这 $n-i+1$ 个元素的第 $k$ 个排列，就等于 $a_i$ 之后跟着剩余 $n-i$ 个元素的第 $(k-1) \\bmod (n-i)! + 1$ 个排列。\n\n在实际的代码中，我们可以首先将 $k$ 的值减少 $1$，这样可以减少运算，降低代码出错的概率。对应上述的后两步，即为：\n\n- 因此在第 $k$ 个排列中，$a_i$ 即为剩余未使用过的元素中第 $\\lfloor \\frac{k}{(n-i)!} \\rfloor + 1$ 小的元素；\n\n- 在确定了 $a_i$ 后，这 $n-i+1$ 个元素的第 $k$ 个排列，就等于 $a_i$ 之后跟着剩余 $n-i$ 个元素的第 $k \\bmod (n-i)!$ 个排列。\n\n实际上，这相当于我们将所有的排列从 $0$ 开始进行编号。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string getPermutation(int n, int k) {\n        vector<int> factorial(n);\n        factorial[0] = 1;\n        for (int i = 1; i < n; ++i) {\n            factorial[i] = factorial[i - 1] * i;\n        }\n\n        --k;\n        string ans;\n        vector<int> valid(n + 1, 1);\n        for (int i = 1; i <= n; ++i) {\n            int order = k / factorial[n - i] + 1;\n            for (int j = 1; j <= n; ++j) {\n                order -= valid[j];\n                if (!order) {\n                    ans += (j + '0');\n                    valid[j] = 0;\n                    break;\n                }\n            }\n            k %= factorial[n - i];\n        }   \n        return ans;     \n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String getPermutation(int n, int k) {\n        int[] factorial = new int[n];\n        factorial[0] = 1;\n        for (int i = 1; i < n; ++i) {\n            factorial[i] = factorial[i - 1] * i;\n        }\n\n        --k;\n        StringBuffer ans = new StringBuffer();\n        int[] valid = new int[n + 1];\n        Arrays.fill(valid, 1);\n        for (int i = 1; i <= n; ++i) {\n            int order = k / factorial[n - i] + 1;\n            for (int j = 1; j <= n; ++j) {\n                order -= valid[j];\n                if (order == 0) {\n                    ans.append(j);\n                    valid[j] = 0;\n                    break;\n                }\n            }\n            k %= factorial[n - i];\n        }\n        return ans.toString();\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        factorial = [1]\n        for i in range(1, n):\n            factorial.append(factorial[-1] * i)\n        \n        k -= 1\n        ans = list()\n        valid = [1] * (n + 1)\n        for i in range(1, n + 1):\n            order = k // factorial[n - i] + 1\n            for j in range(1, n + 1):\n                order -= valid[j]\n                if order == 0:\n                    ans.append(str(j))\n                    valid[j] = 0\n                    break\n            k %= factorial[n - i]\n\n        return \"\".join(ans)\n```\n\n```golang [sol1-Golang]\nfunc getPermutation(n int, k int) string {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i := 1; i < n; i++ {\n        factorial[i] = factorial[i - 1] * i\n    }\n    k--\n\n    ans := \"\"\n    valid := make([]int, n + 1)\n    for i := 0; i < len(valid); i++ {\n        valid[i] = 1\n    }\n    for i := 1; i <= n; i++ {\n        order := k / factorial[n - i] + 1\n        for j := 1; j <= n; j++ {\n            order -= valid[j]\n            if order == 0 {\n                ans += strconv.Itoa(j)\n                valid[j] = 0\n                break\n            }\n        }\n        k %= factorial[n - i]\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nchar* getPermutation(int n, int k) {\n    int factorial[n];\n    factorial[0] = 1;\n    for (int i = 1; i < n; ++i) {\n        factorial[i] = factorial[i - 1] * i;\n    }\n\n    --k;\n    char* ans = malloc(n + 1);\n    ans[n] = '\\0';\n    int valid[n + 1];\n    for (int i = 0; i <= n; ++i) {\n        valid[i] = 1;\n    }\n    for (int i = 1; i <= n; ++i) {\n        int order = k / factorial[n - i] + 1;\n        for (int j = 1; j <= n; ++j) {\n            order -= valid[j];\n            if (!order) {\n                ans[i - 1] = j + '0';\n                valid[j] = 0;\n                break;\n            }\n        }\n        k %= factorial[n - i];\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$。\n\n- 空间复杂度：$O(n)$。\n\n**思考题**\n\n对于给定的排列 $a_1, a_2, \\cdots, a_n$，你能求出 $k$ 吗？\n\n解答：\n\n$$\nk = \\left( \\sum_{i=1}^n \\textit{order}(a_i) \\cdot (n-i)! \\right) + 1\n$$\n\n其中 $\\textit{order}(a_i)$ 表示 $a_{i+1}, \\cdots, a_n$ 中小于 $a_i$ 的元素个数。"
}