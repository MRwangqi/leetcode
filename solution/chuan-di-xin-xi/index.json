{
	"titleSlug": "chuan-di-xin-xi",
	"slug": "chuan-di-xin-xi-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/chuan-di-xin-xi/solution/chuan-di-xin-xi-by-leetcode-solution/",
	"content": "#### 方法一：深度优先搜索\n\n可以把传信息的关系看成有向图，每个玩家对应一个节点，每个传信息的关系对应一条有向边。如果 $x$ 可以向 $y$ 传信息，则对应从节点 $x$ 到节点 $y$ 的一条**有向**边。寻找从编号 $0$ 的玩家经过 $k$ 轮传递到编号 $n-1$ 的玩家处的方案数，等价于在有向图中寻找从节点 $0$ 到节点 $n-1$ 的长度为 $k$ 的路径数，同一条路径可以重复经过同一个节点。\n\n可以使用深度优先搜索计算方案数。从节点 $0$ 出发做深度优先搜索，每一步记录当前所在的节点以及经过的轮数，当经过 $k$ 轮时，如果位于节点 $n-1$，则将方案数加 $1$。搜索结束之后，即可得到总的方案数。\n\n具体实现方面，可以对传信息的关系进行预处理，使用列表存储有向边的关系，即可在 $O(1)$ 的时间内得到特定节点的相邻节点（即可以沿着有向边一步到达的节点）。\n\n```Java [sol1-Java]\nclass Solution {\n    int ways, n, k;\n    List<List<Integer>> edges;\n\n    public int numWays(int n, int[][] relation, int k) {\n        ways = 0;\n        this.n = n;\n        this.k = k;\n        edges = new ArrayList<List<Integer>>();\n        for (int i = 0; i < n; i++) {\n            edges.add(new ArrayList<Integer>());\n        }\n        for (int[] edge : relation) {\n            int src = edge[0], dst = edge[1];\n            edges.get(src).add(dst);\n        }\n        dfs(0, 0);\n        return ways;\n    }\n\n    public void dfs(int index, int steps) {\n        if (steps == k) {\n            if (index == n - 1) {\n                ways++;\n            }\n            return;\n        }\n        List<Integer> list = edges.get(index);\n        for (int nextIndex : list) {\n            dfs(nextIndex, steps + 1);\n        }\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    int ways, n, k;\n    IList<IList<int>> edges;\n\n    public int NumWays(int n, int[][] relation, int k) {\n        ways = 0;\n        this.n = n;\n        this.k = k;\n        edges = new List<IList<int>>();\n        for (int i = 0; i < n; i++) {\n            edges.Add(new List<int>());\n        }\n        foreach (int[] edge in relation) {\n            int src = edge[0], dst = edge[1];\n            edges[src].Add(dst);\n        }\n        DFS(0, 0);\n        return ways;\n    }\n\n    public void DFS(int index, int steps) {\n        if (steps == k) {\n            if (index == n - 1) {\n                ways++;\n            }\n            return;\n        }\n        IList<int> list = edges[index];\n        foreach (int nextIndex in list) {\n            DFS(nextIndex, steps + 1);\n        }\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numWays(int n, vector<vector<int>> &relation, int k) {\n        vector<vector<int>> edges(n);\n        for (auto &edge : relation) {\n            int src = edge[0], dst = edge[1];\n            edges[src].push_back(dst);\n        }\n\n        int ways = 0;\n        function<void(int, int)> dfs = [&](int index, int steps) {\n            if (steps == k) {\n                if (index == n - 1) {\n                    ++ways;\n                }\n                return;\n            }\n            for (int to : edges[index]) {\n                dfs(to, steps + 1);\n            }\n        };\n        dfs(0, 0);\n        return ways;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar numWays = function(n, relation, k) {\n    let ways = 0;\n    const edges = new Array(n).fill(0).map(() => new Array());\n\n    for (const [src, dst] of relation) {\n        edges[src].push(dst);\n    }\n\n    const dfs = (index, steps) => {\n        if (steps === k) {\n            if (index === n - 1) {\n                ways++;\n            }\n            return;\n        }\n        const list = edges[index];\n        for (const nextIndex of list) {\n            dfs(nextIndex, steps + 1);\n        }\n    }\n    \n    dfs(0, 0);\n    return ways;\n}\n```\n\n```go [sol1-Golang]\nfunc numWays(n int, relation [][]int, k int) (ans int) {\n    edges := make([][]int, n)\n    for _, r := range relation {\n        src, dst := r[0], r[1]\n        edges[src] = append(edges[src], dst)\n    }\n    var dfs func(int, int)\n    dfs = func(x, step int) {\n        if step == k {\n            if x == n-1 {\n                ans++\n            }\n            return\n        }\n        for _, y := range edges[x] {\n            dfs(y, step+1)\n        }\n    }\n    dfs(0, 0)\n    return\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numWays(self, n: int, relation: List[int], k: int) -> int:\n        self.ways, self.n, self.k = 0, n, k\n        self.edges = collections.defaultdict(list)\n        for src, dst in relation:\n            self.edges[src].append(dst)\n\n        self.dfs(0,0)\n        return self.ways \n\n    def dfs(self, index, steps):\n        if steps == self.k:\n            if index == self.n-1:\n                self.ways += 1\n            return\n        for to in self.edges[index]:\n            self.dfs(to, steps+1)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^k)$。最多需要遍历 $k$ 层，每层遍历最多有 $O(n)$ 个分支。\n\n- 空间复杂度：$O(n+m+k)$。其中 $m$ 为 $\\textit{relation}$ 数组的长度。空间复杂度主要取决于图的大小和递归调用栈的深度，保存有向图信息所需空间为 $O(n+m)$，递归调用栈的深度不会超过 $k$。\n\n#### 方法二：广度优先搜索\n\n也可以使用广度优先搜索计算方案数。从节点 $0$ 出发做广度优先搜索，当遍历到 $k$ 层时，如果位于节点 $n-1$，则将方案数加 $1$。搜索结束之后，即可得到总的方案数。\n\n```Java [sol2-Java]\nclass Solution {\n    public int numWays(int n, int[][] relation, int k) {\n        List<List<Integer>> edges = new ArrayList<List<Integer>>();\n        for (int i = 0; i < n; i++) {\n            edges.add(new ArrayList<Integer>());\n        }\n        for (int[] edge : relation) {\n            int src = edge[0], dst = edge[1];\n            edges.get(src).add(dst);\n        }\n\n        int steps = 0;\n        Queue<Integer> queue = new LinkedList<Integer>();\n        queue.offer(0);\n        while (!queue.isEmpty() && steps < k) {\n            steps++;\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                int index = queue.poll();\n                List<Integer> list = edges.get(index);\n                for (int nextIndex : list) {\n                    queue.offer(nextIndex);\n                }\n            }\n        }\n\n        int ways = 0;\n        if (steps == k) {\n            while (!queue.isEmpty()) {\n                if (queue.poll() == n - 1) {\n                    ways++;\n                }\n            }\n        }\n        return ways;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int NumWays(int n, int[][] relation, int k) {\n        IList<IList<int>> edges = new List<IList<int>>();\n        for (int i = 0; i < n; i++) {\n            edges.Add(new List<int>());\n        }\n        foreach (int[] edge in relation) {\n            int src = edge[0], dst = edge[1];\n            edges[src].Add(dst);\n        }\n\n        int steps = 0;\n        Queue<int> queue = new Queue<int>();\n        queue.Enqueue(0);\n        while (queue.Count > 0 && steps < k) {\n            steps++;\n            int size = queue.Count;\n            for (int i = 0; i < size; i++) {\n                int index = queue.Dequeue();\n                IList<int> list = edges[index];\n                foreach (int nextIndex in list) {\n                    queue.Enqueue(nextIndex);\n                }\n            }\n        }\n\n        int ways = 0;\n        if (steps == k) {\n            while (queue.Count > 0) {\n                if (queue.Dequeue() == n - 1) {\n                    ways++;\n                }\n            }\n        }\n        return ways;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int numWays(int n, vector<vector<int>> &relation, int k) {\n        vector<vector<int>> edges(n);\n        for (auto &edge : relation) {\n            int src = edge[0], dst = edge[1];\n            edges[src].push_back(dst);\n        }\n\n        int steps = 0;\n        queue<int> que;\n        que.push(0);\n        while (!que.empty() && steps < k) {\n            steps++;\n            int size = que.size();\n            for (int i = 0; i < size; i++) {\n                int index = que.front();\n                que.pop();\n                for (auto &nextIndex : edges[index]) {\n                    que.push(nextIndex);\n                }\n            }\n        }\n\n        int ways = 0;\n        if (steps == k) {\n            while (!que.empty()) {\n                if (que.front() == n - 1) {\n                    ways++;\n                }\n                que.pop();\n            }\n        }\n        return ways;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar numWays = function(n, relation, k) {\n    const edges = new Array(n).fill(0).map(() => new Array());\n    for (const[src, dst] of relation) {\n        edges[src].push(dst);\n    }\n\n    let steps = 0;\n    const queue = [0];\n    while (queue.length && steps < k) {\n        steps++;\n        const size = queue.length;\n        for (let i = 0; i < size; i++) {\n            const index = queue.shift();\n            const list = edges[index];\n            for (const nextIndex of list) {\n                queue.push(nextIndex);\n            }\n        }\n    }\n\n    let ways = 0;\n    if (steps === k) {\n        while (queue.length) {\n            if (queue.shift() === n - 1) {\n                ways++;\n            }\n        }\n    }\n    return ways;\n};\n```\n\n```go [sol2-Golang]\nfunc numWays(n int, relation [][]int, k int) (ans int) {\n    edges := make([][]int, n)\n    for _, r := range relation {\n        src, dst := r[0], r[1]\n        edges[src] = append(edges[src], dst)\n    }\n\n    step := 0\n    q := []int{0}\n    for ; len(q) > 0 && step < k; step++ {\n        tmp := q\n        q = nil\n        for _, x := range tmp {\n            for _, y := range edges[x] {\n                q = append(q, y)\n            }\n        }\n    }\n\n    if step == k {\n        for _, x := range q {\n            if x == n-1 {\n                ans++\n            }\n        }\n    }\n    return\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def numWays(self, n: int, relation: List[int], k: int) -> int:\n        edges = collections.defaultdict(list)\n        for edge in relation:\n            src = edge[0] \n            dst = edge[1]\n            edges[src].append(dst)\n        steps = 0\n        queue = collections.deque([0])\n        while queue and steps < k:\n            steps += 1\n            size = len(queue)\n            for i in range(size):\n                index = queue.popleft()\n                to = edges[index]\n                for nextIndex in to:\n                    queue.append(nextIndex)\n        ways = 0\n        if steps == k:\n            while queue:\n                if queue.popleft() == n - 1:\n                    ways += 1    \n        return ways \n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^k)$。最多需要遍历 $k$ 层，每层遍历最多有 $O(n)$ 个分支。\n\n- 空间复杂度：$O(n+m+n^k)$。其中 $m$ 为 $\\textit{relation}$ 数组的长度。空间复杂度主要取决于图的大小和队列的大小，保存有向图信息所需空间为 $O(n+m)$，由于每层遍历最多有 $O(n)$ 个分支，因此遍历到 $k$ 层时，队列的大小为 $O(n^k)$。\n\n#### 方法三：动态规划\n\n前两种方法都是通过在图中搜索计算方案数。可以换一个思路，这道题是计数问题，可以使用动态规划的方法解决。\n\n定义动态规划的状态 $\\textit{dp}[i][j]$ 为经过 $i$ 轮传递到编号 $j$ 的玩家的方案数，其中 $0 \\le i \\le k$，$0 \\le j < n$。\n\n由于从编号 $0$ 的玩家开始传递，当 $i=0$ 时，一定位于编号 $0$ 的玩家，不会传递到其他玩家，因此动态规划的边界情况如下：\n\n$$\n\\textit{dp}[0][j]=\n\\begin{cases}\n1, & j=0 \\\\\n0, & j \\ne 0\n\\end{cases}\n$$\n\n对于传信息的关系 $[\\textit{src},\\textit{dst}]$，如果第 $i$ 轮传递到编号 $\\textit{src}$ 的玩家，则第 $i+1$ 轮可以从编号 $\\textit{src}$ 的玩家传递到编号 $\\textit{dst}$ 的玩家。因此在计算 $\\textit{dp}[i+1][\\textit{dst}]$ 时，需要考虑可以传递到编号 $\\textit{dst}$ 的所有玩家。由此可以得到动态规划的状态转移方程，其中 $0 \\le i < k$：\n\n$$\n\\textit{dp}[i+1][\\textit{dst}]=\\sum_{[\\textit{src},\\textit{dst}] \\in \\textit{relation}} \\textit{dp}[i][\\textit{src}]\n$$\n\n最终得到 $\\textit{dp}[k][n-1]$ 即为总的方案数。\n\n```Java [sol31-Java]\nclass Solution {\n    public int numWays(int n, int[][] relation, int k) {\n        int[][] dp = new int[k + 1][n];\n        dp[0][0] = 1;\n        for (int i = 0; i < k; i++) {\n            for (int[] edge : relation) {\n                int src = edge[0], dst = edge[1];\n                dp[i + 1][dst] += dp[i][src];\n            }\n        }\n        return dp[k][n - 1];\n    }\n}\n```\n\n```C# [sol31-C#]\npublic class Solution {\n    public int NumWays(int n, int[][] relation, int k) {\n        int[,] dp = new int[k + 1, n];\n        dp[0, 0] = 1;\n        for (int i = 0; i < k; i++) {\n            foreach (int[] edge in relation) {\n                int src = edge[0], dst = edge[1];\n                dp[i + 1, dst] += dp[i, src];\n            }\n        }\n        return dp[k, n - 1];\n    }\n}\n```\n\n```C++ [sol31-C++]\nclass Solution {\npublic:\n    int numWays(int n, vector<vector<int>>& relation, int k) {\n        vector<vector<int>> dp(k + 1, vector<int>(n));\n        dp[0][0] = 1;\n        for (int i = 0; i < k; i++) {\n            for (auto& edge : relation) {\n                int src = edge[0], dst = edge[1];\n                dp[i + 1][dst] += dp[i][src];\n            }\n        }\n        return dp[k][n - 1];\n    }\n};\n```\n\n```C [sol31-C]\nint numWays(int n, int** relation, int relationSize, int* relationColSize, int k) {\n    int dp[k + 1][n];\n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 1;\n    for (int i = 0; i < k; i++) {\n        for (int j = 0; j < relationSize; j++) {\n            int src = relation[j][0], dst = relation[j][1];\n            dp[i + 1][dst] += dp[i][src];\n        }\n    }\n    return dp[k][n - 1];\n}\n```\n\n```JavaScript [sol31-JavaScript]\nvar numWays = function(n, relation, k) {\n    const dp = new Array(k + 1).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = 1;\n    for (let i = 0; i < k; i++) {\n        for (const [src, dst] of relation) {\n            dp[i + 1][dst] += dp[i][src];\n        }\n    }\n    return dp[k][n - 1];\n};\n```\n\n```go [sol31-Golang]\nfunc numWays(n int, relation [][]int, k int) int {\n    dp := make([][]int, k+1)\n    for i := range dp {\n        dp[i] = make([]int, n)\n    }\n    dp[0][0] = 1\n    for i := 0; i < k; i++ {\n        for _, r := range relation {\n            src, dst := r[0], r[1]\n            dp[i+1][dst] += dp[i][src]\n        }\n    }\n    return dp[k][n-1]\n}\n```\n\n```Python [sol31-Python3]\nclass Solution:\n    def numWays(self, n: int, relation: List[List[int]], k: int) -> int:\n        dp = [[0] * (n + 1) for _ in range(k + 1)]\n        dp[0][0] = 1\n        for i in range(k):\n            for edge in relation:\n                src = edge[0]\n                dst = edge[1]\n                dp[i + 1][dst] += dp[i][src]\n        return dp[k][n - 1]\n```\n\n上述实现的空间复杂度是 $O(kn)$。由于当 $i>0$ 时，$\\textit{dp}[i][]$ 的值只和 $\\textit{dp}[i-1][]$ 的值有关，因此可以将二维数组变成一维数组，将空间复杂度优化到 $O(n)$。\n\n```Java [sol32-Java]\nclass Solution {\n    public int numWays(int n, int[][] relation, int k) {\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 0; i < k; i++) {\n            int[] next = new int[n];\n            for (int[] edge : relation) {\n                int src = edge[0], dst = edge[1];\n                next[dst] += dp[src];\n            }\n            dp = next;\n        }\n        return dp[n - 1];\n    }\n}\n```\n\n```C# [sol32-C#]\npublic class Solution {\n    public int NumWays(int n, int[][] relation, int k) {\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 0; i < k; i++) {\n            int[] next = new int[n];\n            foreach (int[] edge in relation) {\n                int src = edge[0], dst = edge[1];\n                next[dst] += dp[src];\n            }\n            dp = next;\n        }\n        return dp[n - 1];\n    }\n}\n```\n\n```C++ [sol32-C++]\nclass Solution {\npublic:\n    int numWays(int n, vector<vector<int>>& relation, int k) {\n        vector<int> dp(n);\n        dp[0] = 1;\n        for (int i = 0; i < k; i++) {\n            vector<int> next(n);\n            for (auto& edge : relation) {\n                int src = edge[0], dst = edge[1];\n                next[dst] += dp[src];\n            }\n            dp = next;\n        }\n        return dp[n - 1];\n    }\n};\n```\n\n```C [sol32-C]\nint numWays(int n, int** relation, int relationSize, int* relationColSize, int k) {\n    int dp[n];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 1;\n    for (int i = 0; i < k; i++) {\n        int next[n];\n        memset(next, 0, sizeof(next));\n        for (int j = 0; j < relationSize; j++) {\n            int src = relation[j][0], dst = relation[j][1];\n            next[dst] += dp[src];\n        }\n        memcpy(dp, next, sizeof(int) * n);\n    }\n    return dp[n - 1];\n}\n```\n\n```JavaScript [sol32-JavaScript]\nvar numWays = function(n, relation, k) {\n    let dp = new Array(n).fill(0);\n    dp[0] = 1;\n    for (let i = 0; i < k; i++) {\n        const next = new Array(n).fill(0);\n        for (const [src, dst] of relation) {\n            next[dst] += dp[src];\n        }\n        dp = next;\n    }\n    return dp[n - 1];\n};\n```\n\n```go [sol32-Golang]\nfunc numWays(n int, relation [][]int, k int) int {\n    dp := make([]int, n)\n    dp[0] = 1\n    for i := 0; i < k; i++ {\n        next := make([]int, n)\n        for _, r := range relation {\n            src, dst := r[0], r[1]\n            next[dst] += dp[src]\n        }\n        dp = next\n    }\n    return dp[n-1]\n}\n```\n\n```Python [sol32-Python3]\nclass Solution:\n    def numWays(self, n: int, relation: List[List[int]], k: int) -> int:\n        dp = [0 for _ in range(n + 1)]\n        dp[0] = 1\n        for i in range(k):\n            next = [0 for _ in range(n + 1)]\n            for edge in relation:\n                src = edge[0]\n                dst = edge[1]\n                next[dst] += dp[src]\n            dp = next\n        return dp[n - 1]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(km)$。其中 $m$ 为 $\\textit{relation}$ 数组的长度。\n\n- 空间复杂度：$O(n)$。"
}