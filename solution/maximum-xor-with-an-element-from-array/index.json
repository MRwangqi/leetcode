{
	"titleSlug": "maximum-xor-with-an-element-from-array",
	"slug": "yu-shu-zu-zhong-yuan-su-de-zui-da-yi-huo-7erc",
	"url": "https://leetcode-cn.com/problems/maximum-xor-with-an-element-from-array/solution/yu-shu-zu-zhong-yuan-su-de-zui-da-yi-huo-7erc/",
	"content": "#### 前言\n\n本文需要读者了解字典树的相关知识，建议读者尝试解决「[208. 实现 Trie (前缀树)](https://leetcode-cn.com/problems/implement-trie-prefix-tree/)」，在充分理解该题做法后继续阅读。\n\n#### 方法一：离线询问 + 字典树\n\n**思路**\n\n我们先来解决一个弱化版的问题：去掉询问中 $m_i$ 的限制，如何求 $x_i$ 与 $\\textit{nums}$ 数组任意元素的异或最大值？\n\n我们可以将 $\\textit{nums}$ 中的每个元素看作一个长为 $L$ 的二进制串，将其插入字典树中。\n\n例如 $\\textit{nums}=[3,10,5,25,2]$，取 $L=5$，对应的二进制串为 $[00011,01010,00101,11001,00010]$，将其插入字典树后得到的结果如下图。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/1707/1.png)\n\n为了最大化异或值，我们可以在字典树中进行一次与检索字符串类似的过程，从根节点出发，由于异或运算具有「相同得 $0$，不同得 $1$」的性质，为了尽可能多地取到 $1$，我们需要在每一步寻找与当前位相反的子节点，若该节点存在则将指针移动到该节点，否则只能移动到与当前位相同的子节点。（注意由于插入和查询的二进制串长度均为 $L$，非叶节点的两个子节点中，至少有一个是非空节点）\n\n以 $x_i=25=(11001)_2$ 为例，下图展示了求取最大异或值的过程。\n\n![fig2](https://assets.leetcode-cn.com/solution-static/1707/2.png)\n\n回到原问题，由于全部询问已经给出，我们不一定要按顺序回答询问，而是按照 $m_i$ 从小到大的顺序回答。\n\n首先将数组 $\\textit{nums}$ 从小到大排序，将询问按照 $m_i$ 的大小从小到大排序。\n\n在回答每个询问前，将所有不超过 $m_i$ 的 $\\textit{nums}$ 元素插入字典序中，由于 $\\textit{nums}$ 已经排好序，我们可以维护一个指向 $\\textit{nums}$ 数组元素的下标 $\\textit{idx}$，初始值为 $0$，每插入一个元素就将 $\\textit{idx}$ 加一。对于每个询问，我们可以不断插入满足 $\\textit{nums}[\\textit{idx}]\\le m_i$ 的元素，直至不满足该条件或 $\\textit{idx}$ 指向了数组末尾。\n\n此时字典树中的元素就是 $\\textit{nums}$ 中所有不超过 $m_i$ 的元素，这样就转换成了弱化版的问题。\n\n代码实现时，由于 $\\textit{nums}$ 元素不超过 $10^9$，为简单起见，可取 $L=30$，即 $10^9$ 的二进制串的长度。此外，由于对询问排序会打乱原询问的顺序，而我们需要按照原询问的顺序返回答案，因此可以在排序前，对每个询问附加一个其在 $\\textit{queries}$ 中的下标。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Trie {\npublic:\n    const int L = 30;\n\n    Trie* children[2] = {};\n\n    void insert(int val) {\n        Trie* node = this;\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node->children[bit] == nullptr) {\n                node->children[bit] = new Trie();\n            }\n            node = node->children[bit];\n        }\n    }\n\n    int getMaxXor(int val) {\n        int ans = 0;\n        Trie* node = this;\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node->children[bit ^ 1] != nullptr) {\n                ans |= 1 << i;\n                bit ^= 1;\n            }\n            node = node->children[bit];\n        }\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> maximizeXor(vector<int> &nums, vector<vector<int>> &queries) {\n        sort(nums.begin(), nums.end());\n        int numQ = queries.size();\n        for (int i = 0; i < numQ; ++i) {\n            queries[i].push_back(i);\n        }\n        sort(queries.begin(), queries.end(), [](auto &x, auto &y) { return x[1] < y[1]; });\n\n        vector<int> ans(numQ);\n        Trie* t = new Trie();\n        int idx = 0, n = nums.size();\n        for (auto &q : queries) {\n            int x = q[0], m = q[1], qid = q[2];\n            while (idx < n && nums[idx] <= m) {\n                t->insert(nums[idx]);\n                ++idx;\n            }\n            if (idx == 0) { // 字典树为空\n                ans[qid] = -1;\n            } else {\n                ans[qid] = t->getMaxXor(x);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] maximizeXor(int[] nums, int[][] queries) {\n        Arrays.sort(nums);\n        int numQ = queries.length;\n        int[][] newQueries = new int[numQ][3];\n        for (int i = 0; i < numQ; ++i) {\n            newQueries[i][0] = queries[i][0];\n            newQueries[i][1] = queries[i][1];\n            newQueries[i][2] = i;\n        }\n        Arrays.sort(newQueries, new Comparator<int[]>() {\n            public int compare(int[] query1, int[] query2) {\n                return query1[1] - query2[1];\n            }\n        });\n\n        int[] ans = new int[numQ];\n        Trie trie = new Trie();\n        int idx = 0, n = nums.length;\n        for (int[] query : newQueries) {\n            int x = query[0], m = query[1], qid = query[2];\n            while (idx < n && nums[idx] <= m) {\n                trie.insert(nums[idx]);\n                ++idx;\n            }\n            if (idx == 0) { // 字典树为空\n                ans[qid] = -1;\n            } else {\n                ans[qid] = trie.getMaxXor(x);\n            }\n        }\n        return ans;\n    }\n}\n\nclass Trie {\n    static final int L = 30;\n    Trie[] children = new Trie[2];\n\n    public void insert(int val) {\n        Trie node = this;\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node.children[bit] == null) {\n                node.children[bit] = new Trie();\n            }\n            node = node.children[bit];\n        }\n    }\n\n    public int getMaxXor(int val) {\n        int ans = 0;\n        Trie node = this;\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node.children[bit ^ 1] != null) {\n                ans |= 1 << i;\n                bit ^= 1;\n            }\n            node = node.children[bit];\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] MaximizeXor(int[] nums, int[][] queries) {\n        Array.Sort(nums);\n        int numQ = queries.Length;\n        Tuple<int, int, int>[] newQueries = new Tuple<int, int, int>[numQ];\n        for (int i = 0; i < numQ; ++i) {\n            newQueries[i] = new Tuple<int, int, int>(queries[i][0], queries[i][1], i);\n        }\n        Array.Sort<Tuple<int, int, int>>(newQueries,\n            delegate(Tuple<int, int, int> query1, Tuple<int, int, int> query2) {\n                return query1.Item2 - query2.Item2;\n            }\n        );\n\n        int[] ans = new int[numQ];\n        Trie trie = new Trie();\n        int idx = 0, n = nums.Length;\n        foreach (Tuple<int, int, int> query in newQueries) {\n            int x = query.Item1, m = query.Item2, qid = query.Item3;\n            while (idx < n && nums[idx] <= m) {\n                trie.Insert(nums[idx]);\n                ++idx;\n            }\n            if (idx == 0) { // 字典树为空\n                ans[qid] = -1;\n            } else {\n                ans[qid] = trie.GetMaxXor(x);\n            }\n        }\n        return ans;\n    }\n}\n\nclass Trie {\n    const int L = 30;\n    Trie[] children = new Trie[2];\n\n    public void Insert(int val) {\n        Trie node = this;\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node.children[bit] == null) {\n                node.children[bit] = new Trie();\n            }\n            node = node.children[bit];\n        }\n    }\n\n    public int GetMaxXor(int val) {\n        int ans = 0;\n        Trie node = this;\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node.children[bit ^ 1] != null) {\n                ans |= 1 << i;\n                bit ^= 1;\n            }\n            node = node.children[bit];\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nconst L = 30\n\ntype trie struct {\n    children [2]*trie\n}\n\nfunc (t *trie) insert(val int) {\n    node := t\n    for i := L - 1; i >= 0; i-- {\n        bit := val >> i & 1\n        if node.children[bit] == nil {\n            node.children[bit] = &trie{}\n        }\n        node = node.children[bit]\n    }\n}\n\nfunc (t *trie) getMaxXor(val int) (ans int) {\n    node := t\n    for i := L - 1; i >= 0; i-- {\n        bit := val >> i & 1\n        if node.children[bit^1] != nil {\n            ans |= 1 << i\n            bit ^= 1\n        }\n        node = node.children[bit]\n    }\n    return\n}\n\nfunc maximizeXor(nums []int, queries [][]int) []int {\n    sort.Ints(nums)\n    for i := range queries {\n        queries[i] = append(queries[i], i)\n    }\n    sort.Slice(queries, func(i, j int) bool { return queries[i][1] < queries[j][1] })\n\n    ans := make([]int, len(queries))\n    t := &trie{}\n    idx, n := 0, len(nums)\n    for _, q := range queries {\n        x, m, qid := q[0], q[1], q[2]\n        for idx < n && nums[idx] <= m {\n            t.insert(nums[idx])\n            idx++\n        }\n        if idx == 0 { // 字典树为空\n            ans[qid] = -1\n        } else {\n            ans[qid] = t.getMaxXor(x)\n        }\n    }\n    return ans\n}\n```\n\n```Python [sol1-Python3]\nclass Trie:\n    L = 30\n\n    def __init__(self):\n        self.left = None\n        self.right = None\n\n    def insert(self, val: int):\n        node = self\n        for i in range(Trie.L, -1, -1):\n            bit = (val >> i) & 1\n            if bit == 0:\n                if not node.left:\n                    node.left = Trie()\n                node = node.left\n            else:\n                if not node.right:\n                    node.right = Trie()\n                node = node.right\n    \n    def getMaxXor(self, val: int) -> int:\n        ans, node = 0, self\n        for i in range(Trie.L, -1, -1):\n            bit = (val >> i) & 1\n            check = False\n            if bit == 0:\n                if node.right:\n                    node = node.right\n                    check = True\n                else:\n                    node = node.left\n            else:\n                if node.left:\n                    node = node.left\n                    check = True\n                else:\n                    node = node.right\n            if check:\n                ans |= 1 << i\n        return ans\n\n\nclass Solution:\n    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n, q = len(nums), len(queries)\n        nums.sort()\n        queries = sorted([(x, m, i) for i, (x, m) in enumerate(queries)], key=lambda query: query[1])\n        \n        ans = [0] * q\n        t = Trie()\n        idx = 0\n        for x, m, qid in queries:\n            while idx < n and nums[idx] <= m:\n                t.insert(nums[idx])\n                idx += 1\n            if idx == 0:\n                # 字典树为空\n                ans[qid] = -1\n            else:\n                ans[qid] = t.getMaxXor(x)\n        \n        return ans\n```\n\n```C [sol1-C]\nconst int L = 30;\n\nstruct TrieNode {\n    struct TrieNode* children[2];\n};\n\nstruct TrieNode* createTrieNode() {\n    struct TrieNode* ret = malloc(sizeof(struct TrieNode));\n    ret->children[0] = ret->children[1] = NULL;\n    return ret;\n};\n\nvoid insert(struct TrieNode* root, int val) {\n    struct TrieNode* node = root;\n    for (int i = L - 1; i >= 0; --i) {\n        int bit = (val >> i) & 1;\n        if (node->children[bit] == NULL) {\n            node->children[bit] = createTrieNode();\n        }\n        node = node->children[bit];\n    }\n}\n\nint getMaxXor(struct TrieNode* root, int val) {\n    int ans = 0;\n    struct TrieNode* node = root;\n    for (int i = L - 1; i >= 0; --i) {\n        int bit = (val >> i) & 1;\n        if (node->children[bit ^ 1] != NULL) {\n            ans |= 1 << i;\n            bit ^= 1;\n        }\n        node = node->children[bit];\n    }\n    return ans;\n}\n\nint cmp1(int* a, int* b) {\n    return *a - *b;\n}\n\nint cmp2(int** a, int** b) {\n    return (*a)[1] - (*b)[1];\n}\n\nint* maximizeXor(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    qsort(nums, numsSize, sizeof(int), cmp1);\n    for (int i = 0; i < queriesSize; ++i) {\n        queries[i] = realloc(queries[i], sizeof(int) * 3);\n        queries[i][2] = i;\n    }\n    qsort(queries, queriesSize, sizeof(int*), cmp2);\n    int* ans = malloc(sizeof(int) * queriesSize);\n    *returnSize = queriesSize;\n    struct TrieNode* t = createTrieNode();\n    int idx = 0, n = numsSize;\n    for (int i = 0; i < queriesSize; i++) {\n        int x = queries[i][0], m = queries[i][1], qid = queries[i][2];\n        while (idx < n && nums[idx] <= m) {\n            insert(t, nums[idx]);\n            ++idx;\n        }\n        if (idx == 0) {  // 字典树为空\n            ans[qid] = -1;\n        } else {\n            ans[qid] = getMaxXor(t, x);\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\log N+Q\\log Q+(N+Q)\\cdot L)$。其中 $N$ 是数组 $\\textit{nums}$ 的长度，$Q$ 是数组 $\\textit{queries}$ 的长度，$L$ 是 $\\textit{nums}$ 中的每个元素的二进制表示的长度，算法中固定 $L=30$。排序 $\\textit{nums}$ 的时间复杂度为 $O(N\\log N)$，排序 $\\textit{queries}$ 的时间复杂度为 $O(Q\\log Q)$，每次插入和查询的时间复杂度均为 $O(L)$，因此总的时间复杂度为 $O(N\\log N+Q\\log Q+(N+Q)\\cdot L)$。\n\n- 空间复杂度：$O(Q+N\\cdot L)$。我们需要 $O(Q)$ 的空间来存储每个查询在排序前的 $\\textit{queries}$ 中的位置，且 $\\textit{nums}$ 中的每个元素至多需要 $O(L)$ 个字典树节点来存储，因此空间复杂度为 $O(Q+N\\cdot L)$。\n\n#### 方法二：在线询问 + 字典树\n\n**思路**\n\n我们可以给字典树上的每个节点添加一个值 $\\textit{min}$，表示以该节点为根的子树所记录的元素的最小值。特别地，根节点的 $\\textit{min}$ 表示字典树上记录的所有元素的最小值。\n\n首先将所有元素插入字典树，插入时更新字典树对应节点的 $\\textit{min}$ 值。\n\n然后依次回答每个询问：若 $m_i$ 小于根节点的 $\\textit{min}$ 值，说明 $\\textit{nums}$ 中的所有元素都大于 $m_i$，返回 $-1$；否则，做法类似方法一，只需要在循环内额外判断与当前位相反的子节点的 $\\textit{min}$ 是否不超过 $m_i$，若不超过则可以转移至该节点。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Trie {\npublic:\n    const int L = 30;\n\n    Trie* children[2] = {};\n    int min = INT_MAX;\n\n    void insert(int val) {\n        Trie* node = this;\n        node->min = std::min(node->min, val);\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node->children[bit] == nullptr) {\n                node->children[bit] = new Trie();\n            }\n            node = node->children[bit];\n            node->min = std::min(node->min, val);\n        }\n    }\n\n    int getMaxXorWithLimit(int val, int limit) {\n        Trie* node = this;\n        if (node->min > limit) {\n            return -1;\n        }\n        int ans = 0;\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node->children[bit ^ 1] != nullptr && node->children[bit ^ 1]->min <= limit) {\n                ans |= 1 << i;\n                bit ^= 1;\n            }\n            node = node->children[bit];\n        }\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> maximizeXor(vector<int> &nums, vector<vector<int>> &queries) {\n        Trie* t = new Trie();\n        for (int val : nums) {\n            t->insert(val);\n        }\n        int numQ = queries.size();\n        vector<int> ans(numQ);\n        for (int i = 0; i < numQ; ++i) {\n            ans[i] = t->getMaxXorWithLimit(queries[i][0], queries[i][1]);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] maximizeXor(int[] nums, int[][] queries) {\n        Trie trie = new Trie();\n        for (int val : nums) {\n            trie.insert(val);\n        }\n        int numQ = queries.length;\n        int[] ans = new int[numQ];\n        for (int i = 0; i < numQ; ++i) {\n            ans[i] = trie.getMaxXorWithLimit(queries[i][0], queries[i][1]);\n        }\n        return ans;\n    }\n}\n\nclass Trie {\n    static final int L = 30;\n    Trie[] children = new Trie[2];\n    int min = Integer.MAX_VALUE;\n\n    public void insert(int val) {\n        Trie node = this;\n        node.min = Math.min(node.min, val);\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node.children[bit] == null) {\n                node.children[bit] = new Trie();\n            }\n            node = node.children[bit];\n            node.min = Math.min(node.min, val);\n        }\n    }\n\n    public int getMaxXorWithLimit(int val, int limit) {\n        Trie node = this;\n        if (node.min > limit) {\n            return -1;\n        }\n        int ans = 0;\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node.children[bit ^ 1] != null && node.children[bit ^ 1].min <= limit) {\n                ans |= 1 << i;\n                bit ^= 1;\n            }\n            node = node.children[bit];\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int[] MaximizeXor(int[] nums, int[][] queries) {\n        Trie trie = new Trie();\n        foreach (int val in nums) {\n            trie.Insert(val);\n        }\n        int numQ = queries.Length;\n        int[] ans = new int[numQ];\n        for (int i = 0; i < numQ; ++i) {\n            ans[i] = trie.GetMaxXorWithLimit(queries[i][0], queries[i][1]);\n        }\n        return ans;\n    }\n}\n\nclass Trie {\n    const int L = 30;\n    Trie[] children = new Trie[2];\n    int min = int.MaxValue;\n\n    public void Insert(int val) {\n        Trie node = this;\n        node.min = Math.Min(node.min, val);\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node.children[bit] == null) {\n                node.children[bit] = new Trie();\n            }\n            node = node.children[bit];\n            node.min = Math.Min(node.min, val);\n        }\n    }\n\n    public int GetMaxXorWithLimit(int val, int limit) {\n        Trie node = this;\n        if (node.min > limit) {\n            return -1;\n        }\n        int ans = 0;\n        for (int i = L - 1; i >= 0; --i) {\n            int bit = (val >> i) & 1;\n            if (node.children[bit ^ 1] != null && node.children[bit ^ 1].min <= limit) {\n                ans |= 1 << i;\n                bit ^= 1;\n            }\n            node = node.children[bit];\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol2-Golang]\nconst L = 30\n\ntype trie struct {\n    children [2]*trie\n    min      int\n}\n\nfunc (t *trie) insert(val int) {\n    node := t\n    if val < node.min {\n        node.min = val\n    }\n    for i := L - 1; i >= 0; i-- {\n        bit := val >> i & 1\n        if node.children[bit] == nil {\n            node.children[bit] = &trie{min: val}\n        }\n        node = node.children[bit]\n        if val < node.min {\n            node.min = val\n        }\n    }\n}\n\nfunc (t *trie) getMaxXorWithLimit(val, limit int) (ans int) {\n    node := t\n    if node.min > limit {\n        return -1\n    }\n    for i := L - 1; i >= 0; i-- {\n        bit := val >> i & 1\n        if node.children[bit^1] != nil && node.children[bit^1].min <= limit {\n            ans |= 1 << i\n            bit ^= 1\n        }\n        node = node.children[bit]\n    }\n    return\n}\n\nfunc maximizeXor(nums []int, queries [][]int) []int {\n    t := &trie{min: math.MaxInt32}\n    for _, val := range nums {\n        t.insert(val)\n    }\n    ans := make([]int, len(queries))\n    for i, q := range queries {\n        ans[i] = t.getMaxXorWithLimit(q[0], q[1])\n    }\n    return ans\n}\n```\n\n```Python [sol2-Python3]\nclass Trie:\n    L = 30\n\n    def __init__(self):\n        self.left = None\n        self.right = None\n        self.min_value = float(\"inf\")\n\n    def insert(self, val: int):\n        node = self\n        node.min_value = min(node.min_value, val)\n        for i in range(Trie.L, -1, -1):\n            bit = (val >> i) & 1\n            if bit == 0:\n                if not node.left:\n                    node.left = Trie()\n                node = node.left\n            else:\n                if not node.right:\n                    node.right = Trie()\n                node = node.right\n            node.min_value = min(node.min_value, val)\n    \n    def getMaxXorWithLimit(self, val: int, limit: int) -> int:\n        node = self\n        if node.min_value > limit:\n            return -1\n        \n        ans = 0\n        for i in range(Trie.L, -1, -1):\n            bit = (val >> i) & 1\n            check = False\n            if bit == 0:\n                if node.right and node.right.min_value <= limit:\n                    node = node.right\n                    check = True\n                else:\n                    node = node.left\n            else:\n                if node.left and node.left.min_value <= limit:\n                    node = node.left\n                    check = True\n                else:\n                    node = node.right\n            if check:\n                ans |= 1 << i\n        return ans\n\n\nclass Solution:\n    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        t = Trie()\n        for val in nums:\n            t.insert(val)\n        \n        q = len(queries)\n        ans = [0] * q\n        for i, (x, m) in enumerate(queries):\n            ans[i] = t.getMaxXorWithLimit(x, m)\n        \n        return ans\n```\n\n```C [sol2-C]\nconst int L = 30;\n\nstruct TrieNode {\n    int minn;\n    struct TrieNode* children[2];\n};\n\nstruct TrieNode* createTrieNode() {\n    struct TrieNode* ret = malloc(sizeof(struct TrieNode));\n    ret->minn = INT_MAX;\n    ret->children[0] = ret->children[1] = NULL;\n    return ret;\n};\n\nvoid insert(struct TrieNode* root, int val) {\n    struct TrieNode* node = root;\n    node->minn = fmin(node->minn, val);\n    for (int i = L - 1; i >= 0; --i) {\n        int bit = (val >> i) & 1;\n        if (node->children[bit] == NULL) {\n            node->children[bit] = createTrieNode();\n        }\n        node = node->children[bit];\n        node->minn = fmin(node->minn, val);\n    }\n}\n\nint getMaxXorWithLimit(struct TrieNode* root, int val, int limit) {\n    struct TrieNode* node = root;\n    if (node->minn > limit) {\n        return -1;\n    }\n    int ans = 0;\n    for (int i = L - 1; i >= 0; --i) {\n        int bit = (val >> i) & 1;\n        if (node->children[bit ^ 1] != NULL && node->children[bit ^ 1]->minn <= limit) {\n            ans |= 1 << i;\n            bit ^= 1;\n        }\n        node = node->children[bit];\n    }\n    return ans;\n}\n\nint* maximizeXor(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    struct TrieNode* t = createTrieNode();\n    for (int i = 0; i < numsSize; i++) {\n        insert(t, nums[i]);\n    }\n    int* ans = malloc(sizeof(int) * queriesSize);\n    *returnSize = queriesSize;\n    for (int i = 0; i < queriesSize; ++i) {\n        ans[i] = getMaxXorWithLimit(t, queries[i][0], queries[i][1]);\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O((N+Q)\\cdot L)$。相较方法一，方法二没有排序的过程，因此时间复杂度为 $O((N+Q)\\cdot L)$。\n\n- 空间复杂度：$O(N\\cdot L)$。空间复杂度不考虑返回值，而 $\\textit{nums}$ 中的每个元素至多需要 $O(L)$ 个字典树节点来存储，因此空间复杂度为 $O(N\\cdot L)$。"
}