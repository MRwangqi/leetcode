{
	"titleSlug": "er94lq",
	"slug": "mo-ni-xi-pai-guo-cheng-xiang-xi-fen-xi-li-jie-kde-",
	"url": "https://leetcode-cn.com/problems/er94lq/solution/mo-ni-xi-pai-guo-cheng-xiang-xi-fen-xi-li-jie-kde-/",
	"content": "比赛的时候思路出来了，可惜具体实现出了点问题，一直超时。\r\n\r\n思路：\r\n# 1、暴力法(超时)\r\n题目给出了样例：\r\n$$target = [2,4,3,1,5]$$\r\n根据题目规则的第二步：\r\n```\r\n第一步，\r\n魔术师将当前位于 偶数位置 的卡牌（下标自 1 开始），\r\n保持 当前排列顺序 放在位于 奇数位置 的卡牌之前。\r\n例如：将当前排列 [1,2,3,4,5] 位于偶数位置的 [2,4] 置于奇数位置的 [1,3,5] 前，\r\n排列变为 [2,4,1,3,5]；\r\n\r\n第二步，\r\n若当前卡牌数量小于等于 k，则魔术师按排列顺序取走全部卡牌；\r\n若当前卡牌数量大于 k，则取走前 k 张卡牌，剩余卡牌继续重复这两个步骤，直至所有卡牌全部被取走；\r\n```\r\n\r\n我们显然可以使用暴力法，**`k`的有效取值是从1到n**，当k大于n时，得到的效果其实和`k==n`是一样的。\r\n所以我们直接把所有k的有效取值都按照题目的规则（洗牌、取牌）试一遍，肯定能找到答案。\r\n但是这样显而易见超时了。\r\n\r\n# 2、改进：充分利用第一次洗牌结果\r\n超时之后我们就要思考如何优化k的取值。\r\n\r\n这里依旧使用题目所给的$target$数组:\r\n$$target:\\{2,4,3,1,5\\}$$\r\n\r\n\r\n1、构造一个数组：\r\n$$\\{1,2,3,4,5\\} $$\r\n\r\n2、按照题目的规则排序，即把索引（从1开始）为偶数的放前面，得到**第一次洗牌的结果**（叫他`firstSort`数组吧）：\r\n$$firstSort数组：\\{2,4,1,3,5\\}$$\r\n\r\n3、然后我们把题目给的目标数组$target$从头开始进行比较。\r\n$$firstSort数组：\\{\\textcolor{red}{2,4}, 1,3,5\\}$$\r\n$$ target数组:   \\{\\textcolor{red}{2,4},3,1,5\\}$$\r\n\r\n我们可以看到标红的`2,4`是两个数组最长公共前缀，设最长公共前缀的长度为`Len`。\r\n这也就是说两个数组的前`Len`个数相同，第`Len+1`个数肯定不同。(除非两个数组完全相同，那就没有第`Len+1`个数了)\r\n\r\n我们可以发现，**k的取值是不能超过Len的：**\r\n因为如果`k`超过了`Len`，你第一次洗牌后取前`k`个数，其中前`Len`个数相同，第`Len+1`个数不同，那得到的结果肯定不同。\r\n\r\n比如说在这个例子中，`Len`是等于2的，我取`k`等于3。那么第一次取出的k个数为:\r\n$$\\{2,4,\\textcolor{red}1\\}$$\r\n而$target$的前`k`个数为:\r\n$$\\{2,4,\\textcolor{red}3\\}$$\r\n很明显，后面不用继续取数，我们也知道结果不可能与$target$一样了。\r\n\r\n\r\n**那么`k`能不能小于`Len`呢？**\r\n\r\n答案是不能的。\r\n\r\n我们简单地分析一下：\r\n\r\n如图是第一次洗牌后的情况与target做对比。\r\n![幻灯片1.JPG](https://pic.leetcode-cn.com/1600592034-TzTmkg-%E5%B9%BB%E7%81%AF%E7%89%871.JPG)\r\n\r\n\r\n\r\n先假设 `k=Len-1`的情况，以简要分析。如图我们取出前`Len-1`个数，那么第Len个数就肯定被保留下来，参与下一轮洗牌。\r\n\r\n![幻灯片2.JPG](https://pic.leetcode-cn.com/1600592048-NwyJio-%E5%B9%BB%E7%81%AF%E7%89%872.JPG)\r\n\\\r\n\\\r\n\\\r\n接下来，进行第二轮洗牌，如图所示，firstSort数组中的第一个数肯定会因为洗牌与target中相同的数错开（除非就剩一张牌，但是在第二轮洗牌中不可能只剩一张，因为这两个数组**不可能前n-1个相同而最后一个数不同**）。\r\n\r\n因此，两个数组中的第一个数肯定不同。\r\n\r\n并且，我们可以推广到k取`Len-3 , Len-5 , Len-7 …`一直到`Len–num`，其中`num`为表示任意奇数。\r\n**只要num为奇数，那么在新数组中的第1个数在洗牌后必然跟在`target`中的与他相同的数错开**（看图容易理解）。\r\n  \r\n\r\n \r\n\r\n\r\n![幻灯片3.JPG](https://pic.leetcode-cn.com/1600592471-fEAxjF-%E5%B9%BB%E7%81%AF%E7%89%873.JPG)\r\n\r\n\r\n如果`num`为偶数的话，例如num=2，即`k=Len-2`，分析如下：\r\n![image.png](https://pic.leetcode-cn.com/1600592959-asMveX-image.png)\r\n\r\n![幻灯片4.JPG](https://pic.leetcode-cn.com/1600592478-FSYGDQ-%E5%B9%BB%E7%81%AF%E7%89%874.JPG)\r\n\r\n经过上图简单的分析，显然num为2的时候剩余数组的第2个又会因为洗牌而错开，导致与结果不一致。\r\n\r\n同样的道理可以推广到`num=4，num=6...`直到`num`为任意偶数。\r\n\r\n\r\n所以到最后，我们发现**只要对`k==Len`的情况进行模拟洗牌、取牌的过程，判断最后的结果是否与target相同就行**。当然，如果中途发现不对，就可以提前退出\r\n\r\n\r\n```cpp []group \r\nclass Solution {\r\npublic:\r\n    //题目的洗牌算法。可能大佬们有更好的写法\r\n    void magicSort(vector<int>&nums)\r\n    {\r\n        vector<int>tmp=nums;\r\n        int n=nums.size();\r\n        int idx=0;\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            if((i+1)%2==0)\r\n            {\r\n                nums[idx++]=tmp[i];\r\n                tmp[i]=-1;\r\n            }\r\n        }\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            if(tmp[i]==-1)continue;\r\n            nums[idx++]=tmp[i];\r\n        }\r\n    }\r\n    //获取第一次洗牌后的数组和target数组的公共最长前缀\r\n    int getLen(vector<int>nums,vector<int>&target)\r\n    {\r\n        int n=nums.size();\r\n        int Len=n;\r\n        magicSort(nums);\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            if(nums[i]!=target[i])\r\n            {\r\n                Len=i;\r\n                break;\r\n            }\r\n        }\r\n        return Len;\r\n    }\r\n    bool isMagic(vector<int>& target) {\r\n        if(target.size()==1)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        int n=target.size();\r\n        vector<int>nums(n);\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            nums[i]=i+1;   \r\n        }\r\n        int k=getLen(nums,target); \r\n\r\n        //公共前缀长度为0，那就不用看了\r\n        if(k==0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //洗牌最多有 n/k（向上取整）次\r\n        int cnt=0;\r\n        if(n%k==0)\r\n        {\r\n            cnt=n/k;\r\n        }\r\n        else cnt=n/k+1;\r\n\r\n\r\n        int j=0;//j表示第几轮洗牌\r\n        while(j<cnt)\r\n        {\r\n            magicSort(nums);\r\n            \r\n            bool flag=false;\r\n            int size=nums.size();\r\n            for(int i=0;i<k;i++)\r\n            {\r\n                if(i+k*j<n&&nums[i]!=target[i+k*j])\r\n                {\r\n                    flag=true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            //如果中途发现不对，就可以提前退出\r\n            if(flag)\r\n            {\r\n                break;\r\n            }\r\n            else{\r\n                \r\n                //取走前k个\r\n                for(int i=k;i<size;i++)\r\n                {\r\n                    nums[i-k]=nums[i];\r\n                }\r\n                if(size>k)\r\n                {\r\n                    nums.resize(size-k);\r\n                }\r\n                else{\r\n                    nums.resize(0);\r\n                }\r\n                if(nums.size()==0)\r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n            j++;\r\n        }   \r\n        \r\n        return false;\r\n    }\r\n};\r\n```\r\n```java []group \r\nclass Solution {\r\n    //洗牌过程\r\n    int[] magicSort(int[] nums,int length)\r\n    {\r\n        int n=length;\r\n        int result[]=new int[n];\r\n        int mid=n/2;\r\n        for(int i=0,even=0,odd=mid;i<n;i++)\r\n        {\r\n            if((i+1)%2==0)\r\n            {\r\n                result[even++]=nums[i];\r\n            }\r\n            else{\r\n                result[odd++]=nums[i];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    int getLen(int[] firstSort,int[] target)\r\n    {\r\n        int n=firstSort.length;\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            if(firstSort[i]!=target[i])\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        //两个数组完全相等，返回n\r\n        return n;\r\n    }\r\n\r\n    public boolean isMagic(int[] target) {\r\n\r\n        int n=target.length;\r\n        int nums[]=new int[n];\r\n\r\n        //构造数组:{1,2,3,4....n}\r\n        Arrays.fill(nums,1);\r\n        for(int i=1;i<n;i++)\r\n        {\r\n            nums[i]+=nums[i-1];\r\n        }\r\n        \r\n        nums=magicSort(nums,nums.length);\r\n        // System.out.println(Arrays.toString(nums));\r\n        int k=getLen(nums,target);\r\n        // System.out.println(k);\r\n\r\n        if(k==0)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        int numsLen=n;\r\n        while(numsLen>0)\r\n        {\r\n            //取走前k个数\r\n            for(int i=k;i<numsLen;i++)\r\n            {\r\n                nums[i-k]=nums[i];\r\n                target[i-k]=target[i];\r\n            }\r\n            if(numsLen>k)\r\n            {\r\n                numsLen-=k;\r\n            }\r\n            else{\r\n                numsLen=0;\r\n            }\r\n            if(numsLen==0)\r\n            {\r\n                return true;\r\n            }\r\n            nums=magicSort(nums,numsLen);\r\n            for(int i=0;i<k&&i<numsLen;i++)\r\n            {\r\n                if(nums[i]!=target[i])\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return false; \r\n    }\r\n\r\n}\r\n```\r\n\r\n代码写的难看了，没做过多优化，希望评论区大佬有更好的思路、写法补充。\r\n\r\n**码字不易，点个赞吧**\r\n\r\n\r\n\r\n\r\n"
}