{
	"titleSlug": "is-subsequence",
	"slug": "pan-duan-zi-xu-lie-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/is-subsequence/solution/pan-duan-zi-xu-lie-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n![392. 判断子序列.mp4](6d295ed5-bfef-4917-bed7-afb83b5642a1)\n\n### 📖 文字题解\n#### 方法一：双指针\n\n**思路及算法**\n\n本题询问的是，$s$ 是否是 $t$ 的子序列，因此只要能找到任意一种 $s$ 在 $t$ 中出现的方式，即可认为 $s$ 是 $t$ 的子序列。\n\n而当我们从前往后匹配，可以发现每次贪心地匹配靠前的字符是最优决策。\n\n> 假定当前需要匹配字符 $c$，而字符 $c$ 在 $t$ 中的位置 $x_1$ 和 $x_2$ 出现（$x_1 < x_2$），那么贪心取 $x_1$ 是最优解，因为 $x_2$ 后面能取到的字符，$x_1$ 也都能取到，并且通过 $x_1$ 与 $x_2$ 之间的可选字符，更有希望能匹配成功。\n\n这样，我们初始化两个指针 $i$ 和 $j$，分别指向 $s$ 和 $t$ 的初始位置。每次贪心地匹配，匹配成功则 $i$ 和 $j$ 同时右移，匹配 $s$ 的下一个位置，匹配失败则 $j$ 右移，$i$ 不变，尝试用 $t$ 的下一个字符匹配 $s$。\n\n最终如果 $i$ 移动到 $s$ 的末尾，就说明 $s$ 是 $t$ 的子序列。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        int n = s.length(), m = t.length();\n        int i = 0, j = 0;\n        while (i < n && j < m) {\n            if (s[i] == t[j]) {\n                i++;\n            }\n            j++;\n        }\n        return i == n;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isSubsequence(String s, String t) {\n        int n = s.length(), m = t.length();\n        int i = 0, j = 0;\n        while (i < n && j < m) {\n            if (s.charAt(i) == t.charAt(j)) {\n                i++;\n            }\n            j++;\n        }\n        return i == n;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        n, m = len(s), len(t)\n        i = j = 0\n        while i < n and j < m:\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == n\n```\n\n```golang [sol1-Golang]\nfunc isSubsequence(s string, t string) bool {\n    n, m := len(s), len(t)\n    i, j := 0, 0\n    for i < n && j < m {\n        if s[i] == t[j] {\n            i++\n        }\n        j++\n    }\n    return i == n\n}\n```\n\n```C [sol1-C]\nbool isSubsequence(char* s, char* t) {\n    int n = strlen(s), m = strlen(t);\n    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (s[i] == t[j]) {\n            i++;\n        }\n        j++;\n    }\n    return i == n;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m)$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度。每次无论是匹配成功还是失败，都有至少一个指针发生右移，两指针能够位移的总距离为 $n+m$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：动态规划\n\n**思路及算法**\n\n考虑前面的双指针的做法，我们注意到我们有大量的时间用于在 $t$ 中找到下一个匹配字符。\n\n这样我们可以预处理出对于 $t$ 的每一个位置，从该位置开始往后每一个字符第一次出现的位置。\n\n我们可以使用动态规划的方法实现预处理，令 $f[i][j]$ 表示字符串 $t$ 中从位置 $i$ 开始往后字符 $j$ 第一次出现的位置。在进行状态转移时，如果 $t$ 中位置 $i$ 的字符就是 $j$，那么 $f[i][j]=i$，否则 $j$ 出现在位置 $i+1$ 开始往后，即 $f[i][j]=f[i+1][j]$，因此我们要倒过来进行动态规划，从后往前枚举 $i$。\n\n这样我们可以写出状态转移方程：\n\n$$\nf[i][j]=\\begin{cases}\ni, & t[i]=j\\\\\nf[i+1][j], & t[i] \\neq j\n\\end{cases}\n$$\n\n假定下标从 $0$ 开始，那么 $f[i][j]$ 中有 $0 \\leq i \\leq m-1$ ，对于边界状态 $f[m-1][..]$，我们置 $f[m][..]$ 为 $m$，让 $f[m-1][..]$ 正常进行转移。这样如果 $f[i][j]=m$，则表示从位置 $i$ 开始往后不存在字符 $j$。\n\n这样，我们可以利用 $f$ 数组，每次 $O(1)$ 地跳转到下一个位置，直到位置变为 $m$ 或 $s$ 中的每一个字符都匹配成功。\n\n> 同时我们注意到，该解法中对 $t$ 的处理与 $s$ 无关，且预处理完成后，可以利用预处理数组的信息，线性地算出任意一个字符串 $s$ 是否为 $t$ 的子串。这样我们就可以解决「后续挑战」啦。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        int n = s.size(), m = t.size();\n\n        vector<vector<int> > f(m + 1, vector<int>(26, 0));\n        for (int i = 0; i < 26; i++) {\n            f[m][i] = m;\n        }\n\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = 0; j < 26; j++) {\n                if (t[i] == j + 'a')\n                    f[i][j] = i;\n                else\n                    f[i][j] = f[i + 1][j];\n            }\n        }\n        int add = 0;\n        for (int i = 0; i < n; i++) {\n            if (f[add][s[i] - 'a'] == m) {\n                return false;\n            }\n            add = f[add][s[i] - 'a'] + 1;\n        }\n        return true;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean isSubsequence(String s, String t) {\n        int n = s.length(), m = t.length();\n\n        int[][] f = new int[m + 1][26];\n        for (int i = 0; i < 26; i++) {\n            f[m][i] = m;\n        }\n\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = 0; j < 26; j++) {\n                if (t.charAt(i) == j + 'a')\n                    f[i][j] = i;\n                else\n                    f[i][j] = f[i + 1][j];\n            }\n        }\n        int add = 0;\n        for (int i = 0; i < n; i++) {\n            if (f[add][s.charAt(i) - 'a'] == m) {\n                return false;\n            }\n            add = f[add][s.charAt(i) - 'a'] + 1;\n        }\n        return true;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        n, m = len(s), len(t)\n        f = [[0] * 26 for _ in range(m)]\n        f.append([m] * 26)\n\n        for i in range(m - 1, -1, -1):\n            for j in range(26):\n                f[i][j] = i if ord(t[i]) == j + ord('a') else f[i + 1][j]\n        \n        add = 0\n        for i in range(n):\n            if f[add][ord(s[i]) - ord('a')] == m:\n                return False\n            add = f[add][ord(s[i]) - ord('a')] + 1\n        \n        return True\n```\n\n```golang [sol2-Golang]\nfunc isSubsequence(s string, t string) bool {\n    n, m := len(s), len(t)\n    f := make([][26]int, m + 1)\n    for i := 0; i < 26; i++ {\n        f[m][i] = m\n    }\n    for i := m - 1; i >= 0; i-- {\n        for j := 0; j < 26; j++ {\n            if t[i] == byte(j + 'a') {\n                f[i][j] = i\n            } else {\n                f[i][j] = f[i + 1][j]\n            }\n        }\n    }\n    add := 0\n    for i := 0; i < n; i++ {\n        if f[add][int(s[i] - 'a')] == m {\n            return false\n        }\n        add = f[add][int(s[i] - 'a')] + 1\n    }\n    return true\n}\n```\n\n```C [sol2-C]\nbool isSubsequence(char* s, char* t) {\n    int n = strlen(s), m = strlen(t);\n\n    int f[m + 1][26];\n    memset(f, 0, sizeof(f));\n    for (int i = 0; i < 26; i++) {\n        f[m][i] = m;\n    }\n\n    for (int i = m - 1; i >= 0; i--) {\n        for (int j = 0; j < 26; j++) {\n            if (t[i] == j + 'a')\n                f[i][j] = i;\n            else\n                f[i][j] = f[i + 1][j];\n        }\n    }\n    int add = 0;\n    for (int i = 0; i < n; i++) {\n        if (f[add][s[i] - 'a'] == m) {\n            return false;\n        }\n        add = f[add][s[i] - 'a'] + 1;\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\times |\\Sigma| + n)$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度，$\\Sigma$ 为字符集，在本题中字符串只包含小写字母，$|\\Sigma| = 26$。预处理时间复杂度 $O(m)$，判断子序列时间复杂度 $O(n)$。\n  - 如果是计算 $k$ 个平均长度为 $n$ 的字符串是否为 $t$ 的子序列，则时间复杂度为 $O(m \\times |\\Sigma| +k \\times n)$。\n\n- 空间复杂度：$O(m \\times |\\Sigma|)$，为动态规划数组的开销。"
}