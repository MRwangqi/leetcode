{
	"titleSlug": "angle-between-hands-of-a-clock",
	"slug": "shi-zhong-zhi-zhen-de-jia-jiao-by-leetcode",
	"url": "https://leetcode-cn.com/problems/angle-between-hands-of-a-clock/solution/shi-zhong-zhi-zhen-de-jia-jiao-by-leetcode/",
	"content": "####  方法一：数学\n其思想是分别计算 0 点垂线与每个指针之间的角度。答案是这两个角度的差。\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMTM0NC9kaWZmLnBuZw?x-oss-process=image/format,png)\n\n**分针的角度：**\n我们从分针开始，整个圆 $360°$ 有 60 分钟。分针指针移动一分钟的角度是 $1 \\text{ min} = 360° / 60 = 6°$。\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMTM0NC9vbmVfbWluMi5wbmc?x-oss-process=image/format,png)\n现在可以很容易地找到 0 点垂直线和分钟指针之间的角度：$\\text{minutes\\_angle} = \\text{minutes} \\times 6°$。\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMTM0NC9xcV9taW4yLnBuZw?x-oss-process=image/format,png)\n\n**时针的角度：**\n与分针的角度相似，整个圆 $360°$ 有 12 个小时，因此每个小时 $1 \\text{h} = 360° / 12 = 30°$。\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMTM0NC9ob3VyLnBuZw?x-oss-process=image/format,png)\n则时针的角度为：$\\text{hour\\_angle} = \\text{hour} \\times 30°$。\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMTM0NC9xcV9oLnBuZw?x-oss-process=image/format,png)\n由于 12 点的角度实际为 0，则需要修改表达式为：$\\text{hour\\_angle} = (\\text{hour mod } 12) \\ \\times 30°$。\n\n在分钟指针大于 0 的情况下，必须考虑到时针指针额外的移动：它不在整数值之间跳跃，是跟着分针移动。\n\n$$\n\\text{hour_angle} = \\left(\\text{hour mod } 12 + \\text{minutes} / 60 \\right)\\times 30°\n$$\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMTM0NC9taW51dGVzX2NvcnIyLnBuZw?x-oss-process=image/format,png)\n**算法：**\n- 初始化常数：`one_min_angle = 6`，`one_hour_angle = 30`。\n- 分针指针与 0 点垂线的角度为：`minutes_angle = one_min_angle * minutes`。\n- 时针指针与 0 点垂线的角度为：`hour_angle = (hour % 12 + minutes / 60) * one_hour_angle`。\n- 得到差：`diff = abs(hour_angle - minutes_angle)`。\n- 返回最小的角度：`min(diff, 360 - diff)`。\n\n```python [solution1-Python]\nclass Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        one_min_angle = 6\n        one_hour_angle = 30\n        \n        minutes_angle = one_min_angle * minutes\n        hour_angle = (hour % 12 + minutes / 60) * one_hour_angle\n        \n        diff = abs(hour_angle - minutes_angle)\n        return min(diff, 360 - diff)\n```\n\n```java [solution1-Java]\nclass Solution {\n  public double angleClock(int hour, int minutes) {\n    int oneMinAngle = 6;\n    int oneHourAngle = 30;\n\n    double minutesAngle = oneMinAngle * minutes;\n    double hourAngle = (hour % 12 + minutes / 60.0) * oneHourAngle;\n\n    double diff = Math.abs(hourAngle - minutesAngle);\n    return Math.min(diff, 360 - diff);\n  }\n}\n```\n\n```c++ [solution1-C++]\nclass Solution {\n  public:\n  double angleClock(int hour, int minutes) {\n    int oneMinAngle = 6;\n    int oneHourAngle = 30;\n\n    double minutesAngle = oneMinAngle * minutes;\n    double hourAngle = (hour % 12 + minutes / 60.0) * oneHourAngle;\n\n    double diff = abs(hourAngle - minutesAngle);\n    return min(diff, 360 - diff);\n  }\n};\n```\n\n```go [solution1-Go]\nfunc angleClock(hour int, minutes int) float64 {\n    var oneMinAngle, oneHourAngle, minutesAngle, hourAngle, diff float64;\n    oneMinAngle = 6;\n    oneHourAngle = 30;\n\n    minutesAngle = oneMinAngle * float64(minutes);\n    hourAngle = (float64(hour % 12) + float64(minutes) / 60.0) * oneHourAngle;\n\n    diff = math.Abs(hourAngle - minutesAngle);\n    return math.Min(diff, 360 - diff);\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$\\mathcal{O}(1)$。\n* 空间复杂度：$\\mathcal{O}(1)$。"
}