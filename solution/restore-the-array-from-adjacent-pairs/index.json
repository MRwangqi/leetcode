{
	"titleSlug": "restore-the-array-from-adjacent-pairs",
	"slug": "cong-xiang-lin-yuan-su-dui-huan-yuan-shu-v55t",
	"url": "https://leetcode-cn.com/problems/restore-the-array-from-adjacent-pairs/solution/cong-xiang-lin-yuan-su-dui-huan-yuan-shu-v55t/",
	"content": "#### 方法一：哈希表\n\n**思路及算法**\n\n对于一维数组 $\\textit{nums}$ 中的元素 $\\textit{nums}[i]$，若其为数组的第一个或最后一个元素，则该元素有且仅有一个元素与其相邻；若其为数组的中间元素，则该元素有且仅有两个元素与其相邻。\n\n我们可以对每个元素记录与它相邻的元素有哪些，然后依次检查每个元素的相邻元素数量，即可找到原数组的第一个元素和最后一个元素。由于我们可以返回任意一个满足条件的数组，故指定这两个元素中的一个为原数组的第一个元素，然后根据相邻元素信息确定数组的第二个、第三个元素……直到确定最后一个元素为止。\n\n具体地，我们使用哈希表记录每一个的元素的相邻元素有哪些，然后我们遍历哈希表，找到有且仅有一个相邻元素的元素 $e_1$ 作为原数组的第一个元素。那么与 $e_1$ 唯一相邻的元素 $e_2$ 即为原数组的第二个元素。此时排除掉与 $e_2$ 相邻的 $e_1$ 后，可以确认与 $e_2$ 相邻的 $e_3$ 即为原数组的第三个元素……以此类推，我们可以将原数组完整推断出来。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> restoreArray(vector<vector<int>>& adjacentPairs) {\n        unordered_map<int, vector<int>> mp;\n        for (auto& adjacentPair : adjacentPairs) {\n            mp[adjacentPair[0]].push_back(adjacentPair[1]);\n            mp[adjacentPair[1]].push_back(adjacentPair[0]);\n        }\n\n        int n = adjacentPairs.size() + 1;\n        vector<int> ret(n);\n        for (auto& [e, adj] : mp) {\n            if (adj.size() == 1) {\n                ret[0] = e;\n                break;\n            }\n        }\n\n        ret[1] = mp[ret[0]][0];\n        for (int i = 2; i < n; i++) {\n            auto& adj = mp[ret[i - 1]];\n            ret[i] = ret[i - 2] == adj[0] ? adj[1] : adj[0];\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] restoreArray(int[][] adjacentPairs) {\n        Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();\n        for (int[] adjacentPair : adjacentPairs) {\n            map.putIfAbsent(adjacentPair[0], new ArrayList<Integer>());\n            map.putIfAbsent(adjacentPair[1], new ArrayList<Integer>());\n            map.get(adjacentPair[0]).add(adjacentPair[1]);\n            map.get(adjacentPair[1]).add(adjacentPair[0]);\n        }\n\n        int n = adjacentPairs.length + 1;\n        int[] ret = new int[n];\n        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {\n            int e = entry.getKey();\n            List<Integer> adj = entry.getValue();\n            if (adj.size() == 1) {\n                ret[0] = e;\n                break;\n            }\n        }\n\n        ret[1] = map.get(ret[0]).get(0);\n        for (int i = 2; i < n; i++) {\n            List<Integer> adj = map.get(ret[i - 1]);\n            ret[i] = ret[i - 2] == adj.get(0) ? adj.get(1) : adj.get(0);\n        }\n        return ret;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] RestoreArray(int[][] adjacentPairs) {\n        Dictionary<int, IList<int>> dictionary = new Dictionary<int, IList<int>>();\n        foreach (int[] adjacentPair in adjacentPairs) {\n            if (!dictionary.ContainsKey(adjacentPair[0])) {\n                dictionary.Add(adjacentPair[0], new List<int>());\n            }\n            if (!dictionary.ContainsKey(adjacentPair[1])) {\n                dictionary.Add(adjacentPair[1], new List<int>());\n            }\n            dictionary[adjacentPair[0]].Add(adjacentPair[1]);\n            dictionary[adjacentPair[1]].Add(adjacentPair[0]);\n        }\n\n        int n = adjacentPairs.Length + 1;\n        int[] ret = new int[n];\n        foreach (KeyValuePair<int, IList<int>> pair in dictionary) {\n            int e = pair.Key;\n            IList<int> adj = pair.Value;\n            if (adj.Count == 1) {\n                ret[0] = e;\n                break;\n            }\n        }\n\n        ret[1] = dictionary[ret[0]][0];\n        for (int i = 2; i < n; i++) {\n            IList<int> adj = dictionary[ret[i - 1]];\n            ret[i] = ret[i - 2] == adj[0] ? adj[1] : adj[0];\n        }\n        return ret;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc restoreArray(adjacentPairs [][]int) []int {\n    n := len(adjacentPairs) + 1\n    g := make(map[int][]int, n)\n    for _, p := range adjacentPairs {\n        v, w := p[0], p[1]\n        g[v] = append(g[v], w)\n        g[w] = append(g[w], v)\n    }\n\n    ans := make([]int, n)\n    for e, adj := range g {\n        if len(adj) == 1 {\n            ans[0] = e\n            break\n        }\n    }\n\n    ans[1] = g[ans[0]][0]\n    for i := 2; i < n; i++ {\n        adj := g[ans[i-1]]\n        if ans[i-2] == adj[0] {\n            ans[i] = adj[1]\n        } else {\n            ans[i] = adj[0]\n        }\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nstruct HashTable {\n    int key;\n    int arr[2];\n    UT_hash_handle hh;\n};\n\nvoid push(struct HashTable** hashTable, int x, int y) {\n    struct HashTable* tmp;\n    HASH_FIND_INT(*hashTable, &x, tmp);\n    if (tmp == NULL) {\n        tmp = (struct HashTable*)malloc(sizeof(struct HashTable));\n        tmp->key = x, tmp->arr[0] = y, tmp->arr[1] = INT_MAX;\n        HASH_ADD_INT(*hashTable, key, tmp);\n    } else {\n        tmp->arr[1] = y;\n    }\n}\n\nstruct HashTable* query(struct HashTable** hashTable, int x) {\n    struct HashTable* tmp;\n    HASH_FIND_INT(*hashTable, &x, tmp);\n    return tmp;\n}\n\nint* restoreArray(int** adjacentPairs, int adjacentPairsSize, int* adjacentPairsColSize, int* returnSize) {\n    struct HashTable* hashTable = NULL;\n    for (int i = 0; i < adjacentPairsSize; i++) {\n        push(&hashTable, adjacentPairs[i][0], adjacentPairs[i][1]);\n        push(&hashTable, adjacentPairs[i][1], adjacentPairs[i][0]);\n    }\n\n    int n = adjacentPairsSize + 1;\n    int* ret = (int*)malloc(sizeof(int) * n);\n    *returnSize = n;\n    struct HashTable *iter, *tmp;\n    HASH_ITER(hh, hashTable, iter, tmp) {\n        if (iter->arr[1] == INT_MAX) {\n            ret[0] = iter->key;\n        }\n    }\n    ret[1] = query(&hashTable, ret[0])->arr[0];\n    for (int i = 2; i < n; i++) {\n        int* adj = query(&hashTable, ret[i - 1])->arr;\n        ret[i] = ret[i - 2] == adj[0] ? adj[1] : adj[0];\n    }\n    return ret;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar restoreArray = function(adjacentPairs) {\n    const map = new Map();\n    for (const adjacentPair of adjacentPairs) {\n        map.get(adjacentPair[0]) ? map.get(adjacentPair[0]).push(adjacentPair[1]) : map.set(adjacentPair[0], [adjacentPair[1]]);\n        map.get(adjacentPair[1]) ? map.get(adjacentPair[1]).push(adjacentPair[0]) : map.set(adjacentPair[1], [adjacentPair[0]]);\n    }\n\n    const n = adjacentPairs.length + 1;\n    const ret = new Array(n).fill(0);\n    for (const [e, adj] of map.entries()) {\n        if (adj.length === 1) {\n            ret[0] = e;\n            break;\n        }\n    }\n\n    ret[1] = map.get(ret[0])[0];\n    for (let i = 2; i < n; i++) {\n        const adj = map.get(ret[i - 1]);\n        ret[i] = ret[i - 2] == adj[0] ? adj[1] : adj[0];\n    }\n    return ret;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是原数组的长度。我们只需要遍历每一个元素一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是原数组的长度。主要为哈希表的开销。"
}