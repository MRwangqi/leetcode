{
	"titleSlug": "deep-dark-fraction",
	"slug": "by-masx200-t64y",
	"url": "https://leetcode-cn.com/problems/deep-dark-fraction/solution/by-masx200-t64y/",
	"content": "### 解题思路\n从后向前遍历\n这道题不需要求最大公约数\n### 代码\n\n```typescript\nfunction fraction(cont: number[]): number[] {\n  const result = cont.reduceRight((p, c) =>\n        fractionAdd(\n            [\n                new Fraction({ molecular: c, denominator: 1 }),\n                fractionReciprocal(\n                    p,\n                ),\n            ],\n        ), new Fraction({ molecular: 1, denominator: 0 }));\n    return [result.molecular, result.denominator];\n}\n function fractionReciprocal(fraction: Fraction): Fraction {\n    return new Fraction({\n        sign: fraction.sign,\n        denominator: fraction.molecular,\n        molecular: fraction.denominator,\n    });\n}\n function fractionAdd(fractions: Fraction[]): Fraction {\n    const denominator = deduplication(\n        fractions.map((f) => f.denominator),\n    ).reduce((a, b) => a * b);\n    const molecular = fractions\n        .map((f) => (f.sign * f.molecular * denominator) / f.denominator)\n        .reduce((a, b) => a + b);\n\n    return new Fraction({\n        denominator: denominator,\n        molecular: molecular,\n    });\n} class Fraction {\n    sign: number;\n    molecular: number;\n    denominator: number;\n\n    constructor({\n        sign = \"+\",\n        molecular = 1,\n        denominator = 1,\n    }: {\n        sign?: \"+\" | \"-\" | number;\n        molecular?: number | string;\n        denominator?: number | string;\n    } = {}) {\n        sign = sign || \"+\";\n        this.sign = (sign === \"+\" ? 1 : sign === \"-\" ? -1 : sign) *\n            Math.sign(Number(denominator)) *\n            Math.sign(Number(molecular));\n        this.molecular = Math.abs(Number(molecular));\n        this.denominator = Math.abs(Number(denominator));\n    }\n}function deduplication<T>(iter: Iterable<T>): Array<T> {\n    return Array.from(new Set(iter));\n}\n\n```"
}