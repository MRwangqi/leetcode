{
	"titleSlug": "same-tree",
	"slug": "xiang-tong-de-shu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/same-tree/solution/xiang-tong-de-shu-by-leetcode-solution/",
	"content": "#### 前言\n\n两个二叉树相同，当且仅当两个二叉树的结构完全相同，且所有对应节点的值相同。因此，可以通过搜索的方式判断两个二叉树是否相同。\n\n#### 方法一：深度优先搜索\n\n如果两个二叉树都为空，则两个二叉树相同。如果两个二叉树中有且只有一个为空，则两个二叉树一定不相同。\n\n如果两个二叉树都不为空，那么首先判断它们的根节点的值是否相同，若不相同则两个二叉树一定不同，若相同，再分别判断两个二叉树的左子树是否相同以及右子树是否相同。这是一个递归的过程，因此可以使用深度优先搜索，递归地判断两个二叉树是否相同。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/100/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/100/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/100/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/100/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/100/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/100/6.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        if (p == null && q == null) {\n            return true;\n        } else if (p == null || q == null) {\n            return false;\n        } else if (p.val != q.val) {\n            return false;\n        } else {\n            return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if not p and not q:\n            return True\n        elif not p or not q:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (p == nullptr && q == nullptr) {\n            return true;\n        } else if (p == nullptr || q == nullptr) {\n            return false;\n        } else if (p->val != q->val) {\n            return false;\n        } else {\n            return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\n        }\n    }\n};\n```\n\n```C [sol1-C]\nbool isSameTree(struct TreeNode* p, struct TreeNode* q) {\n    if (p == NULL && q == NULL) {\n        return true;\n    } else if (p == NULL || q == NULL) {\n        return false;\n    } else if (p->val != q->val) {\n        return false;\n    } else {\n        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\n    }\n}\n```\n\n```golang [sol1-Golang]\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    if p == nil && q == nil {\n        return true\n    }\n    if p == nil || q == nil {\n        return false\n    }\n    if p.Val != q.Val {\n        return false\n    }\n    return isSameTree(p.Left, q.Left) && isSameTree(p.Right, q.Right)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\min(m,n))$，其中 $m$ 和 $n$ 分别是两个二叉树的节点数。对两个二叉树同时进行深度优先搜索，只有当两个二叉树中的对应节点都不为空时才会访问到该节点，因此被访问到的节点数不会超过较小的二叉树的节点数。\n\n- 空间复杂度：$O(\\min(m,n))$，其中 $m$ 和 $n$ 分别是两个二叉树的节点数。空间复杂度取决于递归调用的层数，递归调用的层数不会超过较小的二叉树的最大高度，最坏情况下，二叉树的高度等于节点数。\n\n#### 方法二：广度优先搜索\n\n也可以通过广度优先搜索判断两个二叉树是否相同。同样首先判断两个二叉树是否为空，如果两个二叉树都不为空，则从两个二叉树的根节点开始广度优先搜索。\n\n使用两个队列分别存储两个二叉树的节点。初始时将两个二叉树的根节点分别加入两个队列。每次从两个队列各取出一个节点，进行如下比较操作。\n\n1. 比较两个节点的值，如果两个节点的值不相同则两个二叉树一定不同；\n\n2. 如果两个节点的值相同，则判断两个节点的子节点是否为空，如果只有一个节点的左子节点为空，或者只有一个节点的右子节点为空，则两个二叉树的结构不同，因此两个二叉树一定不同；\n\n3. 如果两个节点的子节点的结构相同，则将两个节点的非空子节点分别加入两个队列，子节点加入队列时需要注意顺序，如果左右子节点都不为空，则先加入左子节点，后加入右子节点。\n\n如果搜索结束时两个队列同时为空，则两个二叉树相同。如果只有一个队列为空，则两个二叉树的结构不同，因此两个二叉树不同。\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        if (p == null && q == null) {\n            return true;\n        } else if (p == null || q == null) {\n            return false;\n        }\n        Queue<TreeNode> queue1 = new LinkedList<TreeNode>();\n        Queue<TreeNode> queue2 = new LinkedList<TreeNode>();\n        queue1.offer(p);\n        queue2.offer(q);\n        while (!queue1.isEmpty() && !queue2.isEmpty()) {\n            TreeNode node1 = queue1.poll();\n            TreeNode node2 = queue2.poll();\n            if (node1.val != node2.val) {\n                return false;\n            }\n            TreeNode left1 = node1.left, right1 = node1.right, left2 = node2.left, right2 = node2.right;\n            if (left1 == null ^ left2 == null) {\n                return false;\n            }\n            if (right1 == null ^ right2 == null) {\n                return false;\n            }\n            if (left1 != null) {\n                queue1.offer(left1);\n            }\n            if (right1 != null) {\n                queue1.offer(right1);\n            }\n            if (left2 != null) {\n                queue2.offer(left2);\n            }\n            if (right2 != null) {\n                queue2.offer(right2);\n            }\n        }\n        return queue1.isEmpty() && queue2.isEmpty();\n    }\n}\n```\n\n```Python [sol2-Python]\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        \n        queue1 = collections.deque([p])\n        queue2 = collections.deque([q])\n\n        while queue1 and queue2:\n            node1 = queue1.popleft()\n            node2 = queue2.popleft()\n            if node1.val != node2.val:\n                return False\n            left1, right1 = node1.left, node1.right\n            left2, right2 = node2.left, node2.right\n            if (not left1) ^ (not left2):\n                return False\n            if (not right1) ^ (not right2):\n                return False\n            if left1:\n                queue1.append(left1)\n            if right1:\n                queue1.append(right1)\n            if left2:\n                queue2.append(left2)\n            if right2:\n                queue2.append(right2)\n\n        return not queue1 and not queue2\n```\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (p == nullptr && q == nullptr) {\n            return true;\n        } else if (p == nullptr || q == nullptr) {\n            return false;\n        }\n        queue <TreeNode*> queue1, queue2;\n        queue1.push(p);\n        queue2.push(q);\n        while (!queue1.empty() && !queue2.empty()) {\n            auto node1 = queue1.front();\n            queue1.pop();\n            auto node2 = queue2.front();\n            queue2.pop();\n            if (node1->val != node2->val) {\n                return false;\n            }\n            auto left1 = node1->left, right1 = node1->right, left2 = node2->left, right2 = node2->right;\n            if ((left1 == nullptr) ^ (left2 == nullptr)) {\n                return false;\n            }\n            if ((right1 == nullptr) ^ (right2 == nullptr)) {\n                return false;\n            }\n            if (left1 != nullptr) {\n                queue1.push(left1);\n            }\n            if (right1 != nullptr) {\n                queue1.push(right1);\n            }\n            if (left2 != nullptr) {\n                queue2.push(left2);\n            }\n            if (right2 != nullptr) {\n                queue2.push(right2);\n            }\n        }\n        return queue1.empty() && queue2.empty();\n    }\n};\n```\n\n```C [sol2-C]\nbool isSameTree(struct TreeNode* p, struct TreeNode* q) {\n    if (p == NULL && q == NULL) {\n        return true;\n    } else if (p == NULL || q == NULL) {\n        return false;\n    }\n    struct TreeNode** que1 = (struct TreeNode**)malloc(sizeof(struct TreeNode*));\n    struct TreeNode** que2 = (struct TreeNode**)malloc(sizeof(struct TreeNode*));\n    int queleft1 = 0, queright1 = 0;\n    int queleft2 = 0, queright2 = 0;\n    que1[queright1++] = p;\n    que2[queright2++] = q;\n    while (queleft1 < queright1 && queleft2 < queright2) {\n        struct TreeNode* node1 = que1[queleft1++];\n        struct TreeNode* node2 = que2[queleft2++];\n        if (node1->val != node2->val) {\n            return false;\n        }\n        struct TreeNode* left1 = node1->left;\n        struct TreeNode* right1 = node1->right;\n        struct TreeNode* left2 = node2->left;\n        struct TreeNode* right2 = node2->right;\n        if ((left1 == NULL) ^ (left2 == NULL)) {\n            return false;\n        }\n        if ((right1 == NULL) ^ (right2 == NULL)) {\n            return false;\n        }\n        if (left1 != NULL) {\n            queright1++;\n            que1 = realloc(que1, sizeof(struct TreeNode*) * queright1);\n            que1[queright1 - 1] = left1;\n        }\n        if (right1 != NULL) {\n            queright1++;\n            que1 = realloc(que1, sizeof(struct TreeNode*) * queright1);\n            que1[queright1 - 1] = right1;\n        }\n        if (left2 != NULL) {\n            queright2++;\n            que2 = realloc(que2, sizeof(struct TreeNode*) * queright2);\n            que2[queright2 - 1] = left2;\n        }\n        if (right2 != NULL) {\n            queright2++;\n            que2 = realloc(que2, sizeof(struct TreeNode*) * queright2);\n            que2[queright2 - 1] = right2;\n        }\n    }\n    return queleft1 == queright1 && queleft2 == queright2;\n}\n```\n\n```golang [sol2-Golang]\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    if p == nil && q == nil {\n        return true\n    }\n    if p == nil || q == nil {\n        return false\n    }\n    queue1, queue2 := []*TreeNode{p}, []*TreeNode{q}\n    for len(queue1) > 0 && len(queue2) > 0 {\n        node1, node2 := queue1[0], queue2[0]\n        queue1, queue2 = queue1[1:], queue2[1:]\n        if node1.Val != node2.Val {\n            return false\n        }\n        left1, right1 := node1.Left, node1.Right\n        left2, right2 := node2.Left, node2.Right\n        if (left1 == nil && left2 != nil) || (left1 != nil && left2 == nil) {\n            return false\n        }\n        if (right1 == nil && right2 != nil) || (right1 != nil && right2 == nil) {\n            return false\n        }\n        if left1 != nil {\n            queue1 = append(queue1, left1)\n        }\n        if right1 != nil {\n            queue1 = append(queue1, right1)\n        }\n        if left2 != nil {\n            queue2 = append(queue2, left2)\n        }\n        if right2 != nil {\n            queue2 = append(queue2, right2)\n        }\n    }\n    return len(queue1) == 0 && len(queue2) == 0\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\min(m,n))$，其中 $m$ 和 $n$ 分别是两个二叉树的节点数。对两个二叉树同时进行广度优先搜索，只有当两个二叉树中的对应节点都不为空时才会访问到该节点，因此被访问到的节点数不会超过较小的二叉树的节点数。\n\n- 空间复杂度：$O(\\min(m,n))$，其中 $m$ 和 $n$ 分别是两个二叉树的节点数。空间复杂度取决于队列中的元素个数，队列中的元素个数不会超过较小的二叉树的节点数。"
}