{
	"titleSlug": "count-numbers-with-unique-digits",
	"slug": "tong-ji-ge-wei-shu-zi-du-bu-tong-de-shu-iqbfn",
	"url": "https://leetcode-cn.com/problems/count-numbers-with-unique-digits/solution/tong-ji-ge-wei-shu-zi-du-bu-tong-de-shu-iqbfn/",
	"content": "#### 方法一：排列组合\n\n**思路**\n\n首先考虑两种边界情况：\n\n- 当 $n = 0$ 时，$0 \\le x \\lt 1$，$x$ 只有 $1$ 种选择，即 $0$。\n\n- 当 $n = 1$ 时，$0 \\le x \\lt 10$，$x$ 有 $10$ 种选择，即 $0 \\sim 9$。\n\n当 $n = 2$ 时，$0 \\le x \\lt 100$，$x$ 的选择可以由两部分构成：只有一位数的 $x$ 和有两位数的 $x$。只有一位数的 $x$ 可以由上述的边界情况计算。有两位数的 $x$ 可以由组合数学进行计算：第一位的选择有 $9$ 种，即 $1 \\sim 9$，第二位的选择也有 $9$ 种，即 $0 \\sim 9$ 中除去第一位的选择。\n\n更一般地，含有 $d$ （$2 \\le d \\le 10$）位数的各位数字都不同的数字 $x$ 的个数可以由公式 $9 \\times A_9^{d-1}$ 计算。再加上含有小于 $d$ 位数的各位数字都不同的数字 $x$ 的个数，即可得到答案。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        res, cur = 10, 9\n        for i in range(n - 1):\n            cur *= 9 - i\n            res += cur\n        return res\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countNumbersWithUniqueDigits(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 10;\n        }\n        int ans = 10, cur = 9;\n        for (int i = 0; i < n - 1; ++i) {\n            cur *= 9 - i;\n            ans += cur;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countNumbersWithUniqueDigits(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 10;\n        }\n        int res = 10, cur = 9;\n        for (int i = 0; i < n - 1; i++) {\n            cur *= 9 - i;\n            res += cur;\n        }\n        return res;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int CountNumbersWithUniqueDigits(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 10;\n        }\n        int res = 10, cur = 9;\n        for (int i = 0; i < n - 1; i++) {\n            cur *= 9 - i;\n            res += cur;\n        }\n        return res;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc countNumbersWithUniqueDigits(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 10\n    }\n    ans, cur := 10, 9\n    for i := 0; i < n-1; i++ {\n        cur *= 9 - i\n        ans += cur\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nint countNumbersWithUniqueDigits(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return 10;\n    }\n    int ans = 10, cur = 9;\n    for (int i = 0; i < n - 1; ++i) {\n        cur *= 9 - i;\n        ans += cur;\n    }\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar countNumbersWithUniqueDigits = function(n) {\n    if (n === 0) {\n        return 1;\n    }\n    if (n === 1) {\n        return 10;\n    }\n    let res = 10, cur = 9;\n    for (let i = 0; i < n - 1; i++) {\n        cur *= 9 - i;\n        res += cur;\n    }\n    return res;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。仅使用一个循环。\n\n- 空间复杂度：$O(1)$。仅使用常数空间。"
}