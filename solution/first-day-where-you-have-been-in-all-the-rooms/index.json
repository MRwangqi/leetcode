{
	"titleSlug": "first-day-where-you-have-been-in-all-the-rooms",
	"slug": "qian-zhui-he-you-hua-dp-by-endlesscheng-j10b",
	"url": "https://leetcode-cn.com/problems/first-day-where-you-have-been-in-all-the-rooms/solution/qian-zhui-he-you-hua-dp-by-endlesscheng-j10b/",
	"content": "定义状态 $f[i]$ 表示从首次访问房间 $i$ 到访问房间 $i+1$ 之前所需要的天数。\r\n\r\n根据题意，首次访问房间 $i$ 时，下一天是一定要回到 $j=\\textit{nextVisit}[i]$ 房间的，下文简称为「回访」。如果从房间 $i$ 回访到房间 $j$，此时 $[j,i-1]$ 范围内的房间必然都处于访问过偶数次的状态，这意味着从 $j$ 到 $i$ 的过程中，我们需要回访 $[j,i-1]$ 范围内的每个房间。加上访问房间 $i$ 的 $2$ 天，于是有转移方程：\r\n\r\n$$\r\nf[i] = 2 + \\sum_{k=j}^{i-1} f[k]\r\n$$\r\n\r\n其中和式可以用前缀和优化，这样单次转移就是 $O(1)$ 的。\r\n\r\n代码实现时，可以略去数组 $f$，直接将其记录在前缀和 $\\textit{sum}$ 中。\r\n\r\n最后还需要加上访问第 $n-1$ 号房间的 $1$ 天开销，但由于天数是从 $0$ 开始的，答案需要减 $1$，所以最后答案为 $\\textit{sum}[n-1]+1-1=\\textit{sum}[n-1]$。\r\n\r\n```go\r\nfunc firstDayBeenInAllRooms(nextVisit []int) int {\r\n\tconst mod int = 1e9 + 7\r\n\tn := len(nextVisit)\r\n\tsum := make([]int, n)\r\n\tfor i, j := range nextVisit[:n-1] { // 不用考虑最后一天\r\n\t\tf := (2 + sum[i] - sum[j] + mod) % mod // +mod 是为了防止出现负数\r\n\t\tsum[i+1] = (sum[i] + f) % mod\r\n\t}\r\n\treturn sum[n-1]\r\n}\r\n```"
}