{
	"titleSlug": "heaters",
	"slug": "gong-nuan-qi-by-leetcode-solution-rwui",
	"url": "https://leetcode-cn.com/problems/heaters/solution/gong-nuan-qi-by-leetcode-solution-rwui/",
	"content": "#### 方法一：排序 + 二分查找\n\n**思路和算法**\n\n为了使供暖器可以覆盖所有房屋且供暖器的加热半径最小，对于每个房屋，应该选择离该房屋最近的供暖器覆盖该房屋，最近的供暖器和房屋的距离即为该房屋需要的供暖器的最小加热半径。所有房屋需要的供暖器的最小加热半径中的最大值即为可以覆盖所有房屋的最小加热半径。\n\n为了得到距离每个房屋最近的供暖器，可以将供暖器数组 $\\textit{heaters}$ 排序，然后通过二分查找得到距离最近的供暖器。\n\n具体而言，对于每个房屋 $\\textit{house}$，需要在有序数组 $\\textit{heaters}$ 中找到最大的下标 $i$，使得 $\\textit{heaters}[i] \\le \\textit{house}$，特别地，当 $\\textit{heaters}[0] > \\textit{house}$ 时，$i = -1$。在得到下标 $i$ 之后，令 $j = i + 1$，则 $j$ 是满足 $\\textit{heaters}[j] > \\textit{house}$ 的最小下标。特别地，当 $\\textit{heaters}[n - 1] \\le \\textit{house}$ 时，$j = n$，其中 $n$ 是数组 $\\textit{heaters}$ 的长度。\n\n得到下标 $i$ 和 $j$ 之后，离房屋 $\\textit{house}$ 最近的供暖器为 $\\textit{heaters}[i]$ 或 $\\textit{heaters}[j]$，分别计算这两个供暖器和房屋 $\\textit{house}$ 的距离，其中的最小值即为该房屋需要的供暖器的最小加热半径。对于 $i = -1$ 或 $j = n$ 的下标越界情况，只要将对应的距离设为 $+\\infty$ 即可。\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    public int findRadius(int[] houses, int[] heaters) {\n        int ans = 0;\n        Arrays.sort(heaters);\n        for (int house : houses) {\n            int i = binarySearch(heaters, house);\n            int j = i + 1;\n            int leftDistance = i < 0 ? Integer.MAX_VALUE : house - heaters[i];\n            int rightDistance = j >= heaters.length ? Integer.MAX_VALUE : heaters[j] - house;\n            int curDistance = Math.min(leftDistance, rightDistance);\n            ans = Math.max(ans, curDistance);\n        }\n        return ans;\n    }\n\n    public int binarySearch(int[] nums, int target) {\n        int left = 0, right = nums.length - 1;\n        if (nums[left] > target) {\n            return -1;\n        }\n        while (left < right) {\n            int mid = (right - left + 1) / 2 + left;\n            if (nums[mid] > target) {\n                right = mid - 1;\n            } else {\n                left = mid;\n            }\n        }\n        return left;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int FindRadius(int[] houses, int[] heaters) {\n        int ans = 0;\n        Array.Sort(heaters);\n        foreach (int house in houses) {\n            int i = BinarySearch(heaters, house);\n            int j = i + 1;\n            int leftDistance = i < 0 ? int.MaxValue : house - heaters[i];\n            int rightDistance = j >= heaters.Length ? int.MaxValue : heaters[j] - house;\n            int curDistance = Math.Min(leftDistance, rightDistance);\n            ans = Math.Max(ans, curDistance);\n        }\n        return ans;\n    }\n\n    public int BinarySearch(int[] nums, int target) {\n        int left = 0, right = nums.Length - 1;\n        if (nums[left] > target) {\n            return -1;\n        }\n        while (left < right) {\n            int mid = (right - left + 1) / 2 + left;\n            if (nums[mid] > target) {\n                right = mid - 1;\n            } else {\n                left = mid;\n            }\n        }\n        return left;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findRadius(vector<int> &houses, vector<int> &heaters) {\n        int ans = 0;\n        sort(heaters.begin(), heaters.end());\n        for (int house: houses) {\n            int j = upper_bound(heaters.begin(), heaters.end(), house) - heaters.begin();\n            int i = j - 1;\n            int rightDistance = j >= heaters.size() ? INT_MAX : heaters[j] - house;\n            int leftDistance = i < 0 ? INT_MAX : house - heaters[i];\n            int curDistance = min(leftDistance, rightDistance);\n            ans = max(ans, curDistance);\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        ans = 0\n        heaters.sort()\n        for house in houses:\n            j = bisect_right(heaters, house)\n            i = j - 1\n            rightDistance = heaters[j] - house if j < len(heaters) else float('inf')\n            leftDistance = house - heaters[i] if i >= 0 else float('inf')\n            curDistance = min(leftDistance, rightDistance)\n            ans = max(ans, curDistance)\n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar findRadius = function(houses, heaters) {\n    let ans = 0;\n    heaters.sort((a, b) => a - b);\n    for (const house of houses) {\n        const i = binarySearch(heaters, house);\n        const j = i + 1;\n        const leftDistance = i < 0 ? Number.MAX_VALUE : house - heaters[i];\n        const rightDistance = j >= heaters.length ? Number.MAX_VALUE : heaters[j] - house;\n        const curDistance = Math.min(leftDistance, rightDistance);\n        ans = Math.max(ans, curDistance);\n    }\n    return ans;\n};\n\nconst binarySearch = (nums, target) => {\n    let left = 0, right = nums.length - 1;\n    if (nums[left] > target) {\n        return -1;\n    }\n    while (left < right) {\n        const mid = Math.floor((right - left + 1) / 2) + left;\n        if (nums[mid] > target) {\n            right = mid - 1;\n        } else {\n            left = mid;\n        }\n    }\n    return left;\n}\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nint binarySearch(const int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    if (nums[left] > target) {\n        return -1;\n    }\n    while (left < right) {\n        int mid = (right - left + 1) / 2 + left;\n        if (nums[mid] > target) {\n            right = mid - 1;\n        } else {\n            left = mid;\n        }\n    }\n    return left;\n}\n\nint cmp(const void* a, const void* b) {\n    int* pa = (int*)a;\n    int* pb = (int*)b;\n    return *pa - *pb;\n}\n\nint findRadius(int* houses, int housesSize, int* heaters, int heatersSize){\n    int ans = 0;\n    qsort(heaters, heatersSize, sizeof(int), cmp);\n    for (int k = 0; k < housesSize; ++k) {\n        int i = binarySearch(heaters, heatersSize, houses[k]);\n        int j = i + 1;\n        int leftDistance = i < 0 ? INT_MAX : houses[k] - heaters[i];\n        int rightDistance = j >= heatersSize ? INT_MAX : heaters[j] - houses[k];\n        int curDistance = MIN(leftDistance, rightDistance);\n        ans = MAX(ans, curDistance);\n    }\n    return ans;\n}\n```\n\n```go [sol1-Golang]\nfunc findRadius(houses, heaters []int) (ans int) {\n    sort.Ints(heaters)\n    for _, house := range houses {\n        j := sort.SearchInts(heaters, house+1)\n        minDis := math.MaxInt32\n        if j < len(heaters) {\n            minDis = heaters[j] - house\n        }\n        i := j - 1\n        if i >= 0 && house-heaters[i] < minDis {\n            minDis = house - heaters[i]\n        }\n        if minDis > ans {\n            ans = minDis\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O((n + m) \\log n)$，其中 $m$ 是数组 $\\textit{houses}$ 的长度，$n$ 是数组 $\\textit{heaters}$ 的长度。\n  对数组 $\\textit{heaters}$ 排序需要 $O(n \\log n)$ 的时间。\n  使用二分查找对每个房屋寻找距离最近的供暖器，每次二分查找需要 $O(\\log n)$ 的时间，有 $m$ 个房屋，因此需要 $O(m \\log n)$ 的时间。\n  总时间复杂度是 $O((n + m) \\log n)$。\n\n- 空间复杂度：$O(\\log n)$，其中 $n$ 是数组 $\\textit{heaters}$ 的长度。空间复杂度主要取决于排序所需要的空间。\n\n#### 方法二：排序 + 双指针\n\n**思路和算法**\n\n也可以使用双指针寻找和每个房屋距离最近的供暖器。首先对房屋数组 $\\textit{houses}$ 和供暖器数组 $\\textit{heaters}$ 排序，然后同时遍历两个数组。\n\n分别用 $m$ 和 $n$ 表示数组 $\\textit{houses}$ 和 $\\textit{heaters}$ 的长度。对于每个 $0 \\le i < m$，需要找到下标 $j$ 使得 $\\Big|\\textit{houses}[i] - \\textit{heaters}[j]\\Big|$ 最小，则 $\\textit{heaters}[j]$ 是和 $\\textit{houses}[i]$ 距离最近的供暖器。初始时，$i = j = 0$。\n\n从左到右依次遍历数组 $\\textit{houses}$，对于每个下标 $i$，需要维护离 $\\textit{houses}[i]$ 最近的供暖器的距离，将距离初始化为 $\\textit{houses}[i] - \\textit{heaters}[j]$。只要 $\\textit{heaters}[j]$ 和当前房屋的距离大于等于 $\\textit{heaters}[j + 1]$ 和当前房屋的距离，则将 $j$ 加 $1$，直到 $j = n - 1$ 或者 $\\textit{heaters}[j]$ 和当前房屋的距离小于 $\\textit{heaters}[j + 1]$ 和当前房屋的距离，此时 $\\textit{heaters}[j]$ 为离 $\\textit{houses}[i]$ 最近的供暖器，$\\textit{heaters}[j]$ 和当前房屋的距离即为当前房屋和最近的供暖器的距离。\n\n遍历完所有房屋之后，即可得到可以覆盖所有房屋的最小加热半径。\n\n**证明**\n\n上述做法中，假设在 $\\textit{houses}[i]$ 处的 $j$ 初始值是 $j_0$，则可以保证得到的 $\\textit{heaters}[j]$ 是在 $j \\ge j_0$ 的情况下和 $\\textit{houses}[i]$ 距离最近的供暖器。为了确保和 $\\textit{houses}[i]$ 距离最近的供暖器是 $\\textit{heaters}[j]$，还需要证明对任意 $j' < j_0$ 都有 $\\Big|\\textit{houses}[i] - \\textit{heaters}[j']\\Big| \\ge \\Big|\\textit{houses}[i] - \\textit{heaters}[j]\\Big|$。可以通过数学归纳法证明。\n\n1. 当 $i = 0$ 时，$j_0 = 0$，因此不存在 $j' < j_0$ 使得 $\\Big|\\textit{houses}[i] - \\textit{heaters}[j']\\Big| < \\Big|\\textit{houses}[i] - \\textit{heaters}[j]\\Big|$。\n\n2. 当 $i > 0$ 时，假设和 $\\textit{houses}[i - 1]$ 距离最近的供暖器是 $\\textit{heaters}[j_0]$ 且不存在 $j' < j_0$ 使得 $\\textit{heaters}[j']$ 和 $\\textit{houses}[i - 1]$ 的距离更小，则对于 $\\textit{houses}[i]$，$j$ 从 $j_0$ 开始向右遍历。\n\n   - 如果 $\\textit{houses}[i] \\ge \\textit{heaters}[j]$，则 $\\Big|\\textit{houses}[i] - \\textit{heaters}[j]\\Big| = \\textit{houses}[i] - \\textit{heaters}[j]$。由于 $j' < j_0 \\le j$，因此 $\\textit{heaters}[j'] \\le \\textit{heaters}[j]$，$\\textit{houses}[i] - \\textit{heaters}[j'] \\ge \\textit{houses}[i] - \\textit{heaters}[j]$，即 $\\textit{heaters}[j']$ 和 $\\textit{houses}[i]$ 的距离不可能小于 $\\textit{heaters}[j]$ 和 $\\textit{houses}[i]$ 的距离。\n\n   ![fig1](https://assets.leetcode-cn.com/solution-static/475/1.png)\n\n   - 如果 $\\textit{houses}[i] < \\textit{heaters}[j]$，则一定有 $j = j_0$ 或 $\\textit{houses}[i] > \\textit{heaters}[j_0]$，否则 $\\textit{heaters}[j_0]$ 和 $\\textit{houses}[i]$ 的距离更近，矛盾。\n\n      - 如果 $j = j_0$，则根据 $\\textit{heaters}[j_0]$ 是和 $\\textit{houses}[i - 1]$ 距离最近的供暖器可知，对于任意 $j' < j_0$，一定有 $\\textit{houses}[i] \\ge \\textit{houses}[i - 1] > \\textit{heaters}[j']$，$\\textit{houses}[i - 1] - \\textit{heaters}[j'] \\ge \\textit{heaters}[j_0] - \\textit{houses}[i - 1]$，由于 $\\textit{houses}[i - 1] \\le \\textit{houses}[i]$ 因此有 $\\textit{houses}[i] - \\textit{heaters}[j'] \\ge \\textit{heaters}[j_0] - \\textit{houses}[i]$。\n\n      - 如果 $\\textit{houses}[i] > \\textit{heaters}[j_0]$，则对于任意 $j' < j_0$，$\\textit{heaters}[j']$ 和 $\\textit{houses}[i]$ 的距离不可能小于 $\\textit{heaters}[j_0]$ 和 $\\textit{houses}[i]$ 的距离，因此 $\\textit{heaters}[j']$ 和 $\\textit{houses}[i]$ 的距离不可能小于 $\\textit{heaters}[j]$ 和 $\\textit{houses}[i]$ 的距离。\n\n   ![fig2](https://assets.leetcode-cn.com/solution-static/475/2.png)\n\n   因此对于 $\\textit{houses}[i]$，不存在 $j' < j_0$ 使得 $\\textit{heaters}[j']$ 和 $\\textit{houses}[i]$ 的距离更小。\n\n**代码**\n\n```Java [sol2-Java]\nclass Solution {\n    public int findRadius(int[] houses, int[] heaters) {\n        Arrays.sort(houses);\n        Arrays.sort(heaters);\n        int ans = 0;\n        for (int i = 0, j = 0; i < houses.length; i++) {\n            int curDistance = Math.abs(houses[i] - heaters[j]);\n            while (j < heaters.length - 1 && Math.abs(houses[i] - heaters[j]) >= Math.abs(houses[i] - heaters[j + 1])) {\n                j++;\n                curDistance = Math.min(curDistance, Math.abs(houses[i] - heaters[j]));\n            }\n            ans = Math.max(ans, curDistance);\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int FindRadius(int[] houses, int[] heaters) {\n        Array.Sort(houses);\n        Array.Sort(heaters);\n        int ans = 0;\n        for (int i = 0, j = 0; i < houses.Length; i++) {\n            int curDistance = Math.Abs(houses[i] - heaters[j]);\n            while (j < heaters.Length - 1 && Math.Abs(houses[i] - heaters[j]) >= Math.Abs(houses[i] - heaters[j + 1])) {\n                j++;\n                curDistance = Math.Min(curDistance, Math.Abs(houses[i] - heaters[j]));\n            }\n            ans = Math.Max(ans, curDistance);\n        }\n        return ans;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int findRadius(vector<int>& houses, vector<int>& heaters) {\n        sort(houses.begin(), houses.end());\n        sort(heaters.begin(), heaters.end());\n        int ans = 0;\n        for (int i = 0, j = 0; i < houses.size(); i++) {\n            int curDistance = abs(houses[i] - heaters[j]);\n            while (j < heaters.size() - 1 && abs(houses[i] - heaters[j]) >= abs(houses[i] - heaters[j + 1])) {\n                j++;\n                curDistance = min(curDistance, abs(houses[i] - heaters[j]));\n            }\n            ans = max(ans, curDistance);\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        ans = 0\n        houses.sort()\n        heaters.sort()\n        j = 0\n        for i, house in enumerate(houses):\n            curDistance = abs(house - heaters[j])\n            while j + 1 < len(heaters) and abs(houses[i] - heaters[j]) >= abs(houses[i] - heaters[j + 1]):\n                j += 1\n                curDistance = min(curDistance, abs(houses[i] - heaters[j]))\n            ans = max(ans, curDistance)\n        return ans\n```\n\n```JavaScript [sol2-JavaScript]\nvar findRadius = function(houses, heaters) {\n    houses.sort((a, b) => a - b);\n    heaters.sort((a, b) => a - b);\n    let ans = 0;\n    for (let i = 0, j = 0; i < houses.length; i++) {\n        let curDistance = Math.abs(houses[i] - heaters[j]);\n        while (j < heaters.length - 1 && Math.abs(houses[i] - heaters[j]) >= Math.abs(houses[i] - heaters[j + 1])) {\n            j++;\n            curDistance = Math.min(curDistance, Math.abs(houses[i] - heaters[j]));\n        }\n        ans = Math.max(ans, curDistance);\n    }\n    return ans;\n};\n```\n\n```C [sol2-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nint cmp(const void* a, const void* b) {\n    int* pa = (int*)a;\n    int* pb = (int*)b;\n    return *pa - *pb;\n}\n\nint findRadius(int* houses, int housesSize, int* heaters, int heatersSize){\n    int ans = 0;\n    qsort(heaters, heatersSize, sizeof(int), cmp);\n    qsort(houses, housesSize, sizeof(int), cmp);\n    for (int i = 0, j = 0; i < housesSize; i++) {\n        int curDistance = abs(houses[i] - heaters[j]);\n        while (j < heatersSize - 1 && abs(houses[i] - heaters[j]) >= abs(houses[i] - heaters[j + 1])) {\n            j++;\n            curDistance = MIN(curDistance, abs(houses[i] - heaters[j]));\n        }\n        ans = MAX(ans, curDistance);\n    }\n    return ans;    \n}\n```\n\n```go [sol2-Golang]\nfunc findRadius(houses, heaters []int) (ans int) {\n    sort.Ints(houses)\n    sort.Ints(heaters)\n    j := 0\n    for _, house := range houses {\n        dis := abs(house - heaters[j])\n        for j+1 < len(heaters) && abs(house-heaters[j]) >= abs(house-heaters[j+1]) {\n            j++\n            if abs(house-heaters[j]) < dis {\n                dis = abs(house - heaters[j])\n            }\n        }\n        if dis > ans {\n            ans = dis\n        }\n    }\n    return\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\log m + n \\log n)$，其中 $m$ 是数组 $\\textit{houses}$ 的长度，$n$ 是数组 $\\textit{heaters}$ 的长度。\n  对数组 $\\textit{houses}$ 和 $\\textit{heaters}$ 排序分别需要 $O(m \\log m)$ 和 $O(n \\log n)$ 的时间。\n  使用双指针遍历两个数组需要 $O(m + n)$ 的时间。\n  由于在渐进意义下 $O(m + n)$ 小于 $O(m \\log m + n \\log n)$，因此总时间复杂度是 $O(m \\log m + n \\log n)$。\n\n- 空间复杂度：$O(\\log m + \\log n)$，其中 $m$ 是数组 $\\textit{houses}$ 的长度，$n$ 是数组 $\\textit{heaters}$ 的长度。空间复杂度主要取决于排序所需要的空间。"
}