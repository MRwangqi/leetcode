{
	"titleSlug": "minimum-size-subarray-sum",
	"slug": "chang-du-zui-xiao-de-zi-shu-zu-by-leetcode-solutio",
	"url": "https://leetcode-cn.com/problems/minimum-size-subarray-sum/solution/chang-du-zui-xiao-de-zi-shu-zu-by-leetcode-solutio/",
	"content": "#### 方法一：暴力法\n\n暴力法是最直观的方法。初始化子数组的最小长度为无穷大，枚举数组 $\\text{nums}$ 中的每个下标作为子数组的开始下标，对于每个开始下标 $i$，需要找到大于或等于 $i$ 的最小下标 $j$，使得从 $\\text{nums}[i]$ 到 $\\text{nums}[j]$ 的元素和大于或等于 $s$，并更新子数组的最小长度（此时子数组的长度是 $j-i+1$）。\n\n注意：使用 `Python` 语言实现方法一会超出时间限制。\n\n```Java [sol1-Java]\nclass Solution {\n    public int minSubArrayLen(int s, int[] nums) {\n        int n = nums.length;\n        if (n == 0) {\n            return 0;\n        }\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums[j];\n                if (sum >= s) {\n                    ans = Math.min(ans, j - i + 1);\n                    break;\n                }\n            }\n        }\n        return ans == Integer.MAX_VALUE ? 0 : ans;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n        int ans = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums[j];\n                if (sum >= s) {\n                    ans = min(ans, j - i + 1);\n                    break;\n                }\n            }\n        }\n        return ans == INT_MAX ? 0 : ans;\n    }\n};\n```\n\n```csharp [sol1-C#]\npublic class Solution {\n    public int MinSubArrayLen(int s, int[] nums) \n    {\n        int n = nums.Length;\n        if (n == 0) \n        {\n            return 0;\n        }\n\n        int ans = int.MaxValue;\n        for (int i = 0; i < n; ++i) \n        {\n            int sum = 0;\n            for (int j = i; j < n; ++j) \n            {\n                sum += nums[j];\n                if (sum >= s)\n                {\n                    ans = Math.Min(ans, j - i + 1);\n                    break;\n                }\n            }\n        }\n\n        return ans == int.MaxValue ? 0 : ans;\n    }\n}\n```\n\n```golang [sol1-Golang]\nfunc minSubArrayLen(s int, nums []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n    ans := math.MaxInt32\n    for i := 0; i < n; i++ {\n        sum := 0\n        for j := i; j < n; j++ {\n            sum += nums[j]\n            if sum >= s {\n                ans = min(ans, j - i + 1)\n                break\n            }\n        }\n    }\n    if ans == math.MaxInt32 {\n        return 0\n    }\n    return ans\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minSubArrayLen(self, s: int, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        n = len(nums)\n        ans = n + 1\n        for i in range(n):\n            total = 0\n            for j in range(i, n):\n                total += nums[j]\n                if total >= s:\n                    ans = min(ans, j - i + 1)\n                    break\n        \n        return 0 if ans == n + 1 else ans\n```\n\n```C [sol1-C]\nint minSubArrayLen(int s, int* nums, int numsSize) {\n    if (numsSize == 0) {\n        return 0;\n    }\n    int ans = INT_MAX;\n    for (int i = 0; i < numsSize; i++) {\n        int sum = 0;\n        for (int j = i; j < numsSize; j++) {\n            sum += nums[j];\n            if (sum >= s) {\n                ans = fmin(ans, j - i + 1);\n                break;\n            }\n        }\n    }\n    return ans == INT_MAX ? 0 : ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组的长度。需要遍历每个下标作为子数组的开始下标，对于每个开始下标，需要遍历其后面的下标得到长度最小的子数组。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：前缀和 + 二分查找\n\n方法一的时间复杂度是 $O(n^2)$，因为在确定每个子数组的开始下标后，找到长度最小的子数组需要 $O(n)$ 的时间。如果使用二分查找，则可以将时间优化到 $O(\\log n)$。\n\n为了使用二分查找，需要额外创建一个数组 $\\text{sums}$ 用于存储数组 $\\text{nums}$ 的前缀和，其中 $\\text{sums}[i]$ 表示从 $\\text{nums}[0]$ 到 $\\text{nums}[i-1]$ 的元素和。得到前缀和之后，对于每个开始下标 $i$，可通过二分查找得到大于或等于 $i$ 的最小下标 $\\textit{bound}$，使得 $\\text{sums}[\\textit{bound}]-\\text{sums}[i-1] \\ge s$，并更新子数组的最小长度（此时子数组的长度是 $\\textit{bound}-(i-1)$）。\n\n**因为这道题保证了数组中每个元素都为正，所以前缀和一定是递增的，这一点保证了二分的正确性。如果题目没有说明数组中每个元素都为正，这里就不能使用二分来查找这个位置了。**\n\n在很多语言中，都有现成的库和函数来为我们实现这里二分查找大于等于某个数的第一个位置的功能，比如 `C++` 的 `lower_bound`，`Java` 中的 `Arrays.binarySearch`，`C#` 中的 `Array.BinarySearch`，Python 中的 `bisect.bisect_left`。但是有时面试官可能会让我们自己实现一个这样的二分查找函数，这里给出一个 `C#` 的版本，供读者参考：\n\n```csharp [lowerbound-C#]\nprivate int LowerBound(int[] a, int l, int r, int target) \n{\n    int mid = -1, originL = l, originR = r;\n    while (l < r) \n    {\n        mid = (l + r) >> 1;\n        if (a[mid] < target) l = mid + 1;\n        else r = mid;\n    } \n\n    return (a[l] >= target) ? l : -1;\n}\n```\n\n下面是这道题的代码。\n\n```Java [sol2-Java]\nclass Solution {\n    public int minSubArrayLen(int s, int[] nums) {\n        int n = nums.length;\n        if (n == 0) {\n            return 0;\n        }\n        int ans = Integer.MAX_VALUE;\n        int[] sums = new int[n + 1]; \n        // 为了方便计算，令 size = n + 1 \n        // sums[0] = 0 意味着前 0 个元素的前缀和为 0\n        // sums[1] = A[0] 前 1 个元素的前缀和为 A[0]\n        // 以此类推\n        for (int i = 1; i <= n; i++) {\n            sums[i] = sums[i - 1] + nums[i - 1];\n        }\n        for (int i = 1; i <= n; i++) {\n            int target = s + sums[i - 1];\n            int bound = Arrays.binarySearch(sums, target);\n            if (bound < 0) {\n                bound = -bound - 1;\n            }\n            if (bound <= n) {\n                ans = Math.min(ans, bound - (i - 1));\n            }\n        }\n        return ans == Integer.MAX_VALUE ? 0 : ans;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n        int ans = INT_MAX;\n        vector<int> sums(n + 1, 0); \n        // 为了方便计算，令 size = n + 1 \n        // sums[0] = 0 意味着前 0 个元素的前缀和为 0\n        // sums[1] = A[0] 前 1 个元素的前缀和为 A[0]\n        // 以此类推\n        for (int i = 1; i <= n; i++) {\n            sums[i] = sums[i - 1] + nums[i - 1];\n        }\n        for (int i = 1; i <= n; i++) {\n            int target = s + sums[i - 1];\n            auto bound = lower_bound(sums.begin(), sums.end(), target);\n            if (bound != sums.end()) {\n                ans = min(ans, static_cast<int>((bound - sums.begin()) - (i - 1)));\n            }\n        }\n        return ans == INT_MAX ? 0 : ans;\n    }\n};\n```\n\n```csharp [sol2-C#]\npublic class Solution {\n    private int LowerBound(int[] a, int l, int r, int target) \n    {\n        int mid = -1, originL = l, originR = r;\n        while (l < r) \n        {\n            mid = (l + r) >> 1;\n            if (a[mid] < target) l = mid + 1;\n            else r = mid;\n        } \n\n        return (a[l] >= target) ? l : -1;\n    }\n\n    public int MinSubArrayLen(int s, int[] nums) \n    {\n        int n = nums.Length;\n        if (n == 0) \n        {\n            return 0;\n        }\n\n        int ans = int.MaxValue;\n        int[] sums = new int[n + 1]; \n        // 为了方便计算，令 size = n + 1 \n        // sums[0] = 0 意味着前 0 个元素的前缀和为 0\n        // sums[1] = A[0] 前 1 个元素的前缀和为 A[0]\n        // 以此类推\n        for (int i = 1; i <= n; ++i) \n        {\n            sums[i] = sums[i - 1] + nums[i - 1];\n        }\n\n        for (int i = 1; i <= n; ++i) \n        {\n            int target = s + sums[i - 1];\n            int bound = LowerBound(sums, i, n, target);\n            if (bound != -1)\n            {\n                ans = Math.Min(ans, bound - i + 1);\n            }\n        }\n\n        return ans == int.MaxValue ? 0 : ans;\n    }\n}\n```\n\n```golang [sol2-Golang]\nfunc minSubArrayLen(s int, nums []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n    ans := math.MaxInt32\n    sums := make([]int, n + 1)\n    // 为了方便计算，令 size = n + 1 \n    // sums[0] = 0 意味着前 0 个元素的前缀和为 0\n    // sums[1] = A[0] 前 1 个元素的前缀和为 A[0]\n    // 以此类推\n    for i := 1; i <= n; i++ {\n        sums[i] = sums[i - 1] + nums[i - 1]\n    }\n    for i := 1; i <= n; i++ {\n        target := s + sums[i-1]\n        bound := sort.SearchInts(sums, target)\n        if bound < 0 {\n            bound = -bound - 1\n        }\n        if bound <= n {\n            ans = min(ans, bound - (i - 1))\n        }\n    }\n    if ans == math.MaxInt32 {\n        return 0\n    }\n    return ans\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def minSubArrayLen(self, s: int, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        n = len(nums)\n        ans = n + 1\n        sums = [0]\n        for i in range(n):\n            sums.append(sums[-1] + nums[i])\n        \n        for i in range(1, n + 1):\n            target = s + sums[i - 1]\n            bound = bisect.bisect_left(sums, target)\n            if bound != len(sums):\n                ans = min(ans, bound - (i - 1))\n        \n        return 0 if ans == n + 1 else ans\n```\n\n```C [sol2-C]\nint lower_bound(int *a, int l, int r, int q) {\n    if (a[r] < q) return -1;\n    while (l < r) {\n        int mid = (l + r) >> 1;\n        if (a[mid] >= q) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;\n}\nint minSubArrayLen(int s, int *nums, int numsSize) {\n    if (numsSize == 0) {\n        return 0;\n    }\n    int ans = INT_MAX;\n    int *sums = (int *)malloc(sizeof(int) * (numsSize + 1));\n    // 为了方便计算，令 size = n + 1\n    // sums[0] = 0 意味着前 0 个元素的前缀和为 0\n    // sums[1] = A[0] 前 1 个元素的前缀和为 A[0]\n    // 以此类推\n    for (int i = 1; i <= numsSize; i++) {\n        sums[i] = sums[i - 1] + nums[i - 1];\n    }\n    for (int i = 1; i <= numsSize; i++) {\n        int target = s + sums[i - 1];\n        int bound = lower_bound(sums, 1, numsSize, target);\n        if (bound != -1) {\n            ans = fmin(ans, bound - (i - 1));\n        }\n    }\n    return ans == INT_MAX ? 0 : ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组的长度。需要遍历每个下标作为子数组的开始下标，遍历的时间复杂度是 $O(n)$，对于每个开始下标，需要通过二分查找得到长度最小的子数组，二分查找得时间复杂度是 $O(\\log n)$，因此总时间复杂度是 $O(n \\log n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组的长度。额外创建数组 $\\text{sums}$ 存储前缀和。\n\n#### 方法三：滑动窗口\n\n在方法一和方法二中，都是每次确定子数组的开始下标，然后得到长度最小的子数组，因此时间复杂度较高。为了降低时间复杂度，可以使用滑动窗口的方法。\n\n定义两个指针 $\\textit{start}$ 和 $\\textit{end}$ 分别表示子数组（滑动窗口窗口）的开始位置和结束位置，维护变量 $\\textit{sum}$ 存储子数组中的元素和（即从 $\\text{nums}[\\textit{start}]$ 到 $\\text{nums}[\\textit{end}]$ 的元素和）。\n\n初始状态下，$\\textit{start}$ 和 $\\textit{end}$ 都指向下标 $0$，$\\textit{sum}$ 的值为 $0$。\n\n每一轮迭代，将 $\\text{nums}[end]$ 加到 $\\textit{sum}$，如果 $\\textit{sum} \\ge s$，则更新子数组的最小长度（此时子数组的长度是 $\\textit{end}-\\textit{start}+1$），然后将 $\\text{nums}[start]$ 从 $\\textit{sum}$ 中减去并将 $\\textit{start}$ 右移，直到 $\\textit{sum} < s$，在此过程中同样更新子数组的最小长度。在每一轮迭代的最后，将 $\\textit{end}$ 右移。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/209/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/209/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/209/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/209/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/209/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/209/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/209/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/209/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/209/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/209/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/209/11.png),![fig12](https://assets.leetcode-cn.com/solution-static/209/12.png)>\n\n```Java [sol3-Java]\nclass Solution {\n    public int minSubArrayLen(int s, int[] nums) {\n        int n = nums.length;\n        if (n == 0) {\n            return 0;\n        }\n        int ans = Integer.MAX_VALUE;\n        int start = 0, end = 0;\n        int sum = 0;\n        while (end < n) {\n            sum += nums[end];\n            while (sum >= s) {\n                ans = Math.min(ans, end - start + 1);\n                sum -= nums[start];\n                start++;\n            }\n            end++;\n        }\n        return ans == Integer.MAX_VALUE ? 0 : ans;\n    }\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n        int ans = INT_MAX;\n        int start = 0, end = 0;\n        int sum = 0;\n        while (end < n) {\n            sum += nums[end];\n            while (sum >= s) {\n                ans = min(ans, end - start + 1);\n                sum -= nums[start];\n                start++;\n            }\n            end++;\n        }\n        return ans == INT_MAX ? 0 : ans;\n    }\n};\n```\n\n```csharp [sol3-C#]\npublic class Solution {\n    public int MinSubArrayLen(int s, int[] nums) \n    {\n        int n = nums.Length;\n        if (n == 0) \n        {\n            return 0;\n        }\n\n        int ans = int.MaxValue;\n        int start = 0, end = 0;\n        int sum = 0;\n        while (end < n) \n        {\n            sum += nums[end];\n            while (sum >= s) \n            {\n                ans = Math.Min(ans, end - start + 1);\n                sum -= nums[start];\n                ++start;\n            }\n            \n            ++end;\n        }\n\n        return ans == int.MaxValue ? 0 : ans;\n    }\n}\n```\n\n```golang [sol3-Golang]\nfunc minSubArrayLen(s int, nums []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n    ans := math.MaxInt32\n    start, end := 0, 0\n    sum := 0\n    for end < n {\n        sum += nums[end]\n        for sum >= s {\n            ans = min(ans, end - start + 1)\n            sum -= nums[start]\n            start++\n        }\n        end++\n    }\n    if ans == math.MaxInt32 {\n        return 0\n    }\n    return ans\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def minSubArrayLen(self, s: int, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        n = len(nums)\n        ans = n + 1\n        start, end = 0, 0\n        total = 0\n        while end < n:\n            total += nums[end]\n            while total >= s:\n                ans = min(ans, end - start + 1)\n                total -= nums[start]\n                start += 1\n            end += 1\n        \n        return 0 if ans == n + 1 else ans\n```\n\n```C [sol3-C]\nint minSubArrayLen(int s, int *nums, int numsSize) {\n    if (numsSize == 0) {\n        return 0;\n    }\n    int ans = INT_MAX;\n    int start = 0, end = 0;\n    int sum = 0;\n    while (end < numsSize) {\n        sum += nums[end];\n        while (sum >= s) {\n            ans = fmin(ans, end - start + 1);\n            sum -= nums[start];\n            start++;\n        }\n        end++;\n    }\n    return ans == INT_MAX ? 0 : ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组的长度。指针 $\\textit{start}$ 和 $\\textit{end}$ 最多各移动 $n$ 次。\n\n- 空间复杂度：$O(1)$。"
}