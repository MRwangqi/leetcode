{
	"titleSlug": "mirror-reflection",
	"slug": "jing-mian-fan-she-by-leetcode",
	"url": "https://leetcode-cn.com/problems/mirror-reflection/solution/jing-mian-fan-she-by-leetcode/",
	"content": "#### 方法一：模拟\n\n最初的光线可以看成是从 `(x, y) = (0, 0)` 发出，方向为 `(rx, ry) = (p, q)`。这样我们就可以通过模拟的方法来找到光线会先碰到哪一面镜子，以及碰到镜子的哪一个位置。随后，我们通过反射定律计算出新的光线方向。我们进行模拟，知道光线到达某一个接收器。\n\n```Java [sol1]\nclass Solution {\n    double EPS = 1e-6;\n\n    public int mirrorReflection(int p, int q) {\n        double x = 0, y = 0;\n        double rx = p, ry = q;    \n\n        // While it hasn't reached a receptor,...\n        while (!( close(x, p) && (close(y, 0) || close(y, p))\n                  || close(x, 0) && close (y, p) )) {\n            // Want smallest t so that some x + rx, y + ry is 0 or p\n            // x + rxt = 0, then t = -x/rx etc.\n            double t = 1e9;\n            if ((-x / rx) > EPS) t = Math.min(t, -x / rx);\n            if ((-y / ry) > EPS) t = Math.min(t, -y / ry);\n            if (((p-x) / rx) > EPS) t = Math.min(t, (p-x) / rx);\n            if (((p-y) / ry) > EPS) t = Math.min(t, (p-y) / ry);\n\n            x += rx * t;\n            y += ry * t;\n\n            if (close(x, p) || close(x, 0)) rx *= -1;\n            if (close(y, p) || close(y, 0)) ry *= -1;\n        }\n\n        if (close(x, p) && close(y, p)) return 1;\n        return close(x, p) ? 0 : 2;\n    }\n\n    public boolean close(double x, double y) {\n        return Math.abs(x - y) < EPS;\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def mirrorReflection(self, p, q):\n        from fractions import Fraction as F\n\n        x = y = 0\n        rx, ry = p, q\n        targets = [(p, 0), (p, p), (0, p)]\n\n        while (x, y) not in targets:\n            #Want smallest t so that some x + rx, y + ry is 0 or p\n            #x + rxt = 0, then t = -x/rx etc.\n            t = float('inf')\n            for v in [F(-x,rx), F(-y,ry), F(p-x,rx), F(p-y,ry)]:\n                if v > 0: t = min(t, v)\n\n            x += rx * t\n            y += ry * t\n\n            #update rx, ry\n            if x == p or x == 0: # bounced from east/west wall, so reflect on y axis\n                rx *= -1\n            if y == p or y == 0:\n                ry *= -1\n\n        return 1 if x==y==p else 0 if x==p else 2\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(p)$，我们可以通过方法二证明该时间复杂度上界。\n\n* 空间复杂度：$O(1)$。\n\n#### 方法二：数学\n\n我们把光线的运动拆分成水平和垂直两个方向来看。在水平和竖直方向，光线都在 `0` 到 `p` 之间往返运动，并且水平方向的运动速度是竖直方向的 `p/q` 倍。我们可以将光线的运动抽象成：\n\n每过一个时间步，光线在水平方向从一侧跳动到另一侧（即移动 `p` 的距离），同时在竖直方向前进 `q` 的距离，如果到达了边界就折返。\n\n由于接收器的位置在水平方向的两侧，因此只有当光线经过整数个时间步后，才有可能到达某一个接收器。而由于接收器的位置也在垂直方向的两侧，因此光线经过 `k` 个时间步后，它在竖直方向移动的总距离 `kq` 必须是 `p` 的倍数，才会碰到垂直方向的两侧。\n\n因此，我们需要找到最小的 `k` 使得 `kq` 是 `p` 的倍数，并且根据 `k` 的奇偶性可以得知光线到达了左侧还是右侧；根据 `kq / p` 的奇偶性可以得知光线到达了上方还是下方，从而得知光线到达的接收器的编号。\n\n显然，设 `g = gcd(p, q)` 为 `p` 和 `q` 的最大公约数，那么 `s = pq / gcd(p, q)` 是最小的同时整除 `p` 和 `q` 的数，即 `p` 和 `q` 的最小公倍数。因此 `k` 的值为 `s / q = p / gcd(p, q)`。\n\n```Java [sol2]\nclass Solution {\n\n    public int mirrorReflection(int p, int q) {\n        int g = gcd(p, q);\n        p /= g; p %= 2;\n        q /= g; q %= 2;\n\n        if (p == 1 && q == 1) return 1;\n        return p == 1 ? 0 : 2;\n    }\n\n    public int gcd(int a, int b) {\n        if (a == 0) return b;\n        return gcd(b % a, a);\n    }\n}\n```\n\n```Python [sol2]\nclass Solution(object):\n    def mirrorReflection(self, p, q):\n        from fractions import gcd\n        g = gcd(p, q)\n        p = (p / g) % 2\n        q = (q / g) % 2\n\n        return 1 if p and q else 0 if p else 2\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\log P)$，为求出最大公约数的时间复杂度。\n\n* 空间复杂度：$O(1)$。"
}