{
	"titleSlug": "minimum-increment-to-make-array-unique",
	"slug": "shi-shu-zu-wei-yi-de-zui-xiao-zeng-liang-by-leet-2",
	"url": "https://leetcode-cn.com/problems/minimum-increment-to-make-array-unique/solution/shi-shu-zu-wei-yi-de-zui-xiao-zeng-liang-by-leet-2/",
	"content": "#### 方法一：计数\n\n**思路**\n\n由于 `nums[i]` 的范围为 `[0, 40000)`，我们可以用数组统计出每个数出现的次数，然后对于每个重复出现的数，我们暴力地将它递增，直到它增加到一个没有重复出现的数为止。但这样的方法的时间复杂度较大，可以达到 $O(N^2)$，例如数组 `nums` 中所有元素都是 `1` 的情况。\n\n因此，我们不能对重复出现的数暴力的进行递增，而是用以下的做法：当我们找到一个没有出现过的数的时候，将之前某个重复出现的数增加成这个没有出现过的数。注意，这里 **「之前某个重复出现的数」** 是可以任意选择的，它并不会影响最终的答案，因为将 `P` 增加到 `X` 并且将 `Q` 增加到 `Y`，与将 `P` 增加到 `Y` 并且将 `Q` 增加到 `X` 都需要进行 `(X + Y) - (P + Q)` 次操作。\n\n例如当数组 `nums` 为 `[1, 1, 1, 1, 3, 5]` 时，我们发现有 `3` 个重复的 `1`，且没有出现过 `2`，`4` 和 `6`，因此一共需要进行 `(2 + 4 + 6) - (1 + 1 + 1) = 9` 次操作。\n\n**算法**\n\n首先统计出每个数出现的次数，然后从小到大遍历每个数 `x`：\n\n- 如果 `x` 出现了两次以上，就将额外出现的数记录下来（例如保存到一个列表中）；\n\n- 如果 `x` 没有出现过，那么在记录下来的数中选取一个 `v`，将它增加到 `x`，需要进行的操作次数为 `x - v`。\n\n我们还可以对该算法进行优化，使得我们不需要将额外出现的数记录下来。还是以 `[1, 1, 1, 1, 3, 5]` 为例，当我们发现有 `3` 个重复的 `1` 时，我们先将操作次数减去 `1 + 1 + 1`。接下来，当我们发现 `2`，`4` 和 `6` 都没有出现过时，我们依次将操作次数增加 `2`，`4` 和 `6`。这种优化方法在方法二中也被使用。\n\n**注意事项**\n\n虽然 `nums[i]` 的范围为 `[0, 40000)`，但我们有可能会将数据递增到 `40000` 的两倍 `80000`。这是因为在最坏情况下，数组 `nums` 中有 `40000` 个 `40000`，这样要使得数组值唯一，需要将其递增为 `[40000, 40001, ..., 79999]`，因此用来统计的数组需要开到 `80000`。\n\n```Java [sol1-Java]\nclass Solution {\n    public int minIncrementForUnique(int[] nums) {\n        int[] count = new int[80000];\n        for (int x : nums) {\n            count[x]++;\n        }\n\n        int ans = 0, taken = 0;\n\n        for (int x = 0; x < 80000; ++x) {\n            if (count[x] >= 2) {\n                taken += count[x] - 1;\n                ans -= x * (count[x] - 1);\n            } else if (taken > 0 && count[x] == 0) {\n                taken--;\n                ans += x;\n            }\n        }\n\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minIncrementForUnique(self, nums: List[int]) -> int:\n        count = [0] * 80000\n        for x in nums:\n            count[x] += 1\n        \n        ans = taken = 0\n        for x in range(80000):\n            if count[x] >= 2:\n                taken += count[x] - 1\n                ans -= x * (count[x] - 1)\n            elif taken > 0 and count[x] == 0:\n                taken -= 1\n                ans += x\n        \n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minIncrementForUnique(vector<int>& nums) {\n        int cnt[80000] = { 0 };\n        for (int x: nums) {\n            cnt[x]++;\n        }\n\n        int ans = 0, taken = 0;\n\n        for (int x = 0; x < 80000; ++x) {\n            if (cnt[x] >= 2) {\n                taken += cnt[x] - 1;\n                ans -= x * (cnt[x] - 1);\n            } else if (taken > 0 && cnt[x] == 0) {\n                taken--;\n                ans += x;\n            }\n        }\n\n        return ans;\n    }\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(L)$，其中 $L$ 的数量级是数组 `nums` 的长度加上其数据范围内的最大值，因为在最坏情况下，数组 `nums` 中的所有数都是数据范围内的最大值。\n\n- 空间复杂度：$O(L)$，需要长度 $L$ 的数组统计每个数出现的次数。\n\n#### 方法二：排序\n\n**思路**\n\n我们可以将数组先进行排序，再使用方法一中提及的优化方法。\n\n**算法**\n\n将数组排完序后，我们对数组进行线性扫描，会有两种情况：\n\n* 如果 `nums[i - 1] == nums[i]`，我们将操作次数减去 `nums[i]`，并将重复的数的个数增加 `1`；\n\n* 如果 `nums[i - 1] < nums[i]`，则区间 $\\big[\\textit{nums}[i - 1] + 1, \\textit{nums}[i] - 1\\big]$ 里的数都是没有出现过的，所以我们可以将之前重复的数变为这个区间范围内的数。设当前重复的数的个数为 `taken`，则我们最多可以改变 `give = min(taken, nums[i] - nums[i - 1] - 1)` 个数，即区间 $\\big[\\textit{nums}[i - 1] + 1, \\textit{nums}[i] - 1\\big]$ 的长度与 `taken` 二者的较小值。它们的操作数对答案的贡献为：\n\n$$\n\\textit{nums}[i-1] \\times \\mathrm{give} + \\sum_{k=1}^{\\mathrm{give}}\\ k = \\textit{nums}[i-1]\\times \\mathrm{give}+\\frac{(\\mathrm{give}+1)\\times\\mathrm{give}}{2}\n$$\n\n在扫描完数组后，如果仍然有重复的数，即 `taken` 不为 `0`，我们可以将这些数变为区间 $\\big[\\textit{nums}[n - 1] + 1, \\infty \\big)$ 中的数，其中 `nums[n - 1]` 是数组 `nums` 中的最后一个数。\n\n```Java [sol2-Java]\nclass Solution {\n    public int minIncrementForUnique(int[] nums) {\n        Arrays.sort(nums);\n        int ans = 0, taken = 0;\n\n        for (int i = 1; i < nums.length; ++i) {\n            if (nums[i - 1] == nums[i]) {\n                taken++;\n                ans -= nums[i];\n            } else {\n                int give = Math.min(taken, nums[i] - nums[i - 1] - 1);\n                ans += give * (give + 1) / 2 + give * nums[i - 1];\n                taken -= give;\n            }\n        }\n\n        if (nums.length > 0) {\n            ans += taken * (taken + 1) / 2 + taken * nums[nums.length - 1];\n        }\n\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def minIncrementForUnique(self, nums: List[int]) -> int:\n        nums.sort()\n        nums.append(100000)\n        ans = taken = 0\n\n        for i in range(1, len(nums)):\n            if nums[i - 1] == nums[i]:\n                taken += 1\n                ans -= nums[i]\n            else:\n                give = min(taken, nums[i] - nums[i - 1] - 1)\n                ans += give * (give + 1) // 2 + give * nums[i - 1]\n                taken -= give\n\n        return ans\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int minIncrementForUnique(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        int ans = 0, taken = 0;\n        for (int i = 1; i < (int)nums.size(); ++i) {\n            if (nums[i - 1] == nums[i]) {\n                taken++;\n                ans -= nums[i];\n            } else {\n                int give = min(taken, nums[i] - nums[i - 1] - 1);\n                ans += give * (give + 1) / 2 + give * nums[i - 1];\n                taken -= give;\n            }\n        }\n\n        if (nums.size() > 0) {\n            ans += taken * (taken + 1) / 2 + taken * nums.back();\n        }\n\n        return ans;\n    }\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N\\log N)$，其中 $N$ 是数组 $\\textit{nums}$ 的长度，即排序的时间复杂度。\n\n* 空间复杂度：$O(\\log N)$，排序需要额外 $O(\\log N)$ 的栈空间。"
}