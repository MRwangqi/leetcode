{
	"titleSlug": "word-search-ii",
	"slug": "jsjie-ti-si-lu-qing-xi-ming-liao-by-inte-7y4w",
	"url": "https://leetcode-cn.com/problems/word-search-ii/solution/jsjie-ti-si-lu-qing-xi-ming-liao-by-inte-7y4w/",
	"content": "[详细刷题视频合集](https://xiaochen1024.com/series/6196129fc1553b002e57bef5/6196208ec1553b002e57bef6)      \n      [刷题笔记](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18)\n\ntries的解法\n\n\n```\nvar findWords = function(board, words) {\n    let res = [];\n    let t = new Trie();\n    let visited = [];\n    // 构建前缀树\n    for (const w of words) {\n        t.insert(w);\n    }\n    for (let i = 0; i < board.length; i++) {;\n        visited[i] = []\n        for (let j = 0; j < board[i].length; j++) {\n            visited[i][j] = 0;\n        }\n    }\n    var _dfs = function (i, j, s) {\n        if (t.search(s)) {\n            if (!res.includes(s)) res.push(s);\n        }\n        if (i < 0 || i >= board.length || j < 0 || j >= board[i].length || visited[i][j] === 1 || !t.startsWith(s + board[i][j])) {\n            return;\n        }\n        visited[i][j] = 1;\n        s = s + board[i][j];\n        // 上下左右\n        _dfs(i - 1, j, s);\n        _dfs(i + 1, j, s);\n        _dfs(i, j - 1, s);\n        _dfs(i, j + 1, s);\n        visited[i][j] = 0;\n    }\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (t.startsWith(board[i][j])) {\n                _dfs(i, j, '');\n            }\n        }\n    }\n    return res;\n};\n\n\n\n\n\n\n\n\nclass Trie {\n  constructor() {\n    this.root = Object.create(null);\n  }\n  insert(word) {\n    let node = this.root;\n    for(const c of word) {\n      if (!node[c]) node[c] = Object.create(null);\n      node = node[c];\n    }\n    node.isWord = true;\n  }\n  traverse(word) {\n    let node = this.root;\n    for(const c of word) {\n        if (node[c]) {\n            node = node[c];\n        } else {\n            return null;\n        }\n    }\n    return node;\n  }\n  search(word) {\n      let node = this.traverse(word);\n      return !!node && !!node.isWord;\n  }\n  startsWith(prefix) {\n      let node = this.traverse(prefix);\n      return !!node;\n  }\n}\n\n```\n"
}