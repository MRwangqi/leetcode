{
	"titleSlug": "largest-sum-of-averages",
	"slug": "zui-da-ping-jun-zhi-he-de-fen-zu-by-leetcode",
	"url": "https://leetcode-cn.com/problems/largest-sum-of-averages/solution/zui-da-ping-jun-zhi-he-de-fen-zu-by-leetcode/",
	"content": "#### 动态规划：\n\n我们可以使用动态规划来解决这个问题。设 `dp(i, k)` 表示将数组 `A` 中的前 `i` 个元素 `A[:i]` 分成 `k` 个相邻的非空子数组，可以得到的最大分数。`dp(i, k)` 的值可以通过 `dp(j, k - 1)` 转移而来，其中 `j < i`，状态转移方程为：\n\n```\ndp(i, k) = max(dp(j, k - 1) + average(j + 1, i))\ndp(i, 0) = average(0, i)\n```\n\n其中 `average(j + 1, i)` 表示 `A[j + 1]` 到 `A[i]` 的平均值 `(A[j + 1] + A[j + 2] + ... + A[i]) / (i - j)`。我们可以通过预处理出前缀和 `P[x + 1] = A[0] + A[1] + ... + A[x]`，从而用 `average(j + 1, i) = (P[i + 1] - P[j + 1]) / (i - j)` 在常数时间内得到平均值。\n\n我们可以继续优化动态规划的空间复杂度。可以发现，如果设 `dp(i, k)` 为第 `k` 层的结果，那么第 `k` 层的结果实际上只和第 `k - 1` 层有关，因此我们可以使用滚动数组优化空间，即只使用两个一维数组。进一步而言。如果我们从后往前进行动态规划，即设 `dp(i, k)` 表示数组 `A` 中从第 `i` 个元素到结尾 `A[i:]` 分成 `k` 个相邻的非空子数组，可以得到的最大分数，那么状态转移方程将变为：\n\n```\ndp(i, k) = max(dp(j, k - 1) + average(i, j - 1))\ndp(i, 0) = average(i, n - 1)\n```\n\n其中 `j > i`，那么我们在计算第 `k` 层的结果，并且 `i` 是依次递增的时候，第 `k` 层的结果并不会覆盖掉第 `k - 1` 层的结果，因为当 `dp(i, k)` 被计算出并且覆盖了 `dp(i, k - 1)` 时，接下来的所有 `dp(i0, k), i0 > i` 都不会从 `dp(i, k - 1)` 转移而来。因此我们最终只需要用一个一维数组，就能完成动态规划。\n\n```Java [sol1]\nclass Solution {\n    public double largestSumOfAverages(int[] A, int K) {\n        int N = A.length;\n        double[] P = new double[N+1];\n        for (int i = 0; i < N; ++i)\n            P[i+1] = P[i] + A[i];\n\n        double[] dp = new double[N];\n        for (int i = 0; i < N; ++i)\n            dp[i] = (P[N] - P[i]) / (N - i);\n\n        for (int k = 0; k < K-1; ++k)\n            for (int i = 0; i < N; ++i)\n                for (int j = i+1; j < N; ++j)\n                    dp[i] = Math.max(dp[i], (P[j]-P[i]) / (j-i) + dp[j]);\n\n        return dp[0];\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def largestSumOfAverages(self, A, K):\n        P = [0]\n        for x in A: P.append(P[-1] + x)\n        def average(i, j):\n            return (P[j] - P[i]) / float(j - i)\n\n        N = len(A)\n        dp = [average(i, N) for i in xrange(N)]\n        for k in xrange(K-1):\n            for i in xrange(N):\n                for j in xrange(i+1, N):\n                    dp[i] = max(dp[i], average(i, j) + dp[j])\n\n        return dp[0]\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(K * N^2)$，其中 $N$ 是数组 `A` 的长度。\n\n* 空间复杂度：$O(N)$。"
}