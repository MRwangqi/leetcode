{
	"titleSlug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
	"slug": "c-xiang-liang-suan-yuan-xin-jian-dan-yi-dong-by-sm",
	"url": "https://leetcode-cn.com/problems/maximum-number-of-darts-inside-of-a-circular-dartboard/solution/c-xiang-liang-suan-yuan-xin-jian-dan-yi-dong-by-sm/",
	"content": "## 题意\r\n本题就是要计算给定半径，圆心不定，然后算圆内的点数最多是多少  \r\n我们可以通过两点确定一个圆心，穷举所有的圆心即可。  \r\n\r\n## 计算圆心\r\n先给一张图：  \r\n![IMG_20200517_121534.jpg](https://pic.leetcode-cn.com/7ea07d5a682a8b2b8a289a7fc746dbaa340a755ea248637dabe8ac33f0a27efb-IMG_20200517_121534.jpg)\r\n\r\n给定A(x1,y1) B(x2,y2) 以及圆心r  \r\n首先就可以直接计算出垂线长度h和mid坐标(AB中点)以及AB长度d:   \r\n\r\n    d=sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\r\n    h=sqrt(r*r-(d/2.0)*(d/2.0))\r\n    mid=((x1+x2)/2.0,(y1+y2)/2.0)\r\n\r\n然后我们的目的是求O(x,y)  \r\n\r\n我们使用向量。  \r\n看这个图：\r\n![IMG_20200517_122341.jpg](https://pic.leetcode-cn.com/d5fa8fbbcf91fc0f0f7f07bab61a54869eaedbf79cf302d1252295ab38b04f9c-IMG_20200517_122341.jpg)\r\n\r\n向量a+向量b=向量c   \r\n毫无疑问  \r\n向量a就是mid坐标，向量b就是AB垂线的单位方向向量乘以高度h，向量c就是O坐标  \r\n\r\n所以现在唯一的问题就在于如何计算AB垂线的方向向量  \r\n向量AB=(x3,y3) 垂线的向量即为(-y3,x3)和(y3,-x3)  \r\n点积为0\r\n\r\n特殊情况，AB长度大于2*r (d>2r) ，此时不存在圆心  \r\n\r\n还不明白的可以看一下代码，就会了：  \r\n\r\n## 代码\r\n经@灵茶山艾府 指正，因为我穷举a b后还会穷举b a,所以每组只用计算一个圆心即可。  \r\n另一个方向的圆心会在第二次枚举的时候被计算出来。  \r\n\r\n```\r\nstruct point{\r\n    double x,y;\r\n    point(double i,double j):x(i),y(j){}\r\n};\r\n\r\n//算两点距离\r\ndouble dist(double x1,double y1,double x2,double y2){\r\n    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\r\n}\r\n\r\n//计算圆心\r\npoint f(point& a,point& b,int r){\r\n    //算中点\r\n    point mid((a.x+b.x)/2.0,(a.y+b.y)/2.0);\r\n    //AB距离的一半\r\n    double d=dist(a.x,a.y,mid.x,mid.y);\r\n    //计算h\r\n    double h=sqrt(r*r-d*d);\r\n    //计算垂线\r\n    point ba(b.x-a.x,b.y-a.y);\r\n    point hd(-ba.y,ba.x);\r\n    double len=sqrt(hd.x*hd.x+hd.y*hd.y);\r\n    hd.x/=len,hd.y/=len;\r\n    hd.x*=h,hd.y*=h;\r\n    return point(hd.x+mid.x,hd.y+mid.y);\r\n}\r\n\r\nclass Solution {\r\npublic:\r\n    int numPoints(vector<vector<int>>& points, int r) {\r\n        int n=points.size();\r\n        int ans=0;\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<n;j++){\r\n                if(i==j){//一个点\r\n                    int cnt=0;\r\n                    for(int k=0;k<n;k++){\r\n                        double tmp=dist(points[i][0],points[i][1],points[k][0],points[k][1]);\r\n                        if(tmp<=r) cnt++;\r\n                    }\r\n                    ans=max(cnt,ans);\r\n                }else{//两个点\r\n                    //通过长度判断有没有圆心\r\n                    double d=dist(points[i][0],points[i][1],points[j][0],points[j][1]);\r\n                    if(d/2>r) continue;\r\n\r\n                    point a(points[i][0],points[i][1]),b(points[j][0],points[j][1]);\r\n                    point res=f(a,b,r);\r\n                    int cnt=0;\r\n                    for(int k=0;k<n;k++){\r\n                        double tmp=dist(res.x,res.y,points[k][0],points[k][1]);\r\n                        if(tmp<=r) cnt++;\r\n                    }\r\n                    ans=max(cnt,ans);\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```\r\n\r\n# 总结\r\n计算圆心也是有别的方法的，在此仅分享这一种\r\n求个赞"
}