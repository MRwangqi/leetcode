{
	"titleSlug": "count-elements-with-strictly-smaller-and-greater-elements",
	"slug": "yuan-su-ji-shu-by-leetcode-solution-uk3a",
	"url": "https://leetcode-cn.com/problems/count-elements-with-strictly-smaller-and-greater-elements/solution/yuan-su-ji-shu-by-leetcode-solution-uk3a/",
	"content": "#### 方法一：按要求判断\n\n**思路与算法**\n\n对于数组中的一个元素，它「同时具有一个严格较小元素和一个严格较大元素」等价于它「既不等于数组中的最大值，也不等于数组中元素的最小值」。\n\n因此我们可以首先遍历数组 $\\textit{nums}$，求出数组元素的最大值 $\\textit{largest}$ 与最小值 $\\textit{smallest}$。随后，我们遍历数组中的元素 $\\textit{num}$，统计满足 $\\textit{smallest} < \\textit{num} < \\textit{largest}$ 的元素数目。最终，该数目即为数组中「同时具有一个严格较小元素和一个严格较大元素」的元素数量，我们返回该数目作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countElements(vector<int>& nums) {\n        int smallest = *min_element(nums.begin(), nums.end());\n        int largest = *max_element(nums.begin(), nums.end());\n        int res = 0;\n        for (int num: nums) {\n            if (smallest < num && num < largest) {\n                ++res;\n            }\n        }\n        return res;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def countElements(self, nums: List[int]) -> int:\n        smallest = min(nums)\n        largest = max(nums)\n        res = 0\n        for num in nums:\n            if smallest < num < largest:\n                res += 1\n        return res\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $\\textit{nums}$ 的长度。其中求出数组最大值与最小值的时间复杂度为 $O(n)$，计算符合要求元素数目的时间复杂度也为 $O(n)$。\n\n- 空间复杂度：$O(1)$。"
}