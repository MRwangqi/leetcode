{
	"titleSlug": "smallest-good-base",
	"slug": "zui-xiao-hao-jin-zhi-by-leetcode-solutio-csqn",
	"url": "https://leetcode-cn.com/problems/smallest-good-base/solution/zui-xiao-hao-jin-zhi-by-leetcode-solutio-csqn/",
	"content": "#### 方法一：数学\n\n**思路及解法**\n\n假设正整数 $n$ 在 $k~(k \\geq 2)$ 进制下的所有数位都为 $1$，且位数为 $m + 1$，那么有：\n\n$$\nn = k^0 + k^1 + k^2 + \\dots + k^m\\tag{1}\n$$\n\n我们首先讨论两种特殊情况：\n\n- $m=0$，此时 $n=1$，而题目保证 $n \\geq 3$，所以本题中 $m>0$。\n- $m=1$，此时 $n=(11)_k$，即 $k=n-1\\geq 2$，这保证了本题有解。\n\n然后我们分别证明一般情况下的两个结论，以帮助解决本题。\n\n**结论一：$m < \\log_k n$** \n\n注意到 $(1)$ 式右侧是一个首项为 $1$、公比为 $k$ 的等比数列，利用等比数列求和公式，我们可以得到：\n\n$$\nn = \\frac{1 - k^{m+1}}{1 - k}\n$$\n \n对公式进行变换可得：\n\n$$\nk^{m+1} = kn - n + 1 < kn\n$$\n\n移项并化简可得：\n\n$$\nm < \\log_k n\n$$\n\n这个结论帮助我们限制了 $m$ 的范围，本题中 $3 \\leq n \\leq 10^{18}$ 且 $k \\geq 2$，所以 $m < \\log_2 10^{18} < 60$。\n\n**结论二：$k = \\lfloor \\sqrt[m]{n} \\rfloor$** \n\n依据 $(1)$ 式，可知：\n\n$$\nn = k^0 + k^1 + k^2 + \\dots + k^m > k^m \\tag{2}\n$$\n\n依据二项式定理可知：\n\n$$\n(k+1)^m = \\binom{m}{0}k^0 + \\binom{m}{1}k^1 + \\binom{m}{2}k^2 + \\dots + \\binom{m}{m}k^m\n$$\n\n因为当 $m>1$ 时，$\\forall i \\in [1,m-1], \\dbinom{m}{i} > 1$，所以有：\n\n$$\n\\begin{aligned}\n(k+1)^m &= \\binom{m}{0}k^0 + \\binom{m}{1}k^1 + \\binom{m}{2}k^2 + \\dots + \\binom{m}{m}k^m \\\\\n&> k^0 + k^1 + k^2 + \\dots + k^m = n \\tag{3}\n\\end{aligned}\n$$\n\n结合 $(2)(3)$ 两式可知，当 $m>1$ 时，有 $k^m < n < (k+1)^m$。两边同时开方得：\n\n$$\nk < \\sqrt[m]{n} < k+1\n$$\n\n依据这个公式我们知道，$\\sqrt[m]{n}$ 必然为一个小数，且 $k$ 为 $\\sqrt[m]{n}$ 的整数部分，即 $k = \\lfloor \\sqrt[m]{n} \\rfloor$。\n\n这个结论帮助我们在 $n$ 和 $m$ 已知的情况下快速确定 $k$ 的值。\n\n综合上述两个结论，依据结论一，我们知道 $m$ 的取值范围为 $[1,\\log_k n)$，且 $m = 1$ 时必然有解。因为随着 $m$ 的增大，$k$ 不断减小，所以我们只需要从大到小检查每一个 $m$ 可能的取值，利用结论二快速算出对应的 $k$ 值，然后校验计算出的 $k$ 值是否有效即可。如果 $k$ 值有效，我们即可返回结果。\n\n在实际代码中，我们首先算出 $m$ 取值的上界 $\\textit{mMax}$，然后从上界开始向下枚举 $m$ 值，如果当前 $m$ 值对应的 $k$ 合法，那么我们即可返回当前的 $k$ 值。如果我们一直检查到 $m=2$ 都没能找到答案，那么此时即可直接返回 $m=1$ 对应的 $k$ 值：$n-1$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string smallestGoodBase(string n) {\n        long nVal = stol(n);\n        int mMax = floor(log(nVal) / log(2));\n        for (int m = mMax; m > 1; m--) {\n            int k = pow(nVal, 1.0 / m);\n            long mul = 1, sum = 1;\n            for (int i = 0; i < m; i++) {\n                mul *= k;\n                sum += mul;\n            }\n            if (sum == nVal) {\n                return to_string(k);\n            }\n        }\n        return to_string(nVal - 1);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String smallestGoodBase(String n) {\n        long nVal = Long.parseLong(n);\n        int mMax = (int) Math.floor(Math.log(nVal) / Math.log(2));\n        for (int m = mMax; m > 1; m--) {\n            int k = (int) Math.pow(nVal, 1.0 / m);\n            long mul = 1, sum = 1;\n            for (int i = 0; i < m; i++) {\n                mul *= k;\n                sum += mul;\n            }\n            if (sum == nVal) {\n                return Integer.toString(k);\n            }\n        }\n        return Long.toString(nVal - 1);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string SmallestGoodBase(string n) {\n        long nVal = long.Parse(n);\n        int mMax = (int) Math.Floor(Math.Log(nVal) / Math.Log(2));\n        for (int m = mMax; m > 1; m--) {\n            int k = (int) Math.Pow(nVal, 1.0 / m);\n            long mul = 1, sum = 1;\n            for (int i = 0; i < m; i++) {\n                mul *= k;\n                sum += mul;\n            }\n            if (sum == nVal) {\n                return k.ToString();\n            }\n        }\n        return (nVal - 1).ToString();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar smallestGoodBase = function(n) {\n    const nVal = parseInt(n);\n    const mMax = Math.floor(Math.log(nVal) / Math.log(2));\n    for (let m = mMax; m > 1; m--) {\n        const k = BigInt(Math.floor(Math.pow(nVal, 1.0 / m)));\n        if (k > 1) {\n            let mul = BigInt(1), sum = BigInt(1);\n            for (let i = 1; i <= m; i++) {\n                mul *= k;\n                sum += mul;\n            }\n            if (sum === BigInt(n)) {\n                return k + '';\n            }\n        }\n    }\n    return (BigInt(n) - BigInt(1)) + '';\n};\n```\n\n```go [sol1-Golang]\nfunc smallestGoodBase(n string) string {\n    nVal, _ := strconv.Atoi(n)\n    mMax := bits.Len(uint(nVal)) - 1\n    for m := mMax; m > 1; m-- {\n        k := int(math.Pow(float64(nVal), 1/float64(m)))\n        mul, sum := 1, 1\n        for i := 0; i < m; i++ {\n            mul *= k\n            sum += mul\n        }\n        if sum == nVal {\n            return strconv.Itoa(k)\n        }\n    }\n    return strconv.Itoa(nVal - 1)\n}\n```\n\n```C [sol1-C]\nchar* smallestGoodBase(char* n) {\n    long nVal = atol(n);\n    int mMax = floor(log(nVal) / log(2));\n    char* ret = malloc(sizeof(char) * (mMax + 1));\n    for (int m = mMax; m > 1; m--) {\n        int k = pow(nVal, 1.0 / m);\n        long mul = 1, sum = 1;\n        for (int i = 0; i < m; i++) {\n            mul *= k;\n            sum += mul;\n        }\n        if (sum == nVal) {\n            sprintf(ret, \"%lld\", k);\n            return ret;\n        }\n    }\n    sprintf(ret, \"%lld\", nVal - 1);\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log^2 n)$。至多需要进行 $O(\\log n)$ 次检查，每次检查的时间复杂度为 $O(\\log n)$。\n\n- 空间复杂度：$O(1)$。只需要常数的空间保存若干变量。"
}