{
	"titleSlug": "delete-duplicate-folders-in-system",
	"slug": "shan-chu-xi-tong-zhong-de-zhong-fu-wen-j-ic32",
	"url": "https://leetcode-cn.com/problems/delete-duplicate-folders-in-system/solution/shan-chu-xi-tong-zhong-de-zhong-fu-wen-j-ic32/",
	"content": "#### 方法一：子树的序列化表示\n\n**思路**\n\n我们可以想出这道题在抽象层面（也就是省去了所有实现细节）的解决方法，即：\n\n- 第一步，我们通过给定的 $\\textit{paths}$，简历出文件系统的**树**型表示。这棵树是一棵多叉树，根节点为 $\\texttt{/}$，每个非根节点表示一个文件夹。\n\n- 第二步，我们对整棵树从根节点开始进行一次遍历。根据题目中的描述，如果两个节点 $x$ 和 $y$ 包含的子文件夹的「结构」（即这些子文件夹、子文件夹的子文件夹等等，递归直到空文件夹为止）完全相同，我们就需要将 $x$ 和 $y$ 都进行删除。那么，为了得到某一个节点的子文件夹的「结构」，我们应当首先遍历完成该节点的所有子节点，再回溯遍历该节点本身。这就对应着多叉树的**后序遍历**。\n    \n    在回溯到某节点时，我们需要将该节点的「结构」存储下来，记录在某一「数据结构」中，以便于与其它节点的「结构」进行比较。\n\n- 第三步，我们再次对整棵树从根节点开始进行一次遍历。当我们遍历到节点 $x$ 时，如果 $x$ 的「结构」在「数据结构」中出现了超过 $1$ 次，那就说明存在于 $x$ 相同的文件夹，我们就需要将 $x$ 删除并回溯，否则 $x$ 是唯一的，我们将从根节点开始到 $x$ 的路径计入答案，并继续向下遍历 $x$ 的子节点。\n\n    在遍历完成后，我们就删除了所有重复的文件夹，并且得到了最终的答案。\n\n**算法**\n\n对于上面的三个步骤，我们依次尝试进行解决。\n\n对于第一步而言，我们只需要定义一个表示树结构的类，建立一个根节点，随后遍历 $\\textit{paths}$ 中的每一条表示文件夹的路径，将路径上的所有节点加入树中即可。如果读者已经掌握了字典树（Trie）这一数据结构，就可以较快地实现这一步。\n\n对于第二步而言，难点不在于**对树进行后序遍历**，而在于如何**表示一个节点的「结构」**。我们可以参考[「297. 二叉树的序列化与反序列化」](https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/)，实现一个多叉树的序列化表示。我们用 $\\text{serial}(x)$ 记录节点 $x$ 的序列化表示，具体地：\n\n- 如果节点 $x$ 是子节点，那么 $\\text{serial}(x)$ 为空字符串，这是因为节点 $x$ 中不包含任何文件夹，它没有「结构」。例如示例 $1$ 中，三个叶节点 $b, a, a$ 对应的序列化表示均为空字符串；\n\n- 如果节点 $x$ 不是子节点，它的子节点分别为 $y_1, y_2, \\cdots, y_k$ 那么 $\\text{serial}(x)$ 递归定义为：\n\n    $$\n    \\text{serial}(x) = y_1(\\text{serial}(y_1))y_2(\\text{serial}(y_2))\\cdots y_k(\\text{serial}(y_k))\n    $$\n\n    也就是说，我们首先递归地求出 $y_1, y_2, \\cdots, y_k$ 的序列化表示，随后将它们连通本身的文件夹名拼接在一起，并在外层使用括号 $()$ 将它们之间进行区分（或者说隔离）。但如果只是随意地进行拼接，会产生顺序的问题，即如果有节点 $x_1$ 和 $x_2$，它们有相同的子节点 $y_1$ 和 $y_2$，但在 $x_1$ 的子节点中 $y_1$ 先出现 $y_2$ 后出现，而在 $x_2$ 的子节点中 $y_2$ 先出现而 $y_1$ 后出现，这样尽管 $x_1$ 和 $x_2$ 的「结构」是完全相同的，但会因为子节点的出现顺序不同，导致序列化的字符串不同。\n\n    因此，在将 $y_1, y_2, \\cdots, y_k$ 的序列化表示进行拼接之前，我们可以对它们进行排序（字典序顺序），再将排序后的结果进行拼接，就可以保证具有相同「结构」的节点的序列化表示是完全相同的了。例如示例 $4$ 中，根节点下方的两个子节点 $a, b$，它们的序列化表示均为 $\\texttt{x(y())z()}$。\n\n这样一来，通过一次树的后序遍历，我们就可以求出每一个节点「结构」的序列化表示。由于序列化表示都是字符串，因此我们可以使用一个哈希映射，记录每一种序列化表示以及其对应的出现次数。\n\n对于第三步而言，我们从根节点开始对树进行深度优先遍历，并使用一个数组 $\\textit{path}$ 记录从根节点到当前遍历到的节点 $x$ 的路径。如果 $x$ 的序列化表示在哈希映射中出现了超过 $1$ 次，就进行回溯，否则将 $\\textit{path}$ 加入答案，并向下递归遍历 $x$ 的所有子节点。\n\n**代码**\n\n下面的 $\\texttt{C++}$ 代码没有析构树的空间。如果在面试中遇到了本题，可以和面试官进行沟通，询问是否需要析构对应的空间。\n\n```C++ [sol1-C++]\nstruct Trie {\n    // 当前节点结构的序列化表示\n    string serial;\n    // 当前节点的子节点\n    unordered_map<string, Trie*> children;\n};\n\nclass Solution {\npublic:\n    vector<vector<string>> deleteDuplicateFolder(vector<vector<string>>& paths) {\n        // 根节点\n        Trie* root = new Trie();\n\n        for (const vector<string>& path: paths) {\n            Trie* cur = root;\n            for (const string& node: path) {\n                if (!cur->children.count(node)) {\n                    cur->children[node] = new Trie();\n                }\n                cur = cur->children[node];\n            }\n        }\n\n        // 哈希表记录每一种序列化表示的出现次数\n        unordered_map<string, int> freq;\n        // 基于深度优先搜索的后序遍历，计算每一个节点结构的序列化表示\n        function<void(Trie*)> construct = [&](Trie* node) {\n            // 如果是叶节点，那么序列化表示为空字符串，无需进行任何操作\n            if (node->children.empty()) {\n                return;\n            }\n\n            vector<string> v;\n            // 如果不是叶节点，需要先计算子节点结构的序列化表示\n            for (const auto& [folder, child]: node->children) {\n                construct(child);\n                v.push_back(folder + \"(\" + child->serial + \")\");\n            }\n            // 防止顺序的问题，需要进行排序\n            sort(v.begin(), v.end());\n            for (string& s: v) {\n                node->serial += move(s);\n            }\n            // 计入哈希表\n            ++freq[node->serial];\n        };\n\n        construct(root);\n\n        vector<vector<string>> ans;\n        // 记录根节点到当前节点的路径\n        vector<string> path;\n\n        function<void(Trie*)> operate = [&](Trie* node) {\n            // 如果序列化表示在哈希表中出现了超过 1 次，就需要删除\n            if (freq[node->serial] > 1) {\n                return;\n            }\n            // 否则将路径加入答案\n            if (!path.empty()) {\n                ans.push_back(path);\n            }\n            for (const auto& [folder, child]: node->children) {\n                path.push_back(folder);\n                operate(child);\n                path.pop_back();\n            }\n        };\n\n        operate(root);\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Trie:\n    # 当前节点结构的序列化表示\n    serial: str = \"\"\n    # 当前节点的子节点\n    children: dict\n\n    def __init__(self):\n        self.children = dict()\n\nclass Solution:\n    def deleteDuplicateFolder(self, paths: List[List[str]]) -> List[List[str]]:\n        # 根节点\n        root = Trie()\n\n        for path in paths:\n            cur = root\n            for node in path:\n                if node not in cur.children:\n                    cur.children[node] = Trie()\n                cur = cur.children[node]\n\n        # 哈希表记录每一种序列化表示的出现次数\n        freq = Counter()\n        # 基于深度优先搜索的后序遍历，计算每一个节点结构的序列化表示\n        def construct(node: Trie) -> None:\n            # 如果是叶节点，那么序列化表示为空字符串，无需进行任何操作\n            if not node.children:\n                return\n\n            v = list()\n            # 如果不是叶节点，需要先计算子节点结构的序列化表示\n            for folder, child in node.children.items():\n                construct(child)\n                v.append(folder + \"(\" + child.serial + \")\")\n            \n            # 防止顺序的问题，需要进行排序\n            v.sort()\n            node.serial = \"\".join(v)\n            # 计入哈希表\n            freq[node.serial] += 1\n\n        construct(root)\n\n        ans = list()\n        # 记录根节点到当前节点的路径\n        path = list()\n\n        def operate(node: Trie) -> None:\n            # 如果序列化表示在哈希表中出现了超过 1 次，就需要删除\n            if freq[node.serial] > 1:\n                return\n            # 否则将路径加入答案\n            if path:\n                ans.append(path[:])\n\n            for folder, child in node.children.items():\n                path.append(folder)\n                operate(child)\n                path.pop()\n\n        operate(root)\n        return ans\n```\n\n**复杂度分析**\n\n这里我们只考虑计算所有节点结构的序列化表示需要的时间，以及哈希映射需要使用的空间。对于其它的项（无论是时间项还是空间项），它们在渐近意义下一定都小于计算以及存储序列化表示的部分，因此可以忽略。\n\n在最坏情况下，节点结构的序列化表示的字符串两两不同，那么需要的时间和空间级别均为「所有节点结构的序列化表示的字符串的长度之和」。如何求出这个长度之和的上界呢？\n\n这里我们需要用到一个很重要的结论：\n\n> 设 $T$ 为无权多叉树。对于 $T$ 中的节点 $x$，记 $\\textit{dist}[x]$ 为从根节点到 $x$ 经过的节点个数，$\\textit{size}[x]$ 为以 $x$ 为根的子树的大小，那么有：\n>\n> $$\n> \\sum_{x \\in T} \\textit{dist}[x] = \\sum_{x \\in T} \\textit{size}[x]\n> $$\n\n证明也较为直观。对于任意的节点 $x'$，在右侧的 $\\sum_{x \\in T} \\textit{size}[x]$ 中，$x'$ 被包含在 $\\textit{size}[x]$ 中的次数就等于 $x'$ 的祖先节点的数目（也包括 $x'$ 本身），其等于根节点到 $x'$ 的经过的节点个数，因此得证。\n\n回到本题，$\\textit{path}$ 中给出了根节点到所有节点的路径，其中最多包含 $2\\times 10^5$ 个字符，那么 $\\sum_{x \\in T} \\textit{dist}[x]$ 不超过 $2\\times 10^5$，$\\sum_{x \\in T} \\textit{size}[x]$ 同样也不超过 $2\\times 10^5$。\n\n对于任意的节点 $x$，$x$ 结构的序列化表示的字符串长度包含两部分，第一部分为其中所有子文件夹名的长度之和，其不超过 $10 \\cdot \\textit{size}[x]$，第二部分为额外添加的用来区分的括号，由于一个子文件夹会恰好被添加一对括号，因此其不超过 $2 \\cdot \\textit{size}[x]$。这样一来，「所有节点结构的序列化表示的字符串的长度之和」的上界为：\n\n$$\n12 \\cdot \\sum_{x \\in T} \\textit{size}[x] = 2.4 \\times 10^6\n$$\n\n即空间的数量级为 $10^6$。而对于时间，即使算上排序的额外 $\\log$ 的时间复杂度，也在 $10^7$ 的数量级，可以在规定的时间内通过本题。并且需要指出的是，在上述估算上界的过程中，我们作出的许多假设是非常极端的，因此实际上该方法的运行时间很快。"
}