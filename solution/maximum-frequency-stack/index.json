{
	"titleSlug": "maximum-frequency-stack",
	"slug": "zui-da-pin-lu-zhan-by-leetcode",
	"url": "https://leetcode-cn.com/problems/maximum-frequency-stack/solution/zui-da-pin-lu-zhan-by-leetcode/",
	"content": "#### 方法：栈\n\n**思路**\n\n显然，我们更关心元素的频率。令 `freq` 作为 $x$ 到 $x$ 的出现次数的映射 `Map`。\n\n此外，我们也（可能）关心 `maxfreq`，即栈中任意元素的当前最大频率。这是理所应当的事情，因为我们必须弹出频率最高的元素。\n\n那么当前主要的问题就变成了：在具有相同的（最大）频率的元素中，怎么判断那个元素是最新的？我们可以使用栈来查询这一信息：靠近栈顶的元素总是相对更新一些。\n\n为此，我们令 `group` 作为从频率到具有该频率的元素的映射。到目前，我们已经实现了 `FreqStack` 的所有必要的组件。\n\n**算法**\n\n实际上，作为实现层面上的一点细节，如果 `x` 的频率为 `f`，那么我们将获取在所有 `group[i] (i <= f)` 中的 `x`,而不仅仅是栈顶的那个。这是因为每个 `group[i]` 都会存储与第 `i` 个 `x` 副本相关的信息。\n\n此后，我们仅仅需要如上所述维护 `freq`，`group`，以及 `maxfreq`。\n\n```java [CvqCTNz2-Java]\nclass FreqStack {\n    Map<Integer, Integer> freq;\n    Map<Integer, Stack<Integer>> group;\n    int maxfreq;\n\n    public FreqStack() {\n        freq = new HashMap();\n        group = new HashMap();\n        maxfreq = 0;\n    }\n\n    public void push(int x) {\n        int f = freq.getOrDefault(x, 0) + 1;\n        freq.put(x, f);\n        if (f > maxfreq)\n            maxfreq = f;\n\n        group.computeIfAbsent(f, z-> new Stack()).push(x);\n    }\n\n    public int pop() {\n        int x = group.get(maxfreq).pop();\n        freq.put(x, freq.get(x) - 1);\n        if (group.get(maxfreq).size() == 0)\n            maxfreq--;\n        return x;\n    }\n}\n```\n```python [CvqCTNz2-Python]\nclass FreqStack(object):\n\n    def __init__(self):\n        self.freq = collections.Counter()\n        self.group = collections.defaultdict(list)\n        self.maxfreq = 0\n\n    def push(self, x):\n        f = self.freq[x] + 1\n        self.freq[x] = f\n        if f > self.maxfreq:\n            self.maxfreq = f\n        self.group[f].append(x)\n\n    def pop(self):\n        x = self.group[self.maxfreq].pop()\n        self.freq[x] -= 1\n        if not self.group[self.maxfreq]:\n            self.maxfreq -= 1\n\n        return x\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：对于 `push` 和 `pop` 操作，$O(1)$。\n\n* 空间复杂度：$O(N)$，其中 `N` 为 `FreqStack` 中元素的数目。"
}