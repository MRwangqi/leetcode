{
	"titleSlug": "create-maximum-number",
	"slug": "pin-jie-zui-da-shu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/create-maximum-number/solution/pin-jie-zui-da-shu-by-leetcode-solution/",
	"content": "#### 方法一：单调栈\n\n为了找到长度为 $k$ 的最大数，需要从两个数组中分别选出最大的子序列，这两个子序列的长度之和为 $k$，然后将这两个子序列合并得到最大数。两个子序列的长度最小为 $0$，最大不能超过 $k$ 且不能超过对应的数组长度。\n\n令数组 $\\textit{nums}_1$ 的长度为 $m$，数组 $\\textit{nums}_2$ 的长度为 $n$，则需要从数组 $\\textit{nums}_1$ 中选出长度为 $x$ 的子序列，以及从数组 $\\textit{nums}_2$ 中选出长度为 $y$ 的子序列，其中 $x+y=k$，且满足 $0 \\le x \\le m$ 和 $0 \\le y \\le n$。需要遍历所有可能的 $x$ 和 $y$ 的值，对于每一组 $x$ 和 $y$ 的值，得到最大数。在整个过程中维护可以通过拼接得到的最大数。\n\n对于每一组 $x$ 和 $y$ 的值，得到最大数的过程分成两步，第一步是分别从两个数组中得到指定长度的最大子序列，第二步是将两个最大子序列合并。\n\n第一步可以通过单调栈实现。单调栈满足从栈底到栈顶的元素单调递减，从左到右遍历数组，遍历过程中维护单调栈内的元素，需要保证遍历结束之后单调栈内的元素个数等于指定的最大子序列的长度。遍历结束之后，将从栈底到栈顶的元素依次拼接，即得到最大子序列。\n\n第二步需要自定义比较方法。首先比较两个子序列的当前元素，如果两个当前元素不同，则选其中较大的元素作为下一个合并的元素，否则需要比较后面的所有元素才能决定选哪个元素作为下一个合并的元素。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/321/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/321/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/321/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/321/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/321/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/321/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/321/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/321/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/321/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/321/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/321/11.png)>\n\n在下面的代码中，单调栈使用数组实现，数组最左侧为栈底。使用数组实现，可以直接从左到右遍历数组得到最大子序列。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] maxNumber(int[] nums1, int[] nums2, int k) {\n        int m = nums1.length, n = nums2.length;\n        int[] maxSubsequence = new int[k];\n        int start = Math.max(0, k - n), end = Math.min(k, m);\n        for (int i = start; i <= end; i++) {\n            int[] subsequence1 = maxSubsequence(nums1, i);\n            int[] subsequence2 = maxSubsequence(nums2, k - i);\n            int[] curMaxSubsequence = merge(subsequence1, subsequence2);\n            if (compare(curMaxSubsequence, 0, maxSubsequence, 0) > 0) {\n                System.arraycopy(curMaxSubsequence, 0, maxSubsequence, 0, k);\n            }\n        }\n        return maxSubsequence;\n    }\n\n    public int[] maxSubsequence(int[] nums, int k) {\n        int length = nums.length;\n        int[] stack = new int[k];\n        int top = -1;\n        int remain = length - k;\n        for (int i = 0; i < length; i++) {\n            int num = nums[i];\n            while (top >= 0 && stack[top] < num && remain > 0) {\n                top--;\n                remain--;\n            }\n            if (top < k - 1) {\n                stack[++top] = num;\n            } else {\n                remain--;\n            }\n        }\n        return stack;\n    }\n\n    public int[] merge(int[] subsequence1, int[] subsequence2) {\n        int x = subsequence1.length, y = subsequence2.length;\n        if (x == 0) {\n            return subsequence2;\n        }\n        if (y == 0) {\n            return subsequence1;\n        }\n        int mergeLength = x + y;\n        int[] merged = new int[mergeLength];\n        int index1 = 0, index2 = 0;\n        for (int i = 0; i < mergeLength; i++) {\n            if (compare(subsequence1, index1, subsequence2, index2) > 0) {\n                merged[i] = subsequence1[index1++];\n            } else {\n                merged[i] = subsequence2[index2++];\n            }\n        }\n        return merged;\n    }\n\n    public int compare(int[] subsequence1, int index1, int[] subsequence2, int index2) {\n        int x = subsequence1.length, y = subsequence2.length;\n        while (index1 < x && index2 < y) {\n            int difference = subsequence1[index1] - subsequence2[index2];\n            if (difference != 0) {\n                return difference;\n            }\n            index1++;\n            index2++;\n        }\n        return (x - index1) - (y - index2);\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {\n        int m = nums1.size(), n = nums2.size();\n        vector<int> maxSubsequence(k, 0);\n        int start = max(0, k - n), end = min(k, m);\n        for (int i = start; i <= end; i++) {\n            vector<int> subsequence1(MaxSubsequence(nums1, i));\n            vector<int> subsequence2(MaxSubsequence(nums2, k - i));\n            vector<int> curMaxSubsequence(merge(subsequence1, subsequence2));\n            if (compare(curMaxSubsequence, 0, maxSubsequence, 0) > 0) {\n                maxSubsequence.swap(curMaxSubsequence);\n            }\n        }\n        return maxSubsequence;\n    }\n\n    vector<int> MaxSubsequence(vector<int>& nums, int k) {\n        int length = nums.size();\n        vector<int> stack(k, 0);\n        int top = -1;\n        int remain = length - k;\n        for (int i = 0; i < length; i++) {\n            int num = nums[i];\n            while (top >= 0 && stack[top] < num && remain > 0) {\n                top--;\n                remain--;\n            }\n            if (top < k - 1) {\n                stack[++top] = num;\n            } else {\n                remain--;\n            }\n        }\n        return stack;\n    }\n\n    vector<int> merge(vector<int>& subsequence1, vector<int>& subsequence2) {\n        int x = subsequence1.size(), y = subsequence2.size();\n        if (x == 0) {\n            return subsequence2;\n        }\n        if (y == 0) {\n            return subsequence1;\n        }\n        int mergeLength = x + y;\n        vector<int> merged(mergeLength);\n        int index1 = 0, index2 = 0;\n        for (int i = 0; i < mergeLength; i++) {\n            if (compare(subsequence1, index1, subsequence2, index2) > 0) {\n                merged[i] = subsequence1[index1++];\n            } else {\n                merged[i] = subsequence2[index2++];\n            }\n        }\n        return merged;\n    }\n\n    int compare(vector<int>& subsequence1, int index1, vector<int>& subsequence2, int index2) {\n        int x = subsequence1.size(), y = subsequence2.size();\n        while (index1 < x && index2 < y) {\n            int difference = subsequence1[index1] - subsequence2[index2];\n            if (difference != 0) {\n                return difference;\n            }\n            index1++;\n            index2++;\n        }\n        return (x - index1) - (y - index2);\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxNumber = function(nums1, nums2, k) {\n    const m = nums1.length, n = nums2.length;\n    const maxSubsequence = new Array(k).fill(0);\n    let start = Math.max(0, k - n), end = Math.min(k, m);\n    for (let i = start; i <= end; i++) {\n        const subsequence1 = new MaxSubsequence(nums1, i);\n        const subsequence2 = new MaxSubsequence(nums2, k - i);\n        const curMaxSubsequence = merge(subsequence1, subsequence2);\n        if (compare(curMaxSubsequence, 0, maxSubsequence, 0) > 0) {\n            maxSubsequence.splice(0, k, ...curMaxSubsequence);\n        }\n    }\n    return maxSubsequence;\n};\n\nvar MaxSubsequence = function(nums, k) {\n    const length = nums.length;\n    const stack = new Array(k).fill(0);\n    let top = -1;\n    let remain = length - k;\n    for (let i = 0; i < length; i++) {\n        const num = nums[i];\n        while (top >= 0 && stack[top] < num && remain > 0) {\n            top--;\n            remain--;\n        }\n        if (top < k - 1) {\n            stack[++top] = num;\n        } else {\n            remain--;\n        }\n    }\n    return stack;\n}\n\nconst merge = (subsequence1, subsequence2) => {\n    const x = subsequence1.length, y = subsequence2.length;\n    if (x === 0) {\n        return subsequence2;\n    }\n    if (y === 0) {\n        return subsequence1;\n    }\n    const mergeLength = x + y;\n    const merged = new Array(mergeLength).fill(0);\n    let index1 = 0, index2 = 0;\n    for (let i = 0; i < mergeLength; i++) {\n        if (compare(subsequence1, index1, subsequence2, index2) > 0) {\n            merged[i] = subsequence1[index1++];\n        } else {\n            merged[i] = subsequence2[index2++];\n        }\n    }\n    return merged;\n}\n\nconst compare = (subsequence1, index1, subsequence2, index2) => {\n    const x = subsequence1.length, y = subsequence2.length;\n    while (index1 < x && index2 < y) {\n        const difference = subsequence1[index1] - subsequence2[index2];\n        if (difference !== 0) {\n            return difference;\n        }\n        index1++;\n        index2++;\n    }\n    return (x - index1) - (y - index2);\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        m, n = len(nums1), len(nums2)\n        maxSubsequence = [0] * k\n        start, end = max(0, k - n), min(k, m)\n\n        for i in range(start, end + 1):\n            subsequence1 = self.getMaxSubsequence(nums1, i)\n            subsequence2 = self.getMaxSubsequence(nums2, k - i)\n            curMaxSubsequence = self.merge(subsequence1, subsequence2)\n            if self.compare(curMaxSubsequence, 0, maxSubsequence, 0) > 0:\n                maxSubsequence = curMaxSubsequence\n        \n        return maxSubsequence\n\n    def getMaxSubsequence(self, nums: List[int], k: int) -> int:\n        stack = [0] * k\n        top = -1\n        remain = len(nums) - k\n\n        for i, num in enumerate(nums):\n            while top >= 0 and stack[top] < num and remain > 0:\n                top -= 1\n                remain -= 1\n            if top < k - 1:\n                top += 1\n                stack[top] = num\n            else:\n                remain -= 1\n        \n        return stack\n\n    def merge(self, subsequence1: List[int], subsequence2: List[int]) -> List[int]:\n        x, y = len(subsequence1), len(subsequence2)\n        if x == 0:\n            return subsequence2\n        if y == 0:\n            return subsequence1\n        \n        mergeLength = x + y\n        merged = list()\n        index1 = index2 = 0\n\n        for _ in range(mergeLength):\n            if self.compare(subsequence1, index1, subsequence2, index2) > 0:\n                merged.append(subsequence1[index1])\n                index1 += 1\n            else:\n                merged.append(subsequence2[index2])\n                index2 += 1\n        \n        return merged\n\n    def compare(self, subsequence1: List[int], index1: int, subsequence2: List[int], index2: int) -> int:\n        x, y = len(subsequence1), len(subsequence2)\n        while index1 < x and index2 < y:\n            difference = subsequence1[index1] - subsequence2[index2]\n            if difference != 0:\n                return difference\n            index1 += 1\n            index2 += 1\n        \n        return (x - index1) - (y - index2)\n```\n\n```Golang [sol1-Golang]\nfunc maxSubsequence(a []int, k int) (s []int) {\n    for i, v := range a {\n        for len(s) > 0 && len(s)+len(a)-1-i >= k && v > s[len(s)-1] {\n            s = s[:len(s)-1]\n        }\n        if len(s) < k {\n            s = append(s, v)\n        }\n    }\n    return\n}\n\nfunc lexicographicalLess(a, b []int) bool {\n    for i := 0; i < len(a) && i < len(b); i++ {\n        if a[i] != b[i] {\n            return a[i] < b[i]\n        }\n    }\n    return len(a) < len(b)\n}\n\nfunc merge(a, b []int) []int {\n    merged := make([]int, len(a)+len(b))\n    for i := range merged {\n        if lexicographicalLess(a, b) {\n            merged[i], b = b[0], b[1:]\n        } else {\n            merged[i], a = a[0], a[1:]\n        }\n    }\n    return merged\n}\n\nfunc maxNumber(nums1, nums2 []int, k int) (res []int) {\n    start := 0\n    if k > len(nums2) {\n        start = k - len(nums2)\n    }\n    for i := start; i <= k && i <= len(nums1); i++ {\n        s1 := maxSubsequence(nums1, i)\n        s2 := maxSubsequence(nums2, k-i)\n        merged := merge(s1, s2)\n        if lexicographicalLess(res, merged) {\n            res = merged\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint compare(int* subseq1, int subseq1Size, int index1, int* subseq2, int subseq2Size, int index2) {\n    while (index1 < subseq1Size && index2 < subseq2Size) {\n        int difference = subseq1[index1] - subseq2[index2];\n        if (difference != 0) {\n            return difference;\n        }\n        index1++;\n        index2++;\n    }\n    return (subseq1Size - index1) - (subseq2Size - index2);\n}\n\nint* merge(int* subseq1, int subseq1Size, int* subseq2, int subseq2Size) {\n    if (subseq1Size == 0) {\n        return subseq2;\n    }\n    if (subseq2Size == 0) {\n        return subseq1;\n    }\n    int mergeLength = subseq1Size + subseq2Size;\n    int* merged = malloc(sizeof(int) * (subseq1Size + subseq2Size));\n    int index1 = 0, index2 = 0;\n    for (int i = 0; i < mergeLength; i++) {\n        if (compare(subseq1, subseq1Size, index1, subseq2, subseq2Size, index2) > 0) {\n            merged[i] = subseq1[index1++];\n        } else {\n            merged[i] = subseq2[index2++];\n        }\n    }\n    return merged;\n}\n\nint* MaxSubsequence(int* nums, int numsSize, int k) {\n    int* stack = malloc(sizeof(int) * k);\n    memset(stack, 0, sizeof(int) * k);\n    int top = -1;\n    int remain = numsSize - k;\n    for (int i = 0; i < numsSize; i++) {\n        int num = nums[i];\n        while (top >= 0 && stack[top] < num && remain > 0) {\n            top--;\n            remain--;\n        }\n        if (top < k - 1) {\n            stack[++top] = num;\n        } else {\n            remain--;\n        }\n    }\n    return stack;\n}\n\nvoid swap(int** a, int** b) {\n    int* tmp = *a;\n    *a = *b, *b = tmp;\n}\n\nint* maxNumber(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize) {\n    int* maxSubsequence = malloc(sizeof(int) * k);\n    memset(maxSubsequence, 0, sizeof(int) * k);\n    *returnSize = k;\n    int start = fmax(0, k - nums2Size), end = fmin(k, nums1Size);\n    for (int i = start; i <= end; i++) {\n        int* subseq1 = MaxSubsequence(nums1, nums1Size, i);\n        int* subseq2 = MaxSubsequence(nums2, nums2Size, k - i);\n        int* curMaxSubsequence = merge(subseq1, i, subseq2, k - i);\n        if (compare(curMaxSubsequence, k, 0, maxSubsequence, k, 0) > 0) {\n            swap(&curMaxSubsequence, &maxSubsequence);\n        }\n    }\n    return maxSubsequence;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(k(m+n+k^2))$，其中 $m$ 和 $n$ 分别是数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 的长度，$k$ 是拼接最大数的长度。\n   两个子序列的长度之和为 $k$，最多有 $k$ 种不同的长度组合。对于每一种长度组合，需要首先得到两个最大子序列，然后进行合并。\n   得到两个最大子序列的时间复杂度为线性，即 $O(m+n)$。\n   合并两个最大子序列，需要进行 $k$ 次合并，每次合并需要进行比较，最坏情况下，比较的时间复杂度为 $O(k)$，因此合并操作的时间复杂度为 $O(k^2)$。\n   因此对于每一种长度组合，时间复杂度为 $O(m+n+k^2)$，总时间复杂度为 $O(k(m+n+k^2))$。\n\n- 空间复杂度：$O(k)$，其中 $k$ 是拼接最大数的长度。每次从两个数组得到两个子序列，两个子序列的长度之和为 $k$。"
}