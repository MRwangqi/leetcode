{
	"titleSlug": "range-addition-ii",
	"slug": "fan-wei-qiu-he-ii-by-leetcode-solution-kcxq",
	"url": "https://leetcode-cn.com/problems/range-addition-ii/solution/fan-wei-qiu-he-ii-by-leetcode-solution-kcxq/",
	"content": "#### 方法一：维护所有操作的交集\n\n**思路与算法**\n\n对于每一次操作，给定 $(a, b)$，我们会将矩阵中所有满足 $0 \\leq i < a$ 以及 $0 \\leq j < b$ 的位置 $(i, j)$ 全部加上 $1$。由于 $a, b$ 均为正整数，那么 $(0, 0)$ 总是满足上述条件，并且最终位置 $(0, 0)$ 的值就等于操作的次数。\n\n因此，我们的任务即为找出矩阵中所有满足要求的次数**恰好等于**操作次数的位置。假设操作次数为 $k$，那么 $(i, j)$ 需要满足：\n\n$$\n\\begin{cases}\n    0 \\leq i < a_0, 0 \\leq i < a_1, \\cdots, 0 \\leq i < a_{k-1} \\\\\n    0 \\leq j < b_0, 0 \\leq j < b_1, \\cdots, 0 \\leq j < b_{k-1} \\\\\n\\end{cases}\n$$\n\n等价于：\n\n$$\n\\begin{cases}\\tag{1}\n    0 \\leq i < \\min\\limits_k a \\\\\n    0 \\leq j < \\min\\limits_k b\n\\end{cases}\n$$\n\n这样一来，我们只需要求出 $a$ 和 $b$ 中的最小值，分别记为 $\\min\\limits_k a$ 以及 $\\min\\limits_k b$，那么满足 $(1)$ 式的 $(i, j)$ 一共有 $\\min\\limits_k a \\times \\min\\limits_k b$ 对。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxCount(int m, int n, vector<vector<int>>& ops) {\n        int mina = m, minb = n;\n        for (const auto& op: ops) {\n            mina = min(mina, op[0]);\n            minb = min(minb, op[1]);\n        }\n        return mina * minb;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxCount(int m, int n, int[][] ops) {\n        int mina = m, minb = n;\n        for (int[] op : ops) {\n            mina = Math.min(mina, op[0]);\n            minb = Math.min(minb, op[1]);\n        }\n        return mina * minb;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MaxCount(int m, int n, int[][] ops) {\n        int mina = m, minb = n;\n        foreach (int[] op in ops) {\n            mina = Math.Min(mina, op[0]);\n            minb = Math.Min(minb, op[1]);\n        }\n        return mina * minb;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxCount(self, m: int, n: int, ops: List[List[int]]) -> int:\n        mina, minb = m, n\n        for a, b in ops:\n            mina = min(mina, a)\n            minb = min(minb, b)\n        return mina * minb\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxCount = function(m, n, ops) {\n    let mina = m, minb = n;\n    for (const op of ops) {\n        mina = Math.min(mina, op[0]);\n        minb = Math.min(minb, op[1]);\n    }\n    return mina * minb;\n};\n```\n\n```go [sol1-Golang]\nfunc maxCount(m, n int, ops [][]int) int {\n    mina, minb := m, n\n    for _, op := range ops {\n        mina = min(mina, op[0])\n        minb = min(minb, op[1])\n    }\n    return mina * minb\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(k)$，其中 $k$ 是数组 $\\textit{ops}$ 的长度。\n\n- 空间复杂度：$O(1)$。"
}