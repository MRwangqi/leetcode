{
	"titleSlug": "number-of-arithmetic-triplets",
	"slug": "by-endlesscheng-mpxt",
	"url": "https://leetcode-cn.com/problems/number-of-arithmetic-triplets/solution/by-endlesscheng-mpxt/",
	"content": "[视频讲解](https://www.bilibili.com/video/BV1CN4y1V7uE) 已出炉，欢迎点赞三连，在评论区分享你对这场周赛的看法~\r\n\r\n--- \r\n \r\n#### 方法一：哈希表\r\n\r\n用哈希表记录每个元素，然后遍历 $\\textit{nums}$，看 $\\textit{nums}[j]-\\textit{diff}$ 和 $\\textit{nums}[j]+\\textit{diff}$ 是否都在哈希表中。\r\n\r\n#### 复杂度分析\r\n\r\n- 时间复杂度：$O(n)$，其中 $n$ 为 $\\textit{nums}$ 的长度。\r\n- 空间复杂度：$O(n)$。\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\r\n        s = set(nums)\r\n        return sum(x - diff in s and x + diff in s for x in nums)\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc arithmeticTriplets(nums []int, diff int) (ans int) {\r\n\tset := map[int]bool{}\r\n\tfor _, x := range nums {\r\n\t\tset[x] = true\r\n\t}\r\n\tfor _, x := range nums {\r\n\t\tif set[x-diff] && set[x+diff] {\r\n\t\t\tans++\r\n\t\t}\r\n\t}\r\n\treturn\r\n}\r\n```\r\n\r\n也可以改为遍历 $\\textit{nums}[k]$，这样加入哈希表的的同时可以顺带求出算术三元组，从而做到一次遍历。\r\n\r\n```py [sol12-Python3]\r\nclass Solution:\r\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\r\n        ans, s = 0, set()\r\n        for x in nums:\r\n            if x - diff in s and x - diff * 2 in s:\r\n                ans += 1\r\n            s.add(x)\r\n        return ans\r\n```\r\n\r\n```go [sol12-Go]\r\nfunc arithmeticTriplets(nums []int, diff int) (ans int) {\r\n\tset := map[int]bool{}\r\n\tfor _, x := range nums {\r\n\t\tif set[x-diff] && set[x-diff*2] {\r\n\t\t\tans++\r\n\t\t}\r\n\t\tset[x] = true\r\n\t}\r\n\treturn\r\n}\r\n```\r\n\r\n#### 方法二：三指针\r\n\r\n由于 $\\textit{nums}$ 是严格递增的，遍历 $\\textit{nums}[k]$ 时，$i$ 和 $j$ 只增不减，因此可以用三个指针来实现判断逻辑。\r\n\r\n#### 复杂度分析\r\n\r\n- 时间复杂度：$O(n)$，其中 $n$ 为 $\\textit{nums}$ 的长度。\r\n- 空间复杂度：$O(1)$。仅需要几个额外的变量。\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\r\n        ans, i, j = 0, 0, 1\r\n        for x in nums:\r\n            while nums[j] + diff < x:\r\n                j += 1\r\n            if nums[j] + diff > x:\r\n                continue\r\n            while nums[i] + diff * 2 < x:\r\n                i += 1\r\n            if nums[i] + diff * 2 == x:\r\n                ans += 1\r\n        return ans\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc arithmeticTriplets(nums []int, diff int) (ans int) {\r\n\ti, j := 0, 1\r\n\tfor _, x := range nums[2:] {\r\n\t\tfor nums[j]+diff < x {\r\n\t\t\tj++\r\n\t\t}\r\n\t\tif nums[j]+diff > x {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tfor nums[i]+diff*2 < x {\r\n\t\t\ti++\r\n\t\t}\r\n\t\tif nums[i]+diff*2 == x {\r\n\t\t\tans++\r\n\t\t}\r\n\t}\r\n\treturn\r\n}\r\n```\r\n"
}