{
	"titleSlug": "check-if-string-is-a-prefix-of-array",
	"slug": "jian-cha-zi-fu-chuan-shi-fou-wei-shu-zu-xxpvl",
	"url": "https://leetcode-cn.com/problems/check-if-string-is-a-prefix-of-array/solution/jian-cha-zi-fu-chuan-shi-fou-wei-shu-zu-xxpvl/",
	"content": "#### 方法一：逐字符比较\n\n**思路与算法**\n\n我们可以按顺序遍历 $\\textit{words}$ 中的字符串，并与 $s$ 逐字符比较。如果遇到不同的字符，则返回 $\\texttt{false}$。\n\n同时，根据题意，当且仅当 $s$ 与 $\\textit{words}$ 中任一字符串同时遍历结束时，$s$ 才为 $\\textit{words}$ 的前缀字符串。因此，如果遇到以下两种情况时，也应返回 $\\texttt{false}$：\n\n- 在未遍历完成 $\\textit{words}$ 的某个字符串时，$s$ 提前遍历完成；\n\n- 在遍历完成 $\\textit{words}$ 的所有字符串后，$s$ 仍未遍历完成。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isPrefixString(string s, vector<string>& words) {\n        int i = 0;\n        int n = s.size();\n        for (const string& word : words){\n            for (char ch : word){\n                if (i < n && ch == s[i]){\n                    ++i;\n                }\n                else{\n                    // s 提前遍历完成或当前字符不匹配\n                    return false;\n                }\n            }\n            if (i == n){\n                // 此时满足前缀定义\n                return true;\n            }\n        }\n        // 遍历完成 words 时 s 仍未遍历完成\n        return false;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def isPrefixString(self, s: str, words: List[str]) -> bool:\n        i = 0\n        n = len(s)\n        for word in words:\n            for ch in word:\n                if i < n and ch == s[i]:\n                    i += 1\n                else:\n                    # s 提前遍历完成或当前字符不匹配\n                    return False\n            if i == n:\n                # 此时满足前缀定义\n                return True\n        # 遍历完成 words 时 s 仍未遍历完成\n        return False\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\min(n, m))$，其中 $n$ 为 $s$ 的长度，$m$ 为 $\\textit{words}$ 中所有字符串的长度总和。即为逐字符比较的时间复杂度。\n\n- 空间复杂度：$O(1)$。"
}