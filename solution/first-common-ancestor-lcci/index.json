{
	"titleSlug": "first-common-ancestor-lcci",
	"slug": "shou-ge-gong-tong-zu-xian-by-leetcode-so-c2sl",
	"url": "https://leetcode-cn.com/problems/first-common-ancestor-lcci/solution/shou-ge-gong-tong-zu-xian-by-leetcode-so-c2sl/",
	"content": "#### 方法一：深度优先搜索\n\n**思路和算法**\n\n我们递归遍历整棵二叉树，定义 $f_x$ 表示 $x$ 节点的子树中是否包含 $p$ 节点或 $q$ 节点，如果包含为 `true`，否则为 `false`。那么符合条件的首个共同祖先 $x$ 一定满足如下条件：\n\n$$\n(f_{\\text{lson}}\\ \\&\\&\\ f_{\\text{rson}})\\ ||\\ ((x\\ =\\ p\\ ||\\ x\\ =\\ q)\\ \\&\\&\\ (f_{\\text{lson}}\\ ||\\ f_{\\text{rson}}))\n$$\n\n其中 $\\text{lson}$ 和 $\\text{rson}$ 分别代表 $x$ 节点的左孩子和右孩子。初看可能会感觉条件判断有点复杂，我们来一条条看，$f_{\\text{lson}}\\ \\&\\&\\ f_{\\text{rson}}$ 说明左子树和右子树均包含 $p$ 节点或 $q$ 节点，如果左子树包含的是 $p$ 节点，那么右子树只能包含 $q$ 节点，反之亦然，因为 $p$ 节点和 $q$ 节点都是不同且唯一的节点，因此如果满足这个判断条件即可说明 $x$ 就是我们要找的首个共同祖先。再来看第二条判断条件，这个判断条件即是考虑了 $x$ 恰好是 $p$ 节点或 $q$ 节点且它的左子树或右子树有一个包含了另一个节点的情况，因此如果满足这个判断条件亦可说明 $x$ 就是我们要找的首个共同祖先。\n\n你可能会疑惑这样找出来的公共祖先深度是否是最大的。其实是最大的，因为我们是自底向上从叶子节点开始更新的，所以在所有满足条件的公共祖先中一定是深度最大的祖先先被访问到，且由于 $f_x$ 本身的定义很巧妙，在找到首个共同祖先 $x$ 以后，$f_x$ 按定义被设置为 `true` ，即假定了这个子树中只有一个 $p$ 节点或 $q$ 节点，因此其他公共祖先不会再被判断为符合条件。\n\n下图展示了一个示例，搜索树中两个节点 `9` 和 `11` 的首个共同祖先。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/jindian_04.08/1.PNG),![fig2](https://assets.leetcode-cn.com/solution-static/jindian_04.08/2.PNG),![fig3](https://assets.leetcode-cn.com/solution-static/jindian_04.08/3.PNG),![fig4](https://assets.leetcode-cn.com/solution-static/jindian_04.08/4.PNG),![fig5](https://assets.leetcode-cn.com/solution-static/jindian_04.08/5.PNG),![fig6](https://assets.leetcode-cn.com/solution-static/jindian_04.08/6.PNG),![fig7](https://assets.leetcode-cn.com/solution-static/jindian_04.08/7.PNG),![fig8](https://assets.leetcode-cn.com/solution-static/jindian_04.08/8.PNG),![fig9](https://assets.leetcode-cn.com/solution-static/jindian_04.08/9.PNG),![fig10](https://assets.leetcode-cn.com/solution-static/jindian_04.08/10.PNG),![fig11](https://assets.leetcode-cn.com/solution-static/jindian_04.08/11.PNG)>\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    TreeNode* ans;\n    bool dfs(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if (root == nullptr) return false;\n        bool lson = dfs(root->left, p, q);\n        bool rson = dfs(root->right, p, q);\n        if ((lson && rson) || ((root->val == p->val || root->val == q->val) && (lson || rson))) {\n            ans = root;\n        } \n        return lson || rson || (root->val == p->val || root->val == q->val);\n    }\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        dfs(root, p, q);\n        return ans;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar lowestCommonAncestor = function(root, p, q) {\n    let ans;\n    const dfs = (root, p, q) => {\n        if (root === null) return false;\n        const lson = dfs(root.left, p, q);\n        const rson = dfs(root.right, p, q);\n        if ((lson && rson) || ((root.val === p.val || root.val === q.val) && (lson || rson))) {\n            ans = root;\n        } \n        return lson || rson || (root.val === p.val || root.val === q.val);\n    }\n    dfs(root, p, q);\n    return ans;\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n\n    private TreeNode ans;\n\n    public Solution() {\n        this.ans = null;\n    }\n\n    private boolean dfs(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null) return false;\n        boolean lson = dfs(root.left, p, q);\n        boolean rson = dfs(root.right, p, q);\n        if ((lson && rson) || ((root.val == p.val || root.val == q.val) && (lson || rson))) {\n            ans = root;\n        } \n        return lson || rson || (root.val == p.val || root.val == q.val);\n    }\n\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        this.dfs(root, p, q);\n        return this.ans;\n    }\n}\n```\n\n```golang [sol1-Golang]\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n    if root == nil {\n        return nil\n    }\n    if root.Val == p.Val || root.Val == q.Val {\n        return root\n    }\n    left := lowestCommonAncestor(root.Left, p, q)\n    right := lowestCommonAncestor(root.Right, p, q)\n    if left != nil && right != nil {\n        return root\n    }\n    if left == nil {\n        return right\n    }\n    return left\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是二叉树的节点数。二叉树的所有节点有且只会被访问一次，因此时间复杂度为 $O(N)$。\n\n* 空间复杂度：$O(N)$ ，其中 $N$ 是二叉树的节点数。递归调用的栈深度取决于二叉树的高度，二叉树最坏情况下为一条链，此时高度为 $N$，因此空间复杂度为 $O(N)$。"
}