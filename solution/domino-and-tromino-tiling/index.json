{
	"titleSlug": "domino-and-tromino-tiling",
	"slug": "duo-mi-nuo-yu-tuo-mi-nuo-ping-pu-by-leetcode",
	"url": "https://leetcode-cn.com/problems/domino-and-tromino-tiling/solution/duo-mi-nuo-yu-tuo-mi-nuo-ping-pu-by-leetcode/",
	"content": "#### 方法一：动态规划【通过】\n\n**思想**\n\n`dp[state]` 表示当前列在不同状态下铺砖方式的数量。如果 `state` 的第 `i` 位是 1，表示当前列的第 `i` 行铺砖；如果 `state` 的第 `i` 位是 0，表示当前列的第 `i` 行不铺砖。\n\n其中，`dp[0]` 表示当前列两行都不铺；`dp[1]` 表示当前列第一行不铺，第二行铺；`dp[2]` 表示当前列第一行铺，第二行不铺；`dp[3]` 表示当前列的两行都铺。\n\n**算法**\n\n每列都有四种不同的铺砖状态，且每种状态都可以在前一列和当前列已存在的不同铺砖状态下，通过再次铺砖转换得到。\n\n分析四种不同的铺砖状态可在哪些状态下转换得到。\n\n* 两行都不铺\n  * 两列都未铺，然后在第一行垂直铺多米诺瓷砖\n  * 第一列已铺，第二列未铺，且不铺砖\n\n* 第一行不铺，第二行铺\n  * 两列都未铺，然后铺多米诺瓷砖\n  * 第一列第一行已铺，然后在第一列第二行水平铺多米诺瓷砖\n\n* 第一行铺，第二行不铺 ---- 与第一行不铺，第二行铺的方法对称\n\n* 两行都铺\n  * 两列都未铺，然后水平铺两个多米诺瓷砖\n  * 第一列有一行已铺，然后铺一个托米诺瓷砖（实际上是两种情况）\n\n![](https://pic.leetcode-cn.com/Figures/790/possible.png){:width=500}\n\n```java [solution1-Java]\nclass Solution {\n    public int numTilings(int N) {\n        int MOD = 1_000_000_007;\n        long[] dp = new long[]{1, 0, 0, 0};\n        for (int i = 0; i < N; ++i) {\n            long[] ndp = new long[4];\n            ndp[0b00] = (dp[0b00] + dp[0b11]) % MOD;\n            ndp[0b01] = (dp[0b00] + dp[0b10]) % MOD;\n            ndp[0b10] = (dp[0b00] + dp[0b01]) % MOD;\n            ndp[0b11] = (dp[0b00] + dp[0b01] + dp[0b10]) % MOD;\n            dp = ndp;\n        }\n        return (int) dp[0];\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def numTilings(self, N):\n        MOD = 10**9 + 7\n        dp = [1, 0, 0, 0]\n        for _ in xrange(N):\n            ndp = [0, 0, 0, 0]\n            ndp[0b00] = (dp[0b00] + dp[0b11]) % MOD\n            ndp[0b01] = (dp[0b00] + dp[0b10]) % MOD\n            ndp[0b10] = (dp[0b00] + dp[0b01]) % MOD\n            ndp[0b11] = (dp[0b00] + dp[0b01] + dp[0b10]) % MOD\n            dp = ndp\n\n        return dp[0]\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，`state` 被更新 `N` 次。 \n\n* 空间复杂度：$O(1)$。\n\n#### 方法二：矩阵求幂\n\n**思路**\n\n*方法一*中每种状态的转换可以看作是其他几种状态的线性组合。每次计算下一列四种状态的铺砖方式数量时，可以将这四种线性组合看做矩阵转换。那么这个矩阵的 $n$ 次幂可以看作是转换了 $n$ 次，因此我们可以把这个问题简化为矩阵求幂的问题。\n\n**算法**\n\n令 $T$ 为*方法一*中 `dp -> ndp` 的线性转换矩阵，那么 $T^n$ 表示连续 $n$ 次转换。\n\n为了提高 $T^n$ 的计算效率，我们使用 $T^{2k} = T^k * T^k$ 和 $T^{2k + 1} = T * T^{2k}$ 公式将计算复杂度降低到 $O(\\log n)$。\n\n```java [solution2-Java]\nclass Solution {\n    int MOD = 1_000_000_007;\n\n    public int numTilings(int N) {\n        int[][] T = new int[][]{{1,0,0,1},{1,0,1,0},{1,1,0,0},{1,1,1,0}};\n        return matrixExpo(T, N)[0][0];\n    }\n\n    public int[][] matrixMult(int[][] A, int[][] B) {\n        int[][] ans = new int[A.length][A.length];\n        for (int i = 0; i < A.length; i++)\n            for (int j = 0; j < B[0].length; j++) {\n                long entry = 0;\n                for (int k = 0; k < B.length; k++)\n                    entry += (long) A[i][k] * (long) B[k][j] % MOD;\n                ans[i][j] = (int) (entry % MOD);\n            }\n\n        return ans;\n    }\n\n    public int[][] matrixExpo(int[][] A, int pow) {\n        int[][] ans = new int[A.length][A.length];\n        for (int i = 0; i < A.length; i++) ans[i][i] = 1;\n        if (pow == 0) return ans;\n        if (pow == 1) return A;\n        if (pow % 2 == 1) return matrixMult(matrixExpo(A, pow-1), A);\n        int[][] B = matrixExpo(A, pow / 2);\n        return matrixMult(B, B);\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution(object):\n    def numTilings(self, N):\n        MOD = 10**9 + 7\n\n        def matrix_mult(A, B):\n            ZB = zip(*B)\n            return [[sum(a * b for a, b in zip(row, col)) % MOD\n                     for col in ZB] for row in A]\n\n        def matrix_expo(A, K):\n            if K == 0:\n                return [[+(i==j) for j in xrange(len(A))]\n                        for i in xrange(len(A))]\n            if K == 1:\n                return A\n            elif K % 2:\n                return matrix_mult(matrix_expo(A, K-1), A)\n            B = matrix_expo(A, K/2)\n            return matrix_mult(B, B)\n\n        T = [[1, 0, 0, 1],\n             [1, 0, 1, 0],\n             [1, 1, 0, 0],\n             [1, 1, 1, 0]]\n\n        return matrix_expo(T, N)[0][0]\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\log N)$，共 $O(\\log N)$ 次乘法。\n\n* 空间复杂度：$O(\\log N)$，递归调用栈的大小。"
}