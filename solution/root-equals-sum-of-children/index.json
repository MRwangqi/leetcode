{
	"titleSlug": "root-equals-sum-of-children",
	"slug": "pan-duan-gen-jie-dian-shi-fou-deng-yu-zi-zr6q",
	"url": "https://leetcode-cn.com/problems/root-equals-sum-of-children/solution/pan-duan-gen-jie-dian-shi-fou-deng-yu-zi-zr6q/",
	"content": "#### 方法一：直接判断\n\n计算两个子结点值之和，判断是否等于根结点值即可。\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean checkTree(TreeNode root) {\n        return root.val == root.left.val + root.right.val;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool CheckTree(TreeNode root) {\n        return root.val == root.left.val + root.right.val;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool checkTree(TreeNode* root) {\n        return root->val == root->left->val + root->right->val;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def checkTree(self, root: Optional[TreeNode]) -> bool:\n        return root.val == root.left.val + root.right.val\n```\n\n```C [sol1-C]\nbool checkTree(struct TreeNode* root) {\n    return root->val == root->left->val + root->right->val;\n}\n```\n\n```Go [sol1-Golang]\nfunc checkTree(root *TreeNode) bool {\n    return root.Val == root.Left.Val + root.Right.Val\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar checkTree = function(root) {\n    return root.val === root.left.val + root.right.val;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。\n\n- 空间复杂度：$O(1)$。"
}