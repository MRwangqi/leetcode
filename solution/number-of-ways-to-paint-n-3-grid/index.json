{
	"titleSlug": "number-of-ways-to-paint-n-3-grid",
	"slug": "gei-n-x-3-wang-ge-tu-tu-se-de-fang-an-shu-by-leetc",
	"url": "https://leetcode-cn.com/problems/number-of-ways-to-paint-n-3-grid/solution/gei-n-x-3-wang-ge-tu-tu-se-de-fang-an-shu-by-leetc/",
	"content": "#### 方法一：递推\n\n我们可以用 $f[i][\\textit{type}]$ 表示当网格的大小为 $i \\times 3$ 且最后一行的填色方法为 $\\textit{type}$ 时的方案数。由于我们在填充第 $i$ 行时，会影响我们填充方案的只有它上面的那一行（即 $i - 1$ 行），因此用 $f[i][\\textit{type}]$ 表示状态是合理的。\n\n那么我们如何计算 $f[i][\\textit{type}]$ 呢？可以发现：\n\n- 首先，$\\textit{type}$ 本身是要满足要求的。每一行有 $3$ 个网格，如果我们用 $0, 1, 2$ 分别代表红黄绿，那么 $\\textit{type}$ 可以看成一个三进制数，例如 $\\textit{type} = (102)_3$ 时，表示 $3$ 个网格从左到右的颜色分别为黄、红、绿；\n\n    - 这样以来，我们可以预处理出所有满足要求的 $\\textit{type}$。具体地，我们使用三重循环分别枚举每一个格子的颜色，只有相邻的格子颜色不相同时，$\\textit{type}$ 才满足要求。\n\n- 其次，$f[i][\\textit{type}]$ 应该等于所有 $f[i - 1][\\textit{type}']$ 的和，其中 $\\textit{type'}$ 和 $\\textit{type}$ 可以作为相邻的行。也就是说，$\\textit{type'}$ 和 $\\textit{type}$ 的对应位置不能相同。\n\n递推解法的本身不难想出，难度在于上述的预处理以及编码实现。下面给出包含详细注释的 `C++`、`Java` 和 `Python` 代码。\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int mod = 1000000007;\n\npublic:\n    int numOfWays(int n) {\n        // 预处理出所有满足条件的 type\n        vector<int> types;\n        for (int i = 0; i < 3; ++i) {\n            for (int j = 0; j < 3; ++j) {\n                for (int k = 0; k < 3; ++k) {\n                    if (i != j && j != k) {\n                        // 只要相邻的颜色不相同就行\n                        // 将其以十进制的形式存储\n                        types.push_back(i * 9 + j * 3 + k);\n                    }\n                }\n            }\n        }\n        int type_cnt = types.size();\n        // 预处理出所有可以作为相邻行的 type 对\n        vector<vector<int>> related(type_cnt, vector<int>(type_cnt));\n        for (int i = 0; i < type_cnt; ++i) {\n            // 得到 types[i] 三个位置的颜色\n            int x1 = types[i] / 9, x2 = types[i] / 3 % 3, x3 = types[i] % 3;\n            for (int j = 0; j < type_cnt; ++j) {\n                // 得到 types[j] 三个位置的颜色\n                int y1 = types[j] / 9, y2 = types[j] / 3 % 3, y3 = types[j] % 3;\n                // 对应位置不同色，才能作为相邻的行\n                if (x1 != y1 && x2 != y2 && x3 != y3) {\n                    related[i][j] = 1;\n                }\n            }\n        }\n        // 递推数组\n        vector<vector<int>> f(n + 1, vector<int>(type_cnt));\n        // 边界情况，第一行可以使用任何 type\n        for (int i = 0; i < type_cnt; ++i) {\n            f[1][i] = 1;\n        }\n        for (int i = 2; i <= n; ++i) {\n            for (int j = 0; j < type_cnt; ++j) {\n                for (int k = 0; k < type_cnt; ++k) {\n                    // f[i][j] 等于所有 f[i - 1][k] 的和\n                    // 其中 k 和 j 可以作为相邻的行\n                    if (related[k][j]) {\n                        f[i][j] += f[i - 1][k];\n                        f[i][j] %= mod;\n                    }\n                }\n            }\n        }\n        // 最终所有的 f[n][...] 之和即为答案\n        int ans = 0;\n        for (int i = 0; i < type_cnt; ++i) {\n            ans += f[n][i];\n            ans %= mod;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    static final int MOD = 1000000007;\n\n    public int numOfWays(int n) {\n        // 预处理出所有满足条件的 type\n        List<Integer> types = new ArrayList<Integer>();\n        for (int i = 0; i < 3; ++i) {\n            for (int j = 0; j < 3; ++j) {\n                for (int k = 0; k < 3; ++k) {\n                    if (i != j && j != k) {\n                        // 只要相邻的颜色不相同就行\n                        // 将其以十进制的形式存储\n                        types.add(i * 9 + j * 3 + k);\n                    }\n                }\n            }\n        }\n        int typeCnt = types.size();\n        // 预处理出所有可以作为相邻行的 type 对\n        int[][] related = new int[typeCnt][typeCnt];\n        for (int i = 0; i < typeCnt; ++i) {\n            // 得到 types[i] 三个位置的颜色\n            int x1 = types.get(i) / 9, x2 = types.get(i) / 3 % 3, x3 = types.get(i) % 3;\n            for (int j = 0; j < typeCnt; ++j) {\n                // 得到 types[j] 三个位置的颜色\n                int y1 = types.get(j) / 9, y2 = types.get(j) / 3 % 3, y3 = types.get(j) % 3;\n                // 对应位置不同色，才能作为相邻的行\n                if (x1 != y1 && x2 != y2 && x3 != y3) {\n                    related[i][j] = 1;\n                }\n            }\n        }\n        // 递推数组\n        int[][] f = new int[n + 1][typeCnt];\n        // 边界情况，第一行可以使用任何 type\n        for (int i = 0; i < typeCnt; ++i) {\n            f[1][i] = 1;\n        }\n        for (int i = 2; i <= n; ++i) {\n            for (int j = 0; j < typeCnt; ++j) {\n                for (int k = 0; k < typeCnt; ++k) {\n                    // f[i][j] 等于所有 f[i - 1][k] 的和\n                    // 其中 k 和 j 可以作为相邻的行\n                    if (related[k][j] != 0) {\n                        f[i][j] += f[i - 1][k];\n                        f[i][j] %= MOD;\n                    }\n                }\n            }\n        }\n        // 最终所有的 f[n][...] 之和即为答案\n        int ans = 0;\n        for (int i = 0; i < typeCnt; ++i) {\n            ans += f[n][i];\n            ans %= MOD;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numOfWays(self, n: int) -> int:\n        mod = 10**9 + 7\n        # 预处理出所有满足条件的 type\n        types = list()\n        for i in range(3):\n            for j in range(3):\n                for k in range(3):\n                    if i != j and j != k:\n                        # 只要相邻的颜色不相同就行\n                        # 将其以十进制的形式存储\n                        types.append(i * 9 + j * 3 + k)\n        type_cnt = len(types)\n        # 预处理出所有可以作为相邻行的 type 对\n        related = [[0] * type_cnt for _ in range(type_cnt)]\n        for i, ti in enumerate(types):\n            # 得到 types[i] 三个位置的颜色\n            x1, x2, x3 = ti // 9, ti // 3 % 3, ti % 3\n            for j, tj in enumerate(types):\n                # 得到 types[j] 三个位置的颜色\n                y1, y2, y3 = tj // 9, tj // 3 % 3, tj % 3\n                # 对应位置不同色，才能作为相邻的行\n                if x1 != y1 and x2 != y2 and x3 != y3:\n                    related[i][j] = 1\n        # 递推数组\n        f = [[0] * type_cnt for _ in range(n + 1)]\n        # 边界情况，第一行可以使用任何 type\n        f[1] = [1] * type_cnt\n        for i in range(2, n + 1):\n            for j in range(type_cnt):\n                for k in range(type_cnt):\n                    # f[i][j] 等于所有 f[i - 1][k] 的和\n                    # 其中 k 和 j 可以作为相邻的行\n                    if related[k][j]:\n                        f[i][j] += f[i - 1][k]\n                        f[i][j] %= mod\n        # 最终所有的 f[n][...] 之和即为答案\n        ans = sum(f[n]) % mod\n        return ans\n\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(T^2N)$，其中 $T$ 是满足要求的 $\\textit{type}$ 的数量，在示例一中已经给出了 $T = 12$。在递推的过程中，我们需要计算所有的 $f[i][\\textit{type}]$，并且需要枚举上一行的 $\\textit{type}'$。\n\n- 空间复杂度：$O(T^2 + TN)$。我们需要 $T * T$ 的二维数组存储 $\\textit{type}$ 之间的关系，$T * N$ 的数组存储递推的结果。注意到由于 $f[i][\\textit{type}]$ 只和上一行的状态有关，我们可以使用两个一维数组存储当前行和上一行的 $f$ 值，空间复杂度降低至 $O(T^2 + 2T) = O(T^2)$。\n\n#### 方法二：递推优化\n\n如果读者有一些高中数学竞赛基础，就可以发现上面的这个递推式是线性的，也就是说：\n\n- 我们可以进行一些化简；\n\n- 它存在通项公式。\n\n直观上，我们怎么化简方法一中的递推呢？\n\n我们把满足要求的 $\\textit{type}$ 都写出来，一共有 $12$ 种：\n\n```\n010, 012, 020, 021, 101, 102, 120, 121, 201, 202, 210, 212\n```\n\n我们可以把它们分成两类：\n\n- `ABC` 类：三个颜色互不相同，一共有 $6$ 种：`012, 021, 102, 120, 201, 210`；\n\n- `ABA` 类：左右两侧的颜色相同，也有 $6$ 种：`010, 020, 101, 121, 202, 212`。\n\n这样我们就可以把 $12$ 种 $\\textit{type}$ 浓缩成了 $2$ 种，尝试写出这两类之间的递推式。我们用 $f[i][0]$ 表示 `ABC` 类，$f[i][1]$ 表示 `ABA` 类。在计算时，我们可以将任意一种满足要求的涂色方法带入第 `i - 1` 行，并检查第 `i` 行的方案数，这是因为同一类的涂色方法都是等价的：\n\n- 第 `i - 1` 行是 `ABC` 类，第 `i` 行是 `ABC` 类：以 `012` 为例，那么第 `i` 行只能是`120` 或 `201`，方案数为 $2$；\n\n- 第 `i - 1` 行是 `ABC` 类，第 `i` 行是 `ABA` 类：以 `012` 为例，那么第 `i` 行只能是 `101` 或 `121`，方案数为 $2$；\n\n- 第 `i - 1` 行是 `ABA` 类，第 `i` 行是 `ABC` 类：以 `010` 为例，那么第 `i` 行只能是 `102` 或 `201`，方案数为 `2`；\n\n- 第 `i - 1` 行是 `ABA` 类，第 `i` 行是 `ABA` 类：以 `010` 为例，那么第 `i` 行只能是 `101`，`121` 或 `202`，方案数为 `3`。\n\n因此我们就可以写出递推式：\n\n$$\n\\begin{cases}\nf[i][0] = 2 * f[i - 1][0] + 2 * f[i - 1][1] \\\\\nf[i][1] = 2 * f[i - 1][0] + 3 * f[i - 1][1]\n\\end{cases}\n$$\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    static constexpr int mod = 1000000007;\n\npublic:\n    int numOfWays(int n) {\n        int fi0 = 6, fi1 = 6;\n        for (int i = 2; i <= n; ++i) {\n            int new_fi0 = (2LL * fi0 + 2LL * fi1) % mod;\n            int new_fi1 = (2LL * fi0 + 3LL * fi1) % mod;\n            fi0 = new_fi0;\n            fi1 = new_fi1;\n        }\n        return (fi0 + fi1) % mod;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    static final int MOD = 1000000007;\n\n    public int numOfWays(int n) {\n        long fi0 = 6, fi1 = 6;\n        for (int i = 2; i <= n; ++i) {\n            long newFi0 = (2 * fi0 + 2 * fi1) % MOD;\n            long newFi1 = (2 * fi0 + 3 * fi1) % MOD;\n            fi0 = newFi0;\n            fi1 = newFi1;\n        }\n        return (int) ((fi0 + fi1) % MOD);\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def numOfWays(self, n: int) -> int:\n        mod = 10**9 + 7\n        fi0, fi1 = 6, 6\n        for i in range(2, n + 1):\n            fi0, fi1 = (2 * fi0 + 2 * fi1) % mod, (2 * fi0 + 3 * fi1) % mod\n        return (fi0 + fi1) % mod\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$。\n\n- 空间复杂度：$O(1)$。"
}