{
	"titleSlug": "design-a-stack-with-increment-operation",
	"slug": "she-ji-yi-ge-zhi-chi-zeng-liang-cao-zuo-de-zhan-by",
	"url": "https://leetcode-cn.com/problems/design-a-stack-with-increment-operation/solution/she-ji-yi-ge-zhi-chi-zeng-liang-cao-zuo-de-zhan-by/",
	"content": "#### 分析\n\n可以发现题目要求我们实现的 `push`、`pop` 和 `inc` 三个功能中，前两个功能就是普通的栈所具有的功能，为什么普通的栈没有 `inc` 功能呢？因为普通的栈只有栈顶元素是「可见」的，所以要实现的这个功能，我们就要让栈中的所有元素「可见」。\n\n#### 方法一：模拟\n\n我们使用数组模拟栈，用一个变量 `top` 来记录当前栈顶的位置。\n\n- 对于 `push` 操作，首先判断当前元素的个数是否达到上限，如果没有达到，就把 `top` 后移一个位置并添加一个元素。\n\n- 对于 `pop` 操作，首先判断当前栈是否为空，非空返回栈顶元素并将 `top` 前移一位，否则返回 $-1$。\n\n- 对于 `inc` 操作，直接对栈底的**最多** `k` 个元素加上 `val`。\n\n```C++ [sol1-C++]\nclass CustomStack {\npublic:\n    vector<int> stk;\n    int top;\n\n    CustomStack(int maxSize) {\n        stk.resize(maxSize);\n        top = -1;\n    }\n    \n    void push(int x) {\n        if (top != stk.size() - 1) {\n            ++top;\n            stk[top] = x;\n        }\n    }\n    \n    int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        --top;\n        return stk[top + 1];\n    }\n    \n    void increment(int k, int val) {\n        int lim = min(k, top + 1);\n        for (int i = 0; i < lim; ++i) {\n            stk[i] += val;\n        }\n    }\n};\n```\n\n```Java [sol1-Java]\nclass CustomStack {\n    int[] stack;\n    int top;\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        top = -1;\n    }\n    \n    public void push(int x) {\n        if (top != stack.length - 1) {\n            ++top;\n            stack[top] = x;\n        }\n    }\n    \n    public int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        --top;\n        return stack[top + 1];\n    }\n    \n    public void increment(int k, int val) {\n        int limit = Math.min(k, top + 1);\n        for (int i = 0; i < limit; ++i) {\n            stack[i] += val;\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stk = [0] * maxSize\n        self.top = -1\n\n    def push(self, x: int) -> None:\n        if self.top != len(self.stk) - 1:\n            self.top += 1\n            self.stk[self.top] = x\n\n    def pop(self) -> int:\n        if self.top == -1:\n            return -1\n        self.top -= 1\n        return self.stk[self.top + 1]\n\n    def increment(self, k: int, val: int) -> None:\n        lim = min(k, self.top + 1)\n        for i in range(lim):\n            self.stk[i] += val\n```\n\n**复杂度分析**\n\n- 时间复杂度：初始化（构造函数）、`push` 操作和 `pop` 操作的渐进时间复杂度为 $O(1)$，`inc` 操作的渐进时间复杂度为 $O(k)$。\n\n- 空间复杂度：这里用到了一个长度为 `maxSize` 的数组作为辅助空间，渐进空间复杂度为 $O({\\rm maxSize})$。\n\n#### 方法二：模拟优化\n\n在方法一中，只剩下 `inc` 操作的时间复杂度不为 $O(1)$，因此可以尝试对该操作进行优化。\n\n我们用一个辅助数组 `add` 记录每次 `inc` 操作。具体地，如果 `inc` 操作是将栈底的 `k` 个元素（将 `k` 与栈中元素个数取较小值）增加 `val`，那么我们将 `add[k - 1]` 增加 `val`。这样做的目的在于，只有在 `pop` 操作时，我们才需要知道栈顶元素的具体值，在其余的情况下，我们只要存储每个元素的增量就行了。\n\n因此在遇到 `pop` 操作时，我们返回栈顶元素的初始值加上增量 `add[top]`。在这之后，我们将增量向栈底进行传递，累加至 `add[top - 1]` 处，这样 `inc` 操作的时间复杂度也减少至 $O(1)$ 了。\n\n```C++ [sol2-C++]\nclass CustomStack {\npublic:\n    vector<int> stk, add;\n    int top;\n\n    CustomStack(int maxSize) {\n        stk.resize(maxSize);\n        add.resize(maxSize);\n        top = -1;\n    }\n    \n    void push(int x) {\n        if (top != stk.size() - 1) {\n            ++top;\n            stk[top] = x;\n        }\n    }\n    \n    int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        int ret = stk[top] + add[top];\n        if (top != 0) {\n            add[top - 1] += add[top];\n        }\n        add[top] = 0;\n        --top;\n        return ret;\n    }\n    \n    void increment(int k, int val) {\n        int lim = min(k - 1, top);\n        if (lim >= 0) {\n            add[lim] += val;\n        }\n    }\n};\n```\n\n```Java [sol2-Java]\nclass CustomStack {\n    int[] stack;\n    int[] add;\n    int top;\n\n    public CustomStack(int maxSize) {\n        stack = new int[maxSize];\n        add = new int[maxSize];\n        top = -1;\n    }\n    \n    public void push(int x) {\n        if (top != stack.length - 1) {\n            ++top;\n            stack[top] = x;\n        }\n    }\n    \n    public int pop() {\n        if (top == -1) {\n            return -1;\n        }\n        int ret = stack[top] + add[top];\n        if (top != 0) {\n            add[top - 1] += add[top];\n        }\n        add[top] = 0;\n        --top;\n        return ret;\n    }\n    \n    public void increment(int k, int val) {\n        int limit = Math.min(k - 1, top);\n        if (limit >= 0) {\n            add[limit] += val;\n        }\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stk = [0] * maxSize\n        self.add = [0] * maxSize\n        self.top = -1\n\n    def push(self, x: int) -> None:\n        if self.top != len(self.stk) - 1:\n            self.top += 1\n            self.stk[self.top] = x\n\n    def pop(self) -> int:\n        if self.top == -1:\n            return -1\n        ret = self.stk[self.top] + self.add[self.top]\n        if self.top != 0:\n            self.add[self.top - 1] += self.add[self.top]\n        self.add[self.top] = 0\n        self.top -= 1\n        return ret\n\n    def increment(self, k: int, val: int) -> None:\n        lim = min(k - 1, self.top)\n        if lim >= 0:\n            self.add[lim] += val\n```\n\n**复杂度分析**\n\n- 时间复杂度：所有操作的渐进时间复杂度均为 $O(1)$。\n\n- 空间复杂度：这里用到了两个长度为 `maxSize` 的数组作为辅助空间，渐进空间复杂度为 $O({\\rm maxSize})$。"
}