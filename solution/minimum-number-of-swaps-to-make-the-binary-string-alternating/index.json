{
	"titleSlug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
	"slug": "minimum-number-of-swaps-to-make-the-bina-z0qy",
	"url": "https://leetcode-cn.com/problems/minimum-number-of-swaps-to-make-the-binary-string-alternating/solution/minimum-number-of-swaps-to-make-the-bina-z0qy/",
	"content": "#### 方法一：枚举目标字符串的形式\n\n**提示 $1$**\n\n符合要求的交替字符串的形式只有两种：\n\n1. 形如 $\\texttt{\"1010...\"}$ 的字符串，奇数位为 $\\texttt{`0'}$，偶数位为 $\\texttt{`1'}$；\n\n2. 形如 $\\texttt{\"0101...\"}$ 的字符串，奇数位为 $\\texttt{`1'}$，偶数位为 $\\texttt{`0'}$。\n\n**提示 $2$**\n\n二进制源字符串 $s_1$ 和目标字符串 $s_2$ 可以通过交换操作互相转化，当且仅当两个字符串中 $\\texttt{`0'}$ 和 $\\texttt{`1'}$ 的个数均相等。\n\n**提示 $3$**\n\n假设 $s_1$ 和 $s_2$ 可以通过交换操作互相转化，且它们有 $k$ 个位置不同，那么最小的交换次数为 $k/2$。\n\n**提示 $3$ 解释**\n\n首先，交换 $k$ 个字符使得新结果与原结果**不同**的下界为 $k/2$。下面我们证明这个下界是可以达到的。\n\n不妨假设 $s_1$ 与 $s_2$ 中 $\\texttt{`0'}$ 和 $\\texttt{`1'}$ 的个数为 $n_0$ 与 $n_1$，对应下标字符分别为 $i$ 和 $j$ 的下标数量为 $n_{ij}$。那么我们有\n\n$$\nn_{00} + n_{01} = n_{00} + n_{10} = n_0,\n$$\n\n$$\nn_{10} + n_{11} = n_{01} + n_{11} = n_1,\n$$\n\n也就是说\n\n$$\nn_{10} = n_{01} = \\frac{k}{2}.\n$$\n\n那么，为了使 $s_1$ 与 $s_2$ 一致，我们只需要将 $s_1$ 中对应的 $n_{10}$ 个 $\\texttt{`1'}$ 与 $n_{01}$ 个 $\\texttt{`0'}$ 两两交换即可。此时所需的交换次数最少，为 $k/2$。 \n\n**思路与算法**\n\n根据 **提示 $1$**，我们枚举两种交替字符串的形式，并根据 **提示 $2$** 判断 $\\texttt{`0'}$ 和 $\\texttt{`1'}$ 的个数是否相等。如果相等，我们可以计算出 $s$ 与上述目标字符串不同的位数 $\\texttt{diff}_1$ 和 $\\texttt{diff}_2$。此时根据 **提示 $3$**，对应的最少交换次数即为 $\\texttt{diff}_1 / 2$ 和 $\\texttt{diff}_2 / 2$。\n\n最终，我们取两种情况的较小值作为答案返回；若两种情况均不满足，则返回 $-1$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minSwaps(string s) {\n        int n = s.size();\n        int n0 = count(s.begin(), s.end(), '0');\n        int n1 = count(s.begin(), s.end(), '1');\n        int res = INT_MAX;\n        // \"1010...\"\n        if (n1 == (n + 1) / 2 && n0 == n / 2){   // 不同字符个数相等\n            int diff1 = 0;\n            for (int i = 0; i < n; ++i){\n                if (s[i] - '0' == i % 2){   // 对应位数不同\n                    ++diff1;\n                }\n            }\n            res = min(res, diff1 / 2);\n        }\n        // \"0101...\"\n        if (n0 == (n + 1) / 2 && n1 == n / 2){   // 不同字符个数相等\n            int diff2 = 0;\n            for (int i = 0; i < n; ++i){\n                if (s[i] - '0' != i % 2){   // 对应位数不同\n                    ++diff2;\n                }\n            }\n            res = min(res, diff2 / 2);\n        }\n        if (res == INT_MAX){\n            return -1;   // 不存在\n        }\n        else {\n            return res;\n        }\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minSwaps(self, s: str) -> int:\n        n = len(s)\n        n0, n1 = s.count('0'), s.count('1')\n        res = float(\"INF\")\n        # \"1010...\"\n        if n1 == (n + 1) // 2 and n0 == n // 2:   # 不同字符个数相等\n            diff1 = 0\n            for i in range(n):\n                if int(s[i]) == i % 2:   # 对应位数不同\n                    diff1 += 1\n            res = min(res, diff1 // 2)\n        # \"0101...\"\n        if n0 == (n + 1) // 2 and n1 == n // 2:   # 不同字符个数相等\n            diff2 = 0\n            for i in range(n):\n                if int(s[i]) != i % 2:   # 对应位数不同\n                    diff2 += 1\n            res = min(res, diff2 // 2)\n        if res == float(\"INF\"):\n            return -1   # 不存在\n        else:\n            return res\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $s$ 的长度。计算 $n_0$ 与 $n_1$ 的时间复杂度为 $O(n)$；每次枚举目标字符串并计算可能交换次数的时间复杂度也为 $O(n)$，而目标字符串共有两种。\n\n- 空间复杂度：$O(1)$，我们只使用了常数个额外变量。"
}