{
	"titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
	"slug": "you-duo-shao-xiao-yu-dang-qian-shu-zi-de-shu-zi--2",
	"url": "https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number/solution/you-duo-shao-xiao-yu-dang-qian-shu-zi-de-shu-zi--2/",
	"content": "#### 方法一：暴力\n\n比较容易想到的一个方法是，对于数组中的每一个元素，我们都遍历数组一次，统计小于当前元素的数的数目。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        vector<int> ret;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            int cnt = 0;\n            for (int j = 0; j < n; j++) {\n                if (nums[j] < nums[i]) {\n                    cnt++;\n                }\n            }\n            ret.push_back(cnt);\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] smallerNumbersThanCurrent(int[] nums) {\n        int n = nums.length;\n        int[] ret = new int[n];\n        for (int i = 0; i < n; i++) {\n            int cnt = 0;\n            for (int j = 0; j < n; j++) {\n                if (nums[j] < nums[i]) {\n                    cnt++;\n                }\n            }\n            ret[i] = cnt;\n        }\n        return ret;\n    }\n}\n```\n\n```Golang [sol1-Golang]\nfunc smallerNumbersThanCurrent(nums []int) (ans []int) {\n    for _, v := range nums {\n        cnt := 0\n        for _, w := range nums {\n            if w < v {\n                cnt++\n            }\n        }\n        ans = append(ans, cnt)\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint* smallerNumbersThanCurrent(int* nums, int numsSize, int* returnSize) {\n    int* ret = malloc(sizeof(int) * numsSize);\n    *returnSize = numsSize;\n    for (int i = 0; i < numsSize; i++) {\n        int cnt = 0;\n        for (int j = 0; j < numsSize; j++) {\n            if (nums[j] < nums[i]) {\n                cnt++;\n            }\n        }\n        ret[i] = cnt;\n    }\n    return ret;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar smallerNumbersThanCurrent = function(nums) {\n    const n = nums.length;\n    const ret = [];\n    for (let i = 0; i < n; ++i) {\n        let cnt = 0;\n        for (let j = 0; j < n; ++j) {\n            if (nums[j] < nums[i]) {\n                cnt++;\n            }\n        }\n        ret[i] = cnt;\n    }\n    return ret;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N^2)$，其中 $N$ 为数组的长度。\n- 空间复杂度：$O(1)$。注意我们不计算答案数组的空间占用。\n\n#### 方法二：排序\n\n我们也可以将数组排序，并记录每一个数在原数组中的位置。对于排序后的数组中的每一个数，我们找出其左侧第一个小于它的数，这样就能够知道数组中小于该数的数量。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        vector<pair<int, int>> data;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            data.emplace_back(nums[i], i);\n        }\n        sort(data.begin(), data.end());\n\n        vector<int> ret(n, 0);\n        int prev = -1;\n        for (int i = 0; i < n; i++) {\n            if (prev == -1 || data[i].first != data[i - 1].first) {\n                prev = i;\n            }\n            ret[data[i].second] = prev;\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] smallerNumbersThanCurrent(int[] nums) {\n        int n = nums.length;\n        int[][] data = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            data[i][0] = nums[i];\n            data[i][1] = i;\n        }\n        Arrays.sort(data, new Comparator<int[]>() {\n            public int compare(int[] data1, int[] data2) {\n                return data1[0] - data2[0];\n            }\n        });\n\n        int[] ret = new int[n];\n        int prev = -1;\n        for (int i = 0; i < n; i++) {\n            if (prev == -1 || data[i][0] != data[i - 1][0]) {\n                prev = i;\n            }\n            ret[data[i][1]] = prev;\n        }\n        return ret;\n    }\n}\n```\n\n```Golang [sol2-Golang]\ntype pair struct{ v, pos int }\n\nfunc smallerNumbersThanCurrent(nums []int) []int {\n    n := len(nums)\n    data := make([]pair, n)\n    for i, v := range nums {\n        data[i] = pair{v, i}\n    }\n    sort.Slice(data, func(i, j int) bool { return data[i].v < data[j].v })\n    ans := make([]int, n)\n    prev := -1\n    for i, d := range data {\n        if prev == -1 || d.v != data[i-1].v {\n            prev = i\n        }\n        ans[d.pos] = prev\n    }\n    return ans\n}\n```\n\n```C [sol2-C]\nint cmp(const void* a, const void* b) {\n    return ((*(int**)a)[0] - (*(int**)b)[0]);\n}\n\nint* smallerNumbersThanCurrent(int* nums, int numsSize, int* returnSize) {\n    int* data[numsSize];\n    for (int i = 0; i < numsSize; i++) {\n        data[i] = malloc(sizeof(int) * 2);\n        data[i][0] = nums[i], data[i][1] = i;\n    }\n    qsort(data, numsSize, sizeof(int*), cmp);\n\n    int* ret = malloc(sizeof(int) * numsSize);\n    *returnSize = numsSize;\n    int prev = -1;\n    for (int i = 0; i < numsSize; i++) {\n        if (prev == -1 || data[i][0] != data[i - 1][0]) {\n            prev = i;\n        }\n        ret[data[i][1]] = prev;\n    }\n    return ret;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar smallerNumbersThanCurrent = function(nums) {\n    const n = nums.length;\n    const data = new Array(n).fill(0).map(v => new Array(2).fill(0));\n    for (let i = 0; i < n; ++i) {\n        data[i][0] = nums[i];\n        data[i][1] = i;\n    }\n    data.sort((a, b) => a[0] - b[0]);\n\n    const ret = new Array(n);\n    let prev = -1;\n    for (let i = 0; i < n; ++i) {\n        if (prev == -1 || data[i][0] !== data[i - 1][0]) {\n            prev = i;\n        }\n        ret[data[i][1]] = prev;\n    }\n    return ret;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\log N)$，其中 $N$ 为数组的长度。排序需要 $O(N\\log N)$ 的时间，随后需要 $O(N)$ 时间来遍历。\n\n- 空间复杂度：$O(N)$。因为要额外开辟一个数组。\n\n\n#### 方法三：计数排序\n\n注意到数组元素的值域为 $[0,100]$，所以可以考虑建立一个频次数组 $cnt$ ，$cnt[i]$ 表示数字 $i$ 出现的次数。那么对于数字 $i$ 而言，小于它的数目就为 $cnt[0...i-1]$ 的总和。\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        vector<int> cnt(101, 0);\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            cnt[nums[i]]++;\n        }\n        for (int i = 1; i <= 100; i++) {\n            cnt[i] += cnt[i - 1];\n        }\n        vector<int> ret;\n        for (int i = 0; i < n; i++) {\n            ret.push_back(nums[i] == 0 ? 0: cnt[nums[i]-1]);\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int[] smallerNumbersThanCurrent(int[] nums) {\n        int[] cnt = new int[101];\n        int n = nums.length;\n        for (int i = 0; i < n; i++) {\n            cnt[nums[i]]++;\n        }\n        for (int i = 1; i <= 100; i++) {\n            cnt[i] += cnt[i - 1];\n        }\n        int[] ret = new int[n];\n        for (int i = 0; i < n; i++) {\n            ret[i] = nums[i] == 0 ? 0 : cnt[nums[i] - 1];\n        }\n        return ret;\n    }\n}\n```\n\n```Golang [sol3-Golang]\nfunc smallerNumbersThanCurrent(nums []int) []int {\n    cnt := [101]int{}\n    for _, v := range nums {\n        cnt[v]++\n    }\n    for i := 0; i < 100; i++ {\n        cnt[i+1] += cnt[i]\n    }\n    ans := make([]int, len(nums))\n    for i, v := range nums {\n        if v > 0 {\n            ans[i] = cnt[v-1]\n        }\n    }\n    return ans\n}\n```\n\n```C [sol3-C]\nint* smallerNumbersThanCurrent(int* nums, int numsSize, int* returnSize) {\n    int cnt[101];\n    memset(cnt, 0, sizeof(cnt));\n    for (int i = 0; i < numsSize; i++) {\n        cnt[nums[i]]++;\n    }\n    for (int i = 1; i <= 100; i++) {\n        cnt[i] += cnt[i - 1];\n    }\n\n    int* ret = malloc(sizeof(int) * numsSize);\n    *returnSize = numsSize;\n    for (int i = 0; i < numsSize; i++) {\n        ret[i] = nums[i] == 0 ? 0 : cnt[nums[i] - 1];\n    }\n    return ret;\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar smallerNumbersThanCurrent = function(nums) {\n    const cnt = new Array(101).fill(0);\n    const n = nums.length;\n    for (let i = 0; i < n; ++i) {\n        cnt[nums[i]] += 1;\n    }\n    for (let i = 1; i <= 100; ++i) {\n        cnt[i] += cnt[i - 1];\n    }\n    const ret = [];\n    for (let i = 0; i < n; ++i) {\n        ret.push(nums[i] ? cnt[nums[i] - 1] : 0);\n    }\n    return ret;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N + K)$，其中 $K$ 为值域大小。需要遍历两次原数组，同时遍历一次频次数组 $cnt$ 找出前缀和。\n\n- 空间复杂度：$O(K)$。因为要额外开辟一个值域大小的数组。"
}