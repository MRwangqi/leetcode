{
	"titleSlug": "remove-invalid-parentheses",
	"slug": "shan-chu-wu-xiao-de-gua-hao-by-leetcode-9w8au",
	"url": "https://leetcode-cn.com/problems/remove-invalid-parentheses/solution/shan-chu-wu-xiao-de-gua-hao-by-leetcode-9w8au/",
	"content": "#### 背景知识\n\n1. **有效的「括号」**：题目输入的字符串由一系列「左括号」和「右括号」组成，但是有一些额外的括号，使得括号不能正确配对。对于括号配对规则如果还不太清楚的读者，可以先完成问题「[20. 有效的括号](https://leetcode-cn.com/problems/valid-parentheses/)」。\n\n2. **可以一次遍历计算出多余的「左括号」和「右括号」**：\n根据括号匹配规则和根据求解「[22. 括号生成](https://leetcode-cn.com/problems/generate-parentheses/)」的经验，我们知道：如果当前遍历到的「左括号」的数目严格小于「右括号」的数目则表达式无效。因此，我们可以遍历一次输入字符串，统计「左括号」和「右括号」出现的次数。\n+ 当遍历到「左括号」的时候：\n    + 「左括号」数量加 $1$。\n+ 当遍历到「右括号」的时候：\n    + 如果此时「左括号」的数量不为 $0$，因为「右括号」可以与之前遍历到的「左括号」匹配，此时「左括号」出现的次数 $-1$；\n    + 如果此时「左括号」的数量为 $0$，「右括号」数量加 $1$。\n\n通过这样的计数规则，得到的「左括号」和「右括号」的数量就是各自最少应该删除的数量。\n\n#### 方法一：回溯 + 剪枝\n\n**思路与算法**\n\n题目让我们删除括号使得剩下的括号匹配，要求我们删除最少的括号数，并且要求得到所有的结果。我们可以使用回溯算法，尝试遍历所有可能的去掉非法括号的方案。\n\n首先我们利用括号匹配的规则求出该字符串 $s$ 中最少需要去掉的左括号的数目 $\\textit{lremove}$ 和右括号的数目 $\\textit{rremove}$，然后我们尝试在原字符串 $s$ 中去掉 $\\textit{lremove}$ 个左括号和 $\\textit{rremove}$ 个右括号，然后检测剩余的字符串是否合法匹配，如果合法匹配则我们则认为该字符串为可能的结果，我们利用回溯算法来尝试搜索所有可能的去除括号的方案。\n\n在进行回溯时可以利用以下的剪枝技巧来增加搜索的效率：\n+ 我们从字符串中每去掉一个括号，则更新 $\\textit{lremove}$ 或者 $\\textit{rremove}$，当我们发现剩余未尝试的字符串的长度小于 $\\textit{lremove} + \\textit{rremove}$ 时，则停止本次搜索。\n+ 当 $\\textit{lremove}$ 和 $\\textit{rremove}$ 同时为 $0$ 时，则我们检测当前的字符串是否合法匹配，如果合法匹配则我们将其记录下来。\n\n由于记录的字符串可能存在重复，因此需要对重复的结果进行去重，去重的办法有如下两种：\n+ 利用哈希表对最终生成的字符串去重。\n+ 我们在每次进行搜索时，如果遇到连续相同的括号我们只需要搜索一次即可，比如当前遇到的字符串为 $\\texttt{\"(((())\"}$，去掉前四个左括号中的任意一个，生成的字符串是一样的，均为 $\\texttt{\"((())\"}$，因此我们在尝试搜索时，只需去掉一个左括号进行下一轮搜索，不需要将前四个左括号都尝试一遍。\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    private List<String> res = new ArrayList<String>();\n\n    public List<String> removeInvalidParentheses(String s) {\n        int lremove = 0;\n        int rremove = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                lremove++;\n            } else if (s.charAt(i) == ')') {\n                if (lremove == 0) {\n                    rremove++;\n                } else {\n                    lremove--;\n                }\n            }\n        }\n        helper(s, 0, lremove, rremove);\n\n        return res;\n    }\n\n    private void helper(String str, int start, int lremove, int rremove) {\n        if (lremove == 0 && rremove == 0) {\n            if (isValid(str)) {\n                res.add(str);\n            }\n            return;\n        }\n\n        for (int i = start; i < str.length(); i++) {\n            if (i != start && str.charAt(i) == str.charAt(i - 1)) {\n                continue;\n            }\n            // 如果剩余的字符无法满足去掉的数量要求，直接返回\n            if (lremove + rremove > str.length() - i) {\n                return;\n            }\n            // 尝试去掉一个左括号\n            if (lremove > 0 && str.charAt(i) == '(') {\n                helper(str.substring(0, i) + str.substring(i + 1), i, lremove - 1, rremove);\n            }\n            // 尝试去掉一个右括号\n            if (rremove > 0 && str.charAt(i) == ')') {\n                helper(str.substring(0, i) + str.substring(i + 1), i, lremove, rremove - 1);\n            }\n        }\n    }\n\n    private boolean isValid(String str) {\n        int cnt = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == '(') {\n                cnt++;\n            } else if (str.charAt(i) == ')') {\n                cnt--;\n                if (cnt < 0) {\n                    return false;\n                }\n            }\n        }\n\n        return cnt == 0;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<string> res;\n    vector<string> removeInvalidParentheses(string s) {\n        int lremove = 0;\n        int rremove = 0;\n\n        for (char c : s) {\n            if (c == '(') {\n                lremove++;\n            } else if (c == ')') {\n                if (lremove == 0) {\n                    rremove++;\n                } else {\n                    lremove--;\n                }\n            }\n        }\n        helper(s, 0, lremove, rremove);\n        return res;\n    }\n\n    void helper(string str, int start, int lremove, int rremove) {\n        if (lremove == 0 && rremove == 0) {\n            if (isValid(str)) {\n                res.push_back(str);\n            }\n            return;\n        }\n        for (int i = start; i < str.size(); i++) {\n            if (i != start && str[i] == str[i - 1]) {\n                continue;\n            }\n            // 如果剩余的字符无法满足去掉的数量要求，直接返回\n            if (lremove + rremove > str.size() - i) {\n                return;\n            } \n            // 尝试去掉一个左括号\n            if (lremove > 0 && str[i] == '(') {\n                helper(str.substr(0, i) + str.substr(i + 1), i, lremove - 1, rremove);\n            }\n            // 尝试去掉一个右括号\n            if (rremove > 0 && str[i] == ')') {\n                helper(str.substr(0, i) + str.substr(i + 1), i, lremove, rremove - 1);\n            }\n        }\n    }\n\n    inline bool isValid(const string & str) {\n        int cnt = 0;\n\n        for (int i = 0; i < str.size(); i++) {\n            if (str[i] == '(') {\n                cnt++;\n            } else if (str[i] == ')') {\n                cnt--;\n                if (cnt < 0) {\n                    return false;\n                }\n            }\n        }\n\n        return cnt == 0;\n    }\n};\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    private IList<string> res = new List<string>();\n\n    public IList<string> RemoveInvalidParentheses(string s) {\n        int lremove = 0;\n        int rremove = 0;\n\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '(') {\n                lremove++;\n            } else if (s[i] == ')') {\n                if (lremove == 0) {\n                    rremove++;\n                } else {\n                    lremove--;\n                }\n            }\n        }\n        Helper(s, 0, lremove, rremove);\n\n        return res;\n    }\n\n    private void Helper(String str, int start, int lremove, int rremove) {\n        if (lremove == 0 && rremove == 0) {\n            if (IsValid(str)) {\n                res.Add(str);\n            }\n            return;\n        }\n\n        for (int i = start; i < str.Length; i++) {\n            if (i != start && str[i] == str[i - 1]) {\n                continue;\n            }\n            // 如果剩余的字符无法满足去掉的数量要求，直接返回\n            if (lremove + rremove > str.Length - i) {\n                return;\n            }\n            // 尝试去掉一个左括号\n            if (lremove > 0 && str[i] == '(') {\n                Helper(str.Substring(0, i) + str.Substring(i + 1), i, lremove - 1, rremove);\n            }\n            // 尝试去掉一个右括号\n            if (rremove > 0 && str[i] == ')') {\n                Helper(str.Substring(0, i) + str.Substring(i + 1), i, lremove, rremove - 1);\n            }\n        }\n    }\n\n    private bool IsValid(String str) {\n        int cnt = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '(') {\n                cnt++;\n            } else if (str[i] == ')') {\n                cnt--;\n                if (cnt < 0) {\n                    return false;\n                }\n            }\n        }\n\n        return cnt == 0;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        res = []\n        lremove, rremove = 0, 0\n        for c in s:\n            if c == '(':\n                lremove += 1\n            elif c == ')':\n                if lremove == 0:\n                    rremove += 1\n                else:\n                    lremove -= 1\n\n        def isValid(str):\n            cnt = 0\n            for c in str:\n                if c == '(':\n                    cnt += 1\n                elif c == ')':\n                    cnt -= 1\n                    if cnt < 0:\n                        return False\n            return cnt == 0\n\n        def helper(s, start, lremove, rremove):\n            if lremove == 0 and rremove == 0:\n                if isValid(s):\n                    res.append(s)\n                return\n\n            for  i in range(start, len(s)):\n                if i > start and s[i] == s[i - 1]:\n                    continue\n                # 如果剩余的字符无法满足去掉的数量要求，直接返回\n                if lremove + rremove > len(s) - i:\n                    break\n                # 尝试去掉一个左括号\n                if lremove > 0 and s[i] == '(':\n                    helper(s[:i] + s[i + 1:], i, lremove - 1, rremove);\n                # 尝试去掉一个右括号\n                if rremove > 0 and s[i] == ')':\n                    helper(s[:i] + s[i + 1:], i, lremove, rremove - 1);\n                # 统计当前字符串中已有的括号数量\n\n        helper(s, 0, lremove, rremove)\n        return res\n```\n\n```JavaScript [sol1-JavaScript]\nvar removeInvalidParentheses = function(s) {\n\n    const helper = (str, start, lremove, rremove) => {\n        if (lremove === 0 && rremove === 0) {\n            if (isValid(str)) {\n                res.push(str);\n            }\n            return;\n        }\n\n        for (let i = start; i < str.length; i++) {\n            if (i !== start && str[i] === str[i - 1]) {\n                continue;\n            }\n            // 如果剩余的字符无法满足去掉的数量要求，直接返回\n            if (lremove + rremove > str.length - i) {\n                return;\n            } \n            // 尝试去掉一个左括号\n            if (lremove > 0 && str[i] === '(') {\n                helper(str.substr(0, i) + str.substr(i + 1), i, lremove - 1, rremove);\n            }\n            // 尝试去掉一个右括号\n            if (rremove > 0 && str[i] === ')') {\n                helper(str.substr(0, i) + str.substr(i + 1), i, lremove, rremove - 1);\n            }\n        }\n    }\n\n    const res = [];\n    let lremove = 0;\n    let rremove = 0;\n\n    for (const c of s) {\n        if (c === '(') {\n            lremove++;\n        } else if (c === ')') {\n            if (lremove === 0) {\n                rremove++;\n            } else {\n                lremove--;\n            }\n        }\n    }\n    helper(s, 0, lremove, rremove);\n    return res;\n}\n\nconst isValid = (str) => {\n    let cnt = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '(') {\n            cnt++;\n        } else if (str[i] === ')') {\n            cnt--;\n            if (cnt < 0) {\n                return false;\n            }\n        }\n    }\n\n    return cnt === 0;\n}\n```\n\n```go [sol1-Golang]\nfunc isValid(str string) bool {\n    cnt := 0\n    for _, ch := range str {\n        if ch == '(' {\n            cnt++\n        } else if ch == ')' {\n            cnt--\n            if cnt < 0 {\n                return false\n            }\n        }\n    }\n    return cnt == 0\n}\n\nfunc helper(ans *[]string, str string, start, lremove, rremove int) {\n    if lremove == 0 && rremove == 0 {\n        if isValid(str) {\n            *ans = append(*ans, str)\n        }\n        return\n    }\n\n    for i := start; i < len(str); i++ {\n        if i != start && str[i] == str[i-1] {\n            continue\n        }\n        // 如果剩余的字符无法满足去掉的数量要求，直接返回\n        if lremove+rremove > len(str)-i {\n            return\n        }\n        // 尝试去掉一个左括号\n        if lremove > 0 && str[i] == '(' {\n            helper(ans, str[:i]+str[i+1:], i, lremove-1, rremove)\n        }\n        // 尝试去掉一个右括号\n        if rremove > 0 && str[i] == ')' {\n            helper(ans, str[:i]+str[i+1:], i, lremove, rremove-1)\n        }\n    }\n}\n\nfunc removeInvalidParentheses(s string) (ans []string) {\n    lremove, rremove := 0, 0\n    for _, ch := range s {\n        if ch == '(' {\n            lremove++\n        } else if ch == ')' {\n            if lremove == 0 {\n                rremove++\n            } else {\n                lremove--\n            }\n        }\n    }\n\n    helper(&ans, s, 0, lremove, rremove)\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times 2^n)$，其中 $n$ 为字符串的长度。考虑到一个字符串最多可能有 $2^n$ 个子序列，每个子序列可能需要进行一次合法性检测，因此时间复杂度为 $O(n \\times 2^n)$。\n\n- 空间复杂度：$O(n^2)$，其中 $n$ 为字符串的长度。返回结果不计入空间复杂度，考虑到递归调用栈的深度，并且每次递归调用时需要复制字符串一次，因此空间复杂度为 $O(n^2)$。\n\n#### 方法二：广度优先搜索\n\n**思路与算法**\n\n注意到题目中要求最少删除，这样的描述正是广度优先搜索算法应用的场景，并且题目也要求我们输出所有的结果。我们在进行广度优先搜索时每一轮删除字符串中的 $1$ 个括号，直到出现合法匹配的字符串为止，此时进行轮转的次数即为最少需要删除括号的个数。\n\n我们进行广度优先搜索时，每次保存上一轮搜索的结果，然后对上一轮已经保存的结果中的每一个字符串尝试所有可能的删除一个括号的方法，然后将保存的结果进行下一轮搜索。在保存结果时，我们可以利用哈希表对上一轮生成的结果去重，从而提高效率。\n\n**代码**\n\n```Java [sol2-Java]\nclass Solution {\n    public List<String> removeInvalidParentheses(String s) {\n        List<String> ans = new ArrayList<String>();\n        Set<String> currSet = new HashSet<String>();\n\n        currSet.add(s);\n        while (true) {\n            for (String str : currSet) {\n                if (isValid(str)) {\n                    ans.add(str);\n                }\n            }\n            if (ans.size() > 0) {\n                return ans;\n            }\n            Set<String> nextSet = new HashSet<String>();\n            for (String str : currSet) {\n                for (int i = 0; i < str.length(); i ++) {\n                    if (i > 0 && str.charAt(i) == str.charAt(i - 1)) {\n                        continue;\n                    }\n                    if (str.charAt(i) == '(' || str.charAt(i) == ')') {\n                        nextSet.add(str.substring(0, i) + str.substring(i + 1));\n                    }\n                }\n            }\n            currSet = nextSet;\n        }\n    }\n\n    private boolean isValid(String str) {\n        char[] ss = str.toCharArray();\n        int count = 0;\n\n        for (char c : ss) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n\n        return count == 0;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool isValid(string str) {\n        int count = 0;\n\n        for (char c : str) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n\n        return count == 0;\n    }\n\n    vector<string> removeInvalidParentheses(string s) {\n        vector<string> ans;\n        unordered_set<string> currSet;\n\n        currSet.insert(s);\n        while (true) {\n            for (auto & str : currSet) {\n                if (isValid(str))\n                    ans.emplace_back(str);\n            }\n            if (ans.size() > 0) {\n                return ans;\n            }\n            unordered_set<string> nextSet;\n            for (auto & str : currSet) {\n                for (int i = 0; i < str.size(); i++) {\n                    if (i > 0 && str[i] == str[i - 1]) {\n                        continue;\n                    }\n                    if (str[i] == '(' || str[i] == ')') {\n                        nextSet.insert(str.substr(0, i) + str.substr(i + 1, str.size()));\n                    }\n                }\n            }\n            currSet = nextSet;\n        }\n    }\n};\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public IList<string> RemoveInvalidParentheses(string s) {\n        List<string> ans = new List<string>();\n        ISet<string> currSet = new HashSet<string>();\n\n        currSet.Add(s);\n        while (true) {\n            foreach (String str in currSet) {\n                if (IsValid(str)) {\n                    ans.Add(str);\n                }\n            }\n            if (ans.Count > 0) {\n                return ans;\n            }\n            ISet<string> nextSet = new HashSet<string>();\n            foreach (string str in currSet) {\n                for (int i = 0; i < str.Length; i++) {\n                    if (i > 0 && str[i] == str[i - 1]) {\n                        continue;\n                    }\n                    if (str[i] == '(' || str[i] == ')') {\n                        nextSet.Add(str.Substring(0, i) + str.Substring(i + 1));\n                    }\n                }\n            }\n            currSet = nextSet;\n        }\n    }\n\n    private bool IsValid(String str) {\n        int count = 0;\n\n        foreach (char c in str) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n                if (count < 0) {\n                    return false;\n                }\n            }\n        }\n\n        return count == 0;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        def isValid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    count -= 1\n                    if count < 0:\n                        return False\n            return count == 0\n\n        ans = []\n        currSet = set([s])\n\n        while True:\n            for ss in currSet:\n                if isValid(ss):\n                    ans.append(ss)\n            if len(ans) > 0:\n                return ans\n            nextSet = set()\n            for ss in currSet:\n                for i in range(len(ss)):\n                    if i > 0 and ss[i] == s[i - 1]:\n                        continue\n                    if ss[i] == '(' or ss[i] == ')':\n                        nextSet.add(ss[:i] + ss[i + 1:])\n            currSet = nextSet\n        return ans\n```\n\n```JavaScript [sol2-JavaScript]\nvar removeInvalidParentheses = function(s) {\n    const ans = [];\n    let currSet = new Set();\n\n    currSet.add(s);\n    while (true) {\n        for (const str of currSet) {\n            if (isValid(str)) {\n                ans.push(str);\n            }\n        }\n        if (ans.length > 0) {\n            return ans;\n        }\n        const nextSet = new Set();\n        for (const str of currSet) {\n            for (let i = 0; i < str.length; i ++) {\n                if (i > 0 && str[i] === str[i - 1]) {\n                    continue;\n                }\n                if (str[i] === '(' || str[i] === ')') {\n                    nextSet.add(str.substring(0, i) + str.substring(i + 1));\n                }\n            }\n        }\n        currSet = nextSet;\n    }\n}\n\nconst isValid = (str) => {\n    let count = 0;\n\n    for (const c of str) {\n        if (c === '(') {\n            count++;\n        } else if (c === ')') {\n            count--;\n            if (count < 0) {\n                return false;\n            }\n        }\n    }\n\n    return count === 0;\n}\n```\n\n```go [sol2-Golang]\nfunc isValid(str string) bool {\n    cnt := 0\n    for _, ch := range str {\n        if ch == '(' {\n            cnt++\n        } else if ch == ')' {\n            cnt--\n            if cnt < 0 {\n                return false\n            }\n        }\n    }\n    return cnt == 0\n}\n\nfunc removeInvalidParentheses(s string) (ans []string) {\n    curSet := map[string]struct{}{s: {}}\n    for {\n        for str := range curSet {\n            if isValid(str) {\n                ans = append(ans, str)\n            }\n        }\n        if len(ans) > 0 {\n            return\n        }\n        nextSet := map[string]struct{}{}\n        for str := range curSet {\n            for i, ch := range str {\n                if i > 0 && byte(ch) == str[i-1] {\n                    continue\n                }\n                if ch == '(' || ch == ')' {\n                    nextSet[str[:i]+str[i+1:]] = struct{}{}\n                }\n            }\n        }\n        curSet = nextSet\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times 2^n)$，其中 $n$ 为字符串的长度。考虑到一个字符串最多可能有 $2^n$ 个子序列，因此时间复杂度为 $O(n \\times 2^n)$。\n\n- 空间复杂度：$O(n \\times C_n^\\frac{n}{2})$，其中 $n$ 为字符串的长度。我们在进行第 $i$ 轮迭代时，会从原始字符串中删除 $i$ 个括号，因此第 $i$ 轮迭代产生的字符串最多有 $C_n^i$ 个，当 $i = \\frac{n}{2}$ 时组合数最大，此时迭代生成的字符串个数最多，因此空间复杂度为 $O(n \\times C_n^\\frac{n}{2})$。\n\n#### 方法三：枚举状态子集\n\n**思路与算法**\n\n首先我们利用括号匹配的规则求出该字符串 $s$ 中最少需要去掉的左括号的数目 $\\textit{lremove}$ 和右括号的数目 $\\textit{rremove}$，然后我们利用状态子集求出字符串 $s$ 中所有的左括号去掉 $\\textit{lremove}$ 的左括号的子集，和所有的右括号去掉 $\\textit{rremove}$ 个右括号的子集，依次枚举这两种子集的组合，检测组合后的字符串是否合法匹配，如果字符串合法则记录，最后我们利用哈希表对结果进行去重。\n\n**代码**\n\n```Java [sol3-Java]\nclass Solution {\n    public List<String> removeInvalidParentheses(String s) {\n        int lremove = 0;\n        int rremove = 0;\n        List<Integer> left = new ArrayList<Integer>();\n        List<Integer> right = new ArrayList<Integer>();\n        List<String> ans = new ArrayList<String>();\n        Set<String> cnt = new HashSet<String>();\n\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                left.add(i);\n                lremove++;\n            } else if (s.charAt(i) == ')') {\n                right.add(i);\n                if (lremove == 0) {\n                    rremove++;\n                } else {\n                    lremove--;\n                }\n            }\n        }\n\n        int m = left.size();\n        int n = right.size();\n        List<Integer> maskArr1 = new ArrayList<Integer>();\n        List<Integer> maskArr2 = new ArrayList<Integer>();\n        for (int i = 0; i < (1 << m); i++) {\n            if (Integer.bitCount(i) != lremove) {\n                continue;\n            }\n            maskArr1.add(i);\n        }\n        for (int i = 0; i < (1 << n); i++) {\n            if (Integer.bitCount(i) != rremove) {\n                continue;\n            }\n            maskArr2.add(i);\n        }\n        for (int mask1 : maskArr1) {\n            for (int mask2 : maskArr2) {\n                if (checkValid(s, mask1, left, mask2, right)) {\n                    cnt.add(recoverStr(s, mask1, left, mask2, right));\n                }\n            }\n        }\n        for (String v : cnt) {\n            ans.add(v);\n        }\n\n        return ans;\n    }\n\n    private boolean checkValid(String str, int lmask, List<Integer> left, int rmask, List<Integer> right) {\n        int pos1 = 0;\n        int pos2 = 0;\n        int cnt = 0;\n\n        for (int i = 0; i < str.length(); i++) {\n            if (pos1 < left.size() && i == left.get(pos1)) {\n                if ((lmask & (1 << pos1)) == 0) {\n                    cnt++;\n                }\n                pos1++;\n            } else if (pos2 < right.size() && i == right.get(pos2)) {\n                if ((rmask & (1 << pos2)) == 0) {\n                    cnt--;\n                    if (cnt < 0) {\n                        return false;\n                    }\n                }\n                pos2++;\n            }\n        }\n\n        return cnt == 0;\n    }\n\n    private String recoverStr(String str, int lmask, List<Integer> left, int rmask, List<Integer> right) {\n        StringBuilder sb = new StringBuilder();\n        int pos1 = 0;\n        int pos2 = 0;\n\n        for (int i = 0; i < str.length(); i++) {\n            if (pos1 < left.size() && i == left.get(pos1)) {\n                if ((lmask & (1 << pos1)) == 0) {\n                    sb.append(str.charAt(i));\n                }\n                pos1++;\n            } else if (pos2 < right.size() && i == right.get(pos2)) {\n                if ((rmask & (1 << pos2)) == 0) {\n                    sb.append(str.charAt(i));\n                }\n                pos2++;\n            } else {\n                sb.append(str.charAt(i));\n            }\n        }\n\n        return sb.toString();\n    }\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    bool checkValid(const string & str, int lmask, vector<int> & left, int rmask, vector<int> & right) {\n        int pos1 = 0;\n        int pos2 = 0;\n        int cnt = 0;\n\n        for (int i = 0; i < str.size(); i++) {\n            if (pos1 < left.size() && i == left[pos1]) {\n                if (!(lmask & (1 << pos1))) {\n                    cnt++;\n                }\n                pos1++;\n            } else if (pos2 < right.size() && i == right[pos2]) {\n                if (!(rmask & (1 << pos2))) {\n                    cnt--;\n                    if (cnt < 0) {\n                        return false;\n                    }\n                }\n                pos2++;\n            }\n        }\n\n        return cnt == 0;\n    }\n\n    string recoverStr(const string & str, int lmask, vector<int> & left, int rmask, vector<int> & right){\n        string ans;\n        int pos1 = 0;\n        int pos2 = 0;\n\n        for (int i = 0; i < str.size(); i++) {\n            if (pos1 < left.size() && i == left[pos1]) {\n                if (!(lmask & (1 << pos1))){\n                    ans.push_back(str[i]);\n                }\n                pos1++;\n            } else if (pos2 < right.size() && i == right[pos2]) {\n                if (!(rmask & (1 << pos2))) {\n                    ans.push_back(str[i]);\n                }\n                pos2++;\n            } else {\n                ans.push_back(str[i]);\n            }\n        }\n\n        return ans;\n    }\n\n    vector<string> removeInvalidParentheses(string s) {\n        int lremove = 0;\n        int rremove = 0;\n        vector<int> left;\n        vector<int> right;\n        vector<string> ans;\n        unordered_set<string> cnt;\n\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == '(') {\n                left.push_back(i);\n                lremove++;\n            } else if (s[i] == ')') {\n                right.push_back(i);\n                if (lremove == 0) {\n                    rremove++;\n                } else {\n                    lremove--;\n                }\n            }\n        }\n\n        int m = left.size();\n        int n = right.size();\n        vector<int> maskArr1;\n        vector<int> maskArr2;\n        for (int i = 0; i < (1 << m); i++) {\n            if (__builtin_popcount(i) != lremove) {\n                continue;\n            }\n            maskArr1.push_back(i);\n        }\n        for (int j = 0; j < (1 << n); j++) {\n            if (__builtin_popcount(j) != rremove) {\n                continue;\n            }\n            maskArr2.push_back(j);\n        }\n        for (auto mask1 : maskArr1) {\n            for (auto mask2 : maskArr2) {\n                if (checkValid(s, mask1, left, mask2, right)) {\n                    cnt.insert(recoverStr(s, mask1, left, mask2, right));\n                }\n            }\n        }\n        for (auto v : cnt) {\n            ans.emplace_back(v);\n        }\n\n        return ans;\n    }\n};\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public IList<string> RemoveInvalidParentheses(string s) {\n        int lremove = 0;\n        int rremove = 0;\n        IList<int> left = new List<int>();\n        IList<int> right = new List<int>();\n        IList<string> ans = new List<string>();\n        ISet<string> cnt = new HashSet<string>();\n\n        for (int i = 0; i < s.Length; i++) {\n            if (s[i] == '(') {\n                left.Add(i);\n                lremove++;\n            } else if (s[i] == ')') {\n                right.Add(i);\n                if (lremove == 0) {\n                    rremove++;\n                } else {\n                    lremove--;\n                }\n            }\n        }\n\n        int m = left.Count;\n        int n = right.Count;\n        IList<int> maskArr1 = new List<int>();\n        IList<int> maskArr2 = new List<int>();\n        for (int i = 0; i < (1 << m); i++) {\n            if (CountBit(i) != lremove) {\n                continue;\n            }\n            maskArr1.Add(i);\n        }\n        for (int i = 0; i < (1 << n); i++) {\n            if (CountBit(i) != rremove) {\n                continue;\n            }\n            maskArr2.Add(i);\n        }\n        foreach (int mask1 in maskArr1) {\n            foreach (int mask2 in maskArr2) {\n                if (CheckValid(s, mask1, left, mask2, right)) {\n                    cnt.Add(RecoverStr(s, mask1, left, mask2, right));\n                }\n            }\n        }\n        foreach (string v in cnt) {\n            ans.Add(v);\n        }\n\n        return ans;\n    }\n\n    private bool CheckValid(string str, int lmask, IList<int> left, int rmask, IList<int> right) {\n        int pos1 = 0;\n        int pos2 = 0;\n        int cnt = 0;\n\n        for (int i = 0; i < str.Length; i++) {\n            if (pos1 < left.Count && i == left[pos1]) {\n                if ((lmask & (1 << pos1)) == 0) {\n                    cnt++;\n                }\n                pos1++;\n            } else if (pos2 < right.Count && i == right[pos2]) {\n                if ((rmask & (1 << pos2)) == 0) {\n                    cnt--;\n                    if (cnt < 0) {\n                        return false;\n                    }\n                }\n                pos2++;\n            }\n        }\n\n        return cnt == 0;\n    }\n\n    private string RecoverStr(String str, int lmask, IList<int> left, int rmask, IList<int> right) {\n        StringBuilder sb = new StringBuilder();\n        int pos1 = 0;\n        int pos2 = 0;\n\n        for (int i = 0; i < str.Length; i++) {\n            if (pos1 < left.Count && i == left[pos1]) {\n                if ((lmask & (1 << pos1)) == 0) {\n                    sb.Append(str[i]);\n                }\n                pos1++;\n            } else if (pos2 < right.Count && i == right[pos2]) {\n                if ((rmask & (1 << pos2)) == 0) {\n                    sb.Append(str[i]);\n                }\n                pos2++;\n            } else {\n                sb.Append(str[i]);\n            }\n        }\n\n        return sb.ToString();\n    }\n\n    private int CountBit(int x) {\n        int res = 0;\n        while (x != 0) {\n            x &= (x - 1);\n            res++;\n        }\n        return res;\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        def checkValid(str, lmask, left, rmask, right):\n            pos1, pos2 = 0, 0\n            cnt = 0\n\n            for i in range(len(str)):\n                if pos1 < len(left) and i == left[pos1]:\n                    if lmask & (1 << pos1) == 0:\n                        cnt += 1\n                    pos1 += 1\n                elif pos2 < len(right) and i == right[pos2]:\n                    if rmask & (1 << pos2) == 0:\n                        cnt -= 1\n                        if cnt < 0:\n                            return False\n                    pos2 += 1\n\n            return cnt == 0\n\n        def recoverStr(lmask, left, rmask, right):\n            pos1, pos2 = 0, 0\n            res = \"\"\n\n            for i in range(len(s)):\n                if pos1 < len(left) and i == left[pos1]:\n                    if lmask & (1 << pos1) == 0:\n                        res += s[i]\n                    pos1 += 1\n                elif pos2 < len(right) and i == right[pos2]:\n                    if rmask & (1 << pos2) == 0:\n                        res += s[i]\n                    pos2 += 1\n                else:\n                    res += s[i]\n\n            return res\n\n        def countBit(x):\n            res = 0\n            while x != 0:\n                x = x & (x - 1)\n                res += 1\n            return res\n\n        lremove, rremove = 0, 0\n        left, right = [], []\n        ans = []\n        cnt = set()\n\n        for i in range(len(s)):\n            if s[i] == '(':\n                left.append(i)\n                lremove += 1\n            elif s[i] == ')':\n                right.append(i)\n                if lremove == 0:\n                    rremove += 1\n                else:\n                    lremove -= 1\n\n        m, n = len(left), len(right)\n        maskArr1, maskArr2 = [], []\n        for i in range(1 << m):\n            if countBit(i) != lremove:\n                continue\n            maskArr1.append(i)\n        for i in range(1 << n):\n            if countBit(i) != rremove:\n                continue\n            maskArr2.append(i)\n        for mask1 in maskArr1:\n            for mask2 in maskArr2:\n                if checkValid(s, mask1, left, mask2, right):\n                    cnt.add(recoverStr(mask1, left, mask2, right))\n            \n        return [val for val in cnt]\n```\n\n```JavaScript [sol3-JavaScript]\nvar removeInvalidParentheses = function(s) {\n    let lremove = 0;\n    let rremove = 0;\n    const left = [];\n    const right = [];\n    const ans = [];\n    const cnt = new Set();\n\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '(') {\n            left.push(i);\n            lremove++;\n        } else if (s[i] === ')') {\n            right.push(i);\n            if (lremove === 0) {\n                rremove++;\n            } else {\n                lremove--;\n            }\n        }\n    }\n\n    const m = left.length;\n    const n = right.length;\n    const maskArr1 = [];\n    const maskArr2 = [];\n    for (let i = 0; i < (1 << m); i++) {\n        if (bitCount(i) !== lremove) {\n            continue;\n        }\n        maskArr1.push(i);\n    }\n    for (let i = 0; i < (1 << n); i++) {\n        if (bitCount(i) !== rremove) {\n            continue;\n        }\n        maskArr2.push(i);\n    }\n    for (const mask1 of maskArr1) {\n        for (const mask2 of maskArr2) {\n            if (checkValid(s, mask1, left, mask2, right)) {\n                cnt.add(recoverStr(s, mask1, left, mask2, right));\n            }\n        }\n    }\n    for (const v of cnt) {\n        ans.push(v);\n    }\n\n    return ans;\n}\n\nconst bitCount = (n) => {\n    let ret = 0;\n    while (n) {\n        n &= n - 1;\n        ret++;\n    }\n    return ret;\n};\n\nconst checkValid = (str, lmask, left, rmask, right) => {\n    let pos1 = 0;\n    let pos2 = 0;\n    let cnt = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        if (pos1 < left.length && i === left[pos1]) {\n            if ((lmask & (1 << pos1)) === 0) {\n                cnt++;\n            }\n            pos1++;\n        } else if (pos2 < right.length && i === right[pos2]) {\n            if ((rmask & (1 << pos2)) === 0) {\n                cnt--;\n                if (cnt < 0) {\n                    return false;\n                }\n            }\n            pos2++;\n        }\n    }\n\n    return cnt === 0;\n}\n\nconst recoverStr = (str, lmask, left, rmask, right) => {\n    const sb = [];\n    let pos1 = 0;\n    let pos2 = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        if (pos1 < left.length && i === left[pos1]) {\n            if ((lmask & (1 << pos1)) === 0) {\n                sb.push(str[i]);\n            }\n            pos1++;\n        } else if (pos2 < right.length && i === right[pos2]) {\n            if ((rmask & (1 << pos2)) === 0) {\n                sb.push(str[i]);\n            }\n            pos2++;\n        } else {\n            sb.push(str[i]);\n        }\n    }\n\n    return sb.join('');\n}\n```\n\n```go [sol3-Golang]\nfunc checkValid(str string, lmask, rmask int, left, right []int) bool {\n    cnt := 0\n    pos1, pos2 := 0, 0\n    for i := range str {\n        if pos1 < len(left) && i == left[pos1] {\n            if lmask>>pos1&1 == 0 {\n                cnt++\n            }\n            pos1++\n        } else if pos2 < len(right) && i == right[pos2] {\n            if rmask>>pos2&1 == 0 {\n                cnt--\n                if cnt < 0 {\n                    return false\n                }\n            }\n            pos2++\n        }\n    }\n    return cnt == 0\n}\n\nfunc recoverStr(str string, lmask, rmask int, left, right []int) string {\n    res := []rune{}\n    pos1, pos2 := 0, 0\n    for i, ch := range str {\n        if pos1 < len(left) && i == left[pos1] {\n            if lmask>>pos1&1 == 0 {\n                res = append(res, ch)\n            }\n            pos1++\n        } else if pos2 < len(right) && i == right[pos2] {\n            if rmask>>pos2&1 == 0 {\n                res = append(res, ch)\n            }\n            pos2++\n        } else {\n            res = append(res, ch)\n        }\n    }\n    return string(res)\n}\n\nfunc removeInvalidParentheses(s string) (ans []string) {\n    var left, right []int\n    lremove, rremove := 0, 0\n    for i, ch := range s {\n        if ch == '(' {\n            left = append(left, i)\n            lremove++\n        } else if ch == ')' {\n            right = append(right, i)\n            if lremove == 0 {\n                rremove++\n            } else {\n                lremove--\n            }\n        }\n    }\n\n    var maskArr1, maskArr2 []int\n    for i := 0; i < 1<<len(left); i++ {\n        if bits.OnesCount(uint(i)) == lremove {\n            maskArr1 = append(maskArr1, i)\n        }\n    }\n    for i := 0; i < 1<<len(right); i++ {\n        if bits.OnesCount(uint(i)) == rremove {\n            maskArr2 = append(maskArr2, i)\n        }\n    }\n\n    res := map[string]struct{}{}\n    for _, mask1 := range maskArr1 {\n        for _, mask2 := range maskArr2 {\n            if checkValid(s, mask1, mask2, left, right) {\n                res[recoverStr(s, mask1, mask2, left, right)] = struct{}{}\n            }\n        }\n    }\n    for str := range res {\n        ans = append(ans, str)\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times 2^n)$，其中 $n$ 为字符串的长度。考虑到一个字符串最多可能有 $2^n$ 个子序列，每个子序列可能需要进行一次合法性检测，因此时间复杂度为 $O(n \\times 2^n)$。\n\n- 空间复杂度：$O(n \\times C_n^m)$，其中 $n$ 为字符串的长度，$m$ 为字符串中非法括号的数目。空间复杂度主要为集合 $\\texttt{cnt}$ 占用的空间。"
}