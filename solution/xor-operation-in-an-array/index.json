{
	"titleSlug": "xor-operation-in-an-array",
	"slug": "shu-zu-yi-huo-cao-zuo-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/xor-operation-in-an-array/solution/shu-zu-yi-huo-cao-zuo-by-leetcode-solution/",
	"content": "#### 方法一：模拟\n\n**思路**\n\n按照题意模拟即可：\n\n1. 初始化 $\\textit{ans} = 0$；\n2. 遍历区间 $[0, n - 1]$ 中的每一个整数 $i$，令 $\\textit{ans}$ 与每一个 $\\textit{start} + 2 \\times i$ 做异或运算；\n3. 最终返回 $\\textit{ans}$，即我们需要的答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int xorOperation(int n, int start) {\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            ans ^= (start + i * 2);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int xorOperation(int n, int start) {\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            ans ^= (start + i * 2);\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int XorOperation(int n, int start) {\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            ans ^= (start + i * 2);\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def xorOperation(self, n: int, start: int) -> int:\n        ans = 0\n        for i in range(n):\n            ans ^= (start + i * 2)\n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar xorOperation = function(n, start) {\n    let ans = 0;\n    for (let i = 0; i < n; ++i) {\n        ans ^= (start + i * 2);\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc xorOperation(n, start int) (ans int) {\n    for i := 0; i < n; i++ {\n        ans ^= start + i*2\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint xorOperation(int n, int start) {\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        ans ^= (start + i * 2);\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。这里用一重循环对 $n$ 个数字进行异或。\n\n- 空间复杂度：$O(1)$。这里只是用了常量级别的辅助空间。\n\n#### 方法二：数学\n\n记 $\\oplus$ 为异或运算，异或运算满足以下性质：\n\n1. $x \\oplus x = 0$；\n2. $x \\oplus y = y \\oplus x$（交换律）；\n3. $(x \\oplus y) \\oplus z = x \\oplus (y \\oplus z)$（结合律）；\n4. $x \\oplus y \\oplus y = x$（自反性）；\n5. $\\forall i \\in Z$，有 $4i \\oplus (4i+1) \\oplus (4i+2) \\oplus (4i+3) = 0$。\n\n在本题中，我们需要计算 $\\textit{start} \\oplus (\\textit{start}+2i) \\oplus (\\textit{start}+4i) \\oplus \\dots \\oplus (\\textit{start}+2(n-1))$。\n\n观察公式可以知道，这些数的奇偶性质相同，因此它们的二进制表示中的最低位或者均为 $1$，或者均为 $0$。于是我们可以把参与运算的数的二进制位的最低位提取出来单独处理。当且仅当 $\\textit{start}$ 为奇数，且 $n$ 也为奇数时，结果的二进制位的最低位才为 $1$。\n\n此时我们可以将公式转化为 $(s \\oplus (s+1) \\oplus (s+2) \\oplus \\dots \\oplus (s+n-1))\\times 2 + e$，其中 $s=\\lfloor \\frac{\\textit{start}}{2} \\rfloor$，$e$ 表示运算结果的最低位。即我们单独处理最低位，而舍去最低位后的数列恰成为一串连续的整数。\n\n这样我们可以描述一个函数 $\\text{sumXor}(x)$，表示 $0 \\oplus 1 \\oplus 2 \\oplus \\dots \\oplus x$。利用异或运算的性质 $5$，我们可以将计算该函数的复杂度降低到 $O(1)$，因为以 $4i$ 为开头的连续四个整数异或的结果为 $0$，所以 $\\text{sumXor}(x)$ 可以被表示为：\n\n$$\n\\text{sumXor}(x)=\n\\begin{cases}\nx,& x=4k,k\\in Z\\\\\n(x-1) \\oplus x,& x=4k+1,k\\in Z\\\\\n(x-2) \\oplus (x-1) \\oplus x,& x=4k+2,k\\in Z\\\\\n(x-3) \\oplus (x-2) \\oplus (x-1) \\oplus x,& x=4k+3,k\\in Z\\\\\n\\end{cases}\n$$\n\n我们可以进一步化简该式：\n\n$$\n\\text{sumXor}(x)=\n\\begin{cases}\nx,& x=4k,k\\in Z\\\\\n1,& x=4k+1,k\\in Z\\\\\nx+1,& x=4k+2,k\\in Z\\\\\n0,& x=4k+3,k\\in Z\\\\\n\\end{cases}\n$$\n\n这样最后的结果即可表示为 $(\\text{sumXor}(s-1) \\oplus \\text{sumXor}(s+n-1))\\times 2 + e$。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int sumXor(int x) {\n        if (x % 4 == 0) {\n            return x;\n        }\n        if (x % 4 == 1) {\n            return 1;\n        }\n        if (x % 4 == 2) {\n            return x + 1;\n        }\n        return 0;\n    }\n\n    int xorOperation(int n, int start) {\n        int s = start >> 1, e = n & start & 1;\n        int ret = sumXor(s - 1) ^ sumXor(s + n - 1);\n        return ret << 1 | e;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int xorOperation(int n, int start) {\n        int s = start >> 1, e = n & start & 1;\n        int ret = sumXor(s - 1) ^ sumXor(s + n - 1);\n        return ret << 1 | e;\n    }\n\n    public int sumXor(int x) {\n        if (x % 4 == 0) {\n            return x;\n        }\n        if (x % 4 == 1) {\n            return 1;\n        }\n        if (x % 4 == 2) {\n            return x + 1;\n        }\n        return 0;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int XorOperation(int n, int start) {\n        int s = start >> 1, e = n & start & 1;\n        int ret = SumXor(s - 1) ^ SumXor(s + n - 1);\n        return ret << 1 | e;\n    }\n\n    public int SumXor(int x) {\n        if (x % 4 == 0) {\n            return x;\n        }\n        if (x % 4 == 1) {\n            return 1;\n        }\n        if (x % 4 == 2) {\n            return x + 1;\n        }\n        return 0;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar xorOperation = function(n, start) {\n    let s = start >> 1, e = n & start & 1;\n    let ret = sumXor(s - 1) ^ sumXor(s + n - 1);\n    return ret << 1 | e;\n};\n\nconst sumXor = (x) => {\n    if (x % 4 === 0) {\n        return x;\n    }\n    if (x % 4 === 1) {\n        return 1;\n    }\n    if (x % 4 === 2) {\n        return x + 1;\n    }\n    return 0;\n}\n```\n\n```go [sol2-Golang]\nfunc sumXor(x int) int {\n    switch x % 4 {\n    case 0:\n        return x\n    case 1:\n        return 1\n    case 2:\n        return x + 1\n    default:\n        return 0\n    }\n}\n\nfunc xorOperation(n, start int) (ans int) {\n    s, e := start>>1, n&start&1\n    ret := sumXor(s-1) ^ sumXor(s+n-1)\n    return ret<<1 | e\n}\n```\n\n```C [sol2-C]\nint sumXor(int x) {\n    if (x % 4 == 0) {\n        return x;\n    }\n    if (x % 4 == 1) {\n        return 1;\n    }\n    if (x % 4 == 2) {\n        return x + 1;\n    }\n    return 0;\n}\n\nint xorOperation(int n, int start) {\n    int s = start >> 1, e = n & start & 1;\n    int ret = sumXor(s - 1) ^ sumXor(s + n - 1);\n    return ret << 1 | e;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。我们只需要常数的时间计算出结果。\n\n- 空间复杂度：$O(1)$。我们只需要常数的空间保存若干变量。"
}