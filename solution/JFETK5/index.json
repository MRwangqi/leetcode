{
	"titleSlug": "JFETK5",
	"slug": "er-jin-zhi-jia-fa-by-leetcode-solution-fa6t",
	"url": "https://leetcode-cn.com/problems/JFETK5/solution/er-jin-zhi-jia-fa-by-leetcode-solution-fa6t/",
	"content": "#### 题目分析\n\n考虑一个最朴素的方法：先将 $a$ 和 $b$ 转化成十进制数，求和后再转化为二进制数。利用 Python 和 Java 自带的高精度运算，我们可以很简单地写出这个程序：\n\n```python [pre-Python3]\nclass Solution:\n    def addBinary(self, a, b) -> str:\n        return '{0:b}'.format(int(a, 2) + int(b, 2))\n```\n\n```Java [pre-Java]\nclass Solution {\n    public String addBinary(String a, String b) {\n        return Integer.toBinaryString(\n            Integer.parseInt(a, 2) + Integer.parseInt(b, 2)\n        );\n    }\n}\n```\n\n如果 $a$ 的位数是 $n$，$b$ 的位数为 $m$，这个算法的渐进时间复杂度为 $O(n + m)$。但是这里非常简单的实现基于 Python 和 Java 本身的高精度功能，在其他的语言中可能并不适用，并且在 Java 中：\n\n+ 如果字符串超过 $33$ 位，不能转化为 `Integer`\n+ 如果字符串超过 $65$ 位，不能转化为 `Long`\n+ 如果字符串超过 $500000001$ 位，不能转化为 `BigInteger`\n\n因此，为了适用于长度较大的字符串计算，我们应该使用更加健壮的算法。\n\n\n#### 方法一：模拟\n\n**思路和算法**\n\n我们可以借鉴「列竖式」的方法，末尾对齐，逐位相加。在十进制的计算中「逢十进一」，二进制中我们需要「逢二进一」。\n\n具体的，我们可以取 $n = \\max\\{ |a|, |b| \\}$，循环 $n$ 次，从最低位开始遍历。我们使用一个变量 $\\textit{carry}$ 表示上一个位置的进位，初始值为 $0$。记当前位置对其的两个位为 $a_i$ 和 $b_i$，则每一位的答案为 $(\\textit{carry} + a_i + b_i) \\bmod{2}$，下一位的进位为 $\\lfloor \\frac{\\textit{carry} + a_i + b_i}{2} \\rfloor$。重复上述步骤，直到数字 $a$ 和 $b$ 的每一位计算完毕。最后如果 $\\textit{carry}$ 的最高位不为 $0$，则将最高位添加到计算结果的末尾。\n\n注意，为了让各个位置对齐，你可以先反转这个代表二进制数字的字符串，然后低下标对应低位，高下标对应高位。当然你也可以直接把 $a$ 和 $b$ 中短的那一个补 $0$ 直到和长的那个一样长，然后从高位向低位遍历，对应位置的答案按照顺序存入答案字符串内，最终将答案串反转。这里的代码给出第一种的实现。\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    public String addBinary(String a, String b) {\n        StringBuffer ans = new StringBuffer();\n\n        int n = Math.max(a.length(), b.length()), carry = 0;\n        for (int i = 0; i < n; ++i) {\n            carry += i < a.length() ? (a.charAt(a.length() - 1 - i) - '0') : 0;\n            carry += i < b.length() ? (b.charAt(b.length() - 1 - i) - '0') : 0;\n            ans.append((char) (carry % 2 + '0'));\n            carry /= 2;\n        }\n\n        if (carry > 0) {\n            ans.append('1');\n        }\n        ans.reverse();\n\n        return ans.toString();\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans;\n        reverse(a.begin(), a.end());\n        reverse(b.begin(), b.end());\n\n        int n = max(a.size(), b.size()), carry = 0;\n        for (size_t i = 0; i < n; ++i) {\n            carry += i < a.size() ? (a.at(i) == '1') : 0;\n            carry += i < b.size() ? (b.at(i) == '1') : 0;\n            ans.push_back((carry % 2) ? '1' : '0');\n            carry /= 2;\n        }\n\n        if (carry) {\n            ans.push_back('1');\n        }\n        reverse(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n```\n\n```golang [sol1-Golang]\nfunc addBinary(a string, b string) string {\n    ans := \"\"\n    carry := 0\n    lenA, lenB := len(a), len(b)\n    n := max(lenA, lenB)\n\n    for i := 0; i < n; i++ {\n        if i < lenA {\n            carry += int(a[lenA-i-1] - '0')\n        }\n        if i < lenB {\n            carry += int(b[lenB-i-1] - '0')\n        }\n        ans = strconv.Itoa(carry%2) + ans\n        carry /= 2\n    }\n    if carry > 0 {\n        ans = \"1\" + ans\n    }\n    return ans\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n```C [sol1-C]\nvoid reserve(char* s) {\n    int len = strlen(s);\n    for (int i = 0; i < len / 2; i++) {\n        char t = s[i];\n        s[i] = s[len - i - 1], s[len - i - 1] = t;\n    }\n}\n\nchar* addBinary(char* a, char* b) {\n    reserve(a);\n    reserve(b);\n\n    int len_a = strlen(a), len_b = strlen(b);\n    int n = fmax(len_a, len_b), carry = 0, len = 0;\n    char* ans = (char*)malloc(sizeof(char) * (n + 2));\n    for (int i = 0; i < n; ++i) {\n        carry += i < len_a ? (a[i] == '1') : 0;\n        carry += i < len_b ? (b[i] == '1') : 0;\n        ans[len++] = carry % 2 + '0';\n        carry /= 2;\n    }\n\n    if (carry) {\n        ans[len++] = '1';\n    }\n    ans[len] = '\\0';\n    reserve(ans);\n\n    return ans;\n}\n```\n\n**复杂度分析**\n\n假设 $n = \\max\\{ |a|, |b| \\}$。\n\n- 时间复杂度：$O(n)$，这里的时间复杂度来源于顺序遍历 $a$ 和 $b$。\n- 空间复杂度：$O(1)$，除去答案所占用的空间，这里使用了常数个临时变量。\n\n#### 方法二：位运算\n\n**思路和算法**\n\n如果不允许使用加减乘除，则可以使用位运算替代上述运算中的一些加减乘除的操作。\n\n如果不了解位运算，可以先了解位运算并尝试练习以下题目：\n\n+ [只出现一次的数字 II](https://leetcode-cn.com/problems/single-number-ii/)\n+ [只出现一次的数字 III](https://leetcode-cn.com/problems/single-number-iii/)\n+ [数组中两个数的最大异或值](https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/)\n+ [重复的DNA序列](https://leetcode-cn.com/problems/repeated-dna-sequences/)\n+ [最大单词长度乘积](https://leetcode-cn.com/problems/maximum-product-of-word-lengths/)\n\n我们可以设计这样的算法来计算：\n\n+ 把 $a$ 和 $b$ 转换成整型数字 $x$ 和 $y$，在接下来的过程中，$x$ 保存结果，$y$ 保存进位。\n+ 当进位不为 $0$ 时\n  + 计算当前 $x$ 和 $y$ 的无进位相加结果：`answer = x ^ y`\n  + 计算当前 $x$ 和 $y$ 的进位：`carry = (x & y) << 1`\n  + 完成本次循环，更新 `x = answer`，`y = carry`\n+ 返回 $x$ 的二进制形式\n\n为什么这个方法是可行的呢？在第一轮计算中，`answer` 的最后一位是 $x$ 和 $y$ 相加之后的结果，`carry` 的倒数第二位是 $x$ 和 $y$ 最后一位相加的进位。接着每一轮中，由于 `carry` 是由 $x$ 和 $y$ 按位与并且左移得到的，那么最后会补零，所以在下面计算的过程中后面的数位不受影响，而每一轮都可以得到一个低 $i$ 位的答案和它向低 $i + 1$ 位的进位，也就模拟了加法的过程。\n\n**代码**\n\n```python [sol2-Python3]\nclass Solution:\n    def addBinary(self, a, b) -> str:\n        x, y = int(a, 2), int(b, 2)\n        while y:\n            answer = x ^ y\n            carry = (x & y) << 1\n            x, y = answer, carry\n        return bin(x)[2:]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(|a| + |b| + X \\cdot \\max ({|a| + |b|}))$，字符串转化成数字需要的时间代价为 $O(|a| + |b|)$，计算的时间代价为 $O(\\max \\{ |a|, |b| \\})$，$X$ 为位运算所需的时间，因为这里用到了高精度计算，所以位运算的时间不一定为 $O(1)$。\n- 空间复杂度：这里使用了 $x$ 和 $y$ 来保存 $a$ 和 $b$ 的整数形式，如果用 Python 实现，这里用到了 Python 的高精度功能，实际的空间代价是 $O(|a| + |b|)$。"
}