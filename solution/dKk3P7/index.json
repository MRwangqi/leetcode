{
	"titleSlug": "dKk3P7",
	"slug": "you-xiao-de-bian-wei-ci-by-leetcode-solu-xzi0",
	"url": "https://leetcode-cn.com/problems/dKk3P7/solution/you-xiao-de-bian-wei-ci-by-leetcode-solu-xzi0/",
	"content": "#### 方法一：排序\n\n$t$ 是 $s$ 的变位词等价于「两个字符串不相等且两个字符串排序后相等」。首先判断字符串 $s$ 和 $t$ 是否相等，如果相等则直接返回 $\\text{false}$，如果不相等则继续判断两个字符串排序后是否相等。我们可以对字符串 $s$ 和 $t$ 分别排序，看排序后的字符串是否相等。此外，如果 $s$ 和 $t$ 的长度不同，$t$ 必然不是 $s$ 的变位词。\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isAnagram(String s, String t) {\n        if (s.length() != t.length() || s.equals(t)) {\n            return false;\n        }\n        char[] str1 = s.toCharArray();\n        char[] str2 = t.toCharArray();\n        Arrays.sort(str1);\n        Arrays.sort(str2);\n        return Arrays.equals(str1, str2);\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar isAnagram = function(s, t) {\n    return s.length == t.length && s !== t && [...s].sort().join('') === [...t].sort().join('')\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        if (s.length() != t.length() || s == t) {\n            return false;\n        }\n        sort(s.begin(), s.end());\n        sort(t.begin(), t.end());\n        return s == t;\n    }\n};\n```\n\n```Golang [sol1-Golang]\nfunc isAnagram(s, t string) bool {\n    if s == t {\n        return false\n    }\n    s1, s2 := []byte(s), []byte(t)\n    sort.Slice(s1, func(i, j int) bool { return s1[i] < s1[j] })\n    sort.Slice(s2, func(i, j int) bool { return s2[i] < s2[j] })\n    return string(s1) == string(s2)\n}\n```\n\n```C [sol1-C]\nint cmp(const void* _a, const void* _b) {\n    char a = *(char*)_a, b = *(char*)_b;\n    return a - b;\n}\n\nbool isAnagram(char* s, char* t) {\n    int len_s = strlen(s), len_t = strlen(t);\n    if (len_s != len_t || strcmp(s, t) == 0) {\n        return false;\n    }\n    qsort(s, len_s, sizeof(char), cmp);\n    qsort(t, len_t, sizeof(char), cmp);\n    return strcmp(s, t) == 0;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n \\log n)$，其中 $n$ 为 $s$ 的长度。排序的时间复杂度为 $O(n\\log n)$，比较两个字符串是否相等时间复杂度为 $O(n)$，最多需要执行两次字符串比较，因此总体时间复杂度为 $O(n \\log n+2n)=O(n\\log n)$。\n\n* 空间复杂度：$O(\\log n)$。排序需要 $O(\\log n)$ 的空间复杂度。注意，在某些语言（比如 Java & JavaScript）中字符串是不可变的，因此我们需要额外的 $O(n)$ 的空间来拷贝字符串。但是我们忽略这一复杂度分析，因为：\n   * 这依赖于语言的细节；\n   * 这取决于函数的设计方式，例如，可以将函数参数类型更改为 `char[]`。\n\n#### 方法二：哈希表\n\n从另一个角度考虑，$t$ 是 $s$ 的变位词等价于「两个字符串不相等且两个字符串中字符出现的种类和次数均相等」。首先判断字符串 $s$ 和 $t$ 是否相等，如果相等则直接返回 $\\text{false}$，如果不相等则继续比较两个字符串中字符出现的种类和次数。由于字符串只包含 $26$ 个小写字母，因此我们可以维护一个长度为 $26$ 的频次数组 $\\textit{table}$，先遍历记录字符串 $s$ 中字符出现的频次，然后遍历字符串 $t$，减去 $\\textit{table}$ 中对应的频次，如果出现 $\\textit{table}[i]<0$，则说明 $t$ 包含一个不在 $s$ 中的额外字符，返回 $\\text{false}$ 即可。\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean isAnagram(String s, String t) {\n        if (s.length() != t.length() || s.equals(t)) {\n            return false;\n        }\n        int[] table = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            table[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < t.length(); i++) {\n            table[t.charAt(i) - 'a']--;\n            if (table[t.charAt(i) - 'a'] < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar isAnagram = function(s, t) {\n    if (s.length !== t.length || s == t) {\n        return false;\n    }\n    const table = new Array(26).fill(0);\n    for (let i = 0; i < s.length; ++i) {\n        table[s.codePointAt(i) - 'a'.codePointAt(0)]++;\n    }\n    for (let i = 0; i < t.length; ++i) {\n        table[t.codePointAt(i) - 'a'.codePointAt(0)]--;\n        if (table[t.codePointAt(i) - 'a'.codePointAt(0)] < 0) {\n            return false;\n        }\n    }\n    return true;\n};\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        if (s.length() != t.length() || s == t) {\n            return false;\n        }\n        vector<int> table(26, 0);\n        for (auto& ch: s) {\n            table[ch - 'a']++;\n        }\n        for (auto& ch: t) {\n            table[ch - 'a']--;\n            if (table[ch - 'a'] < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Golang [sol2-Golang]\nfunc isAnagram(s, t string) bool {\n    if s == t {\n        return false\n    }\n    var c1, c2 [26]int\n    for _, ch := range s {\n        c1[ch-'a']++\n    }\n    for _, ch := range t {\n        c2[ch-'a']++\n    }\n    return c1 == c2\n}\n```\n\n```C [sol2-C]\nbool isAnagram(char* s, char* t) {\n    if (len_s != len_t || strcmp(s, t) == 0) {\n        return false;\n    }\n    int table[26];\n    memset(table, 0, sizeof(table));\n    for (int i = 0; i < len_s; ++i) {\n        table[s[i] - 'a']++;\n    }\n    for (int i = 0; i < len_t; ++i) {\n        table[t[i] - 'a']--;\n        if (table[t[i] - 'a'] < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n对于进阶问题，$\\text{Unicode}$ 是为了解决传统字符编码的局限性而产生的方案，它为每个语言中的字符规定了一个唯一的二进制编码。而 $\\text{Unicode}$ 中可能存在一个字符对应多个字节的问题，为了让计算机知道多少字节表示一个字符，面向传输的编码方式的 $\\text{UTF}-8$ 和 $\\text{UTF}-16$ 也随之诞生逐渐广泛使用，具体相关的知识读者可以继续查阅相关资料拓展视野，这里不再展开。\n\n回到本题，进阶问题的核心点在于「字符是离散未知的」，因此我们用哈希表维护对应字符的频次即可。同时读者需要注意 $\\text{Unicode}$ 一个字符可能对应多个字节的问题，不同语言对于字符串读取处理的方式是不同的。\n\n```Java [sol3-Java]\nclass Solution {\n    public boolean isAnagram(String s, String t) {\n        if (s.length() != t.length() || s.equals(t)) {\n            return false;\n        }\n        Map<Character, Integer> table = new HashMap<Character, Integer>();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            table.put(ch, table.getOrDefault(ch, 0) + 1);\n        }\n        for (int i = 0; i < t.length(); i++) {\n            char ch = t.charAt(i);\n            table.put(ch, table.getOrDefault(ch, 0) - 1);\n            if (table.get(ch) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```Golang [sol3-Golang]\nfunc isAnagram(s, t string) bool {\n    if len(s) != len(t) || s == t {\n        return false\n    }\n    cnt := map[rune]int{}\n    for _, ch := range s {\n        cnt[ch]++\n    }\n    for _, ch := range t {\n        cnt[ch]--\n        if cnt[ch] < 0 {\n            return false\n        }\n    }\n    return true\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 为 $s$ 的长度。\n\n* 空间复杂度：$O(S)$，其中 $S$ 为字符集大小，此处 $S=26$。"
}