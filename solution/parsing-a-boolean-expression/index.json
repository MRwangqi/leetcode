{
	"titleSlug": "parsing-a-boolean-expression",
	"slug": "golang-fen-jie-by-resara",
	"url": "https://leetcode-cn.com/problems/parsing-a-boolean-expression/solution/golang-fen-jie-by-resara/",
	"content": "### 思路：\n根据题意我们可以知道，一个运算符一定会跟随一对括号，比如 $(t)$。\n所以我们可以直接判断 `expression[0]`，得到最外层的运算符，根据运算符处理内层的表达式。\n* 如果不是运算符，肯定就是 `t` 或者 `f` 直接判断即可\n* 如果是 $!$，里面要么就是单一的字符，要么就是一个新的表达式。再调用 parseBoolExpr 解析并取反即可。\n* 如果是 $&$ 或者 $|$， 需要对里面每个表达式分别求解。通过括号匹配，拿到第一个 `(` 匹配的 `)` 里面的表达式，再通过 parseBoolExpr 计算出值。\n* 在计算 $&$ 的时候，如果有一个值为 `false`，可以提前结束计算。同理，在计算 $|$ 时， 如果有一个值为 `true`，也可以提前结束计算。\n\n完整代码见下：\n\n```Go\nfunc parseBoolExpr(expression string) bool {\n\tstart, end := 2, len(expression)-1\n\tswitch expression[0] {\n\tcase '!':\n\t\treturn Not(expression[start:end])\n\tcase '&':\n\t\treturn AndOr(expression[start:end], true)\n\tcase '|':\n\t\treturn AndOr(expression[start:end], false)\n\tdefault:\n\t\treturn expression == \"t\"\n\t}\n}\n\n// flag &: true |: false\nfunc AndOr(exp string, flag bool) bool {\n\tpre, idx := 0, 0\n\tfor i := 0; i < len(exp); i++ {\n\t\tif exp[i] == '(' {\n\t\t\tif pre == 0 {\n\t\t\t\tidx = i\n\t\t\t}\n\t\t\tpre++\n\t\t} else if exp[i] == ')' {\n\t\t\tpre--\n\t\t\tif pre == 0 {\n\t\t\t\tt := parseBoolExpr(exp[idx-1 : i+1])\n\t\t\t\tif !t && flag {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tif t && !flag {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n            if pre <= 0 {\n\t\t\t\tif exp[i] == 'f' && flag {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tif exp[i] == 't' && !flag {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag\n}\n\nfunc Not(exp string) bool {\n\tif len(exp) == 1 {\n\t\treturn !(exp == \"t\")\n\t}\n\treturn !parseBoolExpr(exp)\n}\n```"
}