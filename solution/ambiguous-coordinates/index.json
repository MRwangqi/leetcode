{
	"titleSlug": "ambiguous-coordinates",
	"slug": "mo-hu-zuo-biao-by-leetcode",
	"url": "https://leetcode-cn.com/problems/ambiguous-coordinates/solution/mo-hu-zuo-biao-by-leetcode/",
	"content": "#### 枚举：\n\n我们首先把这个二维坐标分成两部分，前一部分表示 `x` 坐标，后一部分表示 `y` 坐标。例如当给出的二维坐标为 `(1234)` 时，我们可以把它分成 `1, 234`，`12, 34` 和 `123, 4` 三种情况。随后对于每一部分，我们再考虑是否可以添加小数点以及在哪里添加小数点。例如，对于 `123`，合法的坐标有 `1.23`，`12.3` 和 `123`。\n\n在处理每一部分时，我们需要将出现多余 `0` 的不合法的坐标去除。如果我们不添加小数点，那么这个坐标不能有前导 `0`；如果我们在某个位置添加小数点，那么整数部分不能有前导 `0`，小数部分的末尾也不能有 `0`。\n\n```Java [sol1]\nclass Solution { //aw\n    public List<String> ambiguousCoordinates(String S) {\n        List<String> ans = new ArrayList();\n        for (int i = 2; i < S.length()-1; ++i)\n            for (String left: make(S, 1, i))\n                for (String right: make(S, i, S.length()-1))\n                    ans.add(\"(\" + left + \", \" + right + \")\");\n        return ans;\n    }\n\n    public List<String> make(String S, int i, int j) {\n        // Make on S.substring(i, j)\n        List<String> ans = new ArrayList();\n        for (int d = 1; d <= j-i; ++d) {\n            String left = S.substring(i, i+d);\n            String right = S.substring(i+d, j);\n            if ((!left.startsWith(\"0\") || left.equals(\"0\"))\n                    && !right.endsWith(\"0\"))\n                ans.add(left + (d < j-i ? \".\" : \"\") + right);\n        }\n        return ans;\n    }\n}\n\n```\n\n```Python [sol1]\nclass Solution(object):\n    def ambiguousCoordinates(self, S):\n        def make(frag):\n            N = len(frag)\n            for d in xrange(1, N+1):\n                left = frag[:d]\n                right = frag[d:]\n                if ((not left.startswith('0') or left == '0')\n                        and (not right.endswith('0'))):\n                    yield left + ('.' if d != N else '') + right\n\n        S = S[1:-1]\n        return [\"({}, {})\".format(*cand)\n                for i in xrange(1, len(S))\n                for cand in itertools.product(make(S[:i]), make(S[i:]))]\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^3)$，其中 $N$ 是字符串 `S` 的长度。\n\n* 空间复杂度：$O(N^3)$，用来存储所有合法的情况。"
}