{
	"titleSlug": "set-matrix-zeroes",
	"slug": "ju-zhen-zhi-ling-by-leetcode-solution-9ll7",
	"url": "https://leetcode-cn.com/problems/set-matrix-zeroes/solution/ju-zhen-zhi-ling-by-leetcode-solution-9ll7/",
	"content": "#### 方法一：使用标记数组\n\n**思路和算法**\n\n我们可以用两个标记数组分别记录每一行和每一列是否有零出现。\n\n具体地，我们首先遍历该数组一次，如果某个元素为 $0$，那么就将该元素所在的行和列所对应标记数组的位置置为 $\\text{true}$。最后我们再次遍历该数组，用标记数组更新原数组即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<int> row(m), col(n);\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (!matrix[i][j]) {\n                    row[i] = col[j] = true;\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (row[i] || col[j]) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public void setZeroes(int[][] matrix) {\n        int m = matrix.length, n = matrix[0].length;\n        boolean[] row = new boolean[m];\n        boolean[] col = new boolean[n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (matrix[i][j] == 0) {\n                    row[i] = col[j] = true;\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (row[i] || col[j]) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public void SetZeroes(int[][] matrix) {\n        int m = matrix.Length, n = matrix[0].Length;\n        bool[] row = new bool[m];\n        bool[] col = new bool[n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (matrix[i][j] == 0) {\n                    row[i] = col[j] = true;\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (row[i] || col[j]) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar setZeroes = function(matrix) {\n    const m = matrix.length, n = matrix[0].length;\n    const row = new Array(m).fill(false);\n    const col = new Array(n).fill(false);\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (matrix[i][j] === 0) {\n                row[i] = col[j] = true;\n            }\n        }\n    }\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (row[i] || col[j]) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        m, n = len(matrix), len(matrix[0])\n        row, col = [False] * m, [False] * n\n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    row[i] = col[j] = True\n        \n        for i in range(m):\n            for j in range(n):\n                if row[i] or col[j]:\n                    matrix[i][j] = 0\n```\n\n```go [sol1-Golang]\nfunc setZeroes(matrix [][]int) {\n    row := make([]bool, len(matrix))\n    col := make([]bool, len(matrix[0]))\n    for i, r := range matrix {\n        for j, v := range r {\n            if v == 0 {\n                row[i] = true\n                col[j] = true\n            }\n        }\n    }\n    for i, r := range matrix {\n        for j := range r {\n            if row[i] || col[j] {\n                r[j] = 0\n            }\n        }\n    }\n}\n```\n\n```C [sol1-C]\nvoid setZeroes(int** matrix, int matrixSize, int* matrixColSize) {\n    int m = matrixSize;\n    int n = matrixColSize[0];\n    int row[m], col[n];\n    memset(row, 0, sizeof(row));\n    memset(col, 0, sizeof(col));\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (!matrix[i][j]) {\n                row[i] = col[j] = true;\n            }\n        }\n    }\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            if (row[i] || col[j]) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 是矩阵的行数，$n$ 是矩阵的列数。我们至多只需要遍历该矩阵两次。\n\n- 空间复杂度：$O(m+n)$，其中 $m$ 是矩阵的行数，$n$ 是矩阵的列数。我们需要分别记录每一行或每一列是否有零出现。\n\n#### 方法二：使用两个标记变量\n\n**思路和算法**\n\n我们可以用矩阵的第一行和第一列代替方法一中的两个标记数组，以达到 $O(1)$ 的额外空间。但这样会导致原数组的第一行和第一列被修改，无法记录它们是否原本包含 $0$。因此我们需要额外使用两个标记变量分别记录第一行和第一列是否原本包含 $0$。\n\n在实际代码中，我们首先预处理出两个标记变量，接着使用其他行与列去处理第一行与第一列，然后反过来使用第一行与第一列去更新其他行与列，最后使用两个标记变量更新第一行与第一列即可。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        int flag_col0 = false, flag_row0 = false;\n        for (int i = 0; i < m; i++) {\n            if (!matrix[i][0]) {\n                flag_col0 = true;\n            }\n        }\n        for (int j = 0; j < n; j++) {\n            if (!matrix[0][j]) {\n                flag_row0 = true;\n            }\n        }\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (!matrix[i][j]) {\n                    matrix[i][0] = matrix[0][j] = 0;\n                }\n            }\n        }\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (!matrix[i][0] || !matrix[0][j]) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n        if (flag_col0) {\n            for (int i = 0; i < m; i++) {\n                matrix[i][0] = 0;\n            }\n        }\n        if (flag_row0) {\n            for (int j = 0; j < n; j++) {\n                matrix[0][j] = 0;\n            }\n        }\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public void setZeroes(int[][] matrix) {\n        int m = matrix.length, n = matrix[0].length;\n        boolean flagCol0 = false, flagRow0 = false;\n        for (int i = 0; i < m; i++) {\n            if (matrix[i][0] == 0) {\n                flagCol0 = true;\n            }\n        }\n        for (int j = 0; j < n; j++) {\n            if (matrix[0][j] == 0) {\n                flagRow0 = true;\n            }\n        }\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][j] == 0) {\n                    matrix[i][0] = matrix[0][j] = 0;\n                }\n            }\n        }\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][0] == 0 || matrix[0][j] == 0) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n        if (flagCol0) {\n            for (int i = 0; i < m; i++) {\n                matrix[i][0] = 0;\n            }\n        }\n        if (flagRow0) {\n            for (int j = 0; j < n; j++) {\n                matrix[0][j] = 0;\n            }\n        }\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public void SetZeroes(int[][] matrix) {\n        int m = matrix.Length, n = matrix[0].Length;\n        bool flagCol0 = false, flagRow0 = false;\n        for (int i = 0; i < m; i++) {\n            if (matrix[i][0] == 0) {\n                flagCol0 = true;\n            }\n        }\n        for (int j = 0; j < n; j++) {\n            if (matrix[0][j] == 0) {\n                flagRow0 = true;\n            }\n        }\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][j] == 0) {\n                    matrix[i][0] = matrix[0][j] = 0;\n                }\n            }\n        }\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][0] == 0 || matrix[0][j] == 0) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n        if (flagCol0) {\n            for (int i = 0; i < m; i++) {\n                matrix[i][0] = 0;\n            }\n        }\n        if (flagRow0) {\n            for (int j = 0; j < n; j++) {\n                matrix[0][j] = 0;\n            }\n        }\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar setZeroes = function(matrix) {\n    const m = matrix.length, n = matrix[0].length;\n    let flagCol0 = false, flagRow0 = false;\n    for (let i = 0; i < m; i++) {\n        if (matrix[i][0] === 0) {\n            flagCol0 = true;\n        }\n    }\n    for (let j = 0; j < n; j++) {\n        if (matrix[0][j] === 0) {\n            flagRow0 = true;\n        }\n    }\n    for (let i = 1; i < m; i++) {\n        for (let j = 1; j < n; j++) {\n            if (matrix[i][j] === 0) {\n                matrix[i][0] = matrix[0][j] = 0;\n            }\n        }\n    }\n    for (let i = 1; i < m; i++) {\n        for (let j = 1; j < n; j++) {\n            if (matrix[i][0] === 0 || matrix[0][j] === 0) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n    if (flagCol0) {\n        for (let i = 0; i < m; i++) {\n            matrix[i][0] = 0;\n        }\n    }\n    if (flagRow0) {\n        for (let j = 0; j < n; j++) {\n            matrix[0][j] = 0;\n        }\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        m, n = len(matrix), len(matrix[0])\n        flag_col0 = any(matrix[i][0] == 0 for i in range(m))\n        flag_row0 = any(matrix[0][j] == 0 for j in range(n))\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = matrix[0][j] = 0\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if flag_col0:\n            for i in range(m):\n                matrix[i][0] = 0\n        \n        if flag_row0:\n            for j in range(n):\n                matrix[0][j] = 0\n```\n\n```go [sol2-Golang]\nfunc setZeroes(matrix [][]int) {\n    n, m := len(matrix), len(matrix[0])\n    row0, col0 := false, false\n    for _, v := range matrix[0] {\n        if v == 0 {\n            row0 = true\n            break\n        }\n    }\n    for _, r := range matrix {\n        if r[0] == 0 {\n            col0 = true\n            break\n        }\n    }\n    for i := 1; i < n; i++ {\n        for j := 1; j < m; j++ {\n            if matrix[i][j] == 0 {\n                matrix[i][0] = 0\n                matrix[0][j] = 0\n            }\n        }\n    }\n    for i := 1; i < n; i++ {\n        for j := 1; j < m; j++ {\n            if matrix[i][0] == 0 || matrix[0][j] == 0 {\n                matrix[i][j] = 0\n            }\n        }\n    }\n    if row0 {\n        for j := 0; j < m; j++ {\n            matrix[0][j] = 0\n        }\n    }\n    if col0 {\n        for _, r := range matrix {\n            r[0] = 0\n        }\n    }\n}\n```\n\n```C [sol2-C]\nvoid setZeroes(int** matrix, int matrixSize, int* matrixColSize) {\n    int m = matrixSize;\n    int n = matrixColSize[0];\n    int flag_col0 = false, flag_row0 = false;\n    for (int i = 0; i < m; i++) {\n        if (!matrix[i][0]) {\n            flag_col0 = true;\n        }\n    }\n    for (int j = 0; j < n; j++) {\n        if (!matrix[0][j]) {\n            flag_row0 = true;\n        }\n    }\n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            if (!matrix[i][j]) {\n                matrix[i][0] = matrix[0][j] = 0;\n            }\n        }\n    }\n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            if (!matrix[i][0] || !matrix[0][j]) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n    if (flag_col0) {\n        for (int i = 0; i < m; i++) {\n            matrix[i][0] = 0;\n        }\n    }\n    if (flag_row0) {\n        for (int j = 0; j < n; j++) {\n            matrix[0][j] = 0;\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 是矩阵的行数，$n$ 是矩阵的列数。我们至多只需要遍历该矩阵两次。\n\n- 空间复杂度：$O(1)$。我们只需要常数空间存储若干变量。\n\n#### 方法三：使用一个标记变量\n\n**思路和算法**\n\n我们可以对方法二进一步优化，只使用一个标记变量记录第一列是否原本存在 $0$。这样，第一列的第一个元素即可以标记第一行是否出现 $0$。但为了防止每一列的第一个元素被提前更新，我们需要从最后一行开始，倒序地处理矩阵元素。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        int flag_col0 = false;\n        for (int i = 0; i < m; i++) {\n            if (!matrix[i][0]) {\n                flag_col0 = true;\n            }\n            for (int j = 1; j < n; j++) {\n                if (!matrix[i][j]) {\n                    matrix[i][0] = matrix[0][j] = 0;\n                }\n            }\n        }\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = 1; j < n; j++) {\n                if (!matrix[i][0] || !matrix[0][j]) {\n                    matrix[i][j] = 0;\n                }\n            }\n            if (flag_col0) {\n                matrix[i][0] = 0;\n            }\n        }\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public void setZeroes(int[][] matrix) {\n        int m = matrix.length, n = matrix[0].length;\n        boolean flagCol0 = false;\n        for (int i = 0; i < m; i++) {\n            if (matrix[i][0] == 0) {\n                flagCol0 = true;\n            }\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][j] == 0) {\n                    matrix[i][0] = matrix[0][j] = 0;\n                }\n            }\n        }\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][0] == 0 || matrix[0][j] == 0) {\n                    matrix[i][j] = 0;\n                }\n            }\n            if (flagCol0) {\n                matrix[i][0] = 0;\n            }\n        }\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public void SetZeroes(int[][] matrix) {\n        int m = matrix.Length, n = matrix[0].Length;\n        bool flagCol0 = false;\n        for (int i = 0; i < m; i++) {\n            if (matrix[i][0] == 0) {\n                flagCol0 = true;\n            }\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][j] == 0) {\n                    matrix[i][0] = matrix[0][j] = 0;\n                }\n            }\n        }\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][0] == 0 || matrix[0][j] == 0) {\n                    matrix[i][j] = 0;\n                }\n            }\n            if (flagCol0) {\n                matrix[i][0] = 0;\n            }\n        }\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar setZeroes = function(matrix) {\n    const m = matrix.length, n = matrix[0].length;\n    let flagCol0 = false;\n    for (let i = 0; i < m; i++) {\n        if (matrix[i][0] === 0) {\n            flagCol0 = true;\n        }\n        for (let j = 1; j < n; j++) {\n            if (matrix[i][j] === 0) {\n                matrix[i][0] = matrix[0][j] = 0;\n            }\n        }\n    }\n    for (let i = m - 1; i >= 0; i--) {\n        for (let j = 1; j < n; j++) {\n            if (matrix[i][0] === 0 || matrix[0][j] === 0) {\n                matrix[i][j] = 0;\n            }\n        }\n        if (flagCol0) {\n            matrix[i][0] = 0;\n        }\n    }\n};\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def setZeroes(self, matrix: List[List[int]]) -> None:\n        m, n = len(matrix), len(matrix[0])\n        flag_col0 = False\n        \n        for i in range(m):\n            if matrix[i][0] == 0:\n                flag_col0 = True\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = matrix[0][j] = 0\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n            if flag_col0:\n                matrix[i][0] = 0\n```\n\n```go [sol3-Golang]\nfunc setZeroes(matrix [][]int) {\n    n, m := len(matrix), len(matrix[0])\n    col0 := false\n    for _, r := range matrix {\n        if r[0] == 0 {\n            col0 = true\n        }\n        for j := 1; j < m; j++ {\n            if r[j] == 0 {\n                r[0] = 0\n                matrix[0][j] = 0\n            }\n        }\n    }\n    for i := n - 1; i >= 0; i-- {\n        for j := 1; j < m; j++ {\n            if matrix[i][0] == 0 || matrix[0][j] == 0 {\n                matrix[i][j] = 0\n            }\n        }\n        if col0 {\n            matrix[i][0] = 0\n        }\n    }\n}\n```\n\n```C [sol3-C]\nvoid setZeroes(int** matrix, int matrixSize, int* matrixColSize) {\n    int m = matrixSize;\n    int n = matrixColSize[0];\n    int flag_col0 = false;\n    for (int i = 0; i < m; i++) {\n        if (!matrix[i][0]) {\n            flag_col0 = true;\n        }\n        for (int j = 1; j < n; j++) {\n            if (!matrix[i][j]) {\n                matrix[i][0] = matrix[0][j] = 0;\n            }\n        }\n    }\n    for (int i = m - 1; i >= 0; i--) {\n        for (int j = 1; j < n; j++) {\n            if (!matrix[i][0] || !matrix[0][j]) {\n                matrix[i][j] = 0;\n            }\n        }\n        if (flag_col0) {\n            matrix[i][0] = 0;\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 是矩阵的行数，$n$ 是矩阵的列数。我们至多只需要遍历该矩阵两次。\n\n- 空间复杂度：$O(1)$。我们只需要常数空间存储若干变量。"
}