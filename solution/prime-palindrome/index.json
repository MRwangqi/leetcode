{
	"titleSlug": "prime-palindrome",
	"slug": "hui-wen-su-shu-by-leetcode",
	"url": "https://leetcode-cn.com/problems/prime-palindrome/solution/hui-wen-su-shu-by-leetcode/",
	"content": "#### 方法一： 遍历回文串\n\n**思路**\n\n假设有一个回文串 $X$，下一个回文串是什么？\n\n每个 $d$ 长度的回文串都有一个 *回文根*，回文根为前 $k = \\frac{d+1}{2}$ 个数字。下一个回文串一定是由下一个回文根组成的。 \n\n举个例子，如果 $123$ 是 $12321$ 的回文根，那么下一个回文串 $12421$ 的回文根就是 $124$。\n\n需要注意一个回文根可能对应两个回文串，例如 $123321$，$12321$ 的回文根就都是 $123$。\n\n**算法**\n\n对于每个 *回文根*，找对应的两个回文串（一个奇数长度，一个偶数长度）。对于 $k$ 长度的回文根，会产生长度为 $2*k - 1$ 和 $2*k - 1$ 的回文串。\n\n当检查回文串的时候，需要先检查小的 $2k - 1$ 长度的，这里直接把数字变成字符串来检查是否对称。\n\n至于检查素数，这里用的是常见的 $O(\\sqrt{N})$ 复杂度的算法来检查是不是素数，即检查小于 $\\sqrt{N}$ 的数中有没有能整除 $N$ 的。\n\n```Java [solution1-Java]\nclass Solution {\n    public int primePalindrome(int N) {\n        for (int L = 1; L <= 5; ++L) {\n            //Check for odd-length palindromes\n            for (int root = (int)Math.pow(10, L - 1); root < (int)Math.pow(10, L); ++root) {\n                StringBuilder sb = new StringBuilder(Integer.toString(root));\n                for (int k = L-2; k >= 0; --k)\n                    sb.append(sb.charAt(k));\n                int x = Integer.valueOf(sb.toString());\n                if (x >= N && isPrime(x))\n                    return x;\n                    //If we didn't check for even-length palindromes:\n                    //return N <= 11 ? min(x, 11) : x\n            }\n\n            //Check for even-length palindromes\n            for (int root = (int)Math.pow(10, L - 1); root < (int)Math.pow(10, L); ++root) {\n                StringBuilder sb = new StringBuilder(Integer.toString(root));\n                for (int k = L-1; k >= 0; --k)\n                    sb.append(sb.charAt(k));\n                int x = Integer.valueOf(sb.toString());\n                if (x >= N && isPrime(x))\n                    return x;\n            }\n        }\n\n        throw null;\n    }\n\n    public boolean isPrime(int N) {\n        if (N < 2) return false;\n        int R = (int) Math.sqrt(N);\n        for (int d = 2; d <= R; ++d)\n            if (N % d == 0) return false;\n        return true;\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def primePalindrome(self, N):\n        def is_prime(n):\n            return n > 1 and all(n%d for d in xrange(2, int(n**.5) + 1))\n\n        for length in xrange(1, 6):\n            #Check for odd-length palindromes\n            for root in xrange(10**(length - 1), 10**length):\n                s = str(root)\n                x = int(s + s[-2::-1]) #eg. s = '123' to x = int('12321')\n                if x >= N and is_prime(x):\n                    return x\n                    #If we didn't check for even-length palindromes:\n                    #return min(x, 11) if N <= 11 else x\n\n            #Check for even-length palindromes\n            for root in xrange(10**(length - 1), 10**length):\n                s = str(root)\n                x = int(s + s[-1::-1]) #eg. s = '123' to x = int('123321')\n                if x >= N and is_prime(x):\n                    return x\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(N)$，其中大于最大 `N` 的素数为 `100030001`，这决定了时间复杂度的上限。\n\n* 空间复杂度： $O(\\log N)$。\n\n#### 方法二： 数学法\n\n**算法**\n\n遍历所有数字，检查是不是回文串。如果是，检查是不是素数，如果当前数字长度为 8，可以跳过检查，因为不存在 8 长度的素数。\n\n```Java []\nclass Solution {\n    public int primePalindrome(int N) {\n        while (true) {\n            if (N == reverse(N) && isPrime(N))\n                return N;\n            N++;\n            if (10_000_000 < N && N < 100_000_000)\n                N = 100_000_000;\n        }\n    }\n\n    public boolean isPrime(int N) {\n        if (N < 2) return false;\n        int R = (int) Math.sqrt(N);\n        for (int d = 2; d <= R; ++d)\n            if (N % d == 0) return false;\n        return true;\n    }\n\n    public int reverse(int N) {\n        int ans = 0;\n        while (N > 0) {\n            ans = 10 * ans + (N % 10);\n            N /= 10;\n        }\n        return ans;\n    }\n}\n\n```\n\n```Python []\nclass Solution(object):\n    def primePalindrome(self, N):\n        def is_prime(n):\n            return n > 1 and all(n % d for d in xrange(2, int(n**.5) + 1))\n\n        def reverse(x):\n            ans = 0\n            while x:\n                ans = 10 * ans + x % 10\n                x /= 10\n            return ans\n\n        while True:\n            if N == reverse(N) and is_prime(N):\n                return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8\n```\n\n\n**复杂度分析**\n\n* 时间复杂度： $O(N)$。\n\n* 空间复杂度： $O(1)$。"
}