{
	"titleSlug": "lowest-common-ancestor-of-a-binary-tree",
	"slug": "er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetc-2",
	"url": "https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetc-2/",
	"content": "### 📺 视频题解  \n![236. 二叉树的最近公共祖先.mp4](6258a388-b9c6-486c-9d92-c09571d373a9)\n\n### 📖 文字题解\n#### 方法一：递归\n\n**思路和算法**\n\n我们递归遍历整棵二叉树，定义 $f_x$ 表示 $x$ 节点的子树中是否包含 $p$ 节点或 $q$ 节点，如果包含为 `true`，否则为 `false`。那么符合条件的最近公共祖先 $x$ 一定满足如下条件：\n\n$$\n(f_{\\text{lson}}\\ \\&\\&\\ f_{\\text{rson}})\\ ||\\ ((x\\ =\\ p\\ ||\\ x\\ =\\ q)\\ \\&\\&\\ (f_{\\text{lson}}\\ ||\\ f_{\\text{rson}}))\n$$\n\n其中 $\\text{lson}$ 和 $\\text{rson}$ 分别代表 $x$ 节点的左孩子和右孩子。初看可能会感觉条件判断有点复杂，我们来一条条看，$f_{\\text{lson}}\\ \\&\\&\\ f_{\\text{rson}}$ 说明左子树和右子树均包含 $p$ 节点或 $q$ 节点，如果左子树包含的是 $p$ 节点，那么右子树只能包含 $q$ 节点，反之亦然，因为 $p$ 节点和 $q$ 节点都是不同且唯一的节点，因此如果满足这个判断条件即可说明 $x$ 就是我们要找的最近公共祖先。再来看第二条判断条件，这个判断条件即是考虑了 $x$ 恰好是 $p$ 节点或 $q$ 节点且它的左子树或右子树有一个包含了另一个节点的情况，因此如果满足这个判断条件亦可说明 $x$ 就是我们要找的最近公共祖先。\n\n你可能会疑惑这样找出来的公共祖先深度是否是最大的。其实是最大的，因为我们是自底向上从叶子节点开始更新的，所以在所有满足条件的公共祖先中一定是深度最大的祖先先被访问到，且由于 $f_x$ 本身的定义很巧妙，在找到最近公共祖先 $x$ 以后，$f_x$ 按定义被设置为 `true` ，即假定了这个子树中只有一个 $p$ 节点或 $q$ 节点，因此其他公共祖先不会再被判断为符合条件。\n\n下图展示了一个示例，搜索树中两个节点 `9` 和 `11` 的最近公共祖先。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/236/1.PNG),![fig2](https://assets.leetcode-cn.com/solution-static/236/2.PNG),![fig3](https://assets.leetcode-cn.com/solution-static/236/3.PNG),![fig4](https://assets.leetcode-cn.com/solution-static/236/4.PNG),![fig5](https://assets.leetcode-cn.com/solution-static/236/5.PNG),![fig6](https://assets.leetcode-cn.com/solution-static/236/6.PNG),![fig7](https://assets.leetcode-cn.com/solution-static/236/7.PNG),![fig8](https://assets.leetcode-cn.com/solution-static/236/8.PNG),![fig9](https://assets.leetcode-cn.com/solution-static/236/9.PNG),![fig10](https://assets.leetcode-cn.com/solution-static/236/10.PNG),![fig11](https://assets.leetcode-cn.com/solution-static/236/11.PNG)>\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    TreeNode* ans;\n    bool dfs(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if (root == nullptr) return false;\n        bool lson = dfs(root->left, p, q);\n        bool rson = dfs(root->right, p, q);\n        if ((lson && rson) || ((root->val == p->val || root->val == q->val) && (lson || rson))) {\n            ans = root;\n        } \n        return lson || rson || (root->val == p->val || root->val == q->val);\n    }\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        dfs(root, p, q);\n        return ans;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar lowestCommonAncestor = function(root, p, q) {\n    let ans;\n    const dfs = (root, p, q) => {\n        if (root === null) return false;\n        const lson = dfs(root.left, p, q);\n        const rson = dfs(root.right, p, q);\n        if ((lson && rson) || ((root.val === p.val || root.val === q.val) && (lson || rson))) {\n            ans = root;\n        } \n        return lson || rson || (root.val === p.val || root.val === q.val);\n    }\n    dfs(root, p, q);\n    return ans;\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n\n    private TreeNode ans;\n\n    public Solution() {\n        this.ans = null;\n    }\n\n    private boolean dfs(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null) return false;\n        boolean lson = dfs(root.left, p, q);\n        boolean rson = dfs(root.right, p, q);\n        if ((lson && rson) || ((root.val == p.val || root.val == q.val) && (lson || rson))) {\n            ans = root;\n        } \n        return lson || rson || (root.val == p.val || root.val == q.val);\n    }\n\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        this.dfs(root, p, q);\n        return this.ans;\n    }\n}\n```\n\n```golang [sol1-Golang]\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n    if root == nil {\n        return nil\n    }\n    if root.Val == p.Val || root.Val == q.Val {\n        return root\n    }\n    left := lowestCommonAncestor(root.Left, p, q)\n    right := lowestCommonAncestor(root.Right, p, q)\n    if left != nil && right != nil {\n        return root\n    }\n    if left == nil {\n        return right\n    }\n    return left\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是二叉树的节点数。二叉树的所有节点有且只会被访问一次，因此时间复杂度为 $O(N)$。\n\n* 空间复杂度：$O(N)$ ，其中 $N$ 是二叉树的节点数。递归调用的栈深度取决于二叉树的高度，二叉树最坏情况下为一条链，此时高度为 $N$，因此空间复杂度为 $O(N)$。\n\n#### 方法二：存储父节点\n\n**思路**\n\n我们可以用哈希表存储所有节点的父节点，然后我们就可以利用节点的父节点信息从 `p` 结点开始不断往上跳，并记录已经访问过的节点，再从 `q` 节点开始不断往上跳，如果碰到已经访问过的节点，那么这个节点就是我们要找的最近公共祖先。\n\n**算法**\n\n1. 从根节点开始遍历整棵二叉树，用哈希表记录每个节点的父节点指针。\n2. 从 `p` 节点开始不断往它的祖先移动，并用数据结构记录已经访问过的祖先节点。\n3. 同样，我们再从 `q` 节点开始不断往它的祖先移动，如果有祖先已经被访问过，即意味着这是 `p` 和 `q` 的深度最深的公共祖先，即 LCA 节点。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    unordered_map<int, TreeNode*> fa;\n    unordered_map<int, bool> vis;\n    void dfs(TreeNode* root){\n        if (root->left != nullptr) {\n            fa[root->left->val] = root;\n            dfs(root->left);\n        }\n        if (root->right != nullptr) {\n            fa[root->right->val] = root;\n            dfs(root->right);\n        }\n    }\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        fa[root->val] = nullptr;\n        dfs(root);\n        while (p != nullptr) {\n            vis[p->val] = true;\n            p = fa[p->val];\n        }\n        while (q != nullptr) {\n            if (vis[q->val]) return q;\n            q = fa[q->val];\n        }\n        return nullptr;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    Map<Integer, TreeNode> parent = new HashMap<Integer, TreeNode>();\n    Set<Integer> visited = new HashSet<Integer>();\n\n    public void dfs(TreeNode root) {\n        if (root.left != null) {\n            parent.put(root.left.val, root);\n            dfs(root.left);\n        }\n        if (root.right != null) {\n            parent.put(root.right.val, root);\n            dfs(root.right);\n        }\n    }\n\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        dfs(root);\n        while (p != null) {\n            visited.add(p.val);\n            p = parent.get(p.val);\n        }\n        while (q != null) {\n            if (visited.contains(q.val)) {\n                return q;\n            }\n            q = parent.get(q.val);\n        }\n        return null;\n    }\n}\n```\n\n```golang [sol2-Golang]\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\n    parent := map[int]*TreeNode{}\n    visited := map[int]bool{}\n\n    var dfs func(*TreeNode)\n    dfs = func(r *TreeNode) {\n        if r == nil {\n            return\n        }\n        if r.Left != nil {\n            parent[r.Left.Val] = r\n            dfs(r.Left)\n        }\n        if r.Right != nil {\n            parent[r.Right.Val] = r\n            dfs(r.Right)\n        }\n    }\n    dfs(root)\n\n    for p != nil {\n        visited[p.Val] = true\n        p = parent[p.Val]\n    }\n    for q != nil {\n        if visited[q.Val] {\n            return q\n        }\n        q = parent[q.Val]\n    }\n\n    return nil\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是二叉树的节点数。二叉树的所有节点有且只会被访问一次，从 `p` 和 `q` 节点往上跳经过的祖先节点个数不会超过 $N$，因此总的时间复杂度为 $O(N)$。\n\n* 空间复杂度：$O(N)$ ，其中 $N$ 是二叉树的节点数。递归调用的栈深度取决于二叉树的高度，二叉树最坏情况下为一条链，此时高度为 $N$，因此空间复杂度为 $O(N)$，哈希表存储每个节点的父节点也需要 $O(N)$ 的空间复杂度，因此最后总的空间复杂度为 $O(N)$。"
}