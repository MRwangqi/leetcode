{
	"titleSlug": "compare-version-numbers",
	"slug": "bi-jiao-ban-ben-hao-by-leetcode-solution-k6wi",
	"url": "https://leetcode-cn.com/problems/compare-version-numbers/solution/bi-jiao-ban-ben-hao-by-leetcode-solution-k6wi/",
	"content": "#### 方法一：字符串分割\n\n我们可以将版本号按照点号分割成修订号，然后从左到右比较两个版本号的相同下标的修订号。在比较修订号时，需要将字符串转换成整数进行比较。注意根据题目要求，如果版本号不存在某个下标处的修订号，则该修订号视为 $0$。\n\n```Python [sol1-Python3]\nclass Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        for v1, v2 in zip_longest(version1.split('.'), version2.split('.'), fillvalue=0):\n            x, y = int(v1), int(v2)\n            if x != y:\n                return 1 if x > y else -1\n        return 0\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int compareVersion(String version1, String version2) {\n        String[] v1 = version1.split(\"\\\\.\");\n        String[] v2 = version2.split(\"\\\\.\");\n        for (int i = 0; i < v1.length || i < v2.length; ++i) {\n            int x = 0, y = 0;\n            if (i < v1.length) {\n                x = Integer.parseInt(v1[i]);\n            }\n            if (i < v2.length) {\n                y = Integer.parseInt(v2[i]);\n            }\n            if (x > y) {\n                return 1;\n            }\n            if (x < y) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int CompareVersion(string version1, string version2) {\n        string[] v1 = version1.Split('.');\n        string[] v2 = version2.Split('.');\n        for (int i = 0; i < v1.Length || i < v2.Length; ++i) {\n            int x = 0, y = 0;\n            if (i < v1.Length) {\n                x = int.Parse(v1[i]);\n            }\n            if (i < v2.Length) {\n                y = int.Parse(v2[i]);\n            }\n            if (x > y) {\n                return 1;\n            }\n            if (x < y) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc compareVersion(version1, version2 string) int {\n    v1 := strings.Split(version1, \".\")\n    v2 := strings.Split(version2, \".\")\n    for i := 0; i < len(v1) || i < len(v2); i++ {\n        x, y := 0, 0\n        if i < len(v1) {\n            x, _ = strconv.Atoi(v1[i])\n        }\n        if i < len(v2) {\n            y, _ = strconv.Atoi(v2[i])\n        }\n        if x > y {\n            return 1\n        }\n        if x < y {\n            return -1\n        }\n    }\n    return 0\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar compareVersion = function(version1, version2) {\n    const v1 = version1.split('.');\n    const v2 = version2.split('.');\n    for (let i = 0; i < v1.length || i < v2.length; ++i) {\n        let x = 0, y = 0;\n        if (i < v1.length) {\n            x = parseInt(v1[i]);\n        }\n        if (i < v2.length) {\n            y = parseInt(v2[i]);\n        }\n        if (x > y) {\n            return 1;\n        }\n        if (x < y) {\n            return -1;\n        }\n    }\n    return 0;\n};\n```\n\n- 时间复杂度：$O(n+m)$（或 $O(\\max(n,m))$，这是等价的），其中 $n$ 是字符串 $\\textit{version1}$ 的长度，$m$ 是字符串 $\\textit{version2}$ 的长度。\n\n- 空间复杂度：$O(n+m)$，我们需要 $O(n+m)$ 的空间存储分割后的修订号列表。\n\n#### 方法二：双指针\n\n方法一需要存储分割后的修订号，为了优化空间复杂度，我们可以在分割版本号的同时解析出修订号进行比较。\n\n```Python [sol2-Python3]\nclass Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        n, m = len(version1), len(version2)\n        i, j = 0, 0\n        while i < n or j < m:\n            x = 0\n            while i < n and version1[i] != '.':\n                x = x * 10 + ord(version1[i]) - ord('0')\n                i += 1\n            i += 1  # 跳过点号\n            y = 0\n            while j < m and version2[j] != '.':\n                y = y * 10 + ord(version2[j]) - ord('0')\n                j += 1\n            j += 1  # 跳过点号\n            if x != y:\n                return 1 if x > y else -1\n        return 0\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int compareVersion(string version1, string version2) {\n        int n = version1.length(), m = version2.length();\n        int i = 0, j = 0;\n        while (i < n || j < m) {\n            int x = 0;\n            for (; i < n && version1[i] != '.'; ++i) {\n                x = x * 10 + version1[i] - '0';\n            }\n            ++i; // 跳过点号\n            int y = 0;\n            for (; j < m && version2[j] != '.'; ++j) {\n                y = y * 10 + version2[j] - '0';\n            }\n            ++j; // 跳过点号\n            if (x != y) {\n                return x > y ? 1 : -1;\n            }\n        }\n        return 0;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int compareVersion(String version1, String version2) {\n        int n = version1.length(), m = version2.length();\n        int i = 0, j = 0;\n        while (i < n || j < m) {\n            int x = 0;\n            for (; i < n && version1.charAt(i) != '.'; ++i) {\n                x = x * 10 + version1.charAt(i) - '0';\n            }\n            ++i; // 跳过点号\n            int y = 0;\n            for (; j < m && version2.charAt(j) != '.'; ++j) {\n                y = y * 10 + version2.charAt(j) - '0';\n            }\n            ++j; // 跳过点号\n            if (x != y) {\n                return x > y ? 1 : -1;\n            }\n        }\n        return 0;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int CompareVersion(string version1, string version2) {\n        int n = version1.Length, m = version2.Length;\n        int i = 0, j = 0;\n        while (i < n || j < m) {\n            int x = 0;\n            for (; i < n && version1[i] != '.'; ++i) {\n                x = x * 10 + version1[i] - '0';\n            }\n            ++i; // 跳过点号\n            int y = 0;\n            for (; j < m && version2[j] != '.'; ++j) {\n                y = y * 10 + version2[j] - '0';\n            }\n            ++j; // 跳过点号\n            if (x != y) {\n                return x > y ? 1 : -1;\n            }\n        }\n        return 0;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc compareVersion(version1, version2 string) int {\n    n, m := len(version1), len(version2)\n    i, j := 0, 0\n    for i < n || j < m {\n        x := 0\n        for ; i < n && version1[i] != '.'; i++ {\n            x = x*10 + int(version1[i]-'0')\n        }\n        i++ // 跳过点号\n        y := 0\n        for ; j < m && version2[j] != '.'; j++ {\n            y = y*10 + int(version2[j]-'0')\n        }\n        j++ // 跳过点号\n        if x > y {\n            return 1\n        }\n        if x < y {\n            return -1\n        }\n    }\n    return 0\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar compareVersion = function(version1, version2) {\n    const n = version1.length, m = version2.length;\n    let i = 0, j = 0;\n    while (i < n || j < m) {\n        let x = 0;\n        for (; i < n && version1[i] !== '.'; ++i) {\n            x = x * 10 + version1[i].charCodeAt() - '0'.charCodeAt();\n        }\n        ++i; // 跳过点号\n        let y = 0;\n        for (; j < m && version2.charAt(j) !== '.'; ++j) {\n            y = y * 10 + version2[j].charCodeAt() - '0'.charCodeAt();\n        }\n        ++j; // 跳过点号\n        if (x !== y) {\n            return x > y ? 1 : -1;\n        }\n    }\n    return 0;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m)$，其中 $n$ 是字符串 $\\textit{version1}$ 的长度，$m$ 是字符串 $\\textit{version2}$ 的长度。\n\n- 空间复杂度：$O(1)$，我们只需要常数的空间保存若干变量。"
}