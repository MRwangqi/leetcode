{
	"titleSlug": "xoh6Oh",
	"slug": "zheng-shu-chu-fa-by-leetcode-solution-3572",
	"url": "https://leetcode-cn.com/problems/xoh6Oh/solution/zheng-shu-chu-fa-by-leetcode-solution-3572/",
	"content": "#### 前言\n\n由于题目规定了「只能存储 $32$ 位整数」，本题解的正文部分和代码中都不会使用任何 $64$ 位整数。**诚然，使用 $64$ 位整数可以极大地方便我们的编码，但这是违反题目规则的。**\n\n如果除法结果溢出，那么我们需要返回 $2^{31} - 1$ 作为答案。因此在编码之前，我们可以首先对于溢出或者容易出错的边界情况进行讨论：\n\n- 当被除数为 $32$ 位有符号整数的最小值 $-2^{31}$ 时：\n\n    - 如果除数为 $1$，那么我们可以直接返回答案 $-2^{31}$；\n    - 如果除数为 $-1$，那么答案为 $2^{31}$，产生了溢出。此时我们需要返回 $2^{31} - 1$。\n\n- 当除数为 $32$ 位有符号整数的最小值 $-2^{31}$ 时：\n\n    - 如果被除数同样为 $-2^{31}$，那么我们可以直接返回答案 $1$；\n    - 对于其余的情况，我们返回答案 $0$。\n\n- 当被除数为 $0$ 时，我们可以直接返回答案 $0$。\n\n对于一般的情况，根据除数和被除数的符号，我们需要考虑 $4$ 种不同的可能性。因此，为了方便编码，我们可以将被除数或者除数取相反数，使得它们符号相同。\n\n如果我们将被除数和除数都变为正数，那么可能会导致溢出。例如当被除数为 $-2^{31}$ 时，它的相反数 $2^{31}$ 产生了溢出。因此，我们可以考虑将被除数和除数都变为负数，这样就不会有溢出的问题，在编码时只需要考虑 $1$ 种情况了。\n\n如果我们将被除数和除数的其中（恰好）一个变为了正数，那么在返回答案之前，我们需要对答案也取相反数。\n\n#### 方法一：二分查找\n\n**思路与算法**\n\n根据「前言」部分的讨论，我们记被除数为 $X$，除数为 $Y$，并且 $X$ 和 $Y$ 都是负数。我们需要找出 $X/Y$ 的结果 $Z$。$Z$ 一定是正数或 $0$。\n\n根据除法以及余数的定义，我们可以将其改成乘法的等价形式，即：\n\n$$\nZ \\times Y \\geq X > (Z+1) \\times Y\n$$\n\n因此，我们可以使用二分查找的方法得到 $Z$，即找出**最大**的 $Z$ 使得 $Z \\times Y \\geq X$ 成立。\n\n由于我们不能使用乘法运算符，因此我们需要使用「快速乘」算法得到 $Z \\times Y$ 的值。「快速乘」算法与「快速幂」类似，前者通过加法实现乘法，后者通过乘法实现幂运算。「快速幂」算法可以参考[「50. Pow(x, n)」的官方题解](https://leetcode-cn.com/problems/powx-n/solution/powx-n-by-leetcode-solution/)，「快速乘」算法只需要在「快速幂」算法的基础上，将乘法运算改成加法运算即可。\n\n**细节**\n\n由于我们只能使用 $32$ 位整数，因此二分查找中会有很多细节。\n\n首先，二分查找的下界为 $1$，上界为 $2^{31} - 1$。唯一可能出现的答案为 $2^{31}$ 的情况已经被我们在「前言」部分进行了特殊处理，因此答案的最大值为 $2^{31} - 1$。如果二分查找失败，那么答案一定为 $0$。\n\n在实现「快速乘」时，我们需要使用加法运算，然而较大的 $Z$ 也会导致加法运算溢出。例如我们要判断 $A + B$ 是否小于 $C$ 时（其中 $A, B, C$ 均为负数），$A + B$ 可能会产生溢出，因此我们必须将判断改为 $A < C - B$ 是否成立。由于任意两个负数的差一定在 $[-2^{31} + 1, 2^{31} - 1]$ 范围内，这样就不会产生溢出。\n\n读者可以阅读下面的代码和注释，理解如何避免使用乘法和除法，以及正确处理溢出问题。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int divide(int a, int b) {\n        // 考虑被除数为最小值的情况\n        if (a == INT_MIN) {\n            if (b == 1) {\n                return INT_MIN;\n            }\n            if (b == -1) {\n                return INT_MAX;\n            }\n        }\n        // 考虑除数为最小值的情况\n        if (b == INT_MIN) {\n            return a == INT_MIN ? 1 : 0;\n        }\n        // 考虑被除数为 0 的情况\n        if (a == 0) {\n            return 0;\n        }\n        \n        // 一般情况，使用二分查找\n        // 将所有的正数取相反数，这样就只需要考虑一种情况\n        bool rev = false;\n        if (a > 0) {\n            a = -a;\n            rev = !rev;\n        }\n        if (b > 0) {\n            b = -b;\n            rev = !rev;\n        }\n\n        // 快速乘\n        auto quickAdd = [](int y, int z, int x) {\n            // x 和 y 是负数，z 是正数\n            // 需要判断 z * y >= x 是否成立\n            int result = 0, add = y;\n            while (z) {\n                if (z & 1) {\n                    // 需要保证 result + add >= x\n                    if (result < x - add) {\n                        return false;\n                    }\n                    result += add;\n                }\n                if (z != 1) {\n                    // 需要保证 add + add >= x\n                    if (add < x - add) {\n                        return false;\n                    }\n                    add += add;\n                }\n                // 不能使用除法\n                z >>= 1;\n            }\n            return true;\n        };\n        \n        int left = 1, right = INT_MAX, ans = 0;\n        while (left <= right) {\n            // 注意溢出，并且不能使用除法\n            int mid = left + ((right - left) >> 1);\n            bool check = quickAdd(b, mid, a);\n            if (check) {\n                ans = mid;\n                // 注意溢出\n                if (mid == INT_MAX) {\n                    break;\n                }\n                left = mid + 1;\n            }\n            else {\n                right = mid - 1;\n            }\n        }\n\n        return rev ? -ans : ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int divide(int a, int b) {\n        // 考虑被除数为最小值的情况\n        if (a == Integer.MIN_VALUE) {\n            if (b == 1) {\n                return Integer.MIN_VALUE;\n            }\n            if (b == -1) {\n                return Integer.MAX_VALUE;\n            }\n        }\n        // 考虑除数为最小值的情况\n        if (b == Integer.MIN_VALUE) {\n            return a == Integer.MIN_VALUE ? 1 : 0;\n        }\n        // 考虑被除数为 0 的情况\n        if (a == 0) {\n            return 0;\n        }\n        \n        // 一般情况，使用二分查找\n        // 将所有的正数取相反数，这样就只需要考虑一种情况\n        boolean rev = false;\n        if (a > 0) {\n            a = -a;\n            rev = !rev;\n        }\n        if (b > 0) {\n            b = -b;\n            rev = !rev;\n        }\n        \n        int left = 1, right = Integer.MAX_VALUE, ans = 0;\n        while (left <= right) {\n            // 注意溢出，并且不能使用除法\n            int mid = left + ((right - left) >> 1);\n            boolean check = quickAdd(b, mid, a);\n            if (check) {\n                ans = mid;\n                // 注意溢出\n                if (mid == Integer.MAX_VALUE) {\n                    break;\n                }\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return rev ? -ans : ans;\n    }\n\n    // 快速乘\n    public boolean quickAdd(int y, int z, int x) {\n        // x 和 y 是负数，z 是正数\n        // 需要判断 z * y >= x 是否成立\n        int result = 0, add = y;\n        while (z != 0) {\n            if ((z & 1) != 0) {\n                // 需要保证 result + add >= x\n                if (result < x - add) {\n                    return false;\n                }\n                result += add;\n            }\n            if (z != 1) {\n                // 需要保证 add + add >= x\n                if (add < x - add) {\n                    return false;\n                }\n                add += add;\n            }\n            // 不能使用除法\n            z >>= 1;\n        }\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int Divide(int a, int b) {\n        // 考虑被除数为最小值的情况\n        if (a == int.MinValue) {\n            if (b == 1) {\n                return int.MinValue;\n            }\n            if (b == -1) {\n                return int.MaxValue;\n            }\n        }\n        // 考虑除数为最小值的情况\n        if (b == int.MinValue) {\n            return a == int.MinValue ? 1 : 0;\n        }\n        // 考虑被除数为 0 的情况\n        if (a == 0) {\n            return 0;\n        }\n        \n        // 一般情况，使用二分查找\n        // 将所有的正数取相反数，这样就只需要考虑一种情况\n        bool rev = false;\n        if (a > 0) {\n            a = -a;\n            rev = !rev;\n        }\n        if (b > 0) {\n            b = -b;\n            rev = !rev;\n        }\n        \n        int left = 1, right = int.MaxValue, ans = 0;\n        while (left <= right) {\n            // 注意溢出，并且不能使用除法\n            int mid = left + ((right - left) >> 1);\n            bool check = quickAdd(b, mid, a);\n            if (check) {\n                ans = mid;\n                // 注意溢出\n                if (mid == int.MaxValue) {\n                    break;\n                }\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return rev ? -ans : ans;\n    }\n\n    // 快速乘\n    public bool quickAdd(int y, int z, int x) {\n        // x 和 y 是负数，z 是正数\n        // 需要判断 z * y >= x 是否成立\n        int result = 0, add = y;\n        while (z != 0) {\n            if ((z & 1) != 0) {\n                // 需要保证 result + add >= x\n                if (result < x - add) {\n                    return false;\n                }\n                result += add;\n            }\n            if (z != 1) {\n                // 需要保证 add + add >= x\n                if (add < x - add) {\n                    return false;\n                }\n                add += add;\n            }\n            // 不能使用除法\n            z >>= 1;\n        }\n        return true;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def divide(self, a: int, b: int) -> int:\n        INT_MIN, INT_MAX = -2**31, 2**31 - 1\n\n        # 考虑被除数为最小值的情况\n        if a == INT_MIN:\n            if b == 1:\n                return INT_MIN\n            if b == -1:\n                return INT_MAX\n        \n        # 考虑除数为最小值的情况\n        if b == INT_MIN:\n            return 1 if a == INT_MIN else 0\n        # 考虑被除数为 0 的情况\n        if a == 0:\n            return 0\n        \n        # 一般情况，使用二分查找\n        # 将所有的正数取相反数，这样就只需要考虑一种情况\n        rev = False\n        if a > 0:\n            a = -a\n            rev = not rev\n        if b > 0:\n            b = -b\n            rev = not rev\n\n        # 快速乘\n        def quickAdd(y: int, z: int, x: int) -> bool:\n            # x 和 y 是负数，z 是正数\n            # 需要判断 z * y >= x 是否成立\n            result, add = 0, y\n            while z > 0:\n                if (z & 1) == 1:\n                    # 需要保证 result + add >= x\n                    if result < x - add:\n                        return False\n                    result += add\n                if z != 1:\n                    # 需要保证 add + add >= x\n                    if add < x - add:\n                        return False\n                    add += add\n                # 不能使用除法\n                z >>= 1\n            return True\n        \n        left, right, ans = 1, INT_MAX, 0\n        while left <= right:\n            # 注意溢出，并且不能使用除法\n            mid = left + ((right - left) >> 1)\n            check = quickAdd(b, mid, a)\n            if check:\n                ans = mid\n                # 注意溢出\n                if mid == INT_MAX:\n                    break\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        return -ans if rev else ans\n```\n\n```go [sol1-Golang]\n// 快速乘\n// x 和 y 是负数，z 是正数\n// 判断 z * y >= x 是否成立\nfunc quickAdd(y, z, x int) bool {\n    for result, add := 0, y; z > 0; z >>= 1 { // 不能使用除法\n        if z&1 > 0 {\n            // 需要保证 result + add >= x\n            if result < x-add {\n                return false\n            }\n            result += add\n        }\n        if z != 1 {\n            // 需要保证 add + add >= x\n            if add < x-add {\n                return false\n            }\n            add += add\n        }\n    }\n    return true\n}\n\nfunc divide(a, b int) int {\n    if a == math.MinInt32 { // 考虑被除数为最小值的情况\n        if b == 1 {\n            return math.MinInt32\n        }\n        if b == -1 {\n            return math.MaxInt32\n        }\n    }\n    if b == math.MinInt32 { // 考虑除数为最小值的情况\n        if a == math.MinInt32 {\n            return 1\n        }\n        return 0\n    }\n    if a == 0 { // 考虑被除数为 0 的情况\n        return 0\n    }\n\n    // 一般情况，使用二分查找\n    // 将所有的正数取相反数，这样就只需要考虑一种情况\n    rev := false\n    if a > 0 {\n        a = -a\n        rev = !rev\n    }\n    if b > 0 {\n        b = -b\n        rev = !rev\n    }\n\n    ans := 0\n    left, right := 1, math.MaxInt32\n    for left <= right {\n        mid := left + (right-left)>>1 // 注意溢出，并且不能使用除法\n        if quickAdd(b, mid, a) {\n            ans = mid\n            if mid == math.MaxInt32 { // 注意溢出\n                break\n            }\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    if rev {\n        return -ans\n    }\n    return ans\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar divide = function(a, b) {\n    const MAX_VALUE = 2 ** 31 - 1, MIN_VALUE = -(2 ** 31);\n    // 考虑被除数为最小值的情况\n    if (a === MIN_VALUE) {\n        if (b === 1) {\n            return MIN_VALUE;\n        }\n        if (b === -1) {\n            return MAX_VALUE;\n        }\n    }\n    // 考虑除数为最小值的情况\n    if (b === MIN_VALUE) {\n        return a === MIN_VALUE ? 1 : 0;\n    }\n    // 考虑被除数为 0 的情况\n    if (a === 0) {\n        return 0;\n    }\n    \n    // 一般情况，使用二分查找\n    // 将所有的正数取相反数，这样就只需要考虑一种情况\n    let rev = false;\n    if (a > 0) {\n        a = -a;\n        rev = !rev;\n    }\n    if (b > 0) {\n        b = -b;\n        rev = !rev;\n    }\n    \n    let left = 1, right = MAX_VALUE, ans = 0;\n    while (left <= right) {\n        // 注意溢出，并且不能使用除法\n        const mid = left + ((right - left) >> 1);\n        const check = quickAdd(b, mid, a);\n        if (check) {\n            ans = mid;\n            // 注意溢出\n            if (mid === MAX_VALUE) {\n                break;\n            }\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return rev ? -ans : ans;\n}\n\n// 快速乘\nconst quickAdd = (y, z, x) => {\n    // x 和 y 是负数，z 是正数\n    // 需要判断 z * y >= x 是否成立\n    let result = 0, add = y;\n    while (z !== 0) {\n        if ((z & 1) !== 0) {\n            // 需要保证 result + add >= x\n            if (result < x - add) {\n                return false;\n            }\n            result += add;\n        }\n        if (z !== 1) {\n            // 需要保证 add + add >= x\n            if (add < x - add) {\n                return false;\n            }\n            add += add;\n        }\n        // 不能使用除法\n        z >>= 1;\n    }\n    return true;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log^2 C)$，其中 $C$ 表示 $32$ 位整数的范围。二分查找的次数为 $O(\\log C)$，其中的每一步我们都需要 $O(\\log C)$ 使用「快速乘」算法判断 $Z \\times Y \\geq X$ 是否成立，因此总时间复杂度为 $O(\\log^2 C)$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：类二分查找\n\n**前言**\n\n常规意义下的二分查找为：给定区间 $[l, r]$，取该区间的中点 $\\textit{mid} = \\lfloor \\dfrac{l+r}{2} \\rfloor$，根据 $\\textit{mid}$ 处是否满足某一条件，来决定移动左边界 $l$ 还是右边界 $r$。\n\n我们也可以考虑另一种二分查找的方法：\n\n- 记 $k$ 为满足 $2^k \\leq r-l < 2^{k+1}$ 的 $k$ 值。\n\n- 二分查找会进行 $k+1$ 次。在第 $i ~ (1 \\leq i \\leq k+1)$ 次二分查找时，设区间为 $[l_i, r_i]$，我们取 $\\textit{mid} = l_i + 2^{k+1-i}$：\n\n- 如果 $\\textit{mid}$ 不在 $[l_i, r_i]$ 的范围内，那么我们直接忽略这次二分查找；\n\n- 如果 $\\textit{mid}$ 在 $[l_i, r_i]$ 的范围内，并且 $\\textit{mid}$ 处满足某一条件，我们就将 $l_i$ 更新为 $\\textit{mid}$，否则同样忽略这次二分查找。\n\n最终 $l_i$ 即为二分查找的结果。这样做的正确性在于：\n\n> 设在常规意义下的二分查找的答案为 $\\textit{ans}$，记 $\\delta$ 为 $\\textit{ans}$ 与左边界的差值 $\\textit{ans} - l$。$\\delta$ 不会大于 $r-l$，并且 $\\delta$ 一定可以用 $2^k, 2^{k-1}, 2^{k-2}, \\cdots, 2^1, 2^0$ 中的若干个元素之和表示（考虑 $\\delta$ 的二进制表示的意义即可）。因此上述二分查找是正确的。\n\n**思路与算法**\n\n基于上述的二分查找的方法，我们可以设计出如下的算法：\n\n- 我们首先不断地将 $Y$ 乘以 $2$（通过加法运算实现），并将这些结果放入数组中，其中数组的第 $i$ 项就等于 $Y \\times 2^i$。这一过程直到 $Y$ 的两倍严格小于 $X$ 为止。\n\n- 我们对数组进行逆序遍历。当遍历到第 $i$ 项时，如果其大于等于 $X$，我们就将答案增加 $2^i$，并且将 $X$ 中减去这一项的值。\n\n本质上，上述的逆序遍历就模拟了二分查找的过程。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int divide(int a, int b) {\n        // 考虑被除数为最小值的情况\n        if (a == INT_MIN) {\n            if (b == 1) {\n                return INT_MIN;\n            }\n            if (b == -1) {\n                return INT_MAX;\n            }\n        }\n        // 考虑除数为最小值的情况\n        if (b == INT_MIN) {\n            return a == INT_MIN ? 1 : 0;\n        }\n        // 考虑被除数为 0 的情况\n        if (a == 0) {\n            return 0;\n        }\n        \n        // 一般情况，使用类二分查找\n        // 将所有的正数取相反数，这样就只需要考虑一种情况\n        bool rev = false;\n        if (a > 0) {\n            a = -a;\n            rev = !rev;\n        }\n        if (b > 0) {\n            b = -b;\n            rev = !rev;\n        }\n\n        vector<int> candidates = {b};\n        // 注意溢出\n        while (candidates.back() >= a - candidates.back()) {\n            candidates.push_back(candidates.back() + candidates.back());\n        }\n        int ans = 0;\n        for (int i = candidates.size() - 1; i >= 0; --i) {\n            if (candidates[i] >= a) {\n                ans += (1 << i);\n                a -= candidates[i];\n            }\n        }\n\n        return rev ? -ans : ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int divide(int a, int b) {\n        // 考虑被除数为最小值的情况\n        if (a == Integer.MIN_VALUE) {\n            if (b == 1) {\n                return Integer.MIN_VALUE;\n            }\n            if (b == -1) {\n                return Integer.MAX_VALUE;\n            }\n        }\n        // 考虑除数为最小值的情况\n        if (b == Integer.MIN_VALUE) {\n            return a == Integer.MIN_VALUE ? 1 : 0;\n        }\n        // 考虑被除数为 0 的情况\n        if (a == 0) {\n            return 0;\n        }\n        \n        // 一般情况，使用类二分查找\n        // 将所有的正数取相反数，这样就只需要考虑一种情况\n        boolean rev = false;\n        if (a > 0) {\n            a = -a;\n            rev = !rev;\n        }\n        if (b > 0) {\n            b = -b;\n            rev = !rev;\n        }\n\n        List<Integer> candidates = new ArrayList<Integer>();\n        candidates.add(b);\n        int index = 0;\n        // 注意溢出\n        while (candidates.get(index) >= a - candidates.get(index)) {\n            candidates.add(candidates.get(index) + candidates.get(index));\n            ++index;\n        }\n        int ans = 0;\n        for (int i = candidates.size() - 1; i >= 0; --i) {\n            if (candidates.get(i) >= a) {\n                ans += 1 << i;\n                a -= candidates.get(i);\n            }\n        }\n\n        return rev ? -ans : ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int Divide(int a, int b) {\n        // 考虑被除数为最小值的情况\n        if (a == int.MinValue) {\n            if (b == 1) {\n                return int.MinValue;\n            }\n            if (b == -1) {\n                return int.MaxValue;\n            }\n        }\n        // 考虑除数为最小值的情况\n        if (b == int.MinValue) {\n            return a == int.MinValue ? 1 : 0;\n        }\n        // 考虑被除数为 0 的情况\n        if (a == 0) {\n            return 0;\n        }\n        \n        // 一般情况，使用类二分查找\n        // 将所有的正数取相反数，这样就只需要考虑一种情况\n        bool rev = false;\n        if (a > 0) {\n            a = -a;\n            rev = !rev;\n        }\n        if (b > 0) {\n            b = -b;\n            rev = !rev;\n        }\n\n        IList<int> candidates = new List<int>();\n        candidates.Add(b);\n        int index = 0;\n        // 注意溢出\n        while (candidates[index] >= a - candidates[index]) {\n            candidates.Add(candidates[index] + candidates[index]);\n            ++index;\n        }\n        int ans = 0;\n        for (int i = candidates.Count - 1; i >= 0; --i) {\n            if (candidates[i] >= a) {\n                ans += 1 << i;\n                a -= candidates[i];\n            }\n        }\n\n        return rev ? -ans : ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def divide(self, a: int, b: int) -> int:\n        INT_MIN, INT_MAX = -2**31, 2**31 - 1\n\n        # 考虑被除数为最小值的情况\n        if a == INT_MIN:\n            if b == 1:\n                return INT_MIN\n            if b == -1:\n                return INT_MAX\n        \n        # 考虑除数为最小值的情况\n        if b == INT_MIN:\n            return 1 if a == INT_MIN else 0\n        # 考虑被除数为 0 的情况\n        if a == 0:\n            return 0\n        \n        # 一般情况，使用类二分查找\n        # 将所有的正数取相反数，这样就只需要考虑一种情况\n        rev = False\n        if a > 0:\n            a = -a\n            rev = not rev\n        if b > 0:\n            b = -b\n            rev = not rev\n        \n        candidates = [b]\n        # 注意溢出\n        while candidates[-1] >= a - candidates[-1]:\n            candidates.append(candidates[-1] + candidates[-1])\n        \n        ans = 0\n        for i in range(len(candidates) - 1, -1, -1):\n            if candidates[i] >= a:\n                ans += (1 << i)\n                a -= candidates[i]\n\n        return -ans if rev else ans\n```\n\n```go [sol2-Golang]\nfunc divide(a, b int) int {\n    if a == math.MinInt32 { // 考虑被除数为最小值的情况\n        if b == 1 {\n            return math.MinInt32\n        }\n        if b == -1 {\n            return math.MaxInt32\n        }\n    }\n    if b == math.MinInt32 { // 考虑除数为最小值的情况\n        if a == math.MinInt32 {\n            return 1\n        }\n        return 0\n    }\n    if a == 0 { // 考虑被除数为 0 的情况\n        return 0\n    }\n\n    // 一般情况，使用二分查找\n    // 将所有的正数取相反数，这样就只需要考虑一种情况\n    rev := false\n    if a > 0 {\n        a = -a\n        rev = !rev\n    }\n    if b > 0 {\n        b = -b\n        rev = !rev\n    }\n\n    candidates := []int{b}\n    for y := b; y >= a-y; { // 注意溢出\n        y += y\n        candidates = append(candidates, y)\n    }\n\n    ans := 0\n    for i := len(candidates) - 1; i >= 0; i-- {\n        if candidates[i] >= a {\n            ans |= 1 << i\n            a -= candidates[i]\n        }\n    }\n    if rev {\n        return -ans\n    }\n    return ans\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar divide = function(a, b) {\n    const MAX_VALUE = 2 ** 31 - 1, MIN_VALUE = -(2 ** 31);\n    // 考虑被除数为最小值的情况\n    if (a === MIN_VALUE) {\n        if (b === 1) {\n            return MIN_VALUE;\n        }\n        if (b === -1) {\n            return MAX_VALUE;\n        }\n    }\n    // 考虑除数为最小值的情况\n    if (b === MIN_VALUE) {\n        return a === MIN_VALUE ? 1 : 0;\n    }\n    // 考虑被除数为 0 的情况\n    if (a === 0) {\n        return 0;\n    }\n    \n    // 一般情况，使用类二分查找\n    // 将所有的正数取相反数，这样就只需要考虑一种情况\n    let rev = false;\n    if (a > 0) {\n        a = -a;\n        rev = !rev;\n    }\n    if (b > 0) {\n        b = -b;\n        rev = !rev;\n    }\n\n    const candidates = [b];\n    let index = 0;\n    // 注意溢出\n    while (candidates[index] >= a - candidates[index]) {\n        candidates.push(candidates[index] + candidates[index]);\n        ++index;\n    }\n    let ans = 0;\n    for (let i = candidates.length - 1; i >= 0; --i) {\n        if (candidates[i] >= a) {\n            ans += 1 << i;\n            a -= candidates[i];\n        }\n    }\n\n    return rev ? -ans : ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log C)$，即为二分查找需要的时间。方法二时间复杂度优于方法一的原因是：方法一的每一步二分查找都需要重新计算 $Z \\times Y$ 的值，需要 $O(\\log C)$ 的时间复杂度；而方法二的每一步的权重都是 $2$ 的幂，在二分查找开始前就都是已知的值，因此我们可以在 $O(\\log C)$ 的时间内，一次性将它们全部预处理出来。\n\n- 空间复杂度：$O(\\log C)$，即为需要存储的 $Y \\times 2^i$ 的数量。"
}