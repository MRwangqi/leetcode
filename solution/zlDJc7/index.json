{
	"titleSlug": "zlDJc7",
	"slug": "kai-mi-ma-suo-by-leetcode-solution-b964",
	"url": "https://leetcode-cn.com/problems/zlDJc7/solution/kai-mi-ma-suo-by-leetcode-solution-b964/",
	"content": "#### 方法一：广度优先搜索\n\n**思路与算法**\n\n我们可以使用广度优先搜索，找出从初始数字 $0000$ 到解锁数字 $\\textit{target}$ 的最小旋转次数。\n\n具体地，我们在一开始将 $(0000, 0)$ 加入队列，并使用该队列进行广度优先搜索。在搜索的过程中，设当前搜索到的数字为 $\\textit{status}$，旋转的次数为 $\\textit{step}$，我们可以枚举 $\\textit{status}$ 通过一次旋转得到的数字。设其中的某个数字为 $\\textit{next\\_status}$，如果其没有被搜索过，我们就将 $(\\textit{next\\_status}, \\textit{step} + 1)$ 加入队列。如果搜索到了 $\\textit{target}$，我们就返回其对应的旋转次数。\n\n为了避免搜索到死亡数字，我们可以使用哈希表存储 $\\textit{deadends}$ 中的所有元素，这样在搜索的过程中，我们可以均摊 $O(1)$ 地判断一个数字是否为死亡数字。同时，我们还需要一个哈希表存储所有搜索到的状态，避免重复搜索。\n\n如果搜索完成后，我们仍没有搜索到 $\\textit{target}$，说明我们无法解锁，返回 $-1$。\n\n**细节**\n\n本题中需要注意如下两个细节：\n\n- 如果 $\\textit{target}$ 就是初始数字 $0000$，那么直接返回答案 $0$；\n\n- 如果初始数字 $0000$ 出现在 $\\textit{deadends}$ 中，那么直接返回答案 $-1$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int openLock(vector<string>& deadends, string target) {\n        if (target == \"0000\") {\n            return 0;\n        }\n\n        unordered_set<string> dead(deadends.begin(), deadends.end());\n        if (dead.count(\"0000\")) {\n            return -1;\n        }\n\n        auto num_prev = [](char x) -> char {\n            return (x == '0' ? '9' : x - 1);\n        };\n        auto num_succ = [](char x) -> char {\n            return (x == '9' ? '0' : x + 1);\n        };\n\n        // 枚举 status 通过一次旋转得到的数字\n        auto get = [&](string& status) -> vector<string> {\n            vector<string> ret;\n            for (int i = 0; i < 4; ++i) {\n                char num = status[i];\n                status[i] = num_prev(num);\n                ret.push_back(status);\n                status[i] = num_succ(num);\n                ret.push_back(status);\n                status[i] = num;\n            }\n            return ret;\n        };\n\n        queue<pair<string, int>> q;\n        q.emplace(\"0000\", 0);\n        unordered_set<string> seen = {\"0000\"};\n\n        while (!q.empty()) {\n            auto [status, step] = q.front();\n            q.pop();\n            for (auto&& next_status: get(status)) {\n                if (!seen.count(next_status) && !dead.count(next_status)) {\n                    if (next_status == target) {\n                        return step + 1;\n                    }\n                    q.emplace(next_status, step + 1);\n                    seen.insert(move(next_status));\n                }\n            }\n        }\n\n        return -1;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int openLock(String[] deadends, String target) {\n        if (\"0000\".equals(target)) {\n            return 0;\n        }\n\n        Set<String> dead = new HashSet<String>();\n        for (String deadend : deadends) {\n            dead.add(deadend);\n        }\n        if (dead.contains(\"0000\")) {\n            return -1;\n        }\n\n        int step = 0;\n        Queue<String> queue = new LinkedList<String>();\n        queue.offer(\"0000\");\n        Set<String> seen = new HashSet<String>();\n        seen.add(\"0000\");\n\n        while (!queue.isEmpty()) {\n            ++step;\n            int size = queue.size();\n            for (int i = 0; i < size; ++i) {\n                String status = queue.poll();\n                for (String nextStatus : get(status)) {\n                    if (!seen.contains(nextStatus) && !dead.contains(nextStatus)) {\n                        if (nextStatus.equals(target)) {\n                            return step;\n                        }\n                        queue.offer(nextStatus);\n                        seen.add(nextStatus);\n                    }\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    public char numPrev(char x) {\n        return x == '0' ? '9' : (char) (x - 1);\n    }\n\n    public char numSucc(char x) {\n        return x == '9' ? '0' : (char) (x + 1);\n    }\n\n    // 枚举 status 通过一次旋转得到的数字\n    public List<String> get(String status) {\n        List<String> ret = new ArrayList<String>();\n        char[] array = status.toCharArray();\n        for (int i = 0; i < 4; ++i) {\n            char num = array[i];\n            array[i] = numPrev(num);\n            ret.add(new String(array));\n            array[i] = numSucc(num);\n            ret.add(new String(array));\n            array[i] = num;\n        }\n        return ret;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int OpenLock(string[] deadends, string target) {\n        if (\"0000\".Equals(target)) {\n            return 0;\n        }\n\n        ISet<string> dead = new HashSet<string>();\n        foreach (string deadend in deadends) {\n            dead.Add(deadend);\n        }\n        if (dead.Contains(\"0000\")) {\n            return -1;\n        }\n\n        int step = 0;\n        Queue<string> queue = new Queue<string>();\n        queue.Enqueue(\"0000\");\n        ISet<string> seen = new HashSet<string>();\n        seen.Add(\"0000\");\n\n        while (queue.Count > 0) {\n            ++step;\n            int size = queue.Count;\n            for (int i = 0; i < size; ++i) {\n                string status = queue.Dequeue();\n                foreach (string nextStatus in Get(status)) {\n                    if (!seen.Contains(nextStatus) && !dead.Contains(nextStatus)) {\n                        if (nextStatus.Equals(target)) {\n                            return step;\n                        }\n                        queue.Enqueue(nextStatus);\n                        seen.Add(nextStatus);\n                    }\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    public char NumPrev(char x) {\n        return x == '0' ? '9' : (char) (x - 1);\n    }\n\n    public char NumSucc(char x) {\n        return x == '9' ? '0' : (char) (x + 1);\n    }\n\n    // 枚举 status 通过一次旋转得到的数字\n    public IList<string> Get(string status) {\n        IList<string> ret = new List<string>();\n        char[] array = status.ToCharArray();\n        for (int i = 0; i < 4; ++i) {\n            char num = array[i];\n            array[i] = NumPrev(num);\n            ret.Add(new string(array));\n            array[i] = NumSucc(num);\n            ret.Add(new string(array));\n            array[i] = num;\n        }\n        return ret;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        if target == \"0000\":\n            return 0\n\n        dead = set(deadends)\n        if \"0000\" in dead:\n            return -1\n        \n        def num_prev(x: str) -> str:\n            return \"9\" if x == \"0\" else str(int(x) - 1)\n        \n        def num_succ(x: str) -> str:\n            return \"0\" if x == \"9\" else str(int(x) + 1)\n        \n        # 枚举 status 通过一次旋转得到的数字\n        def get(status: str) -> Generator[str, None, None]:\n            s = list(status)\n            for i in range(4):\n                num = s[i]\n                s[i] = num_prev(num)\n                yield \"\".join(s)\n                s[i] = num_succ(num)\n                yield \"\".join(s)\n                s[i] = num\n\n        q = deque([(\"0000\", 0)])\n        seen = {\"0000\"}\n        while q:\n            status, step = q.popleft()\n            for next_status in get(status):\n                if next_status not in seen and next_status not in dead:\n                    if next_status == target:\n                        return step + 1\n                    q.append((next_status, step + 1))\n                    seen.add(next_status)\n        \n        return -1\n```\n\n```JavaScript [sol1-JavaScript]\nvar openLock = function(deadends, target) {\n    if (target === '0000') {\n        return 0;\n    }\n\n    const dead = new Set(deadends);\n    if (dead.has(\"0000\")) {\n        return -1;\n    }\n\n    let step = 0;\n    const queue = [];\n    queue.push(\"0000\");\n    const seen = new Set();\n    seen.add(\"0000\");\n\n    while (queue.length) {\n        ++step;\n        const size = queue.length;\n        for (let i = 0; i < size; ++i) {\n            const status = queue.shift();\n            for (const nextStatus of get(status)) {\n                if (!seen.has(nextStatus) && !dead.has(nextStatus)) {\n                    if (nextStatus === target) {\n                        return step;\n                    }\n                    queue.push(nextStatus);\n                    seen.add(nextStatus);\n                }\n            }\n        }\n    }\n\n    return -1;\n};\n\nconst numPrev = (x) => {\n    return x === '0' ? '9' : (parseInt(x) - 1) + '';\n}\n\nconst numSucc = (x) => {\n    return x === '9' ? '0' : (parseInt(x) + 1) + '';\n}\n\n// 枚举 status 通过一次旋转得到的数字\nconst get = (status) => {\n    const ret = [];\n    const array = Array.from(status);\n    for (let i = 0; i < 4; ++i) {\n        const num = array[i];\n        array[i] = numPrev(num);\n        ret.push(array.join(''));\n        array[i] = numSucc(num);\n        ret.push(array.join(''));\n        array[i] = num;\n    }\n\n    return ret;\n}\n```\n\n```go [sol1-Golang]\nfunc openLock(deadends []string, target string) int {\n    const start = \"0000\"\n    if target == start {\n        return 0\n    }\n\n    dead := map[string]bool{}\n    for _, s := range deadends {\n        dead[s] = true\n    }\n    if dead[start] {\n        return -1\n    }\n\n    // 枚举 status 通过一次旋转得到的数字\n    get := func(status string) (ret []string) {\n        s := []byte(status)\n        for i, b := range s {\n            s[i] = b - 1\n            if s[i] < '0' {\n                s[i] = '9'\n            }\n            ret = append(ret, string(s))\n            s[i] = b + 1\n            if s[i] > '9' {\n                s[i] = '0'\n            }\n            ret = append(ret, string(s))\n            s[i] = b\n        }\n        return\n    }\n\n    type pair struct {\n        status string\n        step   int\n    }\n    q := []pair{{start, 0}}\n    seen := map[string]bool{start: true}\n    for len(q) > 0 {\n        p := q[0]\n        q = q[1:]\n        for _, nxt := range get(p.status) {\n            if !seen[nxt] && !dead[nxt] {\n                if nxt == target {\n                    return p.step + 1\n                }\n                seen[nxt] = true\n                q = append(q, pair{nxt, p.step + 1})\n            }\n        }\n    }\n    return -1\n}\n```\n\n```C [sol1-C]\nstruct HashTable {\n    char str[5];\n    UT_hash_handle hh;\n};\n\nstruct Node {\n    char str[5];\n    int val;\n};\n\nchar num_prev(char x) {\n    return (x == '0' ? '9' : x - 1);\n}\n\nchar num_succ(char x) {\n    return (x == '9' ? '0' : x + 1);\n}\n\n// 枚举 status 通过一次旋转得到的数字\nchar** getNextStatus(char* status, int* retSize) {\n    char** ret = malloc(sizeof(char*) * 8);\n    *retSize = 0;\n    for (int i = 0; i < 4; ++i) {\n        char num = status[i];\n        status[i] = num_prev(num);\n        ret[(*retSize)] = malloc(sizeof(char) * 5);\n        strcpy(ret[(*retSize)++], status);\n        status[i] = num_succ(num);\n        ret[(*retSize)] = malloc(sizeof(char) * 5);\n        strcpy(ret[(*retSize)++], status);\n        status[i] = num;\n    }\n    return ret;\n}\n\nint openLock(char** deadends, int deadendsSize, char* target) {\n    char str_0[5] = \"0000\";\n    if (strcmp(target, str_0) == 0) {\n        return 0;\n    }\n    struct HashTable* dead = NULL;\n    struct HashTable* tmp;\n    for (int i = 0; i < deadendsSize; i++) {\n        HASH_FIND(hh, dead, deadends[i], sizeof(char) * 5, tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct HashTable));\n            strcpy(tmp->str, deadends[i]);\n            HASH_ADD(hh, dead, str, sizeof(char) * 5, tmp);\n        }\n    }\n    HASH_FIND(hh, dead, str_0, sizeof(char) * 5, tmp);\n\n    if (tmp != NULL) {\n        return -1;\n    }\n\n    struct Node q[10001];\n    int left = 0, right = 0;\n    strcpy(q[right].str, str_0);\n    q[right++].val = 0;\n\n    struct HashTable* seen = NULL;\n    tmp = malloc(sizeof(struct HashTable));\n    strcpy(tmp->str, str_0);\n    HASH_ADD(hh, seen, str, sizeof(char) * 5, tmp);\n\n    while (left < right) {\n        char* status = q[left].str;\n        int step = q[left++].val;\n        int nextStatusSize;\n        char** nextStatus = getNextStatus(status, &nextStatusSize);\n        for (int i = 0; i < nextStatusSize; i++) {\n            struct HashTable *tmp1, *tmp2;\n            HASH_FIND(hh, dead, nextStatus[i], sizeof(char) * 5, tmp1);\n            HASH_FIND(hh, seen, nextStatus[i], sizeof(char) * 5, tmp2);\n            if (tmp1 == NULL && tmp2 == NULL) {\n                if (strcmp(nextStatus[i], target) == 0) {\n                    return step + 1;\n                }\n                strcpy(q[right].str, nextStatus[i]);\n                q[right++].val = step + 1;\n                tmp = malloc(sizeof(struct HashTable));\n                strcpy(tmp->str, nextStatus[i]);\n                HASH_ADD(hh, seen, str, sizeof(char) * 5, tmp);\n            }\n        }\n    }\n\n    return -1;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(b^d \\cdot d^2 + md)$，其中 $b$ 是数字的进制，$d$ 是拨轮数字的位数，$m$ 是数组 $\\textit{deadends}$ 的长度，在本题中 $b=10$，$d=4$。\n\n    - 拨轮数字的可能性一共有 $b^d$ 种，这也是我们可以搜索到的状态数上限。对于每一个拨轮数字，我们需要 $O(d)$ 的时间枚举旋转的数位，同时需要 $O(d)$ 的时间生成旋转后的数字（即加入队列），因此广度优先搜索的总时间复杂度为 $O(b^d \\cdot d^2)$。\n\n    - 此外，在搜索前我们需要将 $\\textit{deadends}$ 中的所有元素放入哈希表中，计算一个字符串哈希值需要的时间为 $O(d)$，因此需要的总时间为 $O(md)$。\n\n\n- 空间复杂度：$O(b^d \\cdot d + m)$。\n\n    - 我们最多需要在队列中存储 $O(b^d)$ 个长度为 $d$ 的字符串，空间复杂度为 $O(b^d \\cdot d)$；\n\n    - 哈希表需要 $O(m)$ 的空间。如果使用的语言存储的是元素的**拷贝**，那么需要的空间为 $O(md)$。\n\n#### 方法二：启发式搜索\n\n**概念**\n\n我们可以使用启发式搜索更快地找到最小旋转次数。这里我们可以使用 $\\text{A*}$ 算法。\n\n读者可以自行查阅资料学习关于 $\\text{A*}$ 算法的基础知识，例如 [Wikipedia - A* search algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm) 或 [oi-wiki - A*](https://oi-wiki.org/search/astar/)。它不是本题解的重点，因此这里不再赘述。读者可以阅读下面的段落检验自己的学习成果：\n\n在 $\\text{A*}$ 算法中，我们需要使用四个距离函数 $F(x), G(x), H(x), H^*(x)$，其中 $F(x), G(x), H(x)$ 是可以求出的，而 $H^*(x)$ 是无法求出的，我们需要用 $H(x)$ 近似 $H^*(x)$。设起点为 $s$，终点为 $t$，这些距离函数的意义如下：\n\n- $G(x)$ 表示从起点 $s$ 到节点 $x$ 的「实际」路径长度，注意 $G(x)$ 并不一定是最短的；\n\n- $H(x)$ 表示从节点 $x$ 到终点 $t$ 的「估计」最短路径长度，称为**启发函数**；\n\n- $H^*(x)$ 表示从节点 $x$ 到终点 $t$ 的「实际」最短路径长度，这是我们在广度优先搜索的过程中无法求出的，我们需要用 $H(x)$ 近似 $H^*(x)$；\n\n- $F(x)$ 满足 $F(x) = G(x) + H(x)$，即为从起点 $s$ 到终点 $t$ 的「估计」路径长度。我们总是挑选出最小的 $F(x)$ 对应的 $x$ 进行搜索，因此 $\\text{A*}$ 算法需要借助**优先队列**来实现。\n\n如果读者熟悉求解最短路的 $\\text{Dijkstra}$ 算法，就可以发现 $\\text{Dijkstra}$ 算法是 $\\text{A*}$ 算法在 $H(x) \\equiv 0$ 时的特殊情况。\n\n$\\text{A*}$ 算法具有两个性质：\n\n- 如果对于任意的节点 $x$，$H(x) \\leq H^*(x)$ 恒成立，即我们「估计」出的从节点 $x$ 到终点 $t$ 的最短路径长度总是不超过「实际」的最短路径长度，那么称启发函数 $H(x)$ 是可接纳的（admissible heuristic）。在这种情况下，$\\text{A*}$ 算法一定能找到最短路，但同一节点可能需要加入优先队列并搜索多次，即当我们从优先队列中取出节点 $x$ 时，$G(x)$ 并不一定等于从起点到节点 $x$ 的「实际」**最短**路径的长度；\n\n- 如果对于任意的两个节点 $x$ 和 $y$，并且 $x$ 到 $y$ 有一条长度为 $D(x, y)$ 的有向边，$H(x) - H(y) \\leq D(x, y)$ 恒成立，并且 $H(t)=0$，那么称启发函数 $H(x)$ 是一致的（consistent heuristic）。可以证明，一致的启发函数一定也是可接纳的。在这种情况下，同一节点只会被加入优先队列一次，并搜索不超过一次，即当我们从优先队列中取出节点 $x$ 时，$G(x)$ 一定等于从起点到节点 $x$ 的「实际」**最短**路径的长度。\n\n**思路与算法**\n\n我们可以设计如下的启发函数：\n\n$$\nH(\\textit{status}) = \\sum_{i=0}^3\n\\left( \\begin{aligned}\n& 将 ~\\textit{status}~ 的第 ~i~ 个数字旋转到与 ~\\textit{target}~ 的第 ~i~ 个数字一致，\\\\\n& 最少需要的次数\n\\end{aligned} \\right)\n$$\n\n即 $H(\\textit{status})$ 等于不存在死亡数字时最小的旋转次数。根据定义，对于数字 $\\textit{status}$ 和其通过一次旋转得到的数字 $\\textit{next\\_status}$，$H(\\textit{status}) - H(\\textit{next\\_status})$ 要么为 $1$（旋转的那一个数位与 $\\textit{target}$ 更近了），要么为 $-1$（旋转的那一个数位与 $\\textit{target}$ 更远了），而 $D(\\textit{status}, \\textit{next\\_status}) = 1$，因此我们设计的启发函数是一致的。\n\n我们在 $\\text{A*}$ 算法中使用该启发函数，即可得到最小的旋转次数。\n\n**代码**\n\n```C++ [sol2-C++]\nstruct AStar {\n    // 计算启发函数\n    static int getH(const string& status, const string& target) {\n        int ret = 0;\n        for (int i = 0; i < 4; ++i) {\n            int dist = abs(int(status[i]) - int(target[i]));\n            ret += min(dist, 10 - dist);\n        }\n        return ret;\n    };\n\n    AStar(const string& status, const string& target, int g): status_{status}, g_{g}, h_{getH(status, target)} {\n        f_ = g_ + h_;\n    }\n\n    bool operator< (const AStar& that) const {\n        return f_ > that.f_;\n    }\n\n    string status_;\n    int f_, g_, h_;\n};\n\nclass Solution {\npublic:\n    int openLock(vector<string>& deadends, string target) {\n        if (target == \"0000\") {\n            return 0;\n        }\n\n        unordered_set<string> dead(deadends.begin(), deadends.end());\n        if (dead.count(\"0000\")) {\n            return -1;\n        }\n\n        auto num_prev = [](char x) -> char {\n            return (x == '0' ? '9' : x - 1);\n        };\n        auto num_succ = [](char x) -> char {\n            return (x == '9' ? '0' : x + 1);\n        };\n\n        auto get = [&](string& status) -> vector<string> {\n            vector<string> ret;\n            for (int i = 0; i < 4; ++i) {\n                char num = status[i];\n                status[i] = num_prev(num);\n                ret.push_back(status);\n                status[i] = num_succ(num);\n                ret.push_back(status);\n                status[i] = num;\n            }\n            return ret;\n        };\n\n        priority_queue<AStar> q;\n        q.emplace(\"0000\", target, 0);\n        unordered_set<string> seen = {\"0000\"};\n\n        while (!q.empty()) {\n            AStar node = q.top();\n            q.pop();\n            for (auto&& next_status: get(node.status_)) {\n                if (!seen.count(next_status) && !dead.count(next_status)) {\n                    if (next_status == target) {\n                        return node.g_ + 1;\n                    }\n                    q.emplace(next_status, target, node.g_ + 1);\n                    seen.insert(move(next_status));\n                }\n            }\n        }\n\n        return -1;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int openLock(String[] deadends, String target) {\n        if (\"0000\".equals(target)) {\n            return 0;\n        }\n\n        Set<String> dead = new HashSet<String>();\n        for (String deadend : deadends) {\n            dead.add(deadend);\n        }\n        if (dead.contains(\"0000\")) {\n            return -1;\n        }\n\n        PriorityQueue<AStar> pq = new PriorityQueue<AStar>((a, b) -> a.f - b.f);\n        pq.offer(new AStar(\"0000\", target, 0));\n        Set<String> seen = new HashSet<String>();\n        seen.add(\"0000\");\n\n        while (!pq.isEmpty()) {\n            AStar node = pq.poll();\n            for (String nextStatus : get(node.status)) {\n                if (!seen.contains(nextStatus) && !dead.contains(nextStatus)) {\n                    if (nextStatus.equals(target)) {\n                        return node.g + 1;\n                    }\n                    pq.offer(new AStar(nextStatus, target, node.g + 1));\n                    seen.add(nextStatus);\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    public char numPrev(char x) {\n        return x == '0' ? '9' : (char) (x - 1);\n    }\n\n    public char numSucc(char x) {\n        return x == '9' ? '0' : (char) (x + 1);\n    }\n\n    // 枚举 status 通过一次旋转得到的数字\n    public List<String> get(String status) {\n        List<String> ret = new ArrayList<String>();\n        char[] array = status.toCharArray();\n        for (int i = 0; i < 4; ++i) {\n            char num = array[i];\n            array[i] = numPrev(num);\n            ret.add(new String(array));\n            array[i] = numSucc(num);\n            ret.add(new String(array));\n            array[i] = num;\n        }\n        return ret;\n    }\n}\n\nclass AStar {\n    String status;\n    int f, g, h;\n\n    public AStar(String status, String target, int g) {\n        this.status = status;\n        this.g = g;\n        this.h = getH(status, target);\n        this.f = this.g + this.h;\n    }\n\n    // 计算启发函数\n    public static int getH(String status, String target) {\n        int ret = 0;\n        for (int i = 0; i < 4; ++i) {\n            int dist = Math.abs(status.charAt(i) - target.charAt(i));\n            ret += Math.min(dist, 10 - dist);\n        }\n        return ret;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass AStar:\n    # 计算启发函数\n    @staticmethod\n    def getH(status: str, target: str) -> int:\n        ret = 0\n        for i in range(4):\n            dist = abs(int(status[i]) - int(target[i]))\n            ret += min(dist, 10 - dist)\n        return ret\n\n    def __init__(self, status: str, target: str, g: str) -> None:\n        self.status = status\n        self.g = g\n        self.h = AStar.getH(status, target)\n        self.f = self.g + self.h\n    \n    def __lt__(self, other: \"AStar\") -> bool:\n        return self.f < other.f\n\nclass Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        if target == \"0000\":\n            return 0\n\n        dead = set(deadends)\n        if \"0000\" in dead:\n            return -1\n        \n        def num_prev(x: str) -> str:\n            return \"9\" if x == \"0\" else str(int(x) - 1)\n        \n        def num_succ(x: str) -> str:\n            return \"0\" if x == \"9\" else str(int(x) + 1)\n        \n        def get(status: str) -> Generator[str, None, None]:\n            s = list(status)\n            for i in range(4):\n                num = s[i]\n                s[i] = num_prev(num)\n                yield \"\".join(s)\n                s[i] = num_succ(num)\n                yield \"\".join(s)\n                s[i] = num\n\n        q = [AStar(\"0000\", target, 0)]\n        seen = {\"0000\"}\n        while q:\n            node = heapq.heappop(q)\n            for next_status in get(node.status):\n                if next_status not in seen and next_status not in dead:\n                    if next_status == target:\n                        return node.g + 1\n                    heapq.heappush(q, AStar(next_status, target, node.g + 1))\n                    seen.add(next_status)\n        \n        return -1\n```\n\n```go [sol2-Golang]\ntype astar struct {\n    g, h   int\n    status string\n}\ntype hp []astar\n\nfunc (h hp) Len() int            { return len(h) }\nfunc (h hp) Less(i, j int) bool  { return h[i].g+h[i].h < h[j].g+h[j].h }\nfunc (h hp) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(v interface{}) { *h = append(*h, v.(astar)) }\nfunc (h *hp) Pop() interface{}   { a := *h; v := a[len(a)-1]; *h = a[:len(a)-1]; return v }\n\n// 计算启发函数\nfunc getH(status, target string) (ret int) {\n    for i := 0; i < 4; i++ {\n        dist := abs(int(status[i]) - int(target[i]))\n        ret += min(dist, 10-dist)\n    }\n    return\n}\n\nfunc openLock(deadends []string, target string) int {\n    const start = \"0000\"\n    if target == start {\n        return 0\n    }\n\n    dead := map[string]bool{}\n    for _, s := range deadends {\n        dead[s] = true\n    }\n    if dead[start] {\n        return -1\n    }\n\n    get := func(status string) (ret []string) {\n        s := []byte(status)\n        for i, b := range s {\n            s[i] = b - 1\n            if s[i] < '0' {\n                s[i] = '9'\n            }\n            ret = append(ret, string(s))\n            s[i] = b + 1\n            if s[i] > '9' {\n                s[i] = '0'\n            }\n            ret = append(ret, string(s))\n            s[i] = b\n        }\n        return\n    }\n\n    type pair struct {\n        status string\n        step   int\n    }\n    h := hp{{0, getH(start, target), start}}\n    seen := map[string]bool{start: true}\n    for len(h) > 0 {\n        node := heap.Pop(&h).(astar)\n        for _, nxt := range get(node.status) {\n            if !seen[nxt] && !dead[nxt] {\n                if nxt == target {\n                    return node.g + 1\n                }\n                seen[nxt] = true\n                heap.Push(&h, astar{node.g + 1, getH(nxt, target), nxt})\n            }\n        }\n    }\n    return -1\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n**复杂度分析**\n\n启发式搜索不讨论时空复杂度。"
}