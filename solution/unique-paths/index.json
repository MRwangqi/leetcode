{
	"titleSlug": "unique-paths",
	"slug": "dong-tai-gui-hua-by-powcai-2",
	"url": "https://leetcode-cn.com/problems/unique-paths/solution/dong-tai-gui-hua-by-powcai-2/",
	"content": "## 思路\n\n**思路一：排列组合**\n\n因为机器到底右下角，向下几步，向右几步都是固定的，\n\n比如，`m=3, n=2`，我们只要向下 1 步，向右 2 步就一定能到达终点。\n\n所以有 $C_{m+n-2}^{m-1}$\n\n```Python []\ndef uniquePaths(self, m: int, n: int) -> int:\n        return int(math.factorial(m+n-2)/math.factorial(m-1)/math.factorial(n-1))\n```\n\n**思路二：动态规划**\n\n我们令 `dp[i][j]` 是到达 `i, j` 最多路径\n\n动态方程：`dp[i][j] = dp[i-1][j] + dp[i][j-1]`\n\n注意，对于第一行 `dp[0][j]`，或者第一列 `dp[i][0]`，由于都是在边界，所以只能为 `1`\n\n时间复杂度：$O(m*n)$\n\n空间复杂度：$O(m * n)$\n\n\n优化：因为我们每次只需要 `dp[i-1][j],dp[i][j-1] `\n\n所以我们只要记录这两个数，直接看代码吧！\n\n## 代码\n\n思路二：\n\n```Python [1]\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        dp = [[1]*n] + [[1]+[0] * (n-1) for _ in range(m-1)]\n        #print(dp)\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[-1][-1]\n```\n\n\n\n```Java [1]\nclass Solution {\n    public int uniquePaths(int m, int n) {\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < n; i++) dp[0][i] = 1;\n        for (int i = 0; i < m; i++) dp[i][0] = 1;\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n        return dp[m - 1][n - 1];  \n    }\n}\n```\n\n\n\n优化1：空间复杂度 $O(2n)$\n\n```Python [2]\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        pre = [1] * n\n        cur = [1] * n\n        for i in range(1, m):\n            for j in range(1, n):\n                cur[j] = pre[j] + cur[j-1]\n            pre = cur[:]\n        return pre[-1]\n```\n\n\n\n```Java [2]\nclass Solution {\n    public int uniquePaths(int m, int n) {\n        int[] pre = new int[n];\n        int[] cur = new int[n];\n        Arrays.fill(pre, 1);\n        Arrays.fill(cur,1);\n        for (int i = 1; i < m;i++){\n            for (int j = 1; j < n; j++){\n                cur[j] = cur[j-1] + pre[j];\n            }\n            pre = cur.clone();\n        }\n        return pre[n-1]; \n    }\n}\n```\n\n\n\n优化2：空间复杂度 $O(n)$\n\n```Python [3]\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        cur = [1] * n\n        for i in range(1, m):\n            for j in range(1, n):\n                cur[j] += cur[j-1]\n        return cur[-1]\n```\n\n\n\n```Java [3]\nclass Solution {\n    public int uniquePaths(int m, int n) {\n        int[] cur = new int[n];\n        Arrays.fill(cur,1);\n        for (int i = 1; i < m;i++){\n            for (int j = 1; j < n; j++){\n                cur[j] += cur[j-1] ;\n            }\n        }\n        return cur[n-1];\n    }\n}\n```\n\n"
}