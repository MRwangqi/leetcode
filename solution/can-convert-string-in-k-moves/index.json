{
	"titleSlug": "can-convert-string-in-k-moves",
	"slug": "k-ci-cao-zuo-zhuan-bian-zi-fu-chuan-by-leetcode-so",
	"url": "https://leetcode-cn.com/problems/can-convert-string-in-k-moves/solution/k-ci-cao-zuo-zhuan-bian-zi-fu-chuan-by-leetcode-so/",
	"content": "#### 方法一：统计操作次数\n\n由于每次操作只是切换字符串中的字符，不会改变字符串的长度，因此只有当字符串 $s$ 和 $t$ 的长度相等时，才可能将 $s$ 转变成 $t$。如果 $s$ 和 $t$ 的长度不相等，直接返回 $\\text{false}$ 即可。\n\n对于每个下标，如果 $s$ 和 $t$ 在该下标位置的字符不相同，则需要进行切换，所需**最小切换次数**最多为 $25$。因此，遍历 $s$ 和 $t$，计算每个下标的最小切换次数（如果不需要切换，则最小切换次数为 $0$），并统计每个最小切换次数的出现次数。\n\n由于每次操作只能对一个未选过的下标位置的字符进行切换，因此如果有两个下标的最小切换次数相同，则如果其中的一个下标在第 $i$ 次操作时进行了切换，另一个下标必须等到第 $i+26$ 次操作时才能进行切换。如果有多个下标的最小切换次数相同，则每个下标都必须在前一个下标进行切换操作之后的第 $26$ 次操作才能进行切换。\n\n如果有 $j$ 个下标的最小切换次数都是 $i$，其中 $1 \\le i \\le 25$，则需要 $i+26 \\times (j-1)$ 次操作才能将 $j$ 个下标的字符都切换。如果 $i+26 \\times (j-1)>k$，则无法在 $k$ 次操作以内完成全部的切换操作，因此返回 $\\text{false}$。\n\n如果对于所有的最小切换次数，所有的下标都可以在 $k$ 次操作以内进行切换，则返回 $\\text{true}$。\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean canConvertString(String s, String t, int k) {\n        if (s.length() != t.length()) {\n            return false;\n        }\n        int[] counts = new int[26];\n        int length = s.length();\n        for (int i = 0; i < length; i++) {\n            int difference = t.charAt(i) - s.charAt(i);\n            if (difference < 0) {\n                difference += 26;\n            }\n            counts[difference]++;\n        }\n        for (int i = 1; i < 26; i++) {\n            int maxConvert = i + 26 * (counts[i] - 1);\n            if (maxConvert > k) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    bool canConvertString(string s, string t, int k) {\n        if (s.size() != t.size()) {\n            return false;\n        }\n        auto counts = vector<int>(26);\n        int length = s.size();\n        for (int i = 0; i < length; i++) {\n            int difference = t.at(i) - s.at(i);\n            if (difference < 0) {\n                difference += 26;\n            }\n            counts[difference]++;\n        }\n        for (int i = 1; i < 26; i++) {\n            int maxConvert = i + 26 * (counts[i] - 1);\n            if (maxConvert > k) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def canConvertString(self, s: str, t: str, k: int) -> bool:\n        if len(s) != len(t):\n            return False\n        \n        counts = [0] * 26\n        for si, ti in zip(s, t):\n            difference = ord(ti) - ord(si)\n            if difference < 0:\n                difference += 26\n            counts[difference] += 1\n        \n        for i, count in enumerate(counts[1:], 1):\n            maxConvert = i + 26 * (counts[i] - 1)\n            if maxConvert > k:\n                return False\n        \n        return True\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+|\\Sigma|)$，其中 $n$ 是字符串 $s$ 和 $t$ 的长度，$\\Sigma$ 是字符集（即字符串中可能出现的字符种类数），在本题中字符串只包含小写字母，因此 $|\\Sigma| = 26$。只有当字符串 $s$ 和 $t$ 的长度相等时才需要进行进一步判断，对两个字符串各遍历一次，时间复杂度是 $O(n)$，然后统计每个最小切换次数对应的下标出现次数并计算所需操作次数，对于字符集 $\\Sigma$，最小切换次数最多为 $|\\Sigma|-1$，计算所需操作次数可以在 $O(|\\Sigma|)$ 时间内完成，因此总时间复杂度是 $O(n+|\\Sigma|)$。\n\n- 空间复杂度：$O(|\\Sigma|)$，其中 $\\Sigma$ 是字符集，在本题中字符串只包含小写字母，因此 $|\\Sigma| = 26$。需要使用数组存储每个最小切换次数的出现次数，对于字符集 $\\Sigma$，最小切换次数最多为 $|\\Sigma|-1$。"
}