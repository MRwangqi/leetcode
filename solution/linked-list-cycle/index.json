{
	"titleSlug": "linked-list-cycle",
	"slug": "huan-xing-lian-biao-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode-solution/",
	"content": "#### 方法一：哈希表\n\n**思路及算法**\n\n最容易想到的方法是遍历所有节点，每次遍历到一个节点时，判断该节点此前是否被访问过。\n\n具体地，我们可以使用哈希表来存储所有已经访问过的节点。每次我们到达一个节点，如果该节点已经存在于哈希表中，则说明该链表是环形链表，否则就将该节点加入哈希表中。重复这一过程，直到我们遍历完整个链表即可。\n\n**代码**\n\n```Java [sol1-Java]\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        Set<ListNode> seen = new HashSet<ListNode>();\n        while (head != null) {\n            if (!seen.add(head)) {\n                return true;\n            }\n            head = head.next;\n        }\n        return false;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        unordered_set<ListNode*> seen;\n        while (head != nullptr) {\n            if (seen.count(head)) {\n                return true;\n            }\n            seen.insert(head);\n            head = head->next;\n        }\n        return false;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        seen = set()\n        while head:\n            if head in seen:\n                return True\n            seen.add(head)\n            head = head.next\n        return False\n```\n\n```Golang [sol1-Golang]\nfunc hasCycle(head *ListNode) bool {\n    seen := map[*ListNode]struct{}{}\n    for head != nil {\n        if _, ok := seen[head]; ok {\n            return true\n        }\n        seen[head] = struct{}{}\n        head = head.Next\n    }\n    return false\n}\n```\n\n```C [sol1-C]\nstruct hashTable {\n    struct ListNode* key;\n    UT_hash_handle hh;\n};\n\nstruct hashTable* hashtable;\n\nstruct hashTable* find(struct ListNode* ikey) {\n    struct hashTable* tmp;\n    HASH_FIND_PTR(hashtable, &ikey, tmp);\n    return tmp;\n}\n\nvoid insert(struct ListNode* ikey) {\n    struct hashTable* tmp = malloc(sizeof(struct hashTable));\n    tmp->key = ikey;\n    HASH_ADD_PTR(hashtable, key, tmp);\n}\n\nbool hasCycle(struct ListNode* head) {\n    hashtable = NULL;\n    while (head != NULL) {\n        if (find(head) != NULL) {\n            return true;\n        }\n        insert(head);\n        head = head->next;\n    }\n    return false;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是链表中的节点数。最坏情况下我们需要遍历每个节点一次。\n\n- 空间复杂度：$O(N)$，其中 $N$ 是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次。\n\n\n#### 方法二：快慢指针\n\n**思路及算法**\n\n本方法需要读者对「Floyd 判圈算法」（又称龟兔赛跑算法）有所了解。\n\n假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，如果该链表中没有环，那么「兔子」将一直处于「乌龟」的前方；如果该链表中有环，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。\n\n我们可以根据上述思路来解决本题。具体地，我们定义两个指针，一快一慢。慢指针每次只移动一步，而快指针每次移动两步。初始时，慢指针在位置 `head`，而快指针在位置 `head.next`。这样一来，如果在移动的过程中，快指针反过来追上慢指针，就说明该链表为环形链表。否则快指针将到达链表尾部，该链表不为环形链表。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/141/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/141/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/141/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/141/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/141/5.png)>\n\n**细节**\n\n为什么我们要规定初始时慢指针在位置 `head`，快指针在位置 `head.next`，而不是两个指针都在位置 `head`（即与「乌龟」和「兔子」中的叙述相同）？\n\n- 观察下面的代码，我们使用的是 `while` 循环，循环条件先于循环体。由于循环条件一定是判断快慢指针是否重合，如果我们将两个指针初始都置于 `head`，那么 `while` 循环就不会执行。因此，我们可以假想一个在 `head` 之前的虚拟节点，慢指针从虚拟节点移动一步到达 `head`，快指针从虚拟节点移动两步到达 `head.next`，这样我们就可以使用 `while` 循环了。\n\n- 当然，我们也可以使用 `do-while` 循环。此时，我们就可以把快慢指针的初始值都置为 `head`。\n\n**代码**\n\n```Java [sol2-Java]\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null || head.next == null) {\n            return false;\n        }\n        ListNode slow = head;\n        ListNode fast = head.next;\n        while (slow != fast) {\n            if (fast == null || fast.next == null) {\n                return false;\n            }\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        return true;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool hasCycle(ListNode* head) {\n        if (head == nullptr || head->next == nullptr) {\n            return false;\n        }\n        ListNode* slow = head;\n        ListNode* fast = head->next;\n        while (slow != fast) {\n            if (fast == nullptr || fast->next == nullptr) {\n                return false;\n            }\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return true;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        \n        slow = head\n        fast = head.next\n\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        \n        return True\n```\n\n```Golang [sol2-Golang]\nfunc hasCycle(head *ListNode) bool {\n    if head == nil || head.Next == nil {\n        return false\n    }\n    slow, fast := head, head.Next\n    for fast != slow {\n        if fast == nil || fast.Next == nil {\n            return false\n        }\n        slow = slow.Next\n        fast = fast.Next.Next\n    }\n    return true\n}\n```\n\n```C [sol2-C]\nbool hasCycle(struct ListNode* head) {\n    if (head == NULL || head->next == NULL) {\n        return false;\n    }\n    struct ListNode* slow = head;\n    struct ListNode* fast = head->next;\n    while (slow != fast) {\n        if (fast == NULL || fast->next == NULL) {\n            return false;\n        }\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是链表中的节点数。\n  \n  - 当链表中不存在环时，快指针将先于慢指针到达链表尾部，链表中每个节点至多被访问两次。\n\n  - 当链表中存在环时，每一轮移动后，快慢指针的距离将减小一。而初始距离为环的长度，因此至多移动 $N$ 轮。\n\n- 空间复杂度：$O(1)$。我们只使用了两个指针的额外空间。"
}