{
	"titleSlug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
	"slug": "-by-wa-pian-d-m4lc",
	"url": "https://leetcode-cn.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/solution/-by-wa-pian-d-m4lc/",
	"content": "### 解题思路\n\n从0点开始加入到线路中，那些原本走向0的，直接添加。那些原本从0走出的需要改变方向添加。\n改变方向就需要累计答案了。\n\n### 代码\n\n```java\nclass Solution {\n\n\tpublic int minReorder(int n, int[][] connections) {\n\t\tList<Integer>[] ins = new ArrayList[n];\n\t\tList<Integer>[] outs = new ArrayList[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tins[i] = new ArrayList<>();\n\t\t\touts[i] = new ArrayList<>();\n\t\t}\n\t\tfor (int i = 0; i < connections.length; i++) {\n\t\t\tint[] connection = connections[i];\n\t\t\tint a = connection[0], b = connection[1];\n\t\t\tins[b].add(a);\n\t\t\touts[a].add(b);\n\t\t}\n\t\tboolean[] been = new boolean[n];\n\t\tQueue<Integer> queue = new LinkedList<>();\n\t\tqueue.add(0);\n\t\tbeen[0] = true;\n\t\tint ans = 0;\n\t\twhile (!queue.isEmpty()) {\n\t\t\tint cur = queue.poll();\n\t\t\tList<Integer> in = ins[cur];\n\t\t\tfor (int i : in) {\n\t\t\t\tif (!been[i]) {\n\t\t\t\t\tbeen[i] = true;\n\t\t\t\t\tqueue.add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tList<Integer> out = outs[cur];\n\t\t\tfor (int o : out) {\n\t\t\t\tif (!been[o]) {\n\t\t\t\t\tbeen[o] = true;\n\t\t\t\t\tqueue.add(o);\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n\n}\n```"
}