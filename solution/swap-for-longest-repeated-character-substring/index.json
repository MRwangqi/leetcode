{
	"titleSlug": "swap-for-longest-repeated-character-substring",
	"slug": "hua-dong-chuang-kou-by-inventionliu-n54x",
	"url": "https://leetcode-cn.com/problems/swap-for-longest-repeated-character-substring/solution/hua-dong-chuang-kou-by-inventionliu-n54x/",
	"content": "### 解题思路\n不求前缀和，优化后，速度还是快很多\n\n### 代码\n\n```cpp\nclass Solution {\npublic:\n    int maxRepOpt1(string text) {\n        //窗口内维护的是两种字符的数量，首先不同字符数量不能超过2中，然后其中一种的数量只能有一个，\n        //然后更新结果的时候，数量为1的字符，后面还需要有替换的字符，否则不更新(还有left前面的有替换的也行)\n        //需要先求一每个位置往后，26个字符出现的数量的前缀和:(不用先求出这个，求出每个字符总的数量，减去窗口中\n        //的字符数量即可得到是否还有替换的字母)\n        int len = text.length();\n        vector<int> charNum(26,0);\n        for(int i = 0;i<len;i++){\n            charNum[text[i]-'a']++;\n        }\n        int left = 0;\n        int right = 0;\n        int oneCharNum = 0;\n        int twoCharNum = 0;\n        char oneChar = 'A';\n        char twoChar = 'B';\n        char threeChar = 'C';\n        int res = 0;\n        while(right<len){\n            char cur = text[right];\n            if(cur == oneChar){\n                oneCharNum++;\n            }else if(cur == twoChar){\n                twoCharNum++;\n            }else{\n                if(oneChar < 'a'){\n                    oneChar = cur;\n                    oneCharNum = 1;\n                }else if(twoChar < 'a'){\n                    twoChar = cur;\n                    twoCharNum = 1;\n                }else{\n                    threeChar = cur;\n                }\n            }\n            //移动左边指针，维护窗口的规则:\n            if(threeChar >= 'a'){//窗口中有三种字符了\n                while(oneCharNum>0 && twoCharNum>0){\n                    char lfChar = text[left];\n                    if(lfChar == oneChar){\n                        oneCharNum--;\n                    }else{\n                        twoCharNum--;\n                    }\n                    left++;\n                }\n                if(oneCharNum == 0){\n                    oneChar = threeChar;\n                    oneCharNum = 1;\n                }else{\n                    twoChar = threeChar;\n                    twoCharNum = 1;\n                }\n                threeChar = 'C';//这里要初始化threeChar\n            }\n            while(oneCharNum>1 && twoCharNum>1){\n                //这里是窗口中两种字符的数量都大于1，需要变成有一种字符的数量为1\n                char lfChar= text[left];\n                if(lfChar == oneChar){\n                    oneCharNum--;\n                }else{\n                    twoCharNum--;\n                }\n                left++;\n            }\n            //更新结果:到这里窗口内已经满足规则\n            if(oneCharNum == 0 || twoCharNum == 0){\n                //不用考虑替换:\n                if(right-left+1 > res){\n                    res = right-left+1;\n                }\n            }else{\n                if(oneCharNum == 1){\n                    if(charNum[twoChar-'a']-twoCharNum > 0 && right-left+1>res){\n                        res = right-left+1;\n                    }\n                }\n                if(twoCharNum == 1){\n                    if(charNum[oneChar-'a']-oneCharNum > 0 && right-left+1>res){\n                        res = right-left+1;\n                    }\n                }\n            }\n            right++;\n        }\n        return res;\n    }\n};\n```"
}