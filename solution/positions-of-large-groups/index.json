{
	"titleSlug": "positions-of-large-groups",
	"slug": "jiao-da-fen-zu-de-wei-zhi-by-leetcode-so-fi3n",
	"url": "https://leetcode-cn.com/problems/positions-of-large-groups/solution/jiao-da-fen-zu-de-wei-zhi-by-leetcode-so-fi3n/",
	"content": "#### 方法一：一次遍历\n\n**思路及解法**\n\n我们可以遍历该序列，并记录当前分组的长度。如果下一个字符与当前字符不同，或者已经枚举到字符串尾部，就说明当前字符为当前分组的尾部。每次找到当前分组的尾部时，如果该分组长度达到 $3$，我们就将其加入答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<vector<int>> largeGroupPositions(string s) {\n        vector<vector<int>> ret;\n        int n = s.size();\n        int num = 1;\n        for (int i = 0; i < n; i++) {\n            if (i == n - 1 || s[i] != s[i + 1]) {\n                if (num >= 3) {\n                    ret.push_back({i - num + 1, i});\n                }\n                num = 1;\n            } else {\n                num++;\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<List<Integer>> largeGroupPositions(String s) {\n        List<List<Integer>> ret = new ArrayList<List<Integer>>();\n        int n = s.length();\n        int num = 1;\n        for (int i = 0; i < n; i++) {\n            if (i == n - 1 || s.charAt(i) != s.charAt(i + 1)) {\n                if (num >= 3) {\n                    ret.add(Arrays.asList(i - num + 1, i));\n                }\n                num = 1;\n            } else {\n                num++;\n            }\n        }\n        return ret;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc largeGroupPositions(s string) (ans [][]int) {\n    cnt := 1\n    for i := range s {\n        if i == len(s)-1 || s[i] != s[i+1] {\n            if cnt >= 3 {\n                ans = append(ans, []int{i - cnt + 1, i})\n            }\n            cnt = 1\n        } else {\n            cnt++\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint** largeGroupPositions(char* s, int* returnSize, int** returnColumnSizes) {\n    *returnSize = 0;\n    int n = strlen(s);\n    int** ret = malloc(sizeof(int*) * (n / 3));\n    *returnColumnSizes = malloc(sizeof(int) * (n / 3));\n    int num = 1;\n    for (int i = 0; i < n; i++) {\n        if (i == n - 1 || s[i] != s[i + 1]) {\n            if (num >= 3) {\n                int* tmp = malloc(sizeof(int) * 2);\n                tmp[0] = i - num + 1, tmp[1] = i;\n                (*returnColumnSizes)[*returnSize] = 2;\n                ret[(*returnSize)++] = tmp;\n            }\n            num = 1;\n        } else {\n            num++;\n        }\n    }\n    return ret;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar largeGroupPositions = function(s) {\n    const ret = [];\n    const n = s.length;\n    let num = 1;\n    for (let i = 0; i < n; i++) {\n        if (i === n - 1 || s[i] !== s[i + 1]) {\n            if (num >= 3) {\n                ret.push([i - num + 1, i]);\n            }\n            num = 1;\n        } else {\n            num++;\n        }\n    }\n    return ret;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def largeGroupPositions(self, s: str) -> List[List[int]]:\n        ret = list()\n        n, num = len(s), 1\n\n        for i in range(n):\n            if i == n - 1 or s[i] != s[i + 1]:\n                if num >= 3:\n                    ret.append([i - num + 1, i])\n                num = 1\n            else:\n                num += 1\n        \n        return ret\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串的长度。我们只需要遍历一次该数组。\n\n- 空间复杂度：$O(1)$。我们只需要常数的空间来保存若干变量，注意返回值不计入空间复杂度。"
}