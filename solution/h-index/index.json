{
	"titleSlug": "h-index",
	"slug": "h-zhi-shu-by-leetcode-solution-fnhl",
	"url": "https://leetcode-cn.com/problems/h-index/solution/h-zhi-shu-by-leetcode-solution-fnhl/",
	"content": "#### 方法一：排序\n\n首先我们可以将初始的 $\\text{H}$ 指数 $h$ 设为 $0$，然后将引用次数排序，并且对排序后的数组从大到小遍历。\n\n根据 $\\text{H}$ 指数的定义，如果当前 $\\text{H}$ 指数为 $h$ **并且**在遍历过程中找到当前值 $\\textit{citations}[i] > h$，则说明**我们找到了一篇被引用了至少 $h+1$ 次的论文**，所以**将现有的 $h$ 值加 $1$**。继续遍历直到 $h$ 无法继续增大。最后返回 $h$ 作为最终答案。\n\n```Java [sol1-Java]\nclass Solution {\n    public int hIndex(int[] citations) {\n        Arrays.sort(citations);\n        int h = 0, i = citations.length - 1; \n        while (i >= 0 && citations[i] > h) {\n            h++; \n            i--;\n        }\n        return h;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int HIndex(int[] citations) {\n        Array.Sort(citations);\n        int h = 0, i = citations.Length - 1; \n        while (i >= 0 && citations[i] > h) {\n            h++; \n            i--;\n        }\n        return h;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        sorted_citation = sorted(citations, reverse = True)\n        h = 0; i = 0; n = len(citations)\n        while i < n and sorted_citation[i] > h:\n            h += 1\n            i += 1\n        return h\n```\n\n```JavaScript [sol1-JavaScript]\nvar hIndex = function(citations) {\n    citations.sort((a, b) => a - b);\n    let h = 0, i = citations.length - 1; \n    while (i >= 0 && citations[i] > h) {\n        h++; \n        i--;\n    }\n    return h;\n};\n```\n\n```go [sol1-Golang]\nfunc hIndex(citations []int) (h int) {\n    sort.Ints(citations)\n    for i := len(citations) - 1; i >= 0 && citations[i] > h; i-- {\n        h++\n    }\n    return\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int hIndex(vector<int>& citations) {\n        sort(citations.begin(), citations.end());\n        int h = 0, i = citations.size() - 1;\n        while (i >= 0 && citations[i] > h) {\n            h++;\n            i--;\n        }\n        return h;\n    }\n};\n```\n\n```C [sol1-C]\nint cmp(int *a, int *b) {\n    return *a - *b;\n}\n\nint hIndex(int *citations, int citationsSize) {\n    qsort(citations, citationsSize, sizeof(int), cmp);\n    int h = 0, i = citationsSize - 1;\n    while (i >= 0 && citations[i] > h) {\n        h++;\n        i--;\n    }\n    return h;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 为数组 $\\textit{citations}$ 的长度。即为排序的时间复杂度。\n\n- 空间复杂度：$O(\\log n)$，其中 $n$ 为数组 $\\textit{citations}$ 的长度。即为排序的空间复杂度。\n\n#### 方法二：计数排序\n\n根据上述解法我们发现，最终的时间复杂度与排序算法的时间复杂度有关，所以我们可以使用计数排序算法，新建并维护一个数组 $\\textit{counter}$ 用来记录当前引用次数的论文有几篇。\n\n根据定义，我们可以发现 $\\text{H}$ 指数不可能大于总的论文发表数，所以对于引用次数超过论文发表数的情况，我们可以将其按照总的论文发表数来计算即可。这样我们可以限制参与排序的数的大小为 $[0,n]$（其中 $n$ 为总的论文发表数），使得计数排序的时间复杂度降低到 $O(n)$。\n\n最后我们可以从后向前遍历数组 $\\textit{counter}$，对于每个 $0 \\le i \\le n$，在数组 $\\textit{counter}$ 中得到大于或等于当前引用次数 $i$ 的总论文数。当我们找到一个 $\\text{H}$ 指数时跳出循环，并返回结果。\n\n```Java [sol2-Java]\npublic class Solution {\n    public int hIndex(int[] citations) {\n        int n = citations.length, tot = 0;\n        int[] counter = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            if (citations[i] >= n) {\n                counter[n]++;\n            } else {\n                counter[citations[i]]++;\n            }\n        }\n        for (int i = n; i >= 0; i--) {\n            tot += counter[i];\n            if (tot >= i) {\n                return i;\n            }\n        }\n        return 0;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int HIndex(int[] citations) {\n        int n = citations.Length, tot = 0;\n        int[] counter = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            if (citations[i] >= n) {\n                counter[n]++;\n            } else {\n                counter[citations[i]]++;\n            }\n        }\n        for (int i = n; i >= 0; i--) {\n            tot += counter[i];\n            if (tot >= i) {\n                return i;\n            }\n        }\n        return 0;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        n = len(citations); tot = 0\n        counter = [0] * (n+1)\n        for c in citations:\n            if c >= n:\n                counter[n] += 1\n            else:\n                counter[c] += 1\n        for i in range(n, -1, -1):\n            tot += counter[i]\n            if tot >= i:\n                return i\n        return 0\n```\n\n```JavaScript [sol2-JavaScript]\nvar hIndex = function(citations) {\n    let n = citations.length, tot = 0;\n    const counter = new Array(n + 1).fill(0);\n    for (let i = 0; i < n; i++) {\n        if (citations[i] >= n) {\n            counter[n]++;\n        } else {\n            counter[citations[i]]++;\n        }\n    }\n    for (let i = n; i >= 0; i--) {\n        tot += counter[i];\n        if (tot >= i) {\n            return i;\n        }\n    }\n    return 0;\n};\n```\n\n```go [sol2-Golang]\nfunc hIndex(citations []int) (h int) {\n    n := len(citations)\n    counter := make([]int, n+1)\n    for _, citation := range citations {\n        if citation >= n {\n            counter[n]++\n        } else {\n            counter[citation]++\n        }\n    }\n    for i, tot := n, 0; i >= 0; i-- {\n        tot += counter[i]\n        if tot >= i {\n            return i\n        }\n    }\n    return 0\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int hIndex(vector<int>& citations) {\n        int n = citations.size(), tot = 0;\n        vector<int> counter(n + 1);\n        for (int i = 0; i < n; i++) {\n            if (citations[i] >= n) {\n                counter[n]++;\n            } else {\n                counter[citations[i]]++;\n            }\n        }\n        for (int i = n; i >= 0; i--) {\n            tot += counter[i];\n            if (tot >= i) {\n                return i;\n            }\n        }\n        return 0;\n    }\n};\n```\n\n```C [sol2-C]\nint hIndex(int *citations, int citationsSize) {\n    int n = citationsSize, tot = 0;\n    int counter[n + 1];\n    memset(counter, 0, sizeof(counter));\n    for (int i = 0; i < n; i++) {\n        if (citations[i] >= n) {\n            counter[n]++;\n        } else {\n            counter[citations[i]]++;\n        }\n    }\n    for (int i = n; i >= 0; i--) {\n        tot += counter[i];\n        if (tot >= i) {\n            return i;\n        }\n    }\n    return 0;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组 $\\textit{citations}$ 的长度。需要遍历数组 $\\textit{citations}$ 一次，以及遍历长度为 $n+1$ 的数组 $\\textit{counter}$ 一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 为数组 $\\textit{citations}$ 的长度。需要创建长度为 $n+1$ 的数组 $\\textit{counter}$。"
}