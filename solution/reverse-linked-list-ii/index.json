{
	"titleSlug": "reverse-linked-list-ii",
	"slug": "fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq",
	"url": "https://leetcode-cn.com/problems/reverse-linked-list-ii/solution/fan-zhuan-lian-biao-ii-by-leetcode-solut-teyq/",
	"content": "#### 前言\n\n链表的操作问题，一般而言面试（机试）的时候不允许我们修改节点的值，而只能修改节点的指向操作。\n\n思路通常都不难，写对链表问题的技巧是：一定要先想清楚思路，并且必要的时候在草稿纸上画图，理清「穿针引线」的先后步骤，然后再编码。\n\n#### 方法一：穿针引线\n\n我们以下图中黄色区域的链表反转为例。\n\n![image.png](https://pic.leetcode-cn.com/1615105129-iUPoGi-image.png){:width=700}\n\n使用「[206. 反转链表](/problems/reverse-linked-list/)」的解法，反转 `left` 到 `right` 部分以后，再拼接起来。我们还需要记录 `left` 的前一个节点，和 `right` 的后一个节点。如图所示：\n\n![image.png](https://pic.leetcode-cn.com/1615105150-pfWiGq-image.png){:width=500}\n{:align=center}\n\n**算法步骤：**\n\n+ 第 1 步：先将待反转的区域反转；\n+ 第 2 步：把 `pre` 的 `next` 指针指向反转以后的链表头节点，把反转以后的链表的尾节点的 `next` 指针指向 `succ`。\n\n![image.png](https://pic.leetcode-cn.com/1615105168-ZQRZew-image.png){:width=500}\n{:align=center}\n\n**说明**：编码细节我们不在题解中介绍了，请见下方代码。思路想明白以后，编码不是一件很难的事情。这里要提醒大家的是，链接什么时候切断，什么时候补上去，先后顺序一定要想清楚，如果想不清楚，可以在纸上模拟，让思路清晰。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    void reverseLinkedList(ListNode *head) {\n        // 也可以使用递归反转一个链表\n        ListNode *pre = nullptr;\n        ListNode *cur = head;\n\n        while (cur != nullptr) {\n            ListNode *next = cur->next;\n            cur->next = pre;\n            pre = cur;\n            cur = next;\n        }\n    }\n\npublic:\n    ListNode *reverseBetween(ListNode *head, int left, int right) {\n        // 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论\n        ListNode *dummyNode = new ListNode(-1);\n        dummyNode->next = head;\n\n        ListNode *pre = dummyNode;\n        // 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点\n        // 建议写在 for 循环里，语义清晰\n        for (int i = 0; i < left - 1; i++) {\n            pre = pre->next;\n        }\n\n        // 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点\n        ListNode *rightNode = pre;\n        for (int i = 0; i < right - left + 1; i++) {\n            rightNode = rightNode->next;\n        }\n\n        // 第 3 步：切断出一个子链表（截取链表）\n        ListNode *leftNode = pre->next;\n        ListNode *curr = rightNode->next;\n\n        // 注意：切断链接\n        pre->next = nullptr;\n        rightNode->next = nullptr;\n\n        // 第 4 步：同第 206 题，反转链表的子区间\n        reverseLinkedList(leftNode);\n\n        // 第 5 步：接回到原来的链表中\n        pre->next = rightNode;\n        leftNode->next = curr;\n        return dummyNode->next;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        // 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n\n        ListNode pre = dummyNode;\n        // 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点\n        // 建议写在 for 循环里，语义清晰\n        for (int i = 0; i < left - 1; i++) {\n            pre = pre.next;\n        }\n\n        // 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点\n        ListNode rightNode = pre;\n        for (int i = 0; i < right - left + 1; i++) {\n            rightNode = rightNode.next;\n        }\n\n        // 第 3 步：切断出一个子链表（截取链表）\n        ListNode leftNode = pre.next;\n        ListNode curr = rightNode.next;\n\n        // 注意：切断链接\n        pre.next = null;\n        rightNode.next = null;\n\n        // 第 4 步：同第 206 题，反转链表的子区间\n        reverseLinkedList(leftNode);\n\n        // 第 5 步：接回到原来的链表中\n        pre.next = rightNode;\n        leftNode.next = curr;\n        return dummyNode.next;\n    }\n\n    private void reverseLinkedList(ListNode head) {\n        // 也可以使用递归反转一个链表\n        ListNode pre = null;\n        ListNode cur = head;\n\n        while (cur != null) {\n            ListNode next = cur.next;\n            cur.next = pre;\n            pre = cur;\n            cur = next;\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:\n        def reverse_linked_list(head: ListNode):\n            # 也可以使用递归反转一个链表\n            pre = None\n            cur = head\n            while cur:\n                next = cur.next\n                cur.next = pre\n                pre = cur\n                cur = next\n\n        # 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论\n        dummy_node = ListNode(-1)\n        dummy_node.next = head\n        pre = dummy_node\n        # 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点\n        # 建议写在 for 循环里，语义清晰\n        for _ in range(left - 1):\n            pre = pre.next\n\n        # 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点\n        right_node = pre\n        for _ in range(right - left + 1):\n            right_node = right_node.next\n        # 第 3 步：切断出一个子链表（截取链表）\n        left_node = pre.next\n        curr = right_node.next\n\n        # 注意：切断链接\n        pre.next = None\n        right_node.next = None\n\n        # 第 4 步：同第 206 题，反转链表的子区间\n        reverse_linked_list(left_node)\n        # 第 5 步：接回到原来的链表中\n        pre.next = right_node\n        left_node.next = curr\n        return dummy_node.next\n```\n\n```go [sol1-Golang]\nfunc reverseLinkedList(head *ListNode) {\n    var pre *ListNode\n    cur := head\n    for cur != nil {\n        next := cur.Next\n        cur.Next = pre\n        pre = cur\n        cur = next\n    }\n}\n\nfunc reverseBetween(head *ListNode, left, right int) *ListNode {\n    // 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论\n    dummyNode := &ListNode{Val: -1}\n    dummyNode.Next = head\n\n    pre := dummyNode\n    // 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点\n    // 建议写在 for 循环里，语义清晰\n    for i := 0; i < left-1; i++ {\n        pre = pre.Next\n    }\n\n    // 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点\n    rightNode := pre\n    for i := 0; i < right-left+1; i++ {\n        rightNode = rightNode.Next\n    }\n\n    // 第 3 步：切断出一个子链表（截取链表）\n    leftNode := pre.Next\n    curr := rightNode.Next\n\n    // 注意：切断链接\n    pre.Next = nil\n    rightNode.Next = nil\n\n    // 第 4 步：同第 206 题，反转链表的子区间\n    reverseLinkedList(leftNode)\n\n    // 第 5 步：接回到原来的链表中\n    pre.Next = rightNode\n    leftNode.Next = curr\n    return dummyNode.Next\n}\n```\n\n```C [sol1-C]\nvoid reverseLinkedList(struct ListNode *head) {\n    // 也可以使用递归反转一个链表\n    struct ListNode *pre = NULL;\n    struct ListNode *cur = head;\n\n    while (cur != NULL) {\n        struct ListNode *next = cur->next;\n        cur->next = pre;\n        pre = cur;\n        cur = next;\n    }\n}\n\nstruct ListNode *reverseBetween(struct ListNode *head, int left, int right) {\n    // 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论\n    struct ListNode *dummyNode = malloc(sizeof(struct ListNode));\n    dummyNode->val = -1;\n    dummyNode->next = head;\n\n    struct ListNode *pre = dummyNode;\n    // 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点\n    // 建议写在 for 循环里，语义清晰\n    for (int i = 0; i < left - 1; i++) {\n        pre = pre->next;\n    }\n\n    // 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点\n    struct ListNode *rightNode = pre;\n    for (int i = 0; i < right - left + 1; i++) {\n        rightNode = rightNode->next;\n    }\n\n    // 第 3 步：切断出一个子链表（截取链表）\n    struct ListNode *leftNode = pre->next;\n    struct ListNode *curr = rightNode->next;\n\n    // 注意：切断链接\n    pre->next = NULL;\n    rightNode->next = NULL;\n\n    // 第 4 步：同第 206 题，反转链表的子区间\n    reverseLinkedList(leftNode);\n\n    // 第 5 步：接回到原来的链表中\n    pre->next = rightNode;\n    leftNode->next = curr;\n    return dummyNode->next;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar reverseBetween = function(head, left, right) {\n    // 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论\n    const dummyNode = new ListNode(-1);\n    dummyNode.next = head;\n\n    let pre = dummyNode;\n    // 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点\n    // 建议写在 for 循环里，语义清晰\n    for (let i = 0; i < left - 1; i++) {\n        pre = pre.next;\n    }\n\n    // 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点\n    let rightNode = pre;\n    for (let i = 0; i < right - left + 1; i++) {\n        rightNode = rightNode.next;\n    }\n\n    // 第 3 步：切断出一个子链表（截取链表）\n    let leftNode = pre.next;\n    let curr = rightNode.next;\n\n    // 注意：切断链接\n    pre.next = null;\n    rightNode.next = null;\n\n    // 第 4 步：同第 206 题，反转链表的子区间\n    reverseLinkedList(leftNode);\n\n    // 第 5 步：接回到原来的链表中\n    pre.next = rightNode;\n    leftNode.next = curr;\n    return dummyNode.next;\n};\n\nconst reverseLinkedList = (head) => {\n    let pre = null;\n    let cur = head;\n\n    while (cur) {\n        const next = cur.next;\n        cur.next = pre;\n        pre = cur;\n        cur = next;\n    }\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(N)$，其中 $N$ 是链表总节点数。最坏情况下，需要遍历整个链表。\n\n+ 空间复杂度：$O(1)$。只使用到常数个变量。\n\n#### 方法二：一次遍历「穿针引线」反转链表（头插法）\n\n方法一的缺点是：如果 `left` 和 `right` 的区域很大，恰好是链表的头节点和尾节点时，找到 `left` 和 `right` 需要遍历一次，反转它们之间的链表还需要遍历一次，虽然总的时间复杂度为 $O(N)$，但遍历了链表 $2$ 次，可不可以只遍历一次呢？答案是可以的。我们依然画图进行说明。\n\n我们依然以方法一的示例为例进行说明。\n\n![image.png](https://pic.leetcode-cn.com/1615105232-cvTINs-image.png)\n\n整体思想是：在需要反转的区间里，每遍历到一个节点，让这个新节点来到反转部分的起始位置。下面的图展示了整个流程。\n\n![image.png](https://pic.leetcode-cn.com/1615105242-ZHlvOn-image.png){:width=500}\n{:align=center}\n\n下面我们具体解释如何实现。使用三个指针变量 `pre`、`curr`、`next` 来记录反转的过程中需要的变量，它们的意义如下：\n\n+ `curr`：指向待反转区域的第一个节点 `left`；\n+ `next`：永远指向 `curr` 的下一个节点，循环过程中，`curr` 变化以后 `next` 会变化；\n+ `pre`：永远指向待反转区域的第一个节点 `left` 的前一个节点，在循环过程中不变。\n\n第 1 步，我们使用 ①、②、③ 标注「穿针引线」的步骤。\n\n![image.png](https://pic.leetcode-cn.com/1615105296-bmiPxl-image.png){:width=500}\n{:align=center}\n\n**操作步骤**：\n\n+ 先将 `curr` 的下一个节点记录为 `next`；\n+ 执行操作 ①：把 `curr` 的下一个节点指向 `next` 的下一个节点；\n+ 执行操作 ②：把 `next` 的下一个节点指向 `pre` 的下一个节点；\n+ 执行操作 ③：把 `pre` 的下一个节点指向 `next`。\n\n第 1 步完成以后「拉直」的效果如下：\n\n![image.png](https://pic.leetcode-cn.com/1615105340-UBnTBZ-image.png){:width=500}\n{:align=center}\n\n\n第 2 步，同理。同样需要注意 **「穿针引线」操作的先后顺序**。\n\n![image.png](https://pic.leetcode-cn.com/1615105353-PsCmzb-image.png){:width=500}\n{:align=center}\n\n\n第 2 步完成以后「拉直」的效果如下：\n\n![image.png](https://pic.leetcode-cn.com/1615105364-aDIFqy-image.png){:width=500}\n{:align=center}\n\n第 3 步，同理。\n\n![image.png](https://pic.leetcode-cn.com/1615105376-jIyGwv-image.png){:width=500}\n{:align=center}\n\n第 3 步完成以后「拉直」的效果如下：\n\n![image.png](https://pic.leetcode-cn.com/1615105395-EJQnMe-image.png){:width=500}\n{:align=center}\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    ListNode *reverseBetween(ListNode *head, int left, int right) {\n        // 设置 dummyNode 是这一类问题的一般做法\n        ListNode *dummyNode = new ListNode(-1);\n        dummyNode->next = head;\n        ListNode *pre = dummyNode;\n        for (int i = 0; i < left - 1; i++) {\n            pre = pre->next;\n        }\n        ListNode *cur = pre->next;\n        ListNode *next;\n        for (int i = 0; i < right - left; i++) {\n            next = cur->next;\n            cur->next = next->next;\n            next->next = pre->next;\n            pre->next = next;\n        }\n        return dummyNode->next;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        // 设置 dummyNode 是这一类问题的一般做法\n        ListNode dummyNode = new ListNode(-1);\n        dummyNode.next = head;\n        ListNode pre = dummyNode;\n        for (int i = 0; i < left - 1; i++) {\n            pre = pre.next;\n        }\n        ListNode cur = pre.next;\n        ListNode next;\n        for (int i = 0; i < right - left; i++) {\n            next = cur.next;\n            cur.next = next.next;\n            next.next = pre.next;\n            pre.next = next;\n        }\n        return dummyNode.next;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:\n        # 设置 dummyNode 是这一类问题的一般做法\n        dummy_node = ListNode(-1)\n        dummy_node.next = head\n        pre = dummy_node\n        for _ in range(left - 1):\n            pre = pre.next\n\n        cur = pre.next\n        for _ in range(right - left):\n            next = cur.next\n            cur.next = next.next\n            next.next = pre.next\n            pre.next = next\n        return dummy_node.next\n```\n\n```go [sol2-Golang]\nfunc reverseBetween(head *ListNode, left, right int) *ListNode {\n    // 设置 dummyNode 是这一类问题的一般做法\n    dummyNode := &ListNode{Val: -1}\n    dummyNode.Next = head\n    pre := dummyNode\n    for i := 0; i < left-1; i++ {\n        pre = pre.Next\n    }\n    cur := pre.Next\n    for i := 0; i < right-left; i++ {\n        next := cur.Next\n        cur.Next = next.Next\n        next.Next = pre.Next\n        pre.Next = next\n    }\n    return dummyNode.Next\n}\n```\n\n```C [sol2-C]\nstruct ListNode *reverseBetween(struct ListNode *head, int left, int right) {\n    // 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论\n    struct ListNode *dummyNode = malloc(sizeof(struct ListNode));\n    dummyNode->val = -1;\n    dummyNode->next = head;\n\n    struct ListNode *pre = dummyNode;\n    for (int i = 0; i < left - 1; i++) {\n        pre = pre->next;\n    }\n    struct ListNode *cur = pre->next;\n    struct ListNode *next;\n    for (int i = 0; i < right - left; i++) {\n        next = cur->next;\n        cur->next = next->next;\n        next->next = pre->next;\n        pre->next = next;\n    }\n    return dummyNode->next;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar reverseBetween = function(head, left, right) {\n    // 设置 dummyNode 是这一类问题的一般做法\n    const dummy_node = new ListNode(-1);\n    dummy_node.next = head;\n    let pre = dummy_node;\n    for (let i = 0; i < left - 1; ++i) {\n        pre = pre.next;\n    }\n\n    let cur = pre.next;\n    for (let i = 0; i < right - left; ++i) {\n        const next = cur.next;\n        cur.next = next.next;\n        next.next = pre.next;\n        pre.next = next;\n    }\n    return dummy_node.next;\n};\n```\n\n**复杂度分析**：\n\n+ 时间复杂度：$O(N)$，其中 $N$ 是链表总节点数。最多只遍历了链表一次，就完成了反转。\n\n+ 空间复杂度：$O(1)$。只使用到常数个变量。"
}