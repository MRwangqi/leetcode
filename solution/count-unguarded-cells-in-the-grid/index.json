{
	"titleSlug": "count-unguarded-cells-in-the-grid",
	"slug": "tong-ji-wang-ge-tu-zhong-mei-you-bei-bao-ba6m",
	"url": "https://leetcode-cn.com/problems/count-unguarded-cells-in-the-grid/solution/tong-ji-wang-ge-tu-zhong-mei-you-bei-bao-ba6m/",
	"content": "#### 方法一：广度优先搜索 + 存储每个格子的状态\n\n**思路与算法**\n\n为了方便操作，我们可以用二维数组 $\\textit{grid}$ 来表示网格图的状态。其中，警卫对应的状态值为 $-1$，墙对应的状态值为 $-2$，未被保卫的格子对应的状态值为 $0$，被保卫格子对应的状态值为正整数。二维数组的初始值均为 $0$，随后我们遍历 $\\textit{guards}$ 和 $\\textit{walls}$ 数组对应更新网格图。\n\n在恢复了网格图后，我们可以使用广度优先搜索维护每个格子的状态。由于视线是向特定方向的，因此在广度优先搜索的过程中，除了要维护格子的横纵坐标，还要维护当前的**视线方向**。我们用 $(i, j, k)$ 来表示广度优先搜索的状态，其中 $(i, j)$ 代表当前点的横纵坐标，$k$ 为 $[0, 3]$ 闭区间内的整数，分别代表右、上、左、下的视线方向。同样地，为了防止每个非警卫或墙的点被重复或遗漏，我们用 $4$ 个二进制位组成的正整数来表示该格子的状态，其中**从低到高的**第 $k$ 位为 $1$ 代表有指向第 $k$ 个方向的视线经过该点，反之则代表没有。\n\n我们用队列 $q$ 来进行广度优先搜索。首先，对于每个警卫点 $(i, j)$，由于警卫可以看到四个方向，因此我们需要将 $k$ 为 $[0, 3]$ 闭区间内对应的**四种状态** $(i, j, k)$ 全部加进队列。\n\n当遍历到 $(x, y, k)$ 时，我们首先计算沿着该视线方向的**下一个**坐标 $(n_x, n_y)$，如果该坐标不合法或为墙或警卫，则我们直接跳过该坐标；对于余下的情况，我们需要检查该坐标对应状态 $\\textit{grid}[i][j]$ 中从低到高的第 $k$ 位的数值。此时有两种情况：\n\n- 第 $k$ 位为 $1$，则说明该坐标及视线方向对应的状态 $(n_x, n_y, k)$ 已被遍历过，我们直接跳过即可；\n\n- 第 $k$ 位为 $0$，则说明该坐标及视线方向对应的状态 $(n_x, n_y, k)$ 未被遍历过，我们需要将该位置为 $1$，并将该状态加入队列 $q$ 的尾部。\n\n最终，当广度优先搜索完成时，一个格子未被保卫**当且仅当** $\\textit{grid}$ 中的对应状态值为 $0$。我们只需要遍历 $\\textit{grid}$，维护数值为 $0$ 的格子数量，并返回即可。\n\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {\n        vector<vector<int>> grid(m, vector<int> (n));   // 网格状态数组\n        queue<tuple<int, int, int>> q;   // 广度优先搜索队列\n        // 每个方向的单位向量\n        vector<int> dx = {1, 0, -1, 0};\n        vector<int> dy = {0, 1, 0, -1};\n        for (const auto& guard: guards) {\n            grid[guard[0]][guard[1]] = -1;\n            for (int k = 0; k < 4; ++k) {\n                // 将四个方向视线对应的状态均添加进搜索队列中\n                q.emplace(guard[0], guard[1], k);\n            }\n        }\n        for (const auto& wall: walls) {\n            grid[wall[0]][wall[1]] = -2;\n        }\n        while (!q.empty()) {\n            auto [x, y, k] = q.front();\n            q.pop();\n            int nx = x + dx[k];\n            int ny = y + dy[k];\n            if (nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] >= 0) {\n                // 沿着视线方向的下一个坐标合法，且不为警卫或墙\n                if ((grid[nx][ny] & (1 << k)) == 0) {\n                    // 对应状态未遍历过\n                    grid[nx][ny] |= (1 << k);\n                    q.emplace(nx, ny, k);\n                }\n            }\n        }\n        int res = 0;   // 未被保护格子数目\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] == 0) {\n                    ++res;\n                }\n            }\n        }\n        return res;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:\n        grid = [[0] * n for  _ in range(m)]   # 网格状态数组\n        q = deque([])   # 广度优先搜索队列\n        # 每个方向的单位向量\n        dx = [1, 0, -1, 0]\n        dy = [0, 1, 0, -1]\n        for i, j in guards:\n            grid[i][j] = -1\n            for k in range(4):\n                # 将四个方向视线对应的状态均添加进搜索队列中\n                q.append((i, j, k))\n        for i, j in walls:\n            grid[i][j] = -2\n        while q:\n            x, y, k = q.popleft()\n            nx, ny = x + dx[k], y + dy[k]\n            if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] >= 0:\n                # 沿着视线方向的下一个坐标合法，且不为警卫或墙\n                if grid[nx][ny] & (1 << k) == 0:\n                    # 对应状态未遍历过\n                    grid[nx][ny] |= (1 << k)\n                    q.append((nx, ny, k))\n        res = 0   # 未被保护格子数目\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    res += 1\n        return res\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别为网格图的行数与列数。即为广度优先搜索的时间复杂度。\n\n- 空间复杂度：$O(mn)$，即为网格图数组的空间开销。"
}