{
	"titleSlug": "the-score-of-students-solving-math-expression",
	"slug": "by-liupengsay-athn",
	"url": "https://leetcode-cn.com/problems/the-score-of-students-solving-math-expression/solution/by-liupengsay-athn/",
	"content": "### 解题思路\n【儿须成名酒须醉】Python3+递归+区间DP+记忆化搜索\n\n### 代码\n参考不造轮子的题解\n- 执行用时：1312 ms, 在所有 Python3 提交中击败了 70.21% 的用户\n- 内存消耗：24.8 MB, 在所有 Python3 提交中击败了 42.55% 的用户\n- 通过测试用例：274 / 274\n\n```python3\nfrom operator import add, mul\n\n# 使用操作符替代eval能极大提升效率\nops = {\"+\": add, \"*\": mul}\n\n\nclass Solution:\n    def scoreOfStudents(self, s: str, answers: List[int]) -> int:\n\n        @lru_cache(None)\n        def dfs(state):\n            if len(state) == 1:\n                return {state[0]}\n            res = set()\n            # 枚举最后一个运算符，从上至下进行递归，再从下而上返回计算值\n            for i in range(1, len(state), 2):\n                pre = dfs(state[:i])\n                post = dfs(state[i + 1:])\n                for a in pre:\n                    for b in post:\n                        cur = ops[state[i]](a, b)\n                        # 很关键的剪枝，不加入超出计算范围内的值\n                        if cur <= 1000:\n                            res.add(cur)\n            return res\n\n        # 很关键的一步，预先转换为整数方便计算\n        lst = [int(va) if va not in ops else va for va in list(s)]\n        true = eval(s)\n        res = dfs(tuple(lst))\n        return sum(5 if x == true else 2 for x in answers if x in res)\n```"
}