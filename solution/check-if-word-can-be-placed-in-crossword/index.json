{
	"titleSlug": "check-if-word-can-be-placed-in-crossword",
	"slug": "mei-ju-liang-ge-zhi-jian-de-zi-fu-by-end-pjq1",
	"url": "https://leetcode-cn.com/problems/check-if-word-can-be-placed-in-crossword/solution/mei-ju-liang-ge-zhi-jian-de-zi-fu-by-end-pjq1/",
	"content": "遍历每一行和每一列，将两个 $\\texttt{\\#}$ 之间的字符当作一个槽位（矩阵边界也视作 $\\texttt{\\#}$），我们要做的就是遍历（正序+倒序）每个槽位，判断 $\\textit{word}$ 能否恰好填入该槽位。\r\n\r\n时间复杂度：$O(nm)$。注意最内层循环与第二层循环共用同一个下标变量。\r\n\r\n空间复杂度：$O(1)$。只需要常数的空间存放若干变量。\r\n\r\n```go\r\nfunc placeWordInCrossword(board [][]byte, word string) bool {\r\n\tm, n, k := len(board), len(board[0]), len(word)\r\n\t// 遍历行\r\n\tfor _, row := range board {\r\n\t\tfor j := 0; j < n; j++ {\r\n\t\t\tif row[j] == '#' {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\t// 遍历并匹配两个 # 之间的字符\r\n\t\t\tj0, ok1, ok2 := j, true, true\r\n\t\t\tfor ; j < n && row[j] != '#'; j++ { // 注意这里的 j 就是外层循环的 j，因此整体复杂度是线性的\r\n\t\t\t\tif j-j0 >= k || row[j] != ' ' && row[j] != word[j-j0] { // 正序匹配 word\r\n\t\t\t\t\tok1 = false\r\n\t\t\t\t}\r\n\t\t\t\tif j-j0 >= k || row[j] != ' ' && row[j] != word[k-1-j+j0] { // 倒序匹配 word\r\n\t\t\t\t\tok2 = false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (ok1 || ok2) && j-j0 == k { // 只要正序和倒序中有一个匹配成功，且两个 # 之间的字符长度恰好为 word 的长度，就返回 true\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// 遍历列（同上）\r\n\tfor j := 0; j < n; j++ {\r\n\t\tfor i := 0; i < m; i++ {\r\n\t\t\tif board[i][j] == '#' {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\ti0, ok1, ok2 := i, true, true\r\n\t\t\tfor ; i < m && board[i][j] != '#'; i++ {\r\n\t\t\t\tif i-i0 >= k || board[i][j] != ' ' && board[i][j] != word[i-i0] {\r\n\t\t\t\t\tok1 = false\r\n\t\t\t\t}\r\n\t\t\t\tif i-i0 >= k || board[i][j] != ' ' && board[i][j] != word[k-1-i+i0] {\r\n\t\t\t\t\tok2 = false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (ok1 || ok2) && i-i0 == k {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false\r\n}\r\n```"
}