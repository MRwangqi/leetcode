{
	"titleSlug": "total-hamming-distance",
	"slug": "yi-ming-ju-chi-zong-he-by-leetcode-solut-t0ev",
	"url": "https://leetcode-cn.com/problems/total-hamming-distance/solution/yi-ming-ju-chi-zong-he-by-leetcode-solut-t0ev/",
	"content": "#### 方法一：逐位统计\n\n在计算汉明距离时，我们考虑的是同一比特位上的值是否不同，而不同比特位之间是互不影响的。\n\n对于数组 $\\textit{nums}$ 中的某个元素 $\\textit{val}$，若其二进制的第 $i$ 位为 $1$，我们只需统计 $\\textit{nums}$ 中有多少元素的第 $i$ 位为 $0$，即计算出了 $\\textit{val}$ 与其他元素在第 $i$ 位上的汉明距离之和。\n\n具体地，若长度为 $n$ 的数组 $\\textit{nums}$ 的所有元素二进制的第 $i$ 位共有 $c$ 个 $1$，$n-c$ 个 $0$，则些元素在二进制的第 $i$ 位上的汉明距离之和为\n\n$$\nc\\cdot(n-c)\n$$\n\n我们可以从二进制的最低位到最高位，逐位统计汉明距离。将每一位上得到的汉明距离累加即为答案。\n\n具体实现时，对于整数 $\\textit{val}$ 二进制的第 $i$ 位，我们可以用代码 `(val >> i) & 1` 来取出其第 $i$ 位的值。此外，由于 $10^9<2^{30}$，我们可以直接从二进制的第 $0$ 位枚举到第 $29$ 位。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int totalHammingDistance(vector<int> &nums) {\n        int ans = 0, n = nums.size();\n        for (int i = 0; i < 30; ++i) {\n            int c = 0;\n            for (int val : nums) {\n                c += (val >> i) & 1;\n            }\n            ans += c * (n - c);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int totalHammingDistance(int[] nums) {\n        int ans = 0, n = nums.length;\n        for (int i = 0; i < 30; ++i) {\n            int c = 0;\n            for (int val : nums) {\n                c += (val >> i) & 1;\n            }\n            ans += c * (n - c);\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int TotalHammingDistance(int[] nums) {\n        int ans = 0, n = nums.Length;\n        for (int i = 0; i < 30; ++i) {\n            int c = 0;\n            foreach (int val in nums) {\n                c += (val >> i) & 1;\n            }\n            ans += c * (n - c);\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc totalHammingDistance(nums []int) (ans int) {\n    n := len(nums)\n    for i := 0; i < 30; i++ {\n        c := 0\n        for _, val := range nums {\n            c += val >> i & 1\n        }\n        ans += c * (n - c)\n    }\n    return\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = 0\n        for i in range(30):\n            c = sum(((val >> i) & 1) for val in nums)\n            ans += c * (n - c)\n        return ans\n```\n\n```C [sol1-C]\nint totalHammingDistance(int* nums, int numsSize) {\n    int ans = 0;\n    for (int i = 0; i < 30; ++i) {\n        int c = 0;\n        for (int j = 0; j < numsSize; ++j) {\n            c += (nums[j] >> i) & 1;\n        }\n        ans += c * (numsSize - c);\n    }\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar totalHammingDistance = function(nums) {\n    let ans = 0, n = nums.length;\n    for (let i = 0; i < 30; ++i) {\n        let c = 0;\n        for (const val of nums) {\n            c += (val >> i) & 1;\n        }\n        ans += c * (n - c);\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\cdot L)$。其中 $n$ 是数组 $\\textit{nums}$ 的长度，$L=30$。\n\n- 空间复杂度：$O(1)$。\n\n---\n## ✨扣友帮帮团 - 互动答疑\n\n[![讨论.jpg](https://pic.leetcode-cn.com/1621178600-MKHFrl-%E8%AE%A8%E8%AE%BA.jpg){:width=260px}](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/)\n\n\n即日起 - 5 月 30 日，点击 [这里](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/) 前往「[扣友帮帮团](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/)」活动页，把你遇到的问题大胆地提出来，让扣友为你解答～\n\n### 🎁 奖励规则\n被采纳数量排名 1～3 名：「力扣极客套装」 *1 并将获得「力扣神秘应援团」内测资格\n被采纳数量排名 4～10 名：「力扣鼠标垫」 *1 并将获得「力扣神秘应援团」内测资格\n「诲人不倦」：活动期间「解惑者」只要有 1 个回答被采纳，即可获得 20 LeetCoins 奖励！\n「求知若渴」：活动期间「求知者」在活动页发起一次符合要求的疑问帖并至少采纳一次「解惑者」的回答，即可获得 20 LeetCoins 奖励！\n\n活动详情猛戳链接了解更多：[🐞 你有 BUG 我来帮 - 力扣互动答疑季](https://leetcode-cn.com/circle/discuss/xtliW6/)"
}