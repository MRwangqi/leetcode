{
	"titleSlug": "21dk04",
	"slug": "zi-xu-lie-de-shu-mu-by-leetcode-solution-l8v1",
	"url": "https://leetcode-cn.com/problems/21dk04/solution/zi-xu-lie-de-shu-mu-by-leetcode-solution-l8v1/",
	"content": "#### 方法一：动态规划\n\n假设字符串 $s$ 和 $t$ 的长度分别为 $m$ 和 $n$。如果 $t$ 是 $s$ 的子序列，则 $s$ 的长度一定大于或等于 $t$ 的长度，即只有当 $m \\ge n$ 时，$t$ 才可能是 $s$ 的子序列。如果 $m<n$，则 $t$ 一定不是 $s$ 的子序列，因此直接返回 $0$。\n\n当 $m \\ge n$ 时，可以通过动态规划的方法计算在 $s$ 的子序列中 $t$ 出现的个数。\n\n创建二维数组 $\\textit{dp}$，其中 $\\textit{dp}[i][j]$ 表示在 $s[i:]$ 的子序列中 $t[j:]$ 出现的个数。\n\n> 上述表示中，$s[i:]$ 表示 $s$ 从下标 $i$ 到末尾的子字符串，$t[j:]$ 表示 $t$ 从下标 $j$ 到末尾的子字符串。\n\n考虑动态规划的边界情况：\n\n- 当 $j=n$ 时，$t[j:]$ 为空字符串，由于空字符串是任何字符串的子序列，因此对任意 $0 \\le i \\le m$，有 $\\textit{dp}[i][n]=1$；\n\n- 当 $i=m$ 且 $j<n$ 时，$s[i:]$ 为空字符串，$t[j:]$ 为非空字符串，由于非空字符串不是空字符串的子序列，因此对任意 $0 \\le j<n$，有 $\\textit{dp}[m][j]=0$。\n\n当 $i<m$ 且 $j<n$ 时，考虑 $\\textit{dp}[i][j]$ 的计算：\n\n- 当 $s[i]=t[j]$ 时，$\\textit{dp}[i][j]$ 由两部分组成：\n\n   - 如果 $s[i]$ 和 $t[j]$ 匹配，则考虑 $t[j+1:]$ 作为 $s[i+1:]$ 的子序列，子序列数为 $\\textit{dp}[i+1][j+1]$；\n\n   - 如果 $s[i]$ 不和 $t[j]$ 匹配，则考虑 $t[j:]$ 作为 $s[i+1:]$ 的子序列，子序列数为 $\\textit{dp}[i+1][j]$。\n\n   因此当 $s[i]=t[j]$ 时，有 $\\textit{dp}[i][j]=\\textit{dp}[i+1][j+1]+\\textit{dp}[i+1][j]$。\n\n- 当 $s[i] \\ne t[j]$ 时，$s[i]$ 不能和 $t[j]$ 匹配，因此只考虑 $t[j:]$ 作为 $s[i+1:]$ 的子序列，子序列数为 $\\textit{dp}[i+1][j]$。\n\n   因此当 $s[i] \\ne t[j]$ 时，有 $\\textit{dp}[i][j]=\\textit{dp}[i+1][j]$。\n\n由此可以得到如下状态转移方程：\n\n$$\n\\textit{dp}[i][j] = \\begin{cases}\n\\textit{dp}[i+1][j+1]+\\textit{dp}[i+1][j], & s[i]=t[j]\\\\\n\\textit{dp}[i+1][j], & s[i] \\ne t[j]\n\\end{cases}\n$$\n\n最终计算得到 $\\textit{dp}[0][0]$ 即为在 $s$ 的子序列中 $t$ 出现的个数。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/14.png),![ppt15](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/15.png),![ppt16](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/16.png),![ppt17](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/17.png),![ppt18](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/18.png),![ppt19](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/19.png),![ppt20](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/20.png),![ppt21](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/21.png),![ppt22](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/22.png),![ppt23](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/23.png),![ppt24](https://assets.leetcode-cn.com/solution-static/jianzhi_II_097/24.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public int numDistinct(String s, String t) {\n        int m = s.length(), n = t.length();\n        if (m < n) {\n            return 0;\n        }\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 0; i <= m; i++) {\n            dp[i][n] = 1;\n        }\n        for (int i = m - 1; i >= 0; i--) {\n            char sChar = s.charAt(i);\n            for (int j = n - 1; j >= 0; j--) {\n                char tChar = t.charAt(j);\n                if (sChar == tChar) {\n                    dp[i][j] = dp[i + 1][j + 1] + dp[i + 1][j];\n                } else {\n                    dp[i][j] = dp[i + 1][j];\n                }\n            }\n        }\n        return dp[0][0];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar numDistinct = function(s, t) {\n    const m = s.length, n = t.length;\n    if (m < n) {\n        return 0;\n    }\n    const dp = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0));\n    for (let i = 0; i <= m; i++) {\n        dp[i][n] = 1;\n    }\n    for (let i = m - 1; i >= 0; i--) {\n        for (let j = n - 1; j >= 0; j--) {\n            if (s[i] == t[j]) {\n                dp[i][j] = dp[i + 1][j + 1] + dp[i + 1][j];\n            } else {\n                dp[i][j] = dp[i + 1][j];\n            }\n        }\n    }\n    return dp[0][0];\n};\n```\n\n```go [sol1-Golang]\nfunc numDistinct(s, t string) int {\n    m, n := len(s), len(t)\n    if m < n {\n        return 0\n    }\n    dp := make([][]int, m+1)\n    for i := range dp {\n        dp[i] = make([]int, n+1)\n        dp[i][n] = 1\n    }\n    for i := m - 1; i >= 0; i-- {\n        for j := n - 1; j >= 0; j-- {\n            if s[i] == t[j] {\n                dp[i][j] = dp[i+1][j+1] + dp[i+1][j]\n            } else {\n                dp[i][j] = dp[i+1][j]\n            }\n        }\n    }\n    return dp[0][0]\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        m, n = len(s), len(t)\n        if m < n:\n            return 0\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][n] = 1\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if s[i] == t[j]:\n                    dp[i][j] = dp[i + 1][j + 1] + dp[i + 1][j]\n                else:\n                    dp[i][j] = dp[i + 1][j]\n        \n        return dp[0][0]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numDistinct(string s, string t) {\n        int m = s.length(), n = t.length();\n        if (m < n) {\n            return 0;\n        }\n        vector<vector<unsigned long long>> dp(m + 1, vector<unsigned long long>(n + 1));\n        for (int i = 0; i <= m; i++) {\n            dp[i][n] = 1;\n        }\n        for (int i = m - 1; i >= 0; i--) {\n            char sChar = s.at(i);\n            for (int j = n - 1; j >= 0; j--) {\n                char tChar = t.at(j);\n                if (sChar == tChar) {\n                    dp[i][j] = dp[i + 1][j + 1] + dp[i + 1][j];\n                } else {\n                    dp[i][j] = dp[i + 1][j];\n                }\n            }\n        }\n        return dp[0][0];\n    }\n};\n```\n\n```C [sol1-C]\nint numDistinct(char* s, char* t) {\n    int m = strlen(s), n = strlen(t);\n    if (m < n) {\n        return 0;\n    }\n    unsigned long long dp[m + 1][n + 1];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i <= m; i++) {\n        dp[i][n] = 1;\n    }\n    for (int i = m - 1; i >= 0; i--) {\n        char sChar = s[i];\n        for (int j = n - 1; j >= 0; j--) {\n            char tChar = t[j];\n            if (sChar == tChar) {\n                dp[i][j] = dp[i + 1][j + 1] + dp[i + 1][j];\n            } else {\n                dp[i][j] = dp[i + 1][j];\n            }\n        }\n    }\n    return dp[0][0];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是字符串 $s$ 和 $t$ 的长度。二维数组 $\\textit{dp}$ 有 $m+1$ 行和 $n+1$ 列，需要对 $\\textit{dp}$ 中的每个元素进行计算。\n\n- 空间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是字符串 $s$ 和 $t$ 的长度。创建了 $m+1$ 行 $n+1$ 列的二维数组 $\\textit{dp}$。"
}