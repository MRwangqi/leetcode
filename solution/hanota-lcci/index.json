{
	"titleSlug": "hanota-lcci",
	"slug": "tu-jie-yi-nuo-ta-de-gu-shi-ju-shuo-dang-64ge-pan-z",
	"url": "https://leetcode-cn.com/problems/hanota-lcci/solution/tu-jie-yi-nuo-ta-de-gu-shi-ju-shuo-dang-64ge-pan-z/",
	"content": "### Tower of Hanoi\n\n>相传在很久以前，有个寺庙里的几个和尚整天不停地移动着 64 个盘子，日复一日，年复一年。据说，当 64 个盘子全部移完的那一天就是世界末日...\n\n### 问题描述\n有 A,B,C 三根柱子，A 上面有 n 个盘子，我们想把 A 上面的盘子移动到 C 上，但是要满足以下三个条件：\n1. 每次只能移动一个盘子;\n2. 盘子只能从柱子顶端滑出移到下一根柱子;\n3. 盘子只能叠在比它大的盘子上。\n\n![p1.png](https://pic.leetcode-cn.com/7043dec266338d396d186805072660d5f9517e2c1008af80d461b553c5b32470-p1.png){:width=500}\n\n### 解题思路：递归与分治\n这是一道递归方法的经典题目，乍一想还挺难理清头绪的，我们不妨先从简单的入手。\n\n假设 `n = 1`,只有一个盘子，很简单，直接把它从 A 中拿出来，移到 C 上；\n\n如果 `n = 2` 呢？这时候我们就要借助 B 了，因为小盘子必须时刻都在大盘子上面，共需要 4 步。\n\n![0806.gif](https://pic.leetcode-cn.com/f6f3b97651247c9ff846f115e1866ab364b1c0e265fd51689ddd6a8ca1758482-0806.gif){:width=500}\n\n\n如果  `n > 2` 呢？思路和上面是一样的，我们把 n 个盘子也看成两个部分，一部分有 1 个盘子，另一部分有 n - 1 个盘子。\n\n![08061.gif](https://pic.leetcode-cn.com/3bffd1a1faf4323a92b659e37d7e2cd6c79fe074602b2977f4a7931fe82bbb13-08061.gif){:width=500}\n\n\n\n观察上图，你可能会问：“那 n - 1 个盘子是怎么从 A 移到 C 的呢？”\n\n注意，**当你在思考这个问题的时候，就将最初的 n 个盘子从 A 移到 C 的问题，转化成了将 n - 1 个盘子从 A 移到 C 的问题，** 依次类推，直至转化成 1 个盘子的问题时，问题也就解决了。这就是分治的思想。 \n\n而实现分治思想的常用方法就是递归。不难发现，如果原问题可以分解成若干个与原问题结构相同但规模较小的子问题时，往往可以用递归的方法解决。具体解决办法如下：\n- `n = 1` 时，直接把盘子从 A 移到 C；\n- `n > 1` 时，\n    - 先把上面 n - 1 个盘子从 A 移到 B（子问题，递归）；\n    - 再将最大的盘子从 A 移到 C；\n    - 再将 B 上 n - 1 个盘子从 B 移到 C（子问题，递归）。\n\n\n### 代码\n\n```python []\nclass Solution:\n    def hanota(self, A: List[int], B: List[int], C: List[int]) -> None:\n        n = len(A)\n        self.move(n, A, B, C)\n    # 定义move 函数移动汉诺塔\n    def move(self,n, A, B, C):\n        if n == 1:\n            C.append(A[-1])\n            A.pop()\n            return \n        else:\n            self.move(n-1, A, C, B)  # 将A上面n-1个通过C移到B\n            C.append(A[-1])          # 将A最后一个移到C\n            A.pop()                  # 这时，A空了\n            self.move(n-1,B, A, C)   # 将B上面n-1个通过空的A移到C\n```\n\n```cpp []\nclass Solution {\npublic:\n    void hanota(vector<int>& A, vector<int>& B, vector<int>& C) {\n        int n = A.size();\n        move(n, A, B, C);\n    }\n\n    void move(int n, vector<int>& A, vector<int>& B, vector<int>& C){\n        if (n == 1){\n            C.push_back(A.back());\n            A.pop_back();\n            return;\n        }\n\n        move(n-1, A, C, B);    // 将A上面n-1个通过C移到B\n        C.push_back(A.back());  // 将A最后一个移到C\n        A.pop_back();          // 这时，A空了\n        move(n-1, B, A, C);     // 将B上面n-1个通过空的A移到C\n    }\n};\n```\n\n### 复杂度分析：世界会毁灭吗\n- 时间复杂度：$O(2^n-1)$。一共需要移动的次数。\n- 空间复杂度：$O(1)$。\n\n\n当 `n = 64`时，也就是有 64 个盘子的时候，如果每秒移动一个盘子，大约需要 $1.8\\times10^{19}$ 秒...\n\n那个时候地球会毁灭吗？\n\n也许会，也许不会。\n"
}