{
	"titleSlug": "destination-city",
	"slug": "lu-xing-zhong-dian-zhan-by-leetcode-solu-pscd",
	"url": "https://leetcode-cn.com/problems/destination-city/solution/lu-xing-zhong-dian-zhan-by-leetcode-solu-pscd/",
	"content": "#### 方法一：哈希表\n\n根据终点站的定义，终点站不会出现在 $\\textit{cityA}_i$ 中，因为存在从 $\\textit{cityA}_i$ 出发的线路，所以终点站只会出现在 $\\textit{cityB}_i$ 中。据此，我们可以遍历 $\\textit{cityB}_i$，返回不在 $\\textit{cityA}_i$ 中的城市，即为答案。\n\n代码实现时，可以先将所有 $\\textit{cityA}_i$ 存于一哈希表中，然后遍历 $\\textit{cityB}_i$ 并查询 $\\textit{cityB}_i$ 是否在哈希表中。\n\n```Python [sol1-Python3]\nclass Solution:\n    def destCity(self, paths: List[List[str]]) -> str:\n        citiesA = {path[0] for path in paths}\n        return next(path[1] for path in paths if path[1] not in citiesA)\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string destCity(vector<vector<string>> &paths) {\n        unordered_set<string> citiesA;\n        for (auto &path : paths) {\n            citiesA.insert(path[0]);\n        }\n        for (auto &path : paths) {\n            if (!citiesA.count(path[1])) {\n                return path[1];\n            }\n        }\n        return \"\";\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String destCity(List<List<String>> paths) {\n        Set<String> citiesA = new HashSet<String>();\n        for (List<String> path : paths) {\n            citiesA.add(path.get(0));\n        }\n        for (List<String> path : paths) {\n            if (!citiesA.contains(path.get(1))) {\n                return path.get(1);\n            }\n        }\n        return \"\";\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string DestCity(IList<IList<string>> paths) {\n        ISet<string> citiesA = new HashSet<string>();\n        foreach (IList<string> path in paths) {\n            citiesA.Add(path[0]);\n        }\n        foreach (IList<string> path in paths) {\n            if (!citiesA.Contains(path[1])) {\n                return path[1];\n            }\n        }\n        return \"\";\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc destCity(paths [][]string) string {\n    citiesA := map[string]bool{}\n    for _, path := range paths {\n        citiesA[path[0]] = true\n    }\n    for _, path := range paths {\n        if !citiesA[path[1]] {\n            return path[1]\n        }\n    }\n    return \"\"\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar destCity = function(paths) {\n    const citiesA = new Set();\n    for (const path of paths) {\n        citiesA.add(path[0]);\n    }\n    for (const path of paths) {\n        if (!citiesA.has(path[1])) {\n            return path[1];\n        }\n    }\n    return \"\";\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nm)$，其中 $n$ 是数组 $\\textit{paths}$ 的长度，$m$ 是城市名称的最大长度。\n\n- 空间复杂度：$O(nm)$。"
}