{
	"titleSlug": "max-sum-of-rectangle-no-larger-than-k",
	"slug": "ju-xing-qu-yu-bu-chao-guo-k-de-zui-da-sh-70q2",
	"url": "https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/solution/ju-xing-qu-yu-bu-chao-guo-k-de-zui-da-sh-70q2/",
	"content": "#### 方法一：有序集合\n\n**思路**\n\n我们枚举矩形的上下边界，并计算出该边界内每列的元素和，则原问题转换成了如下一维问题：\n\n> 给定一个整数数组和一个整数 $k$，计算该数组的最大区间和，要求区间和不超过 $k$。\n\n定义长度为 $n$ 的数组 $a$ 的前缀和\n\n$$\nS_i =\n\\begin{cases} \n0&i=0\\\\\na_0+a_1+\\cdots+a_{i-1}&1\\le i\\le n\n\\end{cases}\n$$\n\n则区间 $[l,r)$ 的区间和 $a_l+a_{l+1}+\\cdots+a_{r-1}$ 可以表示为 $S_r-S_l$。\n\n枚举 $r$，上述问题的约束 $S_r-S_l\\le k$ 可以转换为 $S_l\\ge S_r-k$。要使 $S_r-S_l$ 尽可能大，则需要寻找最小的满足 $S_l\\ge S_r-k$ 的 $S_l$。我们可以在枚举 $r$ 的同时维护一个存储 $S_i\\ (i<r)$ 的有序集合，则可以在 $O(\\log n)$ 的时间内二分找到符合要求的 $S_l$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxSumSubmatrix(vector<vector<int>> &matrix, int k) {\n        int ans = INT_MIN;\n        int m = matrix.size(), n = matrix[0].size();\n        for (int i = 0; i < m; ++i) { // 枚举上边界\n            vector<int> sum(n);\n            for (int j = i; j < m; ++j) { // 枚举下边界\n                for (int c = 0; c < n; ++c) {\n                    sum[c] += matrix[j][c]; // 更新每列的元素和\n                }\n                set<int> sumSet{0};\n                int s = 0;\n                for (int v : sum) {\n                    s += v;\n                    auto lb = sumSet.lower_bound(s - k);\n                    if (lb != sumSet.end()) {\n                        ans = max(ans, s - *lb);\n                    }\n                    sumSet.insert(s);\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxSumSubmatrix(int[][] matrix, int k) {\n        int ans = Integer.MIN_VALUE;\n        int m = matrix.length, n = matrix[0].length;\n        for (int i = 0; i < m; ++i) { // 枚举上边界\n            int[] sum = new int[n];\n            for (int j = i; j < m; ++j) { // 枚举下边界\n                for (int c = 0; c < n; ++c) {\n                    sum[c] += matrix[j][c]; // 更新每列的元素和\n                }\n                TreeSet<Integer> sumSet = new TreeSet<Integer>();\n                sumSet.add(0);\n                int s = 0;\n                for (int v : sum) {\n                    s += v;\n                    Integer ceil = sumSet.ceiling(s - k);\n                    if (ceil != null) {\n                        ans = Math.max(ans, s - ceil);\n                    }\n                    sumSet.add(s);\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nimport \"math/rand\"\n\ntype node struct {\n    ch       [2]*node\n    priority int\n    val      int\n}\n\nfunc (o *node) cmp(b int) int {\n    switch {\n    case b < o.val:\n        return 0\n    case b > o.val:\n        return 1\n    default:\n        return -1\n    }\n}\n\nfunc (o *node) rotate(d int) *node {\n    x := o.ch[d^1]\n    o.ch[d^1] = x.ch[d]\n    x.ch[d] = o\n    return x\n}\n\ntype treap struct {\n    root *node\n}\n\nfunc (t *treap) _put(o *node, val int) *node {\n    if o == nil {\n        return &node{priority: rand.Int(), val: val}\n    }\n    if d := o.cmp(val); d >= 0 {\n        o.ch[d] = t._put(o.ch[d], val)\n        if o.ch[d].priority > o.priority {\n            o = o.rotate(d ^ 1)\n        }\n    }\n    return o\n}\n\nfunc (t *treap) put(val int) {\n    t.root = t._put(t.root, val)\n}\n\nfunc (t *treap) lowerBound(val int) (lb *node) {\n    for o := t.root; o != nil; {\n        switch c := o.cmp(val); {\n        case c == 0:\n            lb = o\n            o = o.ch[0]\n        case c > 0:\n            o = o.ch[1]\n        default:\n            return o\n        }\n    }\n    return\n}\n\nfunc maxSumSubmatrix(matrix [][]int, k int) int {\n    ans := math.MinInt64\n    for i := range matrix { // 枚举上边界\n        sum := make([]int, len(matrix[0]))\n        for _, row := range matrix[i:] { // 枚举下边界\n            for c, v := range row {\n                sum[c] += v // 更新每列的元素和\n            }\n            t := &treap{}\n            t.put(0)\n            s := 0\n            for _, v := range sum {\n                s += v\n                if lb := t.lowerBound(s - k); lb != nil {\n                    ans = max(ans, s-lb.val)\n                }\n                t.put(s)\n            }\n        }\n    }\n    return ans\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol1-Python3]\nfrom sortedcontainers import SortedList\n\nclass Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n        ans = float(\"-inf\")\n        m, n = len(matrix), len(matrix[0])\n\n        for i in range(m):   # 枚举上边界\n            total = [0] * n\n            for j in range(i, m):   # 枚举下边界\n                for c in range(n):\n                    total[c] += matrix[j][c]   # 更新每列的元素和\n                \n                totalSet = SortedList([0])\n                s = 0\n                for v in total:\n                    s += v\n                    lb = totalSet.bisect_left(s - k)\n                    if lb != len(totalSet):\n                        ans = max(ans, s - totalSet[lb])\n                    totalSet.add(s)\n\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m^2n\\log n)$。其中 $m$ 和 $n$ 分别是矩阵 $\\textit{matrix}$ 的行数和列数。\n\n- 空间复杂度：$O(n)$。\n\n#### 进阶问题\n\n对于行数远大于列数的情况，枚举矩形的左右边界更优，对应的时间复杂度为 $O(n^2m\\log m)$。\n\n总之，根据 $m$ 和 $n$ 的大小来细化枚举策略，我们可以做到 $O(\\min(m,n)^2\\max(m,n)\\log\\max(m,n))$ 的时间复杂度。\n\n---\n# [📚 好读书？读好书！让时间更有价值| 世界读书日](https://leetcode-cn.com/circle/discuss/12QtuI/)\n4 月 22 日至 4 月 28 日，进入「[学习](https://leetcode-cn.com/leetbook/)」，完成页面右上角的「让时间更有价值」限时阅读任务，可获得「2021 读书日纪念勋章」。更多活动详情戳上方标题了解更多👆\n#### 今日学习任务：\n- 理解多态的概念\n[完成阅读 2.4 多态让消息的发送方法通用](https://leetcode-cn.com/leetbook/read/how-objects-work/o1dk4g/)\n- 理解结构化编程\n[完成阅读 3.5 重视易懂性的结构化编程](https://leetcode-cn.com/leetbook/read/how-objects-work/oy2zle/)\n\n"
}