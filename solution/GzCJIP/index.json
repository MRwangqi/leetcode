{
	"titleSlug": "GzCJIP",
	"slug": "pa-lou-ti-de-zui-shao-cheng-ben-by-leetc-xx4h",
	"url": "https://leetcode-cn.com/problems/GzCJIP/solution/pa-lou-ti-de-zui-shao-cheng-ben-by-leetc-xx4h/",
	"content": "#### 方法一：动态规划\n\n假设数组 $\\textit{cost}$ 的长度为 $n$，则 $n$ 个阶梯分别对应下标 $0$ 到 $n-1$，楼层顶部对应下标 $n$，问题等价于计算达到下标 $n$ 的最小花费。可以通过动态规划求解。\n\n创建长度为 $n+1$ 的数组 $\\textit{dp}$，其中 $\\textit{dp}[i]$ 表示达到下标 $i$ 的最小花费。\n\n由于可以选择下标 $0$ 或 $1$ 作为初始阶梯，因此有 $\\textit{dp}[0]=\\textit{dp}[1]=0$。\n\n当 $2 \\le i \\le n$ 时，可以从下标 $i-1$ 使用 $\\textit{cost}[i-1]$ 的花费达到下标 $i$，或者从下标 $i-2$ 使用 $\\textit{cost}[i-2]$ 的花费达到下标 $i$。为了使总花费最小，$\\textit{dp}[i]$ 应取上述两项的最小值，因此状态转移方程如下：\n\n$$\n\\textit{dp}[i]=\\min(\\textit{dp}[i-1]+\\textit{cost}[i-1],\\textit{dp}[i-2]+\\textit{cost}[i-2])\n$$\n\n依次计算 $\\textit{dp}$ 中的每一项的值，最终得到的 $\\textit{dp}[n]$ 即为达到楼层顶部的最小花费。\n\n```Java [sol1-Java]\nclass Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        int n = cost.length;\n        int[] dp = new int[n + 1];\n        dp[0] = dp[1] = 0;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);\n        }\n        return dp[n];\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MinCostClimbingStairs(int[] cost) {\n        int n = cost.Length;\n        int[] dp = new int[n + 1];\n        dp[0] = dp[1] = 0;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.Min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);\n        }\n        return dp[n];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minCostClimbingStairs = function(cost) {\n    const n = cost.length;\n    const dp = new Array(n + 1);\n    dp[0] = dp[1] = 0;\n    for (let i = 2; i <= n; i++) {\n        dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);\n    }\n    return dp[n];\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n        vector<int> dp(n + 1);\n        dp[0] = dp[1] = 0;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);\n        }\n        return dp[n];\n    }\n};\n```\n\n```Go [sol1-Golang]\nfunc minCostClimbingStairs(cost []int) int {\n    n := len(cost)\n    dp := make([]int, n+1)\n    for i := 2; i <= n; i++ {\n        dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])\n    }\n    return dp[n]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        n = len(cost)\n        dp = [0] * (n + 1)\n        for i in range(2, n + 1):\n            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2])\n        return dp[n]\n```\n\n```C [sol1-C]\nint minCostClimbingStairs(int* cost, int costSize) {\n    int dp[costSize + 1];\n    dp[0] = dp[1] = 0;\n    for (int i = 2; i <= costSize; i++) {\n        dp[i] = fmin(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);\n    }\n    return dp[costSize];\n}\n```\n\n上述代码的时间复杂度和空间复杂度都是 $O(n)$。注意到当 $i \\ge 2$ 时，$\\textit{dp}[i]$ 只和 $\\textit{dp}[i-1]$ 与 $\\textit{dp}[i-2]$ 有关，因此可以使用滚动数组的思想，将空间复杂度优化到 $O(1)$。\n\n```Java [sol2-Java]\nclass Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        int n = cost.length;\n        int prev = 0, curr = 0;\n        for (int i = 2; i <= n; i++) {\n            int next = Math.min(curr + cost[i - 1], prev + cost[i - 2]);\n            prev = curr;\n            curr = next;\n        }\n        return curr;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int MinCostClimbingStairs(int[] cost) {\n        int n = cost.Length;\n        int prev = 0, curr = 0;\n        for (int i = 2; i <= n; i++) {\n            int next = Math.Min(curr + cost[i - 1], prev + cost[i - 2]);\n            prev = curr;\n            curr = next;\n        }\n        return curr;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar minCostClimbingStairs = function(cost) {\n    const n = cost.length;\n    let prev = 0, curr = 0;\n    for (let i = 2; i <= n; i++) {\n        let next = Math.min(curr + cost[i - 1], prev + cost[i - 2]);\n        prev = curr;\n        curr = next;\n    }\n    return curr;\n};\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n        int prev = 0, curr = 0;\n        for (int i = 2; i <= n; i++) {\n            int next = min(curr + cost[i - 1], prev + cost[i - 2]);\n            prev = curr;\n            curr = next;\n        }\n        return curr;\n    }\n};\n```\n\n```Go [sol2-Golang]\nfunc minCostClimbingStairs(cost []int) int {\n    n := len(cost)\n    pre, cur := 0, 0\n    for i := 2; i <= n; i++ {\n        pre, cur = cur, min(cur+cost[i-1], pre+cost[i-2])\n    }\n    return cur\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        n = len(cost)\n        prev = curr = 0\n        for i in range(2, n + 1):\n            nxt = min(curr + cost[i - 1], prev + cost[i - 2])\n            prev, curr = curr, nxt\n        return curr\n```\n\n```C [sol2-C]\nint minCostClimbingStairs(int* cost, int costSize) {\n    int prev = 0, curr = 0;\n    for (int i = 2; i <= costSize; i++) {\n        int next = fmin(curr + cost[i - 1], prev + cost[i - 2]);\n        prev = curr;\n        curr = next;\n    }\n    return curr;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{cost}$ 的长度。需要依次计算每个 $\\textit{dp}$ 值，每个值的计算需要常数时间，因此总时间复杂度是 $O(n)$。\n\n- 空间复杂度：$O(1)$。使用滚动数组的思想，只需要使用有限的额外空间。"
}