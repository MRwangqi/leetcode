{
	"titleSlug": "7WHec2",
	"slug": "lian-biao-pai-xu-by-leetcode-solution-0rjx",
	"url": "https://leetcode-cn.com/problems/7WHec2/solution/lian-biao-pai-xu-by-leetcode-solution-0rjx/",
	"content": "#### 前言\n\n这道题考虑时间复杂度优于 $O(n^2)$ 的排序算法。题目的进阶问题要求达到 $O(n \\log n)$ 的时间复杂度和 $O(1)$ 的空间复杂度，时间复杂度是 $O(n \\log n)$ 的排序算法包括归并排序、堆排序和快速排序（快速排序的最差时间复杂度是 $O(n^2)$），其中最适合链表的排序算法是归并排序。\n\n归并排序基于分治算法。最容易想到的实现方式是自顶向下的递归实现，考虑到递归调用的栈空间，自顶向下归并排序的空间复杂度是 $O(\\log n)$。如果要达到 $O(1)$ 的空间复杂度，则需要使用自底向上的实现方式。\n\n#### 方法一：自顶向下归并排序\n\n对链表自顶向下归并排序的过程如下。\n\n1. 找到链表的中点，以中点为分界，将链表拆分成两个子链表。寻找链表的中点可以使用快慢指针的做法，快指针每次移动 $2$ 步，慢指针每次移动 $1$ 步，当快指针到达链表末尾时，慢指针指向的链表节点即为链表的中点。\n\n2. 对两个子链表分别排序。\n\n3. 将两个排序后的子链表合并，得到完整的排序后的链表。\n\n上述过程可以通过递归实现。递归的终止条件是链表的节点个数小于或等于 $1$，即当链表为空或者链表只包含 $1$ 个节点时，不需要对链表进行拆分和排序。\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        return sortList(head, null);\n    }\n\n    public ListNode sortList(ListNode head, ListNode tail) {\n        if (head == null) {\n            return head;\n        }\n        if (head.next == tail) {\n            head.next = null;\n            return head;\n        }\n        ListNode slow = head, fast = head;\n        while (fast != tail) {\n            slow = slow.next;\n            fast = fast.next;\n            if (fast != tail) {\n                fast = fast.next;\n            }\n        }\n        ListNode mid = slow;\n        ListNode list1 = sortList(head, mid);\n        ListNode list2 = sortList(mid, tail);\n        ListNode sorted = merge(list1, list2);\n        return sorted;\n    }\n\n    public ListNode merge(ListNode head1, ListNode head2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode temp = dummyHead, temp1 = head1, temp2 = head2;\n        while (temp1 != null && temp2 != null) {\n            if (temp1.val <= temp2.val) {\n                temp.next = temp1;\n                temp1 = temp1.next;\n            } else {\n                temp.next = temp2;\n                temp2 = temp2.next;\n            }\n            temp = temp.next;\n        }\n        if (temp1 != null) {\n            temp.next = temp1;\n        } else if (temp2 != null) {\n            temp.next = temp2;\n        }\n        return dummyHead.next;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        return sortList(head, nullptr);\n    }\n\n    ListNode* sortList(ListNode* head, ListNode* tail) {\n        if (head == nullptr) {\n            return head;\n        }\n        if (head->next == tail) {\n            head->next = nullptr;\n            return head;\n        }\n        ListNode* slow = head, *fast = head;\n        while (fast != tail) {\n            slow = slow->next;\n            fast = fast->next;\n            if (fast != tail) {\n                fast = fast->next;\n            }\n        }\n        ListNode* mid = slow;\n        return merge(sortList(head, mid), sortList(mid, tail));\n    }\n\n    ListNode* merge(ListNode* head1, ListNode* head2) {\n        ListNode* dummyHead = new ListNode(0);\n        ListNode* temp = dummyHead, *temp1 = head1, *temp2 = head2;\n        while (temp1 != nullptr && temp2 != nullptr) {\n            if (temp1->val <= temp2->val) {\n                temp->next = temp1;\n                temp1 = temp1->next;\n            } else {\n                temp->next = temp2;\n                temp2 = temp2->next;\n            }\n            temp = temp->next;\n        }\n        if (temp1 != nullptr) {\n            temp->next = temp1;\n        } else if (temp2 != nullptr) {\n            temp->next = temp2;\n        }\n        return dummyHead->next;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nconst merge = (head1, head2) => {\n    const dummyHead = new ListNode(0);\n    let temp = dummyHead, temp1 = head1, temp2 = head2;\n    while (temp1 !== null && temp2 !== null) {\n        if (temp1.val <= temp2.val) {\n            temp.next = temp1;\n            temp1 = temp1.next;\n        } else {\n            temp.next = temp2;\n            temp2 = temp2.next;\n        }\n        temp = temp.next;\n    }\n    if (temp1 !== null) {\n        temp.next = temp1;\n    } else if (temp2 !== null) {\n        temp.next = temp2;\n    }\n    return dummyHead.next;\n}\n\nconst toSortList = (head, tail) => {\n    if (head === null) {\n        return head;\n    }\n    if (head.next === tail) {\n        head.next = null;\n        return head;\n    }\n    let slow = head, fast = head;\n    while (fast !== tail) {\n        slow = slow.next;\n        fast = fast.next;\n        if (fast !== tail) {\n            fast = fast.next;\n        }\n    }\n    const mid = slow;\n    return merge(toSortList(head, mid), toSortList(mid, tail));\n}\n\nvar sortList = function(head) {\n    return toSortList(head, null);\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        def sortFunc(head: ListNode, tail: ListNode) -> ListNode:\n            if not head:\n                return head\n            if head.next == tail:\n                head.next = None\n                return head\n            slow = fast = head\n            while fast != tail:\n                slow = slow.next\n                fast = fast.next\n                if fast != tail:\n                    fast = fast.next\n            mid = slow\n            return merge(sortFunc(head, mid), sortFunc(mid, tail))\n            \n        def merge(head1: ListNode, head2: ListNode) -> ListNode:\n            dummyHead = ListNode(0)\n            temp, temp1, temp2 = dummyHead, head1, head2\n            while temp1 and temp2:\n                if temp1.val <= temp2.val:\n                    temp.next = temp1\n                    temp1 = temp1.next\n                else:\n                    temp.next = temp2\n                    temp2 = temp2.next\n                temp = temp.next\n            if temp1:\n                temp.next = temp1\n            elif temp2:\n                temp.next = temp2\n            return dummyHead.next\n        \n        return sortFunc(head, None)\n```\n\n```Golang [sol1-Golang]\nfunc merge(head1, head2 *ListNode) *ListNode {\n    dummyHead := &ListNode{}\n    temp, temp1, temp2 := dummyHead, head1, head2\n    for temp1 != nil && temp2 != nil {\n        if temp1.Val <= temp2.Val {\n            temp.Next = temp1\n            temp1 = temp1.Next\n        } else {\n            temp.Next = temp2\n            temp2 = temp2.Next\n        }\n        temp = temp.Next\n    }\n    if temp1 != nil {\n        temp.Next = temp1\n    } else if temp2 != nil {\n        temp.Next = temp2\n    }\n    return dummyHead.Next\n}\n\nfunc sort(head, tail *ListNode) *ListNode {\n    if head == nil {\n        return head\n    }\n\n    if head.Next == tail {\n        head.Next = nil\n        return head\n    }\n\n    slow, fast := head, head\n    for fast != tail {\n        slow = slow.Next\n        fast = fast.Next\n        if fast != tail {\n            fast = fast.Next\n        }\n    }\n\n    mid := slow\n    return merge(sort(head, mid), sort(mid, tail))\n}\n\nfunc sortList(head *ListNode) *ListNode {\n    return sort(head, nil)\n}\n```\n\n```C [sol1-C]\nstruct ListNode* merge(struct ListNode* head1, struct ListNode* head2) {\n    struct ListNode* dummyHead = malloc(sizeof(struct ListNode));\n    dummyHead->val = 0;\n    struct ListNode *temp = dummyHead, *temp1 = head1, *temp2 = head2;\n    while (temp1 != NULL && temp2 != NULL) {\n        if (temp1->val <= temp2->val) {\n            temp->next = temp1;\n            temp1 = temp1->next;\n        } else {\n            temp->next = temp2;\n            temp2 = temp2->next;\n        }\n        temp = temp->next;\n    }\n    if (temp1 != NULL) {\n        temp->next = temp1;\n    } else if (temp2 != NULL) {\n        temp->next = temp2;\n    }\n    return dummyHead->next;\n}\n\nstruct ListNode* toSortList(struct ListNode* head, struct ListNode* tail) {\n    if (head == NULL) {\n        return head;\n    }\n    if (head->next == tail) {\n        head->next = NULL;\n        return head;\n    }\n    struct ListNode *slow = head, *fast = head;\n    while (fast != tail) {\n        slow = slow->next;\n        fast = fast->next;\n        if (fast != tail) {\n            fast = fast->next;\n        }\n    }\n    struct ListNode* mid = slow;\n    return merge(toSortList(head, mid), toSortList(mid, tail));\n}\n\nstruct ListNode* sortList(struct ListNode* head) {\n    return toSortList(head, NULL);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是链表的长度。\n\n- 空间复杂度：$O(\\log n)$，其中 $n$ 是链表的长度。空间复杂度主要取决于递归调用的栈空间。\n\n#### 方法二：自底向上归并排序\n\n使用自底向上的方法实现归并排序，则可以达到 $O(1)$ 的空间复杂度。\n\n首先求得链表的长度 $\\textit{length}$，然后将链表拆分成子链表进行合并。\n\n具体做法如下。\n\n1. 用 $\\textit{subLength}$ 表示每次需要排序的子链表的长度，初始时 $\\textit{subLength}=1$。\n\n2. 每次将链表拆分成若干个长度为 $\\textit{subLength}$ 的子链表（最后一个子链表的长度可以小于 $\\textit{subLength}$），按照每两个子链表一组进行合并，合并后即可得到若干个长度为 $\\textit{subLength} \\times 2$ 的有序子链表（最后一个子链表的长度可以小于 $\\textit{subLength} \\times 2$）。\n\n3. 将 $\\textit{subLength}$ 的值加倍，重复第 2 步，对更长的有序子链表进行合并操作，直到有序子链表的长度大于或等于 $\\textit{length}$，整个链表排序完毕。\n\n如何保证每次合并之后得到的子链表都是有序的呢？可以通过数学归纳法证明。\n\n1. 初始时 $\\textit{subLength}=1$，每个长度为 $1$ 的子链表都是有序的。\n\n2. 如果每个长度为 $\\textit{subLength}$ 的子链表已经有序，合并两个长度为 $\\textit{subLength}$ 的有序子链表，得到长度为 $\\textit{subLength} \\times 2$ 的子链表，一定也是有序的。\n\n3. 当最后一个子链表的长度小于 $\\textit{subLength}$ 时，该子链表也是有序的，合并两个有序子链表之后得到的子链表一定也是有序的。\n\n因此可以保证最后得到的链表是有序的。\n\n```Java [sol2-Java]\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        int length = 0;\n        ListNode node = head;\n        while (node != null) {\n            length++;\n            node = node.next;\n        }\n        ListNode dummyHead = new ListNode(0, head);\n        for (int subLength = 1; subLength < length; subLength <<= 1) {\n            ListNode prev = dummyHead, curr = dummyHead.next;\n            while (curr != null) {\n                ListNode head1 = curr;\n                for (int i = 1; i < subLength && curr.next != null; i++) {\n                    curr = curr.next;\n                }\n                ListNode head2 = curr.next;\n                curr.next = null;\n                curr = head2;\n                for (int i = 1; i < subLength && curr != null && curr.next != null; i++) {\n                    curr = curr.next;\n                }\n                ListNode next = null;\n                if (curr != null) {\n                    next = curr.next;\n                    curr.next = null;\n                }\n                ListNode merged = merge(head1, head2);\n                prev.next = merged;\n                while (prev.next != null) {\n                    prev = prev.next;\n                }\n                curr = next;\n            }\n        }\n        return dummyHead.next;\n    }\n\n    public ListNode merge(ListNode head1, ListNode head2) {\n        ListNode dummyHead = new ListNode(0);\n        ListNode temp = dummyHead, temp1 = head1, temp2 = head2;\n        while (temp1 != null && temp2 != null) {\n            if (temp1.val <= temp2.val) {\n                temp.next = temp1;\n                temp1 = temp1.next;\n            } else {\n                temp.next = temp2;\n                temp2 = temp2.next;\n            }\n            temp = temp.next;\n        }\n        if (temp1 != null) {\n            temp.next = temp1;\n        } else if (temp2 != null) {\n            temp.next = temp2;\n        }\n        return dummyHead.next;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        if (head == nullptr) {\n            return head;\n        }\n        int length = 0;\n        ListNode* node = head;\n        while (node != nullptr) {\n            length++;\n            node = node->next;\n        }\n        ListNode* dummyHead = new ListNode(0, head);\n        for (int subLength = 1; subLength < length; subLength <<= 1) {\n            ListNode* prev = dummyHead, *curr = dummyHead->next;\n            while (curr != nullptr) {\n                ListNode* head1 = curr;\n                for (int i = 1; i < subLength && curr->next != nullptr; i++) {\n                    curr = curr->next;\n                }\n                ListNode* head2 = curr->next;\n                curr->next = nullptr;\n                curr = head2;\n                for (int i = 1; i < subLength && curr != nullptr && curr->next != nullptr; i++) {\n                    curr = curr->next;\n                }\n                ListNode* next = nullptr;\n                if (curr != nullptr) {\n                    next = curr->next;\n                    curr->next = nullptr;\n                }\n                ListNode* merged = merge(head1, head2);\n                prev->next = merged;\n                while (prev->next != nullptr) {\n                    prev = prev->next;\n                }\n                curr = next;\n            }\n        }\n        return dummyHead->next;\n    }\n\n    ListNode* merge(ListNode* head1, ListNode* head2) {\n        ListNode* dummyHead = new ListNode(0);\n        ListNode* temp = dummyHead, *temp1 = head1, *temp2 = head2;\n        while (temp1 != nullptr && temp2 != nullptr) {\n            if (temp1->val <= temp2->val) {\n                temp->next = temp1;\n                temp1 = temp1->next;\n            } else {\n                temp->next = temp2;\n                temp2 = temp2->next;\n            }\n            temp = temp->next;\n        }\n        if (temp1 != nullptr) {\n            temp->next = temp1;\n        } else if (temp2 != nullptr) {\n            temp->next = temp2;\n        }\n        return dummyHead->next;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nconst merge = (head1, head2) => {\n    const dummyHead = new ListNode(0);\n    let temp = dummyHead, temp1 = head1, temp2 = head2;\n    while (temp1 !== null && temp2 !== null) {\n        if (temp1.val <= temp2.val) {\n            temp.next = temp1;\n            temp1 = temp1.next;\n        } else {\n            temp.next = temp2;\n            temp2 = temp2.next;\n        }\n        temp = temp.next;\n    }\n    if (temp1 !== null) {\n        temp.next = temp1;\n    } else if (temp2 !== null) {\n        temp.next = temp2;\n    }\n    return dummyHead.next;\n}\n\nvar sortList = function(head) {\n    if (head === null) {\n        return head;\n    }\n    let length = 0;\n    let node = head;\n    while (node !== null) {\n        length++;\n        node = node.next;\n    }\n    const dummyHead = new ListNode(0, head);\n    for (let subLength = 1; subLength < length; subLength <<= 1) {\n        let prev = dummyHead, curr = dummyHead.next;\n        while (curr !== null) {\n            let head1 = curr;\n            for (let i = 1; i < subLength && curr.next !== null; i++) {\n                curr = curr.next;\n            }\n            let head2 = curr.next;\n            curr.next = null;\n            curr = head2;\n            for (let i = 1; i < subLength && curr != null && curr.next !== null; i++) {\n                curr = curr.next;\n            }\n            let next = null;\n            if (curr !== null) {\n                next = curr.next;\n                curr.next = null;\n            }\n            const merged = merge(head1, head2);\n            prev.next = merged;\n            while (prev.next !== null) {\n                prev = prev.next;\n            }\n            curr = next;\n        }\n    }\n    return dummyHead.next;\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        def merge(head1: ListNode, head2: ListNode) -> ListNode:\n            dummyHead = ListNode(0)\n            temp, temp1, temp2 = dummyHead, head1, head2\n            while temp1 and temp2:\n                if temp1.val <= temp2.val:\n                    temp.next = temp1\n                    temp1 = temp1.next\n                else:\n                    temp.next = temp2\n                    temp2 = temp2.next\n                temp = temp.next\n            if temp1:\n                temp.next = temp1\n            elif temp2:\n                temp.next = temp2\n            return dummyHead.next\n        \n        if not head:\n            return head\n        \n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n        \n        dummyHead = ListNode(0, head)\n        subLength = 1\n        while subLength < length:\n            prev, curr = dummyHead, dummyHead.next\n            while curr:\n                head1 = curr\n                for i in range(1, subLength):\n                    if curr.next:\n                        curr = curr.next\n                    else:\n                        break\n                head2 = curr.next\n                curr.next = None\n                curr = head2\n                for i in range(1, subLength):\n                    if curr and curr.next:\n                        curr = curr.next\n                    else:\n                        break\n                \n                succ = None\n                if curr:\n                    succ = curr.next\n                    curr.next = None\n                \n                merged = merge(head1, head2)\n                prev.next = merged\n                while prev.next:\n                    prev = prev.next\n                curr = succ\n            subLength <<= 1\n        \n        return dummyHead.next\n```\n\n```Golang [sol2-Golang]\nfunc merge(head1, head2 *ListNode) *ListNode {\n    dummyHead := &ListNode{}\n    temp, temp1, temp2 := dummyHead, head1, head2\n    for temp1 != nil && temp2 != nil {\n        if temp1.Val <= temp2.Val {\n            temp.Next = temp1\n            temp1 = temp1.Next\n        } else {\n            temp.Next = temp2\n            temp2 = temp2.Next\n        }\n        temp = temp.Next\n    }\n    if temp1 != nil {\n        temp.Next = temp1\n    } else if temp2 != nil {\n        temp.Next = temp2\n    }\n    return dummyHead.Next\n}\n\nfunc sortList(head *ListNode) *ListNode {\n    if head == nil {\n        return head\n    }\n\n    length := 0\n    for node := head; node != nil; node = node.Next {\n        length++\n    }\n\n    dummyHead := &ListNode{Next: head}\n    for subLength := 1; subLength < length; subLength <<= 1 {\n        prev, cur := dummyHead, dummyHead.Next\n        for cur != nil {\n            head1 := cur\n            for i := 1; i < subLength && cur.Next != nil; i++ {\n                cur = cur.Next\n            }\n\n            head2 := cur.Next\n            cur.Next = nil\n            cur = head2\n            for i := 1; i < subLength && cur != nil && cur.Next != nil; i++ {\n                cur = cur.Next\n            }\n\n            var next *ListNode\n            if cur != nil {\n                next = cur.Next\n                cur.Next = nil\n            }\n\n            prev.Next = merge(head1, head2)\n\n            for prev.Next != nil {\n                prev = prev.Next\n            }\n            cur = next\n        }\n    }\n    return dummyHead.Next\n}\n```\n\n```C [sol2-C]\nstruct ListNode* merge(struct ListNode* head1, struct ListNode* head2) {\n    struct ListNode* dummyHead = malloc(sizeof(struct ListNode));\n    dummyHead->val = 0;\n    struct ListNode *temp = dummyHead, *temp1 = head1, *temp2 = head2;\n    while (temp1 != NULL && temp2 != NULL) {\n        if (temp1->val <= temp2->val) {\n            temp->next = temp1;\n            temp1 = temp1->next;\n        } else {\n            temp->next = temp2;\n            temp2 = temp2->next;\n        }\n        temp = temp->next;\n    }\n    if (temp1 != NULL) {\n        temp->next = temp1;\n    } else if (temp2 != NULL) {\n        temp->next = temp2;\n    }\n    return dummyHead->next;\n}\n\nstruct ListNode* sortList(struct ListNode* head) {\n    if (head == NULL) {\n        return head;\n    }\n    int length = 0;\n    struct ListNode* node = head;\n    while (node != NULL) {\n        length++;\n        node = node->next;\n    }\n    struct ListNode* dummyHead = malloc(sizeof(struct ListNode));\n    dummyHead->next = head;\n    for (int subLength = 1; subLength < length; subLength <<= 1) {\n        struct ListNode *prev = dummyHead, *curr = dummyHead->next;\n        while (curr != NULL) {\n            struct ListNode* head1 = curr;\n            for (int i = 1; i < subLength && curr->next != NULL; i++) {\n                curr = curr->next;\n            }\n            struct ListNode* head2 = curr->next;\n            curr->next = NULL;\n            curr = head2;\n            for (int i = 1; i < subLength && curr != NULL && curr->next != NULL;\n                 i++) {\n                curr = curr->next;\n            }\n            struct ListNode* next = NULL;\n            if (curr != NULL) {\n                next = curr->next;\n                curr->next = NULL;\n            }\n            struct ListNode* merged = merge(head1, head2);\n            prev->next = merged;\n            while (prev->next != NULL) {\n                prev = prev->next;\n            }\n            curr = next;\n        }\n    }\n    return dummyHead->next;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是链表的长度。\n\n- 空间复杂度：$O(1)$。"
}