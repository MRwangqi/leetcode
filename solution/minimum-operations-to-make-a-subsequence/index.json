{
	"titleSlug": "minimum-operations-to-make-a-subsequence",
	"slug": "de-dao-zi-xu-lie-de-zui-shao-cao-zuo-ci-hefgl",
	"url": "https://leetcode-cn.com/problems/minimum-operations-to-make-a-subsequence/solution/de-dao-zi-xu-lie-de-zui-shao-cao-zuo-ci-hefgl/",
	"content": "#### 方法一：贪心 + 二分查找\n\n记数组 $\\textit{target}$ 的长度为 $n$，数组$\\textit{arr}$ 的长度为 $m$。\n\n根据题意，$\\textit{target}$ 和 $\\textit{arr}$ 这两个数组的公共子序列越长，需要添加的元素个数也就越少。因此最少添加的元素个数为 $n$ 减去两数组的最长公共子序列的长度。\n\n求最长公共子序列是一个经典问题，读者可参考「[1143. 最长公共子序列的官方题解](https://leetcode-cn.com/problems/longest-common-subsequence/solution/zui-chang-gong-gong-zi-xu-lie-by-leetcod-y7u0/)」。但是，这一做法的时间复杂度是 $O(nm)$ 的，在本题的数据范围下无法承受，我们需要改变思路。\n\n由于 $\\textit{target}$ 的元素互不相同，我们可以用一个哈希表记录 $\\textit{target}$ 的每个元素所处的下标，并将 $\\textit{arr}$ 中的元素映射到下标上，对于不存在于 $\\textit{target}$ 中的元素，由于其必然不会在最长公共子序列中，可将其忽略。\n\n我们使用示例 $2$ 来说明，将 $\\textit{arr}$ 中的元素转换成该元素在 $\\textit{target}$ 中的下标（去掉不在 $\\textit{target}$ 中的元素 $7$），可以得到一个新数组\n\n$$\n\\textit{arr}' = [1,0,5,4,2,0,3]\n$$\n\n若将 $\\textit{target}$ 也做上述转换，这相当于将每个元素变为其下标，得\n\n$$\n\\textit{target}' = [0,1,2,3,4,5]\n$$\n\n则求原数组的最长公共子序列等价于求上述转换后的两数组的最长公共子序列。\n\n注意到 $\\textit{target}'$ 是严格单调递增的，因此 $\\textit{arr}'$ 在最长公共子序列中的部分也必须是严格单调递增的，因此问题可进一步地转换成求 $\\textit{arr}'$ 的最长递增子序列的长度。这也是一个经典问题，读者可以参考「[300. 最长递增子序列的官方题解](https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/)」，使用贪心和二分查找的方法得到最长递增子序列的长度。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minOperations(vector<int> &target, vector<int> &arr) {\n        int n = target.size();\n        unordered_map<int, int> pos;\n        for (int i = 0; i < n; ++i) {\n            pos[target[i]] = i;\n        }\n        vector<int> d;\n        for (int val : arr) {\n            if (pos.count(val)) {\n                int idx = pos[val];\n                auto it = lower_bound(d.begin(), d.end(), idx);\n                if (it != d.end()) {\n                    *it = idx;\n                } else {\n                    d.push_back(idx);\n                }\n            }\n        }\n        return n - d.size();\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minOperations(int[] target, int[] arr) {\n        int n = target.length;\n        Map<Integer, Integer> pos = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; ++i) {\n            pos.put(target[i], i);\n        }\n        List<Integer> d = new ArrayList<Integer>();\n        for (int val : arr) {\n            if (pos.containsKey(val)) {\n                int idx = pos.get(val);\n                int it = binarySearch(d, idx);\n                if (it != d.size()) {\n                    d.set(it, idx);\n                } else {\n                    d.add(idx);\n                }\n            }\n        }\n        return n - d.size();\n    }\n\n    public int binarySearch(List<Integer> d, int target) {\n        int size = d.size();\n        if (size == 0 || d.get(size - 1) < target) {\n            return size;\n        }\n        int low = 0, high = size - 1;\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (d.get(mid) < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MinOperations(int[] target, int[] arr) {\n        int n = target.Length;\n        Dictionary<int, int> pos = new Dictionary<int, int>();\n        for (int i = 0; i < n; ++i) {\n            pos.Add(target[i], i);\n        }\n        IList<int> d = new List<int>();\n        foreach (int val in arr) {\n            if (pos.ContainsKey(val)) {\n                int idx = pos[val];\n                int it = BinarySearch(d, idx);\n                if (it != d.Count) {\n                    d[it] = idx;\n                } else {\n                    d.Add(idx);\n                }\n            }\n        }\n        return n - d.Count;\n    }\n\n    public int BinarySearch(IList<int> d, int target) {\n        int size = d.Count;\n        if (size == 0 || d[size - 1] < target) {\n            return size;\n        }\n        int low = 0, high = size - 1;\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (d[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc minOperations(target, arr []int) int {\n    n := len(target)\n    pos := make(map[int]int, n)\n    for i, val := range target {\n        pos[val] = i\n    }\n    d := []int{}\n    for _, val := range arr {\n        if idx, has := pos[val]; has {\n            if p := sort.SearchInts(d, idx); p < len(d) {\n                d[p] = idx\n            } else {\n                d = append(d, idx)\n            }\n        }\n    }\n    return n - len(d)\n}\n```\n\n```C [sol1-C]\nstruct HashTable {\n    int key, val;\n    UT_hash_handle hh;\n};\n\nint lower_bound(int* arr, int l, int r, int val) {\n    while (l < r) {\n        int mid = (l + r) >> 1;\n        if (arr[mid] >= val) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;\n}\n\nint minOperations(int* target, int targetSize, int* arr, int arrSize) {\n    struct HashTable* hashTable = NULL;\n    for (int i = 0; i < targetSize; i++) {\n        struct HashTable* tmp;\n        HASH_FIND_INT(hashTable, &target[i], tmp);\n        if (tmp == NULL) {\n            tmp = (struct HashTable*)malloc(sizeof(struct HashTable));\n            tmp->key = target[i], tmp->val = i;\n            HASH_ADD_INT(hashTable, key, tmp);\n        }\n    }\n    int d[arrSize], dSize = 0;\n    for (int i = 0; i < arrSize; i++) {\n        struct HashTable* tmp;\n        HASH_FIND_INT(hashTable, &arr[i], tmp);\n        if (tmp != NULL) {\n            int idx = tmp->val;\n            int it = lower_bound(d, 0, dSize, idx);\n            if (it == dSize) {\n                d[dSize++] = idx;\n            } else {\n                d[it] = idx;\n            }\n        }\n    }\n    return targetSize - dSize;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minOperations = function(target, arr) {\n    const n = target.length;\n    const pos = new Map();\n    for (let i = 0; i < n; ++i) {\n        pos.set(target[i], i);\n    }\n    const d = [];\n    for (const val of arr) {\n        if (pos.has(val)) {\n            const idx = pos.get(val);\n            const it = binarySearch(d, idx);\n            if (it !== d.length) {\n                d[it] = idx;\n            } else {\n                d.push(idx);\n            }\n        }\n    }\n    return n - d.length;\n};\n\nconst binarySearch = (d, target) => {\n    const size = d.length;\n    if (size === 0 || d[size - 1] < target) {\n        return size;\n    }\n    let low = 0, high = size - 1;\n    while (low < high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        if (d[mid] < target) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m\\log m)$，其中 $n$ 是数组 $\\textit{target}$ 的长度，$m$ 是数组 $\\textit{arr}$ 的长度。遍历 $\\textit{target}$ 需要 $O(n)$ 的时间，求 $\\textit{arr}'$ 的最长递增子序列需要 $O(m\\log m)$ 的时间。\n\n- 空间复杂度：$O(n+m)$。需要 $O(n)$ 大小的哈希表存储 $\\textit{target}$ 的元素的下标，以及 $O(m)$ 的空间求最长递增子序列。"
}