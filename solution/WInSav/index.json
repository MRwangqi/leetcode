{
	"titleSlug": "WInSav",
	"slug": "by-musing-clarkeeae-8ye4",
	"url": "https://leetcode-cn.com/problems/WInSav/solution/by-musing-clarkeeae-8ye4/",
	"content": "```\nclass Solution:\n    def getMaxLayerSum(self, root: Optional[TreeNode]) -> int:\n        layersum = defaultdict(int)\n        upup = defaultdict(int)\n\n        def dfs(node, layer):\n            flag = True\n            tmp1 = defaultdict(int)\n            q = deque([node])\n            cnt = 0\n            while q:\n                n = len(q)\n                for _ in range(n):\n                    x = q.popleft()\n                    if not x: continue\n                    if (x.left and x.right) or flag:\n                        tmp1[cnt] += x.val\n                        layersum[cnt + layer] += x.val\n                        q.append(x.left)\n                        q.append(x.right)\n                    else:\n                        t1 = dfs(x, layer + cnt)\n                        for k in t1.keys():\n                            tmp1[k + cnt] += t1[k]\n                    if x.left and x.right:\n                        flag = False\n                cnt += 1\n            if layer != 0:\n                for c in tmp1.keys():\n                    if c + 1 in tmp1.keys():\n                        if tmp1[c + 1] - tmp1[c] > upup[layer + c]:\n                            upup[layer + c] = tmp1[c + 1] - tmp1[c]\n                    else:\n                        if - tmp1[c] > upup[layer + c]:\n                            upup[layer + c] = - tmp1[c]\n            return tmp1\n\n        dfs(root, 0)\n\n        mx = max(layersum.values())\n        mxk = max(layersum.keys())\n        for k, v in layersum.items():\n            if k != mxk: mx = max(mx, v + upup[k])\n        if layersum[mxk] + upup[mxk] != 0: mx = max(mx, layersum[mxk] + upup[mxk])\n        return mx\n```\n**反例**\n[-4255,-2647,null,-430,-1714,-7142,null,-2735,null,null,-9515,null,-7606,-11,11,-319]\n"
}