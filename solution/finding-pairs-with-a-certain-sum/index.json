{
	"titleSlug": "finding-pairs-with-a-certain-sum",
	"slug": "zhao-chu-he-wei-zhi-ding-zhi-de-xia-biao-m17s",
	"url": "https://leetcode-cn.com/problems/finding-pairs-with-a-certain-sum/solution/zhao-chu-he-wei-zhi-ding-zhi-de-xia-biao-m17s/",
	"content": "#### 方法一：哈希表\n\n**提示 $1$**\n\n由于数组 $\\textit{nums}_1$ 的最大长度小于等于 $\\textit{nums}_2$，因此对于 $\\texttt{getPairs(tot)}$ 操作，我们可以将 $\\textit{nums}_2$ 中的元素放入哈希映射中，枚举 $\\textit{nums}_1$ 中的元素 $\\textit{num}$，从而在哈希映射中找出键 $\\textit{tot} - \\textit{num}$ 对应的值。这些值的总和即为答案。\n\n**思路与算法**\n\n我们将数组 $\\textit{num}_1$ 和 $\\textit{nums}_2$ 存储下来，并且额外存储一份数组 $\\textit{nums}_2$ 中元素的哈希映射 $\\textit{cnt}$。\n\n对于 $\\texttt{add(index, val)}$ 操作，我们将 $\\textit{cnt}[\\textit{nums}_2[\\textit{index}]]$ 减去 $1$，$\\textit{nums}_2[\\textit{index}]$ 加上 $\\textit{val}$，再将更新后的 $\\textit{cnt}[\\textit{nums}_2[\\textit{index}]]$ 加上 $1$。\n\n对于 $\\texttt{getPairs(tot)}$ 操作，我们枚举 $\\textit{nums}_1$ 中的元素 $\\textit{num}$，将答案累加 $\\textit{cnt}[\\textit{tot} - \\textit{num}]$，并返回最终的答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass FindSumPairs {\nprivate:\n    vector<int> nums1, nums2;\n    unordered_map<int, int> cnt;\n\npublic:\n    FindSumPairs(vector<int>& nums1, vector<int>& nums2) {\n        this->nums1 = nums1;\n        this->nums2 = nums2;\n        for (int num: nums2) {\n            ++cnt[num];\n        }\n    }\n    \n    void add(int index, int val) {\n        --cnt[nums2[index]];\n        nums2[index] += val;\n        ++cnt[nums2[index]];\n    }\n    \n    int count(int tot) {\n        int ans = 0;\n        for (int num: nums1) {\n            int rest = tot - num;\n            if (cnt.count(rest)) {\n                ans += cnt[rest];\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass FindSumPairs:\n\n    def __init__(self, nums1: List[int], nums2: List[int]):\n        self.nums1 = nums1\n        self.nums2 = nums2\n        self.cnt = Counter(nums2)\n\n    def add(self, index: int, val: int) -> None:\n        _nums2, _cnt = self.nums2, self.cnt\n\n        _cnt[_nums2[index]] -= 1\n        _nums2[index] += val\n        _cnt[_nums2[index]] += 1\n\n    def count(self, tot: int) -> int:\n        _nums1, _cnt = self.nums1, self.cnt\n\n        ans = 0\n        for num in _nums1:\n            if (rest := tot - num) in _cnt:\n                ans += _cnt[rest]\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + q_1 + (q_2 + 1)m)$，其中 $n$ 和 $m$ 分别是数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 的长度，$q_1$ 和 $q_2$ 分别是 $\\texttt{add(index, val)}$ 和 $\\texttt{getPairs(tot)}$ 操作的次数。\n\n    - 初始化需要的时间为 $O(n + m)$；\n    \n    - 单次 $\\texttt{add(index, val)}$ 操作需要的时间为 $O(1)$；\n\n    - 单次 $\\texttt{getPairs(tot)}$ 操作需要的时间为 $O(m)$。\n\n    将它们分别乘以操作次数再相加即可得到总时间复杂度。\n\n- 空间复杂度：$O(n + m + q_1)$。数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 分别需要 $O(n)$ 和 $O(m)$ 的空间，哈希映射初始时需要 $O(m)$ 的空间，每一次 $\\texttt{add(index, val)}$ 操作需要额外的 $O(1)$ 空间。\n\n    这里也可以选择在 $\\texttt{add(index, val)}$ 操作时将值减为 $0$ 的键值对删除，使得哈希映射的空间恒定为 $O(m)$ 而与 $q_1$ 无关。"
}