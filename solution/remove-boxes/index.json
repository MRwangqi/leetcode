{
	"titleSlug": "remove-boxes",
	"slug": "guan-fang-fang-fa-2ji-yi-hua-sou-suo-dong-hua-tu-j",
	"url": "https://leetcode-cn.com/problems/remove-boxes/solution/guan-fang-fang-fa-2ji-yi-hua-sou-suo-dong-hua-tu-j/",
	"content": "作为一个算法小白，看了很久才明白官方解法，因此决定做成一个可爱的动画，来帮助大家理解。\r\n\r\n![546 移除盒子.gif](https://pic.leetcode-cn.com/8580bd8ff659b7dde4b46d4fee547a13606638fe4c05c5aebe1c33a6b21aa65e-546%20%E7%A7%BB%E9%99%A4%E7%9B%92%E5%AD%90.gif)\r\n---\r\n#### 解释\r\n\r\n这道题，其实就是在玩消消乐游戏~\r\n\r\n首先，假设我们拿到的 `boxes` 长这样：\r\n\r\n![图片1.png](https://pic.leetcode-cn.com/c508cdc88b9ae68ea64fa4ee9b3acdb74f95dd7dbcf2fc8192eabe10390152f3-%E5%9B%BE%E7%89%871.png){:width=400}\r\n{:align=center}\r\n\r\n假设我们经过一系列操作后消掉了其中一些盒子：\r\n![图片2.png](https://pic.leetcode-cn.com/376e1486e01c05f472c5fe33cf71c54243c44d9ba67c5393c092184f7de1d89f-%E5%9B%BE%E7%89%872.png){:width=400}\r\n{:align=center}\r\n\r\n对于这样一个子序列，我们就可以记录到 `dp` 数组里。我们可以操作的范围是 `l` 到 `r` 的子序列。由于我们对每个子序列默认都是点击 `boxes[r]` 来消除，因此要知道`r`的后面还连着几个与 `boxes[r]` 相同颜色的盒子，记为 `k`。如下图，`l = 0, r = 6, k = 2`， 将其能获得的最高得分记在 `dp[0][6][2]`。\r\n\r\n![图片19.png](https://pic.leetcode-cn.com/a18af84281ee6fcec37f02cc84f175d90488a4388038b2b4fb61f158d00a7d87-%E5%9B%BE%E7%89%8719.png){:width=400}\r\n{:align=center}\r\n\r\n\r\n现在我们调用 `calculatePoints(i, r, k)` 来计算它的最高得分 `dp[i][r][k]`。\r\n\r\n#### calculatePoints(i, r, k)\r\n\r\n在我们这个子序列中，`dp[0][6][2]` 与 `dp[0][5][3]` 实际上是等价的。我们将 `r` 向左一直移动到不能再移动为止。 \r\n\r\n![图片16.png](https://pic.leetcode-cn.com/2fe565034e6ef3b2c5b3bc5427af7970e730c20d3fde908042e41d7302d609fa-%E5%9B%BE%E7%89%8716.png){:width=400}\r\n{:align=center}\r\n\r\n接着，我们计算出不同策略的得分，取最高分。\r\n\r\n#### 策略 1\r\n\r\n我们可以直接点 `boxes[r]`，把最后 4 个盒子一次性消除，获得 16 分！\r\n\r\n![图片5.png](https://pic.leetcode-cn.com/9db660e257611aea63df4324d013ca30442398423b670db45050af1e11517627-%E5%9B%BE%E7%89%875.png){:width=400}\r\n{:align=center}\r\n\r\n剩下的盒子成为这样一个子序列 `dp[0][4][0]`：\r\n\r\n![图片12.png](https://pic.leetcode-cn.com/d5366c4b3d161ad872766b5eeeeb10782a030b00b47738adab0e8e6cbf448346-%E5%9B%BE%E7%89%8712.png){:width=400}\r\n{:align=center}\r\n\r\n策略1得分：`4*4 + dp[0][4][0]`\r\n\r\n#### 策略 2\r\n\r\n我们还可以把夹在中间的杂鱼盒子都消掉，让后面连起来的盒子数更多：\r\n\r\n![图片8.png](https://pic.leetcode-cn.com/88195e05d8a56b7d4dc35d7ee773b9649c3741b36d6d28d55af789630fa4da89-%E5%9B%BE%E7%89%878.png){:width=400}\r\n{:align=center}\r\n\r\n为了找到可以跟 `boxes[r]` 连起来的盒子，令 `i = l`：\r\n\r\n![图片21.png](https://pic.leetcode-cn.com/0eace26971397a3eb867a4bbdb54ac961d756921fff07b53a466cbd9dbe9138a-%E5%9B%BE%E7%89%8721.png){:width=400}\r\n{:align=center}\r\n\r\n`i++`\r\n\r\n![图片22.png](https://pic.leetcode-cn.com/d1dcf578c6a97b749390cd93ce97de918298916a81560e8802e7f80d427579ab-%E5%9B%BE%E7%89%8722.png){:width=400}\r\n{:align=center}\r\n\r\n直到 `boxes[i] == boxes[r]`，就说明我们搜索到了\r\n\r\n![图片23.png](https://pic.leetcode-cn.com/d564de570097596823f4b900d88f4d991633c4ec6ab79c43f73ffdb35572256e-%E5%9B%BE%E7%89%8723.png){:width=400}\r\n{:align=center}\r\n\r\n\r\n在这个例子中，消掉杂鱼盒子能获得的分数是 `dp[3][4][0]`。\r\n\r\n![图片15.png](https://pic.leetcode-cn.com/4667cee04852e23b68090a24bf082d123f48a73d772d38e385e1188d1073bf93-%E5%9B%BE%E7%89%8715.png){:width=400}\r\n{:align=center}\r\n\r\n剩下的盒子的得分是 `dp[0][2][4]` 。\r\n\r\n![图片14.png](https://pic.leetcode-cn.com/f833aec8a8eff59ba4925e0ff6b5cbe2c04c69af7b68b61ea7af710d8c64a91b-%E5%9B%BE%E7%89%8714.png){:width=400}\r\n{:align=center}\r\n\r\n综上，策略2得分：`dp[0][2][4] + dp[3][4][0]`\r\n\r\n#### 总结\r\n\r\n为了取得一个子序列的最高得分，我们分不同策略，每种策略的得分可以看作是1~2个子子序列的最高分之和。\r\n\r\n![图片20.png](https://pic.leetcode-cn.com/840d1f8626b1806e45282271f1a1ccf38536825011056e5d894f801a2399ff5d-%E5%9B%BE%E7%89%8720.png){:width=400}\r\n{:align=center}\r\n\r\n"
}