{
	"titleSlug": "rank-transform-of-a-matrix",
	"slug": "bing-cha-ji-tuo-bu-pai-xu-by-lucifer1004",
	"url": "https://leetcode-cn.com/problems/rank-transform-of-a-matrix/solution/bing-cha-ji-tuo-bu-pai-xu-by-lucifer1004/",
	"content": "### 题目分析\n\n首先，将每行及每列中相等的元素找出来，然后连并查集的边，注意这里不需要连所有边，只要相邻两个连边即可。在后面的过程中，我们只考虑并查集中每一个连通分量的根节点。\n\n接下来，每行每列分别排序，根据排序后的大小关系连拓扑排序的边。同样，这里也不需要连所有边，只要相邻两个大小不等的元素连边即可。\n\n然后，进行拓扑排序。每个点的秩初始都为$1$，在拓扑排序过程中，如果有一条 $u\\to v$ 的边，则将 $v$ 的秩设置为 $\\max(rank(v), rank(u)+1)$。其余操作同一般的拓扑排序。\n\n最后，将矩阵中每个点的秩设置为并查集中其所在的连通分量的根节点的秩即可。\n\n### 复杂度\n\n- 时间复杂度 $O(NM\\log\\max(N,M))$，瓶颈为排序。\n\n### 参考代码（C++）\n\n```cpp\nclass UnionFind {\n  int n;\n  vector<int> parent, size;\n\npublic:\n  UnionFind(int n) {\n    this->n = n;\n    parent = vector<int>(n);\n    size = vector<int>(n, 1);\n    for (int i = 0; i < n; ++i)\n      parent[i] = i;\n  }\n\n  int find(int idx) {\n    if (parent[idx] == idx)\n      return idx;\n    return parent[idx] = find(parent[idx]);\n  }\n\n  void connect(int a, int b) {\n    int fa = find(a), fb = find(b);\n    if (fa != fb) {\n      if (size[fa] > size[fb]) {\n        parent[fb] = fa;\n        size[fa] += size[fb];\n      } else {\n        parent[fa] = fb;\n        size[fb] += size[fa];\n      }\n    }\n  }\n};\n\nclass Solution {\npublic:\n    vector<vector<int>> matrixRankTransform(vector<vector<int>>& matrix) {\n        int n = matrix.size(), m = matrix[0].size();\n        UnionFind uf(n * m);\n        for (int i = 0; i < n; ++i) {\n            map<int, vector<int>> mp;\n            for (int j = 0; j < m; ++j)\n                mp[matrix[i][j]].emplace_back(i * m + j);\n            for (auto &[num, vec] : mp) {\n                for (int k = 0; k + 1 < vec.size(); ++k)\n                    uf.connect(vec[k], vec[k + 1]);\n            }\n        }\n        for (int j = 0; j < m; ++j) {\n            map<int, vector<int>> mp;\n            for (int i = 0; i < n; ++i)\n                mp[matrix[i][j]].emplace_back(i * m + j);\n            for (auto &[num, vec] : mp) {\n                for (int k = 0; k + 1 < vec.size(); ++k)\n                    uf.connect(vec[k], vec[k + 1]);\n            }\n        }\n        vector<vector<int>> adj(n * m);\n        vector<int> indegree(n * m);\n        for (int i = 0; i < n; ++i) {\n            vector<pair<int, int>> v(m);\n            for (int j = 0; j < m; ++j)\n                v[j] = make_pair(matrix[i][j], j);\n            sort(v.begin(), v.end());\n            for (int j = 0; j + 1 < m; ++j)\n                if (v[j].first != v[j + 1].first) {\n                    int uu = uf.find(i * m + v[j].second);\n                    int vv = uf.find(i * m + v[j + 1].second);\n                    adj[uu].emplace_back(vv);\n                    indegree[vv]++;\n                }\n        }\n        for (int j = 0; j < m; ++j) {\n            vector<pair<int, int>> v(n);\n            for (int i = 0; i < n; ++i)\n                v[i] = make_pair(matrix[i][j], i);\n            sort(v.begin(), v.end());\n            for (int i = 0; i + 1 < n; ++i)\n                if (v[i].first != v[i + 1].first) {\n                    int uu = uf.find(v[i].second * m + j);\n                    int vv = uf.find(v[i + 1].second * m + j);\n                    adj[uu].emplace_back(vv);\n                    indegree[vv]++;\n                }\n        }\n        vector<int> ans(n * m, 1);\n        queue<int> q;\n        for (int i = 0; i < n * m; ++i) {\n            if (uf.find(i) == i && indegree[i] == 0)\n                q.emplace(i);\n        }\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : adj[u]) {\n                ans[v] = max(ans[v], ans[u] + 1);\n                indegree[v]--;\n                if (indegree[v] == 0)\n                    q.emplace(v);\n            }\n        }\n        vector<vector<int>> result(n, vector<int>(m));\n        for (int i = 0; i < n; ++i)\n            for (int j = 0; j < m; ++j)\n                result[i][j] = ans[uf.find(i * m + j)];\n        return result;\n    }\n};\n```\n持续更新更多优质题解，欢迎 🌟[关注我](https://leetcode-cn.com/u/lucifer1004/)"
}