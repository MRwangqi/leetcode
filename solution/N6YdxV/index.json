{
	"titleSlug": "N6YdxV",
	"slug": "cha-zhao-cha-ru-wei-zhi-by-leetcode-solu-inlw",
	"url": "https://leetcode-cn.com/problems/N6YdxV/solution/cha-zhao-cha-ru-wei-zhi-by-leetcode-solu-inlw/",
	"content": "#### 方法一：二分查找\n\n**思路与算法**\n\n假设题意是叫你在排序数组中寻找是否存在一个目标值，那么训练有素的读者肯定立马就能想到利用二分法在 $O(\\log n)$ 的时间内找到是否存在目标值。但这题还多了个额外的条件，即如果不存在数组中的时候需要返回按顺序插入的位置，那我们还能用二分法么？答案是可以的，我们只需要稍作修改即可。\n\n考虑这个插入的位置 $\\textit{pos}$，它成立的条件为：\n\n$$\n\\textit{nums}[pos-1]<\\textit{target}\\le \\textit{nums}[pos]\n$$\n\n其中 $\\textit{nums}$ 代表排序数组。由于如果存在这个目标值，我们返回的索引也是 $\\textit{pos}$，因此我们可以将两个条件合并得出最后的目标：「在一个有序数组中找第一个大于等于 $\\textit{target}$ 的下标」。\n\n问题转化到这里，直接套用二分法即可，即不断用二分法逼近查找第一个大于等于 $\\textit{target}$ 的下标 。下文给出的代码是笔者习惯的二分写法，$\\textit{ans}$ 初值设置为数组长度可以省略边界条件的判断，因为存在一种情况是 $\\textit{target}$ 大于数组中的所有数，此时需要插入到数组长度的位置。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/11.png),![fig12](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/12.png),![fig13](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/13.png),![fig14](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/14.png),![fig15](https://assets.leetcode-cn.com/solution-static/jianzhi_II_068/15.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public int searchInsert(int[] nums, int target) {\n        int n = nums.length;\n        int left = 0, right = n - 1, ans = n;\n        while (left <= right) {\n            int mid = ((right - left) >> 1) + left;\n            if (target <= nums[mid]) {\n                ans = mid;\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n}\n```\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        int n = nums.size();\n        int left = 0, right = n - 1, ans = n;\n        while (left <= right) {\n            int mid = ((right - left) >> 1) + left;\n            if (target <= nums[mid]) {\n                ans = mid;\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n};\n```\n```JavaScript [sol1-JavaScript]\nvar searchInsert = function(nums, target) {\n    const n = nums.length;\n    let left = 0, right = n - 1, ans = n;\n    while (left <= right) {\n        let mid = ((right - left) >> 1) + left;\n        if (target <= nums[mid]) {\n            ans = mid;\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return ans;\n};\n```\n\n```C [sol1-C]\nint searchInsert(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1, ans = numsSize;\n    while (left <= right) {\n        int mid = ((right - left) >> 1) + left;\n        if (target <= nums[mid]) {\n            ans = mid;\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return ans;\n}\n```\n\n```golang [sol1-Golang]\nfunc searchInsert(nums []int, target int) int {\n    n := len(nums)\n    left, right := 0, n - 1\n    ans := n\n    for left <= right {\n        mid := (right - left) >> 1 + left\n        if target <= nums[mid] {\n            ans = mid\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$，其中 $n$ 为数组的长度。二分查找所需的时间复杂度为 $O(\\log n)$。\n\n- 空间复杂度：$O(1)$。我们只需要常数空间存放若干变量。"
}