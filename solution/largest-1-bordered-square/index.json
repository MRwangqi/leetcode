{
	"titleSlug": "largest-1-bordered-square",
	"slug": "tu-po-shuang-zhong-guan-qia-zhi-zhan-by-coldme-2",
	"url": "https://leetcode-cn.com/problems/largest-1-bordered-square/solution/tu-po-shuang-zhong-guan-qia-zhi-zhan-by-coldme-2/",
	"content": "主要思想：\n\n初始化 `maxLen` 为 $0$。遍历每个点，如果该点为 $1$，那么开始战斗。检验以 `maxLen` 为边长的正方形是否边全为 $1$。如果考验通过，`maxLen` 就可以加 $1$，继续检验。如果以这个点为起始点来构成的正方形实在不能再大了，那么把我们的目光移向下一个点。\n\n至于怎么通过考验，在这里设置了两道关卡，如下图展示。\n\n<![0729_2(1).jpg](https://pic.leetcode-cn.com/51106951342ed4d470c61d5136d2d946a79138c507e296cb90e20e2d45698544-0729_2\\(1\\).jpg),![0729_1(1).jpg](https://pic.leetcode-cn.com/14e7a7d78f66dc9203992d6f9a74707b41e0f5390cd8223e2d0ede82e4d77dda-0729_1\\(1\\).jpg)>\n\n最后返回 `maxLen` 乘 `maxLen` 即可。\n\n算法的优点是：每个点都从 `maxLen` 的边长开始尝试，及时 break。可以节省时间。\n\n```python [-Python]\nclass Solution:\n    def largest1BorderedSquare(self, grid) -> int:\n\n        if len(grid) == 0 or len(grid[0]) == 0:\n            return 0\n\n        maxLen = 0\n        m, n = len(grid), len(grid[0])\n        # 遍历每个点\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    flag1 = True\n                    currLen = maxLen\n                    while i + currLen < m and j + currLen < n:\n                        flag2 = True\n                        # 如果‘左边界‘有0， 那么检查下一个点\n                        for a in range(i, i + currLen + 1):\n                            if grid[a][j] != 1:\n                                flag1 = False\n                                break\n                        if not flag1:\n                            break\n                        # 如果‘上边界‘有0， 那么检查下一个点\n                        for b in range(j, j + currLen + 1):\n                            if grid[i][b] != 1:\n                                flag1 = False\n                                break\n                        if not flag1:\n                            break\n                        # 如果’右边界’有0， 那么继续在这一点，检查边长+1的正方形\n                        for a in range(i, i + currLen + 1):\n                            if grid[a][j + currLen] != 1:\n                                currLen += 1\n                                flag2 = False\n                                break\n                        if not flag2:\n                            continue\n                        # 如果’下边界’有0， 那么继续在这一点，检查边长+1的正方形\n                        for b in range(j, j + currLen + 1):\n                            if grid[i + currLen][b] != 1:\n                                currLen += 1\n                                flag2 = False\n                                break\n                        if not flag2:\n                            continue\n                        currLen += 1\n                        maxLen = currLen\n        return maxLen * maxLen\n```\n"
}