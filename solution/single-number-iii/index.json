{
	"titleSlug": "single-number-iii",
	"slug": "cai-yong-fen-zhi-de-si-xiang-jiang-wen-ti-jiang-we",
	"url": "https://leetcode-cn.com/problems/single-number-iii/solution/cai-yong-fen-zhi-de-si-xiang-jiang-wen-ti-jiang-we/",
	"content": "#### 解题思路\n**第一步：**\n把所有的元素进行异或操作，最终得到一个异或值。因为是不同的两个数字，所以这个值必定不为 0；\n```\n       int xor = 0;\n        for (int num : nums) {\n            xor ^= num;\n        } \n```\n__第二步：__\n取异或值最后一个二进制位为 1 的数字作为 mask，如果是 1 则表示两个数字在这一位上不同。\n```\n  int mask = xor & (-xor);\n```\n__第三步：__\n通过与这个 mask 进行与操作，如果为 0 的分为一个数组，为 1 的分为另一个数组。这样就把问题降低成了：“有一个数组每个数字都出现两次，有一个数字只出现了一次，求出该数字”。对这两个子问题分别进行全异或就可以得到两个解。也就是最终的数组了。\n```\n        int[] ans = new int[2];\n        for (int num : nums) {\n            if ( (num & mask) == 0) {\n                ans[0] ^= num;\n            } else {\n                ans[1] ^= num;\n            }\n        }\n```\n__复杂度分析：__\n时间复杂度 $O(N)$，空间复杂度 $O(1)$"
}