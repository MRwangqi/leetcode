{
	"titleSlug": "insert-delete-getrandom-o1-duplicates-allowed",
	"slug": "o1-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-ji-yua-5",
	"url": "https://leetcode-cn.com/problems/insert-delete-getrandom-o1-duplicates-allowed/solution/o1-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-ji-yua-5/",
	"content": "#### 方法一：哈希表\n\n**思路与算法**\n\n为了使得 $O(1)$ 时间内能够随机获取一个元素，我们将每个数值（可以重复）存储在一个列表 $\\textit{nums}$ 中。这样，获取随机元素时，只需要随机生成一个列表中的索引，就能够得到一个随机元素。\n\n这样做的问题在于：列表中的随机删除并不是 $O(1)$ 的。然而我们可以发现，列表中元素的顺序是无关紧要的，只要它们正确地存在于列表中即可。因此，在删除元素时，我们可以将被删的元素与列表中最后一个元素交换位置，随后便可以在 $O(1)$ 时间内，从列表中去除该元素。\n\n这需要我们额外维护数值在列表中**每一次**出现的下标集合。对于数值 $\\textit{val}$ 而言，记其下标集合为 $S_{idx}$。\n\n在删除时，我们找出 $val$ 出现的其中一个下标 $i$，并将 $\\textit{nums}[i]$ 与  $\\textit{nums}[\\textit{nums}.\\textit{length}-1]$ 交换。随后，将 $i$ 从 $S_{val}$ 中去除，并将 $S_{\\textit{nums}[\\textit{nums}.\\textit{length}-1]}$ 中原有的 $\\textit{nums}[\\textit{nums}.\\textit{length}-1]$ 替换成 $i$。由于集合的每个操作都是 $O(1)$ 的，因此总的平均时间复杂度也是 $O(1)$ 的。\n\n**代码**\n```C++ [sol1-C++]\nclass RandomizedCollection {\npublic:\n    unordered_map<int, unordered_set<int>> idx;\n    vector<int> nums;\n\n    /** Initialize your data structure here. */\n    RandomizedCollection() {\n\n    }\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    bool insert(int val) {\n        nums.push_back(val);\n        idx[val].insert(nums.size() - 1);\n        return idx[val].size() == 1;\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    bool remove(int val) {\n        if (idx.find(val) == idx.end()) {\n            return false;\n        }\n        int i = *(idx[val].begin());\n        nums[i] = nums.back();\n        idx[val].erase(i);\n        idx[nums[i]].erase(nums.size() - 1);\n        if (i < nums.size() - 1) {\n            idx[nums[i]].insert(i);\n        }\n        if (idx[val].size() == 0) {\n            idx.erase(val);\n        }\n        nums.pop_back();\n        return true;\n    }\n    \n    /** Get a random element from the collection. */\n    int getRandom() {\n        return nums[rand() % nums.size()];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass RandomizedCollection {\n    Map<Integer, Set<Integer>> idx;\n    List<Integer> nums;\n\n    /** Initialize your data structure here. */\n    public RandomizedCollection() {\n        idx = new HashMap<Integer, Set<Integer>>();\n        nums = new ArrayList<Integer>();\n    }\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    public boolean insert(int val) {\n        nums.add(val);\n        Set<Integer> set = idx.getOrDefault(val, new HashSet<Integer>());\n        set.add(nums.size() - 1);\n        idx.put(val, set);\n        return set.size() == 1;\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    public boolean remove(int val) {\n        if (!idx.containsKey(val)) {\n            return false;\n        }\n        Iterator<Integer> it = idx.get(val).iterator();  \n        int i = it.next();\n        int lastNum = nums.get(nums.size() - 1);\n        nums.set(i, lastNum);\n        idx.get(val).remove(i);\n        idx.get(lastNum).remove(nums.size() - 1);\n        if (i < nums.size() - 1) {\n            idx.get(lastNum).add(i);\n        }\n        if (idx.get(val).size() == 0) {\n            idx.remove(val);\n        }\n        nums.remove(nums.size() - 1);\n        return true;\n    }\n    \n    /** Get a random element from the collection. */\n    public int getRandom() {\n        return nums.get((int) (Math.random() * nums.size()));\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\n/**\n * Initialize your data structure here.\n */\nvar RandomizedCollection = function() {\n    this.idx = new Map();\n    this.nums = [];\n};\n\n/**\n * Inserts a value to the collection. Returns true if the collection did not already contain the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedCollection.prototype.insert = function(val) {\n    this.nums.push(val);\n    const set = this.idx.has(val) ? this.idx.get(val) : new Set();\n    set.add(this.nums.length - 1);\n    this.idx.set(val, set);\n    return set.size === 1;\n};\n\n/**\n * Removes a value from the collection. Returns true if the collection contained the specified element. \n * @param {number} val\n * @return {boolean}\n */\nRandomizedCollection.prototype.remove = function(val) {\n    if (!this.idx.has(val)) {\n        return false;\n    }\n    let i = undefined;\n    for (const it of this.idx.get(val)) {\n        if (!i) {\n            i = it;\n            break;\n        }\n    }\n    const lastNum = this.nums[this.nums.length - 1];\n    this.nums[i] = lastNum;\n    this.idx.get(val).delete(i);\n    this.idx.get(lastNum).delete(this.nums.length - 1);\n    if (i < this.nums.length - 1) {\n        this.idx.get(lastNum).add(i);\n    }\n    if (this.idx.get(val).size === 0) {\n        this.idx.delete(val);\n    }\n    this.nums.pop();\n    return true;\n};\n\n/**\n * Get a random element from the collection.\n * @return {number}\n */\nRandomizedCollection.prototype.getRandom = function() {\n    return this.nums[Math.floor(Math.random() * this.nums.length)];\n};\n```\n\n```Golang [sol1-Golang]\ntype RandomizedCollection struct {\n    idx  map[int]map[int]struct{}\n    nums []int\n}\n\n/** Initialize your data structure here. */\nfunc Constructor() RandomizedCollection {\n    return RandomizedCollection{\n        idx: map[int]map[int]struct{}{},\n    }\n}\n\n/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\nfunc (r *RandomizedCollection) Insert(val int) bool {\n    ids, has := r.idx[val]\n    if !has {\n        ids = map[int]struct{}{}\n        r.idx[val] = ids\n    }\n    ids[len(r.nums)] = struct{}{}\n    r.nums = append(r.nums, val)\n    return !has\n}\n\n/** Removes a value from the collection. Returns true if the collection contained the specified element. */\nfunc (r *RandomizedCollection) Remove(val int) bool {\n    ids, has := r.idx[val]\n    if !has {\n        return false\n    }\n    var i int\n    for id := range ids {\n        i = id\n        break\n    }\n    n := len(r.nums)\n    r.nums[i] = r.nums[n-1]\n    delete(ids, i)\n    delete(r.idx[r.nums[i]], n-1)\n    if i < n-1 {\n        r.idx[r.nums[i]][i] = struct{}{}\n    }\n    if len(ids) == 0 {\n        delete(r.idx, val)\n    }\n    r.nums = r.nums[:n-1]\n    return true\n}\n\n/** Get a random element from the collection. */\nfunc (r *RandomizedCollection) GetRandom() int {\n    return r.nums[rand.Intn(len(r.nums))]\n}\n```\n\n**复杂度分析**\n- 时间复杂度：$O(1)$。\n- 空间复杂度：$O(N)$，其中 $N$ 为集合中的元素数目。"
}