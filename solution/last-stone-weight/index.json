{
	"titleSlug": "last-stone-weight",
	"slug": "zui-hou-yi-kuai-shi-tou-de-zhong-liang-b-xgsx",
	"url": "https://leetcode-cn.com/problems/last-stone-weight/solution/zui-hou-yi-kuai-shi-tou-de-zhong-liang-b-xgsx/",
	"content": "#### 方法一：最大堆\n\n将所有石头的重量放入最大堆中。每次依次从队列中取出最重的两块石头 $a$ 和 $b$，必有 $a \\ge b$。如果 $a>b$，则将新石头 $a-b$ 放回到最大堆中；如果 $a=b$，两块石头完全被粉碎，因此不会产生新的石头。重复上述操作，直到剩下的石头少于 $2$ 块。\n\n最终可能剩下 $1$ 块石头，该石头的重量即为最大堆中剩下的元素，返回该元素；也可能没有石头剩下，此时最大堆为空，返回 $0$。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int lastStoneWeight(vector<int>& stones) {\n        priority_queue<int> q;\n        for (int s: stones) {\n            q.push(s);\n        }\n\n        while (q.size() > 1) {\n            int a = q.top();\n            q.pop();\n            int b = q.top();\n            q.pop();\n            if (a > b) {\n                q.push(a - b);\n            }\n        }\n        return q.empty() ? 0 : q.top();\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int lastStoneWeight(int[] stones) {\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);\n        for (int stone : stones) {\n            pq.offer(stone);\n        }\n\n        while (pq.size() > 1) {\n            int a = pq.poll();\n            int b = pq.poll();\n            if (a > b) {\n                pq.offer(a - b);\n            }\n        }\n        return pq.isEmpty() ? 0 : pq.poll();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar lastStoneWeight = function(stones) {\n    const pq = new MaxPriorityQueue();\n    for (const stone of stones) {\n        pq.enqueue('x', stone);\n    }\n    \n    while (pq.size() > 1) {\n        const a = pq.dequeue()['priority'];\n        const b = pq.dequeue()['priority'];\n        if (a > b) {\n            pq.enqueue('x', a - b);\n        }\n    }\n    return pq.isEmpty() ? 0 : pq.dequeue()['priority'];\n};\n```\n\n```go [sol1-Golang]\ntype hp struct{ sort.IntSlice }\n\nfunc (h hp) Less(i, j int) bool  { return h.IntSlice[i] > h.IntSlice[j] }\nfunc (h *hp) Push(v interface{}) { h.IntSlice = append(h.IntSlice, v.(int)) }\nfunc (h *hp) Pop() interface{}   { a := h.IntSlice; v := a[len(a)-1]; h.IntSlice = a[:len(a)-1]; return v }\nfunc (h *hp) push(v int)         { heap.Push(h, v) }\nfunc (h *hp) pop() int           { return heap.Pop(h).(int) }\n\nfunc lastStoneWeight(stones []int) int {\n    q := &hp{stones}\n    heap.Init(q)\n    for q.Len() > 1 {\n        x, y := q.pop(), q.pop()\n        if x > y {\n            q.push(x - y)\n        }\n    }\n    if q.Len() > 0 {\n        return q.IntSlice[0]\n    }\n    return 0\n}\n```\n\n```C [sol1-C]\nvoid swap(int *a, int *b) {\n    int tmp = *a;\n    *a = *b, *b = tmp;\n}\n\nvoid push(int *heap, int *heapSize, int x) {\n    heap[++(*heapSize)] = x;\n    for (int i = (*heapSize); i > 1 && heap[i] > heap[i >> 1]; i >>= 1) {\n        swap(&heap[i], &heap[i >> 1]);\n    }\n}\n\nvoid pop(int *heap, int *heapSize) {\n    int tmp = heap[1] = heap[(*heapSize)--];\n    int i = 1, j = 2;\n    while (j <= (*heapSize)) {\n        if (j != (*heapSize) && heap[j + 1] > heap[j]) ++j;\n        if (heap[j] > tmp) {\n            heap[i] = heap[j];\n            i = j;\n            j = i << 1;\n        } else {\n            break;\n        }\n    }\n    heap[i] = tmp;\n}\n\nint top(int *heap) {\n    return heap[1];\n}\n\nint lastStoneWeight(int *stones, int stonesSize) {\n    if (stonesSize == 1) {\n        return stones[0];\n    }\n    if (stonesSize == 2) {\n        return fabs(stones[0] - stones[1]);\n    }\n    int heap[stonesSize + 2], heapSize = 0;\n    for (int i = 0; i < stonesSize; i++) {\n        push(heap, &heapSize, stones[i]);\n    }\n\n    while (heapSize > 1) {\n        int a = top(heap);\n        pop(heap, &heapSize);\n        int b = top(heap);\n        pop(heap, &heapSize);\n        if (a > b) {\n            push(heap, &heapSize, a - b);\n        }\n    }\n    return heapSize ? top(heap) : 0;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log n)$，其中 $n$ 是石头数量。每次从队列中取出元素需要花费 $O(\\log n)$ 的时间，最多共需要粉碎 $n - 1$ 次石头。\n\n- 空间复杂度：$O(n)$。"
}