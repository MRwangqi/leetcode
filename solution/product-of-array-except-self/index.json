{
	"titleSlug": "product-of-array-except-self",
	"slug": "chu-zi-shen-yi-wai-shu-zu-de-cheng-ji-by-leetcode-",
	"url": "https://leetcode-cn.com/problems/product-of-array-except-self/solution/chu-zi-shen-yi-wai-shu-zu-de-cheng-ji-by-leetcode-/",
	"content": "### 📺视频题解  \n\n![238.除自身以外数组的乘积.mp4](5f8f385b-1288-4c91-8a65-e7490a96764c)\n\n### 📖文字题解\n\n#### 前言\n\n这似乎是一个简单的问题，可以在线性时间和空间内解决。先计算给定数组所有元素的乘积，然后对数组中的每个元素 $x$，将总的乘积除以 $x$ 来求得除自身值的以外数组的乘积。\n\n然而这样的解决方法有一个问题，就是如果输入数组中出现 0，那么这个方法就失效了。而且在问题中说明了不允许使用除法运算。这增加了这个问题的难度。\n\n#### 方法一：左右乘积列表\n\n**思路**\n\n我们不必将所有数字的乘积除以给定索引处的数字得到相应的答案，而是利用索引左侧所有数字的乘积和右侧所有数字的乘积（即前缀与后缀）相乘得到答案。\n\n对于给定索引 $i$，我们将使用它左边所有数字的乘积乘以右边所有数字的乘积。下面让我们更加具体的描述这个算法。\n\n**算法**\n\n1. 初始化两个空数组 `L` 和 `R`。对于给定索引 `i`，`L[i]` 代表的是 `i` 左侧所有数字的乘积，`R[i]` 代表的是 `i` 右侧所有数字的乘积。\n2. 我们需要用两个循环来填充 `L` 和 `R` 数组的值。对于数组 `L`，`L[0]` 应该是 `1`，因为第一个元素的左边没有元素。对于其他元素：`L[i] = L[i-1] * nums[i-1]`。\n3. 同理，对于数组 `R`，`R[length-1]` 应为 `1`。`length` 指的是输入数组的大小。其他元素：`R[i] = R[i+1] * nums[i+1]`。\n4. 当 `R` 和 `L` 数组填充完成，我们只需要在输入数组上迭代，且索引 `i` 处的值为：`L[i] * R[i]`。\n\n让我们用以下图片看看算法是如何工作的：\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/238/1.PNG),![fig2](https://assets.leetcode-cn.com/solution-static/238/2.PNG),![fig3](https://assets.leetcode-cn.com/solution-static/238/3.PNG),![fig4](https://assets.leetcode-cn.com/solution-static/238/4.PNG),![fig5](https://assets.leetcode-cn.com/solution-static/238/5.PNG),![fig6](https://assets.leetcode-cn.com/solution-static/238/6.PNG),![fig7](https://assets.leetcode-cn.com/solution-static/238/7.PNG),![fig8](https://assets.leetcode-cn.com/solution-static/238/8.PNG),![fig9](https://assets.leetcode-cn.com/solution-static/238/9.PNG),![fig10](https://assets.leetcode-cn.com/solution-static/238/10.PNG)>\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        int length = nums.size();\n\n        // L 和 R 分别表示左右两侧的乘积列表\n        vector<int> L(length, 0), R(length, 0);\n\n        vector<int> answer(length);\n\n        // L[i] 为索引 i 左侧所有元素的乘积\n        // 对于索引为 '0' 的元素，因为左侧没有元素，所以 L[0] = 1\n        L[0] = 1;\n        for (int i = 1; i < length; i++) {\n            L[i] = nums[i - 1] * L[i - 1];\n        }\n\n        // R[i] 为索引 i 右侧所有元素的乘积\n        // 对于索引为 'length-1' 的元素，因为右侧没有元素，所以 R[length-1] = 1\n        R[length - 1] = 1;\n        for (int i = length - 2; i >= 0; i--) {\n            R[i] = nums[i + 1] * R[i + 1];\n        }\n\n        // 对于索引 i，除 nums[i] 之外其余各元素的乘积就是左侧所有元素的乘积乘以右侧所有元素的乘积\n        for (int i = 0; i < length; i++) {\n            answer[i] = L[i] * R[i];\n        }\n\n        return answer;\n    }\n};\n```\n\n```python [sol1-Python3]\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        length = len(nums)\n        \n        # L 和 R 分别表示左右两侧的乘积列表\n        L, R, answer = [0]*length, [0]*length, [0]*length\n        \n        # L[i] 为索引 i 左侧所有元素的乘积\n        # 对于索引为 '0' 的元素，因为左侧没有元素，所以 L[0] = 1\n        L[0] = 1\n        for i in range(1, length):\n            L[i] = nums[i - 1] * L[i - 1]\n        \n        # R[i] 为索引 i 右侧所有元素的乘积\n        # 对于索引为 'length-1' 的元素，因为右侧没有元素，所以 R[length-1] = 1\n        R[length - 1] = 1\n        for i in reversed(range(length - 1)):\n            R[i] = nums[i + 1] * R[i + 1]\n\n        # 对于索引 i，除 nums[i] 之外其余各元素的乘积就是左侧所有元素的乘积乘以右侧所有元素的乘积\n        for i in range(length):\n            answer[i] = L[i] * R[i]\n        \n        return answer\n```\n\n```java [sol1-Java]\nclass Solution {\n    public int[] productExceptSelf(int[] nums) {\n        int length = nums.length;\n\n        // L 和 R 分别表示左右两侧的乘积列表\n        int[] L = new int[length];\n        int[] R = new int[length];\n\n        int[] answer = new int[length];\n\n        // L[i] 为索引 i 左侧所有元素的乘积\n        // 对于索引为 '0' 的元素，因为左侧没有元素，所以 L[0] = 1\n        L[0] = 1;\n        for (int i = 1; i < length; i++) {\n            L[i] = nums[i - 1] * L[i - 1];\n        }\n\n        // R[i] 为索引 i 右侧所有元素的乘积\n        // 对于索引为 'length-1' 的元素，因为右侧没有元素，所以 R[length-1] = 1\n        R[length - 1] = 1;\n        for (int i = length - 2; i >= 0; i--) {\n            R[i] = nums[i + 1] * R[i + 1];\n        }\n\n        // 对于索引 i，除 nums[i] 之外其余各元素的乘积就是左侧所有元素的乘积乘以右侧所有元素的乘积\n        for (int i = 0; i < length; i++) {\n            answer[i] = L[i] * R[i];\n        }\n\n        return answer;\n    }\n}\n```\n\n```golang [sol1-Golang]\nfunc productExceptSelf(nums []int) []int {\n    length := len(nums)\n\n    // L 和 R 分别表示左右两侧的乘积列表\n    L, R, answer := make([]int, length), make([]int, length), make([]int, length)\n\n    // L[i] 为索引 i 左侧所有元素的乘积\n    // 对于索引为 '0' 的元素，因为左侧没有元素，所以 L[0] = 1\n    L[0] = 1\n    for i := 1; i < length; i++ {\n        L[i] = nums[i-1] * L[i-1]\n    }\n\n    // R[i] 为索引 i 右侧所有元素的乘积\n    // 对于索引为 'length-1' 的元素，因为右侧没有元素，所以 R[length-1] = 1\n    R[length-1] = 1\n    for i := length - 2; i >= 0; i-- {\n        R[i] = nums[i+1] * R[i+1]\n    }\n    \n    // 对于索引 i，除 nums[i] 之外其余各元素的乘积就是左侧所有元素的乘积乘以右侧所有元素的乘积\n    for i := 0; i < length; i++ {\n        answer[i] = L[i] * R[i]\n    }\n    return answer\n}\n```\n\n```TypeScript [sol1-TypeScript]\nvar productExceptSelf = function(nums: number[]): number[] {\n    const length = nums.length;\n\n    // L 和 R 分别表示左右两侧的乘积列表\n    const L = new Array<number>(length);\n    const R = new Array<number>(length);\n\n    const answer = new Array<number>(length);\n\n    // L[i] 为索引 i 左侧所有元素的乘积\n    // 对于索引为 '0' 的元素，因为左侧没有元素，所以 L[0] = 1\n    L[0] = 1;\n    for (let i = 1; i < length; i++) {\n        L[i] = nums[i - 1] * L[i - 1];\n    }\n\n    // R[i] 为索引 i 右侧所有元素的乘积\n    // 对于索引为 'length-1' 的元素，因为右侧没有元素，所以 R[length-1] = 1\n    R[length - 1] = 1;\n    for (let i = length - 2; i >= 0; i--) {\n        R[i] = nums[i + 1] * R[i + 1];\n    }\n\n    // 对于索引 i，除 nums[i] 之外其余各元素的乘积就是左侧所有元素的乘积乘以右侧所有元素的乘积\n    for (let i = 0; i < length; i++) {\n        answer[i] = L[i] * R[i];\n    }\n\n    return answer;\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 指的是数组 `nums` 的大小。预处理 `L` 和 `R` 数组以及最后的遍历计算都是 $O(N)$ 的时间复杂度。\n* 空间复杂度：$O(N)$，其中 $N$ 指的是数组 `nums` 的大小。使用了 `L` 和 `R` 数组去构造答案，`L` 和 `R` 数组的长度为数组 `nums` 的大小。\n\n#### 方法二：空间复杂度 $O(1)$ 的方法\n\n**思路**\n\n尽管上面的方法已经能够很好的解决这个问题，但是空间复杂度并不为常数。\n\n由于输出数组不算在空间复杂度内，那么我们可以将 `L` 或 `R` 数组用输出数组来计算。先把输出数组当作 `L` 数组来计算，然后再动态构造 `R` 数组得到结果。让我们来看看基于这个思想的算法。\n\n**算法**\n\n1. 初始化 `answer` 数组，对于给定索引 `i`，`answer[i]` 代表的是 `i` 左侧所有数字的乘积。\n2. 构造方式与之前相同，只是我们试图节省空间，先把 `answer` 作为方法一的 `L` 数组。\n3. 这种方法的唯一变化就是我们没有构造 `R` 数组。而是用一个遍历来跟踪右边元素的乘积。并更新数组 $answer[i]=answer[i]*R$。然后 $R$ 更新为 $R=R*nums[i]$，其中变量 $R$ 表示的就是索引右侧数字的乘积。\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        int length = nums.size();\n        vector<int> answer(length);\n\n        // answer[i] 表示索引 i 左侧所有元素的乘积\n        // 因为索引为 '0' 的元素左侧没有元素， 所以 answer[0] = 1\n        answer[0] = 1;\n        for (int i = 1; i < length; i++) {\n            answer[i] = nums[i - 1] * answer[i - 1];\n        }\n\n        // R 为右侧所有元素的乘积\n        // 刚开始右边没有元素，所以 R = 1\n        int R = 1;\n        for (int i = length - 1; i >= 0; i--) {\n            // 对于索引 i，左边的乘积为 answer[i]，右边的乘积为 R\n            answer[i] = answer[i] * R;\n            // R 需要包含右边所有的乘积，所以计算下一个结果时需要将当前值乘到 R 上\n            R *= nums[i];\n        }\n        return answer;\n    }\n};\n```\n\n```python [sol2-Python3]\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        length = len(nums)\n        answer = [0]*length\n        \n        # answer[i] 表示索引 i 左侧所有元素的乘积\n        # 因为索引为 '0' 的元素左侧没有元素， 所以 answer[0] = 1\n        answer[0] = 1\n        for i in range(1, length):\n            answer[i] = nums[i - 1] * answer[i - 1]\n        \n        # R 为右侧所有元素的乘积\n        # 刚开始右边没有元素，所以 R = 1\n        R = 1;\n        for i in reversed(range(length)):\n            # 对于索引 i，左边的乘积为 answer[i]，右边的乘积为 R\n            answer[i] = answer[i] * R\n            # R 需要包含右边所有的乘积，所以计算下一个结果时需要将当前值乘到 R 上\n            R *= nums[i]\n        \n        return answer\n```\n\n```java [sol2-Java]\nclass Solution {\n    public int[] productExceptSelf(int[] nums) {\n        int length = nums.length;\n        int[] answer = new int[length];\n\n        // answer[i] 表示索引 i 左侧所有元素的乘积\n        // 因为索引为 '0' 的元素左侧没有元素， 所以 answer[0] = 1\n        answer[0] = 1;\n        for (int i = 1; i < length; i++) {\n            answer[i] = nums[i - 1] * answer[i - 1];\n        }\n\n        // R 为右侧所有元素的乘积\n        // 刚开始右边没有元素，所以 R = 1\n        int R = 1;\n        for (int i = length - 1; i >= 0; i--) {\n            // 对于索引 i，左边的乘积为 answer[i]，右边的乘积为 R\n            answer[i] = answer[i] * R;\n            // R 需要包含右边所有的乘积，所以计算下一个结果时需要将当前值乘到 R 上\n            R *= nums[i];\n        }\n        return answer;\n    }\n}\n```\n\n```golang [sol2-Golang]\nfunc productExceptSelf(nums []int) []int {\n    length := len(nums)\n    answer := make([]int, length)\n\n    // answer[i] 表示索引 i 左侧所有元素的乘积\n    // 因为索引为 '0' 的元素左侧没有元素， 所以 answer[0] = 1\n    answer[0] = 1\n    for i := 1; i < length; i++ {\n        answer[i] = nums[i-1] * answer[i-1]\n    }\n\n    // R 为右侧所有元素的乘积\n    // 刚开始右边没有元素，所以 R = 1\n    R := 1\n    for i := length - 1; i >= 0; i-- {\n        // 对于索引 i，左边的乘积为 answer[i]，右边的乘积为 R\n        answer[i] = answer[i] * R\n        // R 需要包含右边所有的乘积，所以计算下一个结果时需要将当前值乘到 R 上\n        R *= nums[i]\n    }\n    return answer\n}\n```\n\n```TypeScript [sol2-TypeScript]\nvar productExceptSelf = function(nums: number[]): number[] {\n    const length = nums.length;\n    const answer = new Array<number>(length);\n\n    // answer[i] 表示索引 i 左侧所有元素的乘积\n    // 因为索引为 '0' 的元素左侧没有元素， 所以 answer[0] = 1\n    answer[0] = 1;\n    for (let i = 1; i < length; i++) {\n        answer[i] = nums[i - 1] * answer[i - 1];\n    }\n\n    // R 为右侧所有元素的乘积\n    // 刚开始右边没有元素，所以 R = 1\n    let R = 1;\n    for (let i = length - 1; i >= 0; i--) {\n        // 对于索引 i，左边的乘积为 answer[i]，右边的乘积为 R\n        answer[i] = answer[i] * R;\n        // R 需要包含右边所有的乘积，所以计算下一个结果时需要将当前值乘到 R 上\n        R *= nums[i];\n    }\n    return answer;\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 指的是数组 `nums` 的大小。分析与方法一相同。\n* 空间复杂度：$O(1)$，输出数组不算进空间复杂度中，因此我们只需要常数的空间存放变量。"
}