{
	"titleSlug": "special-binary-string",
	"slug": "te-shu-de-er-jin-zhi-xu-lie-by-leetcode-sb7ry",
	"url": "https://leetcode-cn.com/problems/special-binary-string/solution/te-shu-de-er-jin-zhi-xu-lie-by-leetcode-sb7ry/",
	"content": "#### 方法一：分治\n\n**前言**\n\n对于本题而言，将 $1$ 看成左括号 $\\text{`('}$，$0$ 看成右括号 $\\text{`)'}$，那么一个特殊的二进制序列就可以看成一个合法的括号序列。这种「映射」有助于理解题目中的操作，即交换两个相邻且非空的合法括号序列。但为了与题目保持一致，下面的部分仍然使用 $1/0$ 进行叙述。\n\n**思路与算法**\n\n对于一个特殊序列而言，它一定以 $1$ 开始，以 $0$ 结束。这是因为：\n\n- 长度为 $1$ 的前缀中 $1$ 的数量一定要大于等于 $0$ 的数量，所以首位一定是 $1$；\n\n- 由于 $0$ 和 $1$ 的数量相等，并且任意前缀中 $1$ 的数量一定大于等于 $0$ 的数量，那么任意后缀中 $0$ 的数量一定大于等于 $1$ 的数量，因此与上一条类似，末位一定是 $0$。\n\n如果给定的字符串是一个「整体」的特殊序列，也就是说，它无法完整地拆分成多个特殊序列，那么它的首位 $1$ 和末位 $0$ 是不可能在任何交换操作中出现的。这里给出首位 $1$ 的证明，末位 $0$ 的证明是类似的：\n\n> 如果首位 $1$ 可以在交换操作中出现，那么包含它的子串是给定字符串（特殊序列）的一个前缀，同时这个子串也是一个特殊序列。对于字符串中剩余的后缀部分，$0$ 和 $1$ 的数量相等（因为给定字符串和前缀子串的 $0$ 和 $1$ 数量均相等）并且满足「每一个前缀中 $1$ 的数量大于等于 $0$ 的数量」（因为后缀部分的每一个前缀可以映射为给定字符串在同一位置结束的前缀，再扣掉前缀子串，由于前缀子串中 $0$ 和 $1$ 的数量相等，因此扣除后仍然满足要求），那么后缀部分也是一个特殊序列，这就说明给定字符串可以拆分成两个特殊序列，与假设相矛盾。\n\n因此，我们可以把首位 $1$ 和末位 $0$ 直接移除，进一步考虑剩余的字符串。\n\n如果给定的字符串可以拆分成多个特殊序列（这里规定每一个拆分出来的特殊序列都是一个「整体」，不能继续进行拆分），那么我们可以「分别」进一步考虑每一个特殊序列，即把某个特殊序列的首位 $1$ 和末位 $0$ 移除后，递归地进行相同的拆分操作。\n\n在递归返回后，我们可以进行「合并」操作：将所有的特殊序列按照字典序进行降序排序，再拼接起来，就可以得到字典序最大的字符串。由于每一次我们可以交换两个相邻的特殊序列，因此按照冒泡排序的方法，我们可以将这些特殊序列任意进行的排列，也就一定能得到字典序最大的字符串。\n\n**细节**\n\n在编写代码时，我们可以使用一个计数器，并从头遍历给定的字符串。当我们遇到 $1$ 时计数器加 $1$，遇到 $0$ 时计数器减 $1$。当计数器为 $0$ 时，我们就拆分除了一个「整体」的特殊序列。\n\n当递归到的字符串长度小于等于 $2$ 时，说明字符串要么为空，要么为 $10$，此时字符串就是字典序最大的结果，可以直接返回。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string makeLargestSpecial(string s) {\n        if (s.size() <= 2) {\n            return s;\n        }\n        int cnt = 0, left = 0;\n        vector<string> subs;\n        for (int i = 0; i < s.size(); ++i) {\n            if (s[i] == '1') {\n                ++cnt;\n            }\n            else {\n                --cnt;\n                if (cnt == 0) {\n                    subs.push_back(\"1\" + makeLargestSpecial(s.substr(left + 1, i - left - 1)) + \"0\");\n                    left = i + 1;\n                }\n            }\n        }\n\n        sort(subs.begin(), subs.end(), greater<string>{});\n        string ans = accumulate(subs.begin(), subs.end(), \"\"s);\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String makeLargestSpecial(String s) {\n        if (s.length() <= 2) {\n            return s;\n        }\n        int cnt = 0, left = 0;\n        List<String> subs = new ArrayList<String>();\n        for (int i = 0; i < s.length(); ++i) {\n            if (s.charAt(i) == '1') {\n                ++cnt;\n            } else {\n                --cnt;\n                if (cnt == 0) {\n                    subs.add(\"1\" + makeLargestSpecial(s.substring(left + 1, i)) + \"0\");\n                    left = i + 1;\n                }\n            }\n        }\n\n        Collections.sort(subs, (a, b) -> b.compareTo(a));\n        StringBuilder ans = new StringBuilder();\n        for (String sub : subs) {\n            ans.append(sub);\n        }\n        return ans.toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string MakeLargestSpecial(string s) {\n        if (s.Length <= 2) {\n            return s;\n        }\n        int cnt = 0, left = 0;\n        List<string> subs = new List<string>();\n        for (int i = 0; i < s.Length; ++i) {\n            if (s[i] == '1') {\n                ++cnt;\n            } else {\n                --cnt;\n                if (cnt == 0) {\n                    subs.Add(\"1\" + MakeLargestSpecial(s.Substring(left + 1, i - left - 1)) + \"0\");\n                    left = i + 1;\n                }\n            }\n        }\n\n        subs.Sort((a, b) => b.CompareTo(a));\n        StringBuilder ans = new StringBuilder();\n        foreach (string sub in subs) {\n            ans.Append(sub);\n        }\n        return ans.ToString();\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def makeLargestSpecial(self, s: str) -> str:\n        if len(s) <= 2:\n            return s\n        \n        cnt = left = 0\n        subs = list()\n\n        for i, ch in enumerate(s):\n            if ch == \"1\":\n                cnt += 1\n            else:\n                cnt -= 1\n                if cnt == 0:\n                    subs.append(\"1\" + self.makeLargestSpecial(s[left+1:i]) + \"0\")\n                    left = i + 1\n        \n        subs.sort(reverse=True)\n        return \"\".join(subs)\n```\n\n```C [sol1-C]\nstatic inline int cmp(const void* pa, const void* pb) {\n    return strcmp(*(char **)pb, *(char **)pa);\n}\n\nchar *helper(char *s, int start, int end) {\n    int len = end - start + 1;\n    if (len <= 2) {\n        char *ans = (char *)malloc(sizeof(char) * (len + 1));\n        strncpy(ans, s + start, len);\n        ans[len] = '\\0';\n        return ans;\n    }\n    int cnt = 0, left = start;\n    char **subs = (char **)malloc(sizeof(char *) * len);\n    int subsSize = 0;\n    for (int i = start; i <= end; ++i) {\n        if (s[i] == '1') {\n            ++cnt;\n        } else {\n            --cnt;\n            if (cnt == 0) {\n                char *res = helper(s, left + 1, i - 1);\n                subs[subsSize] = (char *)malloc(sizeof(char) * (strlen(res) + 3));\n                sprintf(subs[subsSize], \"%s%s%s\", \"1\", res, \"0\");\n                left = i + 1;\n                subsSize++;\n            }\n        }\n    }\n    qsort(subs, subsSize, sizeof(char *), cmp);\n    char *ans = (char *)malloc(sizeof(char) * (len + 1));\n    int pos = 0;\n    for (int i = 0; i < subsSize; i++) {\n        pos += sprintf(ans + pos, \"%s\", subs[i]);\n        free(subs[i]);\n    }\n    ans[pos] = '\\0';\n    return ans;\n}\n\nchar * makeLargestSpecial(char * s) {\n    int len = strlen(s);\n    return helper(s, 0, len - 1);\n}\n```\n\n```go [sol1-Golang]\nfunc makeLargestSpecial(s string) string {\n    if len(s) <= 2 {\n        return s\n    }\n    subs := sort.StringSlice{}\n    cnt, left := 0, 0\n    for i, ch := range s {\n        if ch == '1' {\n            cnt++\n        } else if cnt--; cnt == 0 {\n            subs = append(subs, \"1\"+makeLargestSpecial(s[left+1:i])+\"0\")\n            left = i + 1\n        }\n    }\n    sort.Sort(sort.Reverse(subs))\n    return strings.Join(subs, \"\")\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar makeLargestSpecial = function(s) {\n    if (s.length <= 2) {\n        return s;\n    }\n    let cnt = 0, left = 0;\n    const subs = [];\n        for (let i = 0; i < s.length; ++i) {\n        if (s[i] === '1') {\n            ++cnt;\n        } else {\n            --cnt;\n            if (cnt === 0) {\n                subs.push(\"1\" + makeLargestSpecial(s.substring(left + 1, i)) + '0');\n                left = i + 1;\n            }\n        }\n    }\n\n    subs.sort().reverse();\n    return subs.join('');\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是字符串 $s$ 的长度。在最坏的情况下，$s$ 由 $\\dfrac{n}{2}$ 个 $1$ 接着 $\\dfrac{n}{2}$ 个 $0$ 拼接而成，每次递归仅减少 $2$ 的字符串长度，需要进行 $\\dfrac{n}{2}$ 次递归。同时每次递归需要 $O(n)$ 的时间进行拼接并返回答案，因此总时间复杂度为 $O(n^2)$。\n\n- 空间复杂度：$O(n)$，即为递归需要的栈空间以及存储递归返回的字符串需要的临时空间。"
}