{
	"titleSlug": "design-twitter",
	"slug": "she-ji-tui-te-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/design-twitter/solution/she-ji-tui-te-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n\n![355 设计推特-仲耀晖.mp4](262540fb-dfbf-4220-a8b9-504f0151d287)\n\n### 📖 文字题解\n\n#### 方法一：哈希表 + 链表\n\n**思路和算法**\n\n根据题意我们知道，对于每个推特用户，我们需要存储他关注的用户 `Id`，以及自己发的推文 `Id` 的集合，为了使每个操作的复杂度尽可能的低，我们需要根据操作来决定存储这些信息的数据结构。注意，由于题目中没有说明用户的 `Id` 是否连续，所以我们需要用一个以用户 `Id` 为索引的哈希表来存储用户的信息。\n\n对于操作 `3` 和操作 `4`，我们只需要用一个哈希表存储，即可实现插入和删除的时间复杂度都为 $O(1)$。\n\n对于操作 `1` 和操作 `2`，由于操作 `2` 要知道此用户关注的人和用户自己发出的最近十条推文，因此我们可以考虑对每个用户用链表存储发送的推文。每次创建推文的时候我们在链表头插入，这样能保证链表里存储的推文的时间是从最近到最久的。那么对于操作 `2`，问题其实就等价于有若干个有序的链表，我们需要找到它们合起来最近的十条推文。由于链表里存储的数据都是有序的，所以我们将这些链表进行线性归并即可得到最近的十条推文。这个操作与 [23. 合并K个排序链表](https://leetcode-cn.com/problems/merge-k-sorted-lists/) 基本等同。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/355_fig1.png)\n\n如果我们直接照搬「合并K个排序链表」的解法来进行合并，那么无疑会造成空间的部分浪费，因为这个题目不要求你展示用户的所有推文，所以我们只要动态维护用户的链表，存储最近的 `recentMax` 个推文 `Id` 即可（题目中的 `recentMax` 为 `10`）。那么对于操作 `1`，当发现链表的节点数等于 `recentMax` 时，我们按题意删除链表末尾的元素，再插入最新的推文 `Id`。对于操作 `2`，在两个链表进行线性归并的时候，只要已合并的数量等于 `recentMax`，代表已经找到这两个链表合起来后最近的 `recentMax` 条推文，直接结束合并即可。\n\n```C++ [sol1-C++]\nclass Twitter {\n    struct Node {\n        // 哈希表存储关注人的 Id\n        unordered_set<int> followee;\n        // 用链表存储 tweetId\n        list<int> tweet;\n    };\n    // getNewsFeed 检索的推文的上限以及 tweetId 的时间戳\n    int recentMax, time;\n    // tweetId 对应发送的时间\n    unordered_map<int, int> tweetTime;\n    // 每个用户存储的信息\n    unordered_map<int, Node> user;\npublic:\n    Twitter() {\n        time = 0;\n        recentMax = 10;\n        user.clear();\n    }\n    \n    // 初始化\n    void init(int userId) {\n        user[userId].followee.clear();\n        user[userId].tweet.clear();\n    }\n\n    void postTweet(int userId, int tweetId) {\n        if (user.find(userId) == user.end()) {\n            init(userId);\n        }\n        // 达到限制，剔除链表末尾元素\n        if (user[userId].tweet.size() == recentMax) {\n            user[userId].tweet.pop_back();\n        }\n        user[userId].tweet.push_front(tweetId);\n        tweetTime[tweetId] = ++time;\n    }\n    \n    vector<int> getNewsFeed(int userId) {\n        vector<int> ans; ans.clear();\n        for (list<int>::iterator it = user[userId].tweet.begin(); it != user[userId].tweet.end(); ++it) {\n            ans.emplace_back(*it);\n        }\n        for (int followeeId: user[userId].followee) {\n            if (followeeId == userId) continue; // 可能出现自己关注自己的情况\n            vector<int> res; res.clear();\n            list<int>::iterator it = user[followeeId].tweet.begin();\n            int i = 0;\n            // 线性归并\n            while (i < (int)ans.size() && it != user[followeeId].tweet.end()) {\n                if (tweetTime[(*it)] > tweetTime[ans[i]]) {\n                    res.emplace_back(*it);\n                    ++it;\n                } else {\n                    res.emplace_back(ans[i]);\n                    ++i;\n                }\n                // 已经找到这两个链表合起来后最近的 recentMax 条推文\n                if ((int)res.size() == recentMax) break;\n            }\n            for (; i < (int)ans.size() && (int)res.size() < recentMax; ++i) res.emplace_back(ans[i]);\n            for (; it != user[followeeId].tweet.end() && (int)res.size() < recentMax; ++it) res.emplace_back(*it);\n            ans.assign(res.begin(),res.end());\n        }\n        return ans;\n    }\n    \n    void follow(int followerId, int followeeId) {\n        if (user.find(followerId) == user.end()) {\n            init(followerId);\n        }\n        if (user.find(followeeId) == user.end()) {\n            init(followeeId);\n        }\n        user[followerId].followee.insert(followeeId);\n    }\n    \n    void unfollow(int followerId, int followeeId) {\n        user[followerId].followee.erase(followeeId);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Twitter {\n    private class Node {\n        // 哈希表存储关注人的 Id\n        Set<Integer> followee;\n        // 用链表存储 tweetId\n        LinkedList<Integer> tweet;\n\n        Node() {\n            followee = new HashSet<Integer>();\n            tweet = new LinkedList<Integer>();\n        }\n    }\n\n    // getNewsFeed 检索的推文的上限以及 tweetId 的时间戳\n    private int recentMax, time;\n    // tweetId 对应发送的时间\n    private Map<Integer, Integer> tweetTime;\n    // 每个用户存储的信息\n    private Map<Integer, Node> user;\n\n    public Twitter() {\n        time = 0;\n        recentMax = 10;\n        tweetTime = new HashMap<Integer, Integer>();\n        user = new HashMap<Integer, Node>();\n    }\n\n    // 初始化\n    public void init(int userId) {\n        user.put(userId, new Node());\n    }\n\n    public void postTweet(int userId, int tweetId) {\n        if (!user.containsKey(userId)) {\n            init(userId);\n        }\n        // 达到限制，剔除链表末尾元素\n        if (user.get(userId).tweet.size() == recentMax) {\n            user.get(userId).tweet.remove(recentMax - 1);\n        }\n        user.get(userId).tweet.addFirst(tweetId);\n        tweetTime.put(tweetId, ++time);\n    }\n    \n    public List<Integer> getNewsFeed(int userId) {\n        LinkedList<Integer> ans = new LinkedList<Integer>();\n        for (int it : user.getOrDefault(userId, new Node()).tweet) {\n            ans.addLast(it);\n        }\n        for (int followeeId : user.getOrDefault(userId, new Node()).followee) {\n            if (followeeId == userId) { // 可能出现自己关注自己的情况\n                continue;\n            }\n            LinkedList<Integer> res = new LinkedList<Integer>();\n            int tweetSize = user.get(followeeId).tweet.size();\n            Iterator<Integer> it = user.get(followeeId).tweet.iterator();\n            int i = 0;\n            int j = 0;\n            int curr = -1;\n            // 线性归并\n            if (j < tweetSize) {\n                curr = it.next();\n                while (i < ans.size() && j < tweetSize) {\n                    if (tweetTime.get(curr) > tweetTime.get(ans.get(i))) {\n                        res.addLast(curr);\n                        ++j;\n                        if (it.hasNext()) {\n                            curr = it.next();\n                        }\n                    } else {\n                        res.addLast(ans.get(i));\n                        ++i;\n                    }\n                    // 已经找到这两个链表合起来后最近的 recentMax 条推文\n                    if (res.size() == recentMax) {\n                        break;\n                    }\n                }\n            }\n            for (; i < ans.size() && res.size() < recentMax; ++i) {\n                res.addLast(ans.get(i));\n            }\n            if (j < tweetSize && res.size() < recentMax) {\n                res.addLast(curr);\n                for (; it.hasNext() && res.size() < recentMax;) {\n                    res.addLast(it.next());\n                }\n            }\n            ans = new LinkedList<Integer>(res);\n        }\n        return ans;\n    }\n    \n    public void follow(int followerId, int followeeId) {\n        if (!user.containsKey(followerId)) {\n            init(followerId);\n        }\n        if (!user.containsKey(followeeId)) {\n            init(followeeId);\n        }\n        user.get(followerId).followee.add(followeeId);\n    }\n    \n    public void unfollow(int followerId, int followeeId) {\n        user.getOrDefault(followerId, new Node()).followee.remove(followeeId);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Twitter:\n\n    class Node:\n        def __init__(self):\n            self.followee = set()\n            self.tweet = list()\n\n    def __init__(self):\n        self.time = 0\n        self.recentMax = 10\n        self.tweetTime = dict()\n        self.user = dict()\n\n    def postTweet(self, userId: int, tweetId: int) -> None:\n        if userId not in self.user:\n            self.user[userId] = Twitter.Node()\n        self.user[userId].tweet.append(tweetId)\n        self.time += 1\n        self.tweetTime[tweetId] = self.time\n\n    def getNewsFeed(self, userId: int) -> List[int]:\n        if userId not in self.user:\n            return list()\n        ans = self.user[userId].tweet[-10:][::-1]\n        for followeeId in self.user[userId].followee:\n            if followeeId in self.user:\n                opt = self.user[followeeId].tweet[-10:][::-1]\n                i, j, combined = 0, 0, list()\n                while i < len(ans) and j < len(opt):\n                    if self.tweetTime[ans[i]] > self.tweetTime[opt[j]]:\n                        combined.append(ans[i])\n                        i += 1\n                    else:\n                        combined.append(opt[j])\n                        j += 1\n                combined.extend(ans[i:])\n                combined.extend(opt[j:])\n                ans = combined[:10]\n        return ans\n\n    def follow(self, followerId: int, followeeId: int) -> None:\n        if followerId != followeeId:\n            if followerId not in self.user:\n                self.user[followerId] = Twitter.Node()\n            self.user[followerId].followee.add(followeeId)\n            \n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        if followerId != followeeId:\n            if followerId in self.user:\n                self.user[followerId].followee.discard(followeeId)\n```\n\n**复杂度分析**\n\n- 时间复杂度：\n\t\n\t- 操作 `1` ： $O(1)$，链表的插入删除为 $O(1)$ 的复杂度。\n\t\n\t- 操作 `2` ： $O(\\textit{recentMax}*num)$，其中 `recentMax = 10`， `num` 为用户关注的人加上自己的数量和。因为链表里最多存储 `recentMax` 个节点，因此每次合并两个链表最多比较 `recentMax` 次后能得到两个链表最近的 `recentMax` 个推文，一共需要合并 `num` 次，因此总时间复杂度为 $O(\\textit{recentMax}*num)$。\n\t\n\t- 操作 `3` ： $O(1)$，哈希表插入为 $O(1)$ 的复杂度。\n\t\n\t- 操作 `4` ： $O(1)$，哈希表插入为 $O(1)$ 的复杂度。\n\n- 空间复杂度：$O(\\textit{recentMax}*tot)$，其中 `recentMax = 10`，`tot` 为推特总用户数。即对于每个用户我们不会存储超过 `recentMax` 个推特 `Id`，所以空间上限为 $O(\\textit{recentMax}*tot)$。"
}