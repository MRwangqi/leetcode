{
	"titleSlug": "design-front-middle-back-queue",
	"slug": "by-xiaowei_algorithm-1hs7",
	"url": "https://leetcode-cn.com/problems/design-front-middle-back-queue/solution/by-xiaowei_algorithm-1hs7/",
	"content": "**解题思路：**\r\n\r\n1. 直接用链表模拟就行了\r\n2. 注意删除中间节点时，如果长度为奇数，需要将中点往后走一位，因为我的找链表的中点方法记录的是中点的前一个节点\r\n\r\n**代码如下：**\r\n\r\n\r\n\r\n```Java\r\nclass FrontMiddleBackQueue {\r\n    int size;\r\n    Node head;\r\n    Node tail;\r\n    public FrontMiddleBackQueue() {\r\n        this.size = 0;\r\n        this.head = new Node();\r\n        this.tail = new Node();\r\n        head.next = tail;\r\n        tail.pre = head;\r\n        \r\n    }\r\n\r\n    public void pushFront(int val) {\r\n        insert(head, head.next, val);\r\n        size++;\r\n    }\r\n\r\n    public void pushMiddle(int val) {\r\n        Node mid = findMid(head);\r\n        insert(mid, mid.next, val);\r\n        size++;\r\n    }\r\n\r\n    public void pushBack(int val) {\r\n        insert(tail.pre, tail, val);\r\n        size++;\r\n    }\r\n\r\n    public int popFront() {\r\n        if (isEmpty()) {\r\n            return -1;\r\n        }\r\n        int val = head.next.value;\r\n        delete(head.next);\r\n        size--;\r\n        return val;\r\n\r\n    }\r\n\r\n    public int popMiddle() {\r\n        if (isEmpty()) {\r\n            return -1;\r\n        }\r\n\r\n        Node mid = findMid(head);\r\n        if (size % 2 == 1) {\r\n            mid = mid.next;\r\n        }\r\n        int val = mid.value;\r\n        delete(mid);\r\n        size--;\r\n        return val;\r\n    }\r\n\r\n    public int popBack() {\r\n        if (isEmpty()) {\r\n            return -1;\r\n        }\r\n        int val = tail.pre.value;\r\n        delete(tail.pre);\r\n        size--;\r\n        return val;\r\n    }\r\n\r\n\r\n    public boolean isEmpty() {\r\n        return size == 0;\r\n    }\r\n\r\n    public void insert(Node pre, Node next, int value) {\r\n        Node node = new Node(value);\r\n        pre.next = node;\r\n        node.pre = pre;\r\n\r\n        node.next = next;\r\n        next.pre = node;\r\n    }\r\n\r\n    public void delete(Node node) {\r\n        Node pre = node.pre;\r\n        Node next = node.next;\r\n        pre.next = next;\r\n        next.pre = pre;\r\n    }\r\n\r\n    public Node findMid(Node node) {\r\n        Node fast = node;\r\n        Node slow = node;\r\n        Node p = null;\r\n        while (fast != null && fast.next != null) {\r\n            p = slow;\r\n            slow = slow.next;\r\n            fast = fast.next.next;\r\n        }\r\n        return p;\r\n    }\r\n\r\n    static class Node {\r\n\r\n        Node pre;\r\n        Node next;\r\n        int value;\r\n\r\n        public Node() {\r\n\r\n        }\r\n\r\n        public Node(int value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n"
}