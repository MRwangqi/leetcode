{
	"titleSlug": "path-crossing",
	"slug": "pan-duan-lu-jing-shi-fou-xiang-jiao-by-leetcode-so",
	"url": "https://leetcode-cn.com/problems/path-crossing/solution/pan-duan-lu-jing-shi-fou-xiang-jiao-by-leetcode-so/",
	"content": "#### 方法一：哈希表\n\n**思路**\n\n我们可以模拟机器人行走的过程，机器人行走的本质是它的坐标发生了变化，要解决这个问题，就要保存机器人走过的所有坐标——所以这道题的关键在于如何判断「走到之前已经走过的位置」。\n\n由于数组 $\\it path$ 的长度最大是 $10^4$，我们并不能开一个二维数组来表示这个坐标平面：在极端情况下，机器人每次都沿着同一个方向前进，开二维数组需要 $(10^4)^2$ 个布尔类型变量的空间，它非常大。实际上，这 $(10^4)^2$ 个位置并不是都能用到，大多数位置是没有访问到的，用这样的方法打访问标记会造成很大的空间浪费。\n\n因此我们可以用哈希表来解决这个问题，即我们可以给「已经走过」的位置打上访问标记，把坐标 $(x, y)$ 存入哈希表，每次模拟坐标的变化得到新的坐标，在哈希表中查询这个坐标对应的哈希值有没有出现过，这样既不用花费很大的空间，又能快速查询到一个坐标是否访问过。\n\n在 `C++` 语言中，如果使用 `pair<int, int>` 存储坐标，那么我们需要自己实现哈希映射函数。我们可以令哈希函数 $f(x, y) = x \\times 20001 + y$，这是因为 $y$ 的取值范围在 $[-10^4, 10^4]$ 内，共有 $20001$ 种可能性，上述的哈希函数就不会造成冲突。在 `Python` 语言中，我们使用元组 `tuple` 存储坐标，可以直接放入哈希表 `set` 中。\n\n代码如下。\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    int getHash(int x, int y) {\n        return x * 20001 + y;\n    }\n\n    bool isPathCrossing(string path) {\n        unordered_set<int> vis;\n\n        int x = 0, y = 0;\n        vis.insert(getHash(x, y));\n\n        for (char dir: path) {\n            switch (dir) {\n                case 'N': --x; break;\n                case 'S': ++x; break;\n                case 'W': --y; break;\n                case 'E': ++y; break;\n            }\n            int hashValue = getHash(x, y);\n            if (vis.find(hashValue) != vis.end()) {\n                return true;\n            } else {\n                vis.insert(hashValue);\n            }\n        }\n\n        return false;\n    }\n};\n```\n\n```C++ [sol1-C++11]\nclass Solution {\npublic:\n    bool isPathCrossing(string path) {\n        auto pairHash = [](const pair<int, int>& o) {\n            return o.first * 20001 + o.second;\n        };\n        unordered_set<pair<int, int>, decltype(pairHash)> vis(0, pairHash);\n\n        int x = 0, y = 0;\n        vis.emplace(x, y);\n\n        for (char dir: path) {\n            switch (dir) {\n                case 'N': --x; break;\n                case 'S': ++x; break;\n                case 'W': --y; break;\n                case 'E': ++y; break;\n            }\n            if (vis.find({x, y}) != vis.end()) {\n                return true;\n            } else {\n                vis.emplace(x, y);\n            }\n        }\n\n        return false;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isPathCrossing(String path) {\n        Set<Integer> vis = new HashSet<Integer>();\n\n        int x = 0, y = 0;\n        vis.add(getHash(x, y));\n\n        int length = path.length();\n        for (int i = 0; i < length; i++) {\n            char dir = path.charAt(i);\n            switch (dir) {\n                case 'N': --x; break;\n                case 'S': ++x; break;\n                case 'W': --y; break;\n                case 'E': ++y; break;\n            }\n            int hashValue = getHash(x, y);\n            if (!vis.add(hashValue)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public int getHash(int x, int y) {\n        return x * 20001 + y;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def isPathCrossing(self, path: str) -> bool:\n        dirs = {\n            \"N\": (-1, 0),\n            \"S\": (1, 0),\n            \"W\": (0, -1),\n            \"E\": (0, 1),\n        }\n        \n        x, y = 0, 0\n        vis = set([(x, y)])\n        for ch in path:\n            dx, dy = dirs[ch]\n            x, y = x + dx, y + dy\n            if (x, y) in vis:\n                return True\n            vis.add((x, y))\n\n        return False\n```\n\n**复杂度**\n\n假设 `path` 的长度为 $n$。\n\n+ 时间复杂度：$O(n)$。最坏情况下，对于 $n$ 个元素，每个元素做一次 $O(1)$ 的哈希表查询和一次 $O(1)$ 的哈希表插入。\n\n+ 空间复杂度：$O(n)$。这里使用了哈希表作为辅助空间，故空间代价是 $O(n)$。"
}