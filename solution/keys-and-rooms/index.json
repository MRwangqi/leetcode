{
	"titleSlug": "keys-and-rooms",
	"slug": "yao-chi-he-fang-jian-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/keys-and-rooms/solution/yao-chi-he-fang-jian-by-leetcode-solution/",
	"content": "#### 前言\n\n当 $x$ 号房间中有 $y$ 号房间的钥匙时，我们就可以从 $x$ 号房间去往 $y$ 号房间。如果我们将这 $n$ 个房间看成有向图中的 $n$ 个节点，那么上述关系就可以看作是图中的 $x$ 号点到 $y$ 号点的一条有向边。\n\n这样一来，问题就变成了给定一张有向图，询问从 $0$ 号节点出发是否能够到达所有的节点。\n\n#### 方法一：深度优先搜索\n\n**思路及解法**\n\n我们可以使用深度优先搜索的方式遍历整张图，统计可以到达的节点个数，并利用数组 $\\textit{vis}$ 标记当前节点是否访问过，以防止重复访问。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> vis;\n    int num;\n\n    void dfs(vector<vector<int>>& rooms, int x) {\n        vis[x] = true;\n        num++;\n        for (auto& it : rooms[x]) {\n            if (!vis[it]) {\n                dfs(rooms, it);\n            }\n        }\n    }\n\n    bool canVisitAllRooms(vector<vector<int>>& rooms) {\n        int n = rooms.size();\n        num = 0;\n        vis.resize(n);\n        dfs(rooms, 0);\n        return num == n;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    boolean[] vis;\n    int num;\n\n    public boolean canVisitAllRooms(List<List<Integer>> rooms) {\n        int n = rooms.size();\n        num = 0;\n        vis = new boolean[n];\n        dfs(rooms, 0);\n        return num == n;\n    }\n\n    public void dfs(List<List<Integer>> rooms, int x) {\n        vis[x] = true;\n        num++;\n        for (int it : rooms.get(x)) {\n            if (!vis[it]) {\n                dfs(rooms, it);\n            }\n        }\n    }\n}\n```\n\n```C [sol1-C]\nint num;\n\nvoid dfs(int** rooms, int* roomsColSize, int* vis, int x) {\n    vis[x] = true;\n    num++;\n    for (int i = 0; i < roomsColSize[x]; i++) {\n        if (!vis[rooms[x][i]]) {\n            dfs(rooms, roomsColSize, vis, rooms[x][i]);\n        }\n    }\n}\n\nbool canVisitAllRooms(int** rooms, int roomsSize, int* roomsColSize) {\n    int vis[roomsSize];\n    memset(vis, 0, sizeof(vis));\n    num = 0;\n    dfs(rooms, roomsColSize, vis, 0);\n    return num == roomsSize;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        def dfs(x: int):\n            vis.add(x)\n            nonlocal num\n            num += 1\n            for it in rooms[x]:\n                if it not in vis:\n                    dfs(it)\n        \n        n = len(rooms)\n        num = 0\n        vis = set()\n        dfs(0)\n        return num == n\n```\n\n```golang [sol1-Golang]\nvar (\n    num int\n    vis []bool\n)\n\nfunc canVisitAllRooms(rooms [][]int) bool {\n    n := len(rooms)\n    num = 0\n    vis = make([]bool, n)\n    dfs(rooms, 0)\n    return num == n\n}\n\nfunc dfs(rooms [][]int, x int) {\n    vis[x] = true\n    num++\n    for _, it := range rooms[x] {\n        if !vis[it] {\n            dfs(rooms, it)\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m)$，其中 $n$ 是房间的数量，$m$ 是所有房间中的钥匙数量的总数。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是房间的数量。主要为栈空间的开销。\n\n#### 方法二：广度优先搜索\n\n**思路及解法**\n\n我们也可以使用广度优先搜索的方式遍历整张图，统计可以到达的节点个数，并利用数组 $\\textit{vis}$ 标记当前节点是否访问过，以防止重复访问。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool canVisitAllRooms(vector<vector<int>>& rooms) {\n        int n = rooms.size(), num = 0;\n        vector<int> vis(n);\n        queue<int> que;\n        vis[0] = true;\n        que.emplace(0);\n        while (!que.empty()) {\n            int x = que.front();\n            que.pop();\n            num++;\n            for (auto& it : rooms[x]) {\n                if (!vis[it]) {\n                    vis[it] = true;\n                    que.emplace(it);\n                }\n            }\n        }\n        return num == n;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean canVisitAllRooms(List<List<Integer>> rooms) {\n        int n = rooms.size(), num = 0;\n        boolean[] vis = new boolean[n];\n        Queue<Integer> que = new LinkedList<Integer>();\n        vis[0] = true;\n        que.offer(0);\n        while (!que.isEmpty()) {\n            int x = que.poll();\n            num++;\n            for (int it : rooms.get(x)) {\n                if (!vis[it]) {\n                    vis[it] = true;\n                    que.offer(it);\n                }\n            }\n        }\n        return num == n;\n    }\n}\n```\n\n```C [sol2-C]\nbool canVisitAllRooms(int** rooms, int roomsSize, int* roomsColSize) {\n    int vis[roomsSize], que[roomsSize];\n    memset(vis, 0, sizeof(vis));\n    int left = 0, right = 1, num = 0;\n    vis[0] = true;\n    que[0] = 0;\n    while (left < right) {\n        int x = que[left++];\n        num++;\n        for (int i = 0; i < roomsColSize[x]; i++) {\n            if (!vis[rooms[x][i]]) {\n                vis[rooms[x][i]] = true;\n                que[right++] = rooms[x][i];\n            }\n        }\n    }\n    return num == roomsSize;\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        n = len(rooms)\n        num = 0\n        vis = {0}\n        que = collections.deque([0])\n\n        while que:\n            x = que.popleft()\n            num += 1\n            for it in rooms[x]:\n                if it not in vis:\n                    vis.add(it)\n                    que.append(it)\n        \n        return num == n\n```\n\n```golang [sol2-Golang]\nfunc canVisitAllRooms(rooms [][]int) bool {\n    n := len(rooms)\n    num := 0\n    vis := make([]bool, n)\n    queue := []int{}\n    vis[0] = true\n    queue = append(queue, 0)\n    for i := 0; i < len(queue); i++ {\n        x := queue[i]\n        num++\n        for _, it := range rooms[x] {\n            if !vis[it] {\n                vis[it] = true\n                queue = append(queue, it)\n            }\n        }\n    }\n    return num == n\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m)$，其中 $n$ 是房间的数量，$m$ 是所有房间中的钥匙数量的总数。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是房间的数量。主要为队列的开销。"
}