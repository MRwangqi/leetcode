{
	"titleSlug": "check-subtree-lcci",
	"slug": "by-feyl-ercf",
	"url": "https://leetcode-cn.com/problems/check-subtree-lcci/solution/by-feyl-ercf/",
	"content": "方法一：\r\n```java\r\nclass Solution {\r\n    public boolean checkSubTree(TreeNode t1, TreeNode t2) {\r\n        StringBuilder s1 = new StringBuilder(), s2 = new StringBuilder();\r\n        travesal(t1, s1);\r\n        travesal(t2, s2);\r\n        return s1.toString().indexOf(s2.toString()) != -1;\r\n    }\r\n    void travesal(TreeNode node, StringBuilder s) {\r\n        if (node == null) return;\r\n        travesal(node.left, s);\r\n        s.append(node.val);\r\n        travesal(node.right, s);\r\n    }\r\n}\r\n```\r\n![image.png](https://pic.leetcode-cn.com/1651758742-UVIOZV-image.png)\r\n\r\n\r\n方法二：\r\n```java\r\nclass Solution {\r\n    public boolean checkSubTree(TreeNode t1, TreeNode t2) {\r\n        if (t2 == null) return true;\r\n        if (t1 == null) return false;\r\n        return equal(t1, t2) || checkSubTree(t1.left, t2) || checkSubTree(t1.right, t2);\r\n    }\r\n\r\n    boolean equal(TreeNode t1, TreeNode t2) {\r\n        if (t1 == t2) return true;     // t1 == null && t2 == null\r\n        if (t1 == null || t2 == null) return false;\r\n        return t1.val == t2.val && equal(t1.left, t2.left) && equal(t1.right, t2.right);\r\n    }\r\n}\r\n```\r\n![image.png](https://pic.leetcode-cn.com/1657358711-GTnsHP-image.png)\r\n\r\n\r\n\r\n> 解法来源：[递归和KMP解决两种方式](https://leetcode.cn/problems/check-subtree-lcci/solution/di-gui-he-kmpjie-jue-liang-chong-fang-sh-exip/)\r\n"
}