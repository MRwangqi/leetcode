{
	"titleSlug": "greatest-sum-divisible-by-three",
	"slug": "dong-tai-gui-hua-yu-zhuang-tai-zhuan-yi-by-christm",
	"url": "https://leetcode-cn.com/problems/greatest-sum-divisible-by-three/solution/dong-tai-gui-hua-yu-zhuang-tai-zhuan-yi-by-christm/",
	"content": "### 解题思路\n根据题意很容易想到用`状态转移与动态规划`的思路来解决\n### 定义\n- dp[i][0]表示nums[0...i]模三余零的最大和\n- dp[i][1]表示nums[0...i]模三余一的最大和\n- dp[i][2]表示nums[0...i]模三余二的最大和\n- `零状态`：当前数字最大和模三余零\n- `一状态`：当前数字最大和模三余一\n- `二状态`：当前数字最大和模三余二\n### 动态规划的思路\n对于任意一种状态，下一步我们都有两种选择，**一是选择当前元素**，**二是不选择当前元素**\n``` latex\n\tdp[i][*] = max{dp[i-1][*],dp[i-1][*] + nums[i]}  (* 取值为 0,1,2)\n```\n以上是常见的动态规划的递推结构\n\n### 状态转移\n本题的状态转移显而易见，以当前状态是`零状态`为例。我们可以想到，前一个状态无非是`零状态``一状态``二状态`，三种情况，针对这三种情况我们分类讨论即可\n\t\n![批注 2020-02-02 133759.png](https://pic.leetcode-cn.com/be0a2cfbc0a28aaaca328df3e1c84e2ab15e89f44cd808e3f9a11f18187a63ab-%E6%89%B9%E6%B3%A8%202020-02-02%20133759.png)\n\n\n### 动态规划与状态转移结合\n显然可以直接两种方法直接结合起来\n![image.png](https://pic.leetcode-cn.com/d769e27841642fe6a73d6a9236a0e29a74b1c18b41458aba5f1204aebc9512f3-image.png)\n\n所以`零状态`如何转移我们理解了之后，可以一次写出`一状态`的转移，`二状态`的转移\n![image.png](https://pic.leetcode-cn.com/4226919407f8947adb19a4beb778ea1254d5c08c85047ee2dd14ac189a51b687-image.png)\n![image.png](https://pic.leetcode-cn.com/59aa1336be725ffd749f59e0aa428bef7d11b63caab771990affe8facf175c1f-image.png)\n\n### 我的题解\n[LeetCode1262 可被三整除的最大和](https://leetcode-cn.com/problems/greatest-sum-divisible-by-three/solution/dong-tai-gui-hua-yu-zhuang-tai-zhuan-yi-by-christm/)\n[LeetCode688 “马”在棋盘上的概率](https://leetcode-cn.com/problems/knight-probability-in-chessboard/solution/zhuang-tai-ji-de-zai-ci-ying-yong-by-christmas_wan/)\n[LeetCode967 连续差相同的数字](https://leetcode-cn.com/problems/numbers-with-same-consecutive-differences/solution/cun-chu-kong-jian-ke-bian-de-dpshu-zu-by-christmas/)\n[LeetCode873 最长的斐波那契子序列的长度](https://leetcode-cn.com/problems/length-of-longest-fibonacci-subsequence/solution/zhuang-tai-ding-yi-hen-shi-zhong-yao-by-christmas_/)\n[LeetCode1218 最长定差子序列](https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/solution/yi-dao-jian-dan-de-dong-tai-gui-hua-de-you-hua-wen/)\n[LeetCode523 连续子数组和](https://leetcode-cn.com/problems/continuous-subarray-sum/solution/qian-zhui-he-yu-intmapde-zai-ci-ying-yong-by-chris/)\n[LeetCode576 出界的路径数](https://leetcode-cn.com/problems/out-of-boundary-paths/solution/zhuang-tai-ji-du-shi-zhuang-tai-ji-by-christmas_wa/)\n[LeetCode1220 统计元音字母序列的数目](https://leetcode-cn.com/problems/count-vowels-permutation/solution/dang-wo-men-zai-tan-dong-tai-gui-hua-de-shi-hou-wo/)\n### 代码\n\n```cpp\nclass Solution {\npublic:\n    int maxSumDivThree(vector<int>& nums) {\n       int n = nums.size();\n\tvector<vector<int>> dp(n + 1, vector<int>(3, 0));\n\tdp[0][0] = 0; dp[0][1] = INT_MIN; dp[0][2] = INT_MIN;\n\n\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (nums[i - 1] % 3 == 0) {\n\t\t\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][0] + nums[i - 1]);\n\t\t\tdp[i][1] = max(dp[i - 1][1], dp[i - 1][1] + nums[i - 1]);\n\t\t\tdp[i][2] = max(dp[i - 1][2], dp[i - 1][2] + nums[i - 1]);\n\t\t}\n\t\telse if (nums[i - 1] % 3 == 1) {\n\t\t\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][2] + nums[i - 1]);\n\t\t\tdp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + nums[i - 1]);\n\t\t\tdp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + nums[i - 1]);\n\t\t}\n\t\telse if (nums[i - 1] % 3 == 2) {\n\t\t\tdp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + nums[i - 1]);\n\t\t\tdp[i][1] = max(dp[i - 1][1], dp[i - 1][2] + nums[i - 1]);\n\t\t\tdp[i][2] = max(dp[i - 1][2], dp[i - 1][0] + nums[i - 1]);\n\t\t}\n\t}\n\treturn dp[n][0];\n    }\n};\n```"
}