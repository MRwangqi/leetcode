{
	"titleSlug": "minimum-interval-to-include-each-query",
	"slug": "bao-han-mei-ge-cha-xun-de-zui-xiao-qu-ji-e21j",
	"url": "https://leetcode-cn.com/problems/minimum-interval-to-include-each-query/solution/bao-han-mei-ge-cha-xun-de-zui-xiao-qu-ji-e21j/",
	"content": "#### 方法一：离线算法\n\n**提示 $1$**\n\n如果我们可以将给定的区间和询问重新排序，那么是否可以使得问题更加容易解决？\n\n**提示 $2$**\n\n我们可以将区间的左右端点以及询问都看成一个「事件」，如果我们将这些「事件」按照位置进行升序排序，那么：\n\n- 如果我们遇到一个表示区间左端点的「事件」，那么可以将该区间加入某一「数据结构」中；\n- 如果我们遇到一个表示区间右端点的「事件」，那么可以将该区间从「数据结构」中移除；\n- 如果我们遇到一个表示询问的「事件」，那么需要在「数据结构」中寻找最短的区间。\n\n**提示 $3$**\n\n你能想出一种合适的「数据结构」吗？\n\n**思路与算法**\n\n我们使用「有序集合」作为提示中的「数据结构」。\n\n根据提示 $2$，我们将每一个区间拆分成两个「事件」，询问对应一个「事件」，放入数组中进行升序排序。随后我们遍历这些「事件」：\n\n- 如果我们遇到一个表示区间左端点的「事件」，那么将该区间的长度加入「有序集合」中；\n- 如果我们遇到一个表示区间右端点的「事件」，那么将该区间的长度从「有序集合」中移除；\n- 如果我们遇到一个表示询问的「事件」，那么答案即为「有序集合」中的最小值。\n\n**细节**\n\n注意到区间的长度可能会相同，因此我们的「有序集合」需要支持重复元素。根据不同的语言，可以使用「支持重复元素的有序集合」或者「有序映射」，后者将一个映射键值对中的值作为该元素（键）出现的次数。\n\n如果不同类型的「事件」的位置相同，那么我们应当按照左端点、询问、右端点的顺序进行处理，这是因为每一个区间都是闭区间。\n\n**代码**\n\n```C++ [sol1-C++]\nstruct Event {\n    // 事件的类型，0 表示左端点，1 表示询问，2 表示右端点\n    int type;\n    // 事件的位置\n    int pos;\n    // 事件的额外参数\n    // 如果是 0 左端点事件，那么 para 记录右端点的位置\n    // 如果是 1 询问事件，那么 para 记录它是第几个询问，以便于返回答案数组\n    // 如果是 2 右端点事件，那么 para 记录左端点的位置\n    int para;\n    \n    Event(int _type, int _pos, int para): type(_type), pos(_pos), para(para) {}\n\n    // 自定义比较函数，按照事件的位置升序排序\n    // 如果位置相同，按照左端点、询问、右端点的顺序排序\n    bool operator< (const Event& that) const {\n        return pos < that.pos || (pos == that.pos && type < that.type);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& queries) {\n        int n = intervals.size();\n        int m = queries.size();\n        \n        vector<Event> events;\n        for (int i = 0; i < m; ++i) {\n            // 询问事件\n            events.emplace_back(1, queries[i], i);\n        }\n        for (const auto& interval: intervals) {\n            // 左端点事件\n            events.emplace_back(0, interval[0], interval[1]);\n            // 右端点事件\n            events.emplace_back(2, interval[1], interval[0]);\n        }\n\n        sort(events.begin(), events.end());\n\n        vector<int> ans(m, -1);\n        // 存储区间长度的有序集合，支持重复元素\n        multiset<int> seg;\n        for (const auto& event: events) {\n            if (event.type == 0) {\n                // 左端点事件，将区间长度加入有序集合\n                seg.insert(event.para - event.pos + 1);\n            }\n            else if (event.type == 1) {\n                // 询问事件，答案为有序集合中的最小值\n                if (!seg.empty()) {\n                    ans[event.para] = *seg.begin();\n                }\n            }\n            else {\n                // 右端点事件，将区间长度从有序集合中移除\n                int len = event.pos - event.para + 1;\n                auto it = seg.find(len);\n                seg.erase(it);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Event:\n    \"\"\"\n    op: 事件的类型，0 表示左端点，1 表示询问，2 表示右端点\n    pos: 事件的位置\n    para: 事件的额外参数\n        如果是 0 左端点事件，那么 para 记录右端点的位置\n        如果是 1 询问事件，那么 para 记录它是第几个询问，以便于返回答案数组\n        如果是 2 右端点事件，那么 para 记录左端点的位置\n    \"\"\"\n    def __init__(self, op: int, pos: int, para: int):\n        self.op = op\n        self.pos = pos\n        self.para = para\n\n    \"\"\"\n    自定义比较函数，按照事件的位置升序排序\n    如果位置相同，按照左端点、询问、右端点的顺序排序\n    \"\"\"\n    def __lt__(self, other: \"Event\") -> bool:\n        return self.pos < other.pos or (self.pos == other.pos and self.op < other.op)\n\n\nclass Solution:\n    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:\n        n, m = len(intervals), len(queries)\n\n        events = list()\n        for i, query in enumerate(queries):\n            # 询问事件\n            events.append(Event(1, query, i))\n\n        for i, (x, y) in enumerate(intervals):\n            # 左端点事件\n            events.append(Event(0, x, y))\n            # 右端点事件\n            events.append(Event(2, y, x))\n\n        events.sort()\n\n        ans = [-1] * m\n        # 存储区间长度的有序集合，支持重复元素\n        # 需要导入 sortedcontainers 库\n        seg = sortedcontainers.SortedList()\n        for event in events:\n            if event.op == 0:\n                # 左端点事件，将区间长度加入有序集合\n                seg.add(event.para - event.pos + 1)\n            elif event.op == 1:\n                # 询问事件，答案为有序集合中的最小值\n                if seg:\n                    ans[event.para] = seg[0]\n            else:\n                # 右端点事件，将区间长度从有序集合中移除\n                seg.remove(event.pos - event.para + 1)\n            \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O((n+q) \\log (n+q))$，其中 $n$ 是数组 $\\textit{intervals}$ 的长度，$q$ 是数组 $\\textit{queries}$ 的长度。「事件」的数量为 $2n+q = O(n+q)$，因此需要 $O((n+q) \\log (n+q))$ 的时间进行排序。在这之后，我们需要 $O(n+q)$ 的时间对事件进行遍历，而对有序集合进行操作的单次时间复杂度为 $O(\\log n)$，总时间复杂度为 $O((n+q) \\log n)$，在渐进意义下小于前者，可以忽略。\n\n- 空间复杂度：$O(n+q)$。我们需要 $O(n+q)$ 的空间存储「事件」，以及 $O(n)$ 的空间分配给有序集合，因此总空间复杂度为 $O(n+q)$。"
}