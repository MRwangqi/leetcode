{
	"titleSlug": "number-of-operations-to-make-network-connected",
	"slug": "lian-tong-wang-luo-de-cao-zuo-ci-shu-by-leetcode-s",
	"url": "https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/solution/lian-tong-wang-luo-de-cao-zuo-ci-shu-by-leetcode-s/",
	"content": "#### 前言\n\n我们首先考虑在什么情况下，不可能将所有计算机进行连接。\n\n当计算机的数量为 $n$ 时，我们至少需要 $n-1$ 根线才能将它们进行连接。如果线的数量少于 $n-1$，那么我们无论如何都无法将这 $n$ 台计算机进行连接。因此如果数组 $\\textit{connections}$ 的长度小于 $n-1$，我们可以直接返回 $-1$ 作为答案，否则我们一定可以找到一种操作方式。\n\n那么如何计算最少的操作次数呢？我们将这 $n$ 台计算机看成 $n$ 个节点，每一条线看成一条无向边。假设这个无向图中有 $k$ 个「连通分量」，连通分量的定义为：\n\n> 设集合 $V$ 为无向图中节点的一个子集，集合 $E$ 为无向图中所有两个端点都在 $V$ 中的边。设图 $S=(V, E)$，那么 $S$ 就称为无向图的一个「诱导子图」（或者叫「导出子图」）。「连通分量」是极大的「诱导子图」，这里的「极大」表现在：\n> - $V$ 中的任意两个节点仅通过 $E$ 就可以相互到达；\n>\n> - 不存在一个不属于 $V$ 的节点 $x$，使得 $x$ 与 $V$ 中的某个节点直接相连。\n>\n> 我们可以通过节点集合 $V$ 唯一地描述一个连通分量：例如在题目给出的样例 $1$ 中，有两个连通分量 $\\{0, 1, 2\\}$ 和 $\\{3\\}$；样例 $2$ 中，有三个连通分量 $\\{0, 1, 2, 3\\}$，$\\{4\\}$ 和 $\\{5\\}$。\n\n如果我们的操作是「添加一根线」而不是「移动一根线」，那么显然只需要添加 $k-1$ 根线就可以将所有计算机进行连接了：例如将编号为 $0$ 的连通分量中的任意一台计算机分别与编号为 $1, 2, \\cdots, k-1$ 的连通分量中的任意一台计算机相连。由于「移动一根线」的操作一定不会优于「添加一根线」，那么我们至少需要移动 $k-1$ 根线，才有可能将所有计算机连接。\n\n那么我们是否可以找到一种移动 $k-1$ 根线的操作方法呢？我们可以发现，$m$ 台电脑只需要 $m-1$ 根线就可以将它们进行连接。如果一个节点数为 $m$ 的连通分量中的边数超过 $m - 1$，就一定可以找到一条多余的边，且移除这条边之后，连通性保持不变。此时，我们就可以用这条边来连接两个连通分量，使得图中连通分量的个数减少 $1$。\n\n> 在题目给出的样例 $2$ 中，连通分量 $\\{0, 1, 2, 3\\}$ 中有 $5$ 条边，大于 $m-1=3$。因此一定可以找到一条多余的边。具体地，该连通分量中的任意一条边被移除后，连通性都保持不变。\n>\n> **注意**：并不是在所有的情况下，连通分量中的任意一条边都是可以被移除的，我们只需要保证必定能够找到「一条」多余的边。\n\n因此我们可以设计一个迭代的过程：每次在图中找出一条多余的边，将其断开，并连接图中的两个连通分量。将这个过程重复 $k-1$ 次，最终就可以使得整个图连通。\n\n我们如何保证一定能找出「一条」多余的边呢？我们需要证明的是，在**任意时刻**，如果图中有 $k'$ 个连通分量且 $k'>1$，即整个图还没有完全连通，那么一定存在一个连通分量，使得其有一条多余的边：即它的节点数为 $m_i$，边数为 $e_i$，并且有 $e_i > m_i - 1$。\n\n我们可以使用反证法来证明上面的结论。假设所有的连通分量都满足 $e_i \\leq m_i - 1$，那么：\n\n$$\n\\begin{cases}\ne_1 \\leq m_1 - 1 \\\\\ne_2 \\leq m_2 - 1 \\\\\n\\cdots \\\\\ne_{k'} \\leq m_{k'} - 1\n\\end{cases}\n$$\n\n将这 $k'$ 个不等式相加可以得到：\n\n$$\ne_1 + \\cdots + e_{k'} \\leq m_1 + \\cdots + m_{k'} - k' = n - k'\n$$\n\n左侧的 $e_1 + \\cdots + e_{k'}$ 即为图中的边数，右侧的 $m_1 + ... + m_{k'} = n$ 即为图中的节点数。由于图中至少有 $n-1$ 条边，那么有：\n\n$$\ne_1 + \\cdots + e_{k'} \\geq n - 1\n$$\n\n与\n\n$$\ne_1 + \\cdots + e_{k'} \\leq n - k'\n$$\n\n产生了矛盾！因此一定存在一个连通分量，它有一条多余的边。\n\n统计图中连通分量数的方法有很多，本篇题解中我们给出深度优先搜索和并查集两种方法。\n\n#### 方法一：深度优先搜索\n\n**思路与算法**\n\n我们可以使用深度优先搜索来得到图中的连通分量数。\n\n具体地，初始时所有节点的状态均为「待搜索」。我们每次选择一个「待搜索」的节点，从该节点开始进行深度优先搜索，并将所有搜索到的节点的状态更改为「已搜索」，这样我们就找到了一个连通分量。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    vector<vector<int>> edges;\n    vector<int> used;\n\npublic:\n    void dfs(int u) {\n        used[u] = true;\n        for (int v: edges[u]) {\n            if (!used[v]) {\n                dfs(v);\n            }\n        }\n    }\n    \n    int makeConnected(int n, vector<vector<int>>& connections) {\n        if (connections.size() < n - 1) {\n            return -1;\n        }\n\n        edges.resize(n);\n        for (const auto& conn: connections) {\n            edges[conn[0]].push_back(conn[1]);\n            edges[conn[1]].push_back(conn[0]);\n        }\n        \n        used.resize(n);\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (!used[i]) {\n                dfs(i);\n                ++ans;\n            }\n        }\n        \n        return ans - 1;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    List<Integer>[] edges;\n    boolean[] used;\n\n    public int makeConnected(int n, int[][] connections) {\n        if (connections.length < n - 1) {\n            return -1;\n        }\n\n        edges = new List[n];\n        for (int i = 0; i < n; ++i) {\n            edges[i] = new ArrayList<Integer>();\n        }\n        for (int[] conn : connections) {\n            edges[conn[0]].add(conn[1]);\n            edges[conn[1]].add(conn[0]);\n        }\n        \n        used = new boolean[n];\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (!used[i]) {\n                dfs(i);\n                ++ans;\n            }\n        }\n        \n        return ans - 1;\n    }\n\n    public void dfs(int u) {\n        used[u] = true;\n        for (int v : edges[u]) {\n            if (!used[v]) {\n                dfs(v);\n            }\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def makeConnected(self, n: int, connections: List[List[int]]) -> int:\n        if len(connections) < n - 1:\n            return -1\n        \n        edges = collections.defaultdict(list)\n        for x, y in connections:\n            edges[x].append(y)\n            edges[y].append(x)\n        \n        seen = set()\n\n        def dfs(u: int):\n            seen.add(u)\n            for v in edges[u]:\n                if v not in seen:\n                    dfs(v)\n        \n        ans = 0\n        for i in range(n):\n            if i not in seen:\n                dfs(i)\n                ans += 1\n        \n        return ans - 1\n```\n\n```JavaScript [sol1-JavaScript]\nvar makeConnected = function(n, connections) {\n    if (connections.length < n - 1) {\n        return -1;\n    }\n\n    const edges = new Map();\n    for (const [x, y] of connections) {\n        edges.get(x) ? edges.get(x).push(y) : edges.set(x, [y]);\n        edges.get(y) ? edges.get(y).push(x) : edges.set(y, [x]);\n    }\n\n    const used = new Array(n).fill(0);\n\n    let ans = 0;\n    for (let i = 0; i < n; i++) {\n        if (!used[i]) {\n            dfs(i, used, edges);\n            ans++;\n        }\n    }\n    return ans - 1;\n};\n\nconst dfs = (u, used, edges) => {\n    used[u] = 1;\n    if (edges.get(u)) {\n        for (const v of edges.get(u)) {\n            if (!used[v]) {\n                dfs(v, used, edges);\n            }\n        }\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc makeConnected(n int, connections [][]int) (ans int) {\n    if len(connections) < n-1 {\n        return -1\n    }\n\n    graph := make([][]int, n)\n    for _, c := range connections {\n        v, w := c[0], c[1]\n        graph[v] = append(graph[v], w)\n        graph[w] = append(graph[w], v)\n    }\n\n    vis := make([]bool, n)\n    var dfs func(int)\n    dfs = func(from int) {\n        vis[from] = true\n        for _, to := range graph[from] {\n            if !vis[to] {\n                dfs(to)\n            }\n        }\n    }\n    for i, v := range vis {\n        if !v {\n            ans++\n            dfs(i)\n        }\n    }\n    return ans - 1\n}\n```\n\n```C [sol1-C]\nvoid dfs(int** edges, int* edgesColSize, int* used, int u) {\n    used[u] = true;\n    for (int i = 0; i < edgesColSize[u]; i++) {\n        int v = edges[u][i];\n        if (!used[v]) {\n            dfs(edges, edgesColSize, used, v);\n        }\n    }\n}\n\nint makeConnected(int n, int** connections, int connectionsSize, int* connectionsColSize) {\n    if (connectionsSize < n - 1) {\n        return -1;\n    }\n\n    int* edges[n];\n    int edgesColSize[n];\n    memset(edgesColSize, 0, sizeof(edgesColSize));\n    for (int i = 0; i < connectionsSize; i++) {\n        edgesColSize[connections[i][0]]++;\n        edgesColSize[connections[i][1]]++;\n    }\n    for (int i = 0; i < n; i++) {\n        edges[i] = malloc(sizeof(int) * edgesColSize[i]);\n        edgesColSize[i] = 0;\n    }\n\n    for (int i = 0; i < connectionsSize; i++) {\n        int x = connections[i][0], y = connections[i][1];\n        edges[x][edgesColSize[x]++] = y;\n        edges[y][edgesColSize[y]++] = x;\n    }\n\n    int used[n];\n    memset(used, 0, sizeof(used));\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        if (!used[i]) {\n            dfs(edges, edgesColSize, used, i);\n            ++ans;\n        }\n    }\n\n    return ans - 1;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m)$，其中 $m$ 是数组 $\\textit{connections}$ 的长度。\n\n- 空间复杂度：$O(n+m)$，其中 $O(m)$ 为存储所有边需要的空间，$O(n)$ 为深度优先搜索中使用的栈空间。\n\n#### 方法二：并查集\n\n我们可以使用并查集来得到图中的连通分量数。\n\n并查集本身就是用来维护连通性的数据结构。如果其包含 $n$ 个节点，那么初始时连通分量数为 $n$，每成功进行一次合并操作，连通分量数就会减少 $1$。\n\n```C++ [sol2-C++]\n// 并查集模板\nclass UnionFind {\npublic:\n    vector<int> parent;\n    vector<int> size;\n    int n;\n    // 当前连通分量数目\n    int setCount;\n    \npublic:\n    UnionFind(int _n): n(_n), setCount(_n), parent(_n), size(_n, 1) {\n        iota(parent.begin(), parent.end(), 0);\n    }\n    \n    int findset(int x) {\n        return parent[x] == x ? x : parent[x] = findset(parent[x]);\n    }\n    \n    bool unite(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        if (x == y) {\n            return false;\n        }\n        if (size[x] < size[y]) {\n            swap(x, y);\n        }\n        parent[y] = x;\n        size[x] += size[y];\n        --setCount;\n        return true;\n    }\n    \n    bool connected(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        return x == y;\n    }\n};\n\nclass Solution {\npublic:\n    int makeConnected(int n, vector<vector<int>>& connections) {\n        if (connections.size() < n - 1) {\n            return -1;\n        }\n\n        UnionFind uf(n);\n        for (const auto& conn: connections) {\n            uf.unite(conn[0], conn[1]);\n        }\n\n        return uf.setCount - 1;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int makeConnected(int n, int[][] connections) {\n        if (connections.length < n - 1) {\n            return -1;\n        }\n\n        UnionFind uf = new UnionFind(n);\n        for (int[] conn : connections) {\n            uf.unite(conn[0], conn[1]);\n        }\n\n        return uf.setCount - 1;\n    }\n}\n\n// 并查集模板\nclass UnionFind {\n    int[] parent;\n    int[] size;\n    int n;\n    // 当前连通分量数目\n    int setCount;\n\n    public UnionFind(int n) {\n        this.n = n;\n        this.setCount = n;\n        this.parent = new int[n];\n        this.size = new int[n];\n        Arrays.fill(size, 1);\n        for (int i = 0; i < n; ++i) {\n            parent[i] = i;\n        }\n    }\n    \n    public int findset(int x) {\n        return parent[x] == x ? x : (parent[x] = findset(parent[x]));\n    }\n    \n    public boolean unite(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        if (x == y) {\n            return false;\n        }\n        if (size[x] < size[y]) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        parent[y] = x;\n        size[x] += size[y];\n        --setCount;\n        return true;\n    }\n    \n    public boolean connected(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        return x == y;\n    }\n}\n```\n\n```Python [sol2-Python3]\n# 并查集模板\nclass UnionFind:\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.n = n\n        # 当前连通分量数目\n        self.setCount = n\n    \n    def findset(self, x: int) -> int:\n        if self.parent[x] == x:\n            return x\n        self.parent[x] = self.findset(self.parent[x])\n        return self.parent[x]\n    \n    def unite(self, x: int, y: int) -> bool:\n        x, y = self.findset(x), self.findset(y)\n        if x == y:\n            return False\n        if self.size[x] < self.size[y]:\n            x, y = y, x\n        self.parent[y] = x\n        self.size[x] += self.size[y]\n        self.setCount -= 1\n        return True\n    \n    def connected(self, x: int, y: int) -> bool:\n        x, y = self.findset(x), self.findset(y)\n        return x == y\n\nclass Solution:\n    def makeConnected(self, n: int, connections: List[List[int]]) -> int:\n        if len(connections) < n - 1:\n            return -1\n        \n        uf = UnionFind(n)\n        for x, y in connections:\n            uf.unite(x, y)\n        \n        return uf.setCount - 1\n```\n\n```JavaScript [sol2-JavaScript]\nvar makeConnected = function(n, connections) {\n    if (connections.length < n - 1) {\n        return -1;\n    }\n\n    const uf = new UnionFind(n);\n    for (const conn of connections) {\n        uf.unite(conn[0], conn[1]);\n    }\n\n    return uf.setCount - 1;\n};\n\n// 并查集模板\nclass UnionFind {\n    constructor (n) {\n        this.parent = new Array(n).fill(0).map((element, index) => index);\n        this.size = new Array(n).fill(1);\n        // 当前连通分量数目\n        this.setCount = n;\n    }\n\n    findset (x) {\n        if (this.parent[x] === x) {\n            return x;\n        }\n        this.parent[x] = this.findset(this.parent[x]);\n        return this.parent[x];\n    }\n\n    unite (a, b) {\n        let x = this.findset(a), y = this.findset(b);\n        if (x === y) {\n            return false;\n        }\n        if (this.size[x] < this.size[y]) {\n            [x, y] = [y, x];\n        }\n        this.parent[y] = x;\n        this.size[x] += this.size[y];\n        this.setCount -= 1;\n        return true;\n    }\n\n    connected (a, b) {\n        const x = this.findset(a), y = this.findset(b);\n        return x === y;\n    }\n}\n```\n\n```go [sol2-Golang]\ntype unionFind struct {\n    parent, size []int\n    setCount     int // 当前连通分量数目\n}\n\nfunc newUnionFind(n int) *unionFind {\n    parent := make([]int, n)\n    size := make([]int, n)\n    for i := range parent {\n        parent[i] = i\n        size[i] = 1\n    }\n    return &unionFind{parent, size, n}\n}\n\nfunc (uf *unionFind) find(x int) int {\n    if uf.parent[x] != x {\n        uf.parent[x] = uf.find(uf.parent[x])\n    }\n    return uf.parent[x]\n}\n\nfunc (uf *unionFind) union(x, y int) {\n    fx, fy := uf.find(x), uf.find(y)\n    if fx == fy {\n        return\n    }\n    if uf.size[fx] < uf.size[fy] {\n        fx, fy = fy, fx\n    }\n    uf.size[fx] += uf.size[fy]\n    uf.parent[fy] = fx\n    uf.setCount--\n}\n\nfunc makeConnected(n int, connections [][]int) int {\n    if len(connections) < n-1 {\n        return -1\n    }\n\n    uf := newUnionFind(n)\n    for _, c := range connections {\n        uf.union(c[0], c[1])\n    }\n\n    return uf.setCount - 1\n}\n```\n\n```C [sol2-C]\nvoid swap(int* a, int* b) {\n    int tmp = *a;\n    *a = *b, *b = tmp;\n}\n\nstruct DisjointSetUnion {\n    int *f, *size;\n    int n, setCount;\n};\n\nvoid initDSU(struct DisjointSetUnion* obj, int n) {\n    obj->f = malloc(sizeof(int) * n);\n    obj->size = malloc(sizeof(int) * n);\n    obj->n = n;\n    obj->setCount = n;\n    for (int i = 0; i < n; i++) {\n        obj->f[i] = i;\n        obj->size[i] = 1;\n    }\n}\n\nint find(struct DisjointSetUnion* obj, int x) {\n    return obj->f[x] == x ? x : (obj->f[x] = find(obj, obj->f[x]));\n}\n\nint unionSet(struct DisjointSetUnion* obj, int x, int y) {\n    int fx = find(obj, x), fy = find(obj, y);\n    if (fx == fy) {\n        return false;\n    }\n    if (obj->size[fx] < obj->size[fy]) {\n        swap(&fx, &fy);\n    }\n    obj->size[fx] += obj->size[fy];\n    obj->f[fy] = fx;\n    obj->setCount--;\n    return true;\n}\n\nint makeConnected(int n, int** connections, int connectionsSize, int* connectionsColSize) {\n    if (connectionsSize < n - 1) {\n        return -1;\n    }\n\n    struct DisjointSetUnion* uf = malloc(sizeof(struct DisjointSetUnion));\n    initDSU(uf, n);\n    for (int i = 0; i < connectionsSize; i++) {\n        unionSet(uf, connections[i][0], connections[i][1]);\n    }\n\n    return uf->setCount - 1;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\cdot \\alpha(n))$，其中 $m$ 是数组 $\\textit{connections}$ 的长度，$\\alpha$ 是阿克曼函数的反函数。\n\n- 空间复杂度：$O(n)$，即为并查集需要使用的空间。"
}