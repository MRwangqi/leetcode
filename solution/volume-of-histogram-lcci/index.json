{
	"titleSlug": "volume-of-histogram-lcci",
	"slug": "zhi-fang-tu-de-shui-liang-by-leetcode-so-7rla",
	"url": "https://leetcode-cn.com/problems/volume-of-histogram-lcci/solution/zhi-fang-tu-de-shui-liang-by-leetcode-so-7rla/",
	"content": "#### 方法一：动态规划\n\n对于下标 $i$，水能到达的最大高度等于下标 $i$ 两边的最大高度的最小值，下标 $i$ 处能接的水的量等于下标 $i$ 处的水能到达的最大高度减去 $\\textit{height}[i]$。\n\n朴素的做法是对于数组 $\\textit{height}$ 中的每个元素，分别向左和向右扫描并记录左边和右边的最大高度，然后计算每个下标位置能接的水的量。假设数组 $\\textit{height}$ 的长度为 $n$，该做法需要对每个下标位置使用 $O(n)$ 的时间向两边扫描并得到最大高度，因此总时间复杂度是 $O(n^2)$。\n\n上述做法的时间复杂度较高是因为需要对每个下标位置都向两边扫描。如果已经知道每个位置两边的最大高度，则可以在 $O(n)$ 的时间内得到能接的水的总量。使用动态规划的方法，可以在 $O(n)$ 的时间内预处理得到每个位置两边的最大高度。\n\n创建两个长度为 $n$ 的数组 $\\textit{leftMax}$ 和 $\\textit{rightMax}$。对于 $0 \\le i<n$，$\\textit{leftMax}[i]$ 表示下标 $i$ 及其左边的位置中，$\\textit{height}$ 的最大高度，$\\textit{rightMax}[i]$ 表示下标 $i$ 及其右边的位置中，$\\textit{height}$ 的最大高度。\n\n显然，$\\textit{leftMax}[0]=\\textit{height}[0]$，$\\textit{rightMax}[n-1]=\\textit{height}[n-1]$。两个数组的其余元素的计算如下：\n\n- 当 $1 \\le i \\le n-1$ 时，$\\textit{leftMax}[i]=\\max(\\textit{leftMax}[i-1], \\textit{height}[i])$；\n\n- 当 $0 \\le i \\le n-2$ 时，$\\textit{rightMax}[i]=\\max(\\textit{rightMax}[i+1], \\textit{height}[i])$。\n\n因此可以正向遍历数组 $\\textit{height}$ 得到数组 $\\textit{leftMax}$ 的每个元素值，反向遍历数组 $\\textit{height}$ 得到数组 $\\textit{rightMax}$ 的每个元素值。\n\n在得到数组 $\\textit{leftMax}$ 和 $\\textit{rightMax}$ 的每个元素值之后，对于 $0 \\le i<n$，下标 $i$ 处能接的水的量等于 $\\min(\\textit{leftMax}[i],\\textit{rightMax}[i])-\\textit{height}[i]$。遍历每个下标位置即可得到能接的水的总量。\n\n动态规划做法可以由下图体现。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/jindian_17.21/1.png)\n\n```Java [sol1-Java]\nclass Solution {\n    public int trap(int[] height) {\n        int n = height.length;\n        if (n == 0) {\n            return 0;\n        }\n\n        int[] leftMax = new int[n];\n        leftMax[0] = height[0];\n        for (int i = 1; i < n; ++i) {\n            leftMax[i] = Math.max(leftMax[i - 1], height[i]);\n        }\n\n        int[] rightMax = new int[n];\n        rightMax[n - 1] = height[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            rightMax[i] = Math.max(rightMax[i + 1], height[i]);\n        }\n\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            ans += Math.min(leftMax[i], rightMax[i]) - height[i];\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc trap(height []int) (ans int) {\n    n := len(height)\n    if n == 0 {\n        return\n    }\n\n    leftMax := make([]int, n)\n    leftMax[0] = height[0]\n    for i := 1; i < n; i++ {\n        leftMax[i] = max(leftMax[i-1], height[i])\n    }\n\n    rightMax := make([]int, n)\n    rightMax[n-1] = height[n-1]\n    for i := n - 2; i >= 0; i-- {\n        rightMax[i] = max(rightMax[i+1], height[i])\n    }\n\n    for i, h := range height {\n        ans += min(leftMax[i], rightMax[i]) - h\n    }\n    return\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar trap = function(height) {\n    const n = height.length;\n    if (n == 0) {\n        return 0;\n    }\n\n    const leftMax = new Array(n).fill(0);\n    leftMax[0] = height[0];\n    for (let i = 1; i < n; ++i) {\n        leftMax[i] = Math.max(leftMax[i - 1], height[i]);\n    }\n\n    const rightMax = new Array(n).fill(0);\n    rightMax[n - 1] = height[n - 1];\n    for (let i = n - 2; i >= 0; --i) {\n        rightMax[i] = Math.max(rightMax[i + 1], height[i]);\n    }\n\n    let ans = 0;\n    for (let i = 0; i < n; ++i) {\n        ans += Math.min(leftMax[i], rightMax[i]) - height[i];\n    }\n    return ans;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        if not height:\n            return 0\n        \n        n = len(height)\n        leftMax = [height[0]] + [0] * (n - 1)\n        for i in range(1, n):\n            leftMax[i] = max(leftMax[i - 1], height[i])\n\n        rightMax = [0] * (n - 1) + [height[n - 1]]\n        for i in range(n - 2, -1, -1):\n            rightMax[i] = max(rightMax[i + 1], height[i])\n\n        ans = sum(min(leftMax[i], rightMax[i]) - height[i] for i in range(n))\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n        int n = height.size();\n        if (n == 0) {\n            return 0;\n        }\n        vector<int> leftMax(n);\n        leftMax[0] = height[0];\n        for (int i = 1; i < n; ++i) {\n            leftMax[i] = max(leftMax[i - 1], height[i]);\n        }\n\n        vector<int> rightMax(n);\n        rightMax[n - 1] = height[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            rightMax[i] = max(rightMax[i + 1], height[i]);\n        }\n\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            ans += min(leftMax[i], rightMax[i]) - height[i];\n        }\n        return ans;\n    }\n};\n```\n\n```C [sol1-C]\nint trap(int* height, int heightSize) {\n    int n = heightSize;\n    if (n == 0) {\n        return 0;\n    }\n    int leftMax[n];\n    memset(leftMax, 0, sizeof(leftMax));\n    leftMax[0] = height[0];\n    for (int i = 1; i < n; ++i) {\n        leftMax[i] = fmax(leftMax[i - 1], height[i]);\n    }\n\n    int rightMax[n];\n    memset(rightMax, 0, sizeof(rightMax));\n    rightMax[n - 1] = height[n - 1];\n    for (int i = n - 2; i >= 0; --i) {\n        rightMax[i] = fmax(rightMax[i + 1], height[i]);\n    }\n\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        ans += fmin(leftMax[i], rightMax[i]) - height[i];\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{height}$ 的长度。计算数组 $\\textit{leftMax}$ 和 $\\textit{rightMax}$ 的元素值各需要遍历数组 $\\textit{height}$ 一次，计算能接的水的总量还需要遍历一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{height}$ 的长度。需要创建两个长度为 $n$ 的数组 $\\textit{leftMax}$ 和 $\\textit{rightMax}$。\n\n#### 方法二：单调栈\n\n除了计算并存储每个位置两边的最大高度以外，也可以用单调栈计算能接的水的总量。\n\n维护一个单调栈，单调栈存储的是下标，满足从栈底到栈顶的下标对应的数组 $\\textit{height}$ 中的元素递减。\n\n从左到右遍历数组，遍历到下标 $i$ 时，如果栈内至少有两个元素，记栈顶元素为 $\\textit{top}$，$\\textit{top}$ 的下面一个元素是 $\\textit{left}$，则一定有 $\\textit{height}[\\textit{left}] \\ge \\textit{height}[\\textit{top}]$。如果 $\\textit{height}[i]>\\textit{height}[\\textit{top}]$，则得到一个可以接雨水的区域，该区域的宽度是 $i-\\textit{left}-1$，高度是 $\\min(\\textit{height}[\\textit{left}],\\textit{height}[i])-\\textit{height}[\\textit{top}]$，根据宽度和高度即可计算得到该区域能接的水的量。\n\n为了得到 $\\textit{left}$，需要将 $\\textit{top}$ 出栈。在对 $\\textit{top}$ 计算能接的水的量之后，$\\textit{left}$ 变成新的 $\\textit{top}$，重复上述操作，直到栈变为空，或者栈顶下标对应的 $\\textit{height}$ 中的元素大于或等于 $\\textit{height}[i]$。\n\n在对下标 $i$ 处计算能接的水的量之后，将 $i$ 入栈，继续遍历后面的下标，计算能接的水的量。遍历结束之后即可得到能接的水的总量。\n\n下面用一个例子 $\\textit{height}=[0,1,0,2,1,0,1,3,2,1,2,1]$ 来帮助读者理解单调栈的做法。\n\n<![f1](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f1.png),![f2](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f2.png),![f3](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f3.png),![f4](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f4.png),![f5](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f5.png),![f6](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f6.png),![f7](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f7.png),![f8](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f8.png),![f9](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f9.png),![f10](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f10.png),![f11](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f11.png),![f12](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f12.png),![f13](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f13.png),![f14](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f14.png),![f15](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f15.png),![f16](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f16.png),![f17](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f17.png),![f18](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f18.png),![f19](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f19.png),![f20](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f20.png),![f21](https://assets.leetcode-cn.com/solution-static/jindian_17.21/f21.png)>\n\n```Java [sol2-Java]\nclass Solution {\n    public int trap(int[] height) {\n        int ans = 0;\n        Deque<Integer> stack = new LinkedList<Integer>();\n        int n = height.length;\n        for (int i = 0; i < n; ++i) {\n            while (!stack.isEmpty() && height[i] > height[stack.peek()]) {\n                int top = stack.pop();\n                if (stack.isEmpty()) {\n                    break;\n                }\n                int left = stack.peek();\n                int currWidth = i - left - 1;\n                int currHeight = Math.min(height[left], height[i]) - height[top];\n                ans += currWidth * currHeight;\n            }\n            stack.push(i);\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc trap(height []int) (ans int) {\n    stack := []int{}\n    for i, h := range height {\n        for len(stack) > 0 && h > height[stack[len(stack)-1]] {\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if len(stack) == 0 {\n                break\n            }\n            left := stack[len(stack)-1]\n            curWidth := i - left - 1\n            curHeight := min(height[left], h) - height[top]\n            ans += curWidth * curHeight\n        }\n        stack = append(stack, i)\n    }\n    return\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar trap = function(height) {\n    let ans = 0;\n    const stack = [];\n    const n = height.length;\n    for (let i = 0; i < n; ++i) {\n        while (stack.length && height[i] > height[stack[stack.length - 1]]) {\n            const top = stack.pop();\n            if (!stack.length) {\n                break;\n            }\n            const left = stack[stack.length - 1];\n            const currWidth = i - left - 1;\n            const currHeight = Math.min(height[left], height[i]) - height[top];\n            ans += currWidth * currHeight;\n        }\n        stack.push(i);\n    }\n    return ans;\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        ans = 0\n        stack = list()\n        n = len(height)\n        \n        for i, h in enumerate(height):\n            while stack and h > height[stack[-1]]:\n                top = stack.pop()\n                if not stack:\n                    break\n                left = stack[-1]\n                currWidth = i - left - 1\n                currHeight = min(height[left], height[i]) - height[top]\n                ans += currWidth * currHeight\n            stack.append(i)\n        \n        return ans\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n        int ans = 0;\n        stack<int> stk;\n        int n = height.size();\n        for (int i = 0; i < n; ++i) {\n            while (!stk.empty() && height[i] > height[stk.top()]) {\n                int top = stk.top();\n                stk.pop();\n                if (stk.empty()) {\n                    break;\n                }\n                int left = stk.top();\n                int currWidth = i - left - 1;\n                int currHeight = min(height[left], height[i]) - height[top];\n                ans += currWidth * currHeight;\n            }\n            stk.push(i);\n        }\n        return ans;\n    }\n};\n```\n\n```C [sol2-C]\nint trap(int* height, int heightSize) {\n    int n = heightSize;\n    if (n == 0) {\n        return 0;\n    }\n    int ans = 0;\n    int stk[n], top = 0;\n    for (int i = 0; i < n; ++i) {\n        while (top && height[i] > height[stk[top - 1]]) {\n            int stk_top = stk[--top];\n            if (!top) {\n                break;\n            }\n            int left = stk[top - 1];\n            int currWidth = i - left - 1;\n            int currHeight = fmin(height[left], height[i]) - height[stk_top];\n            ans += currWidth * currHeight;\n        }\n        stk[top++] = i;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{height}$ 的长度。从 $0$ 到 $n-1$ 的每个下标最多只会入栈和出栈各一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{height}$ 的长度。空间复杂度主要取决于栈空间，栈的大小不会超过 $n$。\n\n#### 方法三：双指针\n\n动态规划的做法中，需要维护两个数组 $\\textit{leftMax}$ 和 $\\textit{rightMax}$，因此空间复杂度是 $O(n)$。是否可以将空间复杂度降到 $O(1)$？\n\n注意到下标 $i$ 处能接的水的量由 $\\textit{leftMax}[i]$ 和 $\\textit{rightMax}[i]$ 中的最小值决定。由于数组 $\\textit{leftMax}$ 是从左往右计算，数组 $\\textit{rightMax}$ 是从右往左计算，因此可以使用双指针和两个变量代替两个数组。\n\n维护两个指针 $\\textit{left}$ 和 $\\textit{right}$，以及两个变量 $\\textit{leftMax}$ 和 $\\textit{rightMax}$，初始时 $\\textit{left}=0,\\textit{right}=n-1,\\textit{leftMax}=0,\\textit{rightMax}=0$。指针 $\\textit{left}$ 只会向右移动，指针 $\\textit{right}$ 只会向左移动，在移动指针的过程中维护两个变量 $\\textit{leftMax}$ 和 $\\textit{rightMax}$ 的值。\n\n当两个指针没有相遇时，进行如下操作：\n\n- 使用 $\\textit{height}[\\textit{left}]$ 和 $\\textit{height}[\\textit{right}]$ 的值更新 $\\textit{leftMax}$ 和 $\\textit{rightMax}$ 的值；\n\n- 如果 $\\textit{height}[\\textit{left}]<\\textit{height}[\\textit{right}]$，则必有 $\\textit{leftMax}<\\textit{rightMax}$，下标 $\\textit{left}$ 处能接的水的量等于 $\\textit{leftMax}-\\textit{height}[\\textit{left}]$，将下标 $\\textit{left}$ 处能接的水的量加到能接的水的总量，然后将 $\\textit{left}$ 加 $1$（即向右移动一位）；\n\n- 如果 $\\textit{height}[\\textit{left}] \\ge \\textit{height}[\\textit{right}]$，则必有 $\\textit{leftMax} \\ge \\textit{rightMax}$，下标 $\\textit{right}$ 处能接的水的量等于 $\\textit{rightMax}-\\textit{height}[\\textit{right}]$，将下标 $\\textit{right}$ 处能接的水的量加到能接的水的总量，然后将 $\\textit{right}$ 减 $1$（即向左移动一位）。\n\n当两个指针相遇时，即可得到能接的水的总量。\n\n下面用一个例子 $\\textit{height}=[0,1,0,2,1,0,1,3,2,1,2,1]$ 来帮助读者理解双指针的做法。\n\n<![p1](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p1.png),![p2](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p2.png),![p3](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p3.png),![p4](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p4.png),![p5](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p5.png),![p6](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p6.png),![p7](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p7.png),![p8](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p8.png),![p9](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p9.png),![p10](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p10.png),![p11](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p11.png),![p12](https://assets.leetcode-cn.com/solution-static/jindian_17.21/p12.png)>\n\n```Java [sol3-Java]\nclass Solution {\n    public int trap(int[] height) {\n        int ans = 0;\n        int left = 0, right = height.length - 1;\n        int leftMax = 0, rightMax = 0;\n        while (left < right) {\n            leftMax = Math.max(leftMax, height[left]);\n            rightMax = Math.max(rightMax, height[right]);\n            if (height[left] < height[right]) {\n                ans += leftMax - height[left];\n                ++left;\n            } else {\n                ans += rightMax - height[right];\n                --right;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol3-Golang]\nfunc trap(height []int) (ans int) {\n    left, right := 0, len(height)-1\n    leftMax, rightMax := 0, 0\n    for left < right {\n        leftMax = max(leftMax, height[left])\n        rightMax = max(rightMax, height[right])\n        if height[left] < height[right] {\n            ans += leftMax - height[left]\n            left++\n        } else {\n            ans += rightMax - height[right]\n            right--\n        }\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar trap = function(height) {\n    let ans = 0;\n    let left = 0, right = height.length - 1;\n    let leftMax = 0, rightMax = 0;\n    while (left < right) {\n        leftMax = Math.max(leftMax, height[left]);\n        rightMax = Math.max(rightMax, height[right]);\n        if (height[left] < height[right]) {\n            ans += leftMax - height[left];\n            ++left;\n        } else {\n            ans += rightMax - height[right];\n            --right;\n        }\n    }\n    return ans;\n};\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n        ans = 0\n        left, right = 0, len(height) - 1\n        leftMax = rightMax = 0\n\n        while left < right:\n            leftMax = max(leftMax, height[left])\n            rightMax = max(rightMax, height[right])\n            if height[left] < height[right]:\n                ans += leftMax - height[left]\n                left += 1\n            else:\n                ans += rightMax - height[right]\n                right -= 1\n        \n        return ans\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n        int ans = 0;\n        int left = 0, right = height.size() - 1;\n        int leftMax = 0, rightMax = 0;\n        while (left < right) {\n            leftMax = max(leftMax, height[left]);\n            rightMax = max(rightMax, height[right]);\n            if (height[left] < height[right]) {\n                ans += leftMax - height[left];\n                ++left;\n            } else {\n                ans += rightMax - height[right];\n                --right;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```C [sol3-C]\nint trap(int* height, int heightSize) {\n    int ans = 0;\n    int left = 0, right = heightSize - 1;\n    int leftMax = 0, rightMax = 0;\n    while (left < right) {\n        leftMax = fmax(leftMax, height[left]);\n        rightMax = fmax(rightMax, height[right]);\n        if (height[left] < height[right]) {\n            ans += leftMax - height[left];\n            ++left;\n        } else {\n            ans += rightMax - height[right];\n            --right;\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{height}$ 的长度。两个指针的移动总次数不超过 $n$。\n\n- 空间复杂度：$O(1)$。只需要使用常数的额外空间。"
}