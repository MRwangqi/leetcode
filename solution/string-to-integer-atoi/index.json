{
	"titleSlug": "string-to-integer-atoi",
	"slug": "zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-",
	"url": "https://leetcode-cn.com/problems/string-to-integer-atoi/solution/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/",
	"content": "### 视频题解 \n#### 简述\n根据问题的描述我们来判断并且描述对应的解题方法。对于这道题目，很明显是字符串的转化问题。需要明确转化规则，尽量根据转化规则编写对应的子函数。\n\n这里我们要进行模式识别，一旦涉及整数的运算，我们需要注意溢出。本题可能产生溢出的步骤在于推入、乘以 $10$ 操作和累加操作都可能造成溢出。对于溢出的处理方式通常可以转换为 `INT_MAX` 的逆操作。比如判断某数乘以 $10$ 是否会溢出，那么就把该数和 `INT_MAX` 除以 $10$ 进行比较。\n\n![.... 字符串转换整数 (atoi).mp4](3c712e6e-fcf7-4953-9401-bd1d5c2b9cb8)\n\n### 文字题解\n#### 方法一：自动机\n\n**思路**\n\n字符串处理的题目往往涉及复杂的流程以及条件情况，如果直接上手写程序，一不小心就会写出极其臃肿的代码。\n\n因此，为了有条理地分析每个输入字符的处理方法，我们可以使用自动机这个概念：\n\n我们的程序在每个时刻有一个状态 `s`，每次从序列中输入一个字符 `c`，并根据字符 `c` 转移到下一个状态 `s'`。这样，我们只需要建立一个覆盖所有情况的从 `s` 与 `c` 映射到 `s'` 的表格即可解决题目中的问题。\n\n**算法**\n\n本题可以建立如下图所示的自动机：\n\n![fig1](https://assets.leetcode-cn.com/solution-static/8/fig1.png)\n\n我们也可以用下面的表格来表示这个自动机：\n\n|  | ' ' | +/- | number | other |\n|-----------|:-----:|:------:|:---------:|:-----:|\n| **start** | start | signed | in_number | end |\n| **signed** | end | end | in_number | end |\n| **in_number** | end | end | in_number | end |\n| **end** | end | end | end | end |\n\n接下来编程部分就非常简单了：我们只需要把上面这个状态转换表抄进代码即可。\n\n另外自动机也需要记录当前已经输入的数字，只要在 `s'` 为 `in_number` 时，更新我们输入的数字，即可最终得到输入的数字。\n\n```Python [sol1-Python3]\nINT_MAX = 2 ** 31 - 1\nINT_MIN = -2 ** 31\n\nclass Automaton:\n    def __init__(self):\n        self.state = 'start'\n        self.sign = 1\n        self.ans = 0\n        self.table = {\n            'start': ['start', 'signed', 'in_number', 'end'],\n            'signed': ['end', 'end', 'in_number', 'end'],\n            'in_number': ['end', 'end', 'in_number', 'end'],\n            'end': ['end', 'end', 'end', 'end'],\n        }\n        \n    def get_col(self, c):\n        if c.isspace():\n            return 0\n        if c == '+' or c == '-':\n            return 1\n        if c.isdigit():\n            return 2\n        return 3\n\n    def get(self, c):\n        self.state = self.table[self.state][self.get_col(c)]\n        if self.state == 'in_number':\n            self.ans = self.ans * 10 + int(c)\n            self.ans = min(self.ans, INT_MAX) if self.sign == 1 else min(self.ans, -INT_MIN)\n        elif self.state == 'signed':\n            self.sign = 1 if c == '+' else -1\n\nclass Solution:\n    def myAtoi(self, str: str) -> int:\n        automaton = Automaton()\n        for c in str:\n            automaton.get(c)\n        return automaton.sign * automaton.ans\n```\n```C++ [sol1-C++]\nclass Automaton {\n    string state = \"start\";\n    unordered_map<string, vector<string>> table = {\n        {\"start\", {\"start\", \"signed\", \"in_number\", \"end\"}},\n        {\"signed\", {\"end\", \"end\", \"in_number\", \"end\"}},\n        {\"in_number\", {\"end\", \"end\", \"in_number\", \"end\"}},\n        {\"end\", {\"end\", \"end\", \"end\", \"end\"}}\n    };\n\n    int get_col(char c) {\n        if (isspace(c)) return 0;\n        if (c == '+' or c == '-') return 1;\n        if (isdigit(c)) return 2;\n        return 3;\n    }\npublic:\n    int sign = 1;\n    long long ans = 0;\n\n    void get(char c) {\n        state = table[state][get_col(c)];\n        if (state == \"in_number\") {\n            ans = ans * 10 + c - '0';\n            ans = sign == 1 ? min(ans, (long long)INT_MAX) : min(ans, -(long long)INT_MIN);\n        }\n        else if (state == \"signed\")\n            sign = c == '+' ? 1 : -1;\n    }\n};\n\nclass Solution {\npublic:\n    int myAtoi(string str) {\n        Automaton automaton;\n        for (char c : str)\n            automaton.get(c);\n        return automaton.sign * automaton.ans;\n    }\n};\n```\n```Java [sol1-Java]\nclass Solution {\n    public int myAtoi(String str) {\n        Automaton automaton = new Automaton();\n        int length = str.length();\n        for (int i = 0; i < length; ++i) {\n            automaton.get(str.charAt(i));\n        }\n        return (int) (automaton.sign * automaton.ans);\n    }\n}\n\nclass Automaton {\n    public int sign = 1;\n    public long ans = 0;\n    private String state = \"start\";\n    private Map<String, String[]> table = new HashMap<String, String[]>() {{\n        put(\"start\", new String[]{\"start\", \"signed\", \"in_number\", \"end\"});\n        put(\"signed\", new String[]{\"end\", \"end\", \"in_number\", \"end\"});\n        put(\"in_number\", new String[]{\"end\", \"end\", \"in_number\", \"end\"});\n        put(\"end\", new String[]{\"end\", \"end\", \"end\", \"end\"});\n    }};\n\n    public void get(char c) {\n        state = table.get(state)[get_col(c)];\n        if (\"in_number\".equals(state)) {\n            ans = ans * 10 + c - '0';\n            ans = sign == 1 ? Math.min(ans, (long) Integer.MAX_VALUE) : Math.min(ans, -(long) Integer.MIN_VALUE);\n        } else if (\"signed\".equals(state)) {\n            sign = c == '+' ? 1 : -1;\n        }\n    }\n\n    private int get_col(char c) {\n        if (c == ' ') {\n            return 0;\n        }\n        if (c == '+' || c == '-') {\n            return 1;\n        }\n        if (Character.isDigit(c)) {\n            return 2;\n        }\n        return 3;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 为字符串的长度。我们只需要依次处理所有的字符，处理每个字符需要的时间为 $O(1)$。\n\n* 空间复杂度：$O(1)$。自动机的状态只需要常数空间存储。"
}