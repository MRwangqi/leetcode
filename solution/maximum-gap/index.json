{
	"titleSlug": "maximum-gap",
	"slug": "zui-da-jian-ju-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/maximum-gap/solution/zui-da-jian-ju-by-leetcode-solution/",
	"content": "#### 方法一：基数排序\n\n**思路与算法**\n\n一种最简单的思路是将数组排序后再找出最大间距，但传统的基于比较的排序算法（快速排序、归并排序等）均需要 $O(N\\log N)$ 的时间复杂度。如果要将时间复杂度降到 $O(N)$，我们就必须使用其他的排序算法。例如，[基数排序](https://baike.baidu.com/item/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F)可以在 $O(N)$ 的时间内完成整数之间的排序。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maximumGap(vector<int>& nums) {\n        int n = nums.size();\n        if (n < 2) {\n            return 0;\n        }\n        int exp = 1;\n        vector<int> buf(n);\n        int maxVal = *max_element(nums.begin(), nums.end());\n\n        while (maxVal >= exp) {\n            vector<int> cnt(10);\n            for (int i = 0; i < n; i++) {\n                int digit = (nums[i] / exp) % 10;\n                cnt[digit]++;\n            }\n            for (int i = 1; i < 10; i++) {\n                cnt[i] += cnt[i - 1];\n            }\n            for (int i = n - 1; i >= 0; i--) {\n                int digit = (nums[i] / exp) % 10;\n                buf[cnt[digit] - 1] = nums[i];\n                cnt[digit]--;\n            }\n            copy(buf.begin(), buf.end(), nums.begin());\n            exp *= 10;\n        }\n\n        int ret = 0;\n        for (int i = 1; i < n; i++) {\n            ret = max(ret, nums[i] - nums[i - 1]);\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maximumGap(int[] nums) {\n        int n = nums.length;\n        if (n < 2) {\n            return 0;\n        }\n        long exp = 1;\n        int[] buf = new int[n];\n        int maxVal = Arrays.stream(nums).max().getAsInt();\n\n        while (maxVal >= exp) {\n            int[] cnt = new int[10];\n            for (int i = 0; i < n; i++) {\n                int digit = (nums[i] / (int) exp) % 10;\n                cnt[digit]++;\n            }\n            for (int i = 1; i < 10; i++) {\n                cnt[i] += cnt[i - 1];\n            }\n            for (int i = n - 1; i >= 0; i--) {\n                int digit = (nums[i] / (int) exp) % 10;\n                buf[cnt[digit] - 1] = nums[i];\n                cnt[digit]--;\n            }\n            System.arraycopy(buf, 0, nums, 0, n);\n            exp *= 10;\n        }\n\n        int ret = 0;\n        for (int i = 1; i < n; i++) {\n            ret = Math.max(ret, nums[i] - nums[i - 1]);\n        }\n        return ret;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar maximumGap = function(nums) {\n    const n = nums.length;\n    if (n < 2) {\n        return 0;\n    }\n    let exp = 1;\n    const buf = new Array(n).fill(0);\n    const maxVal = Math.max(...nums);\n\n    while (maxVal >= exp) {\n        const cnt = new Array(10).fill(0);\n        for (let i = 0; i < n; i++) {\n            let digit = Math.floor(nums[i] / exp) % 10;\n            cnt[digit]++;\n        }\n        for (let i = 1; i < 10; i++) {\n            cnt[i] += cnt[i - 1];\n        }\n        for (let i = n - 1; i >= 0; i--) {\n            let digit = Math.floor(nums[i] / exp) % 10;\n            buf[cnt[digit] - 1] = nums[i];\n            cnt[digit]--;\n        }\n        nums.splice(0, n, ...buf);\n        exp *= 10;\n    }\n    \n    let ret = 0;\n    for (let i = 1; i < n; i++) {\n        ret = Math.max(ret, nums[i] - nums[i - 1]);\n    }\n    return ret;\n};\n```\n\n```Golang [sol1-Golang]\nfunc maximumGap(nums []int) (ans int) {\n    n := len(nums)\n    if n < 2 {\n        return\n    }\n\n    buf := make([]int, n)\n    maxVal := max(nums...)\n    for exp := 1; exp <= maxVal; exp *= 10 {\n        cnt := [10]int{}\n        for _, v := range nums {\n            digit := v / exp % 10\n            cnt[digit]++\n        }\n        for i := 1; i < 10; i++ {\n            cnt[i] += cnt[i-1]\n        }\n        for i := n - 1; i >= 0; i-- {\n            digit := nums[i] / exp % 10\n            buf[cnt[digit]-1] = nums[i]\n            cnt[digit]--\n        }\n        copy(nums, buf)\n    }\n\n    for i := 1; i < n; i++ {\n        ans = max(ans, nums[i]-nums[i-1])\n    }\n    return\n}\n\nfunc max(a ...int) int {\n    res := a[0]\n    for _, v := range a[1:] {\n        if v > res {\n            res = v\n        }\n    }\n    return res\n}\n```\n\n```C [sol1-C]\nint maximumGap(int* nums, int numsSize) {\n    if (numsSize < 2) {\n        return 0;\n    }\n    int exp = 1;\n    int buf[numsSize];\n    memset(buf, 0, sizeof(buf));\n    int maxVal = INT_MIN;\n    for (int i = 0; i < numsSize; ++i) {\n        maxVal = fmax(maxVal, nums[i]);\n    }\n\n    while (maxVal >= exp) {\n        int cnt[10];\n        memset(cnt, 0, sizeof(cnt));\n        for (int i = 0; i < numsSize; i++) {\n            int digit = (nums[i] / exp) % 10;\n            cnt[digit]++;\n        }\n        for (int i = 1; i < 10; i++) {\n            cnt[i] += cnt[i - 1];\n        }\n        for (int i = numsSize - 1; i >= 0; i--) {\n            int digit = (nums[i] / exp) % 10;\n            buf[cnt[digit] - 1] = nums[i];\n            cnt[digit]--;\n        }\n        memcpy(nums, buf, sizeof(int) * numsSize);\n        exp *= 10;\n    }\n\n    int ret = 0;\n    for (int i = 1; i < numsSize; i++) {\n        ret = fmax(ret, nums[i] - nums[i - 1]);\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是数组的长度。\n\n- 空间复杂度：$O(N)$，其中 $N$ 是数组的长度。\n\n#### 方法二：基于桶的算法\n\n**思路与算法**\n\n设长度为 $N$ 的数组中最大值为 $\\textit{max,min}$，则不难发现相邻数字的最大间距不会小于 $\\lceil (\\textit{max}-\\textit{min}) / (N-1) \\rceil$。\n\n为了说明这一点，我们使用反证法：假设相邻数字的间距都小于 $\\lceil (\\textit{max}-\\textit{min}) / (N-1)  \\rceil$，并记数组排序后从小到大的数字依次为 $A_1, A_2, ..., A_N$，则有\n\n$$\n\\begin{aligned}\nA_N - A_1&=(A_N - A_{N-1})+(A_{N-1}-A_{N-2})+ ... + (A_2 - A_1) \\\\\n&< \\lceil (\\textit{max}-\\textit{min}) / (N-1)  \\rceil + \\lceil (\\textit{max}-\\textit{min}) / (N-1)  \\rceil + ... + \\lceil (\\textit{max}-\\textit{min}) / (N-1)  \\rceil \\\\\n&< (N-1) \\cdot \\lceil (\\textit{max}-\\textit{min}) / (N-1)  \\rceil= \\textit{max}-\\textit{min}\n\\end{aligned}\n$$\n\n但根据 $A_1, A_N$ 的定义，一定有 $A_1=\\textit{min}$，且 $A_N=\\textit{max}$，故上式会导出矛盾。\n\n因此，我们可以选取整数 $d = \\lfloor (\\textit{max}-\\textit{min}) / (N-1) \\rfloor < \\lceil (\\textit{max}-\\textit{min}) / (N-1) \\rceil$。随后，我们将整个区间划分为若干个大小为 $d$ 的桶，并找出每个整数所在的桶。根据前面的结论，能够知道，元素之间的最大间距一定不会出现在某个桶的内部，而一定会出现在不同桶当中。\n\n因此，在找出每个元素所在的桶之后，我们可以维护每个桶内元素的最大值与最小值。随后，只需从前到后不断比较相邻的桶，用后一个桶的最小值与前一个桶的最大值之差作为两个桶的间距，最终就能得到所求的答案。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maximumGap(vector<int>& nums) {\n        int n = nums.size();\n        if (n < 2) {\n            return 0;\n        }\n        int minVal = *min_element(nums.begin(), nums.end());\n        int maxVal = *max_element(nums.begin(), nums.end());\n        int d = max(1, (maxVal - minVal) / (n - 1));\n        int bucketSize = (maxVal - minVal) / d + 1;\n\n        vector<pair<int, int>> bucket(bucketSize, {-1, -1});  // 存储 (桶内最小值，桶内最大值) 对，(-1, -1) 表示该桶是空的\n        for (int i = 0; i < n; i++) {\n            int idx = (nums[i] - minVal) / d;\n            if (bucket[idx].first == -1) {\n                bucket[idx].first = bucket[idx].second = nums[i];\n            } else {\n                bucket[idx].first = min(bucket[idx].first, nums[i]);\n                bucket[idx].second = max(bucket[idx].second, nums[i]);\n            }\n        }\n\n        int ret = 0;\n        int prev = -1;\n        for (int i = 0; i < bucketSize; i++) {\n            if (bucket[i].first == -1) continue;\n            if (prev != -1) {\n                ret = max(ret, bucket[i].first - bucket[prev].second);\n            }\n            prev = i;\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int maximumGap(int[] nums) {\n        int n = nums.length;\n        if (n < 2) {\n            return 0;\n        }\n        int minVal = Arrays.stream(nums).min().getAsInt();\n        int maxVal = Arrays.stream(nums).max().getAsInt();\n        int d = Math.max(1, (maxVal - minVal) / (n - 1));\n        int bucketSize = (maxVal - minVal) / d + 1;\n\n        int[][] bucket = new int[bucketSize][2];\n        for (int i = 0; i < bucketSize; ++i) {\n            Arrays.fill(bucket[i], -1); // 存储 (桶内最小值，桶内最大值) 对， (-1, -1) 表示该桶是空的\n        }\n        for (int i = 0; i < n; i++) {\n            int idx = (nums[i] - minVal) / d;\n            if (bucket[idx][0] == -1) {\n                bucket[idx][0] = bucket[idx][1] = nums[i];\n            } else {\n                bucket[idx][0] = Math.min(bucket[idx][0], nums[i]);\n                bucket[idx][1] = Math.max(bucket[idx][1], nums[i]);\n            }\n        }\n\n        int ret = 0;\n        int prev = -1;\n        for (int i = 0; i < bucketSize; i++) {\n            if (bucket[i][0] == -1) {\n                continue;\n            }\n            if (prev != -1) {\n                ret = Math.max(ret, bucket[i][0] - bucket[prev][1]);\n            }\n            prev = i;\n        }\n        return ret;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar maximumGap = function(nums) {\n    const n = nums.length;\n    if (n < 2) {\n        return 0;\n    }\n    const minVal = Math.min(...nums);\n    const maxVal = Math.max(...nums);\n    const d = Math.max(1, Math.floor(maxVal - minVal) / (n - 1));\n    const bucketSize = Math.floor((maxVal - minVal) / d) + 1;\n\n    const bucket = new Array(bucketSize).fill(0).map(x => new Array(2).fill(0));\n    for (let i = 0; i < bucketSize; ++i) {\n        bucket[i].fill(-1);\n    }\n    for (let i = 0; i < n; i++) {\n        const idx = Math.floor((nums[i] - minVal) / d);\n        if (bucket[idx][0] === -1) {\n            bucket[idx][0] = bucket[idx][1] = nums[i];\n        } else {\n            bucket[idx][0] = Math.min(bucket[idx][0], nums[i]);\n            bucket[idx][1] = Math.max(bucket[idx][1], nums[i]);\n        }\n    }\n\n    let ret = 0;\n    let prev = -1;\n    for (let i = 0; i < bucketSize; i++) {\n        if (bucket[i][0] == -1) {\n            continue;\n        }\n        if (prev != -1) {\n            ret = Math.max(ret, bucket[i][0] - bucket[prev][1]);\n        }\n        prev = i;\n    }\n    return ret;\n};\n```\n\n```Golang [sol2-Golang]\ntype pair struct{ min, max int }\n\nfunc maximumGap(nums []int) (ans int) {\n    n := len(nums)\n    if n < 2 {\n        return\n    }\n\n    minVal := min(nums...)\n    maxVal := max(nums...)\n    d := max(1, (maxVal-minVal)/(n-1))\n    bucketSize := (maxVal-minVal)/d + 1\n\n    // 存储 (桶内最小值，桶内最大值) 对，(-1, -1) 表示该桶是空的\n    buckets := make([]pair, bucketSize)\n    for i := range buckets {\n        buckets[i] = pair{-1, -1}\n    }\n    for _, v := range nums {\n        bid := (v - minVal) / d\n        if buckets[bid].min == -1 {\n            buckets[bid].min = v\n            buckets[bid].max = v\n        } else {\n            buckets[bid].min = min(buckets[bid].min, v)\n            buckets[bid].max = max(buckets[bid].max, v)\n        }\n    }\n\n    prev := -1\n    for i, b := range buckets {\n        if b.min == -1 {\n            continue\n        }\n        if prev != -1 {\n            ans = max(ans, b.min-buckets[prev].max)\n        }\n        prev = i\n    }\n    return\n}\n\nfunc min(a ...int) int {\n    res := a[0]\n    for _, v := range a[1:] {\n        if v < res {\n            res = v\n        }\n    }\n    return res\n}\n\nfunc max(a ...int) int {\n    res := a[0]\n    for _, v := range a[1:] {\n        if v > res {\n            res = v\n        }\n    }\n    return res\n}\n```\n\n```C [sol2-C]\nint maximumGap(int* nums, int numsSize) {\n    if (numsSize < 2) {\n        return 0;\n    }\n    int maxVal = INT_MIN, minVal = INT_MAX;\n    for (int i = 0; i < numsSize; ++i) {\n        maxVal = fmax(maxVal, nums[i]);\n        minVal = fmin(minVal, nums[i]);\n    }\n    int d = fmax(1, (maxVal - minVal) / (numsSize - 1));\n    int bucketSize = (maxVal - minVal) / d + 1;\n\n    int bucket[bucketSize][2];\n    memset(bucket, -1, sizeof(bucket));  // 存储 (桶内最小值，桶内最大值) 对，(-1, -1) 表示该桶是空的\n    for (int i = 0; i < numsSize; i++) {\n        int idx = (nums[i] - minVal) / d;\n        if (bucket[idx][0] == -1) {\n            bucket[idx][0] = bucket[idx][1] = nums[i];\n        } else {\n            bucket[idx][0] = fmin(bucket[idx][0], nums[i]);\n            bucket[idx][1] = fmax(bucket[idx][1], nums[i]);\n        }\n    }\n\n    int ret = 0;\n    int prev = -1;\n    for (int i = 0; i < bucketSize; i++) {\n        if (bucket[i][0] == -1) continue;\n        if (prev != -1) {\n            ret = fmax(ret, bucket[i][0] - bucket[prev][1]);\n        }\n        prev = i;\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是数组的长度。注意到桶的数量为 $(\\textit{max}-\\textit{min})/d \\approx N - 1 =O(N)$。\n\n- 空间复杂度：$O(N)$，其中 $N$ 是数组的长度。我们开辟的空间大小取决于桶的数量。"
}