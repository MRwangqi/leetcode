{
	"titleSlug": "UHnkqh",
	"slug": "fan-zhuan-lian-biao-by-leetcode-solution-34oi",
	"url": "https://leetcode-cn.com/problems/UHnkqh/solution/fan-zhuan-lian-biao-by-leetcode-solution-34oi/",
	"content": "#### 方法一：迭代\n\n假设链表为 $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow \\varnothing$，我们想要把它改成 $\\varnothing \\leftarrow 1 \\leftarrow 2 \\leftarrow 3$。\n\n在遍历链表时，将当前节点的 $\\textit{next}$ 指针改为指向前一个节点。由于节点没有引用其前一个节点，因此必须事先存储其前一个节点。在更改引用之前，还需要存储后一个节点。最后返回新的头引用。\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode curr = head;\n        while (curr != null) {\n            ListNode next = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar reverseList = function(head) {\n    let prev = null;\n    let curr = head;\n    while (curr) {\n        const next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};\n```\n\n```go [sol1-Golang]\nfunc reverseList(head *ListNode) *ListNode {\n    var prev *ListNode\n    curr := head\n    for curr != nil {\n        next := curr.Next\n        curr.Next = prev\n        prev = curr\n        curr = next\n    }\n    return prev\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};\n```\n\n```C [sol1-C]\nstruct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr) {\n        struct ListNode* next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的长度。需要遍历链表一次。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：递归\n\n递归版本稍微复杂一些，其关键在于反向工作。假设链表的其余部分已经被反转，现在应该如何反转它前面的部分？\n\n假设链表为：\n$$n_1\\rightarrow \\ldots \\rightarrow n_{k-1} \\rightarrow n_k \\rightarrow n_{k+1} \\rightarrow \\ldots \\rightarrow n_m \\rightarrow \\varnothing$$\n\n若从节点 $n_{k+1}$ 到 $n_m$ 已经被反转，而我们正处于 $n_k$。\n\n$$n_1\\rightarrow \\ldots \\rightarrow n_{k-1} \\rightarrow n_k \\rightarrow n_{k+1} \\leftarrow \\ldots \\leftarrow n_m$$\n\n我们希望 $n_{k+1}$ 的下一个节点指向 $n_k$。\n\n所以，$n_k.\\textit{next}.\\textit{next} = n_k$。\n\n需要注意的是 $n_1$ 的下一个节点必须指向 $\\varnothing$。如果忽略了这一点，链表中可能会产生环。\n\n```Java [sol2-Java]\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode newHead = reverseList(head.next);\n        head.next.next = head;\n        head.next = null;\n        return newHead;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar reverseList = function(head) {\n    if (head == null || head.next == null) {\n        return head;\n    }\n    const newHead = reverseList(head.next);\n    head.next.next = head;\n    head.next = null;\n    return newHead;\n};\n```\n\n```go [sol2-Golang]\nfunc reverseList(head *ListNode) *ListNode {\n    if head == nil || head.Next == nil {\n        return head\n    }\n    newHead := reverseList(head.Next)\n    head.Next.Next = head\n    head.Next = nil\n    return newHead\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if (!head || !head->next) {\n            return head;\n        }\n        ListNode* newHead = reverseList(head->next);\n        head->next->next = head;\n        head->next = nullptr;\n        return newHead;\n    }\n};\n```\n\n```C [sol2-C]\nstruct ListNode* reverseList(struct ListNode* head) {\n    if (head == NULL || head->next == NULL) {\n        return head;\n    }\n    struct ListNode* newHead = reverseList(head->next);\n    head->next->next = head;\n    head->next = NULL;\n    return newHead;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的长度。需要对链表的每个节点进行反转操作。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是链表的长度。空间复杂度主要取决于递归调用的栈空间，最多为 $n$ 层。"
}