{
	"titleSlug": "count-binary-substrings",
	"slug": "ji-shu-er-jin-zhi-zi-chuan-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/count-binary-substrings/solution/ji-shu-er-jin-zhi-zi-chuan-by-leetcode-solution/",
	"content": "#### 方法一：按字符分组\n\n**思路与算法**\n\n我们可以将字符串 $s$ 按照 $0$ 和 $1$ 的连续段分组，存在 $\\textit{counts}$ 数组中，例如 $s = 00111011$，可以得到这样的 $\\textit{counts}$ 数组：$\\textit{counts} = \\{2, 3, 1, 2\\}$。\n\n这里 $\\textit{counts}$ 数组中两个相邻的数一定代表的是两种不同的字符。假设 $\\textit{counts}$ 数组中两个相邻的数字为 $u$ 或者 $v$，它们对应着 $u$ 个 $0$ 和 $v$ 个 $1$，或者 $u$ 个 $1$ 和 $v$ 个 $0$。它们能组成的满足条件的子串数目为 $\\min \\{ u, v \\}$，即一对相邻的数字对答案的贡献。\n\n我们只要遍历所有相邻的数对，求它们的贡献总和，即可得到答案。\n\n不难得到这样的实现：\n\n```cpp [sol0-C++]\nclass Solution {\npublic:\n    int countBinarySubstrings(string s) {\n        vector<int> counts;\n        int ptr = 0, n = s.size();\n        while (ptr < n) {\n            char c = s[ptr];\n            int count = 0;\n            while (ptr < n && s[ptr] == c) {\n                ++ptr;\n                ++count;\n            }\n            counts.push_back(count);\n        }\n        int ans = 0;\n        for (int i = 1; i < counts.size(); ++i) {\n            ans += min(counts[i], counts[i - 1]);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol0-Java]\nclass Solution {\n    public int countBinarySubstrings(String s) {\n        List<Integer> counts = new ArrayList<Integer>();\n        int ptr = 0, n = s.length();\n        while (ptr < n) {\n            char c = s.charAt(ptr);\n            int count = 0;\n            while (ptr < n && s.charAt(ptr) == c) {\n                ++ptr;\n                ++count;\n            }\n            counts.add(count);\n        }\n        int ans = 0;\n        for (int i = 1; i < counts.size(); ++i) {\n            ans += Math.min(counts.get(i), counts.get(i - 1));\n        }\n        return ans;\n    }\n}\n```\n\n```JavaScript [sol0-JavaScript]\nvar countBinarySubstrings = function(s) {\n    const counts = [];\n    let ptr = 0, n = s.length;\n    while (ptr < n) {\n        const c = s.charAt(ptr);\n        let count = 0;\n        while (ptr < n && s.charAt(ptr) === c) {\n            ++ptr;\n            ++count;\n        }\n        counts.push(count);\n    }\n    let ans = 0;\n    for (let i = 1; i < counts.length; ++i) {\n        ans += Math.min(counts[i], counts[i - 1]);\n    }\n    return ans;\n};\n```\n\n```golang [sol0-Golang]\nfunc countBinarySubstrings(s string) int {\n    counts := []int{}\n    ptr, n := 0, len(s)\n    for ptr < n {\n        c := s[ptr]\n        count := 0\n        for ptr < n && s[ptr] == c {\n            ptr++\n            count++\n        }\n        counts = append(counts, count)\n    }\n    ans := 0\n    for i := 1; i < len(counts); i++ {\n        ans += min(counts[i], counts[i-1])\n    }\n    return ans\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n```C [sol0-C]\nint countBinarySubstrings(char* s) {\n    int n = strlen(s);\n    int counts[n], counts_len = 0;\n    memset(counts, 0, sizeof(counts));\n    int ptr = 0;\n    while (ptr < n) {\n        char c = s[ptr];\n        int count = 0;\n        while (ptr < n && s[ptr] == c) {\n            ++ptr;\n            ++count;\n        }\n        counts[counts_len++] = count;\n    }\n    int ans = 0;\n    for (int i = 1; i < counts_len; ++i) {\n        ans += fmin(counts[i], counts[i - 1]);\n    }\n    return ans;\n}\n```\n\n这个实现的时间复杂度和空间复杂度都是 $O(n)$。\n\n对于某一个位置 $i$，其实我们只关心 $i - 1$ 位置的 $\\textit{counts}$ 值是多少，所以可以用一个 $\\textit{last}$ 变量来维护当前位置的前一个位置，这样可以省去一个 $\\textit{counts}$ 数组的空间。\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    int countBinarySubstrings(string s) {\n        int ptr = 0, n = s.size(), last = 0, ans = 0;\n        while (ptr < n) {\n            char c = s[ptr];\n            int count = 0;\n            while (ptr < n && s[ptr] == c) {\n                ++ptr;\n                ++count;\n            }\n            ans += min(count, last);\n            last = count;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countBinarySubstrings(String s) {\n        int ptr = 0, n = s.length(), last = 0, ans = 0;\n        while (ptr < n) {\n            char c = s.charAt(ptr);\n            int count = 0;\n            while (ptr < n && s.charAt(ptr) == c) {\n                ++ptr;\n                ++count;\n            }\n            ans += Math.min(count, last);\n            last = count;\n        }\n        return ans;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar countBinarySubstrings = function(s) {\n    let ptr = 0, n = s.length, last = 0, ans = 0;\n    while (ptr < n) {\n        const c = s.charAt(ptr);\n        let count = 0;\n        while (ptr < n && s.charAt(ptr) === c) {\n            ++ptr;\n            ++count;\n        }\n        ans += Math.min(count, last);\n        last = count;\n    }\n    return ans;\n};\n```\n\n```golang [sol1-Golang]\nfunc countBinarySubstrings(s string) int {\n    var ptr, last, ans int\n    n := len(s)\n    for ptr < n {\n        c := s[ptr]\n        count := 0\n        for ptr < n && s[ptr] == c {\n            ptr++\n            count++\n        }\n        ans += min(count, last)\n        last = count\n    }\n\n    return ans\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n```C [sol1-C]\nint countBinarySubstrings(char* s) {\n    int ptr = 0, n = strlen(s), last = 0, ans = 0;\n    while (ptr < n) {\n        char c = s[ptr];\n        int count = 0;\n        while (ptr < n && s[ptr] == c) {\n            ++ptr;\n            ++count;\n        }\n        ans += fmin(count, last);\n        last = count;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$。\n+ 空间复杂度：$O(1)$。"
}