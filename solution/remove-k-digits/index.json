{
	"titleSlug": "remove-k-digits",
	"slug": "yi-diao-kwei-shu-zi-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/remove-k-digits/solution/yi-diao-kwei-shu-zi-by-leetcode-solution/",
	"content": "####  方法一：贪心 + 单调栈\n\n对于两个相同长度的数字序列，最左边不同的数字决定了这两个数字的大小，例如，对于 $A = 1axxx$，$B = 1bxxx$，如果 $a > b$ 则 $A > B$。\n\n基于此，我们可以知道，若要使得剩下的数字最小，需要保证靠前的数字尽可能小。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/402/402_fig1.png){:width=600}\n\n让我们从一个简单的例子开始。给定一个数字序列，例如 $425$，如果要求我们只删除一个数字，那么从左到右，我们有 $4$、$2$ 和 $5$ 三个选择。我们将每一个数字和它的左邻居进行比较。从 $2$ 开始，$2$ 小于它的左邻居 $4$。假设我们保留数字 $4$，那么所有可能的组合都是以数字 $4$（即 $42$，$45$）开头的。相反，如果移掉 $4$，留下 $2$，我们得到的是以 $2$ 开头的组合（即 $25$），这明显小于任何留下数字 $4$ 的组合。因此我们应该移掉数字 $4$。如果不移掉数字 $4$，则之后无论移掉什么数字，都不会得到最小数。\n\n基于上述分析，我们可以得出「删除一个数字」的贪心策略：\n\n给定一个长度为 $n$ 的数字序列 $[D_0D_1D_2D_3\\ldots D_{n-1}]$，从左往右找到第一个位置 $i$（$i>0$）使得 $D_i<D_{i-1}$，并删去 $D_{i-1}$；如果不存在，说明整个数字序列单调不降，删去最后一个数字即可。\n\n基于此，我们可以每次对整个数字序列执行一次这个策略；删去一个字符后，剩下的 $n-1$ 长度的数字序列就形成了新的子问题，可以继续使用同样的策略，直至删除 $k$ 次。\n\n然而暴力的实现复杂度最差会达到 $O(nk)$（考虑整个数字序列是单调不降的），因此我们需要加速这个过程。\n\n考虑从左往右增量的构造最后的答案。我们可以用一个栈维护当前的答案序列，栈中的元素代表截止到当前位置，删除不超过 $k$ 次个数字后，所能得到的最小整数。根据之前的讨论：在使用 $k$ 个删除次数之前，栈中的序列从栈底到栈顶单调不降。\n\n因此，对于每个数字，如果该数字小于栈顶元素，我们就不断地弹出栈顶元素，直到\n- 栈为空\n- 或者新的栈顶元素不大于当前数字\n- 或者我们已经删除了 $k$ 位数字\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/402/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/402/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/402/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/402/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/402/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/402/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/402/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/402/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/402/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/402/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/402/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/402/12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/402/13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/402/14.png),![ppt15](https://assets.leetcode-cn.com/solution-static/402/15.png)>\n\n上述步骤结束后我们还需要针对一些情况做额外的处理：\n- 如果我们删除了 $m$ 个数字且 $m<k$，这种情况下我们需要从序列尾部删除额外的 $k-m$ 个数字。\n- 如果最终的数字序列存在前导零，我们要删去前导零。\n- 如果最终数字序列为空，我们应该返回 $0$。\n\n最终，从栈底到栈顶的答案序列即为最小数。\n\n考虑到栈的特点是后进先出，如果通过栈实现，则需要将栈内元素依次弹出然后进行翻转才能得到最小数。为了避免翻转操作，可以使用双端队列代替栈的实现。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string removeKdigits(string num, int k) {\n        vector<char> stk;\n        for (auto& digit: num) {\n            while (stk.size() > 0 && stk.back() > digit && k) {\n                stk.pop_back();\n                k -= 1;\n            }\n            stk.push_back(digit);\n        }\n\n        for (; k > 0; --k) {\n            stk.pop_back();\n        }\n\n        string ans = \"\";\n        bool isLeadingZero = true;\n        for (auto& digit: stk) {\n            if (isLeadingZero && digit == '0') {\n                continue;\n            }\n            isLeadingZero = false;\n            ans += digit;\n        }\n        return ans == \"\" ? \"0\" : ans;\n    }\n};\n```\n```Java [sol1-Java]\nclass Solution {\n    public String removeKdigits(String num, int k) {\n        Deque<Character> deque = new LinkedList<Character>();\n        int length = num.length();\n        for (int i = 0; i < length; ++i) {\n            char digit = num.charAt(i);\n            while (!deque.isEmpty() && k > 0 && deque.peekLast() > digit) {\n                deque.pollLast();\n                k--;\n            }\n            deque.offerLast(digit);\n        }\n        \n        for (int i = 0; i < k; ++i) {\n            deque.pollLast();\n        }\n        \n        StringBuilder ret = new StringBuilder();\n        boolean leadingZero = true;\n        while (!deque.isEmpty()) {\n            char digit = deque.pollFirst();\n            if (leadingZero && digit == '0') {\n                continue;\n            }\n            leadingZero = false;\n            ret.append(digit);\n        }\n        return ret.length() == 0 ? \"0\" : ret.toString();\n    }\n}\n```\n```JavaScript [sol1-JavaScript]\nvar removeKdigits = function(num, k) {\n    const stk = [];\n    for (const digit of num) {\n        while (stk.length > 0 && stk[stk.length - 1] > digit && k) {\n            stk.pop();\n            k -= 1;\n        }\n        stk.push(digit);\n    }\n\n    for (; k > 0; --k) {\n        stk.pop();\n    }\n\n    let ans = \"\";\n    let isLeadingZero = true;\n    for (const digit of stk) {\n        if (isLeadingZero && digit === '0') {\n            continue;\n        }\n        isLeadingZero = false;\n        ans += digit;\n    }\n    return ans === \"\" ? \"0\" : ans;\n};\n```\n\n```Python3 [sol1-Python3]\nclass Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        numStack = []\n        \n        # 构建单调递增的数字串\n        for digit in num:\n            while k and numStack and numStack[-1] > digit:\n                numStack.pop()\n                k -= 1\n        \n            numStack.append(digit)\n        \n        # 如果 K > 0，删除末尾的 K 个字符\n        finalStack = numStack[:-k] if k else numStack\n        \n        # 抹去前导零\n        return \"\".join(finalStack).lstrip('0') or \"0\"\n```\n\n```Golang [sol1-Golang]\nfunc removeKdigits(num string, k int) string {\n    stack := []byte{}\n    for i := range num {\n        digit := num[i]\n        for k > 0 && len(stack) > 0 && digit < stack[len(stack)-1] {\n            stack = stack[:len(stack)-1]\n            k--\n        }\n        stack = append(stack, digit)\n    }\n    stack = stack[:len(stack)-k]\n    ans := strings.TrimLeft(string(stack), \"0\")\n    if ans == \"\" {\n        ans = \"0\"\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nchar* removeKdigits(char* num, int k) {\n    int n = strlen(num), top = 0;\n    char* stk = malloc(sizeof(char) * (n + 1));\n    for (int i = 0; i < n; i++) {\n        while (top > 0 && stk[top] > num[i] && k) {\n            top--, k--;\n        }\n        stk[++top] = num[i];\n    }\n    top -= k;\n\n    char* ans = malloc(sizeof(char) * (n + 1));\n    int ansSize = 0;\n    bool isLeadingZero = true;\n    for (int i = 1; i <= top; i++) {\n        if (isLeadingZero && stk[i] == '0') {\n            continue;\n        }\n        isLeadingZero = false;\n        ans[ansSize++] = stk[i];\n    }\n    if (ansSize == 0) {\n        ans[0] = '0', ans[1] = 0;\n    } else {\n        ans[ansSize] = 0;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 为字符串的长度。尽管存在嵌套循环，但内部循环最多运行 $k$ 次。由于 $0 < k \\le n$，主循环的时间复杂度被限制在 $2n$ 以内。对于主循环之外的逻辑，它们的时间复杂度是 $O(n)$，因此总时间复杂度为 $O(n)$。\n\n* 空间复杂度：$O(n)$。栈存储数字需要线性的空间。"
}