{
	"titleSlug": "4sum",
	"slug": "si-shu-zhi-he-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/4sum/solution/si-shu-zhi-he-by-leetcode-solution/",
	"content": "#### 前言\n\n本题与「[15. 三数之和](https://leetcode-cn.com/problems/3sum/)」相似，解法也相似。\n\n#### 方法一：排序 + 双指针\n\n**思路与算法**\n\n最朴素的方法是使用四重循环枚举所有的四元组，然后使用哈希表进行去重操作，得到不包含重复四元组的最终答案。假设数组的长度是 $n$，则该方法中，枚举的时间复杂度为 $O(n^4)$，去重操作的时间复杂度和空间复杂度也很高，因此需要换一种思路。\n\n为了避免枚举到重复四元组，则需要保证每一重循环枚举到的元素不小于其上一重循环枚举到的元素，且在同一重循环中不能多次枚举到相同的元素。\n\n为了实现上述要求，可以对数组进行排序，并且在循环过程中遵循以下两点：\n\n- 每一种循环枚举到的下标必须大于上一重循环枚举到的下标；\n\n- 同一重循环中，如果当前元素与上一个元素相同，则跳过当前元素。\n\n使用上述方法，可以避免枚举到重复四元组，但是由于仍使用四重循环，时间复杂度仍是 $O(n^4)$。注意到数组已经被排序，因此可以使用双指针的方法去掉一重循环。\n\n使用两重循环分别枚举前两个数，然后在两重循环枚举到的数之后使用双指针枚举剩下的两个数。假设两重循环枚举到的前两个数分别位于下标 $i$ 和 $j$，其中 $i<j$。初始时，左右指针分别指向下标 $j+1$ 和下标 $n-1$。每次计算四个数的和，并进行如下操作：\n\n- 如果和等于 $\\textit{target}$，则将枚举到的四个数加到答案中，然后将左指针右移直到遇到不同的数，将右指针左移直到遇到不同的数；\n\n- 如果和小于 $\\textit{target}$，则将左指针右移一位；\n\n- 如果和大于 $\\textit{target}$，则将右指针左移一位。\n\n使用双指针枚举剩下的两个数的时间复杂度是 $O(n)$，因此总时间复杂度是 $O(n^3)$，低于 $O(n^4)$。\n\n具体实现时，还可以进行一些剪枝操作：\n\n- 在确定第一个数之后，如果 $\\textit{nums}[i]+\\textit{nums}[i+1]+\\textit{nums}[i+2]+\\textit{nums}[i+3]>\\textit{target}$，说明此时剩下的三个数无论取什么值，四数之和一定大于 $\\textit{target}$，因此退出第一重循环；\n- 在确定第一个数之后，如果 $\\textit{nums}[i]+\\textit{nums}[n-3]+\\textit{nums}[n-2]+\\textit{nums}[n-1]<\\textit{target}$，说明此时剩下的三个数无论取什么值，四数之和一定小于 $\\textit{target}$，因此第一重循环直接进入下一轮，枚举 $\\textit{nums}[i+1]$；\n- 在确定前两个数之后，如果 $\\textit{nums}[i]+\\textit{nums}[j]+\\textit{nums}[j+1]+\\textit{nums}[j+2]>\\textit{target}$，说明此时剩下的两个数无论取什么值，四数之和一定大于 $\\textit{target}$，因此退出第二重循环；\n- 在确定前两个数之后，如果 $\\textit{nums}[i]+\\textit{nums}[j]+\\textit{nums}[n-2]+\\textit{nums}[n-1]<\\textit{target}$，说明此时剩下的两个数无论取什么值，四数之和一定小于 $\\textit{target}$，因此第二重循环直接进入下一轮，枚举 $\\textit{nums}[j+1]$。\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        List<List<Integer>> quadruplets = new ArrayList<List<Integer>>();\n        if (nums == null || nums.length < 4) {\n            return quadruplets;\n        }\n        Arrays.sort(nums);\n        int length = nums.length;\n        for (int i = 0; i < length - 3; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            if ((long) nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) {\n                break;\n            }\n            if ((long) nums[i] + nums[length - 3] + nums[length - 2] + nums[length - 1] < target) {\n                continue;\n            }\n            for (int j = i + 1; j < length - 2; j++) {\n                if (j > i + 1 && nums[j] == nums[j - 1]) {\n                    continue;\n                }\n                if ((long) nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {\n                    break;\n                }\n                if ((long) nums[i] + nums[j] + nums[length - 2] + nums[length - 1] < target) {\n                    continue;\n                }\n                int left = j + 1, right = length - 1;\n                while (left < right) {\n                    long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];\n                    if (sum == target) {\n                        quadruplets.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));\n                        while (left < right && nums[left] == nums[left + 1]) {\n                            left++;\n                        }\n                        left++;\n                        while (left < right && nums[right] == nums[right - 1]) {\n                            right--;\n                        }\n                        right--;\n                    } else if (sum < target) {\n                        left++;\n                    } else {\n                        right--;\n                    }\n                }\n            }\n        }\n        return quadruplets;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n        vector<vector<int>> quadruplets;\n        if (nums.size() < 4) {\n            return quadruplets;\n        }\n        sort(nums.begin(), nums.end());\n        int length = nums.size();\n        for (int i = 0; i < length - 3; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            if ((long) nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) {\n                break;\n            }\n            if ((long) nums[i] + nums[length - 3] + nums[length - 2] + nums[length - 1] < target) {\n                continue;\n            }\n            for (int j = i + 1; j < length - 2; j++) {\n                if (j > i + 1 && nums[j] == nums[j - 1]) {\n                    continue;\n                }\n                if ((long) nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {\n                    break;\n                }\n                if ((long) nums[i] + nums[j] + nums[length - 2] + nums[length - 1] < target) {\n                    continue;\n                }\n                int left = j + 1, right = length - 1;\n                while (left < right) {\n                    long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];\n                    if (sum == target) {\n                        quadruplets.push_back({nums[i], nums[j], nums[left], nums[right]});\n                        while (left < right && nums[left] == nums[left + 1]) {\n                            left++;\n                        }\n                        left++;\n                        while (left < right && nums[right] == nums[right - 1]) {\n                            right--;\n                        }\n                        right--;\n                    } else if (sum < target) {\n                        left++;\n                    } else {\n                        right--;\n                    }\n                }\n            }\n        }\n        return quadruplets;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar fourSum = function(nums, target) {\n    const quadruplets = [];\n    if (nums.length < 4) {\n        return quadruplets;\n    }\n    nums.sort((x, y) => x - y);\n    const length = nums.length;\n    for (let i = 0; i < length - 3; i++) {\n        if (i > 0 && nums[i] === nums[i - 1]) {\n            continue;\n        }\n        if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) {\n            break;\n        }\n        if (nums[i] + nums[length - 3] + nums[length - 2] + nums[length - 1] < target) {\n            continue;\n        }\n        for (let j = i + 1; j < length - 2; j++) {\n            if (j > i + 1 && nums[j] === nums[j - 1]) {\n                continue;\n            }\n            if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {\n                break;\n            }\n            if (nums[i] + nums[j] + nums[length - 2] + nums[length - 1] < target) {\n                continue;\n            }\n            let left = j + 1, right = length - 1;\n            while (left < right) {\n                const sum = nums[i] + nums[j] + nums[left] + nums[right];\n                if (sum === target) {\n                    quadruplets.push([nums[i], nums[j], nums[left], nums[right]]);\n                    while (left < right && nums[left] === nums[left + 1]) {\n                        left++;\n                    }\n                    left++;\n                    while (left < right && nums[right] === nums[right - 1]) {\n                        right--;\n                    }\n                    right--;\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n    }\n    return quadruplets;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        quadruplets = list()\n        if not nums or len(nums) < 4:\n            return quadruplets\n        \n        nums.sort()\n        length = len(nums)\n        for i in range(length - 3):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            if nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target:\n                break\n            if nums[i] + nums[length - 3] + nums[length - 2] + nums[length - 1] < target:\n                continue\n            for j in range(i + 1, length - 2):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                if nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target:\n                    break\n                if nums[i] + nums[j] + nums[length - 2] + nums[length - 1] < target:\n                    continue\n                left, right = j + 1, length - 1\n                while left < right:\n                    total = nums[i] + nums[j] + nums[left] + nums[right]\n                    if total == target:\n                        quadruplets.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left < right and nums[left] == nums[left + 1]:\n                            left += 1\n                        left += 1\n                        while left < right and nums[right] == nums[right - 1]:\n                            right -= 1\n                        right -= 1\n                    elif total < target:\n                        left += 1\n                    else:\n                        right -= 1\n        \n        return quadruplets\n```\n\n```Golang [sol1-Golang]\nfunc fourSum(nums []int, target int) (quadruplets [][]int) {\n    sort.Ints(nums)\n    n := len(nums)\n    for i := 0; i < n-3 && nums[i]+nums[i+1]+nums[i+2]+nums[i+3] <= target; i++ {\n        if i > 0 && nums[i] == nums[i-1] || nums[i]+nums[n-3]+nums[n-2]+nums[n-1] < target {\n            continue\n        }\n        for j := i + 1; j < n-2 && nums[i]+nums[j]+nums[j+1]+nums[j+2] <= target; j++ {\n            if j > i+1 && nums[j] == nums[j-1] || nums[i]+nums[j]+nums[n-2]+nums[n-1] < target {\n                continue\n            }\n            for left, right := j+1, n-1; left < right; {\n                if sum := nums[i] + nums[j] + nums[left] + nums[right]; sum == target {\n                    quadruplets = append(quadruplets, []int{nums[i], nums[j], nums[left], nums[right]})\n                    for left++; left < right && nums[left] == nums[left-1]; left++ {\n                    }\n                    for right--; left < right && nums[right] == nums[right+1]; right-- {\n                    }\n                } else if sum < target {\n                    left++\n                } else {\n                    right--\n                }\n            }\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint comp(const void* a, const void* b) {\n    return *(int*)a - *(int*)b;\n}\n\nint** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes) {\n    int** quadruplets = malloc(sizeof(int*) * 1001);\n    *returnSize = 0;\n    *returnColumnSizes = malloc(sizeof(int) * 1001);\n    if (numsSize < 4) {\n        return quadruplets;\n    }\n    qsort(nums, numsSize, sizeof(int), comp);\n    int length = numsSize;\n    for (int i = 0; i < length - 3; i++) {\n        if (i > 0 && nums[i] == nums[i - 1]) {\n            continue;\n        }\n        if ((long) nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) {\n            break;\n        }\n        if ((long) nums[i] + nums[length - 3] + nums[length - 2] + nums[length - 1] < target) {\n            continue;\n        }\n        for (int j = i + 1; j < length - 2; j++) {\n            if (j > i + 1 && nums[j] == nums[j - 1]) {\n                continue;\n            }\n            if ((long) nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {\n                break;\n            }\n            if ((long) nums[i] + nums[j] + nums[length - 2] + nums[length - 1] < target) {\n                continue;\n            }\n            int left = j + 1, right = length - 1;\n            while (left < right) {\n                long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];\n                if (sum == target) {\n                    int* tmp = malloc(sizeof(int) * 4);\n                    tmp[0] = nums[i], tmp[1] = nums[j], tmp[2] = nums[left], tmp[3] = nums[right];\n                    (*returnColumnSizes)[(*returnSize)] = 4;\n                    quadruplets[(*returnSize)++] = tmp;\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    left++;\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                    right--;\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n    }\n    return quadruplets;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^3)$，其中 $n$ 是数组的长度。排序的时间复杂度是 $O(n \\log n)$，枚举四元组的时间复杂度是 $O(n^3)$，因此总时间复杂度为 $O(n^3+n\\log n)=O(n^3)$。\n\n- 空间复杂度：$O(\\log n)$，其中 $n$ 是数组的长度。空间复杂度主要取决于排序额外使用的空间。此外排序修改了输入数组 $\\textit{nums}$，实际情况中不一定允许，因此也可以看成使用了一个额外的数组存储了数组 $\\textit{nums}$ 的副本并排序，空间复杂度为 $O(n)$。"
}