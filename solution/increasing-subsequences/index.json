{
	"titleSlug": "increasing-subsequences",
	"slug": "di-zeng-zi-xu-lie-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/increasing-subsequences/solution/di-zeng-zi-xu-lie-by-leetcode-solution/",
	"content": "#### 方法一：二进制枚举 + 哈希\n\n**思路与算法**\n\n我们可以采取最朴素的思路，即枚举出所有的子序列，然后判断当前的子序列是否是非严格递增的。那么我们可以用什么办法来枚举所有的子序列呢？我们需要从原序列中选出一些数，来形成新的序列，即原序列的子序列。对于原序列的每一个数来说，都有两种可能的状态，即被选中或者不被选中。如果我们用 $1$ 代表被选中，$0$ 代表不被选中，假设一个序列长度为 $3$，那么选出的子序列就对应着下面的八种状态：\n\n+ $[0, 0, 0]$\n+ $[0, 0, 1]$\n+ $[0, 1, 0]$\n+ $[0, 1, 1]$\n+ $[1, 0, 0]$\n+ $[1, 0, 1]$\n+ $[1, 1, 0]$\n+ $[1, 1, 1]$\n\n由此可见长度为 $n$ 的序列选择子序列一共会有 $2^{n}$ 种情况，这 $2^{n}$ 中情况就是区间 $[0， 2^{n - 1}]$ 的所有整数的二进制表示。我们可以枚举区间 $[0， 2^{n - 1}]$ 中的每一个数，然后对它做二进制数位拆分，我们会得到一个 $0/1$ 序列，接着可以构造出这个 $0/1$ 序列对应的子序列，然后再检查这个序列是否是非严格递增的。\n\n当然，我们还需要解决子序列去重的问题。对于序列去重，我们可以使用串哈希算法（即 Rabin-Karp 编码，这里不了解的同学可以参考「[官方题解 - 1392. 最长快乐前缀](https://leetcode-cn.com/problems/longest-happy-prefix/solution/zui-chang-kuai-le-qian-zhui-by-leetcode-solution/)」），即对于一个序列 $a_0, a_1, \\cdots, a_{n - 1}$，我们可以认为是一个 $\\max \\{ a_i \\} + 1$ 进制的数，这个数的数值等于（记 $b = \\max \\{ a_i \\} + 1$）：\n\n$$ f(\\vec{a}) = \\sum_{i = 0}^{n - 1} b^i \\times a_i $$\n\n每次我们找到一个合法序列的时候，都去计算这个序列的哈希值，用一个哈希表来记录已有的哈希值，如果该值已经出现在哈希表中，就舍弃这个序列，否则就把这个序列加入到答案中。\n\n在实现的过程中，我们发现这个哈希值可能非常大，我们可以将它模一个大素数 $P$，将这个值映射到 $\\rm int$ 的范围内。所以实际上这里的哈希函数是：\n\n$$ f(\\vec{a}) =  \\sum_{i = 0}^{n - 1} b^i \\times a_i \\pmod P$$\n\n而这里的 $b$ 也未必是 $\\max \\{ a_i \\} + 1$，它可以任意选一个大于 $\\max \\{ a_i \\} + 1$ 的数。\n\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    vector<int> temp;\n    vector<vector<int>> ans;\n    unordered_set<int> s;\n    int n;\n\n    void findSubsequences(int mask, vector<int>& nums) {\n        temp.clear();\n        for (int i = 0; i < n; ++i) {\n            if (mask & 1) {\n                temp.push_back(nums[i]);\n            }\n            mask >>= 1;\n        }\n    }\n\n    bool check() {\n        for (int i = 1; i < temp.size(); ++i) {\n            if (temp[i] < temp[i - 1]) {\n                return false;\n            }\n        }\n        return temp.size() >= 2;\n    }\n\n    int getHash(int base, int mod) {\n        int hashValue = 0;\n        for (const auto &x: temp) {\n            hashValue = 1LL * hashValue * base % mod + (x + 101);\n            hashValue %= mod;\n        }\n        return hashValue;\n    }\n\n    vector<vector<int>> findSubsequences(vector<int>& nums) {\n        n = nums.size();\n        for (int i = 0; i < (1 << n); ++i) {\n            findSubsequences(i, nums);\n            int hashValue = getHash(263, int(1E9) + 7);\n            if (check() && s.find(hashValue) == s.end()) {\n                ans.push_back(temp);\n                s.insert(hashValue);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    List<Integer> temp = new ArrayList<Integer>();\n    List<List<Integer>> ans = new ArrayList<List<Integer>>();\n    Set<Integer> set = new HashSet<Integer>();\n    int n;\n\n    public List<List<Integer>> findSubsequences(int[] nums) {\n        n = nums.length;\n        for (int i = 0; i < (1 << n); ++i) {\n            findSubsequences(i, nums);\n            int hashValue = getHash(263, (int) 1E9 + 7);\n            if (check() && !set.contains(hashValue)) {\n                ans.add(new ArrayList<Integer>(temp));\n                set.add(hashValue);\n            }\n        }\n        return ans;\n    }\n\n    public void findSubsequences(int mask, int[] nums) {\n        temp.clear();\n        for (int i = 0; i < n; ++i) {\n            if ((mask & 1) != 0) {\n                temp.add(nums[i]);\n            }\n            mask >>= 1;\n        }\n    }\n\n    public int getHash(int base, int mod) {\n        int hashValue = 0;\n        for (int x : temp) {\n            hashValue = hashValue * base % mod + (x + 101);\n            hashValue %= mod;\n        }\n        return hashValue;\n    }\n\n    public boolean check() {\n        for (int i = 1; i < temp.size(); ++i) {\n            if (temp.get(i) < temp.get(i - 1)) {\n                return false;\n            }\n        }\n        return temp.size() >= 2;\n    }\n}\n```\n\n```golang [sol1-Golang]\nvar (\n    n int\n    temp []int\n)\nfunc findSubsequences(nums []int) [][]int {\n    n = len(nums)\n    ans := [][]int{}\n    set := map[int]bool{}\n    for i := 0; i < 1 << n; i++ {\n        findSubsequences1(i, nums)\n        hashValue := getHash(263, int(1e9 + 7))\n        if check() && !set[hashValue] {\n            t := make([]int, len(temp))\n            copy(t, temp)\n            ans = append(ans, t)\n            set[hashValue] = true\n        }\n    }\n    return ans\n}\n\nfunc findSubsequences1(mask int, nums []int) {\n    temp = []int{}\n    for i := 0; i < n; i++ {\n        if (mask & 1) != 0 {\n            temp = append(temp, nums[i])\n        }\n        mask >>= 1\n    }\n}\n\nfunc getHash(base, mod int) int {\n    hashValue := 0\n    for _, x := range temp {\n        hashValue = hashValue * base % mod + (x + 101)\n        hashValue %= mod\n    }\n    return hashValue\n}\n\nfunc check() bool {\n    for i := 1; i < len(temp); i++ {\n        if temp[i] < temp[i - 1] {\n            return false\n        }\n    }\n    return len(temp) >= 2\n}\n```\n\n**复杂度分析**\n\n假设序列的长度是 $n$。\n\n+ 时间复杂度：$O(2^n \\cdot n)$。这里枚举所有子序列的时间代价是 $O(2^n)$，每次检测序列是否合法和获取哈希值的时间代价都是 $O(n)$，故渐近时间复杂度为 $O(2^n \\cdot n)$。\n+ 空间复杂度：$O(2^n)$。最坏情况下整个序列都是递增的，每个长度大于等于 $2$ 的子序列都要加入答案，这里哈希表中要加入 $2^n$ 个元素，空间代价为 $O(2^n)$；用一个临时的数组来存当前答案，空间代价为 $O(n)$。\n\n#### 方法二：递归枚举 + 减枝\n\n**思路与算法**\n\n我们也可以用递归的方法实现二进制枚举，像「方法一」那样枚举出所有的子序列，然后判断是否合法。直接把方法一变成递归形式，我们可以得到这样的代码：\n\n```cpp [sol2-C++]\nvector<vector<int>> ans;\nvector<int> temp;\nvoid dfs(int cur, vector<int>& nums) {\n    if (cur == nums.size()) {\n        // 判断是否合法，如果合法判断是否重复，将满足条件的加入答案\n        if (isValid() && notVisited()) {\n            ans.push_back(temp);\n        }\n        return;\n    }\n    // 如果选择当前元素\n    temp.push_back(nums[cur]);\n    dfs(cur + 1, nums);\n    temp.pop_back();\n    // 如果不选择当前元素\n    dfs(cur + 1, nums);\n}\n```\n\n```Java [sol2-Java]\nList<List<Integer>> ans = new ArrayList<List<Integer>>();\nList<Integer> temp = new ArrayList<Integer>();\npublic void dfs(int cur, int[] nums) {\n    if (cur == nums.length) {\n        // 判断是否合法，如果合法判断是否重复，将满足条件的加入答案\n        if (isValid() && notVisited()) {\n            ans.add(new ArrayList<Integer>(temp));\n        }\n        return;\n    }\n    // 如果选择当前元素\n    temp.add(nums[cur]);\n    dfs(cur + 1, nums);\n    temp.remove(temp.size() - 1);\n    // 如果不选择当前元素\n    dfs(cur + 1, nums);\n}\n```\n\n这是一个递归枚举子序列的通用模板，即用一个临时数组 $\\rm temp$ 来保存当前选出的子序列，使用 $\\rm cur$ 来表示当前位置的下标，在 `dfs(cur, nums)` 开始之前，$[0, {\\rm cur} - 1]$ 这个区间内的所有元素都已经被考虑过，而 $[{\\rm cur}, n]$ 这个区间内的元素还未被考虑。在执行 `dfs(cur, nums)` 时，我们考虑 ${\\rm cur}$ 这个位置选或者不选，如果选择当前元素，那么把当前元素加入到 $\\rm temp$ 中，然后递归下一个位置，在递归结束后，应当把 $\\rm temp$ 的最后一个元素删除进行回溯；如果不选当前的元素，直接递归下一个位置。\n\n当然，如果我们简单地这样枚举，对于每一个子序列，我们还需要做一次 $O(n)$ 的合法性检查和哈希判重复，在执行整个程序的过程中，我们还需要使用一个空间代价 $O(2^n)$ 的哈希表来维护已经出现的子序列的哈希值。我们可以对选择和不选择做一些简单的限定，就可以让枚举出来的都是合法的并且不重复：\n\n+ 使序列合法的办法非常简单，即给「选择」做一个限定条件，只有当前的元素大于等于上一个选择的元素的时候才能选择这个元素，这样枚举出来的所有元素都是合法的\n+ 那如何保证没有重复呢？我们需要给「不选择」做一个限定条件，只有当当前的元素不等于上一个选择的元素的时候，才考虑不选择当前元素，直接递归后面的元素。因为如果有两个相同的元素，我们会考虑这样四种情况：\n  1. 前者被选择，后者被选择\n  2. 前者被选择，后者不被选择\n  3. 前者不被选择，后者被选择\n  4. 前者不被选择，后者不被选择\n\n    其中第二种情况和第三种情况其实是等价的，我们这样限制之后，舍弃了第二种，保留了第三种，于是达到了去重的目的。\n\n**代码**\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    vector<int> temp; \n    vector<vector<int>> ans;\n\n    void dfs(int cur, int last, vector<int>& nums) {\n        if (cur == nums.size()) {\n            if (temp.size() >= 2) {\n                ans.push_back(temp);\n            }\n            return;\n        }\n        if (nums[cur] >= last) {\n            temp.push_back(nums[cur]);\n            dfs(cur + 1, nums[cur], nums);\n            temp.pop_back();\n        }\n        if (nums[cur] != last) {\n            dfs(cur + 1, last, nums);\n        }\n    }\n\n    vector<vector<int>> findSubsequences(vector<int>& nums) {\n        dfs(0, INT_MIN, nums);\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    List<Integer> temp = new ArrayList<Integer>();\n    List<List<Integer>> ans = new ArrayList<List<Integer>>();\n\n    public List<List<Integer>> findSubsequences(int[] nums) {\n        dfs(0, Integer.MIN_VALUE, nums);\n        return ans;\n    }\n\n    public void dfs(int cur, int last, int[] nums) {\n        if (cur == nums.length) {\n            if (temp.size() >= 2) {\n                ans.add(new ArrayList<Integer>(temp));\n            }\n            return;\n        }\n        if (nums[cur] >= last) {\n            temp.add(nums[cur]);\n            dfs(cur + 1, nums[cur], nums);\n            temp.remove(temp.size() - 1);\n        }\n        if (nums[cur] != last) {\n            dfs(cur + 1, last, nums);\n        }\n    }\n}\n```\n\n```C [sol2-C]\nint** ans;\nint ansSize;\nint* temp;\nint tempSize;\n\nvoid dfs(int cur, int last, int* nums, int numsSize, int** returnColumnSizes) {\n    if (cur == numsSize) {\n        if (tempSize >= 2) {\n            ans[ansSize] = malloc(sizeof(int) * tempSize);\n            memcpy(ans[ansSize], temp, sizeof(int) * tempSize);\n            (*returnColumnSizes)[ansSize++] = tempSize;\n        }\n        return;\n    }\n    if (nums[cur] >= last) {\n        temp[tempSize++] = nums[cur];\n        dfs(cur + 1, nums[cur], nums, numsSize, returnColumnSizes);\n        tempSize--;\n    }\n    if (nums[cur] != last) {\n        dfs(cur + 1, last, nums, numsSize, returnColumnSizes);\n    }\n}\n\nint** findSubsequences(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    ans = malloc(sizeof(int*) * 32768);\n    *returnColumnSizes = malloc(sizeof(int*) * 32768);\n    temp = malloc(sizeof(int) * numsSize);\n    ansSize = tempSize = 0;\n    dfs(0, INT_MIN, nums, numsSize, returnColumnSizes);\n    *returnSize = ansSize;\n    return ans;\n}\n```\n\n```golang [sol2-Golang]\nvar (\n    temp []int\n    ans [][]int\n)\n\nfunc findSubsequences(nums []int) [][]int {\n    ans = [][]int{}\n    dfs(0, math.MinInt32, nums)\n    return ans\n}\n\nfunc dfs(cur, last int, nums []int) {\n    if cur == len(nums) {\n        if len(temp) >= 2 {\n            t := make([]int, len(temp))\n            copy(t, temp)\n            ans = append(ans, t)\n        }\n        return\n    }\n    if nums[cur] >= last {\n        temp = append(temp, nums[cur])\n        dfs(cur + 1, nums[cur], nums)\n        temp = temp[:len(temp)-1]\n    }\n    if nums[cur] != last {\n        dfs(cur + 1, last, nums)\n    }\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(2^n \\cdot n)$。仍然需要对子序列做二进制枚举，枚举出的序列虽然省去了判断合法性和哈希的过程，但是仍然需要 $O(n)$ 的时间添加到答案中。\n+ 空间复杂度：$O(n)$。这里临时数组的空间代价是 $O(n)$，递归使用的栈空间的空间代价也是 $O(n)$。"
}