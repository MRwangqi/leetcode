{
	"titleSlug": "adding-spaces-to-a-string",
	"slug": "xiang-zi-fu-chuan-tian-jia-kong-ge-by-le-4yso",
	"url": "https://leetcode-cn.com/problems/adding-spaces-to-a-string/solution/xiang-zi-fu-chuan-tian-jia-kong-ge-by-le-4yso/",
	"content": "#### 方法一：双指针\n\n**思路与算法**\n\n我们可以使用两个指针分别遍历字符串 $s$ 和数组 $\\textit{spaces}$。记前者的指针为 $i$，后者的指针为 $\\textit{ptr}$：当 $\\textit{spaces}[\\textit{ptr}]$ 恰好与 $i$ 相等时，我们在答案字符串的末尾放入一个空格，并将 $\\textit{ptr}$ 向右移动一个位置。\n\n此外，我们还需要在答案字符串的末尾放入 $s[i]$，并将 $i$ 向右移动一个位置。在两个指针全部遍历完成后，我们就得到了修改后的字符串。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string addSpaces(string s, vector<int>& spaces) {\n        int n = s.size();\n        string ans;\n        ans.reserve(n + spaces.size());\n        \n        int ptr = 0;\n        for (int i = 0; i < n; ++i) {\n            if (ptr < spaces.size() && spaces[ptr] == i) {\n                ans.push_back(' ');\n                ++ptr;\n            }\n            ans.push_back(s[i]);\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def addSpaces(self, s: str, spaces: List[int]) -> str:\n        ans = list()\n\n        ptr = 0\n        for i, ch in enumerate(s):\n            if ptr < len(spaces) and spaces[ptr] == i:\n                ans.append(\" \")\n                ptr += 1\n            ans.append(ch)\n        \n        return \"\".join(ans)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + m)$，其中 $n$ 是字符串 $s$ 的长度，$m$ 是数组 $\\textit{spaces}$ 的长度。\n\n- 空间复杂度：$O(1)$ 或 $O(n + m)$，取决于使用的语言中字符串是否可以修改。"
}