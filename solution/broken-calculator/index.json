{
	"titleSlug": "broken-calculator",
	"slug": "pi-liao-de-ji-suan-qi-by-leetcode",
	"url": "https://leetcode-cn.com/problems/broken-calculator/solution/pi-liao-de-ji-suan-qi-by-leetcode/",
	"content": "#### 方法：逆向思维\n\n**思路**\n\n除了对 `X` 执行乘 2 或 减 1 操作之外，我们也可以对 `Y` 执行`除 2`（当 `Y` 是偶数时）或者`加 1 `操作。\n\n这样做的动机是我们可以总是贪心地执行除 2 操作：\n\n* 当 `Y` 是偶数，如果先执行 2 次加法操作，再执行 1 次除法操作，我们可以通过先执行 1 次除法操作，再执行 1 次加法操作以使用更少的操作次数得到相同的结果 [`(Y+2) / 2` vs `Y/2 + 1`]。\n\n* 当 `Y` 是奇数，如果先执行 3 次加法操作，再执行 1 次除法操作，我们可以将其替代为顺次执行加法、除法、加法操作以使用更少的操作次数得到相同的结果 [`(Y+3) / 2` vs `(Y+1) / 2 + 1`]。\n\n**算法**\n\n当 `Y` 大于 `X` 时，如果它是奇数，我们执行加法操作，否则执行除法操作。之后，我们需要执行 `X - Y` 次加法操作以得到 `X`。\n\n```java [uRsowHNz-Java]\nclass Solution {\n    public int brokenCalc(int X, int Y) {\n        int ans = 0;\n        while (Y > X) {\n            ans++;\n            if (Y % 2 == 1)\n                Y++;\n            else\n                Y /= 2;\n        }\n\n        return ans + X - Y;\n    }\n}\n```\n```python [uRsowHNz-Python]\nclass Solution(object):\n    def brokenCalc(self, X, Y):\n        ans = 0\n        while Y > X:\n            ans += 1\n            if Y%2: Y += 1\n            else: Y /= 2\n\n        return ans + X-Y\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：  $O(\\log Y)$。\n\n* 空间复杂度：  $O(1)$。\n\n\n\n"
}