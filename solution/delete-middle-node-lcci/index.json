{
	"titleSlug": "delete-middle-node-lcci",
	"slug": "yi-wen-gao-ding-chang-jian-de-lian-biao-wen-ti-hua",
	"url": "https://leetcode-cn.com/problems/delete-middle-node-lcci/solution/yi-wen-gao-ding-chang-jian-de-lian-biao-wen-ti-hua/",
	"content": "# 相爱相杀好基友——数组与链表\r\n作为线性表的两种存储方式 —— 链表和数组，这对相爱相杀的好基友有着各自的优缺点。接下来，我们梳理一下这两种方式。\r\n\r\n**数组**，所有元素都连续的存储于一段内存中，且每个元素占用的内存大小相同。这使得数组具备了通过下标快速访问数据的能力。\r\n但连续存储的缺点也很明显，增加容量，增删元素的成本很高，时间复杂度均为 O(n)。\r\n增加数组容量需要先申请一块新的内存，然后复制原有的元素。如果需要的话，可能还要删除原先的内存。\r\n![数组扩容](https://pic.leetcode-cn.com/568870f0a4c3f3b9defa3dd95a475d07e328103d0b7e424c704b29f5854219b5.gif)\r\n删除元素时需要移动被删除元素之后的所有元素以保证所有元素是连续的。增加元素时需要移动指定位置及之后的所有元素，然后将新增元素插入到指定位置，如果容量不足的话还需要先进行扩容操作。\r\n\r\n![数组删除元素](https://pic.leetcode-cn.com/473f46c8199a5ee84658c22e79428b81a40a191ccbe34839639436b2fd7e3c6c.gif)\r\n总结一下数组的优缺点：\r\n* 优点：可以根据偏移实现快速的随机读写。\r\n* 缺点：扩容，增删元素极慢。\r\n\r\n链表，由若干个结点组成，每个结点包含数据域和指针域。结点结构如下图所示：\r\n![链表的一个结点](https://pic.leetcode-cn.com/9e08f034e9956c47560a5b545f20031a2c5dc5c97106d1284ce8ec5276d8c838.png)\r\n一般来讲，链表中只会有一个结点的指针域为空，该结点为**尾结点**，其他结点的指针域都会存储一个结点的内存地址。链表中也只会有一个结点的内存地址没有存储在其他结点的指针域，该结点称为**头结点**。\r\n![内存中的链表](https://pic.leetcode-cn.com/d72ffdb8ec3102716f70df0ac214097b2d00b54581d49053fa7dadc18c70c2cd.png)\r\n链表的存储方式使得它可以高效的在指定位置插入与删除，时间复杂度均为 O(1)。\r\n在结点 p 之后增加一个结点 q 总共分三步：\r\n1. 申请一段内存用以存储 q (可以使用内存池避免频繁申请和销毁内存)。\r\n2. 将 p 的指针域数据复制到 q 的指针域。\r\n3. 更新 p 的指针域为 q 的地址。\r\n![插入新元素](https://pic.leetcode-cn.com/c14aeb59bf54d86112e8f9dd2cb3a6bcf44c7a5fdbd985c1b174a335ace09f7e.png)\r\n\r\n删除结点 p 之后的结点 q 总共分两步：\r\n1. 将 q 的指针域复制到 p 的指针域。\r\n2. 释放 q 结点的内存。\r\n![删除结点](https://pic.leetcode-cn.com/f1b38a17ea760d897cb7701bf8861dc33a66511989a6dcb3c4476431c0be70f4.png)\r\n# 链表的主要代码\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n//定义一个结点模板\r\ntemplate<typename T>\r\nstruct Node {\r\n\tT data;\r\n\tNode *next;\r\n\tNode() : next(nullptr) {}\r\n\tNode(const T &d) : data(d), next(nullptr) {}\r\n};\r\n\r\n//删除 p 结点后面的元素\r\ntemplate<typename T>\r\nvoid Remove(Node<T> *p) {\r\n\tif (p == nullptr || p->next == nullptr) {\r\n\t\treturn;\r\n\t}\r\n\tauto tmp = p->next->next;\r\n\tdelete p->next;\r\n\tp->next = tmp;\r\n}\r\n\r\n//在 p 结点后面插入元素\r\ntemplate<typename T>\r\nvoid Insert(Node<T> *p, const T &data) {\r\n\tauto tmp = new Node<T>(data);\r\n\ttmp->next = p->next;\r\n\tp->next = tmp;\r\n}\r\n\r\n//遍历链表\r\ntemplate<typename T, typename V>\r\nvoid Walk(Node<T> *p, const V &vistor) {\r\n\twhile(p != nullptr) {\r\n\t\tvistor(p);\r\n\t\tp = p->next;\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tauto p = new Node<int>(1);\r\n\tInsert(p, 2);\r\n\tint sum = 0;\r\n\tWalk(p, [&sum](const Node<int> *p) -> void { sum += p->data; });\r\n\tcout << sum << endl;\r\n\tRemove(p);\r\n\tsum = 0;\r\n\tWalk(p, [&sum](const Node<int> *p) -> void { sum += p->data; });\r\n\tcout << sum << endl;\r\n\treturn 0;\r\n}\r\n```\r\n# 面试问题总结\r\n无法高效获取长度，无法根据偏移快速访问元素，是链表的两个劣势。然而面试的时候经常碰见诸如**获取倒数第k个元素**，**获取中间位置的元素**，**判断链表是否存在环**，**判断环的长度**等和长度与位置有关的问题。这些问题都可以通过灵活运用双指针来解决。\r\n\r\n**Tips：双指针并不是固定的公式，而是一种思维方式~**\r\n\r\n先来看\"倒数第k个元素的问题\"。设有两个指针 p 和 q，初始时均指向头结点。首先，先让 p 沿着 next 移动 k 次。此时，p 指向第 k+1个结点，q 指向头节点，两个指针的距离为 k 。然后，同时移动 p 和 q，直到 p 指向空，此时 q 即指向倒数第 k 个结点。可以参考下图来理解：\r\n![移动过程中保持距离为 k ](https://pic.leetcode-cn.com/9f50c5f89c713601613b6b18ac0c7053db39e478bae8e8f34810b5dab1f9ca7c.png)\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    ListNode* getKthFromEnd(ListNode* head, int k) {\r\n        ListNode *p = head, *q = head; //初始化\r\n        while(k--) {   //将 p指针移动 k 次\r\n            p = p->next;\r\n        }\r\n        while(p != nullptr) {//同时移动，直到 p == nullptr\r\n            p = p->next;\r\n            q = q->next;\r\n        }\r\n        return q;\r\n    }\r\n};\r\n```\r\n\r\n获取中间元素的问题。设有两个指针 fast 和 slow，初始时指向头节点。每次移动时，fast向后走两次，slow向后走一次，直到 fast 无法向后走两次。这使得在每轮移动之后。fast 和 slow 的**距离就会增加一**。设链表有 n 个元素，那么最多移动 n/2 轮。当 n 为**奇数**时，slow 恰好**指向中间结点**，当 n 为 **偶数**时，slow 恰好**指向中间两个结点的靠后一个**(可以考虑下如何使其指向前一个结点呢？)。\r\n![快慢指针](https://pic.leetcode-cn.com/aee1dbea92600ffb97023d8d4d98d21c6a0882fd1b996c34f9c994f8bf37e296.png)\r\n下述代码实现了 n 为**偶数**时慢指针指向**靠后结点**。\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    ListNode* middleNode(ListNode* head) {\r\n        ListNode *p = head, *q = head;\r\n        while(q != nullptr && q->next != nullptr) {\r\n            p = p->next;\r\n            q = q->next->next;\r\n        }\r\n        return p;\r\n    } \r\n};\r\n```\r\n\r\n是否存在环的问题。如果将尾结点的 next 指针指向其他任意一个结点，那么链表就存在了一个环。\r\n![一个有环的链表](https://pic.leetcode-cn.com/5fc6135de2e1ab92de36d06de9434d8ac642be62d31f93d2ab4a118fa45ec1e1.png)\r\n上一部分中，总结快慢指针的特性 —— 每轮移动之后两者的距离会加一。下面会继续用该特性解决环的问题。\r\n当一个链表有环时，快慢指针都会陷入环中进行无限次移动，然后变成了追及问题。想象一下在操场跑步的场景，只要一直跑下去，快的总会追上慢的。当两个指针都进入环后，每轮移动使得慢指针到快指针的距离增加一，同时快指针到慢指针的距离也减少一，只要一直移动下去，快指针总会追上慢指针。\r\n![快慢指针在环上追及](https://pic.leetcode-cn.com/4ce1a9d26b1327ae6f1cc082e399f41290523f167a7328fba43f6f7d1d109ea3.gif)\r\n根据上述表述得出，如果一个链表存在环，那么快慢指针必然会相遇。实现代码如下：\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    bool hasCycle(ListNode *head) {\r\n        ListNode *slow = head;\r\n        ListNode *fast = head;\r\n        while(fast != nullptr) {\r\n            fast = fast->next;\r\n            if(fast != nullptr) {\r\n                fast = fast->next;\r\n            }\r\n            if(fast == slow) {\r\n                return true;\r\n            }\r\n            slow = slow->next;\r\n        }\r\n        return nullptr;\r\n    }\r\n};\r\n```\r\n最后一个问题，如果存在环，如何判断环的长度呢？方法是，快慢指针相遇后继续移动，直到第二次相遇。两次相遇间的移动次数即为环的长度。\r\n\r\n![](https://pic.leetcode-cn.com/5afade5ccc4fa75c25e0b0c23a9f9ee60c4904d81ee2715adcf948b84834d6dc.png)"
}