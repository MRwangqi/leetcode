{
	"titleSlug": "capitalize-the-title",
	"slug": "jiang-biao-ti-shou-zi-mu-da-xie-by-leetc-lhn7",
	"url": "https://leetcode-cn.com/problems/capitalize-the-title/solution/jiang-biao-ti-shou-zi-mu-da-xie-by-leetc-lhn7/",
	"content": "#### 方法一：按要求遍历\n\n**思路与算法**\n\n我们顺序遍历 $\\textit{title}$ 字符串，对于其中每个以空格为分界的单词，我们首先找出它的起始与末尾下标，判断它的长度以进行相应操作：\n\n- 如果长度小于等于 $2$，则我们将该单词全部转化为小写；\n\n- 如果长度大于 $2$，则我们将该单词首字母转化为大写，其余字母转化为小写。\n\n最终，我们将转化后的字符串返回作为答案。\n\n另外，对于 $\\texttt{Python}$ 等无法直接对字符串特定字符进行修改的语言，我们可以先将字符串分割为单词，并用数组按顺序储存这些单词。随后，我们逐单词进行上述操作生成新的单词并替换。最后，我们将替换后的单词数组拼接为空格连接的字符串并返回作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string capitalizeTitle(string title) {\n        int n = title.size();\n        int l = 0, r = 0;   // 单词左右边界（左闭右开）\n        title.push_back(' ');   // 避免处理末尾的边界条件\n        while (r < n) {\n            while (title[r] != ' ') {\n                ++r;\n            }\n            // 对于每个单词按要求处理\n            if (r - l > 2) {\n                title[l] = toupper(title[l]);\n                ++l;\n            }\n            while (l < r) {\n                title[l] = tolower(title[l]);\n                ++l;\n            }\n            l = r + 1;\n            ++r;\n        }\n        title.pop_back();\n        return title;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def capitalizeTitle(self, title: str) -> str:\n        res = []   # 辅助数组\n        for word in title.split():\n            # 对于分割的每个单词按要求处理\n            if len(word) <= 2:\n                res.append(word.lower())\n            else:\n                res.append(word[0].upper() + word[1:].lower())\n        return ' '.join(res)\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $\\textit{title}$ 的长度。即为遍历字符串完成操作的时间复杂度。\n\n- 空间复杂度：由于不同语言的字符串相关方法实现有所不同，因此空间复杂度也有所不同：\n\n  -  $\\texttt{C++}：$O(1)$。\n  -  $\\texttt{Python}：$O(n)$，即为辅助数组的空间开销。"
}