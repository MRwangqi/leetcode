{
	"titleSlug": "powx-n",
	"slug": "powx-n-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/powx-n/solution/powx-n-by-leetcode-solution/",
	"content": "### 📺视频题解\n![50. Pow(x, n).mp4](455b3b25-2007-4d4c-85c8-844bff5f7a38)\n\n### 📖文字题解\n\n#### 前言\n\n本题的方法被称为「快速幂算法」，有递归和迭代两个版本。这篇题解会从递归版本的开始讲起，再逐步引出迭代的版本。\n\n当指数 $n$ 为负数时，我们可以计算 $x^{-n}$ 再取倒数得到结果，因此我们只需要考虑 $n$ 为自然数的情况。\n\n#### 方法一：快速幂 + 递归\n\n「快速幂算法」的本质是分治算法。举个例子，如果我们要计算 $x^{64}$，我们可以按照：\n\n$$\nx \\to x^2 \\to x^4 \\to x^8 \\to x^{16} \\to x^{32} \\to x^{64}\n$$\n\n的顺序，从 $x$ 开始，每次直接把上一次的结果进行平方，计算 $6$ 次就可以得到 $x^{64}$ 的值，而不需要对 $x$ 乘 $63$ 次 $x$。\n\n再举一个例子，如果我们要计算 $x^{77}$，我们可以按照：\n\n$$\nx \\to x^2 \\to x^4 \\to x^9 \\to x^{19} \\to x^{38} \\to x^{77}\n$$\n\n的顺序，在 $x \\to x^2$，$x^2 \\to x^4$，$x^{19} \\to x^{38}$ 这些步骤中，我们直接把上一次的结果进行平方，而在 $x^4 \\to x^9$，$x^9 \\to x^{19}$，$x^{38} \\to x^{77}$ 这些步骤中，我们把上一次的结果进行平方后，还要额外乘一个 $x$。\n\n直接从左到右进行推导看上去很困难，因为在每一步中，我们不知道在将上一次的结果平方之后，还需不需要额外乘 $x$。但如果我们从右往左看，分治的思想就十分明显了：\n\n- 当我们要计算 $x^n$ 时，我们可以先递归地计算出 $y = x^{\\lfloor n/2 \\rfloor}$，其中 $\\lfloor a \\rfloor$ 表示对 $a$ 进行下取整；\n\n- 根据递归计算的结果，如果 $n$ 为偶数，那么 $x^n = y^2$；如果 $n$ 为奇数，那么 $x^n = y^2 \\times x$；\n\n- 递归的边界为 $n = 0$，任意数的 $0$ 次方均为 $1$。\n\n由于每次递归都会使得指数减少一半，因此递归的层数为 $O(\\log n)$，算法可以在很快的时间内得到结果。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    double quickMul(double x, long long N) {\n        if (N == 0) {\n            return 1.0;\n        }\n        double y = quickMul(x, N / 2);\n        return N % 2 == 0 ? y * y : y * y * x;\n    }\n\n    double myPow(double x, int n) {\n        long long N = n;\n        return N >= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public double myPow(double x, int n) {\n        long N = n;\n        return N >= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);\n    }\n\n    public double quickMul(double x, long N) {\n        if (N == 0) {\n            return 1.0;\n        }\n        double y = quickMul(x, N / 2);\n        return N % 2 == 0 ? y * y : y * y * x;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        def quickMul(N):\n            if N == 0:\n                return 1.0\n            y = quickMul(N // 2)\n            return y * y if N % 2 == 0 else y * y * x\n        \n        return quickMul(n) if n >= 0 else 1.0 / quickMul(-n)\n```\n\n```golang [sol1-Golang]\nfunc myPow(x float64, n int) float64 {\n    if n >= 0 {\n        return quickMul(x, n)\n    }\n    return 1.0 / quickMul(x, -n)\n}\n\nfunc quickMul(x float64, n int) float64 {\n    if n == 0 {\n        return 1\n    }\n    y := quickMul(x, n/2)\n    if n%2 == 0 {\n        return y * y\n    }\n    return y * y * x\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$，即为递归的层数。\n\n- 空间复杂度：$O(\\log n)$，即为递归的层数。这是由于递归的函数调用会使用栈空间。\n\n#### 方法二：快速幂 + 迭代\n\n由于递归需要使用额外的栈空间，我们试着将递归转写为迭代。在方法一中，我们也提到过，从左到右进行推导是不容易的，因为我们不知道是否需要额外乘 $x$。但我们不妨找一找规律，看看哪些地方额外乘了 $x$，并且它们对答案产生了什么影响。\n\n我们还是以 $x^{77}$ 作为例子：\n\n$$\nx \\to x^2 \\to x^4 \\to^+ x^9 \\to^+ x^{19} \\to x^{38} \\to^+ x^{77}\n$$\n\n并且把需要额外乘 $x$ 的步骤打上了 $+$ 标记。可以发现：\n\n- $x^{38} \\to^+ x^{77}$ 中额外乘的 $x$ 在 $x^{77}$ 中贡献了 $x$；\n\n- $x^9 \\to^+ x^{19}$ 中额外乘的 $x$ 在之后被平方了 $2$ 次，因此在 $x^{77}$ 中贡献了 $x^{2^2} = x^4$；\n\n- $x^4 \\to^+ x^9$ 中额外乘的 $x$ 在之后被平方了 $3$ 次，因此在 $x^{77}$ 中贡献了 $x^{2^3} = x^8$；\n\n- 最初的 $x$ 在之后被平方了 $6$ 次，因此在 $x^{77}$ 中贡献了 $x^{2^6} = x^{64}$。\n\n我们把这些贡献相乘，$x \\times x^4 \\times x^8 \\times x^{64}$ 恰好等于 $x^{77}$。而这些贡献的指数部分又是什么呢？它们都是 $2$ 的幂次，这是因为每个额外乘的 $x$ 在之后都会被平方若干次。而这些指数 $1$，$4$，$8$ 和 $64$，**恰好就对应了 $77$ 的二进制表示 $(1001101)_2$ 中的每个 $1$**！\n\n因此我们借助整数的二进制拆分，就可以得到迭代计算的方法，一般地，如果整数 $n$ 的二进制拆分为\n\n$$\nn = 2^{i_0} + 2^{i_1} + \\cdots + 2^{i_k}\n$$\n\n那么\n\n$$\nx^n = x^{2^{i_0}} \\times x^{2^{i_1}} \\times \\cdots \\times x^{2^{i_k}}\n$$\n\n这样以来，我们从 $x$ 开始不断地进行平方，得到 $x^2, x^4, x^8, x^{16}, \\cdots$，如果 $n$ 的第 $k$ 个（从右往左，从 $0$ 开始计数）二进制位为 $1$，那么我们就将对应的贡献 $x^{2^k}$计入答案。\n\n下面的代码给出了详细的注释。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    double quickMul(double x, long long N) {\n        double ans = 1.0;\n        // 贡献的初始值为 x\n        double x_contribute = x;\n        // 在对 N 进行二进制拆分的同时计算答案\n        while (N > 0) {\n            if (N % 2 == 1) {\n                // 如果 N 二进制表示的最低位为 1，那么需要计入贡献\n                ans *= x_contribute;\n            }\n            // 将贡献不断地平方\n            x_contribute *= x_contribute;\n            // 舍弃 N 二进制表示的最低位，这样我们每次只要判断最低位即可\n            N /= 2;\n        }\n        return ans;\n    }\n\n    double myPow(double x, int n) {\n        long long N = n;\n        return N >= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public double myPow(double x, int n) {\n        long N = n;\n        return N >= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);\n    }\n\n    public double quickMul(double x, long N) {\n        double ans = 1.0;\n        // 贡献的初始值为 x\n        double x_contribute = x;\n        // 在对 N 进行二进制拆分的同时计算答案\n        while (N > 0) {\n            if (N % 2 == 1) {\n                // 如果 N 二进制表示的最低位为 1，那么需要计入贡献\n                ans *= x_contribute;\n            }\n            // 将贡献不断地平方\n            x_contribute *= x_contribute;\n            // 舍弃 N 二进制表示的最低位，这样我们每次只要判断最低位即可\n            N /= 2;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        def quickMul(N):\n            ans = 1.0\n            # 贡献的初始值为 x\n            x_contribute = x\n            # 在对 N 进行二进制拆分的同时计算答案\n            while N > 0:\n                if N % 2 == 1:\n                    # 如果 N 二进制表示的最低位为 1，那么需要计入贡献\n                    ans *= x_contribute\n                # 将贡献不断地平方\n                x_contribute *= x_contribute\n                # 舍弃 N 二进制表示的最低位，这样我们每次只要判断最低位即可\n                N //= 2\n            return ans\n        \n        return quickMul(n) if n >= 0 else 1.0 / quickMul(-n)\n```\n\n```golang [sol2-Golang]\nfunc myPow(x float64, n int) float64 {\n    if n >= 0 {\n        return quickMul(x, n)\n    }\n    return 1.0 / quickMul(x, -n)\n}\n\nfunc quickMul(x float64, N int) float64 {\n    ans := 1.0\n    // 贡献的初始值为 x\n    x_contribute := x\n    // 在对 N 进行二进制拆分的同时计算答案\n    for N > 0 {\n        if N % 2 == 1 {\n            // 如果 N 二进制表示的最低位为 1，那么需要计入贡献\n            ans *= x_contribute\n        }\n        // 将贡献不断地平方\n        x_contribute *= x_contribute\n        // 舍弃 N 二进制表示的最低位，这样我们每次只要判断最低位即可\n        N /= 2\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$，即为对 $n$ 进行二进制拆分的时间复杂度。\n\n- 空间复杂度：$O(1)$。"
}