{
	"titleSlug": "pile-box-lcci",
	"slug": "ti-mu-zong-jie-zui-chang-shang-sheng-zi-7jfd3",
	"url": "https://leetcode-cn.com/problems/pile-box-lcci/solution/ti-mu-zong-jie-zui-chang-shang-sheng-zi-7jfd3/",
	"content": "\r\n\r\n#### [300. 最长上升子序列](https://leetcode-cn.com/problems/longest-increasing-subsequence)\r\n\r\nO(n^2^)的解法比较好理解\r\n\r\n你要上升就和之前的一一比较，比前面的大就可以从前面某个地方转移过来，总长度+1,选取一个最大值就行。\r\n\r\n至于优化的算法不在这里考虑\r\n\r\n#### [435. 无重叠区间](https://leetcode-cn.com/problems/non-overlapping-intervals/)\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\r\n        sort(intervals.begin(), intervals.end());\r\n        vector<int> dp(intervals.size(), 1);\r\n        for (int i = 1; i < intervals.size(); ++i) {\r\n            for (int j = 0; j < i; ++j) {\r\n                // 还真他妈的就是最长上升子序列，笑死\r\n                if (intervals[i][0] >= intervals[j][1])\r\n                dp[i] = max(dp[i], dp[j] + 1);\r\n            }\r\n        }\r\n        return intervals.size() - dp[intervals.size() - 1];\r\n    }\r\n};\r\n```\r\n\r\n这道题的贪心做法\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\r\n\r\n        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {\r\n            return a[1] == b[1] ? a[0] < b[0] : a[1] < b[1];\r\n        });\r\n        // 现在已经按照右边排序了，接下来怎么分析，且看风风雨雨\r\n        int left = intervals[0][0], cnt = 0;\r\n        for (const vector<int>& interval : intervals) {\r\n            if (interval[0] >= left) {\r\n                cnt++;\r\n                left = interval[1];\r\n            }\r\n        }\r\n        return intervals.size() - cnt;\r\n    }\r\n};\r\n```\r\n\r\n\r\n\r\n#### [646. 最长数对链](https://leetcode-cn.com/problems/maximum-length-of-pair-chain/)\r\n\r\n笑死了一模一样\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int findLongestChain(vector<vector<int>>& intervals) {\r\n        sort(intervals.begin(), intervals.end());\r\n        vector<int> dp(intervals.size(), 1);\r\n        for (int i = 1; i < intervals.size(); ++i) {\r\n            for (int j = 0; j < i; ++j) {\r\n                if (intervals[i][0] > intervals[j][1])\r\n                dp[i] = max(dp[i], dp[j] + 1);\r\n            }\r\n        }\r\n        return dp[intervals.size() - 1];\r\n    }\r\n};\r\n```\r\n\r\n贪心: 笑死了还是一模一样\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int findLongestChain(vector<vector<int>>& intervals) {\r\n         sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {\r\n            return a[1] == b[1] ? a[0] < b[0] : a[1] < b[1];\r\n        });\r\n        // 现在已经按照右边排序了，接下来怎么分析，且看风风雨雨\r\n        int left = intervals[0][0] - 1, cnt = 0;\r\n        for (const vector<int>& interval : intervals) {\r\n            if (interval[0] > left) {\r\n                cnt++;\r\n                left = interval[1];\r\n            }\r\n        }\r\n        return cnt;\r\n    }\r\n};\r\n```\r\n\r\n\r\n\r\n#### [452. 用最少数量的箭引爆气球](https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/)\r\n\r\ndp O(n^2^)超时了\r\n\r\n贪心，一模一样，不过\r\n\r\n之前`int left = intervals[0][0] - 1, cnt = 0;`的写法太取巧了\r\n\r\n还是从第二个开始比较合理易懂（且防止溢出）\r\n\r\n`[[-2147483648,2147483647]]`\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int findMinArrowShots(vector<vector<int>>& intervals) {\r\n        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {\r\n            return a[1] == b[1] ? a[0] < b[0] : a[1] < b[1];\r\n        });\r\n        // 现在已经按照右边排序了，接下来怎么分析，且看风风雨雨\r\n        int left = intervals[0][1], cnt = 1;\r\n        for (int i = 1; i < intervals.size(); ++i) {\r\n            if (intervals[i][0] > left) {\r\n                cnt++;\r\n                left = intervals[i][1];\r\n            }\r\n        }\r\n        return cnt;\r\n    }\r\n};\r\n```\r\n\r\n#### [354. 俄罗斯套娃信封问题](https://leetcode-cn.com/problems/russian-doll-envelopes/)\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int maxEnvelopes(vector<vector<int>>& intervals) {\r\n        sort(intervals.begin(), intervals.end());\r\n        vector<int> dp(intervals.size(), 1);\r\n        for (int i = 1; i < intervals.size(); ++i) {\r\n            for (int j = 0; j < i; ++j) {\r\n                if (intervals[i][0] > intervals[j][0] && intervals[i][1] > intervals[j][1])\r\n                dp[i] = max(dp[i], dp[j] + 1);\r\n            }\r\n        }\r\n        return *max_element(dp.begin(), dp.end());\r\n    }\r\n};\r\n```\r\n\r\n\r\n\r\n#### [面试题 08.13. 堆箱子](https://leetcode-cn.com/problems/pile-box-lcci/)\r\n\r\n需要注意排序后可能存在`intervals[i][0] == intervals[j][0]`的情况，因此必须要进行比较\r\n\r\n最长上升子序列\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int pileBox(vector<vector<int>>& intervals) {\r\n        // 虽然是hard，不过总归是不是很难是吧\r\n        sort(intervals.begin(), intervals.end());\r\n        vector<int> dp(intervals.size(), 0);\r\n        for (int i = 0; i < intervals.size(); ++i) {\r\n            dp[i] = intervals[i][2];\r\n        }\r\n        for (int i = 1; i < intervals.size(); ++i) {\r\n            for (int j = 0; j < i; ++j) {\r\n                if (intervals[i][0] > intervals[j][0] && intervals[i][1] > intervals[j][1] && intervals[i][2] > intervals[j][2])\r\n                dp[i] = max(dp[i], dp[j] + intervals[i][2]);\r\n            }\r\n        }\r\n        return *max_element(dp.begin(), dp.end());\r\n    }\r\n};\r\n```\r\n\r\n\r\n\r\n#### [960. 删列造序 III](https://leetcode-cn.com/problems/delete-columns-to-make-sorted-iii/)\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int minDeletionSize(vector<string>& strs) {\r\n        size_t m = strs.size();\r\n        size_t n = strs[0].length();\r\n        vector<int> dp(n, 1);\r\n        // 还是最长上升子序列，不过“上升”指的是对列来说，每行的值后面的大于前面的\r\n  \r\n        for (int j = 0; j < n; ++j)\r\n            for (int k = j + 1; k < n; ++k) {\r\n                bool flag = true;\r\n                // k 列的所有行要大于j列的所有行\r\n                for (int i = 0; i < m; ++i) {\r\n                    if (strs[i][k] < strs[i][j]) {\r\n                        flag = false;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                if (flag)\r\n                dp[k] = max(dp[k], dp[j] + 1);\r\n            }\r\n        return n - *max_element(dp.begin(), dp.end());\r\n                \r\n    }\r\n};\r\n```\r\n\r\n"
}