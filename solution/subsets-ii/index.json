{
	"titleSlug": "subsets-ii",
	"slug": "zi-ji-ii-by-leetcode-solution-7inq",
	"url": "https://leetcode-cn.com/problems/subsets-ii/solution/zi-ji-ii-by-leetcode-solution-7inq/",
	"content": "#### 前言\n\n本题解基于「[78. 子集的官方题解](https://leetcode-cn.com/problems/subsets/solution/zi-ji-by-leetcode-solution/)」，请读者在充分理解该题解后继续阅读。\n\n#### 方法一：迭代法实现子集枚举\n\n**思路**\n\n考虑数组 $[1, 2, 2]$，选择前两个数，或者第一、三个数，都会得到相同的子集。\n\n也就是说，对于当前选择的数 $x$，若前面有与其相同的数 $y$，且没有选择 $y$，此时包含 $x$ 的子集，必然会出现在包含 $y$ 的所有子集中。\n\n我们可以通过判断这种情况，来避免生成重复的子集。代码实现时，可以先将数组排序；迭代时，若发现没有选择上一个数，且当前数字与上一个数相同，则可以跳过当前生成的子集。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> t;\n    vector<vector<int>> ans;\n\n    vector<vector<int>> subsetsWithDup(vector<int> &nums) {\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        for (int mask = 0; mask < (1 << n); ++mask) {\n            t.clear();\n            bool flag = true;\n            for (int i = 0; i < n; ++i) {\n                if (mask & (1 << i)) {\n                    if (i > 0 && (mask >> (i - 1) & 1) == 0 && nums[i] == nums[i - 1]) {\n                        flag = false;\n                        break;\n                    }\n                    t.push_back(nums[i]);\n                }\n            }\n            if (flag) {\n                ans.push_back(t);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    List<Integer> t = new ArrayList<Integer>();\n    List<List<Integer>> ans = new ArrayList<List<Integer>>();\n\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);\n        int n = nums.length;\n        for (int mask = 0; mask < (1 << n); ++mask) {\n            t.clear();\n            boolean flag = true;\n            for (int i = 0; i < n; ++i) {\n                if ((mask & (1 << i)) != 0) {\n                    if (i > 0 && (mask >> (i - 1) & 1) == 0 && nums[i] == nums[i - 1]) {\n                        flag = false;\n                        break;\n                    }\n                    t.add(nums[i]);\n                }\n            }\n            if (flag) {\n                ans.add(new ArrayList<Integer>(t));\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc subsetsWithDup(nums []int) (ans [][]int) {\n    sort.Ints(nums)\n    n := len(nums)\nouter:\n    for mask := 0; mask < 1<<n; mask++ {\n        t := []int{}\n        for i, v := range nums {\n            if mask>>i&1 > 0 {\n                if i > 0 && mask>>(i-1)&1 == 0 && v == nums[i-1] {\n                    continue outer\n                }\n                t = append(t, v)\n            }\n        }\n        ans = append(ans, append([]int(nil), t...))\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar subsetsWithDup = function(nums) {\n    nums.sort((a, b) => a - b);\n    let t = [], ans = [];\n    const n = nums.length;\n    for (let mask = 0; mask < (1 << n); ++mask) {\n        t = [];\n        let flag = true;\n        for (let i = 0; i < n; ++i) {\n            if ((mask & (1 << i)) != 0) {\n                if (i > 0 && (mask >> (i - 1) & 1) == 0 && nums[i] == nums[i - 1]) {\n                    flag = false;\n                    break;\n                }\n                t.push(nums[i]);\n            }\n        }\n        if (flag) {\n            ans.push(t.slice());\n        }\n    }\n    return ans;\n};\n```\n\n```C [sol1-C]\nint** subsetsWithDup(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    qsort(nums, numsSize, sizeof(int), cmp);\n    int n = numsSize;\n    *returnSize = 0;\n    *returnColumnSizes = malloc(sizeof(int) * (1 << n));\n    int** ans = malloc(sizeof(int*) * (1 << n));\n    for (int mask = 0; mask < (1 << n); ++mask) {\n        int* t = malloc(sizeof(int) * n);\n        int tSize = 0;\n        bool flag = true;\n        for (int i = 0; i < n; ++i) {\n            if (mask & (1 << i)) {\n                if (i > 0 && (mask >> (i - 1) & 1) == 0 && nums[i] == nums[i - 1]) {\n                    flag = false;\n                    break;\n                }\n                t[tSize++] = nums[i];\n            }\n        }\n        t = realloc(t, sizeof(int) * tSize);\n        if (flag) {\n            ans[*returnSize] = t;\n            (*returnColumnSizes)[(*returnSize)++] = tSize;\n        }\n    }\n    ans = realloc(ans, sizeof(int*) * (*returnSize));\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times 2^n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。排序的时间复杂度为 $O(n \\log n)$。一共 $2^n$ 个状态，每种状态需要 $O(n)$ 的时间来构造子集，一共需要 $O(n \\times 2^n)$ 的时间来构造子集。由于在渐进意义上 $O(n \\log n)$ 小于 $O(n \\times 2^n)$，故总的时间复杂度为 $O(n \\times 2^n)$。\n\n- 空间复杂度：$O(n)$。即构造子集使用的临时数组 $t$ 的空间代价。\n\n#### 方法二：递归法实现子集枚举\n\n**思路**\n\n与方法一类似，在递归时，若发现没有选择上一个数，且当前数字与上一个数相同，则可以跳过当前生成的子集。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> t;\n    vector<vector<int>> ans;\n\n    void dfs(bool choosePre, int cur, vector<int> &nums) {\n        if (cur == nums.size()) {\n            ans.push_back(t);\n            return;\n        }\n        dfs(false, cur + 1, nums);\n        if (!choosePre && cur > 0 && nums[cur - 1] == nums[cur]) {\n            return;\n        }\n        t.push_back(nums[cur]);\n        dfs(true, cur + 1, nums);\n        t.pop_back();\n    }\n\n    vector<vector<int>> subsetsWithDup(vector<int> &nums) {\n        sort(nums.begin(), nums.end());\n        dfs(false, 0, nums);\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    List<Integer> t = new ArrayList<Integer>();\n    List<List<Integer>> ans = new ArrayList<List<Integer>>();\n\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);\n        dfs(false, 0, nums);\n        return ans;\n    }\n\n    public void dfs(boolean choosePre, int cur, int[] nums) {\n        if (cur == nums.length) {\n            ans.add(new ArrayList<Integer>(t));\n            return;\n        }\n        dfs(false, cur + 1, nums);\n        if (!choosePre && cur > 0 && nums[cur - 1] == nums[cur]) {\n            return;\n        }\n        t.add(nums[cur]);\n        dfs(true, cur + 1, nums);\n        t.remove(t.size() - 1);\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc subsetsWithDup(nums []int) (ans [][]int) {\n    sort.Ints(nums)\n    t := []int{}\n    var dfs func(bool, int)\n    dfs = func(choosePre bool, cur int) {\n        if cur == len(nums) {\n            ans = append(ans, append([]int(nil), t...))\n            return\n        }\n        dfs(false, cur+1)\n        if !choosePre && cur > 0 && nums[cur-1] == nums[cur] {\n            return\n        }\n        t = append(t, nums[cur])\n        dfs(true, cur+1)\n        t = t[:len(t)-1]\n    }\n    dfs(false, 0)\n    return\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar subsetsWithDup = function(nums) {\n    nums.sort((a, b) => a - b);\n    let t = [], ans = [];\n    const dfs = (choosePre, cur, nums) => {\n        if (cur === nums.length) {\n            ans.push(t.slice());\n            return;\n        }\n        dfs(false, cur + 1, nums);\n        if (!choosePre && cur > 0 && nums[cur - 1] === nums[cur]) {\n            return;\n        }\n        t.push(nums[cur]);\n        dfs(true, cur + 1, nums);\n        t = t.slice(0, t.length - 1);\n    }\n    dfs(false, 0, nums);\n    return ans;\n};\n```\n\n```C [sol2-C]\nint cmp(int* a, int* b) {\n    return *a - *b;\n}\n\nint* t;\nint tSize;\n\nvoid dfs(bool choosePre, int cur, int* nums, int numSize, int** ret, int* returnSize, int** returnColumnSizes) {\n    if (cur == numSize) {\n        int* tmp = malloc(sizeof(int) * tSize);\n        memcpy(tmp, t, sizeof(int) * tSize);\n        ret[*returnSize] = tmp;\n        (*returnColumnSizes)[(*returnSize)++] = tSize;\n        return;\n    }\n    dfs(false, cur + 1, nums, numSize, ret, returnSize, returnColumnSizes);\n    if (!choosePre && cur > 0 && nums[cur - 1] == nums[cur]) {\n        return;\n    }\n    t[tSize++] = nums[cur];\n    dfs(true, cur + 1, nums, numSize, ret, returnSize, returnColumnSizes);\n    tSize--;\n}\n\nint** subsetsWithDup(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    qsort(nums, numsSize, sizeof(int), cmp);\n    int n = numsSize;\n    *returnSize = 0;\n    *returnColumnSizes = malloc(sizeof(int) * (1 << n));\n    int** ret = malloc(sizeof(int*) * (1 << n));\n    t = malloc(sizeof(int) * n);\n    dfs(false, 0, nums, n, ret, returnSize, returnColumnSizes);\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times 2^n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。排序的时间复杂度为 $O(n \\log n)$。最坏情况下 $\\textit{nums}$ 中无重复元素，需要枚举其所有 $2^n$ 个子集，每个子集加入答案时需要拷贝一份，耗时 $O(n)$，一共需要 $O(n \\times 2^n)+O(n)=O(n \\times 2^n)$ 的时间来构造子集。由于在渐进意义上 $O(n \\log n)$ 小于 $O(n \\times 2^n)$，故总的时间复杂度为 $O(n \\times 2^n)$。 \n\n- 空间复杂度：$O(n)$。临时数组 $\\textit{t}$ 的空间代价是 $O(n)$，递归时栈空间的代价为 $O(n)$。"
}