{
	"titleSlug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
	"slug": "ting-zai-yuan-di-de-fang-an-shu-by-leetcode-soluti",
	"url": "https://leetcode-cn.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/solution/ting-zai-yuan-di-de-fang-an-shu-by-leetcode-soluti/",
	"content": "#### 方法一：动态规划\n\n对于计算方案数的题目，常用的方法是动态规划。对于这道题，需要计算在 $\\textit{steps}$ 步操作之后，指针位于下标 $0$ 的方案数。\n\n用 $\\textit{dp}[i][j]$ 表示在 $i$ 步操作之后，指针位于下标 $j$ 的方案数。其中，$i$ 的取值范围是 $0 \\le i \\le \\textit{steps}$，$j$ 的取值范围是 $0 \\le j \\le \\textit{arrLen}-1$。\n\n由于一共执行 $\\textit{steps}$ 步操作，因此指针所在下标一定不会超过 $\\textit{steps}$，可以将 $j$ 的取值范围进一步缩小到 $0 \\le j \\le \\min(\\textit{arrLen}-1, \\textit{steps})$。\n\n当没有进行任何操作时，指针一定位于下标 $0$，因此动态规划的边界条件是 $\\textit{dp}[0][0]=1$，当 $1 \\le j \\le \\min(\\textit{arrLen}-1, \\textit{steps})$ 时有 $\\textit{dp}[0][j]=0$。\n\n每一步操作中，指针可以向左或向右移动 $1$ 步，或者停在原地。因此，当 $1 \\le i \\le \\textit{steps}$ 时，状态 $\\textit{dp}[i][j]$ 可以从 $\\textit{dp}[i-1][j-1]$、$\\textit{dp}[i-1][j]$ 和 $\\textit{dp}[i-1][j+1]$ 这三个状态转移得到。状态转移方程如下：\n\n$$\n\\textit{dp}[i][j] = \\textit{dp}[i-1][j-1]+\\textit{dp}[i-1][j]+\\textit{dp}[i-1][j+1]\n$$\n\n由于指针不能移动到数组范围外，因此对于上述状态转移方程，需要注意下标边界情况。当 $j=0$ 时，$\\textit{dp}[i-1][j-1]=0$；当 $j=\\min(\\textit{arrLen}-1, \\textit{steps})$ 时，$\\textit{dp}[i-1][j+1]=0$。具体实现时，需要对下标进行判断，避免下标越界。\n\n计算过程中需要对每个状态的值计算模 $10^9+7$ 后的结果。最终得到 $\\textit{dp}[\\textit{steps}][0]$ 的值即为答案。\n\n```Java [sol11-Java]\nclass Solution {\n    public int numWays(int steps, int arrLen) {\n        final int MODULO = 1000000007;\n        int maxColumn = Math.min(arrLen - 1, steps);\n        int[][] dp = new int[steps + 1][maxColumn + 1];\n        dp[0][0] = 1;\n        for (int i = 1; i <= steps; i++) {\n            for (int j = 0; j <= maxColumn; j++) {\n                dp[i][j] = dp[i - 1][j];\n                if (j - 1 >= 0) {\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % MODULO;\n                }\n                if (j + 1 <= maxColumn) {\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j + 1]) % MODULO;\n                }\n            }\n        }\n        return dp[steps][0];\n    }\n}\n```\n\n```C# [sol11-C#]\npublic class Solution {\n    public int NumWays(int steps, int arrLen) {\n        const int MODULO = 1000000007;\n        int maxColumn = Math.Min(arrLen - 1, steps);\n        int[,] dp = new int[steps + 1, maxColumn + 1];\n        dp[0, 0] = 1;\n        for (int i = 1; i <= steps; i++) {\n            for (int j = 0; j <= maxColumn; j++) {\n                dp[i, j] = dp[i - 1, j];\n                if (j - 1 >= 0) {\n                    dp[i, j] = (dp[i, j] + dp[i - 1, j - 1]) % MODULO;\n                }\n                if (j + 1 <= maxColumn) {\n                    dp[i, j] = (dp[i, j] + dp[i - 1, j + 1]) % MODULO;\n                }\n            }\n        }\n        return dp[steps, 0];\n    }\n}\n```\n\n```go [sol11-Golang]\nfunc numWays(steps, arrLen int) int {\n    const mod = 1e9 + 7\n    maxColumn := min(arrLen-1, steps)\n    dp := make([][]int, steps+1)\n    for i := range dp {\n        dp[i] = make([]int, maxColumn+1)\n    }\n    dp[0][0] = 1\n    for i := 1; i <= steps; i++ {\n        for j := 0; j <= maxColumn; j++ {\n            dp[i][j] = dp[i-1][j]\n            if j-1 >= 0 {\n                dp[i][j] = (dp[i][j] + dp[i-1][j-1]) % mod\n            }\n            if j+1 <= maxColumn {\n                dp[i][j] = (dp[i][j] + dp[i-1][j+1]) % mod\n            }\n        }\n    }\n    return dp[steps][0]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n```C++ [sol11-C++]\nclass Solution {\npublic:\n    const int MODULO = 1000000007;\n\n    int numWays(int steps, int arrLen) {\n        int maxColumn = min(arrLen - 1, steps);\n        vector<vector<int>> dp(steps + 1, vector<int>(maxColumn + 1));\n        dp[0][0] = 1;\n        for (int i = 1; i <= steps; i++) {\n            for (int j = 0; j <= maxColumn; j++) {\n                dp[i][j] = dp[i - 1][j];\n                if (j - 1 >= 0) {\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % MODULO;\n                }\n                if (j + 1 <= maxColumn) {\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j + 1]) % MODULO;\n                }\n            }\n        }\n        return dp[steps][0];\n    }\n};\n```\n\n```C [sol11-C]\nconst int MODULO = 1000000007;\n\nint numWays(int steps, int arrLen) {\n    int maxColumn = fmin(arrLen - 1, steps);\n    int dp[steps + 1][maxColumn + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 1;\n    for (int i = 1; i <= steps; i++) {\n        for (int j = 0; j <= maxColumn; j++) {\n            dp[i][j] = dp[i - 1][j];\n            if (j - 1 >= 0) {\n                dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % MODULO;\n            }\n            if (j + 1 <= maxColumn) {\n                dp[i][j] = (dp[i][j] + dp[i - 1][j + 1]) % MODULO;\n            }\n        }\n    }\n    return dp[steps][0];\n}\n```\n\n```Python [sol11-Python3]\nclass Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        mod = 10**9 + 7\n        maxColumn = min(arrLen - 1, steps)\n\n        dp = [[0] * (maxColumn + 1) for _ in range(steps + 1)]\n        dp[0][0] = 1\n\n        for i in range(1, steps + 1):\n            for j in range(0, maxColumn + 1):\n                dp[i][j] = dp[i - 1][j]\n                if j - 1 >= 0:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % mod\n                if j + 1 <= maxColumn:\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j + 1]) % mod\n        \n        return dp[steps][0]\n```\n\n```JavaScript [sol11-JavaScript]\nvar numWays = function(steps, arrLen) {\n    const MODULO = 1000000007;\n    let maxColumn = Math.min(arrLen - 1, steps);\n    const dp = new Array(steps + 1).fill(0).map(() => new Array(maxColumn + 1).fill(0));\n    dp[0][0] = 1;\n    for (let i = 1; i <= steps; i++) {\n        for (let j = 0; j <= maxColumn; j++) {\n            dp[i][j] = dp[i - 1][j];\n            if (j - 1 >= 0) {\n                dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % MODULO;\n            }\n            if (j + 1 <= maxColumn) {\n                dp[i][j] = (dp[i][j] + dp[i - 1][j + 1]) % MODULO;\n            }\n        }\n    }\n    return dp[steps][0];\n};\n```\n\n上述实现的时间复杂度是 $O(\\textit{steps} \\times \\min(\\textit{arrLen}, \\textit{steps}))$，空间复杂度是 $O(\\textit{steps} \\times \\min(\\textit{arrLen}, \\textit{steps}))$。\n\n注意到 $\\textit{dp}$ 的每一行只和上一行有关，因此可以将空间复杂度降低到 $O(\\min(\\textit{arrLen}, \\textit{steps}))$。\n\n```Java [sol12-Java]\nclass Solution {\n    public int numWays(int steps, int arrLen) {\n        final int MODULO = 1000000007;\n        int maxColumn = Math.min(arrLen - 1, steps);\n        int[] dp = new int[maxColumn + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= steps; i++) {\n            int[] dpNext = new int[maxColumn + 1];\n            for (int j = 0; j <= maxColumn; j++) {\n                dpNext[j] = dp[j];\n                if (j - 1 >= 0) {\n                    dpNext[j] = (dpNext[j] + dp[j - 1]) % MODULO;\n                }\n                if (j + 1 <= maxColumn) {\n                    dpNext[j] = (dpNext[j] + dp[j + 1]) % MODULO;\n                }\n            }\n            dp = dpNext;\n        }\n        return dp[0];\n    }\n}\n```\n\n```C# [sol12-C#]\npublic class Solution {\n    public int NumWays(int steps, int arrLen) {\n        const int MODULO = 1000000007;\n        int maxColumn = Math.Min(arrLen - 1, steps);\n        int[] dp = new int[maxColumn + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= steps; i++) {\n            int[] dpNext = new int[maxColumn + 1];\n            for (int j = 0; j <= maxColumn; j++) {\n                dpNext[j] = dp[j];\n                if (j - 1 >= 0) {\n                    dpNext[j] = (dpNext[j] + dp[j - 1]) % MODULO;\n                }\n                if (j + 1 <= maxColumn) {\n                    dpNext[j] = (dpNext[j] + dp[j + 1]) % MODULO;\n                }\n            }\n            dp = dpNext;\n        }\n        return dp[0];\n    }\n}\n```\n\n```go [sol12-Golang]\nfunc numWays(steps, arrLen int) int {\n    const mod = 1e9 + 7\n    maxColumn := min(arrLen-1, steps)\n    dp := make([]int, maxColumn+1)\n    dp[0] = 1\n    for i := 1; i <= steps; i++ {\n        dpNext := make([]int, maxColumn+1)\n        for j := 0; j <= maxColumn; j++ {\n            dpNext[j] = dp[j]\n            if j-1 >= 0 {\n                dpNext[j] = (dpNext[j] + dp[j-1]) % mod\n            }\n            if j+1 <= maxColumn {\n                dpNext[j] = (dpNext[j] + dp[j+1]) % mod\n            }\n        }\n        dp = dpNext\n    }\n    return dp[0]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n```C++ [sol12-C++]\nclass Solution {\npublic:\n    const int MODULO = 1000000007;\n\n    int numWays(int steps, int arrLen) {\n        int maxColumn = min(arrLen - 1, steps);\n        vector<int> dp(maxColumn + 1);\n        dp[0] = 1;\n        for (int i = 1; i <= steps; i++) {\n            vector<int> dpNext(maxColumn + 1);\n            for (int j = 0; j <= maxColumn; j++) {\n                dpNext[j] = dp[j];\n                if (j - 1 >= 0) {\n                    dpNext[j] = (dpNext[j] + dp[j - 1]) % MODULO;\n                }\n                if (j + 1 <= maxColumn) {\n                    dpNext[j] = (dpNext[j] + dp[j + 1]) % MODULO;\n                }\n            }\n            dp = dpNext;\n        }\n        return dp[0];\n    }\n};\n```\n\n```C [sol12-C]\nconst int MODULO = 1000000007;\n\nint numWays(int steps, int arrLen) {\n    int maxColumn = fmin(arrLen - 1, steps);\n    int dp[maxColumn + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 1;\n    for (int i = 1; i <= steps; i++) {\n        int dpNext[maxColumn + 1];\n        for (int j = 0; j <= maxColumn; j++) {\n            dpNext[j] = dp[j];\n            if (j - 1 >= 0) {\n                dpNext[j] = (dpNext[j] + dp[j - 1]) % MODULO;\n            }\n            if (j + 1 <= maxColumn) {\n                dpNext[j] = (dpNext[j] + dp[j + 1]) % MODULO;\n            }\n        }\n        memcpy(dp, dpNext, sizeof(dp));\n    }\n    return dp[0];\n}\n```\n\n```Python [sol12-Python3]\nclass Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        mod = 10**9 + 7\n        maxColumn = min(arrLen - 1, steps)\n\n        dp = [0] * (maxColumn + 1)\n        dp[0] = 1\n\n        for i in range(1, steps + 1):\n            dpNext = [0] * (maxColumn + 1)\n            for j in range(0, maxColumn + 1):\n                dpNext[j] = dp[j]\n                if j - 1 >= 0:\n                    dpNext[j] = (dpNext[j] + dp[j - 1]) % mod\n                if j + 1 <= maxColumn:\n                    dpNext[j] = (dpNext[j] + dp[j + 1]) % mod\n            dp = dpNext\n        \n        return dp[0]\n```\n\n```JavaScript [sol12-JavaScript]\nvar numWays = function(steps, arrLen) {\n    const MODULO = 1000000007;\n    let maxColumn = Math.min(arrLen - 1, steps);\n    let dp = new Array(maxColumn + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= steps; i++) {\n        const dpNext = new Array(maxColumn + 1).fill(0);\n        for (let j = 0; j <= maxColumn; j++) {\n            dpNext[j] = dp[j];\n            if (j - 1 >= 0) {\n                dpNext[j] = (dpNext[j] + dp[j - 1]) % MODULO;\n            }\n            if (j + 1 <= maxColumn) {\n                dpNext[j] = (dpNext[j] + dp[j + 1]) % MODULO;\n            }\n        }\n        dp = dpNext;\n    }\n    return dp[0];\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\textit{steps} \\times \\min(\\textit{arrLen}, \\textit{steps}))$。动态规划需要计算每个状态的值。\n\n- 空间复杂度：$O(\\min(\\textit{arrLen}, \\textit{steps}))$。使用空间优化的做法，可以将空间复杂度降低到 $O(\\min(\\textit{arrLen}, \\textit{steps}))$。"
}