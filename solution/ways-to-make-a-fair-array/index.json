{
	"titleSlug": "ways-to-make-a-fair-array",
	"slug": "by-wanglongjiang-7iii",
	"url": "https://leetcode-cn.com/problems/ways-to-make-a-fair-array/solution/by-wanglongjiang-7iii/",
	"content": "### 解题思路\n后缀和\n首先求数组的奇数、偶数后缀和\n然后遍历所有下标，求出删除该下标元素后的奇数和、偶数和\n\n时间复杂度：O(n)\n空间复杂度：O(n)\n### 代码\n\n```python3\nclass Solution:\n    def waysToMakeFair(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return 1\n        # 计算奇数、偶数后缀和\n        postfixSum = nums.copy()\n        for i in range(n - 3, -1, -1):\n            postfixSum[i] += postfixSum[i + 2]\n        ans = 0\n        # 删掉1个元素后，计算是否平衡\n        for i in range(n - 2):\n            if i & 1:  # i为奇数下标，需要将总奇数和-i及之后的奇数和+i之后的偶数和，总偶数和-i之后的偶数和+i之后的奇数和。然后判断是否平衡\n                ans += postfixSum[0] - postfixSum[i + 1] + postfixSum[i + 2] == postfixSum[1] - postfixSum[i] + postfixSum[i + 1]\n            else:  # i为偶数下标，需要将总奇数和-i之后的奇数和+i之后的偶数和，总偶数和-i及之后的偶数和+i之后的奇数和\n                ans += postfixSum[0] - postfixSum[i] + postfixSum[i + 1] == postfixSum[1] - postfixSum[i + 1] + postfixSum[i + 2]\n        if n & 1:\n            ans += postfixSum[0] - postfixSum[n - 1] == postfixSum[1]  # 总长度为奇数，删掉最后一个下标，实际上是偶数和减去最后一个，判断是否平衡\n            ans += postfixSum[0] - postfixSum[n - 1] == postfixSum[1] - postfixSum[n - 2] + postfixSum[n - 1]  # 总长度为奇数，删掉倒数第2个，偶数和需要减去最后一个，奇数和需要加上最后一个，删掉倒数第2个\n        else:  # 总长度为偶数，与上面的同理进行计算\n            ans += postfixSum[0] == postfixSum[1] - postfixSum[n - 1]\n            ans += postfixSum[0] - postfixSum[n - 2] + postfixSum[n - 1] == postfixSum[1] - postfixSum[n - 1]\n        return ans\n```"
}