{
	"titleSlug": "to-lower-case",
	"slug": "zhuan-huan-cheng-xiao-xie-zi-mu-by-leetc-5e29",
	"url": "https://leetcode-cn.com/problems/to-lower-case/solution/zhuan-huan-cheng-xiao-xie-zi-mu-by-leetc-5e29/",
	"content": "#### 方法一：使用语言 API\n\n**思路与算法**\n\n我们可以使用语言自带的大写字母转小写字母的 API。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string toLowerCase(string s) {\n        for (char& ch: s) {\n            ch = tolower(ch);\n        }\n        return s;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String toLowerCase(String s) {\n        return s.toLowerCase();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string ToLowerCase(string s) {\n        return s.ToLower();\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def toLowerCase(self, s: str) -> str:\n        return s.lower()\n```\n\n```C [sol1-C]\nchar * toLowerCase(char * s){\n    int len = strlen(s);\n    for (int i = 0; i < len; ++i) {\n        s[i] = tolower(s[i]);\n    }\n    return s;\n}\n```\n\n```go [sol1-Golang]\nfunc toLowerCase(s string) string {\n    return strings.ToLower(s)\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar toLowerCase = function(s) {\n    return s.toLowerCase();\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度。\n\n- 空间复杂度：$O(1)$，不考虑返回值的空间占用。\n\n#### 方法二：自行实现该 API\n\n**思路与算法**\n\n方法二的主要目的是，带领读者一步一步设计一个高效的大写字母转小写字母的 API。\n\n我们可以想到的最简单的方法是使用一个哈希映射，哈希映射中包含 $26$ 个键值对 $(\\text{A}, \\text{a}), (\\text{B}, \\text{b}), \\cdots, (\\text{Z}, \\text{z})$。对于每个待转换的字符 $\\textit{ch}$，如果它出现在是哈希映射中（即 $\\textit{ch}$ 是哈希映射中的一个键），那么 $\\textit{ch}$ 是大写字母，我们获取 $\\textit{ch}$ 在哈希映射中的值即可得到对应的小写字母；如果它没有出现在哈希映射中，那么 $\\textit{ch}$ 是其它字符，我们无需进行转换。\n\n然而这种方法需要一定量的辅助空间，不够简洁。一种更好的方法是观察小写字母和大写字母的 $\\text{ASCII}$ 码表示：\n\n- 大写字母 $\\text{A - Z}$ 的 $\\text{ASCII}$ 码范围为 $[65, 90]$：\n\n- 小写字母 $\\text{a - z}$ 的 $\\text{ASCII}$ 码范围为 $[97, 122]$。\n\n因此，如果我们发现 $\\textit{ch}$ 的 $\\text{ASCII}$ 码在 $[65, 96]$ 的范围内，那么我们将它的 $\\text{ASCII}$ 码增加 $32$，即可得到对应的小写字母。\n\n近而我们可以发现，由于 $[65, 96]$ 对应的二进制表示为 $[(01000001)_2, (01011010)_2]$，$32$ 对应的二进制表示为 $(00100000)_2$，而对于 $[(01000001)_2, (01011010)_2]$ 内的所有数，表示 $32$ 的那个二进制位都是 $0$，因此可以对 $\\textit{ch}$ 的 $\\text{ASCII}$ 码与 $32$ 做按位或运算，替代与 $32$ 的加法运算。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    string toLowerCase(string s) {\n        for (char& ch: s) {\n            if (ch >= 65 && ch <= 90) {\n                ch |= 32;\n            }\n        }\n        return s;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public String toLowerCase(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); ++i) {\n            char ch = s.charAt(i);\n            if (ch >= 65 && ch <= 90) {\n                ch |= 32;\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public string ToLowerCase(string s) {\n        StringBuilder sb = new StringBuilder();\n        foreach (char ch in s) {\n            char chNew = (int) ch >= 65 && (int) ch <= 90 ? (char) (ch | 32) : (char) ch;\n            sb.Append(chNew);\n        }\n        return sb.ToString();\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def toLowerCase(self, s: str) -> str:\n        return \"\".join(chr(asc | 32) if 65 <= (asc := ord(ch)) <= 90 else ch for ch in s)\n```\n\n```C [sol2-C]\nchar * toLowerCase(char * s){\n    int len = strlen(s);\n    for (int i = 0; i < len; ++i) {\n        if (s[i] >= 65 && s[i] <= 90) {\n            s[i] |= 32;\n        }\n    }\n    return s;\n}\n```\n\n```go [sol2-Golang]\nfunc toLowerCase(s string) string {\n    lower := &strings.Builder{}\n    lower.Grow(len(s))\n    for _, ch := range s {\n        if 65 <= ch && ch <= 90 {\n            ch |= 32\n        }\n        lower.WriteRune(ch)\n    }\n    return lower.String()\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar toLowerCase = function(s) {\n    const sb = [];\n    for (let ch of s) {\n        if (ch.charCodeAt() >= 65 && ch.charCodeAt() <= 90) {\n            ch = String.fromCharCode(ch.charCodeAt() | 32);\n        }\n        sb.push(ch);\n    }\n    return sb.join('');\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度。\n\n- 空间复杂度：$O(1)$，不考虑返回值的空间占用。"
}