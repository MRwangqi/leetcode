{
	"titleSlug": "nth-magical-number",
	"slug": "di-n-ge-shen-qi-shu-zi-by-leetcode",
	"url": "https://leetcode-cn.com/problems/nth-magical-number/solution/di-n-ge-shen-qi-shu-zi-by-leetcode/",
	"content": "#### 方法一：数学方法\n\n**思路和算法**\n\n用数学方法找出第 $N$ 个神奇数字。\n\n神奇数字是有规律。设 $L$ 为 $A$，$B$ 的最小公倍数，如果 $X \\leq L$ 是神奇数字，那么 $X + L$ 也是神奇数字，因为 $A \\| X$， $A \\| L$ 可以推出 $A \\| (X + L)$，对于 $B$ 也是如此。\n\n有 $M = \\frac{L}{A} + \\frac{L}{B} - 1$ 个神奇数字小于等于 $L$： 其中 $\\frac{L}{A}$ 个是能被 $A$ 整除的，$\\frac{L}{B}$ 个能被 $B$ 整除，$1$ 个能同时被 $A，B$ 整除。\n\n设 $N = M*q + r$（$r < M$），前 $L*q$ 个数字有 $M*q$ 个神奇数字，$(L*q + 1, L*q + 2, \\cdots)$ 之间有 $r$ 个神奇数字。可以暴力搜 $r$，下一个神奇数字要么是 $L*q + A$ 要么是 $L*q + B$，依此类推。\n\n```java [solution1-Java]\nclass Solution {\n    public int nthMagicalNumber(int N, int A, int B) {\n        int MOD = 1_000_000_007;\n        int L = A / gcd(A, B) * B;\n        int M = L / A + L / B - 1;\n        int q = N / M, r = N % M;\n\n        long ans = (long) q * L % MOD;\n        if (r == 0)\n            return (int) ans;\n\n        int[] heads = new int[]{A, B};\n        for (int i = 0; i < r - 1; ++i) {\n            if (heads[0] <= heads[1])\n                heads[0] += A;\n            else\n                heads[1] += B;\n        }\n\n        ans += Math.min(heads[0], heads[1]);\n        return (int) (ans % MOD);\n    }\n\n    public int gcd(int x, int y) {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def nthMagicalNumber(self, N, A, B):\n        from fractions import gcd\n        MOD = 10**9 + 7\n\n        L = A / gcd(A, B) * B\n        M = L / A + L / B - 1\n        q, r = divmod(N, M)\n\n        if r == 0:\n            return q * L % MOD\n\n        heads = [A, B]\n        for _ in xrange(r - 1):\n            if heads[0] <= heads[1]:\n                heads[0] += A\n            else:\n                heads[1] += B\n\n        return (q * L + min(heads)) % MOD\n```\n\n```c++ [solution1-C++]\nclass Solution {\npublic:\n    int nthMagicalNumber(int N, int A, int B) {\n        int MOD = 1e9 + 7;\n        int L = A / gcd(A, B) * B;\n        int M = L / A + L / B - 1;\n        int q = N / M, r = N % M;\n\n        long ans = (long) q * L % MOD;\n        if (r == 0)\n            return (int) ans;\n\n        int heads[2] = {A, B};\n        for (int i = 0; i < r - 1; ++i) {\n            if (heads[0] <= heads[1])\n                heads[0] += A;\n            else\n                heads[1] += B;\n        }\n\n        ans += min(heads[0], heads[1]);\n        return (int) (ans % MOD);\n    }\n\n    int gcd(int x, int y) {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n};\n```\n\n```javascript [solution1-Javascript]\nvar nthMagicalNumber = function(N, A, B) {\n    gcd = (x, y) => {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n\n    const MOD = 1000000007;\n    const L = A / gcd(A, B) * B;\n    const M = L / A + L / B - 1;\n    const q = Math.trunc(N / M), r = N % M;\n\n    let ans = q * L % MOD;\n    if (r == 0)\n        return ans;\n\n    let heads = [A, B];\n    for (let i = 0; i < r - 1; ++i) {\n        if (heads[0] <= heads[1])\n            heads[0] += A;\n        else\n            heads[1] += B;\n    }\n\n    ans += Math.min(heads[0], heads[1]);\n    return ans % MOD;\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(A + B)$，数学计算复杂度为 $O(1)$，计算 $q*M$ 后的 $r$ 个神奇数字的复杂度为 $O(M)$，即 $O(A+B)$。\n\n* 空间复杂度： $O(1)$。\n\n#### 方法二： 二分搜索\n\n**思路**\n\n小于等于 $x$ 的神奇数字的个数是一个单调递增函数，可以用二分搜索来做这道题。\n\n**算法**\n\n设 $L = lcm(A, B)$，为 $A$，$B$ 的 **最小公倍数**，$L = \\frac{A * B}{gcd(A, B)}$。\n\n$f(x)$ 为小于等于 $x$ 的神奇数字的个数。$f(x) = \\lfloor \\frac{x}{A} \\rfloor + \\lfloor \\frac{x}{B} \\rfloor - \\lfloor \\frac{x}{L} \\rfloor$。有 $\\lfloor \\frac{x}{A} \\rfloor$ 个数字能被 $A$ 整除的，$\\lfloor \\frac{x}{B} \\rfloor$ 个数字能被 $B$ 整除，同时需要减去 $\\lfloor \\frac{x}{L} \\rfloor$ 个能被 $A$，$B$ 整除的数。\n\n```java [solution2-Java]\nclass Solution {\n    public int nthMagicalNumber(int N, int A, int B) {\n        int MOD = 1_000_000_007;\n        int L = A / gcd(A, B) * B;\n\n        long lo = 0;\n        long hi = (long) 1e15;\n        while (lo < hi) {\n            long mi = lo + (hi - lo) / 2;\n            // If there are not enough magic numbers below mi...\n            if (mi / A + mi / B - mi / L < N)\n                lo = mi + 1;\n            else\n                hi = mi;\n        }\n\n        return (int) (lo % MOD);\n    }\n\n    public int gcd(int x, int y) {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution(object):\n    def nthMagicalNumber(self, N, A, B):\n        from fractions import gcd\n        MOD = 10**9 + 7\n        L = A / gcd(A,B) * B\n\n        def magic_below_x(x):\n            #How many magical numbers are <= x?\n            return x / A + x / B - x / L\n\n        lo = 0\n        hi = 10**15\n        while lo < hi:\n            mi = (lo + hi) / 2\n            if magic_below_x(mi) < N:\n                lo = mi + 1\n            else:\n                hi = mi\n\n        return lo % MOD\n```\n\n```c++ [solution2-C++]\nclass Solution {\npublic:\n    int nthMagicalNumber(int N, int A, int B) {\n        int MOD = 1e9 + 7;\n        int L = A / gcd(A, B) * B;\n\n        long lo = 0;\n        long hi = (long) 1e15;\n        while (lo < hi) {\n            long mi = lo + (hi - lo) / 2;\n            // If there are not enough magic numbers below mi...\n            if (mi / A + mi / B - mi / L < N)\n                lo = mi + 1;\n            else\n                hi = mi;\n        }\n\n        return (int) (lo % MOD);\n    }\n\n    int gcd(int x, int y) {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n};\n```\n\n```javascript [solution2-Javascript]\nvar nthMagicalNumber = function(N, A, B) {\n    gcd = (x, y) => {\n        if (x == 0) return y;\n        return gcd(y % x, x);\n    }\n\n    const MOD = 1000000007;\n    const L = A / gcd(A, B) * B;\n\n    let lo = 0;\n    let hi = 1e15;\n    while (lo < hi) {\n        let mi = lo + Math.trunc((hi - lo) / 2);\n        // If there are not enough magic numbers below mi...\n        if (Math.trunc(mi/A) + Math.trunc(mi/B) - Math.trunc(mi/L) < N)\n            lo = mi + 1;\n        else\n            hi = mi;\n    }\n\n    return lo % MOD;\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(\\log(N * \\max(A, B)))$。\n\n* 空间复杂度： $O(1)$。"
}