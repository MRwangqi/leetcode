{
	"titleSlug": "xiao-zhang-shua-ti-ji-hua",
	"slug": "xiao-zhang-shua-ti-ji-hua-er-fen-cha-zhao-by-leetc",
	"url": "https://leetcode-cn.com/problems/xiao-zhang-shua-ti-ji-hua/solution/xiao-zhang-shua-ti-ji-hua-er-fen-cha-zhao-by-leetc/",
	"content": "## 题意概述\n\n给定一个数组，将其划分成 $M$ 份，使得每份元素之和最大值最小，每份可以任意减去其中一个元素。\n\n### 题解\n\n如果不考虑每份可以任意减去一个元素，就是一个经典的二分问题，具有单调最优的性质：如果最大值为 $t$ 可以满足条件划分，那么最大值为 $t+1$ 也可以。所以就直接二分最大值 $t$，找到最小满足条件的 $t$ 即可。\n\n本题加了一个条件：每份可以删除任意一个数组。为了能够让最大值最小，显然每份中删去的一定是最大元素，所以在二分判定可行性时，维护当前序列的最大值，然后记录删除最大值的结果，也就是说二分的判定是：是否可以让每组删除最大值之后，总和都小于等于 $t$。\n\n```C++ []\nclass Solution {\npublic:\n    bool Check(int limit, vector<int> cost, int day) {\n      // 每组划分 limit 的最大和，贪心划分看有多少组\n        int useday, totaltime, maxtime;\n        useday = 1; totaltime = maxtime = 0;\n        for (int i=0; i<cost.size(); ++i) {\n            int nexttime = min(maxtime, cost[i]);\n            if (nexttime + totaltime <= limit) {\n                totaltime += nexttime;\n                maxtime = max(maxtime, cost[i]);\n            } else {\n                ++useday;\n                totaltime = 0;\n                maxtime = cost[i];\n            }\n        }\n        return (useday <= day);\n    }\n    int minTime(vector<int>& time, int m) {\n        int left, right, middle;\n        left = right = 0;\n        for (int i=0; i<time.size(); ++i) {\n            right += time[i];\n        }\n        while (left <= right) {\n            middle = (left + right) >> 1;\n            if (Check(middle, time, m)) right = middle - 1;\n            else left = middle + 1;\n        }\n        return left;\n    }\n};\n```\n\n\n```Python []\nclass Solution:\n    def minTime(self, time: List[int], m: int) -> int:\n        l,r = 0,sum(time)\n        while l<r:\n            mid = (l+r)>>1\n            if self.check(mid,time,m):\n                r = mid\n            else:\n                l = mid + 1\n        return l\n\n    def check(self, limit, cost, day):\n        use_day,total_time,max_time = 1,0,cost[0]\n        for i in cost[1:]:\n            if total_time+min(max_time,i)<= limit:\n                total_time,max_time = total_time+min(max_time,i),max(max_time,i)\n            else:\n                use_day += 1\n                total_time,max_time = 0,i\n        return use_day<=day\n```\n\n#### 复杂度分析\n\n* 时间复杂度：$O(N\\log M)$，其中 $N$ 是数组的大小，$M$ 是数组所有元素之和。\n\n* 空间复杂度：$O(N)$。"
}