{
	"titleSlug": "russian-doll-envelopes",
	"slug": "e-luo-si-tao-wa-xin-feng-wen-ti-by-leetc-wj68",
	"url": "https://leetcode-cn.com/problems/russian-doll-envelopes/solution/e-luo-si-tao-wa-xin-feng-wen-ti-by-leetc-wj68/",
	"content": "#### 前言\n\n根据题目的要求，如果我们选择了 $k$ 个信封，它们的的宽度依次为 $w_0, w_1, \\cdots, w_{k-1}$，高度依次为 $h_0, h_1, \\cdots, h_{k-1}$，那么需要满足：\n\n$$\n\\begin{cases}\nw_0 < w_1 < \\cdots < w_{k-1} \\\\\nh_0 < h_1 < \\cdots < h_{k-1}\n\\end{cases}\n$$\n\n同时控制 $w$ 和 $h$ 两个维度并不是那么容易，因此我们考虑固定一个维度，再在另一个维度上进行选择。例如，我们固定 $w$ 维度，那么我们将数组 $\\textit{envelopes}$ 中的所有信封按照 $w$ 升序排序。这样一来，我们只要按照信封在数组中的出现顺序依次进行选取，就一定保证满足：\n\n$$\nw_0 \\leq w_1 \\leq \\cdots \\leq w_{k-1}\n$$\n\n了。然而小于等于 $\\leq$ 和小于 $<$ 还是有区别的，但我们不妨首先考虑一个简化版本的问题：\n\n> 如果我们保证所有信封的 $w$ 值互不相同，那么我们可以设计出一种得到答案的方法吗？\n\n在 $w$ 值互不相同的前提下，小于等于 $\\leq$ 和小于 $<$ 是等价的，那么我们在排序后，就可以**完全忽略** $w$ 维度，只需要考虑 $h$ 维度了。此时，我们需要解决的问题即为：\n\n> 给定一个序列，我们需要找到一个最长的子序列，使得这个子序列中的元素严格单调递增，即上面要求的：\n>   $$\n>   h_0 < h_1 < \\cdots < h_{k-1}\n>   $$\n\n那么这个问题就是经典的「最长严格递增子序列」问题了，读者可以参考力扣平台的 [300. 最长递增子序列](https://leetcode-cn.com/problems/longest-increasing-subsequence/) 及其 [官方题解](https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/)。最长严格递增子序列的详细解决方法属于解决本题的前置知识点，不是本文分析的重点，因此这里不再赘述，会在方法一和方法二中简单提及。\n\n当我们解决了简化版本的问题之后，我们来想一想使用上面的方法解决原问题，会产生什么错误。当 $w$ 值相同时，如果我们不规定 $h$ 值的排序顺序，那么可能会有如下的情况：\n\n> 排完序的结果为 $[(w, h)] = [(1, 1), (1, 2), (1, 3), (1, 4)]$，由于这些信封的 $w$ 值都相同，不存在一个信封可以装下另一个信封，那么我们只能在其中选择 $1$ 个信封。然而如果我们完全忽略 $w$ 维度，剩下的 $h$ 维度为 $[1, 2, 3, 4]$，这是一个严格递增的序列，那么我们就可以选择所有的 $4$ 个信封了，这就产生了错误。\n\n因此，我们必须要保证**对于每一种 $w$ 值，我们最多只能选择 $1$ 个信封**。\n\n我们可以将 $h$ 值作为排序的第二关键字进行降序排序，这样一来，对于每一种 $w$ 值，其对应的信封在排序后的数组中是按照 $h$ 值递减的顺序出现的，那么**这些 $h$ 值不可能组成长度超过 $1$ 的严格递增的序列**，这就从根本上杜绝了错误的出现。\n\n因此我们就可以得到解决本题需要的方法：\n\n- 首先我们将所有的信封按照 $w$ 值第一关键字升序、$h$ 值第二关键字降序进行排序；\n\n- 随后我们就可以忽略 $w$ 维度，求出 $h$ 维度的最长严格递增子序列，其长度即为答案。\n\n下面简单提及两种计算最长严格递增子序列的方法，更详细的请参考上文提到的题目以及对应的官方题解。\n\n#### 方法一：动态规划\n\n**思路与算法**\n\n设 $f[i]$ 表示 $h$ 的前 $i$ 个元素可以组成的最长严格递增子序列的长度，并且我们必须选择第 $i$ 个元素 $h_i$。在进行状态转移时，我们可以考虑倒数第二个选择的元素 $h_j$，必须满足 $h_j < h_i$ 且 $j < i$，因此可以写出状态转移方程：\n\n$$\nf[i] = \\max_{j<i ~\\wedge~ h_j<h_i } \\{ f[j] \\} + 1\n$$\n\n如果不存在比 $h_i$ 小的元素 $h_j$，那么 $f[i]$ 的值为 $1$，即只选择了唯一的第 $i$ 个元素。\n\n在计算完所有的 $f$ 值之后，其中的最大值即为最长严格递增子序列的长度。\n\n**代码**\n\n由于方法一的时间复杂度较高，一些语言对应的代码可能会超出时间限制。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxEnvelopes(vector<vector<int>>& envelopes) {\n        if (envelopes.empty()) {\n            return 0;\n        }\n        \n        int n = envelopes.size();\n        sort(envelopes.begin(), envelopes.end(), [](const auto& e1, const auto& e2) {\n            return e1[0] < e2[0] || (e1[0] == e2[0] && e1[1] > e2[1]);\n        });\n\n        vector<int> f(n, 1);\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (envelopes[j][1] < envelopes[i][1]) {\n                    f[i] = max(f[i], f[j] + 1);\n                }\n            }\n        }\n        return *max_element(f.begin(), f.end());\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxEnvelopes(int[][] envelopes) {\n        if (envelopes.length == 0) {\n            return 0;\n        }\n        \n        int n = envelopes.length;\n        Arrays.sort(envelopes, new Comparator<int[]>() {\n            public int compare(int[] e1, int[] e2) {\n                if (e1[0] != e2[0]) {\n                    return e1[0] - e2[0];\n                } else {\n                    return e2[1] - e1[1];\n                }\n            }\n        });\n\n        int[] f = new int[n];\n        Arrays.fill(f, 1);\n        int ans = 1;\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (envelopes[j][1] < envelopes[i][1]) {\n                    f[i] = Math.max(f[i], f[j] + 1);\n                }\n            }\n            ans = Math.max(ans, f[i]);\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        if not envelopes:\n            return 0\n        \n        n = len(envelopes)\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n\n        f = [1] * n\n        for i in range(n):\n            for j in range(i):\n                if envelopes[j][1] < envelopes[i][1]:\n                    f[i] = max(f[i], f[j] + 1)\n        \n        return max(f)\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxEnvelopes = function(envelopes) {\n    if (envelopes.length === 0) {\n        return 0;\n    }\n    \n    const n = envelopes.length;\n    envelopes.sort((e1, e2) => {\n        if (e1[0] !== e2[0]) {\n            return e1[0] - e2[0];\n        } else {\n            return e2[1] - e1[1];\n        }\n    })\n\n    const f = new Array(n).fill(1);\n    let ans = 1;\n    for (let i = 1; i < n; ++i) {\n        for (let j = 0; j < i; ++j) {\n            if (envelopes[j][1] < envelopes[i][1]) {\n                f[i] = Math.max(f[i], f[j] + 1);\n            }\n        }\n        ans = Math.max(ans, f[i]);\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc maxEnvelopes(envelopes [][]int) int {\n    n := len(envelopes)\n    if n == 0 {\n        return 0\n    }\n\n    sort.Slice(envelopes, func(i, j int) bool {\n        a, b := envelopes[i], envelopes[j]\n        return a[0] < b[0] || a[0] == b[0] && a[1] > b[1]\n    })\n\n    f := make([]int, n)\n    for i := range f {\n        f[i] = 1\n    }\n    for i := 1; i < n; i++ {\n        for j := 0; j < i; j++ {\n            if envelopes[j][1] < envelopes[i][1] {\n                f[i] = max(f[i], f[j]+1)\n            }\n        }\n    }\n    return max(f...)\n}\n\nfunc max(a ...int) int {\n    res := a[0]\n    for _, v := range a[1:] {\n        if v > res {\n            res = v\n        }\n    }\n    return res\n}\n```\n\n```C [sol1-C]\nint cmp(int** a, int** b) {\n    return (*a)[0] == (*b)[0] ? (*b)[1] - (*a)[1] : (*a)[0] - (*b)[0];\n}\n\nint maxEnvelopes(int** envelopes, int envelopesSize, int* envelopesColSize) {\n    if (envelopesSize == 0) {\n        return 0;\n    }\n\n    qsort(envelopes, envelopesSize, sizeof(int*), cmp);\n\n    int n = envelopesSize;\n    int f[n];\n    for (int i = 0; i < n; i++) {\n        f[i] = 1;\n    }\n    int ret = 1;\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (envelopes[j][1] < envelopes[i][1]) {\n                f[i] = fmax(f[i], f[j] + 1);\n            }\n        }\n        ret = fmax(ret, f[i]);\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\\textit{envelopes}$ 的长度，排序需要的时间复杂度为 $O(n \\log n)$，动态规划需要的时间复杂度为 $O(n^2)$，前者在渐近意义下小于后者，可以忽略。\n\n- 空间复杂度：$O(n)$，即为数组 $f$ 需要的空间。\n\n#### 方法二：基于二分查找的动态规划\n\n**思路与算法**\n\n设 $f[j]$ 表示 $h$ 的前 $i$ 个元素可以组成的长度为 $j$ 的最长严格递增子序列的末尾元素的最小值，如果不存在长度为 $j$ 的最长严格递增子序列，对应的 $f$ 值无定义。在定义范围内，可以看出 $f$ 值是严格单调递增的，因为越长的子序列的末尾元素显然越大。\n\n在进行状态转移时，我们考虑当前的元素 $h_i$：\n\n- 如果 $h_i$ 大于 $f$ 中的最大值，那么 $h_i$ 就可以接在 $f$ 中的最大值之后，形成一个长度更长的严格递增子序列；\n\n- 否则我们找出 $f$ 中比 $h_i$ 严格小的最大的元素 $f[j_0]$，即 $f[j_0] < h_i \\leq f[j_0+1]$，那么 $h_i$ 可以接在 $f[j_0]$ 之后，形成一个长度为 $j_0+1$ 的严格递增子序列，因此需要对 $f[j_0+1]$ 进行更新：\n\n    $$\n    f[j_0+1] = h_i\n    $$\n\n    我们可以在 $f$ 上进行二分查找，找出满足要求的 $j_0$。\n\n在遍历所有的 $h_i$ 之后，$f$ 中最后一个有定义的元素的下标增加 $1$（下标从 $0$ 开始）即为最长严格递增子序列的长度。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxEnvelopes(vector<vector<int>>& envelopes) {\n        if (envelopes.empty()) {\n            return 0;\n        }\n        \n        int n = envelopes.size();\n        sort(envelopes.begin(), envelopes.end(), [](const auto& e1, const auto& e2) {\n            return e1[0] < e2[0] || (e1[0] == e2[0] && e1[1] > e2[1]);\n        });\n\n        vector<int> f = {envelopes[0][1]};\n        for (int i = 1; i < n; ++i) {\n            if (int num = envelopes[i][1]; num > f.back()) {\n                f.push_back(num);\n            }\n            else {\n                auto it = lower_bound(f.begin(), f.end(), num);\n                *it = num;\n            }\n        }\n        return f.size();\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int maxEnvelopes(int[][] envelopes) {\n        if (envelopes.length == 0) {\n            return 0;\n        }\n        \n        int n = envelopes.length;\n        Arrays.sort(envelopes, new Comparator<int[]>() {\n            public int compare(int[] e1, int[] e2) {\n                if (e1[0] != e2[0]) {\n                    return e1[0] - e2[0];\n                } else {\n                    return e2[1] - e1[1];\n                }\n            }\n        });\n\n        List<Integer> f = new ArrayList<Integer>();\n        f.add(envelopes[0][1]);\n        for (int i = 1; i < n; ++i) {\n            int num = envelopes[i][1];\n            if (num > f.get(f.size() - 1)) {\n                f.add(num);\n            } else {\n                int index = binarySearch(f, num);\n                f.set(index, num);\n            }\n        }\n        return f.size();\n    }\n\n    public int binarySearch(List<Integer> f, int target) {\n        int low = 0, high = f.size() - 1;\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (f.get(mid) < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        if not envelopes:\n            return 0\n        \n        n = len(envelopes)\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n\n        f = [envelopes[0][1]]\n        for i in range(1, n):\n            if (num := envelopes[i][1]) > f[-1]:\n                f.append(num)\n            else:\n                index = bisect.bisect_left(f, num)\n                f[index] = num\n        \n        return len(f)\n```\n\n```JavaScript [sol2-JavaScript]\nvar maxEnvelopes = function(envelopes) {\n    if (envelopes.length === 0) {\n        return 0;\n    }\n    \n    const n = envelopes.length;\n    envelopes.sort((e1, e2) => {\n        if (e1[0] - e2[0]) {\n            return e1[0] - e2[0];\n        } else {\n            return e2[1] - e1[1];\n        }\n    })\n\n    const f = [envelopes[0][1]];\n    for (let i = 1; i < n; ++i) {\n        const num = envelopes[i][1];\n        if (num > f[f.length - 1]) {\n            f.push(num);\n        } else {\n            const index = binarySearch(f, num);\n            f[index] = num;\n        }\n    }\n    return f.length;\n}\n\nconst binarySearch = (f, target) => {\n    let low = 0, high = f.length - 1;\n    while (low < high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        if (f[mid] < target) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n};\n```\n\n```go [sol2-Golang]\nfunc maxEnvelopes(envelopes [][]int) int {\n    sort.Slice(envelopes, func(i, j int) bool {\n        a, b := envelopes[i], envelopes[j]\n        return a[0] < b[0] || a[0] == b[0] && a[1] > b[1]\n    })\n\n    f := []int{}\n    for _, e := range envelopes {\n        h := e[1]\n        if i := sort.SearchInts(f, h); i < len(f) {\n            f[i] = h\n        } else {\n            f = append(f, h)\n        }\n    }\n    return len(f)\n}\n```\n\n```C [sol2-C]\nint cmp(int** a, int** b) {\n    return (*a)[0] == (*b)[0] ? (*b)[1] - (*a)[1] : (*a)[0] - (*b)[0];\n}\n\nint lower_bound(int* arr, int arrSize, int val) {\n    int left = 0, right = arrSize - 1;\n    while (left <= right) {\n        int mid = (left + right) >> 1;\n        if (val < arr[mid]) {\n            right = mid - 1;\n        } else if (val > arr[mid]) {\n            left = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    if (arr[left] >= val) {\n        return left;\n    }\n    return -1;\n}\n\nint maxEnvelopes(int** envelopes, int envelopesSize, int* envelopesColSize) {\n    if (envelopesSize == 0) {\n        return 0;\n    }\n\n    qsort(envelopes, envelopesSize, sizeof(int*), cmp);\n\n    int n = envelopesSize;\n    int f[n], fSize = 0;\n    f[fSize++] = envelopes[0][1];\n    for (int i = 1; i < n; ++i) {\n        int num = envelopes[i][1];\n        if (num > f[fSize - 1]) {\n            f[fSize++] = num;\n        } else {\n            f[lower_bound(f, fSize, num)] = num;\n        }\n    }\n    return fSize;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{envelopes}$ 的长度，排序需要的时间复杂度为 $O(n \\log n)$，动态规划需要的时间复杂度同样为 $O(n \\log n)$。\n\n- 空间复杂度：$O(n)$，即为数组 $f$ 需要的空间。"
}