{
	"titleSlug": "wiggle-subsequence",
	"slug": "bai-dong-xu-lie-by-leetcode-solution-yh2m",
	"url": "https://leetcode-cn.com/problems/wiggle-subsequence/solution/bai-dong-xu-lie-by-leetcode-solution-yh2m/",
	"content": "#### 写在前面\n\n解决本题前，我们先进行一些约定：\n\n1. 某个序列被称为「上升摆动序列」，当且仅当该序列是摆动序列，且最后一个元素呈上升趋势。如序列 $[1,3,2,4]$ 即为「上升摆动序列」。\n\n2. 某个序列被称为「下降摆动序列」，当且仅当该序列是摆动序列，且最后一个元素呈下降趋势。如序列 $[4,2,3,1]$ 即为「下降摆动序列」。\n\n3. 特别地，对于长度为 $1$ 的序列，它既是「上升摆动序列」，也是「下降摆动序列」。\n\n4. 序列中的某个元素被称为「峰」，当且仅当该元素两侧的相邻元素均小于它。如序列 $[1,3,2,4]$ 中，$3$ 就是一个「峰」。\n\n5. 序列中的某个元素被称为「谷」，当且仅当该元素两侧的相邻元素均大于它。如序列 $[1,3,2,4]$ 中，$2$ 就是一个「谷」。\n\n6. 特别地，对于位于序列两端的元素，只有一侧的相邻元素小于或大于它，我们也称其为「峰」或「谷」。如序列 $[1,3,2,4]$ 中，$1$ 也是一个「谷」，$4$ 也是一个「峰」。\n\n7. 因为一段相邻的相同元素中我们最多只能选择其中的一个，所以我们可以忽略相邻的相同元素。现在我们假定序列中任意两个相邻元素都不相同，即要么左侧大于右侧，要么右侧大于左侧。对于序列中既非「峰」也非「谷」的元素，我们称其为「过渡元素」。如序列 $[1,2,3,4]$ 中，$2$ 和 $3$ 都是「过渡元素」。\n\n#### 方法一：动态规划\n\n**思路及解法**\n\n每当我们选择一个元素作为摆动序列的一部分时，这个元素要么是上升的，要么是下降的，这取决于前一个元素的大小。那么列出状态表达式为：\n\n1. $\\textit{up}[i]$ 表示以前 $i$ 个元素中的某一个为结尾的最长的「上升摆动序列」的长度。\n\n2. $\\textit{down}[i]$ 表示以前 $i$ 个元素中的某一个为结尾的最长的「下降摆动序列」的长度。\n\n下面以 $\\textit{up}[i]$ 为例，说明其状态转移规则：\n\n1. 当 $\\textit{nums}[i] \\leq \\textit{nums}[i - 1]$ 时，我们无法选出更长的「上升摆动序列」的方案。因为对于任何以 $\\textit{nums}[i]$ 结尾的「上升摆动序列」，我们都可以将 $\\textit{nums}[i]$ 替换为 $\\textit{nums}[i - 1]$，使其成为以 $\\textit{nums}[i - 1]$ 结尾的「上升摆动序列」。\n\n2. 当 $\\textit{nums}[i] > \\textit{nums}[i - 1]$ 时，我们既可以从 $up[i - 1]$ 进行转移，也可以从 $\\textit{down}[i - 1]$ 进行转移。下面我们证明从 $\\textit{down}[i - 1]$ 转移是必然合法的，即必然存在一个 $\\textit{down}[i - 1]$ 对应的最长的「下降摆动序列」的末尾元素小于 $\\textit{nums}[i]$。\n\n   - 我们记这个末尾元素在原序列中的下标为 $j$，假设从 $j$ 往前的第一个「谷」为 $\\textit{nums}[k]$，我们总可以让 $j$ 移动到 $k$，使得这个最长的「下降摆动序列」的末尾元素为「谷」。\n\n   - 然后我们可以证明在这个末尾元素为「谷」的情况下，这个末尾元素必然是从 $\\textit{nums}[i]$ 往前的第一个「谷」。证明非常简单，我们使用反证法，如果这个末尾元素不是从 $\\textit{nums}[i]$ 往前的第一个「谷」，那么我们总可以在末尾元素和 $\\textit{nums}[i]$ 之间取得一对「峰」与「谷」，接在这个「下降摆动序列」后，使其更长。\n   \n   - 这样我们知道必然存在一个 $\\textit{down}[i - 1]$ 对应的最长的「下降摆动序列」的末尾元素为 $\\textit{nums}[i]$ 往前的第一个「谷」。这个「谷」必然小于 $\\textit{nums}[i]$。证毕。\n\n这样我们可以用同样的方法说明 $\\textit{down}[i]$ 的状态转移规则，最终的状态转移方程为：\n\n$$\n\\begin{aligned}\n&\\textit{up}[i]=\n\\begin{cases}\n    \\textit{up}[i - 1],& \\textit{nums}[i] \\leq \\textit{nums}[i - 1] \\\\\n    \\max(\\textit{up}[i - 1], \\textit{down}[i - 1] + 1),& \\textit{nums}[i] > \\textit{nums}[i - 1]\n\\end{cases} \\\\\\\\\n&\\textit{down}[i]=\n\\begin{cases}\n    \\textit{down}[i - 1],& \\textit{nums}[i] \\geq \\textit{nums}[i - 1] \\\\\n    \\max(\\textit{up}[i - 1] + 1, \\textit{down}[i - 1]),& \\textit{nums}[i] < \\textit{nums}[i - 1]\n\\end{cases}\n\\end{aligned}\n$$\n\n最终的答案即为 $\\textit{up}[n-1]$ 和 $\\textit{down}[n-1]$ 中的较大值，其中 $n$ 是序列的长度。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int wiggleMaxLength(vector<int>& nums) {\n        int n = nums.size();\n        if (n < 2) {\n            return n;\n        }\n        vector<int> up(n), down(n);\n        up[0] = down[0] = 1;\n        for (int i = 1; i < n; i++) {\n            if (nums[i] > nums[i - 1]) {\n                up[i] = max(up[i - 1], down[i - 1] + 1);\n                down[i] = down[i - 1];\n            } else if (nums[i] < nums[i - 1]) {\n                up[i] = up[i - 1];\n                down[i] = max(up[i - 1] + 1, down[i - 1]);\n            } else {\n                up[i] = up[i - 1];\n                down[i] = down[i - 1];\n            }\n        }\n        return max(up[n - 1], down[n - 1]);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int wiggleMaxLength(int[] nums) {\n        int n = nums.length;\n        if (n < 2) {\n            return n;\n        }\n        int[] up = new int[n];\n        int[] down = new int[n];\n        up[0] = down[0] = 1;\n        for (int i = 1; i < n; i++) {\n            if (nums[i] > nums[i - 1]) {\n                up[i] = Math.max(up[i - 1], down[i - 1] + 1);\n                down[i] = down[i - 1];\n            } else if (nums[i] < nums[i - 1]) {\n                up[i] = up[i - 1];\n                down[i] = Math.max(up[i - 1] + 1, down[i - 1]);\n            } else {\n                up[i] = up[i - 1];\n                down[i] = down[i - 1];\n            }\n        }\n        return Math.max(up[n - 1], down[n - 1]);\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar wiggleMaxLength = function(nums) {\n    const n = nums.length;\n    if (n < 2) return n;\n    const up = new Array(n).fill(0);\n    const down = new Array(n).fill(0);\n    up[0] = down[0] = 1;\n    for (let i = 1; i < n; i++) {\n        if (nums[i] > nums[i - 1]) {\n            up[i] = Math.max(up[i - 1], down[i - 1] + 1);\n            down[i] = down[i - 1];\n        } else if (nums[i] < nums[i - 1]) {\n            up[i] = up[i - 1];\n            down[i] = Math.max(up[i - 1] + 1, down[i - 1]);\n        } else {\n            up[i] = up[i - 1];\n            down[i] = down[i - 1];\n        }\n    }\n    return Math.max(up[n - 1], down[n - 1]);\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return n\n        \n        up = [1] + [0] * (n - 1)\n        down = [1] + [0] * (n - 1)\n        for i in range(1, n):\n            if nums[i] > nums[i - 1]:\n                up[i] = max(up[i - 1], down[i - 1] + 1)\n                down[i] = down[i - 1]\n            elif nums[i] < nums[i - 1]:\n                up[i] = up[i - 1]\n                down[i] = max(up[i - 1] + 1, down[i - 1])\n            else:\n                up[i] = up[i - 1]\n                down[i] = down[i - 1]\n        \n        return max(up[n - 1], down[n - 1])\n```\n\n```Golang [sol1-Golang]\nfunc wiggleMaxLength(nums []int) int {\n    n := len(nums)\n    if n < 2 {\n        return n\n    }\n    up := make([]int, n)\n    down := make([]int, n)\n    up[0] = 1\n    down[0] = 1\n    for i := 1; i < n; i++ {\n        if nums[i] > nums[i-1] {\n            up[i] = max(up[i-1], down[i-1]+1)\n            down[i] = down[i-1]\n        } else if nums[i] < nums[i-1] {\n            up[i] = up[i-1]\n            down[i] = max(up[i-1]+1, down[i-1])\n        } else {\n            up[i] = up[i-1]\n            down[i] = down[i-1]\n        }\n    }\n    return max(up[n-1], down[n-1])\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol1-C]\nint wiggleMaxLength(int* nums, int numsSize) {\n    if (numsSize < 2) {\n        return numsSize;\n    }\n    int up[numsSize], down[numsSize];\n    up[0] = down[0] = 1;\n    for (int i = 1; i < numsSize; i++) {\n        if (nums[i] > nums[i - 1]) {\n            up[i] = fmax(up[i - 1], down[i - 1] + 1);\n            down[i] = down[i - 1];\n        } else if (nums[i] < nums[i - 1]) {\n            up[i] = up[i - 1];\n            down[i] = fmax(up[i - 1] + 1, down[i - 1]);\n        } else {\n            up[i] = up[i - 1];\n            down[i] = down[i - 1];\n        }\n    }\n    return fmax(up[numsSize - 1], down[numsSize - 1]);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是序列的长度。我们只需要遍历该序列一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是序列的长度。我们需要开辟两个长度为 $n$ 的数组。\n\n#### 方法二：优化的动态规划\n\n**思路及解法**\n\n注意到方法一中，我们仅需要前一个状态来进行转移，所以我们维护两个变量即可。这样我们可以写出如下的代码：\n\n```C++ [sol21-C++]\nclass Solution {\npublic:\n    int wiggleMaxLength(vector<int>& nums) {\n        int n = nums.size();\n        if (n < 2) {\n            return n;\n        }\n        int up = 1, down = 1;\n        for (int i = 1; i < n; i++) {\n            if (nums[i] > nums[i - 1]) {\n                up = max(up, down + 1);\n            } else if (nums[i] < nums[i - 1]) {\n                down = max(up + 1, down);\n            }\n        }\n        return max(up, down);\n    }\n};\n```\n\n```Java [sol21-Java]\nclass Solution {\n    public int wiggleMaxLength(int[] nums) {\n        int n = nums.length;\n        if (n < 2) {\n            return n;\n        }\n        int up = 1, down = 1;\n        for (int i = 1; i < n; i++) {\n            if (nums[i] > nums[i - 1]) {\n                up = Math.max(up, down + 1);\n            } else if (nums[i] < nums[i - 1]) {\n                down = Math.max(up + 1, down);\n            }\n        }\n        return Math.max(up, down);\n    }\n}\n```\n\n```Python [sol21-Python3]\nclass Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return n\n        \n        up = down = 1\n        for i in range(1, n):\n            if nums[i] > nums[i - 1]:\n                up = max(up, down + 1)\n            elif nums[i] < nums[i - 1]:\n                down = max(up + 1, down)\n        \n        return max(up, down)\n```\n\n```Golang [sol21-Golang]\nfunc wiggleMaxLength(nums []int) int {\n    n := len(nums)\n    if n < 2 {\n        return n\n    }\n    up, down := 1, 1\n    for i := 1; i < n; i++ {\n        if nums[i] > nums[i-1] {\n            up = max(up, down+1)\n        } else if nums[i] < nums[i-1] {\n            down = max(up+1, down)\n        }\n    }\n    return max(up, down)\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol21-C]\nint wiggleMaxLength(int* nums, int numsSize) {\n    if (numsSize < 2) {\n        return numsSize;\n    }\n    int up = 1, down = 1;\n    for (int i = 1; i < numsSize; i++) {\n        if (nums[i] > nums[i - 1]) {\n            up = fmax(up, down + 1);\n        } else if (nums[i] < nums[i - 1]) {\n            down = fmax(up + 1, down);\n        }\n    }\n    return fmax(up, down);\n}\n```\n\n```JavaScript [sol21-JavaScript]\nvar wiggleMaxLength = function(nums) {\n    const n = nums.length;\n    if (n < 2) {\n        return n;\n    }\n\n    let up = down = 1;\n    for (let i = 1; i < n; i++) {\n        if (nums[i] > nums[i - 1]) {\n            up = Math.max(up, down + 1);\n        } else if (nums[i] < nums[i - 1]) {\n            down = Math.max(up + 1, down);\n        }\n    }\n    return Math.max(up, down);\n};\n```\n\n注意到每有一个「峰」到「谷」的下降趋势，$\\textit{down}$ 值才会增加，每有一个「谷」到「峰」的上升趋势，$\\textit{up}$ 值才会增加。且过程中 $\\textit{down}$ 与 $\\textit{up}$ 的差的绝对值值恒不大于 $1$，即 $\\textit{up} \\leq \\textit{down} + 1$ 且 $\\textit{down} \\leq \\textit{up} + 1$，于是有 $\\max(\\textit{up}, \\textit{down} + 1) = \\textit{down} + 1$ 且 $\\max(\\textit{up} + 1, \\textit{down}) = \\textit{up} + 1$。这样我们可以省去不必要的比较大小的过程。\n\n**代码**\n\n```C++ [sol22-C++]\nclass Solution {\npublic:\n    int wiggleMaxLength(vector<int>& nums) {\n        int n = nums.size();\n        if (n < 2) {\n            return n;\n        }\n        int up = 1, down = 1;\n        for (int i = 1; i < n; i++) {\n            if (nums[i] > nums[i - 1]) {\n                up = down + 1;\n            } else if (nums[i] < nums[i - 1]) {\n                down = up + 1;\n            }\n        }\n        return max(up, down);\n    }\n};\n```\n\n```Java [sol22-Java]\nclass Solution {\n    public int wiggleMaxLength(int[] nums) {\n        int n = nums.length;\n        if (n < 2) {\n            return n;\n        }\n        int up = 1, down = 1;\n        for (int i = 1; i < n; i++) {\n            if (nums[i] > nums[i - 1]) {\n                up = down + 1;\n            } else if (nums[i] < nums[i - 1]) {\n                down = up + 1;\n            }\n        }\n        return Math.max(up, down);\n    }\n}\n```\n\n```Python [sol22-Python3]\nclass Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return n\n        \n        up = down = 1\n        for i in range(1, n):\n            if nums[i] > nums[i - 1]:\n                up = down + 1\n            elif nums[i] < nums[i - 1]:\n                down = up + 1\n        \n        return max(up, down)\n```\n\n```Golang [sol22-Golang]\nfunc wiggleMaxLength(nums []int) int {\n    n := len(nums)\n    if n < 2 {\n        return n\n    }\n    up, down := 1, 1\n    for i := 1; i < n; i++ {\n        if nums[i] > nums[i-1] {\n            up = down + 1\n        } else if nums[i] < nums[i-1] {\n            down = up + 1\n        }\n    }\n    return max(up, down)\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol22-C]\nint wiggleMaxLength(int* nums, int numsSize) {\n    if (numsSize < 2) {\n        return numsSize;\n    }\n    int up = 1, down = 1;\n    for (int i = 1; i < numsSize; i++) {\n        if (nums[i] > nums[i - 1]) {\n            up = down + 1;\n        } else if (nums[i] < nums[i - 1]) {\n            down = up + 1;\n        }\n    }\n    return fmax(up, down);\n}\n```\n```JavaScript [sol22-JavaScript]\nvar wiggleMaxLength = function(nums) {\n    const n = nums.length;\n    if (n < 2) { \n        return n;\n    }\n\n    let up = down = 1;\n    for (let i = 1; i < n; i++) {\n        if (nums[i] > nums[i - 1]) {\n            up = down + 1;\n        } else if (nums[i] < nums[i - 1]) {\n            down = up + 1;\n        }\n    }\n    return Math.max(up, down);\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是序列的长度。我们只需要遍历该序列一次。\n\n- 空间复杂度：$O(1)$。我们只需要常数空间来存放若干变量。\n\n#### 方法三：贪心\n\n**思路及解法**\n\n观察这个序列可以发现，我们不断地交错选择「峰」与「谷」，可以使得该序列尽可能长。证明非常简单：如果我们选择了一个「过渡元素」，那么在原序列中，这个「过渡元素」的两侧有一个「峰」和一个「谷」。不失一般性，我们假设在原序列中的出现顺序为「峰」「过渡元素」「谷」。如果「过渡元素」在选择的序列中小于其两侧的元素，那么「谷」一定没有在选择的序列中出现，我们可以将「过渡元素」替换成「谷」；同理，如果「过渡元素」在选择的序列中大于其两侧的元素，那么「峰」一定没有在选择的序列中出现，我们可以将「过渡元素」替换成「峰」。这样一来，我们总可以将任意满足要求的序列中的所有「过渡元素」替换成「峰」或「谷」。并且由于我们不断地交错选择「峰」与「谷」的方法就可以满足要求，因此这种选择方法就一定可以达到可选元素数量的最大值。\n\n这样，我们只需要统计该序列中「峰」与「谷」的数量即可（注意序列两端的数也是「峰」或「谷」），但需要注意处理相邻的相同元素。\n\n在实际代码中，我们记录当前序列的上升下降趋势。每次加入一个新元素时，用新的上升下降趋势与之前对比，如果出现了「峰」或「谷」，答案加一，并更新当前序列的上升下降趋势。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int wiggleMaxLength(vector<int>& nums) {\n        int n = nums.size();\n        if (n < 2) {\n            return n;\n        }\n        int prevdiff = nums[1] - nums[0];\n        int ret = prevdiff != 0 ? 2 : 1;\n        for (int i = 2; i < n; i++) {\n            int diff = nums[i] - nums[i - 1];\n            if ((diff > 0 && prevdiff <= 0) || (diff < 0 && prevdiff >= 0)) {\n                ret++;\n                prevdiff = diff;\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int wiggleMaxLength(int[] nums) {\n        int n = nums.length;\n        if (n < 2) {\n            return n;\n        }\n        int prevdiff = nums[1] - nums[0];\n        int ret = prevdiff != 0 ? 2 : 1;\n        for (int i = 2; i < n; i++) {\n            int diff = nums[i] - nums[i - 1];\n            if ((diff > 0 && prevdiff <= 0) || (diff < 0 && prevdiff >= 0)) {\n                ret++;\n                prevdiff = diff;\n            }\n        }\n        return ret;\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar wiggleMaxLength = function(nums) {\n    const n = nums.length;\n    if (n < 2) {\n        return n;\n    }\n    let prevdiff = nums[1] - nums[0];\n    let ret = prevdiff !== 0 ? 2 : 1;\n    for (let i = 2; i < n; i++) {\n        const diff = nums[i] - nums[i - 1];\n        if ((diff > 0 && prevdiff <= 0) || (diff < 0 && prevdiff >= 0)) {\n            ret++;\n            prevdiff = diff;\n        }\n    }\n    return ret;\n};\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return n\n        \n        prevdiff = nums[1] - nums[0]\n        ret = (2 if prevdiff != 0 else 1)\n        for i in range(2, n):\n            diff = nums[i] - nums[i - 1]\n            if (diff > 0 and prevdiff <= 0) or (diff < 0 and prevdiff >= 0):\n                ret += 1\n                prevdiff = diff\n        \n        return ret\n```\n\n```Golang [sol3-Golang]\nfunc wiggleMaxLength(nums []int) int {\n    n := len(nums)\n    if n < 2 {\n        return n\n    }\n    ans := 1\n    prevDiff := nums[1] - nums[0]\n    if prevDiff != 0 {\n        ans = 2\n    }\n    for i := 2; i < n; i++ {\n        diff := nums[i] - nums[i-1]\n        if diff > 0 && prevDiff <= 0 || diff < 0 && prevDiff >= 0 {\n            ans++\n            prevDiff = diff\n        }\n    }\n    return ans\n}\n```\n\n```C [sol3-C]\nint wiggleMaxLength(int* nums, int numsSize) {\n    if (numsSize < 2) {\n        return numsSize;\n    }\n    int prevdiff = nums[1] - nums[0];\n    int ret = prevdiff != 0 ? 2 : 1;\n    for (int i = 2; i < numsSize; i++) {\n        int diff = nums[i] - nums[i - 1];\n        if ((diff > 0 && prevdiff <= 0) || (diff < 0 && prevdiff >= 0)) {\n            ret++;\n            prevdiff = diff;\n        }\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是序列的长度。我们只需要遍历该序列一次。\n\n- 空间复杂度：$O(1)$。我们只需要常数空间来存放若干变量。"
}