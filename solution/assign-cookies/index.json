{
	"titleSlug": "assign-cookies",
	"slug": "fen-fa-bing-gan-by-leetcode-solution-50se",
	"url": "https://leetcode-cn.com/problems/assign-cookies/solution/fen-fa-bing-gan-by-leetcode-solution-50se/",
	"content": "#### 方法一：排序 + 双指针 + 贪心\n\n为了尽可能满足最多数量的孩子，从贪心的角度考虑，应该按照孩子的胃口从小到大的顺序依次满足每个孩子，且对于每个孩子，应该选择可以满足这个孩子的胃口且尺寸最小的饼干。证明如下。\n\n假设有 $m$ 个孩子，胃口值分别是 $g_1$ 到 $g_m$，有 $n$ 块饼干，尺寸分别是 $s_1$ 到 $s_n$，满足 $g_i \\le g_{i+1}$ 和 $s_j \\le s_{j+1}$，其中 $1 \\le i < m$，$1 \\le j < n$。\n\n假设在对前 $i-1$ 个孩子分配饼干之后，可以满足第 $i$ 个孩子的胃口的最小的饼干是第 $j$ 块饼干，即 $s_j$ 是剩下的饼干中满足 $g_i \\le s_j$ 的最小值，最优解是将第 $j$ 块饼干分配给第 $i$ 个孩子。如果不这样分配，考虑如下两种情形：\n\n- 如果 $i<m$ 且 $g_{i+1} \\le s_j$ 也成立，则如果将第 $j$ 块饼干分配给第 $i+1$ 个孩子，且还有剩余的饼干，则可以将第 $j+1$ 块饼干分配给第 $i$ 个孩子，分配的结果不会让更多的孩子被满足；\n\n- 如果 $j<n$，则如果将第 $j+1$ 块饼干分配给第 $i$ 个孩子，当 $g_{i+1} \\le s_j$ 时，可以将第 $j$ 块饼干分配给第 $i+1$ 个孩子，分配的结果不会让更多的孩子被满足；当 $g_{i+1}>s_j$ 时，第 $j$ 块饼干无法分配给任何孩子，因此剩下的可用的饼干少了一块，因此分配的结果不会让更多的孩子被满足，甚至可能因为少了一块可用的饼干而导致更少的孩子被满足。\n\n基于上述分析，可以使用贪心的方法尽可能满足最多数量的孩子。\n\n首先对数组 $g$ 和 $s$ 排序，然后从小到大遍历 $g$ 中的每个元素，对于每个元素找到能满足该元素的 $s$ 中的最小的元素。具体而言，令 $i$ 是 $g$ 的下标，$j$ 是 $s$ 的下标，初始时 $i$ 和 $j$ 都为 $0$，进行如下操作。\n\n对于每个元素 $g[i]$，找到**未被使用的**最小的 $j$ 使得 $g[i] \\le s[j]$，则 $s[j]$ 可以满足 $g[i]$。由于 $g$ 和 $s$ 已经排好序，因此整个过程只需要对数组 $g$ 和 $s$ 各遍历一次。当两个数组之一遍历结束时，说明所有的孩子都被分配到了饼干，或者所有的饼干都已经被分配或被尝试分配（可能有些饼干无法分配给任何孩子），此时被分配到饼干的孩子数量即为可以满足的最多数量。\n\n```Java [sol1-Java]\nclass Solution {\n    public int findContentChildren(int[] g, int[] s) {\n        Arrays.sort(g);\n        Arrays.sort(s);\n        int m = g.length, n = s.length;\n        int count = 0;\n        for (int i = 0, j = 0; i < m && j < n; i++, j++) {\n            while (j < n && g[i] > s[j]) {\n                j++;\n            }\n            if (j < n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findContentChildren = function(g, s) {\n    g.sort((a, b) => a - b);\n    s.sort((a, b) => a - b);\n    const m = g.length, n = s.length;\n    let count = 0;\n    for (let i = 0, j = 0; i < m && j < n; i++, j++) {\n        while (j < n && g[i] > s[j]) {\n            j++;\n        }\n        if (j < n) {\n            count++;\n        }\n    }\n    return count;\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findContentChildren(vector<int>& g, vector<int>& s) {\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end());\n        int m = g.size(), n = s.size();\n        int count = 0;\n        for (int i = 0, j = 0; i < m && j < n; i++, j++) {\n            while (j < n && g[i] > s[j]) {\n                j++;\n            }\n            if (j < n) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n```\n\n```Go [sol1-Golang]\nfunc findContentChildren(g []int, s []int) (ans int) {\n    sort.Ints(g)\n    sort.Ints(s)\n    m, n := len(g), len(s)\n    for i, j := 0, 0; i < m && j < n; i++ {\n        for j < n && g[i] > s[j] {\n            j++\n        }\n        if j < n {\n            ans++\n            j++\n        }\n    }\n    return\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        g.sort()\n        s.sort()\n        m, n = len(g), len(s)\n        i = j = count = 0\n\n        while i < m and j < n:\n            while j < n and g[i] > s[j]:\n                j += 1\n            if j < n:\n                count += 1\n            i += 1\n            j += 1\n        \n        return count\n```\n\n```C [sol1-C]\nint cmp(int* a, int* b) {\n    return *a - *b;\n}\n\nint findContentChildren(int* g, int gSize, int* s, int sSize) {\n    qsort(g, gSize, sizeof(int), cmp);\n    qsort(s, sSize, sizeof(int), cmp);\n    int m = gSize, n = sSize;\n    int count = 0;\n    for (int i = 0, j = 0; i < m && j < n; i++, j++) {\n        while (j < n && g[i] > s[j]) {\n            j++;\n        }\n        if (j < n) {\n            count++;\n        }\n    }\n    return count;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\log m + n \\log n)$，其中 $m$ 和 $n$ 分别是数组 $g$ 和 $s$ 的长度。对两个数组排序的时间复杂度是 $O(m \\log m + n \\log n)$，遍历数组的时间复杂度是 $O(m+n)$，因此总时间复杂度是 $O(m \\log m + n \\log n)$。\n\n- 空间复杂度：$O(\\log m + \\log n)$，其中 $m$ 和 $n$ 分别是数组 $g$ 和 $s$ 的长度。空间复杂度主要是排序的额外空间开销。"
}