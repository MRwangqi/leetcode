{
	"titleSlug": "insertion-sort-list",
	"slug": "dui-lian-biao-jin-xing-cha-ru-pai-xu-by-leetcode-s",
	"url": "https://leetcode-cn.com/problems/insertion-sort-list/solution/dui-lian-biao-jin-xing-cha-ru-pai-xu-by-leetcode-s/",
	"content": "#### 方法一：从前往后找插入点\n\n插入排序的基本思想是，维护一个有序序列，初始时有序序列只有一个元素，每次将一个新的元素插入到有序序列中，将有序序列的长度增加 $1$，直到全部元素都加入到有序序列中。\n\n如果是数组的插入排序，则数组的前面部分是有序序列，每次找到有序序列后面的第一个元素（待插入元素）的插入位置，将有序序列中的插入位置后面的元素都往后移动一位，然后将待插入元素置于插入位置。\n\n对于链表而言，插入元素时只要更新相邻节点的指针即可，不需要像数组一样将插入位置后面的元素往后移动，因此插入操作的时间复杂度是 $O(1)$，但是找到插入位置需要遍历链表中的节点，时间复杂度是 $O(n)$，因此链表插入排序的总时间复杂度仍然是 $O(n^2)$，其中 $n$ 是链表的长度。\n\n对于单向链表而言，只有指向后一个节点的指针，因此需要从链表的头节点开始往后遍历链表中的节点，寻找插入位置。\n\n对链表进行插入排序的具体过程如下。\n\n1. 首先判断给定的链表是否为空，若为空，则不需要进行排序，直接返回。\n\n2. 创建哑节点 `dummyHead`，令 `dummyHead.next = head`。引入哑节点是为了便于在 `head` 节点之前插入节点。\n\n3. 维护 `lastSorted` 为链表的已排序部分的最后一个节点，初始时 `lastSorted = head`。\n\n4. 维护 `curr` 为待插入的元素，初始时 `curr = head.next`。\n\n5. 比较 `lastSorted` 和 `curr` 的节点值。\n\n   - 若 `lastSorted.val <= curr.val`，说明 `curr` 应该位于 `lastSorted` 之后，将 `lastSorted` 后移一位，`curr` 变成新的 `lastSorted`。\n\n   - 否则，从链表的头节点开始往后遍历链表中的节点，寻找插入 `curr` 的位置。令 `prev` 为插入 `curr` 的位置的前一个节点，进行如下操作，完成对 `curr` 的插入：\n\n    ```txt\n    lastSorted.next = curr.next\n    curr.next = prev.next\n    prev.next = curr\n    ```\n    <br/>\n\n6. 令 `curr = lastSorted.next`，此时 `curr` 为下一个待插入的元素。\n\n7. 重复第 5 步和第 6 步，直到 `curr` 变成空，排序结束。\n\n8. 返回 `dummyHead.next`，为排序后的链表的头节点。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/147/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/147/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/147/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/147/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/147/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/147/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/147/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/147/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/147/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/147/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/147/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/147/12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/147/13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/147/14.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode insertionSortList(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        ListNode dummyHead = new ListNode(0);\n        dummyHead.next = head;\n        ListNode lastSorted = head, curr = head.next;\n        while (curr != null) {\n            if (lastSorted.val <= curr.val) {\n                lastSorted = lastSorted.next;\n            } else {\n                ListNode prev = dummyHead;\n                while (prev.next.val <= curr.val) {\n                    prev = prev.next;\n                }\n                lastSorted.next = curr.next;\n                curr.next = prev.next;\n                prev.next = curr;\n            }\n            curr = lastSorted.next;\n        }\n        return dummyHead.next;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar insertionSortList = function(head) {\n    if (head === null) {\n        return head;\n    }\n    const dummyHead = new ListNode(0);\n    dummyHead.next = head;\n    let lastSorted = head, curr = head.next;\n    while (curr !== null) {\n        if (lastSorted.val <= curr.val) {\n            lastSorted = lastSorted.next;\n        } else {\n            let prev = dummyHead;\n            while (prev.next.val <= curr.val) {\n                prev = prev.next;\n            }\n            lastSorted.next = curr.next;\n            curr.next = prev.next;\n            prev.next = curr;\n        }\n        curr = lastSorted.next;\n    }\n    return dummyHead.next;\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* insertionSortList(ListNode* head) {\n        if (head == nullptr) {\n            return head;\n        }\n        ListNode* dummyHead = new ListNode(0);\n        dummyHead->next = head;\n        ListNode* lastSorted = head;\n        ListNode* curr = head->next;\n        while (curr != nullptr) {\n            if (lastSorted->val <= curr->val) {\n                lastSorted = lastSorted->next;\n            } else {\n                ListNode *prev = dummyHead;\n                while (prev->next->val <= curr->val) {\n                    prev = prev->next;\n                }\n                lastSorted->next = curr->next;\n                curr->next = prev->next;\n                prev->next = curr;\n            }\n            curr = lastSorted->next;\n        }\n        return dummyHead->next;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def insertionSortList(self, head: ListNode) -> ListNode:\n        if not head:\n            return head\n        \n        dummyHead = ListNode(0)\n        dummyHead.next = head\n        lastSorted = head\n        curr = head.next\n\n        while curr:\n            if lastSorted.val <= curr.val:\n                lastSorted = lastSorted.next\n            else:\n                prev = dummyHead\n                while prev.next.val <= curr.val:\n                    prev = prev.next\n                lastSorted.next = curr.next\n                curr.next = prev.next\n                prev.next = curr\n            curr = lastSorted.next\n        \n        return dummyHead.next\n```\n\n```Golang [sol1-Golang]\nfunc insertionSortList(head *ListNode) *ListNode {\n    if head == nil {\n        return nil\n    }\n    dummyHead := &ListNode{Next: head}\n    lastSorted, curr := head, head.Next\n    for curr != nil {\n        if lastSorted.Val <= curr.Val {\n            lastSorted = lastSorted.Next\n        } else {\n            prev := dummyHead\n            for prev.Next.Val <= curr.Val {\n                prev = prev.Next\n            }\n            lastSorted.Next = curr.Next\n            curr.Next = prev.Next\n            prev.Next = curr\n        }\n        curr = lastSorted.Next\n    }\n    return dummyHead.Next\n}\n```\n\n```C [sol1-C]\nstruct ListNode *insertionSortList(struct ListNode *head) {\n    if (head == NULL) {\n        return head;\n    }\n    struct ListNode *dummyHead = malloc(sizeof(struct ListNode));\n    dummyHead->val = 0;\n    dummyHead->next = head;\n    struct ListNode *lastSorted = head;\n    struct ListNode *curr = head->next;\n    while (curr != NULL) {\n        if (lastSorted->val <= curr->val) {\n            lastSorted = lastSorted->next;\n        } else {\n            struct ListNode *prev = dummyHead;\n            while (prev->next->val <= curr->val) {\n                prev = prev->next;\n            }\n            lastSorted->next = curr->next;\n            curr->next = prev->next;\n            prev->next = curr;\n        }\n        curr = lastSorted->next;\n    }\n    return dummyHead->next;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是链表的长度。\n\n- 空间复杂度：$O(1)$。"
}