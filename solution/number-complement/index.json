{
	"titleSlug": "number-complement",
	"slug": "shu-zi-de-bu-shu-by-leetcode-solution-xtn8",
	"url": "https://leetcode-cn.com/problems/number-complement/solution/shu-zi-de-bu-shu-by-leetcode-solution-xtn8/",
	"content": "#### 方法一：位运算\n\n**思路与算法**\n\n根据题目的要求，我们需要将 $\\textit{num}$ 二进制表示的每一位取反。然而在计算机存储整数时，并不会仅仅存储有效的二进制位。例如当 $\\textit{num} = 5$ 时，它的二进制表示为 $(101)_2$，而使用 $32$ 位整数存储时的结果为：\n\n$$\n(0000~0000~0000~0000~0000~0000~0000~0101)_2\n$$\n\n因此我们需要首先找到 $\\textit{num}$ 二进制表示最高位的那个 $1$，再将这个 $1$ 以及更低的位进行取反。\n\n如果 $\\textit{num}$ 二进制表示最高位的 $1$ 是第 $i~(0 \\leq i \\leq 30)$ 位，那么一定有：\n\n$$\n2^i \\leq \\textit{num} < 2^{i+1}\n$$\n\n因此我们可以使用一次遍历，在 $[0, 30]$ 中找出 $i$ 的值。\n\n在这之后，我们就可以遍历 $\\textit{num}$ 的第 $0 \\sim i$ 个二进制位，将它们依次进行取反。我们也可以用更高效的方式，构造掩码 $\\textit{mask} = 2^{i+1} - 1$，它是一个 $i+1$ 位的二进制数，并且每一位都是 $1$。我们将 $\\textit{num}$ 与 $\\textit{mask}$ 进行异或运算，即可得到答案。\n\n**细节**\n\n当 $i=30$ 时，构造 $\\textit{mask} = 2^{i+1} - 1$ 的过程中需要保证不会产生整数溢出。下面部分语言的代码中对该情况进行了特殊判断。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findComplement(int num) {\n        int highbit = 0;\n        for (int i = 1; i <= 30; ++i) {\n            if (num >= (1 << i)) {\n                highbit = i;\n            }\n            else {\n                break;\n            }            \n        }\n        int mask = (highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1);\n        return num ^ mask;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findComplement(int num) {\n        int highbit = 0;\n        for (int i = 1; i <= 30; ++i) {\n            if (num >= 1 << i) {\n                highbit = i;\n            } else {\n                break;\n            }            \n        }\n        int mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;\n        return num ^ mask;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int FindComplement(int num) {\n        int highbit = 0;\n        for (int i = 1; i <= 30; ++i) {\n            if (num >= 1 << i) {\n                highbit = i;\n            } else {\n                break;\n            }            \n        }\n        int mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;\n        return num ^ mask;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findComplement(self, num: int) -> int:\n        highbit = 0\n        for i in range(1, 30 + 1):\n            if num >= (1 << i):\n                highbit = i\n            else:\n                break\n        \n        mask = (1 << (highbit + 1)) - 1\n        return num ^ mask\n```\n\n```JavaScript [sol1-JavaScript]\nvar findComplement = function(num) {\n    let highbit = 0;\n    for (let i = 1; i <= 30; ++i) {\n        if (num >= 1 << i) {\n            highbit = i;\n        } else {\n            break;\n        }            \n    }\n    const mask = highbit == 30 ? 0x7fffffff : (1 << (highbit + 1)) - 1;\n    return num ^ mask;\n};\n```\n\n```go [sol1-Golang]\nfunc findComplement(num int) int {\n    highBit := 0\n    for i := 1; i <= 30; i++ {\n        if num < 1<<i {\n            break\n        }\n        highBit = i\n    }\n    mask := 1<<(highBit+1) - 1\n    return num ^ mask\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log \\textit{num})$。找出 $\\textit{num}$ 二进制表示最高位的 $1$ 需要的时间为 $O(\\log \\textit{num})$。\n\n- 空间复杂度：$O(1)$。"
}