{
	"titleSlug": "Y1VbOX",
	"slug": "ha-xi-biao-dong-tai-gui-hua-by-jsjohnson-jork",
	"url": "https://leetcode-cn.com/problems/Y1VbOX/solution/ha-xi-biao-dong-tai-gui-hua-by-jsjohnson-jork/",
	"content": "### 解题思路\n哈希表 + 动态规划 + 太难了，越是现实的问题，越难，一个超级简单的红绿灯模拟就难得如此\n\n### 代码\n\n```python3\nable = set()\ndef test(a, b, c, d, A, B, C, D): #eswn\n    if a == C and (b == D or d == A or d == B or c == D):\n        return False\n    if a == B and (b == C or b == D or d == A or c == A):\n        return False\n    return True\n\nfor e in ' WNS':\n    for s in ' EWN':\n        for w in ' ESN':\n            for n in ' ESW':\n                eswn = e + s + w + n\n                t = eswn.replace(' ', '')\n                if not t:\n                    continue\n                if len(set(t)) != len(t):\n                    continue\n                if not test(e, s, w, n, *'ESWN'):\n                    continue\n                if not test(s, w, n, e, *'SWNE'):\n                    continue\n                if not test(w, n, e, s, *'WNES'):\n                    continue\n                if not test(n, e, s, w, *'NESW'):\n                    continue\n                able.add(eswn)\n\nclass Solution:\n    def trafficCommand(self, directions: List[str]) -> int:\n        [e, s, w, n] = list(map(len, directions))\n        [ce, cs, cw, cn] = directions\n        f = [[[[100]*(n+1) for _ in range(w+1)] for _ in range(s+1)] for _ in range(e+1)]\n        ddd = {}\n        f[0][0][0][0] = 0\n        for e1 in range(e+1):\n            for s1 in range(s+1):\n                for w1 in range(w+1):\n                    for n1 in range(n+1):\n                        if e1 + s1 + w1 + n1 == 0:\n                            continue\n                        x = 100\n                        for mask in range(1, 16):\n                            v = ce[e1-1] if mask & 1 and e1 else ' '\n                            v += cs[s1-1] if mask & 2 and s1 else ' '\n                            v += cw[w1-1] if mask & 4 and w1 else ' '\n                            v += cn [n1-1] if mask & 8 and n1 else ' '\n                            if v in able:\n                                x = min(x, f[e1-(v[0]!=' ')][s1-(v[1]!=' ')][w1-(v[2]!=' ')][n1-(v[3]!=' ')] + 1)\n                        f[e1][s1][w1][n1] = x\n        return f[e][s][w][n]\n```"
}