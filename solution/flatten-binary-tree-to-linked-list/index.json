{
	"titleSlug": "flatten-binary-tree-to-linked-list",
	"slug": "er-cha-shu-zhan-kai-wei-lian-biao-by-leetcode-solu",
	"url": "https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/solution/er-cha-shu-zhan-kai-wei-lian-biao-by-leetcode-solu/",
	"content": "#### 方法一：前序遍历\n\n将二叉树展开为单链表之后，单链表中的节点顺序即为二叉树的前序遍历访问各节点的顺序。因此，可以对二叉树进行前序遍历，获得各节点被访问到的顺序。由于将二叉树展开为链表之后会破坏二叉树的结构，因此在前序遍历结束之后更新每个节点的左右子节点的信息，将二叉树展开为单链表。\n\n对二叉树的前序遍历不熟悉的读者请自行练习「[144. 二叉树的前序遍历](https://leetcode-cn.com/problems/binary-tree-preorder-traversal/)」。\n\n前序遍历可以通过递归或者迭代的方式实现。以下代码通过递归实现前序遍历。\n\n```Java [sol0-Java]\nclass Solution {\n    public void flatten(TreeNode root) {\n        List<TreeNode> list = new ArrayList<TreeNode>();\n        preorderTraversal(root, list);\n        int size = list.size();\n        for (int i = 1; i < size; i++) {\n            TreeNode prev = list.get(i - 1), curr = list.get(i);\n            prev.left = null;\n            prev.right = curr;\n        }\n    }\n\n    public void preorderTraversal(TreeNode root, List<TreeNode> list) {\n        if (root != null) {\n            list.add(root);\n            preorderTraversal(root.left, list);\n            preorderTraversal(root.right, list);\n        }\n    }\n}\n```\n\n```cpp [sol0-C++]\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        vector<TreeNode*> l;\n        preorderTraversal(root, l);\n        int n = l.size();\n        for (int i = 1; i < n; i++) {\n            TreeNode *prev = l.at(i - 1), *curr = l.at(i);\n            prev->left = nullptr;\n            prev->right = curr;\n        }\n    }\n\n    void preorderTraversal(TreeNode* root, vector<TreeNode*> &l) {\n        if (root != NULL) {\n            l.push_back(root);\n            preorderTraversal(root->left, l);\n            preorderTraversal(root->right, l);\n        }\n    }\n};\n```\n\n```golang [sol0-Golang]\nfunc flatten(root *TreeNode)  {\n    list := preorderTraversal(root)\n    for i := 1; i < len(list); i++ {\n        prev, curr := list[i-1], list[i]\n        prev.Left, prev.Right = nil, curr\n    }\n}\n\nfunc preorderTraversal(root *TreeNode) []*TreeNode {\n    list := []*TreeNode{}\n    if root != nil {\n        list = append(list, root)\n        list = append(list, preorderTraversal(root.Left)...)\n        list = append(list, preorderTraversal(root.Right)...)\n    }\n    return list\n}\n```\n\n```Python [sol0-Python3]\nclass Solution:\n    def flatten(self, root: TreeNode) -> None:\n        preorderList = list()\n\n        def preorderTraversal(root: TreeNode):\n            if root:\n                preorderList.append(root)\n                preorderTraversal(root.left)\n                preorderTraversal(root.right)\n        \n        preorderTraversal(root)\n        size = len(preorderList)\n        for i in range(1, size):\n            prev, curr = preorderList[i - 1], preorderList[i]\n            prev.left = None\n            prev.right = curr\n```\n\n```JavaScript [sol0-JavaScript]\nvar flatten = function(root) {\n    const list = [];\n    preorderTraversal(root, list);\n    const size = list.length;\n    for (let i = 1; i < size; i++) {\n        const prev = list[i - 1], curr = list[i];\n        prev.left = null;\n        prev.right = curr;\n    }\n};\n\nconst preorderTraversal = (root, list) => {\n    if (root != null) {\n        list.push(root);\n        preorderTraversal(root.left, list);\n        preorderTraversal(root.right, list);\n    }\n}\n```\n\n```C [sol0-C]\nint num;\n\nvoid flatten(struct TreeNode* root) {\n    num = 0;\n    struct TreeNode** l = (struct TreeNode**)malloc(0);\n    preorderTraversal(root, &l);\n    for (int i = 1; i < num; i++) {\n        struct TreeNode *prev = l[i - 1], *curr = l[i];\n        prev->left = NULL;\n        prev->right = curr;\n    }\n    free(l);\n}\n\nvoid preorderTraversal(struct TreeNode* root, struct TreeNode*** l) {\n    if (root != NULL) {\n        num++;\n        (*l) = (struct TreeNode**)realloc((*l), sizeof(struct TreeNode*) * num);\n        (*l)[num - 1] = root;\n        preorderTraversal(root->left, l);\n        preorderTraversal(root->right, l);\n    }\n}\n```\n\n以下代码通过迭代实现前序遍历。\n\n```Java [sol1-Java]\nclass Solution {\n    public void flatten(TreeNode root) {\n        List<TreeNode> list = new ArrayList<TreeNode>();\n        Deque<TreeNode> stack = new LinkedList<TreeNode>();\n        TreeNode node = root;\n        while (node != null || !stack.isEmpty()) {\n            while (node != null) {\n                list.add(node);\n                stack.push(node);\n                node = node.left;\n            }\n            node = stack.pop();\n            node = node.right;\n        }\n        int size = list.size();\n        for (int i = 1; i < size; i++) {\n            TreeNode prev = list.get(i - 1), curr = list.get(i);\n            prev.left = null;\n            prev.right = curr;\n        }\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        auto v = vector<TreeNode*>();\n        auto stk = stack<TreeNode*>();\n        TreeNode *node = root;\n        while (node != nullptr || !stk.empty()) {\n            while (node != nullptr) {\n                v.push_back(node);\n                stk.push(node);\n                node = node->left;\n            }\n            node = stk.top(); stk.pop();\n            node = node->right;\n        }\n        int size = v.size();\n        for (int i = 1; i < size; i++) {\n            auto prev = v.at(i - 1), curr = v.at(i);\n            prev->left = nullptr;\n            prev->right = curr;\n        }\n    }\n};\n```\n\n```golang [sol1-Golang]\nfunc flatten(root *TreeNode)  {\n    list := []*TreeNode{}\n    stack := []*TreeNode{}\n    node := root\n    for node != nil || len(stack) > 0 {\n        for node != nil {\n            list = append(list, node)\n            stack = append(stack, node)\n            node = node.Left\n        }\n        node = stack[len(stack)-1]\n        node = node.Right\n        stack = stack[:len(stack)-1]\n    }\n\n    for i := 1; i < len(list); i++ {\n        prev, curr := list[i-1], list[i]\n        prev.Left, prev.Right = nil, curr\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def flatten(self, root: TreeNode) -> None:\n        preorderList = list()\n        stack = list()\n        node = root\n\n        while node or stack:\n            while node:\n                preorderList.append(node)\n                stack.append(node)\n                node = node.left\n            node = stack.pop()\n            node = node.right\n        \n        size = len(preorderList)\n        for i in range(1, size):\n            prev, curr = preorderList[i - 1], preorderList[i]\n            prev.left = None\n            prev.right = curr\n```\n\n```JavaScript [sol1-JavaScript]\nvar flatten = function(root) {\n    const list = [];\n    const stack = [];\n    let node = root;\n    while (node !== null || stack.length) {\n        while (node !== null) {\n            list.push(node);\n            stack.push(node);\n            node = node.left;\n        }\n        node = stack.pop();\n        node = node.right;\n    }\n    const size = list.length;\n    for (let i = 1; i < size; i++) {\n        const prev = list[i - 1], curr = list[i];\n        prev.left = null;\n        prev.right = curr;\n    }\n};\n```\n\n```C [sol1-C]\nvoid flatten(struct TreeNode* root) {\n    struct TreeNode** stk = (struct TreeNode**)malloc(0);\n    int stk_top = 0;\n    struct TreeNode** vec = (struct TreeNode**)malloc(0);\n    int vec_len = 0;\n    struct TreeNode* node = root;\n    while (node != NULL || stk_top != 0) {\n        while (node != NULL) {\n            vec_len++;\n            vec = (struct TreeNode**)realloc(vec, sizeof(struct TreeNode*) * vec_len);\n            vec[vec_len - 1] = node;\n            stk_top++;\n            stk = (struct TreeNode**)realloc(stk, sizeof(struct TreeNode*) * stk_top);\n            stk[stk_top - 1] = node;\n            node = node->left;\n        }\n        node = stk[--stk_top];\n        node = node->right;\n    }\n    for (int i = 1; i < vec_len; i++) {\n        struct TreeNode *prev = vec[i - 1], *curr = vec[i];\n        prev->left = NULL;\n        prev->right = curr;\n    }\n    free(stk);\n    free(vec);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。前序遍历的时间复杂度是 $O(n)$，前序遍历之后，需要对每个节点更新左右子节点的信息，时间复杂度也是 $O(n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。空间复杂度取决于栈（递归调用栈或者迭代中显性使用的栈）和存储前序遍历结果的列表的大小，栈内的元素个数不会超过 $n$，前序遍历列表中的元素个数是 $n$。\n\n#### 方法二：前序遍历和展开同步进行\n\n使用方法一的前序遍历，由于将节点展开之后会破坏二叉树的结构而丢失子节点的信息，因此前序遍历和展开为单链表分成了两步。能不能在不丢失子节点的信息的情况下，将前序遍历和展开为单链表同时进行？\n\n之所以会在破坏二叉树的结构之后丢失子节点的信息，是因为在对左子树进行遍历时，没有存储右子节点的信息，在遍历完左子树之后才获得右子节点的信息。只要对前序遍历进行修改，在遍历左子树之前就获得左右子节点的信息，并存入栈内，子节点的信息就不会丢失，就可以将前序遍历和展开为单链表同时进行。\n\n该做法不适用于递归实现的前序遍历，只适用于迭代实现的前序遍历。修改后的前序遍历的具体做法是，每次从栈内弹出一个节点作为当前访问的节点，获得该节点的子节点，如果子节点不为空，则依次将右子节点和左子节点压入栈内（注意入栈顺序）。\n\n展开为单链表的做法是，维护上一个访问的节点 `prev`，每次访问一个节点时，令当前访问的节点为 `curr`，将 `prev` 的左子节点设为 `null` 以及将 `prev` 的右子节点设为 `curr`，然后将 `curr` 赋值给 `prev`，进入下一个节点的访问，直到遍历结束。需要注意的是，初始时 `prev` 为 `null`，只有在 `prev` 不为 `null` 时才能对 `prev` 的左右子节点进行更新。\n\n```Java [sol2-Java]\nclass Solution {\n    public void flatten(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        Deque<TreeNode> stack = new LinkedList<TreeNode>();\n        stack.push(root);\n        TreeNode prev = null;\n        while (!stack.isEmpty()) {\n            TreeNode curr = stack.pop();\n            if (prev != null) {\n                prev.left = null;\n                prev.right = curr;\n            }\n            TreeNode left = curr.left, right = curr.right;\n            if (right != null) {\n                stack.push(right);\n            }\n            if (left != null) {\n                stack.push(left);\n            }\n            prev = curr;\n        }\n    }\n}\n```\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        if (root == nullptr) {\n            return;\n        }\n        auto stk = stack<TreeNode*>();\n        stk.push(root);\n        TreeNode *prev = nullptr;\n        while (!stk.empty()) {\n            TreeNode *curr = stk.top(); stk.pop();\n            if (prev != nullptr) {\n                prev->left = nullptr;\n                prev->right = curr;\n            }\n            TreeNode *left = curr->left, *right = curr->right;\n            if (right != nullptr) {\n                stk.push(right);\n            }\n            if (left != nullptr) {\n                stk.push(left);\n            }\n            prev = curr;\n        }\n    }\n};\n```\n\n```golang [sol2-Golang]\nfunc flatten(root *TreeNode)  {\n    if root == nil {\n        return\n    }\n    stack := []*TreeNode{root}\n    var prev *TreeNode\n    for len(stack) > 0 {\n        curr := stack[len(stack)-1]\n        stack = stack[:len(stack)-1]\n        if prev != nil {\n            prev.Left, prev.Right = nil, curr\n        }\n        left, right := curr.Left, curr.Right\n        if right != nil {\n            stack = append(stack, right)\n        }\n        if left != nil {\n            stack = append(stack, left)\n        }\n        prev = curr\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def flatten(self, root: TreeNode) -> None:\n        if not root:\n            return\n        \n        stack = [root]\n        prev = None\n        \n        while stack:\n            curr = stack.pop()\n            if prev:\n                prev.left = None\n                prev.right = curr\n            left, right = curr.left, curr.right\n            if right:\n                stack.append(right)\n            if left:\n                stack.append(left)\n            prev = curr\n```\n\n```JavaScript [sol2-JavaScript]\nvar flatten = function(root) {\n    if (root === null) {\n        return;\n    }\n    const stack = [];\n    stack.push(root);\n    let prev = null;\n    while (stack.length) {\n        const curr = stack.pop();\n        if (prev !== null) {\n            prev.left = null;\n            prev.right = curr;\n        }\n        const left = curr.left, right = curr.right;\n        if (right !== null) {\n            stack.push(right);\n        }\n        if (left !== null) {\n            stack.push(left);\n        }\n        prev = curr;\n    }\n};\n```\n\n```C [sol2-C]\nvoid flatten(struct TreeNode *root) {\n    if (root == NULL) {\n        return;\n    }\n    struct TreeNode **stk = (struct TreeNode **)malloc(sizeof(struct TreeNode *));\n    int stk_top = 1;\n    stk[0] = root;\n    struct TreeNode *prev = NULL;\n    while (stk_top != 0) {\n        struct TreeNode *curr = stk[--stk_top];\n        if (prev != NULL) {\n            prev->left = NULL;\n            prev->right = curr;\n        }\n        struct TreeNode *left = curr->left, *right = curr->right;\n        if (right != NULL) {\n            stk_top++;\n            stk = (struct TreeNode **)realloc(stk, sizeof(struct TreeNode *) * stk_top);\n            stk[stk_top - 1] = right;\n        }\n        if (left != NULL) {\n            stk_top++;\n            stk = (struct TreeNode **)realloc(stk, sizeof(struct TreeNode *) * stk_top);\n            stk[stk_top - 1] = left;\n        }\n        prev = curr;\n    }\n    free(stk);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。前序遍历的时间复杂度是 $O(n)$，前序遍历的同时对每个节点更新左右子节点的信息，更新子节点信息的时间复杂度是 $O(1)$，因此总时间复杂度是 $O(n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。空间复杂度取决于栈的大小，栈内的元素个数不会超过 $n$。\n\n#### 方法三：寻找前驱节点\n\n前两种方法都借助前序遍历，前序遍历过程中需要使用栈存储节点。有没有空间复杂度是 $O(1)$ 的做法呢？\n\n注意到前序遍历访问各节点的顺序是根节点、左子树、右子树。如果一个节点的左子节点为空，则该节点不需要进行展开操作。如果一个节点的左子节点不为空，则该节点的左子树中的最后一个节点被访问之后，该节点的右子节点被访问。该节点的左子树中最后一个被访问的节点是左子树中的最右边的节点，也是该节点的前驱节点。因此，问题转化成寻找当前节点的前驱节点。\n\n具体做法是，对于当前节点，如果其左子节点不为空，则在其左子树中找到最右边的节点，作为前驱节点，将当前节点的右子节点赋给前驱节点的右子节点，然后将当前节点的左子节点赋给当前节点的右子节点，并将当前节点的左子节点设为空。对当前节点处理结束后，继续处理链表中的下一个节点，直到所有节点都处理结束。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/114/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/114/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/114/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/114/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/114/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/114/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/114/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/114/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/114/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/114/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/114/11.png),![fig12](https://assets.leetcode-cn.com/solution-static/114/12.png),![fig13](https://assets.leetcode-cn.com/solution-static/114/13.png),![fig14](https://assets.leetcode-cn.com/solution-static/114/14.png),![fig15](https://assets.leetcode-cn.com/solution-static/114/15.png),![fig16](https://assets.leetcode-cn.com/solution-static/114/16.png),![fig17](https://assets.leetcode-cn.com/solution-static/114/17.png),![fig18](https://assets.leetcode-cn.com/solution-static/114/18.png)>\n\n```Java [sol3-Java]\nclass Solution {\n    public void flatten(TreeNode root) {\n        TreeNode curr = root;\n        while (curr != null) {\n            if (curr.left != null) {\n                TreeNode next = curr.left;\n                TreeNode predecessor = next;\n                while (predecessor.right != null) {\n                    predecessor = predecessor.right;\n                }\n                predecessor.right = curr.right;\n                curr.left = null;\n                curr.right = next;\n            }\n            curr = curr.right;\n        }\n    }\n}\n```\n\n```cpp [sol3-C++]\nclass Solution {\npublic:\n    void flatten(TreeNode* root) {\n        TreeNode *curr = root;\n        while (curr != nullptr) {\n            if (curr->left != nullptr) {\n                auto next = curr->left;\n                auto predecessor = next;\n                while (predecessor->right != nullptr) {\n                    predecessor = predecessor->right;\n                }\n                predecessor->right = curr->right;\n                curr->left = nullptr;\n                curr->right = next;\n            }\n            curr = curr->right;\n        }\n    }\n};\n```\n\n```golang [sol3-Golang]\nfunc flatten(root *TreeNode)  {\n    curr := root\n    for curr != nil {\n        if curr.Left != nil {\n            next := curr.Left\n            predecessor := next\n            for predecessor.Right != nil {\n                predecessor = predecessor.Right\n            }\n            predecessor.Right = curr.Right\n            curr.Left, curr.Right = nil, next\n        }\n        curr = curr.Right\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def flatten(self, root: TreeNode) -> None:\n        curr = root\n        while curr:\n            if curr.left:\n                predecessor = nxt = curr.left\n                while predecessor.right:\n                    predecessor = predecessor.right\n                predecessor.right = curr.right\n                curr.left = None\n                curr.right = nxt\n            curr = curr.right\n```\n\n```JavaScript [sol3-JavaScript]\nvar flatten = function(root) {\n    let curr = root;\n    while (curr !== null) {\n        if (curr.left !== null) {\n            const next = curr.left;\n            let predecessor = next;\n            while (predecessor.right !== null) {\n                predecessor = predecessor.right;\n            }\n            predecessor.right = curr.right;\n            curr.left = null;\n            curr.right = next;\n        }\n        curr = curr.right;\n    }\n};\n```\n\n```C [sol3-C]\nvoid flatten(struct TreeNode* root) {\n    struct TreeNode* curr = root;\n    while (curr != NULL) {\n        if (curr->left != NULL) {\n            struct TreeNode* next = curr->left;\n            struct TreeNode* predecessor = next;\n            while (predecessor->right != NULL) {\n                predecessor = predecessor->right;\n            }\n            predecessor->right = curr->right;\n            curr->left = NULL;\n            curr->right = next;\n        }\n        curr = curr->right;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。展开为单链表的过程中，需要对每个节点访问一次，在寻找前驱节点的过程中，每个节点最多被额外访问一次。\n\n- 空间复杂度：$O(1)$。"
}