{
	"titleSlug": "subrectangle-queries",
	"slug": "bu-bao-li-geng-xin-ju-zhen-yuan-su-de-jie-fa-by-li",
	"url": "https://leetcode-cn.com/problems/subrectangle-queries/solution/bu-bao-li-geng-xin-ju-zhen-yuan-su-de-jie-fa-by-li/",
	"content": "这道题暴力模拟就可以通过，不多说了。但是，这个问题可以不暴力更新矩阵的内容。\n\n我们可以设置一个``history``的数组，记录每次调用``updateSubrectangle``的信息。这样，``updateSubrectangle``的复杂度是 O(1) 的。\n\n相应的，在 ``getValue`` 的过程中，我们只需要**倒序**查找我们记录的 ``history``，如果发现我们要查找的 ``(row, col)`` 包含在某一次历史更新的位置中，直接返回这个历史更新值就好了。否则的，历史更新没有动过这个位置，返回原始矩阵中这个位置的值。\n\n我的参考代码如下（C++）：\n\n```\nclass SubrectangleQueries {\n\nprivate:\n    vector<vector<int>> rectangle;\n    vector<vector<int>> history;\n\npublic:\n    SubrectangleQueries(vector<vector<int>>& rectangle) : rectangle(rectangle) {}\n\n    void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {\n        history.push_back({row1, col1, row2, col2, newValue});\n    }\n\n    int getValue(int row, int col) {\n\n        for(int i = history.size() - 1; i >= 0; i --)\n            if(history[i][0] <= row && row <= history[i][2] &&\n               history[i][1] <= col && col <= history[i][3])\n                return history[i][4];\n        return rectangle[row][col];\n    }\n};\n```\n\n对于这个思路，``update`` 是 O(1) 的，而 ``get`` 是 O(k) 的，k 是历史有过多少次更新。根据题意， k 最多为 500。\n\n这是比暴力更新矩阵中的元素要快的。因为暴力更新矩阵中的元素，时间复杂度是 O(r * c) 的。根据题意，在这个问题中，1 <= r, c <= 100，r * c 最大可以达到 10000。\n\n实际上，这个思路和矩阵的大小没有关系，只和调用更新操作的次数有关。所以，即使矩阵更大，也可以应付。\n\n当然，对于小矩阵，超多调用的情况，这个思路就有劣势了。所以可以根据题目中的数据限制条件做选择：）\n\n---\n\n觉得有帮助请点赞哇！\n\n大家加油！：）\n\n\n\n\n\n"
}