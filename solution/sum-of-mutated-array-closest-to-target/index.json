{
	"titleSlug": "sum-of-mutated-array-closest-to-target",
	"slug": "bian-shu-zu-hou-zui-jie-jin-mu-biao-zhi-de-shu-zu-",
	"url": "https://leetcode-cn.com/problems/sum-of-mutated-array-closest-to-target/solution/bian-shu-zu-hou-zui-jie-jin-mu-biao-zhi-de-shu-zu-/",
	"content": "#### 方法一：枚举 + 二分查找\n\n**思路和算法**\n\n由于数组 `arr` 中每个元素值的范围是 $[1,10^5]$，在可以直接枚举的范围内，因此我们可以对所有可能作为 `value` 的值进行枚举。\n\n那么 `value` 值的上下界是多少呢？我们需要进行一些分析：\n\n- `value` 的下界为 `0`。这是因为当 `value = 0` 时，数组的和为 `0`。由于 `target` 是正整数，因此当 `value` 继续减小时，数组的和也会随之减小，且变为负数（这个和等于 `value * n`，其中 `n` 是数组 `arr` 的长度），并不会比 `value = 0` 时更接近 `target`。\n\n- `value` 的上界为数组 `arr` 中的最大值。这是因为当 `value >= arr` 时，数组中所有的元素都不变，因为它们均不大于 `value`。由于我们需要找到最接近 `target` 的最小 `value` 值，因此我们只需将数组 `arr` 中的最大值作为上界即可。\n\n当我们确定了 `value` 值的上下界之后，就可以进行枚举了。当枚举到 `value = x` 时，我们需要将数组 `arr` 中所有小于等于 `x` 的值保持不变，所有大于 `x` 的值变为 `x`。要实现这个操作，我们可以将数组 `arr` 先进行排序，随后进行二分查找，找出数组 `arr` 中最小的比 `x` 大的元素 `arr[i]`。此时数组的和变为\n\n$$arr[0] + ... + arr[i - 1] + x \\times (n - i)$$\n\n由于将数组 `arr` 中的等于 `x` 的值变为 `x` 并没有改变原来的值，因此上述操作可以改为：当枚举到 `value = x` 时，我们需要将数组 `arr` 中所有小于 `x` 的值保持不变，所有大于等于 `x` 的值变为 `x`。要实现这个操作，我们可以将数组 `arr` 先进行排序，随后进行二分查找，找出数组 `arr` 中最小的大于等于 `x` 的元素 `arr[i]`。此时数组的和变为\n\n$$arr[0] + ... + arr[i - 1] + x \\times (n - i)$$\n\n使用该操作是因为很多编程语言自带的二分查找只能返回目标值第一次出现的位置。在此鼓励读者自己实现返回目标值最后一次出现的位置的二分查找。\n\n为了加速求和操作，我们可以预处理出数组 `arr` 的前缀和，这样数组求和的时间复杂度即能降为 $O(1)$。我们将和与 `target` 进行比较，同时更新答案即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findBestValue(vector<int>& arr, int target) {\n        sort(arr.begin(), arr.end());\n        int n = arr.size();\n        vector<int> prefix(n + 1);\n        for (int i = 1; i <= n; ++i) {\n            prefix[i] = prefix[i - 1] + arr[i - 1];\n        }\n\n        int r = *max_element(arr.begin(), arr.end());\n        int ans = 0, diff = target;\n        for (int i = 1; i <= r; ++i) {\n            auto iter = lower_bound(arr.begin(), arr.end(), i);\n            int cur = prefix[iter - arr.begin()] + (arr.end() - iter) * i;\n            if (abs(cur - target) < diff) {\n                ans = i;\n                diff = abs(cur - target);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findBestValue(self, arr: List[int], target: int) -> int:\n        arr.sort()\n        n = len(arr)\n        prefix = [0]\n        for num in arr:\n            prefix.append(prefix[-1] + num)\n        \n        r, ans, diff = max(arr), 0, target\n        for i in range(1, r + 1):\n            it = bisect.bisect_left(arr, i)\n            cur = prefix[it] + (n - it) * i\n            if abs(cur - target) < diff:\n                ans, diff = i, abs(cur - target)\n        return ans\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findBestValue(int[] arr, int target) {\n        Arrays.sort(arr);\n        int n = arr.length;\n        int[] prefix = new int[n + 1];\n        for (int i = 1; i <= n; ++i) {\n            prefix[i] = prefix[i - 1] + arr[i - 1];\n        }\n        int r = arr[n - 1];\n        int ans = 0, diff = target;\n        for (int i = 1; i <= r; ++i) {\n            int index = Arrays.binarySearch(arr, i);\n            if (index < 0) {\n                index = -index - 1;\n            }\n            int cur = prefix[index] + (n - index) * i;\n            if (Math.abs(cur - target) < diff) {\n                ans = i;\n                diff = Math.abs(cur - target);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```golang [sol1-Golang]\nfunc findBestValue(arr []int, target int) int {\n    sort.Ints(arr)\n    n := len(arr)\n    prefix := make([]int, n + 1)\n    for i := 1; i <= n; i++ {\n        prefix[i] = prefix[i-1] + arr[i-1]\n    }\n    r := arr[n-1]\n    ans, diff := 0, target\n    for i := 1; i <= r; i++ {\n        index := sort.SearchInts(arr, i)\n        if index < 0 {\n            index = -index - 1\n        }\n        cur := prefix[index] + (n - index) * i\n        if abs(cur - target) < diff {\n            ans = i\n            diff = abs(cur - target)\n        }\n    }\n    return ans\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -1 * x\n    }\n    return x\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O((N + C)\\log N)$，其中 $N$ 是数组 `arr` 的长度，$C$ 是一个常数，为数组 `arr` 中的最大值，不会超过 $10^5$。排序需要的时间复杂度为 $O(N \\log N)$，二分查找的单次时间复杂度为 $O(\\log N)$，需要进行 $C$ 次。\n\n- 空间复杂度：$O(N)$。我们需要 $O(N)$ 的空间用来存储数组 `arr` 的前缀和，排序需要 $O(\\log N)$ 的栈空间，因此最后总空间复杂度为 $O(N)$。\n\n#### 方法二：双重二分查找\n\n**思路和算法**\n\n方法一的枚举策略建立在数组 `arr` 的元素范围不大的条件之上。如果数组 `arr` 中的元素范围是 $[1,10^9]$，那么我们将无法直接枚举，有没有更好的解决方法呢？\n\n我们首先考虑题目的一个简化版本：我们需要找到 `value`，使得数组的和最接近 `target` 且不大于 `target`。可以发现，在 $[0,\\max (arr)]$（即方法一中确定的上下界）的范围之内，随着 `value` 的增大，数组的和是严格单调递增的。这里「严格」的意思是，不存在两个不同的 `value` 值，它们对应的数组的和相等。这样一来，一定存在唯一的一个 `value` 值，使得数组的和最接近且不大于 `target`。并且由于严格单调递增的性质，我们可以通过二分查找的方法，找到这个 `value` 值，记为 `value_lower`。\n\n同样地，我们考虑题目的另一个简化版本：我们需要找到一个 `value`，使得数组的和最接近 `target` 且大于 `target`。我们也可以通过二分查找的方法，找到这个 `value` 值，记为 `value_upper`。\n\n显然 `value` 值就是 `value_lower` 和 `value_upper` 中的一个，我们只需要比较这两个值对应的数组的和与 `target` 的差，就能确定最终的答案。这样一来，我们通过两次二分查找，就可以找出 `value` 值，在每一次二分查找中，我们使用和方法一中相同的查找方法，快速地求出每个 `value` 值对应的数组的和。算法从整体上来看，是外层二分查找中嵌套了一个内层二分查找。\n\n那么这个方法还有进一步优化的余地吗？仔细思考一下 `value_lower` 与 `value_upper` 的定义，前者最接近且不大于 `target`，后者最接近且大于 `target`。由于数组的和随着 `value` 的增大是严格单调递增的，所以 `value_upper` 的值一定就是 `value_lower + 1`。因此我们只需要进行一次外层二分查找得到 `value_lower`，并直接通过 `value_lower + 1` 计算出 `value_upper` 的值就行了。这样我们就减少了一次外层二分查找，虽然时间复杂度没有变化，但降低了常数。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int check(const vector<int>& arr, int x) {\n        int ret = 0;\n        for (const int& num: arr) {\n            ret += (num >= x ? x : num);\n        }\n        return ret;\n    }\n\n    int findBestValue(vector<int>& arr, int target) {\n        sort(arr.begin(), arr.end());\n        int n = arr.size();\n        vector<int> prefix(n + 1);\n        for (int i = 1; i <= n; ++i) {\n            prefix[i] = prefix[i - 1] + arr[i - 1];\n        }\n\n        int l = 0, r = *max_element(arr.begin(), arr.end()), ans = -1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            auto iter = lower_bound(arr.begin(), arr.end(), mid);\n            int cur = prefix[iter - arr.begin()] + (arr.end() - iter) * mid;\n            if (cur <= target) {\n                ans = mid;\n                l = mid + 1;\n            }\n            else {\n                r = mid - 1;\n            }\n        }\n        int choose_small = check(arr, ans);\n        int choose_big = check(arr, ans + 1);\n        return abs(choose_small - target) <= abs(choose_big - target) ? ans : ans + 1;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def findBestValue(self, arr: List[int], target: int) -> int:\n        arr.sort()\n        n = len(arr)\n        prefix = [0]\n        for num in arr:\n            prefix.append(prefix[-1] + num)\n        \n        l, r, ans = 0, max(arr), -1\n        while l <= r:\n            mid = (l + r) // 2\n            it = bisect.bisect_left(arr, mid)\n            cur = prefix[it] + (n - it) * mid\n            if cur <= target:\n                ans = mid\n                l = mid + 1\n            else:\n                r = mid - 1\n\n        def check(x):\n            return sum(x if num >= x else num for num in arr)\n        \n        choose_small = check(ans)\n        choose_big = check(ans + 1)\n        return ans if abs(choose_small - target) <= abs(choose_big - target) else ans + 1\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int findBestValue(int[] arr, int target) {\n        Arrays.sort(arr);\n        int n = arr.length;\n        int[] prefix = new int[n + 1];\n        for (int i = 1; i <= n; ++i) {\n            prefix[i] = prefix[i - 1] + arr[i - 1];\n        }\n        int l = 0, r = arr[n - 1], ans = -1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            int index = Arrays.binarySearch(arr, mid);\n            if (index < 0) {\n                index = -index - 1;\n            }\n            int cur = prefix[index] + (n - index) * mid;\n            if (cur <= target) {\n                ans = mid;\n                l = mid + 1;\n            }\n            else {\n                r = mid - 1;\n            }\n        }\n        int chooseSmall = check(arr, ans);\n        int chooseBig = check(arr, ans + 1);\n        return Math.abs(chooseSmall - target) <= Math.abs(chooseBig - target) ? ans : ans + 1;\n    }\n\n    public int check(int[] arr, int x) {\n        int ret = 0;\n        for (int num : arr) {\n            ret += Math.min(num, x);\n        }\n        return ret;\n    }\n}\n```\n\n```golang [sol2-Golang]\nfunc findBestValue(arr []int, target int) int {\n    sort.Ints(arr)\n    n := len(arr)\n    prefix := make([]int, n + 1)\n    for i := 1; i <= n; i++ {\n        prefix[i] = prefix[i-1] + arr[i-1]\n    }\n    l, r, ans := 0, arr[n-1], -1\n    for l <= r {\n        mid := (l + r) / 2\n        index := sort.SearchInts(arr, mid)\n        if index < 0 {\n            index = -1 * index - 1\n        }\n        cur := prefix[index] + (n - index) * mid\n        if cur <= target {\n            ans = mid\n            l = mid + 1\n        } else {\n            r = mid - 1\n        }\n    }\n    chooseSmall := check(arr, ans)\n    chooseBig := check(arr, ans + 1)\n    if abs(chooseSmall - target) > abs(chooseBig - target) {\n        ans++\n    }\n    return ans\n}\n\nfunc check(arr []int, x int) int {\n    ret := 0\n    for _, num := range arr {\n        ret += min(num, x)\n    }\n    return ret\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -1 * x\n    }\n    return x\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\log N)$，其中 $N$ 是数组 `arr` 的长度。排序需要的时间复杂度为 $O(N \\log N)$，外层二分查找的时间复杂度为 $O(\\log C)$，内层二分查找的时间复杂度为 $O(\\log N)$，它们的乘积在数量级上小于 $O(N \\log N)$。\n\n- 空间复杂度：$O(N)$。分析同方法一。"
}