{
	"titleSlug": "zuma-game",
	"slug": "zu-ma-you-xi-by-leetcode-solution-lrp4",
	"url": "https://leetcode-cn.com/problems/zuma-game/solution/zu-ma-you-xi-by-leetcode-solution-lrp4/",
	"content": "#### 方法一：广度优先搜索\n\n**思路**\n\n根据题目要求，桌面上最多有 $16$ 个球，手中最多有 $5$ 个球；我们可以以任意顺序在 $5$ 个回合中使用手中的球；在每个回合中，我们可以选择将手中的球插入到桌面上任意两球之间或这一排球的任意一端。\n\n因为插入球的颜色和位置的选择是多样的，选择的影响也可能在多次消除操作之后才能体现出来，所以通过贪心方法根据当前情况很难做出全局最优的决策。实际每次插入一个新的小球时，并不保证插入后一定可以消除，因此我们需要搜索和遍历所有可能的插入方法，找到最小的插入次数。比如以下测试用例：\n- 桌面上的球为 $\\texttt{RRWWRRBBRR}$，手中的球为 $\\texttt{WB}$，如果我们按照贪心法每次插入进行消除就会出现无法完全消除。\n\n因此，我们使用广度优先搜索来解决这道题。即对状态空间进行枚举，通过穷尽所有的可能来找到最优解，并使用剪枝的方法来优化搜索过程。\n\n- 为什么使用广度优先搜索？\n\n我们不妨规定，每一种不同的桌面上球的情况和手中球的情况的组合都是一种不同的状态。对于相同的状态，其清空桌面上球所需的回合数总是相同的；而不同的插入球的顺序，也可能得到相同的状态。因此，如果使用深度优先搜索，则需要使用记忆化搜索，以避免重复计算相同的状态。\n\n因为只需要找出需要回合数最少的方案，因此使用广度优先搜索可以得到可以消除桌面上所有球的方案时就直接返回结果，而不需要继续遍历更多需要回合数更多的方案。而广度优先搜索虽然需要在队列中存储较多的状态，但是因为使用深度优先搜索也需要存储这些状态及这些状态对应的结果，因此使用广度优先搜索并不会需要更多的空间。\n\n**算法**\n\n在算法的实现中，我们可以通过以下方法来实现广度优先：\n\n使用队列来维护需要处理的状态队列，使用哈希集合存储已经访问过的状态。每一次取出队列中的队头状态，考虑其中所有可以插入球的方案，如果新方案还没有被访问过，则将新方案添加到队列的队尾。\n\n下面，我们考虑剪枝条件：\n\n- 第 $1$ 个剪枝条件：手中颜色相同的球每次选择时只需要考虑其中一个即可\n\n如果手中有颜色相同的球，那么插入这些球中的哪一个都没有区别。因此，手中颜色相同的球，我们只需要考虑其中一个即可。在具体的实现中，我们可以先将手中的球排序，如果当前遍历的球的颜色和上一个遍历的球的颜色相同，则跳过当前遍历的球。\n\n- 第 $2$ 个剪枝条件：只在连续相同颜色的球的开头位置或者结尾位置插入新的颜色相同的球\n\n如果桌面上有一个红球，那么在其左侧和右侧插入一个新的红球没有区别；同理，如果桌面上有 $2$ 个连续的红球，那么在其左侧、中间和右侧插入一个新的红球没有区别。因此，如果新插入的球和桌面上某组连续颜色相同的球（也可以是 $1$ 个）的颜色相同，我们只需要考虑在其左侧插入新球的情况即可。在具体的实现中，如果新插入的球和插入位置左侧的球的颜色相同，则跳过这个位置。\n\n- 第 $3$ 个剪枝条件：只考虑放置新球后有可能得到更优解的位置\n\n考虑插入新球的颜色与插入位置周围球的颜色的情况，在已经根据第 $2$ 个剪枝条件剪枝后，还可能出现如下三种情况：插入新球与插入位置右侧的球颜色相同；插入新球与插入位置两侧的球颜色均不相同，且插入位置两侧的球的颜色不同；插入新球与插入位置两侧的球颜色均不相同，且插入位置两侧的球的颜色相同。\n\n对于「插入新球与插入位置右侧的球颜色相同」的情况，这种操作可能可以构成连续三个相同颜色的球实现消除，是有可能得到更优解的。读者可以结合以下例子理解。\n\n例如：桌面上的球为 $\\texttt{WWRRBBWW}$，手中的球为 $\\texttt{WWRB}$，答案为 $2$。\n\n操作方法如下：$\\texttt{WWRRBBWW} \\rightarrow \\texttt{WW(R)RRBBWW} \\rightarrow \\texttt{WWBBWW} \\rightarrow \\texttt{WW(B)BBWW} \\rightarrow \\texttt{WWWW} \\rightarrow \\texttt{\"\"}$。\n\n对于「插入新球与插入位置两侧的球颜色均不相同，且插入位置两侧的球的颜色不同」的情况，这种操作可以将连续相同颜色的球拆分到不同的组合中消除，也是有可能得到更优解的。读者可以结合以下例子理解。\n\n例如：桌面上的球为 $\\texttt{RRWWRRBBRR}$，手中的球为 $\\texttt{WB}$，答案为 $2$。\n\n操作方法如下：$\\texttt{RRWWRRBBRR} \\rightarrow \\texttt{RRWWRRBBR(W)R} \\rightarrow \\texttt{RRWWRR(B)BBRWR} \\rightarrow \\texttt{RRWWRRRWR} \\rightarrow \\texttt{RRWWWR} \\rightarrow \\texttt{RRR} \\rightarrow \\texttt{\"\"}$。\n\n对于「插入新球与插入位置两侧的球颜色均不相同，且插入位置两侧的球的颜色相同」的情况，这种操作并不能对消除顺序产生任何影响。如插入位置旁边的球可以消除的话，那么这种插入方法与直接将新球插入到与之颜色相同的球的旁边没有区别。因此，这种操作不能得到比「插入新球与插入位置右侧的球颜色相同」更好的情况，得到更优解。读者可以结合以下例子理解。\n\n例如：桌面上的球为 $\\texttt{WWRRBBWW}$，手中的球为 $\\texttt{WWRB}$，答案为 $2$。\n\n操作方法如下：$\\texttt{WWRRBBWW} \\rightarrow \\texttt{WWRRBB(R)WW} \\rightarrow \\texttt{WWRRB(B)BRWW} \\rightarrow \\texttt{WWRRRWW} \\rightarrow \\texttt{WWWW} \\rightarrow \\texttt{\"\"}$。\n\n**细节**\n\n题目规定了如果在消除操作后，如果导致出现了新的连续三个或者三个以上颜色相同的球，则继续消除这些球，直到不再满足消除条件，实际消除时我们可以利用栈的特性，每次遇到连续可以消除的球时，我们就将其从栈中弹出。在实现中，我们可以在遍历桌面上的球时，使用列表维护遍历过的每种球的颜色和连续数量，从而通过一次遍历消除连续三个或者三个以上颜色相同的球。具体地：\n\n* 使用 $\\textit{visited\\_ball}$ 维护遍历过的每种球的颜色和连续数量，设其中最后一个颜色 $\\textit{last\\_color}$，其连续数量为 $\\textit{last\\_num}$；遍历桌面上的球，设当前遍历到的球为 $\\textit{cur\\_ball}$，其颜色为 $\\textit{cur\\_color}$。\n* 首先，判断：\n  * 如果 $\\textit{visited\\_ball}$ 不为空，且 $\\textit{cur\\_color}$ 与 $\\textit{last\\_color}$ 不同，则判断：如果 $\\textit{last\\_num}$ 大于等于 $3$，则从 $\\textit{visited\\_ball}$ 中移除 $\\textit{last\\_color}$ 和 $\\textit{last\\_num}$。\n* 接着，判断：\n  * 如果 $\\textit{visited\\_ball}$ 为空，或 $\\textit{cur\\_color}$ 与 $\\textit{last\\_color}$ 不同，则向 $\\textit{visited\\_ball}$ 添加 $\\textit{cur\\_color}$ 及连续数量 $1$；\n  * 否则，累加 $\\textit{last\\_num}$。\n\n最后，根据列表中维护的每种球的颜色和连续数量，重新构造桌面上的球的组合即可。\n\n在 $\\texttt{Python}$ 中，因为对正则表达式的优化较好，也可以循环地使用正则表达式来消除连续三个或者三个以上颜色相同的球。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def findMinStep(self, board: str, hand: str) -> int:\n        def clean(s):\n            # 消除桌面上需要消除的球\n            n = 1\n            while n:\n                s, n = re.subn(r\"(.)\\1{2,}\", \"\", s)\n            return s\n\n        hand = \"\".join(sorted(hand))\n\n        # 初始化用队列维护的状态队列：其中的三个元素分别为桌面球状态、手中球状态和回合数\n        queue = deque([(board, hand, 0)])\n\n        # 初始化用哈希集合维护的已访问过的状态\n        visited = {(board, hand)}\n\n        while queue:\n            cur_board, cur_hand, step = queue.popleft()\n            for i, j in product(range(len(cur_board) + 1), range(len(cur_hand))):\n                # 第 1 个剪枝条件: 当前球的颜色和上一个球的颜色相同\n                if j > 0 and cur_hand[j] == cur_hand[j - 1]:\n                    continue\n\n                # 第 2 个剪枝条件: 只在连续相同颜色的球的开头位置插入新球\n                if i > 0 and cur_board[i - 1] == cur_hand[j]:\n                    continue\n                \n                # 第 3 个剪枝条件: 只在以下两种情况放置新球\n                choose = False\n                #  - 第 1 种情况 : 当前球颜色与后面的球的颜色相同\n                if i < len(cur_board) and cur_board[i] == cur_hand[j]:\n                    choose = True\n                #  - 第 2 种情况 : 当前后颜色相同且与当前颜色不同时候放置球\n                if 0 < i < len(cur_board) and cur_board[i - 1] == cur_board[i] and cur_board[i - 1] != cur_hand[j]:\n                    choose = True\n\n                if choose:\n                    new_board = clean(cur_board[:i] + cur_hand[j] + cur_board[i:])\n                    new_hand = cur_hand[:j] + cur_hand[j + 1:]\n                    if not new_board:\n                        return step + 1\n                    if (new_board, new_hand) not in visited:\n                        queue.append((new_board, new_hand, step + 1))\n                        visited.add((new_board, new_hand))\n\n        return -1\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findMinStep(String board, String hand) {\n        char[] arr = hand.toCharArray();\n        Arrays.sort(arr);\n        hand = new String(arr);\n\n        // 初始化用队列维护的状态队列：其中的三个元素分别为桌面球状态、手中球状态和回合数\n        Queue<State> queue = new ArrayDeque<State>();\n        queue.offer(new State(board, hand, 0));\n\n        // 初始化用哈希集合维护的已访问过的状态\n        Set<String> visited = new HashSet<String>();\n        visited.add(board + \" \" + hand);\n\n        while (!queue.isEmpty()) {\n            State state = queue.poll();\n            String curBoard = state.board;\n            String curHand = state.hand;\n            int step = state.step;\n            for (int i = 0; i <= curBoard.length(); ++i) {\n                for (int j = 0; j < curHand.length(); ++j) {\n                    // 第 1 个剪枝条件: 当前球的颜色和上一个球的颜色相同\n                    if (j > 0 && curHand.charAt(j) == curHand.charAt(j - 1)) {\n                        continue;\n                    }\n\n                    // 第 2 个剪枝条件: 只在连续相同颜色的球的开头位置插入新球\n                    if (i > 0 && curBoard.charAt(i - 1) == curHand.charAt(j)) {\n                        continue;\n                    }\n\n                    // 第 3 个剪枝条件: 只在以下两种情况放置新球\n                    boolean choose = false;\n                    //  - 第 1 种情况 : 当前球颜色与后面的球的颜色相同\n                    if (i < curBoard.length() && curBoard.charAt(i) == curHand.charAt(j)) {\n                        choose = true;\n                    }\n                    //  - 第 2 种情况 : 当前后颜色相同且与当前颜色不同时候放置球\n                    if (i > 0 && i < curBoard.length() && curBoard.charAt(i - 1) == curBoard.charAt(i) && curBoard.charAt(i - 1) != curHand.charAt(j)) {\n                        choose = true;\n                    }\n\n                    if (choose) {\n                        String newBoard = clean(curBoard.substring(0, i) + curHand.charAt(j) + curBoard.substring(i));\n                        String newHand = curHand.substring(0, j) + curHand.substring(j + 1);\n                        if (newBoard.length() == 0) {\n                            return step + 1;\n                        }\n                        String str = newBoard + \" \" + newHand;\n                        if (visited.add(str)) {\n                            queue.offer(new State(newBoard, newHand, step + 1));\n                        }\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n\n    public String clean(String s) {\n        StringBuffer sb = new StringBuffer();\n        Deque<Character> letterStack = new ArrayDeque<Character>();\n        Deque<Integer> countStack = new ArrayDeque<Integer>();\n        \n        for (int i = 0; i < s.length(); ++i) {\n            char c = s.charAt(i);\n            while (!letterStack.isEmpty() && c != letterStack.peek() && countStack.peek() >= 3) {\n                letterStack.pop();\n                countStack.pop();\n            }\n            if (letterStack.isEmpty() || c != letterStack.peek()) {\n                letterStack.push(c);\n                countStack.push(1);\n            } else {\n                countStack.push(countStack.pop() + 1);\n            }\n        }\n        if (!countStack.isEmpty() && countStack.peek() >= 3) {\n            letterStack.pop();\n            countStack.pop();\n        }\n        while (!letterStack.isEmpty()) {\n            char letter = letterStack.pop();\n            int count = countStack.pop();\n            for (int i = 0; i < count; ++i) {\n                sb.append(letter);\n            }\n        }\n        sb.reverse();\n        return sb.toString();\n    }\n}\n\nclass State {\n    String board;\n    String hand;\n    int step;\n\n    public State(String board, String hand, int step) {\n        this.board = board;\n        this.hand = hand;\n        this.step = step;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int FindMinStep(string board, string hand) {\n        char[] arr = hand.ToCharArray();\n        Array.Sort(arr);\n        hand = new string(arr);\n\n        // 初始化用队列维护的状态队列：其中的三个元素分别为桌面球状态、手中球状态和回合数\n        Queue<State> queue = new Queue<State>();\n        queue.Enqueue(new State(board, hand, 0));\n\n        // 初始化用哈希集合维护的已访问过的状态\n        ISet<string> visited = new HashSet<string>();\n        visited.Add(board + \"#\" + hand);\n\n        while (queue.Count > 0) {\n            State state = queue.Dequeue();\n            string curBoard = state.board;\n            string curHand = state.hand;\n            int step = state.step;\n            for (int i = 0; i <= curBoard.Length; ++i) {\n                for (int j = 0; j < curHand.Length; ++j) {\n                    // 第 1 个剪枝条件: 当前球的颜色和上一个球的颜色相同\n                    if (j > 0 && curHand[j] == curHand[j - 1]) {\n                        continue;\n                    }\n\n                    // 第 2 个剪枝条件: 只在连续相同颜色的球的开头位置插入新球\n                    if (i > 0 && curBoard[i - 1] == curHand[j]) {\n                        continue;\n                    }\n\n                    // 第 3 个剪枝条件: 只在以下两种情况放置新球\n                    //  - 第 1 种情况 : 当前球颜色与后面的球的颜色相同\n                    //  - 第 2 种情况 : 当前后颜色相同且与当前颜色不同时候放置球\n                    bool choose = false;\n                    if (i > 0 && i < curBoard.Length && curBoard[i - 1] == curBoard[i] && curBoard[i - 1] != curHand[j]) {\n                        choose = true;\n                    }\n                    if (i < curBoard.Length && curBoard[i] == curHand[j]) {\n                        choose = true;\n                    }\n\n                    if (choose) {\n                        string newBoard = Clean(curBoard.Substring(0, i) + curHand[j] + curBoard.Substring(i));\n                        string newHand = curHand.Substring(0, j) + curHand.Substring(j + 1);\n                        if (newBoard.Length == 0) {\n                            return step + 1;\n                        }\n                        string str = newBoard + \"#\" + newHand;\n                        if (visited.Add(str)) {\n                            queue.Enqueue(new State(newBoard, newHand, step + 1));\n                        }\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n\n    public string Clean(string s) {\n        StringBuilder sb = new StringBuilder();\n        Stack<char> letterStack = new Stack<char>();\n        Stack<int> countStack = new Stack<int>();\n        \n        foreach (char c in s) {\n            while (letterStack.Count > 0 && c != letterStack.Peek() && countStack.Peek() >= 3) {\n                letterStack.Pop();\n                countStack.Pop();\n            }\n            if (letterStack.Count == 0 || c != letterStack.Peek()) {\n                letterStack.Push(c);\n                countStack.Push(1);\n            } else {\n                countStack.Push(countStack.Pop() + 1);\n            }\n        }\n        if (countStack.Count > 0 && countStack.Peek() >= 3) {\n            letterStack.Pop();\n            countStack.Pop();\n        }\n        while (letterStack.Count > 0) {\n            char letter = letterStack.Pop();\n            int count = countStack.Pop();\n            for (int i = 0; i < count; ++i) {\n                sb.Append(letter);\n            }\n        }\n        StringBuilder res = new StringBuilder();\n        for (int i = sb.Length - 1; i >= 0; --i) {\n            res.Append(sb[i]);\n        }\n        return res.ToString();\n    }\n}\n\nclass State {\n    public string board;\n    public string hand;\n    public int step;\n\n    public State(string board, string hand, int step) {\n        this.board = board;\n        this.hand = hand;\n        this.step = step;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findMinStep = function(board, hand) {\n    hand = Array.from(hand).sort().join('');\n\n    // 初始化用队列维护的状态队列：其中的三个元素分别为桌面球状态、手中球状态和回合数\n    const queue = [];\n    queue.push([board, hand, 0]);\n\n    // 初始化用哈希集合维护的已访问过的状态\n    const visited = new Set();\n    visited.add(board + \"#\" + hand);\n\n    while (queue.length) {\n        const [curBoard, curHand, step]= queue.shift();\n        for (let i = 0; i <= curBoard.length; ++i) {\n            for (let j = 0; j < curHand.length; ++j) {\n                // 第 1 个剪枝条件: 当前球的颜色和上一个球的颜色相同\n                if (j > 0 && curHand[j] === curHand[j - 1]) {\n                    continue;\n                }\n\n                // 第 2 个剪枝条件: 只在连续相同颜色的球的开头位置插入新球\n                if (i > 0 && curBoard[i - 1] === curHand[j]) {\n                    continue;\n                }\n\n                // 第 3 个剪枝条件: 只在以下两种情况放置新球\n                let choose = false;\n                //  - 第 1 种情况 : 当前球颜色与后面的球的颜色相同\n                if (i < curBoard.length && curBoard[i] === curHand[j]) {\n                    choose = true;\n                }\n                //  - 第 2 种情况 : 当前后颜色相同且与当前颜色不同时候放置球\n                if (i > 0 && i < curBoard.length && curBoard[i - 1] === curBoard[i] && curBoard[i - 1] !== curHand[j]) {\n                    choose = true;\n                }\n                \n\n                if (choose) {\n                    const newBoard = clean(curBoard.substring(0, i) + curHand[j] + curBoard.substring(i));\n                    const newHand = curHand.substring(0, j) + curHand.substring(j + 1);\n                    if (newBoard.length === 0) {\n                        return step + 1;\n                    }\n                    const str = newBoard + \"#\" + newHand;\n                    if (visited.add(str)) {\n                        queue.push([newBoard, newHand, step + 1]);\n                    }\n                }\n            }\n        }\n    }\n    return -1;\n};\n\nconst clean = (s) => {\n    let prev = \"\";\n    while (s !== prev) {\n        let sb = [];\n        let consecutive = 1;\n        for (let i = 0; i < s.length; ++i) {\n            const c = s[i];\n            if (i > 0) {\n                if (c === s[i - 1]) {\n                    ++consecutive;\n                } else {\n                    if (consecutive >= 3) {\n                        sb = sb.slice(0, sb.length - consecutive);\n                    }\n                    consecutive = 1;\n                }\n            }\n            sb.push(c);\n        }\n        if (consecutive >= 3) {\n            sb = sb.slice(0, sb.length - consecutive);\n        }\n        prev = s;\n        s = sb.join('');\n    }\n    return s;\n}\n```\n\n```C++ [sol1-C++]\nstruct State {\n    string board;\n    string hand;\n    int step;\n    State(const string & board, const string & hand, int step) {\n        this->board = board;\n        this->hand = hand;\n        this->step = step;\n    }\n};\n\nclass Solution {\npublic:\n    string clean(const string & s) {\n        string res;\n        vector<pair<char, int>> st;\n        \n        for (auto c : s) {\n            while (!st.empty() && c != st.back().first && st.back().second >= 3) {\n                st.pop_back();\n            }\n            if (st.empty() || c != st.back().first) {\n                st.push_back({c,1});\n            } else {\n                st.back().second++;\n            }\n        }\n        if (!st.empty() && st.back().second >= 3) {\n            st.pop_back();\n        }\n        for (int i = 0; i < st.size(); ++i) {\n            for (int j = 0; j < st[i].second; ++j) {\n                res.push_back(st[i].first);\n            }\n        }\n        return res;\n    }\n\n    int findMinStep(string board, string hand) {\n        unordered_set<string> visited;\n        sort(hand.begin(), hand.end());\n\n        visited.insert(board + \" \" + hand);\n        queue<State> qu;\n        qu.push(State(board, hand, 0));\n        while (!qu.empty()) {\n            State curr = qu.front();\n            qu.pop();\n\n            for (int j = 0; j < curr.hand.size(); ++j) {\n                // 第 1 个剪枝条件: 当前选择的球的颜色和前一个球的颜色相同\n                if (j > 0 && curr.hand[j] == curr.hand[j - 1]) {\n                    continue;\n                }\n                for (int i = 0; i <= curr.board.size(); ++i) {\n                    // 第 2 个剪枝条件: 只在连续相同颜色的球的开头位置插入新球\n                    if (i > 0 && curr.board[i - 1] == curr.hand[j]) {\n                        continue;\n                    }\n\n                    // 第 3 个剪枝条件: 只在以下两种情况放置新球\n                    bool choose = false;\n                    //   第 1 种情况 : 当前球颜色与后面的球的颜色相同\n                    if (i < curr.board.size() && curr.board[i] == curr.hand[j]) {\n                        choose = true;\n                    }  \n                    //   第 2 种情况 : 当前后颜色相同且与当前颜色不同时候放置球\n                    if (i > 0 && i < curr.board.size() && curr.board[i - 1] == curr.board[i] && curr.board[i] != curr.hand[j]){\n                        choose = true;\n                    }\n                    if (choose) {\n                        string new_board = clean(curr.board.substr(0, i) + curr.hand[j] + curr.board.substr(i));\n                        string new_hand = curr.hand.substr(0, j) + curr.hand.substr(j + 1);\n                        if (new_board.size() == 0) {\n                            return curr.step + 1;\n                        }\n                        if (!visited.count(new_board + \" \" + new_hand)) {\n                            qu.push(State(new_board, new_hand, curr.step + 1));\n                            visited.insert(new_board + \" \" + new_hand);\n                        }\n                    }\n                }\n            }\n        }\n\n        return -1;  \n    }\n};\n```\n**复杂度分析**\n\n- 时间复杂度：$O(m \\times n \\times A_{n+m}^{m})$，其中 $n$ 为桌面上球的数量，$m$ 为手中球的数量。对 $m$ 个球总共有 $m!$ 种选择顺序，插入后桌面上最多有 $m+n$ 个球，根据排列组合原理插入 $m$ 个球的方案数为 $C_{n+m}^{m}$，实际计算过程中最多有 $O(m! \\times C_{n+m}^{n}) = A_{n+m}^{m}$ 种状态；每种状态需要 $O(m \\times n)$ 来考虑所有插入球的方案，并需要 $O(n)$ 来消除桌面上连续的球。\n\n- 空间复杂度：$O((n+m) \\times A_{n+m}^{m})$。我们需要存储 $O(A_{n+m}^{m})$ 种状态；每种状态需要存储 $n$ 个桌面上的球的状态和 $m$ 个手中球的状态。\n\n#### 方法二：记忆化搜索\n\n**思路**\n\n记忆化搜索的核心思想跟方法一类似，核心思想还是搜索所有可能插入方案，找到最少的插入方案。每次尝试选择一个手中的球将其插入到桌面上的任意两球之间，然后对桌面上的球进行检测并对连续相同颜色的球进行消除，然后依次再进行插入和消除，直到桌面上的球全部消除或者手中的球全部插入后桌面上的球也无法消除为止。假设当前桌面上有 $n$ 个球，手中持有 $m$ 个球，则此时一共有 $C_{m+n}^{n} \\times m! = A_{n+m}^{m}$ 种插入方法，如果我们直接进行搜索所有的插入方法的话会超时，因此实际进行记忆化搜索时需要进行剪枝，剪枝的策略跟方法一类似，当然实际中有很多可以进行剪枝的技巧。比如以下几个与方法一相同的减枝技巧：\n- 第 $1$ 个剪枝条件：手中颜色相同的球只需要考虑其中一个即可。\n- 第 $2$ 个剪枝条件：只在连续相同颜色的球的开头位置或者结尾位置插入新的颜色相同的球。\n- 第 $3$ 个剪枝条件：只考虑放置新球后有可能得到更优解的位置。\n- 第 $4$ 个剪枝条件：对于如果手中的球全部插入也无法满足新的消除，则我们直接进行中止。\n\n**代码**\n\n```Python [sol2-Python3]\nimport re\nfrom functools import lru_cache\nfrom itertools import product\n\nclass Solution:\n    def findMinStep(self, board: str, hand: str) -> int:\n        ans = self.dfs(board, \"\".join(sorted(hand)))\n        return ans if ans <= 5 else -1\n\n    @lru_cache(None)\n    def dfs(self, cur_board: str, cur_hand: str):\n        if not cur_board:\n            return 0\n        \n        res = 6\n        for i, j in product(range(len(cur_board) + 1), range(len(cur_hand))):\n            # 第 1 个剪枝条件: 手中颜色相同的球只需要考虑其中一个即可\n            if j > 0 and cur_hand[j] == cur_hand[j - 1]:\n                continue\n\n            # 第 2 个剪枝条件: 只在连续相同颜色的球的开头位置插入新球\n            if i > 0 and cur_board[i - 1] == cur_hand[j]:\n                continue\n\n            # 第 3 个剪枝条件: 只考虑放置新球后有可能得到更优解的位置\n            choose = False\n            #  - 第 1 种情况 : 当前球颜色与后面的球的颜色相同\n            if i < len(cur_board) and cur_board[i] == cur_hand[j]:\n                choose = True\n            #  - 第 2 种情况 : 当前后颜色相同且与当前颜色不同时候放置球\n            if 0 < i < len(cur_board) and cur_board[i - 1] == cur_board[i] and cur_board[i - 1] != cur_hand[j]:\n                choose = True\n            \n            if choose:\n                new_board = self.clean(cur_board[:i] + cur_hand[j] + cur_board[i:])\n                new_hand = cur_hand[:j] + cur_hand[j + 1:]\n                res = min(res, self.dfs(new_board, new_hand) + 1)\n        return res\n\n    @staticmethod\n    def clean(s):\n        n = 1\n        while n:\n            s, n = re.subn(r'(.)\\1{2,}', '', s)\n        return s\n```\n\n```Java [sol2-Java]\nclass Solution {\n    Map<String, Integer> dp = new HashMap<String, Integer>();\n\n    public int findMinStep(String board, String hand) {\n        char[] arr = hand.toCharArray();\n        Arrays.sort(arr);\n        hand = new String(arr);\n        int ans = dfs(board, hand);\n        return ans <= 5 ? ans : -1;\n    }\n\n    public int dfs(String board, String hand) {\n        if (board.length() == 0) {\n            return 0;\n        }\n        String key = board + \" \" + hand;\n        if (!dp.containsKey(key)) {\n            int res = 6;\n            for (int j = 0; j < hand.length(); ++j) {\n                // 第 1 个剪枝条件: 当前球的颜色和上一个球的颜色相同\n                if (j > 0 && hand.charAt(j) == hand.charAt(j - 1)) {\n                    continue;\n                }\n                for (int i = 0; i <= board.length(); ++i) {\n                    // 第 2 个剪枝条件: 只在连续相同颜色的球的开头位置插入新球\n                    if (i > 0 && board.charAt(i - 1) == hand.charAt(j)) {\n                        continue;\n                    }\n\n                    // 第 3 个剪枝条件: 只在以下两种情况放置新球\n                    boolean choose = false;\n                    //  - 第 1 种情况 : 当前球颜色与后面的球的颜色相同\n                    if (i < board.length() && board.charAt(i) == hand.charAt(j)) {\n                        choose = true;\n                    }\n                    //  - 第 2 种情况 : 当前后颜色相同且与当前颜色不同时候放置球\n                    if (i > 0 && i < board.length() && board.charAt(i - 1) == board.charAt(i) && board.charAt(i - 1) != hand.charAt(j)) {\n                        choose = true;\n                    }\n\n                    if (choose) {\n                        String newBoard = clean(board.substring(0, i) + hand.charAt(j) + board.substring(i));\n                        String newHand = hand.substring(0, j) + hand.substring(j + 1);\n                        res = Math.min(res, dfs(newBoard, newHand) + 1);\n                    }\n                }\n            }\n            dp.put(key, res);\n        }\n        return dp.get(key);\n    }\n\n    public String clean(String s) {\n        StringBuffer sb = new StringBuffer();\n        Deque<Character> letterStack = new ArrayDeque<Character>();\n        Deque<Integer> countStack = new ArrayDeque<Integer>();\n        \n        for (int i = 0; i < s.length(); ++i) {\n            char c = s.charAt(i);\n            while (!letterStack.isEmpty() && c != letterStack.peek() && countStack.peek() >= 3) {\n                letterStack.pop();\n                countStack.pop();\n            }\n            if (letterStack.isEmpty() || c != letterStack.peek()) {\n                letterStack.push(c);\n                countStack.push(1);\n            } else {\n                countStack.push(countStack.pop() + 1);\n            }\n        }\n        if (!countStack.isEmpty() && countStack.peek() >= 3) {\n            letterStack.pop();\n            countStack.pop();\n        }\n        while (!letterStack.isEmpty()) {\n            char letter = letterStack.pop();\n            int count = countStack.pop();\n            for (int i = 0; i < count; ++i) {\n                sb.append(letter);\n            }\n        }\n        sb.reverse();\n        return sb.toString();\n    }\n}\n\nclass State {\n    String board;\n    String hand;\n    int step;\n\n    public State(String board, String hand, int step) {\n        this.board = board;\n        this.hand = hand;\n        this.step = step;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    Dictionary<string, int> dp = new Dictionary<string, int>();\n\n    public int FindMinStep(string board, string hand) {\n        char[] arr = hand.ToCharArray();\n        Array.Sort(arr);\n        hand = new string(arr);\n        int ans = DFS(board, hand);\n        return ans <= 5 ? ans : -1;\n    }\n\n    public int DFS(string board, string hand) {\n        if (board.Length == 0) {\n            return 0;\n        }\n        string key = board + \" \" + hand;\n        if (!dp.ContainsKey(key)) {\n            int res = 6;\n            for (int j = 0; j < hand.Length; ++j) {\n                // 第 1 个剪枝条件: 当前球的颜色和上一个球的颜色相同\n                if (j > 0 && hand[j] == hand[j - 1]) {\n                    continue;\n                }\n                for (int i = 0; i <= board.Length; ++i) {\n                    // 第 2 个剪枝条件: 只在连续相同颜色的球的开头位置插入新球\n                    if (i > 0 && board[i - 1] == hand[j]) {\n                        continue;\n                    }\n\n                    // 第 3 个剪枝条件: 只在以下两种情况放置新球\n                    bool choose = false;\n                    //  - 第 1 种情况 : 当前球颜色与后面的球的颜色相同\n                    if (i < board.Length && board[i] == hand[j]) {\n                        choose = true;\n                    }\n                    //  - 第 2 种情况 : 当前后颜色相同且与当前颜色不同时候放置球\n                    if (i > 0 && i < board.Length && board[i - 1] == board[i] && board[i - 1] != hand[j]) {\n                        choose = true;\n                    }\n\n                    if (choose) {\n                        String newBoard = Clean(board.Substring(0, i) + hand[j] + board.Substring(i));\n                        String newHand = hand.Substring(0, j) + hand.Substring(j + 1);\n                        res = Math.Min(res, DFS(newBoard, newHand) + 1);\n                    }\n                }\n            }\n            dp.Add(key, res);\n        }\n        return dp[key];\n    }\n\n    public string Clean(string s) {\n        StringBuilder sb = new StringBuilder();\n        Stack<char> letterStack = new Stack<char>();\n        Stack<int> countStack = new Stack<int>();\n        \n        foreach (char c in s) {\n            while (letterStack.Count > 0 && c != letterStack.Peek() && countStack.Peek() >= 3) {\n                letterStack.Pop();\n                countStack.Pop();\n            }\n            if (letterStack.Count == 0 || c != letterStack.Peek()) {\n                letterStack.Push(c);\n                countStack.Push(1);\n            } else {\n                countStack.Push(countStack.Pop() + 1);\n            }\n        }\n        if (countStack.Count > 0 && countStack.Peek() >= 3) {\n            letterStack.Pop();\n            countStack.Pop();\n        }\n        while (letterStack.Count > 0) {\n            char letter = letterStack.Pop();\n            int count = countStack.Pop();\n            for (int i = 0; i < count; ++i) {\n                sb.Append(letter);\n            }\n        }\n        StringBuilder res = new StringBuilder();\n        for (int i = sb.Length - 1; i >= 0; --i) {\n            res.Append(sb[i]);\n        }\n        return res.ToString();\n    }\n}\n\nclass State {\n    public string board;\n    public string hand;\n    public int step;\n\n    public State(string board, string hand, int step) {\n        this.board = board;\n        this.hand = hand;\n        this.step = step;\n    }\n}\n```\n\n```C++ [sol2-C++]\nstruct State {\n    string board;\n    string hand;\n    int step;\n    State(const string & board, const string & hand, int step) {\n        this->board = board;\n        this->hand = hand;\n        this->step = step;\n    }\n};\n\nclass Solution {\npublic:\n    unordered_map<string, int> dp;\n    string clean(const string & s) {\n        string res;\n        vector<pair<char, int>> st;\n        \n        for (auto c : s) {\n            while (!st.empty() && c != st.back().first && st.back().second >= 3) {\n                st.pop_back();\n            }\n            if (st.empty() || c != st.back().first) {\n                st.push_back({c,1});\n            } else {\n                st.back().second++;\n            }\n        }\n        if (!st.empty() && st.back().second >= 3) {\n            st.pop_back();\n        }\n        for (int i = 0; i < st.size(); ++i) {\n            for (int j = 0; j < st[i].second; ++j) {\n                res.push_back(st[i].first);\n            }\n        }\n        return res;\n    }\n\n    int dfs(const string & board, const string & hand) {\n        if (board.size() == 0) {\n            return 0;\n        }\n        if (dp.count(board + \" \" + hand)) {\n            return dp[board + \" \" + hand];\n        }\n\n        int res = 6;\n        for (int j = 0; j < hand.size(); ++j) {\n            // 第 1 个剪枝条件: 当前选择的球的颜色和前一个球的颜色相同\n            if (j > 0 && hand[j] == hand[j - 1]) {\n                continue;\n            }\n            for (int i = 0; i <= board.size(); ++i) {\n                // 第 2 个剪枝条件: 只在连续相同颜色的球的开头位置插入新球\n                if (i > 0 && board[i - 1] == hand[j]) {\n                    continue;\n                }\n                bool choose = false;\n                // 第 3 个剪枝条件: 只在以下两种情况放置新球\n                //   第 1 种情况 : 当前球颜色与后面的球的颜色相同\n                if (i < board.size() && board[i] == hand[j]) {\n                    choose = true;\n                }  \n                //   第 2 种情况 : 当前后颜色相同且与当前颜色不同时候放置球\n                if (i > 0 && i < board.size() && board[i - 1] == board[i] && board[i] != hand[j]){\n                    choose = true;\n                }\n                if (choose) {\n                    string new_board = clean(board.substr(0, i) + hand[j] + board.substr(i));\n                    string new_hand = hand.substr(0, j) + hand.substr(j + 1);\n                    res = min(res, dfs(new_board, new_hand) + 1);\n                }\n            }\n        }\n        dp[board + \" \" + hand] = res;\n        return res;\n    }\n\n    int findMinStep(string board, string hand) {\n        sort(hand.begin(), hand.end());\n        int ans = dfs(board, hand);\n        return ans <= 5 ? ans : -1;\n    }\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\times n \\times A_{n+m}^{m})$，其中 $n$ 为桌面上球的数量，$m$ 为手中球的数量。我们需要考虑实际计算过程中最多有 $O(A_{n+m}^{m})$ 种状态；每种状态需要 $O(m \\times n)$ 来考虑所有插入球的方案，并需要 $O(n)$ 来消除桌面上连续的球。\n\n- 空间复杂度：$O((n+m) \\times A_{n+m}^{m})$，其中 $n$ 为桌面上球的数量，$m$ 为手中球的数量。我们需要存储 $O(A_{n+m}^{m})$ 种状态；每种状态需要存储 $n$ 个桌面上的球的状态和 $m$ 个手中球的状态，此外还需要考虑到递归需要耗费栈的空间，我们可以知道递归深度为 $m$，因此总的空间复杂度为 $O(m + (n+m) \\times A_{n+m}^{m}) = O((n+m) \\times A_{n+m}^{m})$。"
}