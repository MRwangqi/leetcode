{
	"titleSlug": "shortest-path-visiting-all-nodes",
	"slug": "fang-wen-suo-you-jie-dian-de-zui-duan-lu-mqc2",
	"url": "https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/solution/fang-wen-suo-you-jie-dian-de-zui-duan-lu-mqc2/",
	"content": "#### 方法一：状态压缩 + 广度优先搜索\n\n**思路与算法**\n\n由于题目需要我们求出「访问所有节点的**最短路径**的长度」，并且图中每一条边的长度均为 $1$，因此我们可以考虑使用广度优先搜索的方法求出最短路径。\n\n在常规的广度优先搜索中，我们会在队列中存储节点的编号。对于本题而言，最短路径的前提是「访问了所有节点」，因此除了记录节点的编号以外，我们还需要记录每一个节点的经过情况。因此，我们使用三元组 $(u, \\textit{mask}, \\textit{dist})$ 表示队列中的每一个元素，其中：\n\n- $u$ 表示当前位于的节点编号；\n\n- $\\textit{mask}$ 是一个长度为 $n$ 的二进制数，表示每一个节点是否经过。如果 $\\textit{mask}$ 的第 $i$ 位是 $1$，则表示节点 $i$ 已经过，否则表示节点 $i$ 未经过；\n\n- $\\textit{dist}$ 表示到当前节点为止经过的路径长度。\n\n这样一来，我们使用该三元组进行广度优先搜索，即可解决本题。初始时，我们将所有的 $(i, 2^i, 0)$ 放入队列，表示可以从任一节点开始。在搜索的过程中，如果当前三元组中的 $\\textit{mask}$ 包含 $n$ 个 $1$（即 $\\textit{mask} = 2^n - 1$），那么我们就可以返回 $\\textit{dist}$ 作为答案。\n\n**细节**\n\n为了保证广度优先搜索时间复杂度的正确性，即同一个节点 $u$ 以及节点的经过情况 $\\textit{mask}$ 只被搜索到一次，我们可以使用数组或者哈希表记录 $(u, \\textit{mask})$ 是否已经被搜索过，防止无效的重复搜索。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph) {\n        int n = graph.size();\n        queue<tuple<int, int, int>> q;\n        vector<vector<int>> seen(n, vector<int>(1 << n));\n        for (int i = 0; i < n; ++i) {\n            q.emplace(i, 1 << i, 0);\n            seen[i][1 << i] = true;\n        }\n\n        int ans = 0;\n        while (!q.empty()) {\n            auto [u, mask, dist] = q.front();\n            q.pop();\n            if (mask == (1 << n) - 1) {\n                ans = dist;\n                break;\n            }\n            // 搜索相邻的节点\n            for (int v: graph[u]) {\n                // 将 mask 的第 v 位置为 1\n                int mask_v = mask | (1 << v);\n                if (!seen[v][mask_v]) {\n                    q.emplace(v, mask_v, dist + 1);\n                    seen[v][mask_v] = true;\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int shortestPathLength(int[][] graph) {\n        int n = graph.length;\n        Queue<int[]> queue = new LinkedList<int[]>();\n        boolean[][] seen = new boolean[n][1 << n];\n        for (int i = 0; i < n; ++i) {\n            queue.offer(new int[]{i, 1 << i, 0});\n            seen[i][1 << i] = true;\n        }\n\n        int ans = 0;\n        while (!queue.isEmpty()) {\n            int[] tuple = queue.poll();\n            int u = tuple[0], mask = tuple[1], dist = tuple[2];\n            if (mask == (1 << n) - 1) {\n                ans = dist;\n                break;\n            }\n            // 搜索相邻的节点\n            for (int v : graph[u]) {\n                // 将 mask 的第 v 位置为 1\n                int maskV = mask | (1 << v);\n                if (!seen[v][maskV]) {\n                    queue.offer(new int[]{v, maskV, dist + 1});\n                    seen[v][maskV] = true;\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int ShortestPathLength(int[][] graph) {\n        int n = graph.Length;\n        Queue<Tuple<int, int, int>> queue = new Queue<Tuple<int, int, int>>();\n        bool[,] seen = new bool[n, 1 << n];\n        for (int i = 0; i < n; ++i) {\n            queue.Enqueue(new Tuple<int, int, int>(i, 1 << i, 0));\n            seen[i, 1 << i] = true;\n        }\n\n        int ans = 0;\n        while (queue.Count > 0) {\n            Tuple<int, int, int> tuple = queue.Dequeue();\n            int u = tuple.Item1, mask = tuple.Item2, dist = tuple.Item3;\n            if (mask == (1 << n) - 1) {\n                ans = dist;\n                break;\n            }\n            // 搜索相邻的节点\n            foreach (int v in graph[u]) {\n                // 将 mask 的第 v 位置为 1\n                int maskV = mask | (1 << v);\n                if (!seen[v, maskV]) {\n                    queue.Enqueue(new Tuple<int, int, int>(v, maskV, dist + 1));\n                    seen[v, maskV] = true;\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n        n = len(graph)\n        q = deque((i, 1 << i, 0) for i in range(n))\n        seen = {(i, 1 << i) for i in range(n)}\n        ans = 0\n        \n        while q:\n            u, mask, dist = q.popleft()\n            if mask == (1 << n) - 1:\n                ans = dist\n                break\n            # 搜索相邻的节点\n            for v in graph[u]:\n                # 将 mask 的第 v 位置为 1\n                mask_v = mask | (1 << v)\n                if (v, mask_v) not in seen:\n                    q.append((v, mask_v, dist + 1))\n                    seen.add((v, mask_v))\n        \n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar shortestPathLength = function(graph) {\n    const n = graph.length;\n    const queue = [];\n    const seen = new Array(n).fill(0).map(() => new Array(1 << n).fill(false));\n    for (let i = 0; i < n; ++i) {\n        queue.push([i, 1 << i, 0]);\n        seen[i][1 << i] = true;\n    }\n\n    let ans = 0;\n    while (queue.length) {\n        const tuple = queue.shift();\n        const u = tuple[0], mask = tuple[1], dist = tuple[2];\n        if (mask === (1 << n) - 1) {\n            ans = dist;\n            break;\n        }\n        // 搜索相邻的节点\n        for (const v of graph[u]) {\n            // 将 mask 的第 v 位置为 1\n            const maskV = mask | (1 << v);\n            if (!seen[v][maskV]) {\n                queue.push([v, maskV, dist + 1]);\n                seen[v][maskV] = true;\n            }\n        }\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc shortestPathLength(graph [][]int) int {\n    n := len(graph)\n    type tuple struct{ u, mask, dist int }\n    q := []tuple{}\n    seen := make([][]bool, n)\n    for i := range seen {\n        seen[i] = make([]bool, 1<<n)\n        seen[i][1<<i] = true\n        q = append(q, tuple{i, 1 << i, 0})\n    }\n\n    for {\n        t := q[0]\n        q = q[1:]\n        if t.mask == 1<<n-1 {\n            return t.dist\n        }\n        // 搜索相邻的节点\n        for _, v := range graph[t.u] {\n            maskV := t.mask | 1<<v\n            if !seen[v][maskV] {\n                q = append(q, tuple{v, maskV, t.dist + 1})\n                seen[v][maskV] = true\n            }\n        }\n    }\n}\n```\n\n```C [sol1-C]\nstruct Node {\n    int id, mask, dist;\n};\n\nint shortestPathLength(int** graph, int graphSize, int* graphColSize){\n    int n = graphSize;\n    struct Node q[n * (1 << n)];\n    int left = 0, right = 0;\n    int seen[n][1 << n];\n    memset(seen, 0, sizeof(seen));\n    for (int i = 0; i < n; ++i) {\n        q[right++] = (struct Node){i, 1 << i, 0};\n        seen[i][1 << i] = true;\n    }\n\n    int ans = 0;\n    while (left < right) {\n        int u = q[left].id;\n        int mask = q[left].mask;\n        int dist = q[left++].dist;\n        if (mask == (1 << n) - 1) {\n            ans = dist;\n            break;\n        }\n        // 搜索相邻的节点\n        for (int i = 0; i < graphColSize[u]; i++) {\n            int v = graph[u][i];\n            // 将 mask 的第 v 位置为 1\n            int mask_v = mask | (1 << v);\n            if (!seen[v][mask_v]) {\n                q[right++] = (struct Node){v, mask_v, dist + 1};\n                seen[v][mask_v] = true;\n            }\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2 \\cdot 2^n)$。常规的广度优先搜索的时间复杂度为 $O(n + m)$，其中 $n$ 和 $m$ 分别表示图的节点数和边数。本题中引入了 $\\textit{mask}$ 这一维度，其取值范围为 $[0, 2^n)$，因此可以看成是进行了 $2^n$ 次常规的广度优先搜索。由于 $m$ 的范围没有显式给出，在最坏情况下为完全图，有 $m = O(n^2)$，因此总时间复杂度为 $O(n^2 \\cdot 2^n)$。\n\n- 空间复杂度：$O(n \\cdot 2^n)$，即为队列需要使用的空间。\n\n#### 方法二：预处理点对间最短路 + 状态压缩动态规划\n\n**思路与算法**\n\n由于题目中给定的图是连通图，那么我们可以计算出任意两个节点之间 $u, v$ 间的最短距离，记为 $d(u, v)$。这样一来，我们就可以使用动态规划的方法计算出最短路径。\n\n对于任意一条经过所有节点的路径，它的某一个子序列（可以不连续）一定是 $0, 1, \\cdots, n - 1$ 的一个排列。我们称这个子序列上的节点为「关键节点」。在动态规划的过程中，我们也是通过枚举「关键节点」进行状态转移的。\n\n我们用 $f[u][\\textit{mask}]$ 表示从任一节点开始到节点 $u$ 为止，并且经过的「关键节点」对应的二进制表示为 $\\textit{mask}$ 时的最短路径长度。由于 $u$ 是最后一个「关键节点」，那么在进行状态转移时，我们可以枚举上一个「关键节点」$v$，即：\n\n$$\nf[u][\\textit{mask}] = \\min_{v \\in \\textit{mask}, v \\neq u} \\big\\{ f[v][\\textit{mask}\\backslash u] + d(v, u) \\big\\}\n$$\n\n其中 $\\textit{mask} \\backslash u$ 表示将 $\\textit{mask}$ 的第 $u$ 位从 $1$ 变为 $0$ 后的二进制表示。也就是说，「关键节点」$v$ 在 $\\textit{mask}$ 中的对应位置必须为 $1$，将 $f[v][\\textit{mask} \\backslash u]$ 加上从 $v$ 走到 $u$ 的最短路径长度为 $d(v, u)$，取最小值即为 $f[u][\\textit{mask}]$。\n\n最终的答案即为：\n\n$$\n\\min_u f[u][2^n - 1]\n$$\n\n**细节**\n\n当 $\\textit{mask}$ 中只包含一个 $1$ 时，我们无法枚举满足要求的上一个「关键节点」$v$。这里的处理方式与方法一中的类似：若 $\\textit{mask}$ 中只包含一个 $1$，说明我们位于开始的节点，还未经过任何路径，因此状态转移方程直接写为：\n\n$$\nf[u][\\textit{mask}] = 0\n$$\n\n此外，在状态转移方程中，我们需要多次求出 $d(v, u)$，因此我们可以考虑在动态规划前将所有的 $d(v, u)$ 预处理出来。这里有两种可以使用的方法，时间复杂度均为 $O(n^3)$：\n\n- 我们可以使用 $\\texttt{Floyd}$ 算法求出所有点对之间的最短路径长度；\n\n- 我们可以进行 $n$ 次广度优先搜索，第 $i$ 次从节点 $i$ 出发，也可以得到所有点对之间的最短路径长度。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph) {\n        int n = graph.size();\n        vector<vector<int>> d(n, vector<int>(n, n + 1));\n        for (int i = 0; i < n; ++i) {\n            for (int j: graph[i]) {\n                d[i][j] = 1;\n            }\n        }\n        // 使用 floyd 算法预处理出所有点对之间的最短路径长度\n        for (int k = 0; k < n; ++k) {\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    d[i][j] = min(d[i][j], d[i][k] + d[k][j]);\n                }\n            }\n        }\n\n        vector<vector<int>> f(n, vector<int>(1 << n, INT_MAX / 2));\n        for (int mask = 1; mask < (1 << n); ++mask) {\n            // 如果 mask 只包含一个 1，即 mask 是 2 的幂\n            if ((mask & (mask - 1)) == 0) {\n                int u = __builtin_ctz(mask);\n                f[u][mask] = 0;\n            }\n            else {\n                for (int u = 0; u < n; ++u) {\n                    if (mask & (1 << u)) {\n                        for (int v = 0; v < n; ++v) {\n                            if ((mask & (1 << v)) && u != v) {\n                                f[u][mask] = min(f[u][mask], f[v][mask ^ (1 << u)] + d[v][u]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        int ans = INT_MAX;\n        for (int u = 0; u < n; ++u) {\n            ans = min(ans, f[u][(1 << n) - 1]);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int shortestPathLength(int[][] graph) {\n        int n = graph.length;\n        int[][] d = new int[n][n];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(d[i], n + 1);\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j : graph[i]) {\n                d[i][j] = 1;\n            }\n        }\n        // 使用 floyd 算法预处理出所有点对之间的最短路径长度\n        for (int k = 0; k < n; ++k) {\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    d[i][j] = Math.min(d[i][j], d[i][k] + d[k][j]);\n                }\n            }\n        }\n\n        int[][] f = new int[n][1 << n];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(f[i], Integer.MAX_VALUE / 2);\n        }\n        for (int mask = 1; mask < (1 << n); ++mask) {\n            // 如果 mask 只包含一个 1，即 mask 是 2 的幂\n            if ((mask & (mask - 1)) == 0) {\n                int u = Integer.bitCount((mask & (-mask)) - 1);\n                f[u][mask] = 0;\n            } else {\n                for (int u = 0; u < n; ++u) {\n                    if ((mask & (1 << u)) != 0) {\n                        for (int v = 0; v < n; ++v) {\n                            if ((mask & (1 << v)) != 0 && u != v) {\n                                f[u][mask] = Math.min(f[u][mask], f[v][mask ^ (1 << u)] + d[v][u]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        int ans = Integer.MAX_VALUE;\n        for (int u = 0; u < n; ++u) {\n            ans = Math.min(ans, f[u][(1 << n) - 1]);\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int ShortestPathLength(int[][] graph) {\n        int n = graph.Length;\n        int[,] d = new int[n, n];\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                d[i, j] = n + 1;\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            foreach (int j in graph[i]) {\n                d[i, j] = 1;\n            }\n        }\n        // 使用 floyd 算法预处理出所有点对之间的最短路径长度\n        for (int k = 0; k < n; ++k) {\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    d[i, j] = Math.Min(d[i, j], d[i, k] + d[k, j]);\n                }\n            }\n        }\n\n        int[,] f = new int[n, 1 << n];\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < 1 << n; ++j) {\n                f[i, j] = int.MaxValue / 2;\n            }\n        }\n        for (int mask = 1; mask < (1 << n); ++mask) {\n            // 如果 mask 只包含一个 1，即 mask 是 2 的幂\n            if ((mask & (mask - 1)) == 0) {\n                int u = BitCount((mask & (-mask)) - 1);\n                f[u, mask] = 0;\n            } else {\n                for (int u = 0; u < n; ++u) {\n                    if ((mask & (1 << u)) != 0) {\n                        for (int v = 0; v < n; ++v) {\n                            if ((mask & (1 << v)) != 0 && u != v) {\n                                f[u, mask] = Math.Min(f[u, mask], f[v, mask ^ (1 << u)] + d[v, u]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        int ans = int.MaxValue;\n        for (int u = 0; u < n; ++u) {\n            ans = Math.Min(ans, f[u, (1 << n) - 1]);\n        }\n        return ans;\n    }\n\n    public static int BitCount(int i) {\n        i = i - ((i >> 1) & 0x55555555);\n        i = (i & 0x33333333) + ((i >> 2) & 0x33333333);\n        i = (i + (i >> 4)) & 0x0f0f0f0f;\n        i = i + (i >> 8);\n        i = i + (i >> 16);\n        return i & 0x3f;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n        n = len(graph)\n        d = [[n + 1] * n for _ in range(n)]\n        for i in range(n):\n            for j in graph[i]:\n                d[i][j] = 1\n        \n        # 使用 floyd 算法预处理出所有点对之间的最短路径长度\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n\n        f = [[float(\"inf\")] * (1 << n) for _ in range(n)]\n        for mask in range(1, 1 << n):\n            # 如果 mask 只包含一个 1，即 mask 是 2 的幂\n            if (mask & (mask - 1)) == 0:\n                u = bin(mask).count(\"0\") - 1\n                f[u][mask] = 0\n            else:\n                for u in range(n):\n                    if mask & (1 << u):\n                        for v in range(n):\n                            if (mask & (1 << v)) and u != v:\n                                f[u][mask] = min(f[u][mask], f[v][mask ^ (1 << u)] + d[v][u])\n\n        ans = min(f[u][(1 << n) - 1] for u in range(n))\n        return ans\n```\n\n```JavaScript [sol2-JavaScript]\nvar shortestPathLength = function(graph) {\n    const n = graph.length;\n    const d = new Array(n).fill(0).map(() => new Array(n).fill(n + 1));\n    for (let i = 0; i < n; ++i) {\n        for (const j of graph[i]) {\n            d[i][j] = 1;\n        }\n    }\n    // 使用 floyd 算法预处理出所有点对之间的最短路径长度\n    for (let k = 0; k < n; ++k) {\n        for (let i = 0; i < n; ++i) {\n            for (let j = 0; j < n; ++j) {\n                d[i][j] = Math.min(d[i][j], d[i][k] + d[k][j]);\n            }\n        }\n    }\n\n    const f = new Array(n).fill(0).map(() => new Array(1 << n).fill(Number.MAX_SAFE_INTEGER));\n    for (let mask = 1; mask < (1 << n); ++mask) {\n        // 如果 mask 只包含一个 1，即 mask 是 2 的幂\n        if ((mask & (mask - 1)) === 0) {\n            const tmp = (mask & (-mask)) - 1;\n            const u = tmp.toString(2).split('0').join('').length;\n            f[u][mask] = 0;\n        } else {\n            for (let u = 0; u < n; ++u) {\n                if ((mask & (1 << u)) !== 0) {\n                    for (let v = 0; v < n; ++v) {\n                        if ((mask & (1 << v)) !== 0 && u !== v) {\n                            f[u][mask] = Math.min(f[u][mask], f[v][mask ^ (1 << u)] + d[v][u]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    let ans = Number.MAX_SAFE_INTEGER;\n    for (let u = 0; u < n; ++u) {\n        ans = Math.min(ans, f[u][(1 << n) - 1]);\n    }\n    return ans;\n};\n```\n\n```go [sol2-Golang]\nfunc shortestPathLength(graph [][]int) int {\n    n := len(graph)\n    d := make([][]int, n)\n    for i := range d {\n        d[i] = make([]int, n)\n        for j := range d[i] {\n            d[i][j] = n + 1\n        }\n    }\n    for v, nodes := range graph {\n        for _, u := range nodes {\n            d[v][u] = 1\n        }\n    }\n\n    // 使用 floyd 算法预处理出所有点对之间的最短路径长度\n    for k := range d {\n        for i := range d {\n            for j := range d {\n                d[i][j] = min(d[i][j], d[i][k]+d[k][j])\n            }\n        }\n    }\n\n    f := make([][]int, n)\n    for i := range f {\n        f[i] = make([]int, 1<<n)\n        for j := range f[i] {\n            f[i][j] = math.MaxInt64 / 2\n        }\n    }\n    for mask := 1; mask < 1<<n; mask++ {\n        // 如果 mask 只包含一个 1，即 mask 是 2 的幂\n        if mask&(mask-1) == 0 {\n            i := bits.TrailingZeros(uint(mask))\n            f[i][1<<i] = 0\n            continue\n        }\n        for u := 0; u < n; u++ {\n            if mask>>u&1 > 0 {\n                for v := 0; v < n; v++ {\n                    if v != u && mask>>v&1 > 0 {\n                        f[u][mask] = min(f[u][mask], f[v][mask^(1<<u)]+d[v][u])\n                    }\n                }\n            }\n        }\n    }\n    ans := math.MaxInt64\n    for u := 0; u < n; u++ {\n        ans = min(ans, f[u][1<<n-1])\n    }\n    return ans\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol2-C]\nstruct Node {\n    int id, mask, dist;\n};\n\nint shortestPathLength(int** graph, int graphSize, int* graphColSize){\n    int n = graphSize;\n    int d[n][n];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            d[i][j] = n + 1;\n        }\n        for (int j = 0; j < graphColSize[i]; j++) {\n            d[i][graph[i][j]] = 1;\n        }\n    }\n    // 使用 floyd 算法预处理出所有点对之间的最短路径长度\n    for (int k = 0; k < n; ++k) {\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                d[i][j] = fmin(d[i][j], d[i][k] + d[k][j]);\n            }\n        }\n    }\n\n    int f[n][1 << n];\n    memset(f, 0x3f, sizeof(f));\n    for (int mask = 1; mask < (1 << n); ++mask) {\n        // 如果 mask 只包含一个 1，即 mask 是 2 的幂\n        if ((mask & (mask - 1)) == 0) {\n            int u = __builtin_ctz(mask);\n            f[u][mask] = 0;\n        }\n        else {\n            for (int u = 0; u < n; ++u) {\n                if (mask & (1 << u)) {\n                    for (int v = 0; v < n; ++v) {\n                        if ((mask & (1 << v)) && u != v) {\n                            f[u][mask] = fmin(f[u][mask], f[v][mask ^ (1 << u)] + d[v][u]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    int ans = INT_MAX;\n    for (int u = 0; u < n; ++u) {\n        ans = fmin(ans, f[u][(1 << n) - 1]);\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2 \\cdot 2^n)$。状态的总数为 $O(n \\cdot 2^n)$，对于每一个状态，我们需要 $O(n)$ 的时间枚举 $v$ 进行状态转移，因此总时间复杂度 $O(n^2 \\cdot 2^n)$。\n\n    预处理所有 $d(u, v)$ 的时间复杂度为 $O(n^3)$，但其在渐近意义下小于 $O(n^2 \\cdot 2^n)$，因此可以忽略。\n\n- 空间复杂度：$O(n \\cdot 2^n)$，即为存储所有状态需要使用的空间。"
}