{
	"titleSlug": "partition-array-for-maximum-sum",
	"slug": "ji-yi-hua-sou-suo-dong-tai-gui-hua-shuan-6dgo",
	"url": "https://leetcode-cn.com/problems/partition-array-for-maximum-sum/solution/ji-yi-hua-sou-suo-dong-tai-gui-hua-shuan-6dgo/",
	"content": "# 思路\r\n定义```F(0, n)```为该问题在区间```[0, n]```的解, 假设```k = 3```, ```n > 3```, 则:\r\n```F(0, n) = max{F(0, 0) + F(1, n), F(0, 1) + F(2, n), F(0, 2) + F(3, n)}```\r\n```F(0, 0)```, ```F(0, 1)```, ```F(0, 2)```是已知的, 分别是从下标0开始, 划分子数组长度为1、2、3时, 该问题的解。 \r\n从```F(0, n)```的定义式我们可以看出, 求解```F(0, n)```等价于求解```F(1, n)```, ```F(2, n)```, ```F(3, n)```。\r\n**一个问题转化为了规模更小的子问题**，想到了什么？\r\n**递归!**\r\n有了以上分析，我们可以肯定，该问题一定可以使用递归的方法求解, 这是毫无疑问的。\r\n还有一个性质:**记忆化递归和动态规划是等价的，记忆化递归可以做的，都可以转化为动态规划，反之亦然。**\r\n\r\n下面给出两种解法的代码:\r\n# 1.记忆化搜索\r\n```\r\nclass Solution {\r\npublic:\r\n    int res = 0;\r\n    int maxSumAfterPartitioning(vector<int>& arr, int k) {\r\n        int n = arr.size();\r\n        vector<vector<int>> maxVal(n, vector<int>(n, 0));\r\n        vector<int> memory(n, -1);\r\n        // 求区间[i, j]中的最大值\r\n        for (int i = 0; i < n; ++i) {\r\n            int maxNum = arr[i];\r\n            for (int j = i; j < n; ++j) {\r\n                if (arr[j] > maxNum) maxNum = arr[j];\r\n                maxVal[i][j] = maxNum;\r\n            }\r\n        }\r\n        return dfs(maxVal, memory, n, k, 0);\r\n    }\r\n\r\n    int dfs(vector<vector<int>>& maxVal, vector<int>& memory, int n, int k, int start) {\r\n        if (start >= n) return 0;\r\n        if (memory[start] != -1) return memory[start];\r\n        int maxNum = -1;\r\n        for (int i = 1; i <= k; ++i) {\r\n            int end = std::min(start + i - 1, n - 1);\r\n            int len = end - start + 1;\r\n            maxNum = std::max(maxNum, len * maxVal[start][end] + dfs(maxVal, memory, n, k, end + 1));\r\n        }\r\n        memory[start] = maxNum;\r\n        return maxNum;\r\n    }\r\n};\r\n```\r\n\r\n# 2.动态规划\r\n```\r\nclass Solution {\r\npublic:\r\n    int maxSumAfterPartitioning(vector<int>& arr, int k) {\r\n        int n = arr.size();\r\n        vector<vector<int>> maxVal(n, vector<int>(n, 0));\r\n        vector<int> memory(n, -1);\r\n        // 求区间最大值\r\n        for (int i = 0; i < n; ++i) {\r\n            int maxNum = arr[i];\r\n            for (int j = i; j < n; ++j) {\r\n                if (arr[j] > maxNum) maxNum = arr[j];\r\n                maxVal[i][j] = maxNum;\r\n            }\r\n        }\r\n        \r\n        vector<int> dp(n, 0);\r\n        for (int i = 0; i < k; ++i) {\r\n            int start = 0;\r\n            int end = start + i;\r\n            int len = end - start + 1;\r\n            int maxNum = maxVal[start][end];\r\n            dp[i] = maxNum * len;\r\n        }\r\n        for (int i = k; i < n; ++i) {\r\n            for (int j = 1; j <= k; ++j) {\r\n                int start = i - (j - 1);\r\n                int end = i;\r\n                int maxNum = maxVal[start][end];\r\n                dp[i] = std::max(dp[i], maxNum * j + dp[start - 1]);\r\n            }\r\n        }\r\n        return dp[n - 1];\r\n    }\r\n};\r\n```\r\n# 总结\r\n**动态规划的本质就是记忆化的递归**，因为动态规划的思想是从上到下地构造问题的解，从下到上地解决问题，这和递归的思路是完全一样的。因此, 所有记忆化递归可以解决的问题，都可以用动态规划来解决，反之亦然，只要注意递归式和状态转移方程的相互转化就可以了。递推式和状态转移方程是等价的。\r\n\r\n之前写过一篇类似的题解，可以帮助加深认识两者的联系[1770. 执行乘法运算的最大分数](https://leetcode-cn.com/problems/maximum-score-from-performing-multiplication-operations/solution/ji-yi-hua-di-gui-chao-shi-zhuan-dong-tai-60ru/)\r\n\r\n如果能给我一个赞，那将是对我最大的鼓励^_^"
}