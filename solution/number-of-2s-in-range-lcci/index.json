{
	"titleSlug": "number-of-2s-in-range-lcci",
	"slug": "by-endlesscheng-x4mf",
	"url": "https://leetcode-cn.com/problems/number-of-2s-in-range-lcci/solution/by-endlesscheng-x4mf/",
	"content": "更新：[周赛精讲](https://www.bilibili.com/video/BV1rS4y1s721) 出炉啦，欢迎一键三连~\r\n本节讲了数位 DP 的通用模板，以及如何使用该模板秒杀相关困难题目。\r\n讲完题目后还讲了一些上分的训练技巧。\r\n\r\n--- \r\n\r\n将 $n$ 转换成字符串 $s$，定义 $f(i,\\textit{cnt}_2, \\textit{isLimit}, \\textit{isNum})$ 表示构造从左往右第 $i$ 位及其之后数位中的 $2$ 的个数，其余参数的含义为：\r\n\r\n- $\\textit{cnt}_2$ 表示前面填了多少个 $2$。\r\n- $\\textit{isLimit}$ 表示当前是否受到了 $n$ 的约束。若为真，则第 $i$ 位填入的数字至多为 $s[i]$，否则可以是 $9$。如果在受到约束的情况下填了 $s[i]$，那么后续填入的数字仍会受到 $n$ 的约束。\r\n- $\\textit{isNum}$ 表示 $i$ 前面的数位是否填了数字。若为假，则当前位可以跳过（不填数字），或者要填入的数字至少为 $1$；若为真，则要填入的数字可以从 $0$ 开始。\r\n\r\n后面两个参数可适用于其它数位 DP 题目。\r\n\r\n枚举要填入的数字，具体实现逻辑见代码。**对于本题来说，由于前导零对答案无影响，$\\textit{isNum}$ 可以省略。**\r\n\r\n下面代码中 Java/C++/Go 只需要记忆化 $(i,\\textit{cnt}_2)$ 这个状态，因为：\r\n\r\n1. 对于一个固定的 $(i,\\textit{cnt}_2)$，这个状态受到 $\\textit{isLimit}$ 的约束在整个递归过程中至多会出现一次，没必要记忆化。\r\n2. 另外，如果只记忆化 $(i,\\textit{cnt}_2)$，$\\textit{dp}$ 数组的含义就变成**在不受到约束时**的合法方案数，所以要在 `!isLimit` 成立时才去记忆化。\r\n\r\n#### 附：力扣上的数位 DP 题目\r\n\r\n- [233. 数字 1 的个数](https://leetcode.cn/problems/number-of-digit-one/)（[题解](https://leetcode.cn/problems/number-of-digit-one/solution/by-endlesscheng-h9ua/)）\r\n- [600. 不含连续1的非负整数](https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/)（[题解](https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/solution/by-endlesscheng-1egu/)）\r\n- [902. 最大为 N 的数字组合](https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/)（[周赛精讲](https://www.bilibili.com/video/BV1rS4y1s721) 中讲了）\r\n- [1012. 至少有 1 位重复的数字](https://leetcode.cn/problems/numbers-with-repeated-digits/)（[题解](https://leetcode.cn/problems/numbers-with-repeated-digits/solution/by-endlesscheng-c5vg/)，包含 $\\textit{isNum}$ 的用法）\r\n- [1067. 范围内的数字计数](https://leetcode.cn/problems/digit-count-in-range/)\r\n- [1397. 找到所有好字符串](https://leetcode.cn/problems/find-all-good-strings/)（有难度，需要结合一个知名字符串算法）\r\n\r\n更多的题目见我的算法竞赛模板库中的 [dp.go](https://github.com/EndlessCheng/codeforces-go/blob/master/copypasta/dp.go#L1731)（搜索 `数位`）。\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def numberOf2sInRange(self, n: int) -> int:\r\n        s = str(n)\r\n        @cache\r\n        def f(i: int, cnt2: int, is_limit: bool) -> int:\r\n            if i == len(s):\r\n                return cnt2\r\n            res = 0\r\n            up = int(s[i]) if is_limit else 9\r\n            for d in range(up + 1):  # 枚举要填入的数字 d\r\n                res += f(i + 1, cnt2 + (d == 2), is_limit and d == up)\r\n            return res\r\n        return f(0, 0, True)\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    char s[];\r\n    int dp[][];\r\n\r\n    public int numberOf2sInRange(int n) {\r\n        s = Integer.toString(n).toCharArray();\r\n        var m = s.length;\r\n        dp = new int[m][m];\r\n        for (var i = 0; i < m; i++) Arrays.fill(dp[i], -1);\r\n        return f(0, 0, true);\r\n    }\r\n\r\n    int f(int i, int cnt2, boolean isLimit) {\r\n        if (i == s.length) return cnt2;\r\n        if (!isLimit && dp[i][cnt2] >= 0) return dp[i][cnt2];\r\n        var res = 0;\r\n        for (int d = 0, up = isLimit ? s[i] - '0' : 9; d <= up; ++d) // 枚举要填入的数字 d\r\n            res += f(i + 1, cnt2 + (d == 2 ? 1 : 0), isLimit && d == up);\r\n        if (!isLimit) dp[i][cnt2] = res;\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n```cpp [sol1-C++]\r\nclass Solution {\r\npublic:\r\n    int numberOf2sInRange(int n) {\r\n        auto s = to_string(n);\r\n        int m = s.length(), dp[m][m];\r\n        memset(dp, -1, sizeof(dp));\r\n        function<int(int, int, bool)> f = [&](int i, int cnt2, bool is_limit) -> int {\r\n            if (i == m) return cnt2;\r\n            if (!is_limit && dp[i][cnt2] >= 0) return dp[i][cnt2];\r\n            int res = 0;\r\n            for (int d = 0, up = is_limit ? s[i] - '0' : 9; d <= up; ++d) // 枚举要填入的数字 d\r\n                res += f(i + 1, cnt2 + (d == 2), is_limit && d == up);\r\n            if (!is_limit) dp[i][cnt2] = res;\r\n            return res;\r\n        };\r\n        return f(0, 0, true);\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc numberOf2sInRange(n int) int {\r\n    s := strconv.Itoa(n)\r\n    m := len(s)\r\n    dp := make([][]int, m)\r\n    for i := range dp {\r\n        dp[i] = make([]int, m)\r\n        for j := range dp[i] {\r\n            dp[i][j] = -1\r\n        }\r\n    }\r\n    var f func(int, int, bool) int\r\n    f = func(i, cnt2 int, isLimit bool) (res int) {\r\n        if i == m {\r\n            return cnt2\r\n        }\r\n        if !isLimit {\r\n            dv := &dp[i][cnt2]\r\n            if *dv >= 0 {\r\n                return *dv\r\n            }\r\n            defer func() { *dv = res }()\r\n        }\r\n        up := 9\r\n        if isLimit {\r\n            up = int(s[i] - '0')\r\n        }\r\n        for d := 0; d <= up; d++ { // 枚举要填入的数字 d\r\n            c := cnt2\r\n            if d == 2 {\r\n                c++\r\n            }\r\n            res += f(i+1, c, isLimit && d == up)\r\n        }\r\n        return\r\n    }\r\n    return f(0, 0, true)\r\n}\r\n```\r\n"
}