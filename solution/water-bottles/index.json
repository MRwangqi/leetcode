{
	"titleSlug": "water-bottles",
	"slug": "by-stormsunshine-flni",
	"url": "https://leetcode-cn.com/problems/water-bottles/solution/by-stormsunshine-flni/",
	"content": "# 解法一\r\n\r\n## 思路和算法\r\n\r\n最直观的做法是遍历换水的过程。\r\n\r\n用 $\\textit{waterBottles}$ 表示一共喝到多少瓶水，用 $\\textit{emptyBottles}$ 表示空水瓶数，初始时 $\\textit{waterBottles} = \\textit{emptyBottles} = 0$。每一轮换水的过程中，$\\textit{numBottles}$ 表示装满水的水瓶数。\r\n\r\n每一轮换水的过程如下。\r\n\r\n1. 喝 $\\textit{numBottles}$ 瓶水，产生 $\\textit{numBottles}$ 个空水瓶，因此将 $\\textit{waterBottles}$ 和 $\\textit{emptyBottles}$ 各增加 $\\textit{numBottles}$。\r\n\r\n2. 此时有 $\\textit{emptyBottles}$ 个空水瓶，可以兑换 $\\Big\\lfloor \\dfrac{\\textit{emptyBottles}}{\\textit{numExchange}} \\Big\\rfloor$ 个装满水的水瓶，剩余 $\\textit{emptyBottles} \\bmod \\textit{numExchange}$ 个空水瓶，因此将 $\\textit{numBottles}$ 更新为 $\\Big\\lfloor \\dfrac{\\textit{emptyBottles}}{\\textit{numExchange}} \\Big\\rfloor$，然后将 $\\textit{emptyBottles}$ 更新为 $\\textit{emptyBottles} \\bmod \\textit{numExchange}$。\r\n\r\n换水的过程可以持续的条件是 $\\textit{numBottles} > 0$。当 $\\textit{numBottles} = 0$ 时，不能喝到更多的水，换水的过程结束，此时最多能喝到 $\\textit{waterBottles}$ 瓶水。\r\n\r\n## 代码\r\n\r\n```Java [sol1-Java]\r\nclass Solution {\r\n    public int numWaterBottles(int numBottles, int numExchange) {\r\n        int waterBottles = 0;\r\n        int emptyBottles = 0;\r\n        while (numBottles > 0) {\r\n            waterBottles += numBottles;\r\n            emptyBottles += numBottles;\r\n            numBottles = emptyBottles / numExchange;\r\n            emptyBottles %= numExchange;\r\n        }\r\n        return waterBottles;\r\n    }\r\n}\r\n```\r\n\r\n```C# [sol1-C#]\r\npublic class Solution {\r\n    public int NumWaterBottles(int numBottles, int numExchange) {\r\n        int waterBottles = 0;\r\n        int emptyBottles = 0;\r\n        while (numBottles > 0) {\r\n            waterBottles += numBottles;\r\n            emptyBottles += numBottles;\r\n            numBottles = emptyBottles / numExchange;\r\n            emptyBottles %= numExchange;\r\n        }\r\n        return waterBottles;\r\n    }\r\n}\r\n```\r\n\r\n## 复杂度分析\r\n\r\n- 时间复杂度：$O(\\textit{numBottles}^\\frac{1}{\\textit{numExchange}})$，其中 $\\textit{numBottles}$ 是初始水瓶数，$\\textit{numExchange}$ 是兑换装满水的水瓶的空水瓶数。每一轮的空水瓶数都不会超过 $\\textit{numBottles}$，因此每一轮都会将 $\\textit{numBottles}$ 除以 $\\textit{numExchange}$。\r\n\r\n- 空间复杂度：$O(1)$。\r\n\r\n# 解法二\r\n\r\n## 思路和算法\r\n\r\n由于初始时 $\\textit{numBottles}$ 个水瓶都装满水，因此可以喝 $\\textit{numBottles}$ 瓶水，产生 $\\textit{numBottles}$ 个空瓶。计算 $\\textit{numBottles}$ 个空瓶可以兑换多少瓶水，加上 $\\textit{numBottles}$ 之后即可得到最多能喝到多少瓶水。\r\n\r\n当 $\\textit{numBottles} < \\textit{numExchange}$ 时，无法使用空瓶兑换装满水的水瓶，只有当 $\\textit{numBottles} \\ge \\textit{numExchange}$ 时才能使用空瓶兑换装满水的水瓶。以下只考虑 $\\textit{numBottles} \\ge \\textit{numExchange}$ 的情况。\r\n\r\n每次使用 $\\textit{numExchange}$ 个空水瓶兑换一个装满水的水瓶，效果是喝到的水增加一瓶，空水瓶减少 $\\textit{numExchange} - 1$ 个。假设最多可以兑换 $k$ 次，则 $k$ 是满足 $\\textit{numBottles} - k \\times (\\textit{numExchange} - 1) < \\textit{numExchange}$ 的最小的正整数，因此 $k > \\dfrac{\\textit{numBottles} - \\textit{numExchange}}{\\textit{numExchange} - 1}$，正整数 $k$ 的最小值是 $\\Big\\lfloor \\dfrac{\\textit{numBottles} - \\textit{numExchange}}{\\textit{numExchange} - 1} \\Big\\rfloor + 1 = \\Big\\lfloor \\dfrac{\\textit{numBottles} - 1}{\\textit{numExchange} - 1} \\Big\\rfloor$。\r\n\r\n由于当 $\\textit{numBottles} < \\textit{numExchange}$ 时，$\\Big\\lfloor \\dfrac{\\textit{numBottles} - 1}{\\textit{numExchange} - 1} \\Big\\rfloor = 0$，因此对于任意给定的 $\\textit{numBottles}$ 和 $\\textit{numExchange}$，$\\textit{numBottles}$ 个空瓶可以兑换 $\\Big\\lfloor \\dfrac{\\textit{numBottles} - 1}{\\textit{numExchange} - 1} \\Big\\rfloor$ 瓶水。\r\n\r\n最多能喝到 $\\textit{numBottles} + \\Big\\lfloor \\dfrac{\\textit{numBottles} - 1}{\\textit{numExchange} - 1} \\Big\\rfloor$ 瓶水。\r\n\r\n## 代码\r\n\r\n```Java [sol2-Java]\r\nclass Solution {\r\n    public int numWaterBottles(int numBottles, int numExchange) {\r\n        return numBottles + (numBottles - 1) / (numExchange - 1);\r\n    }\r\n}\r\n```\r\n\r\n```C# [sol2-C#]\r\npublic class Solution {\r\n    public int NumWaterBottles(int numBottles, int numExchange) {\r\n        return numBottles + (numBottles - 1) / (numExchange - 1);\r\n    }\r\n}\r\n```\r\n\r\n## 复杂度分析\r\n\r\n- 时间复杂度：$O(1)$。\r\n\r\n- 空间复杂度：$O(1)$。"
}