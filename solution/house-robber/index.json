{
	"titleSlug": "house-robber",
	"slug": "dong-tai-gui-hua-jie-ti-si-bu-zou-xiang-jie-cjavap",
	"url": "https://leetcode-cn.com/problems/house-robber/solution/dong-tai-gui-hua-jie-ti-si-bu-zou-xiang-jie-cjavap/",
	"content": "如果你对于动态规划还不是很了解，或者没怎么做过动态规划的题目的话，那么 House Robber （小偷问题）这道题是一个非常好的入门题目。本文会以 House Robber 题目为例子，讲解动态规划题目的四个基本步骤。\n\n动态规划的的四个解题步骤是：\n\n+ 定义子问题\n+ 写出子问题的递推关系\n+ 确定 DP 数组的计算顺序\n+ 空间优化（可选）\n\n下面我们一步一步地进行讲解。\n\n#### 步骤一：定义子问题\n\n稍微接触过一点动态规划的朋友都知道动态规划有一个“子问题”的定义。什么是子问题？子问题是和原问题相似，但规模较小的问题。例如这道小偷问题，原问题是“从全部房子中能偷到的最大金额”，将问题的规模缩小，子问题就是“从 $k$ 个房子中能偷到的最大金额”，用 $f(k)$ 表示。\n\n![小偷问题的子问题定义](https://pic.leetcode-cn.com/91c71fba111b52580bd0f99bd77f386ae26055b6ffb015c3df9dc26204e8465a.jpg)\n\n可以看到，子问题是参数化的，我们定义的子问题中有参数 $k$。假设一共有 $n$ 个房子的话，就一共有 $n$ 个子问题。动态规划实际上就是通过求这一堆子问题的解，来求出原问题的解。这要求子问题需要具备两个性质：\n\n+ 原问题要能由子问题表示。例如这道小偷问题中，$k=n$ 时实际上就是原问题。否则，解了半天子问题还是解不出原问题，那子问题岂不是白解了。\n+ 一个子问题的解要能通过其他子问题的解求出。例如这道小偷问题中，$f(k)$ 可以由 $f(k-1)$ 和 $f(k-2)$ 求出，具体原理后面会解释。这个性质就是教科书中所说的“最优子结构”。如果定义不出这样的子问题，那么这道题实际上没法用动态规划解。\n\n小偷问题由于比较简单，定义子问题实际上是很直观的。一些比较难的动态规划题目可能需要一些定义子问题的技巧。\n\n#### 步骤二：写出子问题的递推关系\n\n这一步是求解动态规划问题最关键的一步。然而，这一步也是最无法在代码中体现出来的一步。在做题的时候，最好把这一步的思路用注释的形式写下来。做动态规划题目不要求快，而要确保无误。否则，写代码五分钟，找 bug 半小时，岂不美哉？\n\n我们来分析一下这道小偷问题的递推关系：\n\n假设一共有 $n$ 个房子，每个房子的金额分别是 $H_0, H_1, \\dots, H_{n-1}$，子问题 $f(k)$ 表示从前 $k$ 个房子（即 $H_0, H_1, \\dots, H_{k-1}$）中能偷到的最大金额。那么，偷 $k$ 个房子有两种偷法：\n\n![子问题的递推关系](https://pic.leetcode-cn.com/ccceac397062b8ac6d369506f5481be5e473d4f9b35751da7861a681bbecc3e8.jpg)\n\n$k$ 个房子中最后一个房子是 $H_{k-1}$。如果不偷这个房子，那么问题就变成在前 $k-1$ 个房子中偷到最大的金额，也就是子问题 $f(k-1)$。如果偷这个房子，那么前一个房子 $H_{k-2}$ 显然不能偷，其他房子不受影响。那么问题就变成在前 $k-2$ 个房子中偷到的最大的金额。两种情况中，选择金额较大的一种结果。\n$$\nf(k) = \\max \\{ f(k-1), H_{k-1} + f(k-2) \\}\n$$\n\n在写递推关系的时候，要注意写上 $k=0$ 和 $k=1$ 的基本情况：\n\n+ 当 $k=0$ 时，没有房子，所以 $f(0) = 0$。\n+ 当 $k=1$ 时，只有一个房子，偷这个房子即可，所以 $f(1) = H_0$。\n\n这样才能构成完整的递推关系，后面写代码也不容易在边界条件上出错。\n\n#### 步骤三：确定 DP 数组的计算顺序\n\n在确定了子问题的递推关系之后，下一步就是依次计算出这些子问题了。在很多教程中都会写，动态规划有两种计算顺序，一种是自顶向下的、使用备忘录的递归方法，一种是自底向上的、使用 dp 数组的循环方法。不过**在普通的动态规划题目中，99% 的情况我们都不需要用到备忘录方法**，所以我们最好坚持用自底向上的 dp 数组。\n\nDP 数组也可以叫”子问题数组”，因为 DP 数组中的每一个元素都对应一个子问题。如下图所示，`dp[k]` 对应子问题 $f(k)$，即偷前 $k$ 间房子的最大金额。\n\n![DP 数组与子问题的对应关系](https://pic.leetcode-cn.com/a0d29f1322a7938733fd62f3b2de8b04f678591e40cdf4062810e8d9608e4b5e.jpg)\n\n那么，只要搞清楚了子问题的计算顺序，就可以确定 DP 数组的计算顺序。对于小偷问题，我们分析子问题的依赖关系，发现每个 $f(k)$ 依赖 $f(k-1)$ 和 $f(k-2)$。也就是说，`dp[k]` 依赖 `dp[k-1]` 和 `dp[k-2]`，如下图所示。\n\n![DP 数组的依赖顺序](https://pic.leetcode-cn.com/daa19672855195ae1496f6a3f112dbe9fe0e16e9541238002acaac44f22be613.jpg)\n\n那么，既然 DP 数组中的依赖关系都是向右指的，DP 数组的计算顺序就是从左向右。这样我们可以保证，计算一个子问题的时候，它所依赖的那些子问题已经计算出来了。\n\n确定了 DP 数组的计算顺序之后，我们就可以写出题解代码了：\n\n```C++ []\nint rob(vector<int>& nums) {\n    if (nums.size() == 0) {\n        return 0;\n    }\n    // 子问题：\n    // f(k) = 偷 [0..k) 房间中的最大金额\n\n    // f(0) = 0\n    // f(1) = nums[0]\n    // f(k) = max{ rob(k-1), nums[k-1] + rob(k-2) }\n\n    int N = nums.size();\n    vector<int> dp(N+1, 0);\n    dp[0] = 0;\n    dp[1] = nums[0];\n    for (int k = 2; k <= N; k++) {\n        dp[k] = max(dp[k-1], nums[k-1] + dp[k-2]);\n    }\n    return dp[N];\n}\n```\n\n```Java []\npublic int rob(int[] nums) {\n    if (nums.length == 0) {\n        return 0;\n    }\n    // 子问题：\n    // f(k) = 偷 [0..k) 房间中的最大金额\n\n    // f(0) = 0\n    // f(1) = nums[0]\n    // f(k) = max{ rob(k-1), nums[k-1] + rob(k-2) }\n\n    int N = nums.length;\n    int[] dp = new int[N+1];\n    dp[0] = 0;\n    dp[1] = nums[0];\n    for (int k = 2; k <= N; k++) {\n        dp[k] = Math.max(dp[k-1], nums[k-1] + dp[k-2]);\n    }\n    return dp[N];\n}\n```\n\n```Python []\ndef rob(self, nums: List[int]) -> int:\n    if len(nums) == 0:\n        return 0\n\n    # 子问题：\n    # f(k) = 偷 [0..k) 房间中的最大金额\n\n    # f(0) = 0\n    # f(1) = nums[0]\n    # f(k) = max{ rob(k-1), nums[k-1] + rob(k-2) }\n\n    N = len(nums)\n    dp = [0] * (N+1)\n    dp[0] = 0\n    dp[1] = nums[0]\n    for k in range(2, N+1):\n        dp[k] = max(dp[k-1], nums[k-1] + dp[k-2])\n    return dp[N]\n```\n\n#### 步骤四：空间优化\n\n空间优化是动态规划问题的进阶内容了。对于初学者来说，可以不掌握这部分内容。\n\n空间优化的基本原理是，很多时候我们并不需要始终持有全部的 DP 数组。对于小偷问题，我们发现，最后一步计算 $f(n)$ 的时候，实际上只用到了 $f(n-1)$ 和 $f(n-2)$ 的结果。$n-3$ 之前的子问题，实际上早就已经用不到了。那么，我们可以只用两个变量保存两个子问题的结果，就可以依次计算出所有的子问题。下面的动图比较了空间优化前和优化后的对比关系：\n\n![空间优化前后对比（动图）](https://pic.leetcode-cn.com/3dcbb1028ed9cdac95fdc8c8348ccc6f2e4c50b3fd8222e5690257d6b495090a.gif)\n\n这样一来，空间复杂度也从 $O(n)$ 降到了 $O(1)$。优化后的代码如下所示：\n\n```C++ []\nint rob(vector<int>& nums) {\n    int prev = 0;\n    int curr = 0;\n\n    // 每次循环，计算“偷到当前房子为止的最大金额”\n    for (int i : nums) {\n        // 循环开始时，curr 表示 dp[k-1]，prev 表示 dp[k-2]\n        // dp[k] = max{ dp[k-1], dp[k-2] + i }\n        int temp = max(curr, prev + i);\n        prev = curr;\n        curr = temp;\n        // 循环结束时，curr 表示 dp[k]，prev 表示 dp[k-1]\n    }\n\n    return curr;\n}\n```\n\n```Java []\npublic int rob(int[] nums) {\n    int prev = 0;\n    int curr = 0;\n\n    // 每次循环，计算“偷到当前房子为止的最大金额”\n    for (int i : nums) {\n        // 循环开始时，curr 表示 dp[k-1]，prev 表示 dp[k-2]\n        // dp[k] = max{ dp[k-1], dp[k-2] + i }\n        int temp = Math.max(curr, prev + i);\n        prev = curr;\n        curr = temp;\n        // 循环结束时，curr 表示 dp[k]，prev 表示 dp[k-1]\n    }\n\n    return curr;\n}\n```\n\n```Python []\ndef rob(self, nums: List[int]) -> int:\n    prev = 0\n    curr = 0\n    \n    # 每次循环，计算“偷到当前房子为止的最大金额”\n    for i in nums:\n        # 循环开始时，curr 表示 dp[k-1]，prev 表示 dp[k-2]\n        # dp[k] = max{ dp[k-1], dp[k-2] + i }\n        prev, curr = curr, max(curr, prev + i)\n        # 循环结束时，curr 表示 dp[k]，prev 表示 dp[k-1]\n\n    return curr\n```\n\n---\n"
}