{
	"titleSlug": "backspace-string-compare",
	"slug": "bi-jiao-han-tui-ge-de-zi-fu-chuan-by-leetcode-solu",
	"url": "https://leetcode-cn.com/problems/backspace-string-compare/solution/bi-jiao-han-tui-ge-de-zi-fu-chuan-by-leetcode-solu/",
	"content": "#### 方法一：重构字符串\n\n**思路及算法**\n\n最容易想到的方法是将给定的字符串中的退格符和应当被删除的字符都去除，还原给定字符串的一般形式。然后直接比较两字符串是否相等即可。\n\n具体地，我们用栈处理遍历过程，每次我们遍历到一个字符：\n\n- 如果它是退格符，那么我们将栈顶弹出；\n\n- 如果它是普通字符，那么我们将其压入栈中。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool backspaceCompare(string S, string T) {\n        return build(S) == build(T);\n    }\n\n    string build(string str) {\n        string ret;\n        for (char ch : str) {\n            if (ch != '#') {\n                ret.push_back(ch);\n            } else if (!ret.empty()) {\n                ret.pop_back();\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean backspaceCompare(String S, String T) {\n        return build(S).equals(build(T));\n    }\n\n    public String build(String str) {\n        StringBuffer ret = new StringBuffer();\n        int length = str.length();\n        for (int i = 0; i < length; ++i) {\n            char ch = str.charAt(i);\n            if (ch != '#') {\n                ret.append(ch);\n            } else {\n                if (ret.length() > 0) {\n                    ret.deleteCharAt(ret.length() - 1);\n                }\n            }\n        }\n        return ret.toString();\n    }\n}\n```\n\n```Golang [sol1-Golang]\nfunc build(str string) string {\n    s := []byte{}\n    for i := range str {\n        if str[i] != '#' {\n            s = append(s, str[i])\n        } else if len(s) > 0 {\n            s = s[:len(s)-1]\n        }\n    }\n    return string(s)\n}\n\nfunc backspaceCompare(s, t string) bool {\n    return build(s) == build(t)\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        def build(s: str) -> str:\n            ret = list()\n            for ch in s:\n                if ch != \"#\":\n                    ret.append(ch)\n                elif ret:\n                    ret.pop()\n            return \"\".join(ret)\n        \n        return build(S) == build(T)\n```\n\n```C [sol1-C]\nchar* build(char* str) {\n    int n = strlen(str), len = 0;\n    char* ret = malloc(sizeof(char) * (n + 1));\n    for (int i = 0; i < n; i++) {\n        if (str[i] != '#') {\n            ret[len++] = str[i];\n        } else if (len > 0) {\n            len--;\n        }\n    }\n    ret[len] = '\\0';\n    return ret;\n}\n\nbool backspaceCompare(char* S, char* T) {\n    return strcmp(build(S), build(T)) == 0;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N+M)$，其中 $N$ 和 $M$ 分别为字符串 $S$ 和 $T$ 的长度。我们需要遍历两字符串各一次。\n\n- 空间复杂度：$O(N+M)$，其中 $N$ 和 $M$ 分别为字符串 $S$ 和 $T$ 的长度。主要为还原出的字符串的开销。\n\n#### 方法二：双指针\n\n**思路及算法**\n\n一个字符是否会被删掉，只取决于该字符后面的退格符，而与该字符前面的退格符无关。因此当我们逆序地遍历字符串，就可以立即确定当前字符是否会被删掉。\n\n具体地，我们定义 $\\textit{skip}$ 表示当前待删除的字符的数量。每次我们遍历到一个字符：\n\n- 若该字符为退格符，则我们需要多删除一个普通字符，我们让 $\\textit{skip}$ 加 $1$；\n\n- 若该字符为普通字符：\n  \n  - 若 $\\textit{skip}$ 为 $0$，则说明当前字符不需要删去；\n\n  - 若 $\\textit{skip}$ 不为 $0$，则说明当前字符需要删去，我们让 $\\textit{skip}$ 减 $1$。\n\n这样，我们定义两个指针，分别指向两字符串的末尾。每次我们让两指针逆序地遍历两字符串，直到两字符串能够各自确定一个字符，然后将这两个字符进行比较。重复这一过程直到找到的两个字符不相等，或遍历完字符串为止。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/844/1.gif)\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool backspaceCompare(string S, string T) {\n        int i = S.length() - 1, j = T.length() - 1;\n        int skipS = 0, skipT = 0;\n\n        while (i >= 0 || j >= 0) {\n            while (i >= 0) {\n                if (S[i] == '#') {\n                    skipS++, i--;\n                } else if (skipS > 0) {\n                    skipS--, i--;\n                } else {\n                    break;\n                }\n            }\n            while (j >= 0) {\n                if (T[j] == '#') {\n                    skipT++, j--;\n                } else if (skipT > 0) {\n                    skipT--, j--;\n                } else {\n                    break;\n                }\n            }\n            if (i >= 0 && j >= 0) {\n                if (S[i] != T[j]) {\n                    return false;\n                }\n            } else {\n                if (i >= 0 || j >= 0) {\n                    return false;\n                }\n            }\n            i--, j--;\n        }\n        return true;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean backspaceCompare(String S, String T) {\n        int i = S.length() - 1, j = T.length() - 1;\n        int skipS = 0, skipT = 0;\n\n        while (i >= 0 || j >= 0) {\n            while (i >= 0) {\n                if (S.charAt(i) == '#') {\n                    skipS++;\n                    i--;\n                } else if (skipS > 0) {\n                    skipS--;\n                    i--;\n                } else {\n                    break;\n                }\n            }\n            while (j >= 0) {\n                if (T.charAt(j) == '#') {\n                    skipT++;\n                    j--;\n                } else if (skipT > 0) {\n                    skipT--;\n                    j--;\n                } else {\n                    break;\n                }\n            }\n            if (i >= 0 && j >= 0) {\n                if (S.charAt(i) != T.charAt(j)) {\n                    return false;\n                }\n            } else {\n                if (i >= 0 || j >= 0) {\n                    return false;\n                }\n            }\n            i--;\n            j--;\n        }\n        return true;\n    }\n}\n```\n\n```Golang [sol2-Golang]\nfunc backspaceCompare(s, t string) bool {\n    skipS, skipT := 0, 0\n    i, j := len(s)-1, len(t)-1\n    for i >= 0 || j >= 0 {\n        for i >= 0 {\n            if s[i] == '#' {\n                skipS++\n                i--\n            } else if skipS > 0 {\n                skipS--\n                i--\n            } else {\n                break\n            }\n        }\n        for j >= 0 {\n            if t[j] == '#' {\n                skipT++\n                j--\n            } else if skipT > 0 {\n                skipT--\n                j--\n            } else {\n                break\n            }\n        }\n        if i >= 0 && j >= 0 {\n            if s[i] != t[j] {\n                return false\n            }\n        } else if i >= 0 || j >= 0 {\n            return false\n        }\n        i--\n        j--\n    }\n    return true\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def backspaceCompare(self, S: str, T: str) -> bool:\n        i, j = len(S) - 1, len(T) - 1\n        skipS = skipT = 0\n\n        while i >= 0 or j >= 0:\n            while i >= 0:\n                if S[i] == \"#\":\n                    skipS += 1\n                    i -= 1\n                elif skipS > 0:\n                    skipS -= 1\n                    i -= 1\n                else:\n                    break\n            while j >= 0:\n                if T[j] == \"#\":\n                    skipT += 1\n                    j -= 1\n                elif skipT > 0:\n                    skipT -= 1\n                    j -= 1\n                else:\n                    break\n            if i >= 0 and j >= 0:\n                if S[i] != T[j]:\n                    return False\n            elif i >= 0 or j >= 0:\n                return False\n            i -= 1\n            j -= 1\n        \n        return True\n```\n\n```C [sol2-C]\nbool backspaceCompare(char* S, char* T) {\n    int i = strlen(S) - 1, j = strlen(T) - 1;\n    int skipS = 0, skipT = 0;\n\n    while (i >= 0 || j >= 0) {\n        while (i >= 0) {\n            if (S[i] == '#') {\n                skipS++, i--;\n            } else if (skipS > 0) {\n                skipS--, i--;\n            } else {\n                break;\n            }\n        }\n        while (j >= 0) {\n            if (T[j] == '#') {\n                skipT++, j--;\n            } else if (skipT > 0) {\n                skipT--, j--;\n            } else {\n                break;\n            }\n        }\n        if (i >= 0 && j >= 0) {\n            if (S[i] != T[j]) {\n                return false;\n            }\n        } else {\n            if (i >= 0 || j >= 0) {\n                return false;\n            }\n        }\n        i--, j--;\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N+M)$，其中 $N$ 和 $M$ 分别为字符串 $S$ 和 $T$ 的长度。我们需要遍历两字符串各一次。\n\n- 空间复杂度：$O(1)$。对于每个字符串，我们只需要定义一个指针和一个计数器即可。"
}