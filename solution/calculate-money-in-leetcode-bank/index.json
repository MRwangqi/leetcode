{
	"titleSlug": "calculate-money-in-leetcode-bank",
	"slug": "ji-suan-li-kou-yin-xing-de-qian-by-leetc-xogx",
	"url": "https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/solution/ji-suan-li-kou-yin-xing-de-qian-by-leetc-xogx/",
	"content": "#### 方法一：暴力计算\n\n记当前的天数是第 $\\textit{week}$ 周的第 $\\textit{day}$ 天。我们从第一周的星期一开始存钱，记 $\\textit{week} = 1$，$\\textit{day} = 1$。一周内，每一天比前一天多存 $1$ 块钱。而每个周一，会比前一个周一多存 $1$ 块钱。因此，每天存的钱等于 $\\textit{week} + \\textit{day} - 1$。把每天存的钱相加就可以得到答案。\n\n```Python [sol1-Python3]\nclass Solution:\n    def totalMoney(self, n: int) -> int:\n        week, day = 1, 1\n        res = 0\n        for i in range(n):\n            res += week + day - 1\n            day += 1\n            if day == 8:\n                day = 1\n                week += 1\n        return res\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int totalMoney(int n) {\n        int week = 1, day = 1;\n        int res = 0;\n        for (int i = 0; i < n; ++i) {\n            res += week + day - 1;\n            ++day;\n            if (day == 8) {\n                day = 1;\n                ++week;\n            }\n        }\n        return res;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int TotalMoney(int n) {\n        int week = 1, day = 1;\n        int res = 0;\n        for (int i = 0; i < n; ++i) {\n            res += week + day - 1;\n            ++day;\n            if (day == 8) {\n                day = 1;\n                ++week;\n            }\n        }\n        return res;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int totalMoney(int n) {\n        int week = 1, day = 1;\n        int res = 0;\n        for (int i = 0; i < n; ++i) {\n            res += week + day - 1;\n            ++day;\n            if (day == 8) {\n                day = 1;\n                ++week;\n            }\n        }\n        return res;\n    }\n};\n```\n\n```C [sol1-C]\nint totalMoney(int n){\n    int week = 1, day = 1;\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        res += week + day - 1;\n        ++day;\n        if (day == 8) {\n            day = 1;\n            ++week;\n        }\n    }\n    return res;\n}\n```\n\n```go [sol1-Golang]\nfunc totalMoney(n int) (ans int) {\n    week, day := 1, 1\n    for i := 0; i < n; i++ {\n        ans += week + day - 1\n        day++\n        if day == 8 {\n            day = 1\n            week++\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar totalMoney = function(n) {\n    let week = 1, day = 1;\n    let res = 0;\n    for (let i = 0; i < n; ++i) {\n        res += week + day - 1;\n        ++day;\n        if (day === 8) {\n            day = 1;\n            ++week;\n        }\n    }\n    return res;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。需要遍历一次 $n$ 得到答案。\n\n- 空间复杂度：$O(1)$。只需要用到常数空间。\n\n#### 方法二：等差数列求和进行优化\n\n因为每周七天存的钱之和比上一周多 $7$ 块，因此每周存的钱之和的序列是一个等差数列，我们可以用等差数列求和公式来求出所有完整的周存的钱总和。剩下的天数里，每天存的钱也是一个等差数列，可以用相同的公式进行求和。最后把两者相加可以得到答案。\n\n```Python [sol2-Python3]\nclass Solution:\n    def totalMoney(self, n: int) -> int:\n        # 所有完整的周存的钱\n        weekNumber = n // 7\n        firstWeekMoney = (1 + 7) * 7 // 2\n        lastWeekMoney = firstWeekMoney + 7 * (weekNumber - 1)\n        weekMoney = (firstWeekMoney + lastWeekMoney) * weekNumber // 2\n        # 剩下的不能构成一个完整的周的天数里存的钱\n        dayNumber = n % 7\n        firstDayMoney = 1 + weekNumber\n        lastDayMoney = firstDayMoney + dayNumber - 1\n        dayMoney = (firstDayMoney + lastDayMoney) * dayNumber // 2\n        return weekMoney + dayMoney\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int totalMoney(int n) {\n        // 所有完整的周存的钱\n        int weekNumber = n / 7;\n        int firstWeekMoney = (1 + 7) * 7 / 2;\n        int lastWeekMoney = firstWeekMoney + 7 * (weekNumber - 1);\n        int weekMoney = (firstWeekMoney + lastWeekMoney) * weekNumber / 2;\n        // 剩下的不能构成一个完整的周的天数里存的钱\n        int dayNumber = n % 7;\n        int firstDayMoney = 1 + weekNumber;\n        int lastDayMoney = firstDayMoney + dayNumber - 1;\n        int dayMoney = (firstDayMoney + lastDayMoney) * dayNumber / 2;\n        return weekMoney + dayMoney;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int TotalMoney(int n) {\n        // 所有完整的周存的钱\n        int weekNumber = n / 7;\n        int firstWeekMoney = (1 + 7) * 7 / 2;\n        int lastWeekMoney = firstWeekMoney + 7 * (weekNumber - 1);\n        int weekMoney = (firstWeekMoney + lastWeekMoney) * weekNumber / 2;\n        // 剩下的不能构成一个完整的周的天数里存的钱\n        int dayNumber = n % 7;\n        int firstDayMoney = 1 + weekNumber;\n        int lastDayMoney = firstDayMoney + dayNumber - 1;\n        int dayMoney = (firstDayMoney + lastDayMoney) * dayNumber / 2;\n        return weekMoney + dayMoney;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int totalMoney(int n) {\n        // 所有完整的周存的钱\n        int weekNumber = n / 7;\n        int firstWeekMoney = (1 + 7) * 7 / 2;\n        int lastWeekMoney = firstWeekMoney + 7 * (weekNumber - 1);\n        int weekMoney = (firstWeekMoney + lastWeekMoney) * weekNumber / 2;\n        // 剩下的不能构成一个完整的周的天数里存的钱\n        int dayNumber = n % 7;\n        int firstDayMoney = 1 + weekNumber;\n        int lastDayMoney = firstDayMoney + dayNumber - 1;\n        int dayMoney = (firstDayMoney + lastDayMoney) * dayNumber / 2;\n        return weekMoney + dayMoney;\n    }\n};\n```\n\n```C [sol2-C]\nint totalMoney(int n){\n    // 所有完整的周存的钱\n    int weekNumber = n / 7;\n    int firstWeekMoney = (1 + 7) * 7 / 2;\n    int lastWeekMoney = firstWeekMoney + 7 * (weekNumber - 1);\n    int weekMoney = (firstWeekMoney + lastWeekMoney) * weekNumber / 2;\n    // 剩下的不能构成一个完整的周的天数里存的钱\n    int dayNumber = n % 7;\n    int firstDayMoney = 1 + weekNumber;\n    int lastDayMoney = firstDayMoney + dayNumber - 1;\n    int dayMoney = (firstDayMoney + lastDayMoney) * dayNumber / 2;\n    return weekMoney + dayMoney;\n}\n```\n\n```go [sol2-Golang]\nfunc totalMoney(n int) (ans int) {\n    // 所有完整的周存的钱\n    weekNum := n / 7\n    firstWeekMoney := (1 + 7) * 7 / 2\n    lastWeekMoney := firstWeekMoney + 7*(weekNum-1)\n    weekMoney := (firstWeekMoney + lastWeekMoney) * weekNum / 2\n    // 剩下的不能构成一个完整的周的天数里存的钱\n    dayNum := n % 7\n    firstDayMoney := 1 + weekNum\n    lastDayMoney := firstDayMoney + dayNum - 1\n    dayMoney := (firstDayMoney + lastDayMoney) * dayNum / 2\n    return weekMoney + dayMoney\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar totalMoney = function(n) {\n    // 所有完整的周存的钱\n    const weekNumber = Math.floor(n / 7);\n    const firstWeekMoney = Math.floor((1 + 7) * 7 / 2);\n    const lastWeekMoney = firstWeekMoney + 7 * (weekNumber - 1);\n    const weekMoney = Math.floor((firstWeekMoney + lastWeekMoney) * weekNumber / 2);\n    // 剩下的不能构成一个完整的周的天数里存的钱\n    const dayNumber = n % 7;\n    const firstDayMoney = 1 + weekNumber;\n    const lastDayMoney = firstDayMoney + dayNumber - 1;\n    const dayMoney = Math.floor((firstDayMoney + lastDayMoney) * dayNumber / 2);\n    return weekMoney + dayMoney;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。只需要用到常数时间。\n\n- 空间复杂度：$O(1)$。只需要用到常数空间。"
}