{
	"titleSlug": "student-attendance-record-i",
	"slug": "xue-sheng-chu-qin-ji-lu-i-by-leetcode-so-fcol",
	"url": "https://leetcode-cn.com/problems/student-attendance-record-i/solution/xue-sheng-chu-qin-ji-lu-i-by-leetcode-so-fcol/",
	"content": "#### 方法一：一次遍历\n\n可奖励的出勤记录要求缺勤次数少于 $2$ 和连续迟到次数少于 $3$。判断出勤记录是否可奖励，只需要遍历出勤记录，判断这两个条件是否同时满足即可。\n\n遍历过程中，记录缺勤次数和连续迟到次数，根据遍历到的字符更新缺勤次数和连续迟到次数：\n\n- 如果遇到 $\\text{`A'}$，即缺勤，则将缺勤次数加 $1$，否则缺勤次数不变；\n\n- 如果遇到 $\\text{`L'}$，即迟到，则将连续迟到次数加 $1$，否则将连续迟到次数清零。\n\n如果在更新缺勤次数和连续迟到次数之后，出现缺勤次数大于或等于 $2$ 或者连续迟到次数大于或等于 $3$，则该出勤记录不满足可奖励的要求，返回 $\\text{false}$。如果遍历结束时未出现出勤记录不满足可奖励的要求的情况，则返回 $\\text{true}$。\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean checkRecord(String s) {\n        int absents = 0, lates = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            if (c == 'A') {\n                absents++;\n                if (absents >= 2) {\n                    return false;\n                }\n            }\n            if (c == 'L') {\n                lates++;\n                if (lates >= 3) {\n                    return false;\n                }\n            } else {\n                lates = 0;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool CheckRecord(string s) {\n        int absents = 0, lates = 0;\n        int n = s.Length;\n        for (int i = 0; i < n; i++) {\n            char c = s[i];\n            if (c == 'A') {\n                absents++;\n                if (absents >= 2) {\n                    return false;\n                }\n            }\n            if (c == 'L') {\n                lates++;\n                if (lates >= 3) {\n                    return false;\n                }\n            } else {\n                lates = 0;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar checkRecord = function(s) {\n    let absents = 0, lates = 0;\n    const n = s.length;\n    for (let i = 0; i < n; i++) {\n        const c = s[i];\n        if (c === 'A') {\n            absents++;\n            if (absents >= 2) {\n                return false;\n            }\n        }\n        if (c === 'L') {\n            lates++;\n            if (lates >= 3) {\n                return false;\n            }\n        } else {\n            lates = 0;\n        }\n    }\n    return true;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def checkRecord(self, s: str) -> bool:\n        absents = lates = 0\n        for i, c in enumerate(s):\n            if c == \"A\":\n                absents += 1\n                if absents >= 2:\n                    return False\n            if c == \"L\":\n                lates += 1\n                if lates >= 3:\n                    return False\n            else:\n                lates = 0\n        \n        return True\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool checkRecord(string s) {\n        int absents = 0, lates = 0;\n        for (auto &ch : s) {\n            if (ch == 'A') {\n                absents++;\n                if (absents >= 2) {\n                    return false;\n                }\n            }\n            if (ch == 'L') {\n                lates++;\n                if (lates >= 3) {\n                    return false;\n                }\n            } else {\n                lates = 0;\n            }\n        }\n        return true;\n    }\n};\n```\n\n```C [sol1-C]\nbool checkRecord(char* s) {\n    int absents = 0, lates = 0;\n    int n = strlen(s);\n    for (int i = 0; i < n; i++) {\n        char c = s[i];\n        if (c == 'A') {\n            absents++;\n            if (absents >= 2) {\n                return false;\n            }\n        }\n        if (c == 'L') {\n            lates++;\n            if (lates >= 3) {\n                return false;\n            }\n        } else {\n            lates = 0;\n        }\n    }\n    return true;\n}\n```\n\n```go [sol1-Golang]\nfunc checkRecord(s string) bool {\n    absents, lates := 0, 0\n    for _, ch := range s {\n        if ch == 'A' {\n            absents++\n            if absents >= 2 {\n                return false\n            }\n        }\n        if ch == 'L' {\n            lates++\n            if lates >= 3 {\n                return false\n            }\n        } else {\n            lates = 0\n        }\n    }\n    return true\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度。需要遍历字符串 $s$ 一次。\n\n- 空间复杂度：$O(1)$。"
}