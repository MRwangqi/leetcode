{
	"titleSlug": "count-lattice-points-inside-a-circle",
	"slug": "mei-ju-suo-you-dian-by-endlesscheng-u049",
	"url": "https://leetcode-cn.com/problems/count-lattice-points-inside-a-circle/solution/mei-ju-suo-you-dian-by-endlesscheng-u049/",
	"content": "先按半径从大到小排序，这样可以更早地遇到包含当前枚举的点的圆。\r\n\r\n```python [sol1-Python3]\r\nclass Solution:\r\n    def countLatticePoints(self, circles: List[List[int]]) -> int:\r\n        ans = 0\r\n        circles.sort(key=lambda c: -c[2])  # 按半径从大到小排序，这样能更早遇到包含 (i,j) 的圆\r\n        max_x = max(c[0] + c[2] for c in circles)\r\n        max_y = max(c[1] + c[2] for c in circles)\r\n        for i in range(max_x + 1):\r\n            for j in range(max_y + 1):\r\n                for x, y, r in circles:\r\n                    if (x - i) * (x - i) + (y - j) * (y - j) <= r * r:\r\n                        ans += 1\r\n                        break\r\n        return ans\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc countLatticePoints(circles [][]int) (ans int) {\r\n\t// 按半径从大到小排序，这样能更早遇到包含 (x,y) 的圆\r\n\tsort.Slice(circles, func(i, j int) bool { return circles[i][2] > circles[j][2] })\r\n\tfor x := 0; x <= 200; x++ {\r\n\t\tfor y := 0; y <= 200; y++ {\r\n\t\t\tfor _, c := range circles {\r\n\t\t\t\t// 判断 (x,y) 是否在圆 c 内\r\n\t\t\t\tif (x-c[0])*(x-c[0])+(y-c[1])*(y-c[1]) <= c[2]*c[2] {\r\n\t\t\t\t\tans++\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn\r\n}\r\n```"
}