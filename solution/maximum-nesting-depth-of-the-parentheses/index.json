{
	"titleSlug": "maximum-nesting-depth-of-the-parentheses",
	"slug": "gua-hao-de-zui-da-qian-tao-shen-du-by-le-av5b",
	"url": "https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/solution/gua-hao-de-zui-da-qian-tao-shen-du-by-le-av5b/",
	"content": "#### 方法一：遍历\n\n对于括号计算类题目，我们往往可以用栈来思考。\n\n遍历字符串 $s$，如果遇到了一个左括号，那么就将其入栈；如果遇到了一个右括号，那么就弹出栈顶的左括号，与该右括号匹配。这一过程中的栈的大小的最大值，即为 $s$ 的嵌套深度。\n\n代码实现时，由于我们只需要考虑栈的大小，我们可以用一个变量 $\\textit{size}$ 表示栈的大小，当遇到左括号时就将其加一，遇到右括号时就将其减一，从而表示栈中元素的变化。这一过程中 $\\textit{size}$ 的最大值即为 $s$ 的嵌套深度。\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxDepth(self, s: str) -> int:\n        ans, size = 0, 0\n        for ch in s:\n            if ch == '(':\n                size += 1\n                ans = max(ans, size)\n            elif ch == ')':\n                size -= 1\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxDepth(string s) {\n        int ans = 0, size = 0;\n        for (char ch : s) {\n            if (ch == '(') {\n                ++size;\n                ans = max(ans, size);\n            } else if (ch == ')') {\n                --size;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxDepth(String s) {\n        int ans = 0, size = 0;\n        for (int i = 0; i < s.length(); ++i) {\n            char ch = s.charAt(i);\n            if (ch == '(') {\n                ++size;\n                ans = Math.max(ans, size);\n            } else if (ch == ')') {\n                --size;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MaxDepth(string s) {\n        int ans = 0, size = 0;\n        foreach (char ch in s) {\n            if (ch == '(') {\n                ++size;\n                ans = Math.Max(ans, size);\n            } else if (ch == ')') {\n                --size;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc maxDepth(s string) (ans int) {\n    size := 0\n    for _, ch := range s {\n        if ch == '(' {\n            size++\n            if size > ans {\n                ans = size\n            }\n        } else if ch == ')' {\n            size--\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n\nint maxDepth(char * s){\n    int ans = 0, size = 0;\n    int n = strlen(s);\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '(') {\n            ++size;\n            ans = MAX(ans, size);\n        } else if (s[i] == ')') {\n            --size;\n        }\n    }\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxDepth = function(s) {\n    let ans = 0, size = 0;\n    for (let i = 0; i < s.length; ++i) {\n        const ch = s[i];\n        if (ch === '(') {\n            ++size;\n            ans = Math.max(ans, size);\n        } else if (ch === ')') {\n            --size;\n        }\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $\\textit{s}$ 的长度。\n\n- 空间复杂度：$O(1)$。我们只需要常数空间来存放若干变量。"
}