{
	"titleSlug": "flatten-a-multilevel-doubly-linked-list",
	"slug": "bian-ping-hua-duo-ji-shuang-xiang-lian-b-383h",
	"url": "https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/solution/bian-ping-hua-duo-ji-shuang-xiang-lian-b-383h/",
	"content": "#### 方法一：深度优先搜索\n\n**思路与算法**\n\n当我们遍历到某个节点 $\\textit{node}$ 时，如果它的 $\\textit{child}$ 成员不为空，那么我们需要将 $\\textit{child}$ 指向的链表结构进行扁平化，并且插入 $\\textit{node}$ 与 $\\textit{node}$ 的下一个节点之间。\n\n因此，我们在遇到 $\\textit{child}$ 成员不为空的节点时，就要先去处理 $\\textit{child}$ 指向的链表结构，这就是一个「深度优先搜索」的过程。当我们完成了对 $\\textit{child}$ 指向的链表结构的扁平化之后，就可以「回溯」到 $\\textit{node}$ 节点。\n\n为了能够将扁平化的链表插入 $\\textit{node}$ 与 $\\textit{node}$ 的下一个节点之间，我们需要知道扁平化的链表的最后一个节点 $\\textit{last}$，随后进行如下的三步操作：\n\n- 将 $\\textit{node}$ 与 $\\textit{node}$ 的下一个节点 $\\textit{next}$ 断开：\n\n- 将 $\\textit{node}$ 与 $\\textit{child}$ 相连；\n\n- 将 $\\textit{last}$ 与 $\\textit{next}$ 相连。\n\n这样一来，我们就可以将扁平化的链表成功地插入。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/430/1.png)\n\n在深度优先搜索完成后，我们返回给定的首节点即可。\n\n**细节**\n\n需要注意的是，$\\textit{node}$ 可能没有下一个节点，即 $\\textit{next}$ 为空。此时，我们只需进行第二步操作。\n\n此外，在插入扁平化的链表后，我们需要将 $\\textit{node}$ 的 $\\textit{child}$ 成员置为空。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    Node* flatten(Node* head) {\n        function<Node*(Node*)> dfs = [&](Node* node) {\n            Node* cur = node;\n            // 记录链表的最后一个节点\n            Node* last = nullptr;\n\n            while (cur) {\n                Node* next = cur->next;\n                //  如果有子节点，那么首先处理子节点\n                if (cur->child) {\n                    Node* child_last = dfs(cur->child);\n\n                    next = cur->next;\n                    //  将 node 与 child 相连\n                    cur->next = cur->child;\n                    cur->child->prev = cur;\n\n                    //  如果 next 不为空，就将 last 与 next 相连\n                    if (next) {\n                        child_last->next = next;\n                        next->prev = child_last;\n                    }\n\n                    // 将 child 置为空\n                    cur->child = nullptr;\n                    last = child_last;\n                }\n                else {\n                    last = cur;\n                }\n                cur = next;\n            }\n            return last;\n        };\n\n        dfs(head);\n        return head;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public Node flatten(Node head) {\n        dfs(head);\n        return head;\n    }\n\n    public Node dfs(Node node) {\n        Node cur = node;\n        // 记录链表的最后一个节点\n        Node last = null;\n\n        while (cur != null) {\n            Node next = cur.next;\n            //  如果有子节点，那么首先处理子节点\n            if (cur.child != null) {\n                Node childLast = dfs(cur.child);\n\n                next = cur.next;\n                //  将 node 与 child 相连\n                cur.next = cur.child;\n                cur.child.prev = cur;\n\n                //  如果 next 不为空，就将 last 与 next 相连\n                if (next != null) {\n                    childLast.next = next;\n                    next.prev = childLast;\n                }\n\n                // 将 child 置为空\n                cur.child = null;\n                last = childLast;\n            } else {\n                last = cur;\n            }\n            cur = next;\n        }\n        return last;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public Node Flatten(Node head) {\n        DFS(head);\n        return head;\n    }\n\n    public Node DFS(Node node) {\n        Node cur = node;\n        // 记录链表的最后一个节点\n        Node last = null;\n\n        while (cur != null) {\n            Node next = cur.next;\n            //  如果有子节点，那么首先处理子节点\n            if (cur.child != null) {\n                Node childLast = DFS(cur.child);\n\n                next = cur.next;\n                //  将 node 与 child 相连\n                cur.next = cur.child;\n                cur.child.prev = cur;\n\n                //  如果 next 不为空，就将 last 与 next 相连\n                if (next != null) {\n                    childLast.next = next;\n                    next.prev = childLast;\n                }\n\n                // 将 child 置为空\n                cur.child = null;\n                last = childLast;\n            } else {\n                last = cur;\n            }\n            cur = next;\n        }\n        return last;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def flatten(self, head: \"Node\") -> \"Node\":\n        def dfs(node: \"Node\") -> \"Node\":\n            cur = node\n            # 记录链表的最后一个节点\n            last = None\n\n            while cur:\n                nxt = cur.next\n                # 如果有子节点，那么首先处理子节点\n                if cur.child:\n                    child_last = dfs(cur.child)\n                    \n                    nxt = cur.next\n                    # 将 node 与 child 相连\n                    cur.next = cur.child\n                    cur.child.prev = cur\n\n                    # 如果 nxt 不为空，就将 last 与 nxt 相连\n                    if nxt:\n                        child_last.next = nxt\n                        nxt.prev = child_last\n\n                    # 将 child 置为空\n                    cur.child = None\n                    last = child_last\n                else:\n                    last = cur\n                cur = nxt\n\n            return last\n\n        dfs(head)\n        return head\n```\n\n```JavaScript [sol1-JavaScript]\nvar flatten = function(head) {\n    const dfs = (node) => {\n        let cur = node;\n        // 记录链表的最后一个节点\n        let last = null;\n\n        while (cur) {\n            let next = cur.next;\n            //  如果有子节点，那么首先处理子节点\n            if (cur.child) {\n                const childLast = dfs(cur.child);\n\n                next = cur.next;\n                //  将 node 与 child 相连\n                cur.next = cur.child;\n                cur.child.prev = cur;\n\n                //  如果 next 不为空，就将 last 与 next 相连\n                if (next != null) {\n                    childLast.next = next;\n                    next.prev = childLast;\n                }\n\n                // 将 child 置为空\n                cur.child = null;\n                last = childLast;\n            } else {\n                last = cur;\n            }\n            cur = next;\n\n        }\n        return last;\n    }\n\n    dfs(head);\n    return head;\n};\n```\n\n```go [sol1-Golang]\nfunc dfs(node *Node) (last *Node) {\n    cur := node\n    for cur != nil {\n        next := cur.Next\n        // 如果有子节点，那么首先处理子节点\n        if cur.Child != nil {\n            childLast := dfs(cur.Child)\n\n            next = cur.Next\n            // 将 node 与 child 相连\n            cur.Next = cur.Child\n            cur.Child.Prev = cur\n\n            // 如果 next 不为空，就将 last 与 next 相连\n            if next != nil {\n                childLast.Next = next\n                next.Prev = childLast\n            }\n\n            // 将 child 置为空\n            cur.Child = nil\n            last = childLast\n        } else {\n            last = cur\n        }\n        cur = next\n    }\n    return\n}\n\nfunc flatten(root *Node) *Node {\n    dfs(root)\n    return root\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表中的节点个数。\n\n- 空间复杂度：$O(n)$。上述代码中使用的空间为深度优先搜索中的栈空间，如果给定的链表的「深度」为 $d$，那么空间复杂度为 $O(d)$。在最换情况下，链表中的每个节点的 $\\textit{next}$ 都为空，且除了最后一个节点外，每个节点的 $\\textit{child}$ 都不为空，整个链表的深度为 $n$，因此时间复杂度为 $O(n)$。"
}