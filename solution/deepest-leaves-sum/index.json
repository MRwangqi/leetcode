{
	"titleSlug": "deepest-leaves-sum",
	"slug": "ceng-shu-zui-shen-xie-zi-jie-dian-de-he-by-leetc-2",
	"url": "https://leetcode-cn.com/problems/deepest-leaves-sum/solution/ceng-shu-zui-shen-xie-zi-jie-dian-de-he-by-leetc-2/",
	"content": "#### 方法一：深度优先搜索\n\n由于层数最深的节点一定是叶节点，因此只要找到所有层数最深的节点并计算节点值之和即可。\n\n可以使用深度优先搜索实现。从根节点开始遍历整个二叉树，遍历每个节点时需要记录该节点的层数，规定根节点在第 $0$ 层。遍历过程中维护最大层数与最深节点之和。\n\n对于每个非空节点，执行如下操作。\n\n1. 判断当前节点的层数与最大层数的关系：\n\n   - 如果当前节点的层数大于最大层数，则之前遍历到的节点都不是层数最深的节点，因此用当前节点的层数更新最大层数，并将最深节点之和更新为当前节点值；\n\n   - 如果当前节点的层数等于最大层数，则将当前节点值加到最深节点之和。\n\n2. 对当前节点的左右子节点继续深度优先搜索。\n\n遍历结束之后，即可得到层数最深叶子节点的和。\n\n```Python [sol1-Python3]\nclass Solution:\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:\n        maxLevel, ans = -1, 0\n        def dfs(node: Optional[TreeNode], level: int) -> None:\n            if node is None:\n                return\n            nonlocal maxLevel, ans\n            if level > maxLevel:\n                maxLevel, ans = level, node.val\n            elif level == maxLevel:\n                ans += node.val\n            dfs(node.left, level + 1)\n            dfs(node.right, level + 1)\n        dfs(root, 0)\n        return ans\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int maxLevel = -1;\n    int sum = 0;\n\n    public int deepestLeavesSum(TreeNode root) {\n        dfs(root, 0);\n        return sum;\n    }\n\n    public void dfs(TreeNode node, int level) {\n        if (node == null) {\n            return;\n        }\n        if (level > maxLevel) {\n            maxLevel = level;\n            sum = node.val;\n        } else if (level == maxLevel) {\n            sum += node.val;\n        }\n        dfs(node.left, level + 1);\n        dfs(node.right, level + 1);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    int maxLevel = -1;\n    int sum = 0;\n\n    public int DeepestLeavesSum(TreeNode root) {\n        DFS(root, 0);\n        return sum;\n    }\n\n    public void DFS(TreeNode node, int level) {\n        if (node == null) {\n            return;\n        }\n        if (level > maxLevel) {\n            maxLevel = level;\n            sum = node.val;\n        } else if (level == maxLevel) {\n            sum += node.val;\n        }\n        DFS(node.left, level + 1);\n        DFS(node.right, level + 1);\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    int maxLevel = -1;\n    int sum = 0;\n\npublic:\n    int deepestLeavesSum(TreeNode* root) {\n        dfs(root, 0);\n        return sum;\n    }\n\n    void dfs(TreeNode* node, int level) {\n        if (node == nullptr) {\n            return;\n        }\n        if (level > maxLevel) {\n            maxLevel = level;\n            sum = node->val;\n        } else if (level == maxLevel) {\n            sum += node->val;\n        }\n        dfs(node->left, level + 1);\n        dfs(node->right, level + 1);\n    }\n};\n```\n\n```C [sol1-C]\nvoid dfs(struct TreeNode* node, int level, int* maxLevel, int* sum) {\n    if (node == NULL) {\n        return;\n    }\n    if (level > *maxLevel) {\n        *maxLevel = level;\n        *sum = node->val;\n    } else if (level == *maxLevel) {\n        *sum += node->val;\n    }\n    dfs(node->left, level + 1, maxLevel, sum);\n    dfs(node->right, level + 1, maxLevel, sum);\n}\n\nint deepestLeavesSum(struct TreeNode* root){\n    int maxLevel = -1;\n    int sum = 0;\n    dfs(root, 0, &maxLevel, &sum);\n    return sum;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar deepestLeavesSum = function(root) {\n    let maxLevel = -1;\n    let sum = 0;\n    const dfs = (node, level) => {\n        if (!node) {\n            return;\n        }\n        if (level > maxLevel) {\n            maxLevel = level;\n            sum = node.val;\n        } else if (level === maxLevel) {\n            sum += node.val;\n        }\n        dfs(node.left, level + 1);\n        dfs(node.right, level + 1);\n    }\n    dfs(root, 0);\n    return sum;\n};\n```\n\n```go [sol1-Golang]\nfunc deepestLeavesSum(root *TreeNode) (sum int) {\n    maxLevel := -1\n    var dfs func(*TreeNode, int)\n    dfs = func(node *TreeNode, level int) {\n        if node == nil {\n            return\n        }\n        if level > maxLevel {\n            maxLevel = level\n            sum = node.Val\n        } else if level == maxLevel {\n            sum += node.Val\n        }\n        dfs(node.Left, level+1)\n        dfs(node.Right, level+1)\n    }\n    dfs(root, 0)\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。深度优先搜索需要遍历每个节点一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。空间复杂度主要取决于递归调用栈的深度，为二叉树的深度，最坏情况下二叉树的深度是 $O(n)$。\n\n#### 方法二：广度优先搜索\n\n计算最深节点之和也可以使用广度优先搜索实现。使用广度优先搜索时，对二叉树层序遍历，此时不需要维护最大层数，只需要确保每一轮遍历的节点是同一层的全部节点，则最后一轮遍历的节点是全部最深节点。\n\n初始时，将根节点加入队列，此时队列中只有一个节点，是同一层的全部节点。每一轮遍历时，首先得到队列中的节点个数 $\\textit{size}$，从队列中取出 $\\textit{size}$ 个节点，则这 $\\textit{size}$ 个节点是同一层的全部节点，记为第 $x$ 层。遍历时，第 $x$ 层的每个节点的子节点都在第 $x + 1$ 层，将子节点加入队列，则该轮遍历结束之后，第 $x$ 层的节点全部从队列中取出，第 $x + 1$ 层的节点全部加入队列，队列中的节点是同一层的全部节点。因此该方法可以确保每一轮遍历的节点是同一层的全部节点。\n\n遍历过程中，分别计算每一层的节点之和，则遍历结束时的节点之和即为层数最深叶子节点的和。\n\n```Python [sol2-Python3]\nclass Solution:\n    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:\n        q = deque([root])\n        while q:\n            ans = 0\n            for _ in range(len(q)):\n                node = q.popleft()\n                ans += node.val\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return ans\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int deepestLeavesSum(TreeNode root) {\n        int sum = 0;\n        Queue<TreeNode> queue = new ArrayDeque<TreeNode>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            sum = 0;\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                sum += node.val;\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n            }\n        }\n        return sum;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int DeepestLeavesSum(TreeNode root) {\n        int sum = 0;\n        Queue<TreeNode> queue = new Queue<TreeNode>();\n        queue.Enqueue(root);\n        while (queue.Count > 0) {\n            sum = 0;\n            int size = queue.Count;\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.Dequeue();\n                sum += node.val;\n                if (node.left != null) {\n                    queue.Enqueue(node.left);\n                }\n                if (node.right != null) {\n                    queue.Enqueue(node.right);\n                }\n            }\n        }\n        return sum;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int deepestLeavesSum(TreeNode* root) {\n        int sum = 0;\n        queue<TreeNode*> qu;\n        qu.emplace(root);\n        while (!qu.empty()) {\n            sum = 0;\n            int size = qu.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode *node = qu.front();\n                qu.pop();\n                sum += node->val;\n                if (node->left != nullptr) {\n                    qu.emplace(node->left);\n                }\n                if (node->right != nullptr) {\n                    qu.emplace(node->right);\n                }\n            }\n        }\n        return sum;\n    }\n};\n```\n\n```C [sol2-C]\n#define MAX_NODE_SIZE 10001\n\nint deepestLeavesSum(struct TreeNode* root){\n    int sum = 0;\n    struct TreeNode **queue = (struct TreeNode **)malloc(sizeof(struct TreeNode *) * MAX_NODE_SIZE);\n    int head = 0, tail = 0;\n    queue[tail++] = root;\n    while (head != tail) {\n        sum = 0;\n        int size = tail - head;\n        for (int i = 0; i < size; i++) {\n            struct TreeNode *node = queue[head++];\n            sum += node->val;\n            if (node->left != NULL) {\n                queue[tail++] = node->left;\n            }\n            if (node->right != NULL) {\n                queue[tail++] = node->right;\n            }\n        }\n    }\n    free(queue);\n    return sum;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar deepestLeavesSum = function(root) {\n    let sum = 0;\n    const queue = [];\n    queue.push(root);\n    while (queue.length) {\n        sum = 0;\n        const size = queue.length;\n        for (let i = 0; i < size; i++) {\n            const node = queue.shift();\n            sum += node.val;\n            if (node.left) {\n                queue.push(node.left);\n            }\n            if (node.right) {\n                queue.push(node.right);\n            }\n        }\n    }\n    return sum;\n};\n```\n\n```go [sol2-Golang]\nfunc deepestLeavesSum(root *TreeNode) (sum int) {\n    q := []*TreeNode{root}\n    for len(q) > 0 {\n        sum = 0\n        size := len(q)\n        for i := 0; i < size; i++ {\n            node := q[0]\n            q = q[1:]\n            sum += node.Val\n            if node.Left != nil {\n                q = append(q, node.Left)\n            }\n            if node.Right != nil {\n                q = append(q, node.Right)\n            }\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。广度优先搜索需要遍历每个节点一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。空间复杂度主要取决于队列空间，队列中的节点个数不超过 $n$ 个。"
}