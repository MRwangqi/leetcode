{
	"titleSlug": "check-if-one-string-swap-can-make-strings-equal",
	"slug": "jin-zhi-xing-yi-ci-zi-fu-chuan-jiao-huan-j8si",
	"url": "https://leetcode-cn.com/problems/check-if-one-string-swap-can-make-strings-equal/solution/jin-zhi-xing-yi-ci-zi-fu-chuan-jiao-huan-j8si/",
	"content": "#### 方法一：计数统计\n\n题目要求其中一个字符串执行最多一次字符交换使得两个字符串相等，意味着两个字符串中最多只存在两个位置 $i,j$ 处字符不相等，此时我们交换 $i,j$ 处字符可使其相等。设两个字符串分别为 $s_1,s_2$：\n+ 如果两个字符串 $s_1,s_2$ 相等，则不需要进行交换即可满足相等；\n+ 如果两个字符串 $s_1,s_2$ 不相等，字符串一定存在两个位置 $i,j$ 处的字符不相等，需要交换 $i,j$ 处字符使其相等，此时一定满足 $s_1[i] = s_2[j], s_1[j] = s_2[i]$；如果两个字符中只存在一个或大于两个位置的字符不相等，则此时无法通过一次交换使其相等；\n\n```Python [sol1-Python3]\nclass Solution:\n    def areAlmostEqual(self, s1: str, s2: str) -> bool:\n        i = j = -1\n        for idx, (x, y) in enumerate(zip(s1, s2)):\n            if x != y:\n                if i < 0:\n                    i = idx\n                elif j < 0:\n                    j = idx\n                else:\n                    return False\n        return i < 0 or j >= 0 and s1[i] == s2[j] and s1[j] == s2[i]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool areAlmostEqual(string s1, string s2) {\n        int n = s1.size();\n        vector<int> diff;\n        for (int i = 0; i < n; ++i) {\n            if (s1[i] != s2[i]) {\n                if (diff.size() >= 2) {\n                    return false;\n                }\n                diff.emplace_back(i);\n            }\n        }\n        if (diff.size() == 0) {\n            return true;\n        }\n        if (diff.size() != 2) {\n            return false;\n        }\n        return s1[diff[0]] == s2[diff[1]] && s1[diff[1]] == s2[diff[0]];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean areAlmostEqual(String s1, String s2) {\n        int n = s1.length();\n        List<Integer> diff = new ArrayList<Integer>();\n        for (int i = 0; i < n; ++i) {\n            if (s1.charAt(i) != s2.charAt(i)) {\n                if (diff.size() >= 2) {\n                    return false;\n                }\n                diff.add(i);\n            }\n        }\n        if (diff.isEmpty()) {\n            return true;\n        }\n        if (diff.size() != 2) {\n            return false;\n        }\n        return s1.charAt(diff.get(0)) == s2.charAt(diff.get(1)) && s1.charAt(diff.get(1)) == s2.charAt(diff.get(0));\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool AreAlmostEqual(string s1, string s2) {\n        int n = s1.Length;\n        IList<int> diff = new List<int>();\n        for (int i = 0; i < n; ++i) {\n            if (s1[i] != s2[i]) {\n                if (diff.Count >= 2) {\n                    return false;\n                }\n                diff.Add(i);\n            }\n        }\n        if (diff.Count == 0) {\n            return true;\n        }\n        if (diff.Count != 2) {\n            return false;\n        }\n        return s1[diff[0]] == s2[diff[1]] && s1[diff[1]] == s2[diff[0]];\n    }\n}\n```\n\n```C [sol1-C]\nbool areAlmostEqual(char * s1, char * s2){\n    int n = strlen(s1), pos = 0;\n    int diff[2];\n    for (int i = 0; i < n; ++i) {\n        if (s1[i] != s2[i]) {\n            if (pos >= 2) {\n                return false;\n            }\n            diff[pos++] = i;\n        }\n    }\n    if (pos == 0) {\n        return true;\n    }\n    if (pos != 2) {\n        return false;\n    }\n    return s1[diff[0]] == s2[diff[1]] && s1[diff[1]] == s2[diff[0]];\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar areAlmostEqual = function(s1, s2) {\n    const n = s1.length;\n    const diff = [];\n    for (let i = 0; i < n; ++i) {\n        if (s1[i] !== s2[i]) {\n            if (diff.length >= 2) {\n                return false;\n            }\n            diff.push(i);\n        }\n    }\n    if (diff.length === 0) {\n        return true;\n    }\n    if (diff.length !== 2) {\n        return false;\n    }\n    return s1[diff[0]] === s2[diff[1]] && s1[diff[1]] === s2[diff[0]];\n};\n```\n\n```go [sol1-Golang]\nfunc areAlmostEqual(s1, s2 string) bool {\n    i, j := -1, -1\n    for idx := range s1 {\n        if s1[idx] != s2[idx] {\n            if i < 0 {\n                i = idx\n            } else if j < 0 {\n                j = idx\n            } else {\n                return false\n            }\n        }\n    }\n    return i < 0 || j >= 0 && s1[i] == s2[j] && s1[j] == s2[i]\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 表示字符串的长度。我们只需遍历一遍字符串即可。\n\n- 空间复杂度：$O(C)$。由于两个字符串中字符不同的数目大于 $2$ 即可返回，因此最多只需要保存 $C = 2$ 个不同位置的索引即可。"
}