{
	"titleSlug": "reordered-power-of-2",
	"slug": "zhong-xin-pai-xu-de-dao-2-de-mi-by-leetc-4fvs",
	"url": "https://leetcode-cn.com/problems/reordered-power-of-2/solution/zhong-xin-pai-xu-de-dao-2-de-mi-by-leetc-4fvs/",
	"content": "#### 方法一：搜索回溯 + 位运算\n\n将 $n$ 的十进制表示视作一个字符数组，我们可以枚举该数组的所有排列，对每个不含前导零的排列判断其对应的整数是否为 $2$ 的幂。\n\n这可以拆分成两个子问题：\n\n1. 枚举可能包含重复字符的数组的全排列，读者可参考[「47. 全排列 II」的官方题解](https://leetcode-cn.com/problems/permutations-ii/solution/quan-pai-lie-ii-by-leetcode-solution/)；\n2. 判断一个整数是否为 $2$ 的幂，读者可参考[「231. 2 的幂」的官方题解](https://leetcode-cn.com/problems/power-of-two/solution/2de-mi-by-leetcode-solution-rny3/)。\n\n对于本题的具体实现，我们可以在递归搜索全排列的同时，计算出当前排列的已枚举的部分所对应的整数 $\\textit{num}$。在我们枚举当前排列的下一个字符 $\\textit{ch}$ 时，将 $\\textit{ch}$ 加到 $\\textit{num}$ 的末尾，即 `num = num * 10 + ch - '0'`，然后递归进入下一层。\n\n```Python [sol1-Python3]\ndef isPowerOfTwo(n: int) -> bool:\n    return (n & (n - 1)) == 0\n\nclass Solution:\n    def reorderedPowerOf2(self, n: int) -> bool:\n        nums = sorted(list(str(n)))\n        m = len(nums)\n        vis = [False] * m\n\n        def backtrack(idx: int, num: int) -> bool:\n            if idx == m:\n                return isPowerOfTwo(num)\n            for i, ch in enumerate(nums):\n                # 不能有前导零\n                if (num == 0 and ch == '0') or vis[i] or (i > 0 and not vis[i - 1] and ch == nums[i - 1]):\n                    continue\n                vis[i] = True\n                if backtrack(idx + 1, num * 10 + ord(ch) - ord('0')):\n                    return True\n                vis[i] = False\n            return False\n\n        return backtrack(0, 0)\n```\n\n```C++ [sol1-C++]\nclass Solution {\n    vector<int> vis;\n\n    bool isPowerOfTwo(int n) {\n        return (n & (n - 1)) == 0;\n    }\n\n    bool backtrack(string &nums, int idx, int num) {\n        if (idx == nums.length()) {\n            return isPowerOfTwo(num);\n        }\n        for (int i = 0; i < nums.length(); ++i) {\n            // 不能有前导零\n            if ((num == 0 && nums[i] == '0') || vis[i] || (i > 0 && !vis[i - 1] && nums[i] == nums[i - 1])) {\n                continue;\n            }\n            vis[i] = 1;\n            if (backtrack(nums, idx + 1, num * 10 + nums[i] - '0')) {\n                return true;\n            }\n            vis[i] = 0;\n        }\n        return false;\n    }\n\npublic:\n    bool reorderedPowerOf2(int n) {\n        string nums = to_string(n);\n        sort(nums.begin(), nums.end());\n        vis.resize(nums.length());\n        return backtrack(nums, 0, 0);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    boolean[] vis;\n\n    public boolean reorderedPowerOf2(int n) {\n        char[] nums = Integer.toString(n).toCharArray();\n        Arrays.sort(nums);\n        vis = new boolean[nums.length];\n        return backtrack(nums, 0, 0);\n    }\n\n    public boolean backtrack(char[] nums, int idx, int num) {\n        if (idx == nums.length) {\n            return isPowerOfTwo(num);\n        }\n        for (int i = 0; i < nums.length; ++i) {\n            // 不能有前导零\n            if ((num == 0 && nums[i] == '0') || vis[i] || (i > 0 && !vis[i - 1] && nums[i] == nums[i - 1])) {\n                continue;\n            }\n            vis[i] = true;\n            if (backtrack(nums, idx + 1, num * 10 + nums[i] - '0')) {\n                return true;\n            }\n            vis[i] = false;\n        }\n        return false;\n    }\n\n    public boolean isPowerOfTwo(int n) {\n        return (n & (n - 1)) == 0;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    bool[] vis;\n\n    public bool ReorderedPowerOf2(int n) {\n        char[] nums = n.ToString().ToCharArray();\n        Array.Sort(nums);\n        vis = new bool[nums.Length];\n        return Backtrack(nums, 0, 0);\n    }\n\n    public bool Backtrack(char[] nums, int idx, int num) {\n        if (idx == nums.Length) {\n            return IsPowerOfTwo(num);\n        }\n        for (int i = 0; i < nums.Length; ++i) {\n            // 不能有前导零\n            if ((num == 0 && nums[i] == '0') || vis[i] || (i > 0 && !vis[i - 1] && nums[i] == nums[i - 1])) {\n                continue;\n            }\n            vis[i] = true;\n            if (Backtrack(nums, idx + 1, num * 10 + nums[i] - '0')) {\n                return true;\n            }\n            vis[i] = false;\n        }\n        return false;\n    }\n\n    public bool IsPowerOfTwo(int n) {\n        return (n & (n - 1)) == 0;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc isPowerOfTwo(n int) bool {\n    return n&(n-1) == 0\n}\n\nfunc reorderedPowerOf2(n int) bool {\n    nums := []byte(strconv.Itoa(n))\n    sort.Slice(nums, func(i, j int) bool { return nums[i] < nums[j] })\n\n    m := len(nums)\n    vis := make([]bool, m)\n    var backtrack func(int, int) bool\n    backtrack = func(idx, num int) bool {\n        if idx == m {\n            return isPowerOfTwo(num)\n        }\n        for i, ch := range nums {\n            // 不能有前导零\n            if num == 0 && ch == '0' || vis[i] || i > 0 && !vis[i-1] && ch == nums[i-1] {\n                continue\n            }\n            vis[i] = true\n            if backtrack(idx+1, num*10+int(ch-'0')) {\n                return true\n            }\n            vis[i] = false\n        }\n        return false\n    }\n    return backtrack(0, 0)\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst reorderedPowerOf2 = (n) => {\n    const backtrack = (nums, idx, num) => {\n        if (idx === nums.length) {\n            return isPowerOfTwo(num);\n        }\n        for (let i = 0; i < nums.length; ++i) {\n            // 不能有前导零\n            if ((num === 0 && nums[i] === '0') || vis[i] || (i > 0 && !vis[i - 1] && nums[i] === nums[i - 1])) {\n                continue;\n            }\n            vis[i] = true;\n            if (backtrack(nums, idx + 1, num * 10 + nums[i].charCodeAt() - '0'.charCodeAt())) {\n                return true;\n            }\n            vis[i] = false;\n        }\n        return false;\n    }\n\n    const nums = Array.from('' + n);\n    nums.sort();\n    const vis = new Array(nums.length).fill(false);\n    return backtrack(nums, 0, 0);\n}\n\nconst isPowerOfTwo = (n) => {\n    return (n & (n - 1)) === 0;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m!)$，其中 $m=\\lfloor\\log_{10} n\\rfloor+1$，即 $n$ 的十进制表示的长度。\n\n  算法的复杂度首先受 `backtrack` 的调用次数制约，`backtrack` 的调用次数为 $\\sum_{k = 1}^{m}{P(m, k)}$ 次，其中 $P(m, k) = \\dfrac{m!}{(m - k)!} = m (m - 1) ... (m - k + 1)$，该式被称作 [$m$ 的 $k$ - 排列，或者部分排列](https://baike.baidu.com/item/%E6%8E%92%E5%88%97/7804523)。\n\n  而 $\\sum_{k = 1}^{m}{P(m, k)} = m! + \\dfrac{m!}{1!} + \\dfrac{m!}{2!} + \\dfrac{m!}{3!} + ... + \\dfrac{m!}{(m-1)!} < 2m! + \\dfrac{m!}{2} + \\dfrac{m!}{2^2} + \\dfrac{m!}{2^{m-2}} < 3m!$\n\n  这说明 `backtrack` 的调用次数是 $O(m!)$ 的。\n\n  而对于 `backtrack` 调用的每个叶结点（最坏情况下没有重复数字共 $m!$ 个），我们可以用 $O(1)$ 的时间判断 $\\textit{num}$ 是否为 $2$ 的幂。\n\n  因此总的时间复杂度为 $O(m!)$。\n\n- 空间复杂度：$O(m)$。我们需要 $O(m)$ 的标记数组，同时在递归的时候栈深度会达到 $O(m)$，因此总空间复杂度为 $O(m+m)=O(2m)=O(m)$。\n\n#### 方法二：预处理 + 哈希表\n\n由于我们可以按任何顺序将数字重新排序，因此对于两个不同的整数 $a$ 和 $b$，如果其十进制表示的字符数组，从小到大排序后的结果是相同的，那么若 $a$ 能够重排得到 $2$ 的幂，$b$ 也可以；若 $a$ 不能重排得到 $2$ 的幂，那么 $b$ 也不能。\n\n进一步地，只要 $a$ 和 $b$ 的十进制表示的字符数组中，从 $\\texttt{0}$ 到 $\\texttt{9}$ 每个字符的出现次数，在 $a$ 和 $b$ 中都是一样的，那么 $a$ 和 $b$ 能否重排得到 $2$ 的幂的结果是一样的。\n\n由于 $2^{29} < 10^9 < 2^{30}$，因此在 $[1,10^9]$ 范围内有 $2^0,2^1,\\cdots,2^{29}$ 一共 $30$ 个 $2$ 的幂。对这 $30$ 个数的每个数，我们可以预处理其十进制表示的字符数组中从 $\\texttt{0}$ 到 $\\texttt{9}$ 每个字符的出现次数，记在一个长度为 $10$ 的数组中，并用一哈希表记录这些数组。对于数字 $n$，我们同样统计其十进制表示的字符数组中从 $\\texttt{0}$ 到 $\\texttt{9}$ 每个字符的出现次数，然后去哈希表中查找，若存在则说明 $n$ 可以通过重排得到 $2$ 的幂，否则不能。\n\n```Python [sol2-Python3]\ndef countDigits(n: int) -> Tuple[int]:\n    cnt = [0] * 10\n    while n:\n        cnt[n % 10] += 1\n        n //= 10\n    return tuple(cnt)\n\npowerOf2Digits = {countDigits(1 << i) for i in range(30)}\n\nclass Solution:\n    def reorderedPowerOf2(self, n: int) -> bool:\n        return countDigits(n) in powerOf2Digits\n```\n\n```C++ [sol2-C++]\nstring countDigits(int n) {\n    string cnt(10, 0);\n    while (n) {\n        ++cnt[n % 10];\n        n /= 10;\n    }\n    return cnt;\n}\n\nunordered_set<string> powerOf2Digits;\n\nint init = []() {\n    for (int n = 1; n <= 1e9; n <<= 1) {\n        powerOf2Digits.insert(countDigits(n));\n    }\n    return 0;\n}();\n\nclass Solution {\npublic:\n    bool reorderedPowerOf2(int n) {\n        return powerOf2Digits.count(countDigits(n));\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    Set<String> powerOf2Digits = new HashSet<String>();\n\n    public boolean reorderedPowerOf2(int n) {\n        init();\n        return powerOf2Digits.contains(countDigits(n));\n    }\n\n    public void init() {\n        for (int n = 1; n <= 1e9; n <<= 1) {\n            powerOf2Digits.add(countDigits(n));\n        }\n    }\n\n    public String countDigits(int n) {\n        char[] cnt = new char[10];\n        while (n > 0) {\n            ++cnt[n % 10];\n            n /= 10;\n        }\n        return new String(cnt);\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    ISet<string> powerOf2Digits = new HashSet<string>();\n\n    public bool ReorderedPowerOf2(int n) {\n        Init();\n        return powerOf2Digits.Contains(CountDigits(n));\n    }\n\n    public void Init() {\n        for (int n = 1; n <= 1e9; n <<= 1) {\n            powerOf2Digits.Add(CountDigits(n));\n        }\n    }\n\n    public string CountDigits(int n) {\n        char[] cnt = new char[10];\n        while (n > 0) {\n            ++cnt[n % 10];\n            n /= 10;\n        }\n        return new string(cnt);\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc countDigits(n int) (cnt [10]int) {\n    for n > 0 {\n        cnt[n%10]++\n        n /= 10\n    }\n    return\n}\n\nvar powerOf2Digits = map[[10]int]bool{}\n\nfunc init() {\n    for n := 1; n <= 1e9; n <<= 1 {\n        powerOf2Digits[countDigits(n)] = true\n    }\n}\n\nfunc reorderedPowerOf2(n int) bool {\n    return powerOf2Digits[countDigits(n)]\n}\n```\n\n```JavaScript [sol2-JavaScript]\nconst countDigits = (n) => {\n    const cnt = new Array(10).fill(0);\n    while (n) {\n        cnt[n % 10]++;\n        n = Math.floor(n / 10);\n    }\n    return cnt.join('');\n}\n\n\n\nvar reorderedPowerOf2 = function(n) {\n    const powerOf2Digits = new Set();\n\n    for (let n = 1; n <= 1e9; n <<= 1) {\n        powerOf2Digits.add(countDigits(n));\n    }\n\n    return powerOf2Digits.has(countDigits(n));\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$。统计 $n$ 的每个数字的出现次数需要 $O(\\log n)$ 的时间。\n\n- 空间复杂度：$O(1)$。"
}