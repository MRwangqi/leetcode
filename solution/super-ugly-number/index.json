{
	"titleSlug": "super-ugly-number",
	"slug": "chao-ji-chou-shu-by-leetcode-solution-uzff",
	"url": "https://leetcode-cn.com/problems/super-ugly-number/solution/chao-ji-chou-shu-by-leetcode-solution-uzff/",
	"content": "#### 前言\n\n这道题和「[264. 丑数 II](https://leetcode-cn.com/problems/ugly-number-ii)」相似，区别在于，第 264 题规定丑数是只包含质因数 $2$、$3$ 和 $5$ 的正整数，这道题规定超级丑数是只包含数组 $\\textit{primes}$ 中的质因数的正整数。\n\n第 264 题的方法包括最小堆和动态规划。由于这道题的数据规模较大，因此最小堆的解法会超时，此处只提供动态规划的解法。\n\n#### 方法一：动态规划\n\n定义数组 $\\textit{dp}$，其中 $\\textit{dp}[i]$ 表示第 $i$ 个超级丑数，第 $n$ 个超级丑数即为 $\\textit{dp}[n]$。\n\n由于最小的超级丑数是 $1$，因此 $\\textit{dp}[1]=1$。\n\n如何得到其余的超级丑数呢？创建与数组 $\\textit{primes}$ 相同长度的数组 $\\textit{pointers}$，表示下一个超级丑数是当前指针指向的超级丑数乘以对应的质因数。初始时，数组 $\\textit{pointers}$ 的元素值都是 $1$。\n\n当 $2 \\le i \\le n$ 时，令 $\\textit{dp}[i]=\\underset{0 \\le j < m}{\\min} \\{\\textit{dp}[\\textit{pointers}[j]] \\times \\textit{primes}[j]\\}$，然后对于每个 $0 \\le j < m$，分别比较 $\\textit{dp}[i]$ 和 $\\textit{dp}[\\textit{pointers}[j]] \\times \\textit{primes}[j]$ 是否相等，如果相等则将 $\\textit{pointers}[j]$ 加 $1$。\n\n**正确性证明**\n\n对于 $i>1$，在计算 $\\textit{dp}[i]$ 时，指针 $\\textit{pointers}[j](0 \\le j < m)$ 的含义是使得 $\\textit{dp}[k] \\times \\textit{primes}[j] > \\textit{dp}[i-1]$ 的最小的下标 $k$，即当 $k \\ge \\textit{pointers}[j]$ 时 $\\textit{dp}[k] \\times \\textit{primes}[j] > \\textit{dp}[i-1]$，当 $k<\\textit{pointers}[j]$ 时 $\\textit{dp}[k] \\times \\textit{primes}[j] \\le \\textit{dp}[i-1]$。\n\n因此，对于 $i>1$，在计算 $\\textit{dp}[i]$ 时，对任意 $0 \\le j < m$，$\\textit{dp}[\\textit{pointers}[j]] \\times \\textit{primes}[j]$ 都大于 $\\textit{dp}[i-1]$，$\\textit{dp}[\\textit{pointers}[j]-1] \\times \\textit{primes}[j]$ 都小于或等于 $\\textit{dp}[i-1]$。令 $\\textit{dp}[i]=\\underset{0 \\le j < m}{\\min} \\{\\textit{dp}[\\textit{pointers}[j]] \\times \\textit{primes}[j]\\}$，则 $\\textit{dp}[i]>\\textit{dp}[i-1]$ 且 $\\textit{dp}[i]$ 是大于 $\\textit{dp}[i-1]$ 的最小的超级丑数。\n\n在计算 $\\textit{dp}[i]$ 之后，会更新数组 $\\textit{pointers}$ 中的指针，更新之后的指针将用于计算 $\\textit{dp}[i+1]$，同样满足 $\\textit{dp}[i+1]>\\textit{dp}[i]$ 且 $\\textit{dp}[i+1]$ 是大于 $\\textit{dp}[i]$ 的最小的超级丑数。\n\n<![figp1](https://assets.leetcode-cn.com/solution-static/313/p1.png),![figp2](https://assets.leetcode-cn.com/solution-static/313/p2.png),![figp3](https://assets.leetcode-cn.com/solution-static/313/p3.png),![figp4](https://assets.leetcode-cn.com/solution-static/313/p4.png),![figp5](https://assets.leetcode-cn.com/solution-static/313/p5.png),![figp6](https://assets.leetcode-cn.com/solution-static/313/p6.png),![figp7](https://assets.leetcode-cn.com/solution-static/313/p7.png),![figp8](https://assets.leetcode-cn.com/solution-static/313/p8.png),![figp9](https://assets.leetcode-cn.com/solution-static/313/p9.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public int nthSuperUglyNumber(int n, int[] primes) {\n        int[] dp = new int[n + 1];\n        int m = primes.length;\n        int[] pointers = new int[m];\n        int[] nums = new int[m];\n        Arrays.fill(nums, 1);\n        for (int i = 1; i <= n; i++) {\n            int minNum = Arrays.stream(nums).min().getAsInt();\n            dp[i] = minNum;\n            for (int j = 0; j < m; j++) {\n                if (nums[j] == minNum) {\n                    pointers[j]++;\n                    nums[j] = dp[pointers[j]] * primes[j];\n                }\n            }\n        }\n        return dp[n];\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int NthSuperUglyNumber(int n, int[] primes) {\n        int[] dp = new int[n + 1];\n        int m = primes.Length;\n        int[] pointers = new int[m];\n        int[] nums = new int[m];\n        Array.Fill(nums, 1);\n        for (int i = 1; i <= n; i++) {\n            int minNum = nums.Min();\n            dp[i] = minNum;\n            for (int j = 0; j < m; j++) {\n                if (nums[j] == minNum) {\n                    pointers[j]++;\n                    nums[j] = dp[pointers[j]] * primes[j];\n                }\n            }\n        }\n        return dp[n];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar nthSuperUglyNumber = function(n, primes) {\n    const dp = new Array(n + 1).fill(0);\n    const m = primes.length;\n    const pointers = new Array(m).fill(0);\n    const nums = new Array(m).fill(1);\n    for (let i = 1; i <= n; i++) {\n        let minNum = Number.MAX_SAFE_INTEGER;\n        for (let j = 0; j < m; j++) {\n            minNum = Math.min(minNum, nums[j]);\n        }\n        dp[i] = minNum;\n        for (let j = 0; j < m; j++) {\n            if (nums[j] == minNum) {\n                pointers[j]++;\n                nums[j] = dp[pointers[j]] * primes[j];\n            }\n        }\n    }\n    return dp[n];\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:\n        dp = [0] * (n + 1)\n        m = len(primes)\n        pointers = [0] * m\n        nums = [1] * m\n\n        for i in range(1, n + 1):\n            min_num = min(nums)\n            dp[i] = min_num\n            for j in range(m):\n                if nums[j] == min_num:\n                    pointers[j] += 1\n                    nums[j] = dp[pointers[j]] * primes[j]\n        \n        return dp[n]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int nthSuperUglyNumber(int n, vector<int>& primes) {\n        vector<long> dp(n + 1);\n        int m = primes.size();\n        vector<int> pointers(m, 0);\n        vector<long> nums(m, 1);\n        for (int i = 1; i <= n; i++) {\n            long minNum = INT_MAX;\n            for (int j = 0; j < m; j++) {\n                minNum = min(minNum, nums[j]);\n            }\n            dp[i] = minNum;\n            for (int j = 0; j < m; j++) {\n                if (nums[j] == minNum) {\n                    pointers[j]++;\n                    nums[j] = dp[pointers[j]] * primes[j];\n                }\n            }\n        }\n        return dp[n];\n    }\n};\n```\n\n```C [sol1-C]\nint nthSuperUglyNumber(int n, int* primes, int primesSize) {\n    long dp[n + 1];\n    int pointers[primesSize];\n    for (int i = 0; i < primesSize; i++) {\n        pointers[i] = 0;\n    }\n    long nums[primesSize];\n    for (int i = 0; i < primesSize; i++) {\n        nums[i] = 1;\n    }\n    for (int i = 1; i <= n; i++) {\n        long minNum = INT_MAX;\n        for (int j = 0; j < primesSize; j++) {\n            minNum = fmin(minNum, nums[j]);\n        }\n        dp[i] = minNum;\n        for (int j = 0; j < primesSize; j++) {\n            if (nums[j] == minNum) {\n                pointers[j]++;\n                nums[j] = dp[pointers[j]] * primes[j];\n            }\n        }\n    }\n    return dp[n];\n}\n```\n\n```go [sol1-Golang]\nfunc nthSuperUglyNumber(n int, primes []int) int {\n    dp := make([]int, n+1)\n    m := len(primes)\n    pointers := make([]int, m)\n    nums := make([]int, m)\n    for i := range nums {\n        nums[i] = 1\n    }\n    for i := 1; i <= n; i++ {\n        minNum := math.MaxInt64\n        for j := range pointers {\n            minNum = min(minNum, nums[j])\n        }\n        dp[i] = minNum\n        for j := range nums {\n            if nums[j] == minNum {\n                pointers[j]++\n                nums[j] = dp[pointers[j]] * primes[j]\n            }\n        }\n    }\n    return dp[n]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nm)$，其中 $n$ 是待求的超级丑数的编号，$m$ 是数组 $\\textit{primes}$ 的长度。需要计算数组 $\\textit{dp}$ 中的 $n$ 个元素，每个元素的计算都需要 $O(m)$ 的时间。\n\n- 空间复杂度：$O(n+m)$，其中 $n$ 是待求的超级丑数的编号，$m$ 是数组 $\\textit{primes}$ 的长度。需要创建数组 $\\textit{dp}$、数组 $\\textit{pointers}$ 和数组 $\\textit{nums}$，空间分别是 $O(n)$、$O(m) 和 $O(m)$。"
}