{
	"titleSlug": "max-increase-to-keep-city-skyline",
	"slug": "bao-chi-cheng-shi-tian-ji-xian-by-leetco-n2lu",
	"url": "https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/solution/bao-chi-cheng-shi-tian-ji-xian-by-leetco-n2lu/",
	"content": "#### 方法一：贪心\n\n从左侧和右侧看，城市天际线等于矩阵 $\\textit{grid}$ 的每一行的建筑物高度最大值；从顶部和底部看，城市天际线等于矩阵 $\\textit{grid}$ 的每一列的建筑物高度最大值。只要不改变每一行和每一列的建筑物高度最大值，就能保持城市天际线，因此可以使用贪心的思想计算建筑物高度可以增加的最大总和。\n\n由于矩阵 $\\textit{grid}$ 的行数和列数都是 $n$，因此创建两个长度为 $n$ 的数组 $\\textit{rowMax}$ 和 $\\textit{colMax}$ 分别记录矩阵 $\\textit{grid}$ 的每一行的最大值和每一列的最大值。遍历矩阵 $\\textit{grid}$ 填入两个数组之后，再次遍历矩阵，计算每个建筑物高度可以增加的最大值。\n\n当 $0 \\le i, j < n$ 时，对于第 $i$ 行第 $j$ 列的建筑物，其所在行的建筑物高度最大值是 $\\textit{rowMax}[i]$，其所在列的建筑物高度最大值是 $\\textit{colMax}[j]$。为了保持城市天际线，该建筑物增加后的高度不能超过其所在行和所在列的建筑物高度最大值，即该建筑物增加后的最大高度是 $\\min(\\textit{rowMax}[i], \\textit{colMax}[j])$。由于该建筑物的原始高度是 $\\textit{grid}[i][j]$，因此该建筑物高度可以增加的最大值是 $\\min(\\textit{rowMax}[i], \\textit{colMax}[j]) - \\textit{grid}[i][j]$。\n\n对于矩阵 $\\textit{grid}$ 中的每个元素计算可以增加的最大值，即可得到建筑物高度可以增加的最大总和。\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxIncreaseKeepingSkyline(int[][] grid) {\n        int n = grid.length;\n        int[] rowMax = new int[n];\n        int[] colMax = new int[n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                rowMax[i] = Math.max(rowMax[i], grid[i][j]);\n                colMax[j] = Math.max(colMax[j], grid[i][j]);\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                ans += Math.min(rowMax[i], colMax[j]) - grid[i][j];\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MaxIncreaseKeepingSkyline(int[][] grid) {\n        int n = grid.Length;\n        int[] rowMax = new int[n];\n        int[] colMax = new int[n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                rowMax[i] = Math.Max(rowMax[i], grid[i][j]);\n                colMax[j] = Math.Max(colMax[j], grid[i][j]);\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                ans += Math.Min(rowMax[i], colMax[j]) - grid[i][j];\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<int> rowMax(n);\n        vector<int> colMax(n);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                rowMax[i] = max(rowMax[i], grid[i][j]);\n                colMax[j] = max(colMax[j], grid[i][j]);\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                ans += min(rowMax[i], colMax[j]) - grid[i][j];\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nint maxIncreaseKeepingSkyline(int** grid, int gridSize, int* gridColSize){\n    int * rowMax = (int *)malloc(sizeof(int) * gridSize);\n    int * colMax = (int *)malloc(sizeof(int) * gridSize);\n    memset(rowMax, 0, sizeof(int) * gridSize);\n    memset(colMax, 0, sizeof(int) * gridSize);\n    for (int i = 0; i < gridSize; ++i) {\n        for (int j = 0; j < gridSize; ++j) {\n            rowMax[i] = MAX(rowMax[i], grid[i][j]);\n            colMax[j] = MAX(colMax[j], grid[i][j]);\n        }\n    }\n    int ans = 0;\n    for (int i = 0; i < gridSize; ++i) {\n        for (int j = 0; j < gridSize; ++j) {\n            ans += MIN(rowMax[i], colMax[j]) - grid[i][j];\n        }\n    } \n    free(rowMax);\n    free(colMax);\n    return ans;\n}\n```\n\n```go [sol1-Golang]\nfunc maxIncreaseKeepingSkyline(grid [][]int) (ans int) {\n    n := len(grid)\n    rowMax := make([]int, n)\n    colMax := make([]int, n)\n    for i, row := range grid {\n        for j, h := range row {\n            rowMax[i] = max(rowMax[i], h)\n            colMax[j] = max(colMax[j], h)\n        }\n    }\n    for i, row := range grid {\n        for j, h := range row {\n            ans += min(rowMax[i], colMax[j]) - h\n        }\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        rowMax = list(map(max, grid))\n        colMax = list(map(max, zip(*grid)))\n        return sum(min(rowMax[i], colMax[j]) - h for i, row in enumerate(grid) for j, h in enumerate(row))\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxIncreaseKeepingSkyline = function(grid) {\n    const n = grid.length;\n    const rowMax = new Array(n).fill(0);\n    const colMax = new Array(n).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            rowMax[i] = Math.max(rowMax[i], grid[i][j]);\n            colMax[j] = Math.max(colMax[j], grid[i][j]);\n        }\n    }\n    let ans = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            ans += Math.min(rowMax[i], colMax[j]) - grid[i][j];\n        }\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是矩阵 $\\textit{grid}$ 的行数和列数。需要遍历矩阵 $\\textit{grid}$ 两次，第一次遍历计算每一行的最大值和每一列的最大值，第二次遍历计算建筑物高度可以增加的最大总和。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是矩阵 $\\textit{grid}$ 的行数和列数。需要创建两个长度为 $n$ 的数组分别记录矩阵 $\\textit{grid}$ 的每一行的最大值和每一列的最大值。"
}