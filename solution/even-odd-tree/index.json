{
	"titleSlug": "even-odd-tree",
	"slug": "qi-ou-shu-by-leetcode-solution-l7bw",
	"url": "https://leetcode-cn.com/problems/even-odd-tree/solution/qi-ou-shu-by-leetcode-solution-l7bw/",
	"content": "#### 方法一：广度优先搜索\n\n由于判断一棵二叉树是否为奇偶树的条件是针对同一层的节点，因此可以使用广度优先搜索，每一轮搜索访问同一层的全部节点，且只会访问这一层的节点。\n\n使用队列存储节点。初始时，将根节点加入队列。每一轮搜索之前，队列中的节点是同一层的全部节点，记队列的大小为 $\\textit{size}$，该轮搜索只访问 $\\textit{size}$ 个节点，即可保证该轮搜索访问的恰好是同一层的全部节点。搜索过程中，将当前层的节点的非空子节点依次加入队列，用于下一层的搜索。\n\n判断一棵二叉树是否为奇偶树，需要考虑两个条件，一是节点值的奇偶性，二是节点值的单调性，这两个条件都由层下标的奇偶性决定。因此，需要维护搜索到的层下标，以及对于每一层搜索都需要维护上一个节点值。\n\n如果当前层下标是偶数，则要求当前层的所有节点的值都是奇数，且节点值从左到右严格递增。如果遇到节点值是偶数，或者当前节点值小于等于上一个节点值，则二叉树一定不是奇偶树。\n\n如果当前层下标是奇数，则要求当前层的所有节点的值都是偶数，且节点值从左到右严格递减。如果遇到节点值是奇数，或者当前节点值大于等于上一个节点值，则二叉树一定不是奇偶树。\n\n如果二叉树的所有节点都满足奇偶树的条件，则二叉树是奇偶树。\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isEvenOddTree(TreeNode root) {\n        Queue<TreeNode> queue = new ArrayDeque<TreeNode>();\n        queue.offer(root);\n        int level = 0;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            int prev = level % 2 == 0 ? Integer.MIN_VALUE : Integer.MAX_VALUE;\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                int value = node.val;\n                if (level % 2 == value % 2) {\n                    return false;\n                }\n                if ((level % 2 == 0 && value <= prev) || (level % 2 == 1 && value >= prev)) {\n                    return false;\n                }\n                prev = value;\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n            }\n            level++;\n        }\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool IsEvenOddTree(TreeNode root) {\n        Queue<TreeNode> queue = new Queue<TreeNode>();\n        queue.Enqueue(root);\n        int level = 0;\n        while (queue.Count > 0) {\n            int size = queue.Count;\n            int prev = level % 2 == 0 ? int.MinValue : int.MaxValue;\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.Dequeue();\n                int value = node.val;\n                if (level % 2 == value % 2) {\n                    return false;\n                }\n                if ((level % 2 == 0 && value <= prev) || (level % 2 == 1 && value >= prev)) {\n                    return false;\n                }\n                prev = value;\n                if (node.left != null) {\n                    queue.Enqueue(node.left);\n                }\n                if (node.right != null) {\n                    queue.Enqueue(node.right);\n                }\n            }\n            level++;\n        }\n        return true;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isEvenOddTree(TreeNode* root) {\n        queue<TreeNode*> qu;\n        qu.push(root);\n        int level = 0;\n        while (!qu.empty()) {\n            int size = qu.size();\n            int prev = level % 2 == 0 ? INT_MIN : INT_MAX;\n            for (int i = 0; i < size; i++) {\n                TreeNode * node = qu.front();\n                qu.pop();\n                int value = node->val;\n                if (level % 2 == value % 2) {\n                    return false;\n                }\n                if ((level % 2 == 0 && value <= prev) || (level % 2 == 1 && value >= prev)) {\n                    return false;\n                }\n                prev = value;\n                if (node->left != nullptr) {\n                    qu.push(node->left);\n                }\n                if (node->right != nullptr) {\n                    qu.push(node->right);\n                }\n            }\n            level++;\n        }\n        return true;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def isEvenOddTree(self, root: Optional[TreeNode]) -> bool:\n        queue = [root]\n        level = 0\n        while queue:\n            prev = float('inf') if level % 2 else 0\n            nxt = []\n            for node in queue:\n                val = node.val\n                if val % 2 == level % 2 or level % 2 == 0 and val <= prev or level % 2 == 1 and val >= prev:\n                    return False\n                prev = val\n                if node.left:\n                    nxt.append(node.left)\n                if node.right:\n                    nxt.append(node.right)\n            queue = nxt\n            level += 1\n        return True\n```\n\n```JavaScript [sol1-JavaScript]\nvar isEvenOddTree = function(root) {\n    const queue = [];\n    queue.push(root);\n    let level = 0;\n    while (queue.length) {\n        const size = queue.length;\n        let prev = level % 2 == 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        for (let i = 0; i < size; i++) {\n            const node = queue.shift();\n            const value = node.val;\n            if (level % 2 === value % 2) {\n                return false;\n            }\n            if ((level % 2 === 0 && value <= prev) || (level % 2 === 1 && value >= prev)) {\n                return false;\n            }\n            prev = value;\n            if (node.left) {\n                queue.push(node.left);\n            }\n            if (node.right) {\n                queue.push(node.right);\n            }\n        }\n        level++;\n    }\n    return true;\n};\n```\n\n```C [sol1-C]\n#define MAX_SIZE 100001\n\nbool isEvenOddTree(struct TreeNode* root){\n    struct TreeNode* qu[MAX_SIZE];\n    int head = 0, tail = 0;\n    qu[head++] = root;\n    int level = 0;\n    while (tail < head) {\n        int size = head - tail;\n        int prev = level % 2 == 0 ? INT_MIN : INT_MAX;\n        for (int i = 0; i < size; i++) {\n            struct TreeNode * node = qu[tail++];\n            int value = node->val;\n            if (level % 2 == value % 2) {\n                return false;\n            }\n            if ((level % 2 == 0 && value <= prev) || (level % 2 == 1 && value >= prev)) {\n                return false;\n            }\n            prev = value;\n            if (node->left != NULL) {\n                qu[head++] = node->left;\n            }\n            if (node->right != NULL) {\n                qu[head++] = node->right;\n            }\n        }\n        level++;\n    }\n    return true;\n}\n```\n\n```go [sol1-Golang]\nfunc isEvenOddTree(root *TreeNode) bool {\n    q := []*TreeNode{root}\n    for level := 0; len(q) > 0; level++ {\n        prev := 0\n        if level%2 == 1 {\n            prev = math.MaxInt32\n        }\n        size := len(q)\n        for _, node := range q {\n            val := node.Val\n            if val%2 == level%2 || level%2 == 0 && val <= prev || level%2 == 1 && val >= prev {\n                return false\n            }\n            prev = val\n            if node.Left != nil {\n                q = append(q, node.Left)\n            }\n            if node.Right != nil {\n                q = append(q, node.Right)\n            }\n        }\n        q = q[size:]\n    }\n    return true\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。广度优先搜索会对每个节点访问一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。空间复杂度主要取决于队列的开销，队列中的元素个数不会超过 $n$。"
}