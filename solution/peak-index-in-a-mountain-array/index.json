{
	"titleSlug": "peak-index-in-a-mountain-array",
	"slug": "shan-mai-shu-zu-de-feng-ding-suo-yin-by-dtqvv",
	"url": "https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/solution/shan-mai-shu-zu-de-feng-ding-suo-yin-by-dtqvv/",
	"content": "#### 前言\n\n虽然题目描述中说明了「我们可以返回**任何**满足条件的下标 $i$」，但由于条件为：\n\n$$\n\\textit{arr}_0 < \\textit{arr}_1 < \\cdots \\textit{arr}_{i-1} < \\textit{arr}_i > \\textit{arr}_{i+1} > \\cdots > \\textit{arr}_{n-1}\n$$\n\n其中 $n$ 是数组 $\\textit{arr}$ 的长度，这说明 $\\textit{arr}_i$ 是数组中的最大值，并且是**唯一**的最大值。\n\n因此，我们需要找出的下标 $i$ 一定是**唯一**的。\n\n#### 方法一：枚举\n\n**思路与算法**\n\n我们可以对数组 $\\textit{arr}$ 进行一次遍历。\n\n当我们遍历到下标 $i$ 时，如果有 $\\textit{arr}_{i-1} < \\textit{arr}_i > \\textit{arr}_{i+1}$，那么 $i$ 就是我们需要找出的下标。\n\n更简单地，我们只需要让 $i$ 满足 $\\textit{arr}_i > \\textit{arr}_{i+1}$ 即可。在遍历的过程中，我们最先遍历到的满足 $\\textit{arr}_i > \\textit{arr}_{i+1}$ 的下标 $i$ 一定也满足 $\\textit{arr}_{i-1} < \\textit{arr}_i$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int peakIndexInMountainArray(vector<int>& arr) {\n        int n = arr.size();\n        int ans = -1;\n        for (int i = 1; i < n - 1; ++i) {\n            if (arr[i] > arr[i + 1]) {\n                ans = i;\n                break;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int peakIndexInMountainArray(int[] arr) {\n        int n = arr.length;\n        int ans = -1;\n        for (int i = 1; i < n - 1; ++i) {\n            if (arr[i] > arr[i + 1]) {\n                ans = i;\n                break;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int PeakIndexInMountainArray(int[] arr) {\n        int n = arr.Length;\n        int ans = -1;\n        for (int i = 1; i < n - 1; ++i) {\n            if (arr[i] > arr[i + 1]) {\n                ans = i;\n                break;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        n = len(arr)\n        ans = -1\n\n        for i in range(1, n - 1):\n            if arr[i] > arr[i + 1]:\n                ans = i\n                break\n        \n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar peakIndexInMountainArray = function(arr) {\n    const n = arr.length;\n    let ans = -1;\n\n    for (let i = 1; i < n - 1; ++i) {\n        if (arr[i] > arr[i + 1]) {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc peakIndexInMountainArray(arr []int) int {\n    for i := 1; ; i++ {\n        if arr[i] > arr[i+1] {\n            return i\n        }\n    }\n}\n```\n\n```C [sol1-C]\nint peakIndexInMountainArray(int* arr, int arrSize) {\n    int n = arrSize;\n    int ans = -1;\n    for (int i = 1; i < n - 1; ++i) {\n        if (arr[i] > arr[i + 1]) {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。我们最多需要对数组 $\\textit{arr}$ 进行一次遍历。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：二分查找\n\n**思路与算法**\n\n记满足题目要求的下标 $i$ 为 $i_\\textit{ans}$。我们可以发现：\n\n- 当 $i < i_\\textit{ans}$ 时，$\\textit{arr}_i < \\textit{arr}_{i+1}$ 恒成立；\n\n- 当 $i \\geq i_\\textit{ans}$ 时，$\\textit{arr}_i > \\textit{arr}_{i+1}$ 恒成立。\n\n这与方法一的遍历过程也是一致的，因此 $i_\\textit{ans}$ 即为「最小的满足 $\\textit{arr}_i > \\textit{arr}_{i+1}$ 的下标 $i$」，我们可以用二分查找的方法来找出 $i_\\textit{ans}$。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int peakIndexInMountainArray(vector<int>& arr) {\n        int n = arr.size();\n        int left = 1, right = n - 2, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                ans = mid;\n                right = mid - 1;\n            }\n            else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int peakIndexInMountainArray(int[] arr) {\n        int n = arr.length;\n        int left = 1, right = n - 2, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                ans = mid;\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int PeakIndexInMountainArray(int[] arr) {\n        int n = arr.Length;\n        int left = 1, right = n - 2, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                ans = mid;\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        n = len(arr)\n        left, right, ans = 1, n - 2, 0\n\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] > arr[mid + 1]:\n                ans = mid\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return ans\n```\n\n```JavaScript [sol2-JavaScript]\nvar peakIndexInMountainArray = function(arr) {\n    const n = arr.length;\n    let left = 1, right = n - 2, ans = 0;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) /2 );\n        if (arr[mid] > arr[mid + 1]) {\n            ans = mid;\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return ans;\n};\n```\n\n```go [sol2-Golang]\nfunc peakIndexInMountainArray(arr []int) int {\n    return sort.Search(len(arr)-1, func(i int) bool { return arr[i] > arr[i+1] })\n}\n```\n\n```C [sol2-C]\nint peakIndexInMountainArray(int* arr, int arrSize) {\n    int n = arrSize;\n    int left = 1, right = n - 2, ans = 0;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (arr[mid] > arr[mid + 1]) {\n            ans = mid;\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。我们需要进行二分查找的次数为 $O(\\log n)$。\n\n- 空间复杂度：$O(1)$。"
}