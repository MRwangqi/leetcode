{
	"titleSlug": "reverse-vowels-of-a-string",
	"slug": "fan-zhuan-zi-fu-chuan-zhong-de-yuan-yin-2bmos",
	"url": "https://leetcode-cn.com/problems/reverse-vowels-of-a-string/solution/fan-zhuan-zi-fu-chuan-zhong-de-yuan-yin-2bmos/",
	"content": "#### 方法一：双指针\n\n**思路与算法**\n\n我们可以使用两个指针 $i$ 和 $j$ 对字符串相向地进行遍历。\n\n具体地，指针 $i$ 初始时指向字符串 $s$ 的首位，指针 $j$ 初始时指向字符串 $s$ 的末位。在遍历的过程中，我们不停地将 $i$ 向右移动，直到 $i$ 指向一个元音字母（或者超出字符串的边界范围）；同时，我们不停地将 $j$ 向左移动，直到 $j$ 指向一个元音字母。此时，如果 $i<j$，那么我们交换 $i$ 和 $j$ 指向的元音字母，否则说明所有的元音字母均已遍历过，就可以退出遍历的过程。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string reverseVowels(string s) {\n        auto isVowel = [vowels = \"aeiouAEIOU\"s](char ch) {\n            return vowels.find(ch) != string::npos;\n        };\n\n        int n = s.size();\n        int i = 0, j = n - 1;\n        while (i < j) {\n            while (i < n && !isVowel(s[i])) {\n                ++i;\n            }\n            while (j > 0 && !isVowel(s[j])) {\n                --j;\n            }\n            if (i < j) {\n                swap(s[i], s[j]);\n                ++i;\n                --j;\n            }\n        }\n        return s;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String reverseVowels(String s) {\n        int n = s.length();\n        char[] arr = s.toCharArray();\n        int i = 0, j = n - 1;\n        while (i < j) {\n            while (i < n && !isVowel(arr[i])) {\n                ++i;\n            }\n            while (j > 0 && !isVowel(arr[j])) {\n                --j;\n            }\n            if (i < j) {\n                swap(arr, i, j);\n                ++i;\n                --j;\n            }\n        }\n        return new String(arr);\n    }\n\n    public boolean isVowel(char ch) {\n        return \"aeiouAEIOU\".indexOf(ch) >= 0;\n    }\n\n    public void swap(char[] arr, int i, int j) {\n        char temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string ReverseVowels(string s) {\n        int n = s.Length;\n        char[] arr = s.ToCharArray();\n        int i = 0, j = n - 1;\n        while (i < j) {\n            while (i < n && !IsVowel(arr[i])) {\n                ++i;\n            }\n            while (j > 0 && !IsVowel(arr[j])) {\n                --j;\n            }\n            if (i < j) {\n                Swap(arr, i, j);\n                ++i;\n                --j;\n            }\n        }\n        return new string(arr);\n    }\n\n    public bool IsVowel(char ch) {\n        return \"aeiouAEIOU\".IndexOf(ch) >= 0;\n    }\n\n    public void Swap(char[] arr, int i, int j) {\n        char temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def reverseVowels(self, s: str) -> str:\n        def isVowel(ch: str) -> bool:\n            return ch in \"aeiouAEIOU\"\n        \n        n = len(s)\n        s = list(s)\n        i, j = 0, n - 1\n        while i < j:\n            while i < n and not isVowel(s[i]):\n                i += 1\n            while j > 0 and not isVowel(s[j]):\n                j -= 1\n            if i < j:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n        \n        return \"\".join(s)\n```\n\n```JavaScript [sol1-JavaScript]\nvar reverseVowels = function(s) {\n    const n = s.length;\n    const arr = Array.from(s);\n    let i = 0, j = n - 1;\n    while (i < j) {\n        while (i < n && !isVowel(arr[i])) {\n            ++i;\n        }\n        while (j > 0 && !isVowel(s[j])) {\n            --j;\n        }\n        if (i < j) {\n            swap(arr, i, j);\n            ++i;\n            --j;\n        }\n    }\n    return arr.join('');\n}\n\nconst isVowel = (ch) => {\n    return \"aeiouAEIOU\".indexOf(ch) >= 0;\n}\n\nconst swap = (arr, i, j) => {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n```\n\n```go [sol1-Golang]\nfunc reverseVowels(s string) string {\n    t := []byte(s)\n    n := len(t)\n    i, j := 0, n-1\n    for i < j {\n        for i < n && !strings.Contains(\"aeiouAEIOU\", string(t[i])) {\n            i++\n        }\n        for j > 0 && !strings.Contains(\"aeiouAEIOU\", string(t[j])) {\n            j--\n        }\n        if i < j {\n            t[i], t[j] = t[j], t[i]\n            i++\n            j--\n        }\n    }\n    return string(t)\n}\n```\n\n```C [sol1-C]\nchar vowel[] = \"aeiouAEIOU\";\n\nbool isVowel(char ch) {\n    for (int i = 0; vowel[i]; i++) {\n        if (vowel[i] == ch) {\n            return true;\n        }\n    }\n    return false;\n};\n\nchar* reverseVowels(char* s) {\n    int n = strlen(s);\n    int i = 0, j = n - 1;\n    while (i < j) {\n        while (i < n && !isVowel(s[i])) {\n            ++i;\n        }\n        while (j > 0 && !isVowel(s[j])) {\n            --j;\n        }\n        if (i < j) {\n            char* tmp = s[i];\n            s[i] = s[j], s[j] = tmp;\n            ++i;\n            --j;\n        }\n    }\n    return s;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度。在最坏的情况下，两个指针各遍历整个字符串一次。\n\n- 空间复杂度：$O(1)$ 或 $O(n)$，取决于使用的语言中字符串类型的性质。如果字符串是可修改的，那么我们可以直接在字符串上使用双指针进行交换，空间复杂度为 $O(1)$，否则需要使用 $O(n)$ 的空间将字符串临时转换为可以修改的数据结构（例如数组），空间复杂度为 $O(n)$。"
}