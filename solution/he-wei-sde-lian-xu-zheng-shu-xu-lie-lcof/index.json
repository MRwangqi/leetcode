{
	"titleSlug": "he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof",
	"slug": "mian-shi-ti-57-ii-he-wei-sde-lian-xu-zheng-shu-x-2",
	"url": "https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/solution/mian-shi-ti-57-ii-he-wei-sde-lian-xu-zheng-shu-x-2/",
	"content": "#### 方法一：枚举 + 暴力\n\n枚举每个正整数为起点，判断以它为起点的序列和 $\\textit{sum}$ 是否等于 $\\textit{target}$ 即可，由于题目要求序列长度至少大于 $2$，所以枚举的上界为 $\\lfloor\\frac{\\textit{target}}{2}\\rfloor$。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<vector<int>> findContinuousSequence(int target) {\n        vector<vector<int>> vec;\n        vector<int> res;\n        int sum = 0, limit = (target - 1) / 2; // (target - 1) / 2 等效于 target / 2 下取整\n        for (int i = 1; i <= limit; ++i) {\n            for (int j = i;; ++j) {\n                sum += j;\n                if (sum > target) {\n                    sum = 0;\n                    break;\n                } else if (sum == target) {\n                    res.clear();\n                    for (int k = i; k <= j; ++k) {\n                        res.emplace_back(k);\n                    }\n                    vec.emplace_back(res);\n                    sum = 0;\n                    break;\n                }\n            }\n        }\n        return vec;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[][] findContinuousSequence(int target) {\n        List<int[]> vec = new ArrayList<int[]>();\n        int sum = 0, limit = (target - 1) / 2; // (target - 1) / 2 等效于 target / 2 下取整\n        for (int i = 1; i <= limit; ++i) {\n            for (int j = i;; ++j) {\n                sum += j;\n                if (sum > target) {\n                    sum = 0;\n                    break;\n                } else if (sum == target) {\n                    int[] res = new int[j - i + 1];\n                    for (int k = i; k <= j; ++k) {\n                        res[k - i] = k;\n                    }\n                    vec.add(res);\n                    sum = 0;\n                    break;\n                }\n            }\n        }\n        return vec.toArray(new int[vec.size()][]);\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：外层需要枚举 $\\lfloor\\frac{\\textit{target}}{2}\\rfloor$ 次，内层判断最多不会超过 $O(\\sqrt{\\textit{target}})$ 的时间复杂度，因为我们考虑从 $1$ 开始累加到 $\\sqrt{\\textit{target}}$ ，由求和公式可以得\n\n  $$\\frac{(1+\\sqrt{\\textit{target}}) \\times \\sqrt{\\textit{target}}}{2}=\\textit{target}+\\frac{\\sqrt{\\textit{target}}}{2}> \\textit{target}$$\n\n  而如果累加到 $\\sqrt{\\textit{target}}-1$ ，由求和公式可以得\n\n  $$\\frac{(1+\\sqrt{\\textit{target}}-1) \\times (\\sqrt{\\textit{target}}-1)}{2}=\\textit{target}-\\frac{\\sqrt{\\textit{target}}}{2}< \\textit{target}$$\n\n  所以最多累加到 $\\sqrt{\\textit{target}}$ ，而以后从 $2,3,\\cdots$ 开始的数累加的长度必然也不会超过 $O(\\sqrt{\\textit{target}})$ 的时间复杂度。最后总时间复杂度为内外层循环复杂度相乘，即  $O(\\textit{target}\\sqrt{\\textit{target}})$\n\n-  空间复杂度：$O(1)$ ，除了答案数组只需要常数的空间存放若干变量。\n\n#### 方法二：枚举 + 数学优化\n\n方法一在枚举每个正整数为起点判断的时候是暴力从起点开始累加 $\\textit{sum}$ 和判断是否等于 $\\textit{target}$ 。但注意到，如果我们知道起点 $x$ 和终点 $y$ ，那么 $x$ 累加到 $y$ 的和由求和公式可以知道是 $\\frac{(x+y) \\times (y-x+1)}{2}$ ，那么问题就转化为了是否存在一个正整数 $y(y>x)$ ，满足等式\n\n$$\\frac{(x+y) \\times (y-x+1)}{2}=\\textit{target}$$\n\n转化一下变成 \n\n$$y^2+y-x^2+x-2 \\times \\textit{target}=0$$\n\n这是一个关于 $y$ 的一元二次方程，其中 $a=1,b=1,c=-x^2+x-2 \\times \\textit{target}$ 直接套用[求根公式](https://baike.baidu.com/item/%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E6%96%B9%E7%A8%8B/7231190?fr=aladdin#4)即可 $O(1)$ 解得 $y$ ，判断是否整数解需要满足两个条件：\n\n- 判别式 $b^2-4ac$ 开根需要为整数\n- 最后的求根公式的分子需要为偶数，因为分母为 $2$ \n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<vector<int>> findContinuousSequence(int target) {\n        vector<vector<int>> vec;\n        vector<int> res;\n        int sum = 0, limit = (target - 1) / 2; // (target - 1) / 2 等效于 target / 2 下取整\n        for (int x = 1; x <= limit; ++x) {\n            long long delta = 1 - 4 * (x - 1ll * x * x - 2 * target);\n            if (delta < 0) {\n                continue;\n            }\n            int delta_sqrt = (int)sqrt(delta + 0.5);\n            if (1ll * delta_sqrt * delta_sqrt == delta && (delta_sqrt - 1) % 2 == 0) {\n                int y = (-1 + delta_sqrt) / 2; // 另一个解(-1-delta_sqrt)/2必然小于0，不用考虑\n                if (x < y) {\n                    res.clear();\n                    for (int i = x; i <= y; ++i) {\n                        res.emplace_back(i);\n                    }\n                    vec.emplace_back(res);\n                }\n            }\n        }\n        return vec;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[][] findContinuousSequence(int target) {\n        List<int[]> vec = new ArrayList<int[]>();\n        int sum = 0, limit = (target - 1) / 2; // (target - 1) / 2 等效于 target / 2 下取整\n        for (int x = 1; x <= limit; ++x) {\n            long delta = 1 - 4 * (x - (long) x * x - 2 * target);\n            if (delta < 0) {\n                continue;\n            }\n            int delta_sqrt = (int) Math.sqrt(delta + 0.5);\n            if ((long) delta_sqrt * delta_sqrt == delta && (delta_sqrt - 1) % 2 == 0) {\n                int y = (-1 + delta_sqrt) / 2; // 另一个解(-1-delta_sqrt)/2必然小于0，不用考虑\n                if (x < y) {\n                    int[] res = new int[y - x + 1];\n                    for (int i = x; i <= y; ++i) {\n                        res[i - x] = i;\n                    }\n                    vec.add(res);\n                }\n            }\n        }\n        return vec.toArray(new int[vec.size()][]);\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：由于枚举以后只需要 $O(1)$ 的时间判断，所以时间复杂度为枚举起点的复杂度$O(\\textit{target})$ 。 \n\n- 空间复杂度：$O(1)$ ，除了答案数组只需要常数的空间存放若干变量。\n\n#### 方法三：双指针\n\n我们用两个指针 $l$ 和 $r$ 表示当前枚举到的以 $l$ 为起点到 $r$ 的区间，$\\textit{sum}$ 表示 $[l,r]$ 的区间和，由求和公式可 $O(1)$ 求得为 $\\textit{sum}=\\frac{(l+r) \\times (r-l+1)}{2}$ ，起始 $l=1,r=2$。\n\n一共有三种情况：\n\n- 如果 $\\textit{sum}<\\textit{target}$ 则说明指针 $r$ 还可以向右拓展使得 $sum$ 增大，此时指针 $r$ 向右移动，即 `r+=1`\n- 如果 $sum>target$ 则说明以 $l$ 为起点不存在一个 $r$ 使得 $sum=target$ ，此时要枚举下一个起点，指针 $l$ 向右移动，即`l+=1`\n- 如果 $\\textit{sum}==\\textit{target}$ 则说明我们找到了以 $l$ 为起点得合法解 $[l,r]$ ，我们需要将 $[l,r]$ 的序列放进答案数组，且我们知道以 $l$ 为起点的合法解最多只有一个，所以需要枚举下一个起点，指针 $l$ 向右移动，即 `l+=1`\n\n终止条件即为 $l>=r$ 的时候，这种情况的发生指针 $r$ 移动到了$\\lfloor\\frac{\\textit{target}}{2}\\rfloor+1$  的位置，导致 $l<r$ 的时候区间和始终大于 $target$ 。\n\n此方法其实是对方法一的优化，因为方法一是没有考虑区间与区间的信息可以复用，只是单纯的枚举起点，然后从起点开始累加，而该方法就是考虑到了如果已知 $[l,r]$ 的区间和等于 $\\textit{target}$ ，那么枚举下一个起点的时候，区间 $[l+1,r]$ 的和必然小于 $\\textit{target}$ ，我们就不需要再从 $l+1$ 再开始重复枚举，而是从 $r+1$ 开始枚举，充分的利用了已知的信息来优化时间复杂度。\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    vector<vector<int>> findContinuousSequence(int target) {\n        vector<vector<int>>vec;\n        vector<int> res;\n        for (int l = 1, r = 2; l < r;){\n            int sum = (l + r) * (r - l + 1) / 2;\n            if (sum == target) {\n                res.clear();\n                for (int i = l; i <= r; ++i) {\n                    res.emplace_back(i);\n                }\n                vec.emplace_back(res);\n                l++;\n            } else if (sum < target) {\n                r++;\n            } else {\n                l++;\n            }\n        }\n        return vec;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int[][] findContinuousSequence(int target) {\n        List<int[]> vec = new ArrayList<int[]>();\n        for (int l = 1, r = 2; l < r;) {\n            int sum = (l + r) * (r - l + 1) / 2;\n            if (sum == target) {\n                int[] res = new int[r - l + 1];\n                for (int i = l; i <= r; ++i) {\n                    res[i - l] = i;\n                }\n                vec.add(res);\n                l++;\n            } else if (sum < target) {\n                r++;\n            } else {\n                l++;\n            }\n        }\n        return vec.toArray(new int[vec.size()][]);\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：由于两个指针移动均单调不减，且最多移动 $\\lfloor\\frac{\\textit{target}}{2}\\rfloor$ 次，即方法一提到的枚举的上界，所以时间复杂度为 $O(\\textit{target})$ 。\n\n- 空间复杂度：$O(1)$ ，除了答案数组只需要常数的空间存放若干变量。"
}