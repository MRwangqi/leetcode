{
	"titleSlug": "number-of-lines-to-write-string",
	"slug": "xie-zi-fu-chuan-xu-yao-de-xing-shu-by-le-9bj5",
	"url": "https://leetcode-cn.com/problems/number-of-lines-to-write-string/solution/xie-zi-fu-chuan-xu-yao-de-xing-shu-by-le-9bj5/",
	"content": "#### 方法一: 直接遍历\n\n**思路与算法**\n\n我们从左到右遍历字符串 $s$ 中的每个字母，$\\textit{lines}$ 表示当前书写所需的行数，$\\textit{width}$ 表示当前行已经使用的宽度。当遍历到一个字母 $c$ 时：\n+ 如果 $\\textit{width} + \\textit{widths}[c] \\le 100$，此时那么更新 $\\textit{width} = \\textit{width} + \\textit{widths}[c]$ 并保持 $\\textit{lines}$ 不变；\n+ 如果 $\\textit{width} + \\textit{widths}[c] > 100$，此时需要另起新的一行，那么此时 $\\textit{lines}$ 的值加 $1$，并将 $\\textit{width}$ 置为 $\\textit{widths}[c]$。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\n        MAX_WIDTH = 100\n        lines, width = 1, 0\n        for c in s:\n            need = widths[ord(c) - ord('a')]\n            width += need\n            if width > MAX_WIDTH:\n                lines += 1\n                width = need\n        return [lines, width]\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public static final int MAX_WIDTH = 100;\n\n    public int[] numberOfLines(int[] widths, String s) {\n        int lines = 1;\n        int width = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int need = widths[s.charAt(i) - 'a'];\n            width += need;\n            if (width > MAX_WIDTH) {\n                lines++;\n                width = need;\n            }\n        }\n        return new int[]{lines, width};\n    }\n}\n```\n\n```C++ [sol1-C++]\nconst int MAX_WIDTH = 100;\n\nclass Solution {\npublic:\n    vector<int> numberOfLines(vector<int>& widths, string s) {\n        int lines = 1;\n        int width = 0;\n        for (auto & c : s) {\n            int need = widths[c - 'a'];\n            width += need;\n            if (width > MAX_WIDTH) {\n                lines++;\n                width = need;\n            }\n        }\n        return {lines, width};\n    }\n};\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public static int MAX_WIDTH = 100;\n\n    public int[] NumberOfLines(int[] widths, string s) {\n        int lines = 1;\n        int width = 0;\n        for (int i = 0; i < s.Length; i++) {\n            int need = widths[s[i] - 'a'];\n            width += need;\n            if (width > MAX_WIDTH) {\n                lines++;\n                width = need;\n            }\n        }\n        return new int[]{lines, width};\n    }\n}\n```\n\n```C [sol1-C]\n#define MAX_WIDTH 100\n\nint* numberOfLines(int* widths, int widthsSize, char * s, int* returnSize){\n    int lines = 1;\n    int width = 0;\n    int len = strlen(s);\n    for (int i = 0; i < len; i++) {\n        int need = widths[s[i] - 'a'];\n        width += need;\n        if (width > MAX_WIDTH) {\n            lines++;\n            width = need;\n        }\n    }\n    int * ans = (int *)malloc(sizeof(int) * 2);\n    *returnSize = 2;\n    ans[0] = lines;\n    ans[1] = width;\n    return ans;\n}\n```\n\n```go [sol1-Golang]\nfunc numberOfLines(widths []int, s string) []int {\n    const maxWidth = 100\n    lines, width := 1, 0\n    for _, c := range s {\n        need := widths[c-'a']\n        width += need\n        if width > maxWidth {\n            lines++\n            width = need\n        }\n    }\n    return []int{lines, width}\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst MAX_WIDTH = 100;\nvar numberOfLines = function(widths, s) {\n    let lines = 1;\n    let width = 0;\n    for (let i = 0; i < s.length; i++) {\n        const need = widths[s[i].charCodeAt() - 'a'.charCodeAt()];\n        width += need;\n        if (width > MAX_WIDTH) {\n            lines++;\n            width = need;\n        }\n    }\n    return [lines, width];\n};\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 为字符串 $s$ 的长度。需要遍历一遍字符串 $s$，求出行数。\n\n+ 空间复杂度：$O(1)$。"
}