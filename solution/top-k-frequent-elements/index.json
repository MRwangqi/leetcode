{
	"titleSlug": "top-k-frequent-elements",
	"slug": "qian-k-ge-gao-pin-yuan-su-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/top-k-frequent-elements/solution/qian-k-ge-gao-pin-yuan-su-by-leetcode-solution/",
	"content": "#### 方法一：堆\n\n**思路与算法**\n\n首先遍历整个数组，并使用哈希表记录每个数字出现的次数，并形成一个「出现次数数组」。找出原数组的前 $k$ 个高频元素，就相当于找出「出现次数数组」的前 $k$ 大的值。\n\n最简单的做法是给「出现次数数组」排序。但由于可能有 $O(N)$ 个不同的出现次数（其中 $N$ 为原数组长度），故总的算法复杂度会达到 $O(N\\log N)$，不满足题目的要求。\n\n在这里，我们可以利用堆的思想：建立一个小顶堆，然后遍历「出现次数数组」：\n- 如果堆的元素个数小于 $k$，就可以直接插入堆中。\n- 如果堆的元素个数等于 $k$，则检查堆顶与当前出现次数的大小。如果堆顶更大，说明至少有 $k$ 个数字的出现次数比当前值大，故舍弃当前值；否则，就弹出堆顶，并将当前值插入堆中。\n\n遍历完成后，堆中的元素就代表了「出现次数数组」中前 $k$ 大的值。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    static bool cmp(pair<int, int>& m, pair<int, int>& n) {\n        return m.second > n.second;\n    }\n\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        unordered_map<int, int> occurrences;\n        for (auto& v : nums) {\n            occurrences[v]++;\n        }\n\n        // pair 的第一个元素代表数组的值，第二个元素代表了该值出现的次数\n        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(&cmp)> q(cmp);\n        for (auto& [num, count] : occurrences) {\n            if (q.size() == k) {\n                if (q.top().second < count) {\n                    q.pop();\n                    q.emplace(num, count);\n                }\n            } else {\n                q.emplace(num, count);\n            }\n        }\n        vector<int> ret;\n        while (!q.empty()) {\n            ret.emplace_back(q.top().first);\n            q.pop();\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        Map<Integer, Integer> occurrences = new HashMap<Integer, Integer>();\n        for (int num : nums) {\n            occurrences.put(num, occurrences.getOrDefault(num, 0) + 1);\n        }\n\n        // int[] 的第一个元素代表数组的值，第二个元素代表了该值出现的次数\n        PriorityQueue<int[]> queue = new PriorityQueue<int[]>(new Comparator<int[]>() {\n            public int compare(int[] m, int[] n) {\n                return m[1] - n[1];\n            }\n        });\n        for (Map.Entry<Integer, Integer> entry : occurrences.entrySet()) {\n            int num = entry.getKey(), count = entry.getValue();\n            if (queue.size() == k) {\n                if (queue.peek()[1] < count) {\n                    queue.poll();\n                    queue.offer(new int[]{num, count});\n                }\n            } else {\n                queue.offer(new int[]{num, count});\n            }\n        }\n        int[] ret = new int[k];\n        for (int i = 0; i < k; ++i) {\n            ret[i] = queue.poll()[0];\n        }\n        return ret;\n    }\n}\n```\n\n```C [sol1-C]\nstruct hash_table {\n    int key;\n    int val;\n    UT_hash_handle hh;\n};\n\ntypedef struct hash_table* hash_ptr;\n\nstruct pair {\n    int first;\n    int second;\n};\n\nstruct pair* heap;\nint heapSize;\n\nvoid swap(struct pair* a, struct pair* b) {\n    struct pair t = *a;\n    *a = *b, *b = t;\n}\n\nbool cmp(struct pair* a, struct pair* b) {\n    return a->second < b->second;\n}\n\nstruct pair top() {\n    return heap[1];\n}\n\nint push(hash_ptr x) {\n    heap[++heapSize].first = x->key;\n    heap[heapSize].second = x->val;\n    int p = heapSize, s;\n    while (p > 1) {\n        s = p >> 1;\n        if (cmp(&heap[s], &heap[p])) return;\n        swap(&heap[p], &heap[s]);\n        p = s;\n    }\n}\n\nint pop() {\n    heap[1] = heap[heapSize--];\n    int p = 1, s;\n    while ((p << 1) <= heapSize) {\n        s = p << 1;\n        if (s < heapSize && cmp(&heap[s + 1], &heap[s])) s++;\n        if (cmp(&heap[p], &heap[s])) return;\n        swap(&heap[p], &heap[s]);\n        p = s;\n    }\n}\n\nint* topKFrequent(int* nums, int numsSize, int k, int* returnSize) {\n    hash_ptr head = NULL;\n    hash_ptr p = NULL, tmp = NULL;\n\n    for (int i = 0; i < numsSize; i++) {\n        HASH_FIND_INT(head, &nums[i], p);\n        if (p == NULL) {\n            p = malloc(sizeof(struct hash_table));\n            p->key = nums[i];\n            p->val = 1;\n            HASH_ADD_INT(head, key, p);\n        } else {\n            p->val++;\n        }\n    }\n\n    heap = malloc(sizeof(struct pair) * (k + 1));\n    heapSize = 0;\n\n    HASH_ITER(hh, head, p, tmp) {\n        if (heapSize == k) {\n            struct pair tmp = top();\n            if (tmp.second < p->val) {\n                pop();\n                push(p);\n            }\n        } else {\n            push(p);\n        }\n    }\n    *returnSize = k;\n    int* ret = malloc(sizeof(int) * k);\n    for (int i = 0; i < k; i++) {\n        struct pair tmp = top();\n        pop();\n        ret[i] = tmp.first;\n    }\n    return ret;\n}\n```\n\n```golang [sol1-Golang]\nfunc topKFrequent(nums []int, k int) []int {\n    occurrences := map[int]int{}\n    for _, num := range nums {\n        occurrences[num]++\n    }\n    h := &IHeap{}\n    heap.Init(h)\n    for key, value := range occurrences {\n        heap.Push(h, [2]int{key, value})\n        if h.Len() > k {\n            heap.Pop(h)\n        }\n    }\n    ret := make([]int, k)\n    for i := 0; i < k; i++ {\n        ret[k - i - 1] = heap.Pop(h).([2]int)[0]\n    }\n    return ret\n}\n\ntype IHeap [][2]int\n\nfunc (h IHeap) Len() int           { return len(h) }\nfunc (h IHeap) Less(i, j int) bool { return h[i][1] < h[j][1] }\nfunc (h IHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\n\nfunc (h *IHeap) Push(x interface{}) {\n    *h = append(*h, x.([2]int))\n}\n\nfunc (h *IHeap) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[0 : n-1]\n    return x\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\log k)$，其中 $N$ 为数组的长度。我们首先遍历原数组，并使用哈希表记录出现次数，每个元素需要 $O(1)$ 的时间，共需 $O(N)$ 的时间。随后，我们遍历「出现次数数组」，由于堆的大小至多为 $k$，因此每次堆操作需要 $O(\\log k)$ 的时间，共需 $O(N\\log k)$ 的时间。二者之和为 $O(N\\log k)$。\n- 空间复杂度：$O(N)$。哈希表的大小为 $O(N)$，而堆的大小为 $O(k)$，共计为 $O(N)$。\n\n#### 方法二：基于快速排序\n\n**思路与算法**\n\n我们可以使用基于快速排序的方法，求出「出现次数数组」的前 $k$ 大的值。\n\n在对数组 $\\textit{arr}[l \\ldots r]$ 做快速排序的过程中，我们首先将数组划分为两个部分 $\\textit{arr}[i \\ldots q-1]$ 与 $\\textit{arr}[q+1 \\ldots j]$，并使得 $\\textit{arr}[i \\ldots q-1]$ 中的每一个值都不超过 $\\textit{arr}[q]$，且 $\\textit{arr}[q+1 \\ldots j]$ 中的每一个值都大于 $\\textit{arr}[q]$。\n\n于是，我们根据 $k$ 与左侧子数组 $\\textit{arr}[i \\ldots q-1]$ 的长度（为 $q-i$）的大小关系：\n- 如果 $k \\le q-i$，则数组 $\\textit{arr}[l \\ldots r]$ 前 $k$ 大的值，就等于子数组 $\\textit{arr}[i \\ldots q-1]$ 前 $k$ 大的值。\n- 否则，数组 $\\textit{arr}[l \\ldots r]$ 前 $k$ 大的值，就等于左侧子数组全部元素，加上右侧子数组 $\\textit{arr}[q+1 \\ldots j]$ 中前 $k - (q - i)$ 大的值。\n\n原版的快速排序算法的平均时间复杂度为 $O(N\\log N)$。我们的算法中，每次只需在其中的一个分支递归即可，因此算法的平均时间复杂度降为 $O(N)$。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    void qsort(vector<pair<int, int>>& v, int start, int end, vector<int>& ret, int k) {\n        int picked = rand() % (end - start + 1) + start;\n        swap(v[picked], v[start]);\n\n        int pivot = v[start].second;\n        int index = start;\n        for (int i = start + 1; i <= end; i++) {\n            if (v[i].second >= pivot) {\n                swap(v[index + 1], v[i]);\n                index++;\n            }\n        }\n        swap(v[start], v[index]);\n\n        if (k <= index - start) {\n            qsort(v, start, index - 1, ret, k);\n        } else {\n            for (int i = start; i <= index; i++) {\n                ret.push_back(v[i].first);\n            }\n            if (k > index - start + 1) {\n                qsort(v, index + 1, end, ret, k - (index - start + 1));\n            }\n        }\n    }\n\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        unordered_map<int, int> occurrences;\n        for (auto& v: nums) {\n            occurrences[v]++;\n        }\n\n        vector<pair<int, int>> values;\n        for (auto& kv: occurrences) {\n            values.push_back(kv);\n        }\n        vector<int> ret;\n        qsort(values, 0, values.size() - 1, ret, k);\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        Map<Integer, Integer> occurrences = new HashMap<Integer, Integer>();\n        for (int num : nums) {\n            occurrences.put(num, occurrences.getOrDefault(num, 0) + 1);\n        }\n\n        List<int[]> values = new ArrayList<int[]>();\n        for (Map.Entry<Integer, Integer> entry : occurrences.entrySet()) {\n            int num = entry.getKey(), count = entry.getValue();\n            values.add(new int[]{num, count});\n        }\n        int[] ret = new int[k];\n        qsort(values, 0, values.size() - 1, ret, 0, k);\n        return ret;\n    }\n\n    public void qsort(List<int[]> values, int start, int end, int[] ret, int retIndex, int k) {\n        int picked = (int) (Math.random() * (end - start + 1)) + start;\n        Collections.swap(values, picked, start);\n        \n        int pivot = values.get(start)[1];\n        int index = start;\n        for (int i = start + 1; i <= end; i++) {\n            if (values.get(i)[1] >= pivot) {\n                Collections.swap(values, index + 1, i);\n                index++;\n            }\n        }\n        Collections.swap(values, start, index);\n\n        if (k <= index - start) {\n            qsort(values, start, index - 1, ret, retIndex, k);\n        } else {\n            for (int i = start; i <= index; i++) {\n                ret[retIndex++] = values.get(i)[0];\n            }\n            if (k > index - start + 1) {\n                qsort(values, index + 1, end, ret, retIndex, k - (index - start + 1));\n            }\n        }\n    }\n}\n```\n\n```C [sol2-C]\nstruct hash_table {\n    int key;\n    int val;\n    UT_hash_handle hh;\n};\n\ntypedef struct hash_table* hash_ptr;\n\nstruct pair {\n    int first;\n    int second;\n};\n\nvoid swap(struct pair* a, struct pair* b) {\n    struct pair t = *a;\n    *a = *b, *b = t;\n}\n\nvoid sort(struct pair* v, int start, int end, int* ret, int* retSize, int k) {\n    int picked = rand() % (end - start + 1) + start;\n    swap(&v[picked], &v[start]);\n\n    int pivot = v[start].second;\n    int index = start;\n    for (int i = start + 1; i <= end; i++) {\n        if (v[i].second >= pivot) {\n            swap(&v[index + 1], &v[i]);\n            index++;\n        }\n    }\n    swap(&v[start], &v[index]);\n\n    if (k <= index - start) {\n        sort(v, start, index - 1, ret, retSize, k);\n    } else {\n        for (int i = start; i <= index; i++) {\n            ret[(*retSize)++] = v[i].first;\n        }\n        if (k > index - start + 1) {\n            sort(v, index + 1, end, ret, retSize, k - (index - start + 1));\n        }\n    }\n}\n\nint* topKFrequent(int* nums, int numsSize, int k, int* returnSize) {\n    hash_ptr head = NULL;\n    hash_ptr p = NULL, tmp = NULL;\n\n    for (int i = 0; i < numsSize; i++) {\n        HASH_FIND_INT(head, &nums[i], p);\n        if (p == NULL) {\n            p = malloc(sizeof(struct hash_table));\n            p->key = nums[i];\n            p->val = 1;\n            HASH_ADD_INT(head, key, p);\n        } else {\n            p->val++;\n        }\n    }\n    struct pair values[numsSize];\n    int valuesSize = 0;\n\n    HASH_ITER(hh, head, p, tmp) {\n        values[valuesSize].first = p->key;\n        values[valuesSize++].second = p->val;\n    }\n    int* ret = malloc(sizeof(int) * k);\n    *returnSize = 0;\n    sort(values, 0, valuesSize - 1, ret, returnSize, k);\n    return ret;\n}\n```\n\n```golang [sol2-Golang]\nfunc topKFrequent(nums []int, k int) []int {\n    occurrences := map[int]int{}\n    for _, num := range nums {\n        occurrences[num]++\n    }\n    values := [][]int{}\n    for key, value := range occurrences {\n        values = append(values, []int{key, value})\n    }\n    ret := make([]int, k)\n    qsort(values, 0, len(values) - 1, ret, 0, k)\n    return ret\n}\n\nfunc qsort(values [][]int, start, end int, ret []int, retIndex, k int) {\n    rand.Seed(time.Now().UnixNano())\n    picked := rand.Int() % (end - start + 1) + start;\n    values[picked], values[start] = values[start], values[picked]\n\n    pivot := values[start][1]\n    index := start\n\n    for i := start + 1; i <= end; i++ {\n        if values[i][1] >= pivot {\n            values[index + 1], values[i] = values[i], values[index + 1]\n            index++\n        }\n    }\n    values[start], values[index] = values[index], values[start]\n    if k <= index - start {\n        qsort(values, start, index - 1, ret, retIndex, k)\n    } else {\n        for i := start; i <= index; i++ {\n            ret[retIndex] = values[i][0]\n            retIndex++\n        }\n        if k > index - start + 1 {\n            qsort(values, index + 1, end, ret, retIndex, k - (index - start + 1))\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N^2)$，其中 $N$ 为数组的长度。\n   设处理长度为 $N$ 的数组的时间复杂度为 $f(N)$。由于处理的过程包括一次遍历和一次子分支的递归，最好情况下，有 $f(N) = O(N) + f(N/2)$，根据 [主定理](https://baike.baidu.com/item/%E4%B8%BB%E5%AE%9A%E7%90%86/3463232)，能够得到 $f(N) = O(N)$。\n   最坏情况下，每次取的中枢数组的元素都位于数组的两端，时间复杂度退化为 $O(N^2)$。但由于我们在每次递归的开始会先随机选取中枢元素，故出现最坏情况的概率很低。\n   平均情况下，时间复杂度为 $O(N)$。\n- 空间复杂度：$O(N)$。哈希表的大小为 $O(N)$，用于排序的数组的大小也为 $O(N)$，快速排序的空间复杂度最好情况为 $O(\\log N)$，最坏情况为 $O(N)$。\n\n#### 引申\n\n本题与「[215. 数组中的第K个最大元素](https://leetcode-cn.com/problems/kth-largest-element-in-an-array)」具有诸多相似之处。"
}