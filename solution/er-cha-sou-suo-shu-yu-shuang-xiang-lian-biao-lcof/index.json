{
	"titleSlug": "er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof",
	"slug": "mian-shi-ti-36-er-cha-sou-suo-shu-yu-shuang-xian-5",
	"url": "https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/solution/mian-shi-ti-36-er-cha-sou-suo-shu-yu-shuang-xian-5/",
	"content": "#### 解题思路：\r\n\r\n本文解法基于性质：二叉搜索树的中序遍历为 **递增序列** 。\r\n将 二叉搜索树 转换成一个 “排序的循环双向链表” ，其中包含三个要素：\r\n\r\n1. **排序链表：** 节点应从小到大排序，因此应使用 **中序遍历** “从小到大”访问树的节点。\r\n2. **双向链表：** 在构建相邻节点的引用关系时，设前驱节点 `pre` 和当前节点 `cur` ，不仅应构建 `pre.right = cur` ，也应构建 `cur.left = pre` 。\r\n3. **循环链表：** 设链表头节点 `head` 和尾节点 `tail` ，则应构建 `head.left = tail` 和 `tail.right = head` 。\r\n\r\n![Picture1.png](https://pic.leetcode-cn.com/1599401091-PKIjds-Picture1.png){:width=500}\r\n\r\n**中序遍历** 为对二叉树作 “左、根、右” 顺序遍历，递归实现如下：\r\n\r\n```Python []\r\n# 打印中序遍历\r\ndef dfs(root):\r\n    if not root: return\r\n    dfs(root.left)  # 左\r\n    print(root.val) # 根\r\n    dfs(root.right) # 右\r\n```\r\n\r\n```Java []\r\n// 打印中序遍历\r\nvoid dfs(Node root) {\r\n    if(root == null) return;\r\n    dfs(root.left); // 左\r\n    System.out.println(root.val); // 根\r\n    dfs(root.right); // 右\r\n}\r\n```\r\n\r\n```C++ []\r\n// 打印中序遍历\r\nvoid dfs(Node* root) {\r\n    if(root == nullptr) return;\r\n    dfs(root->left); // 左\r\n    cout << root->val << endl; // 根\r\n    dfs(root->right); // 右\r\n}\r\n```\r\n\r\n根据以上分析，考虑使用中序遍历访问树的各节点 `cur` ；并在访问每个节点时构建 `cur` 和前驱节点 `pre` 的引用指向；中序遍历完成后，最后构建头节点和尾节点的引用指向即可。\r\n\r\n##### 算法流程：\r\n\r\n**`dfs(cur):`** 递归法中序遍历；\r\n\r\n1. **终止条件：** 当节点 `cur` 为空，代表越过叶节点，直接返回；\r\n2. 递归左子树，即 `dfs(cur.left)` ；\r\n3. **构建链表：**\r\n    1. **当 `pre` 为空时：** 代表正在访问链表头节点，记为 `head` ；\r\n    2. **当 `pre` 不为空时：** 修改双向节点引用，即 `pre.right = cur` ， `cur.left = pre` ；\r\n    3. **保存 `cur` ：** 更新 `pre = cur` ，即节点 `cur` 是后继节点的 `pre` ；\r\n4. 递归右子树，即 `dfs(cur.right)` ；\r\n\r\n**`treeToDoublyList(root)：`**\r\n\r\n1. **特例处理：** 若节点 `root` 为空，则直接返回；\r\n2. **初始化：** 空节点 `pre` ；\r\n3. **转化为双向链表：** 调用 `dfs(root)` ；\r\n4. **构建循环链表：** 中序遍历完成后，`head` 指向头节点， `pre` 指向尾节点，因此修改 `head` 和 `pre` 的双向节点引用即可；\r\n5. **返回值：** 返回链表的头节点 `head` 即可；\r\n\r\n<![Picture2.png](https://pic.leetcode-cn.com/1599402776-vPeoHZ-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/1599402776-ZUbEpW-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/1599402776-BeGvpX-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/1599402776-qstaql-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/1599402776-NNnLfI-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/1599402776-WMHCrE-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/1599402776-GVXFzi-Picture8.png),![Picture9.png](https://pic.leetcode-cn.com/1599402776-VCkREF-Picture9.png),![Picture10.png](https://pic.leetcode-cn.com/1599402776-VIUGkY-Picture10.png),![Picture11.png](https://pic.leetcode-cn.com/1599402776-tmZvCu-Picture11.png),![Picture12.png](https://pic.leetcode-cn.com/1599402776-MhDqlj-Picture12.png),![Picture13.png](https://pic.leetcode-cn.com/1599402776-BHNrPD-Picture13.png),![Picture14.png](https://pic.leetcode-cn.com/1599402776-WrwMzD-Picture14.png),![Picture15.png](https://pic.leetcode-cn.com/1599402776-aUyeTI-Picture15.png)>\r\n\r\n##### 复杂度分析：\r\n\r\n- **时间复杂度 $O(N)$ ：** $N$ 为二叉树的节点数，中序遍历需要访问所有节点。\r\n- **空间复杂度 $O(N)$ ：** 最差情况下，即树退化为链表时，递归深度达到 $N$，系统使用 $O(N)$ 栈空间。\r\n\r\n#### 代码：\r\n\r\n```Python []\r\nclass Solution:\r\n    def treeToDoublyList(self, root: 'Node') -> 'Node':\r\n        def dfs(cur):\r\n            if not cur: return\r\n            dfs(cur.left) # 递归左子树\r\n            if self.pre: # 修改节点引用\r\n                self.pre.right, cur.left = cur, self.pre\r\n            else: # 记录头节点\r\n                self.head = cur\r\n            self.pre = cur # 保存 cur\r\n            dfs(cur.right) # 递归右子树\r\n        \r\n        if not root: return\r\n        self.pre = None\r\n        dfs(root)\r\n        self.head.left, self.pre.right = self.pre, self.head\r\n        return self.head\r\n```\r\n\r\n```Java []\r\nclass Solution {\r\n    Node pre, head;\r\n    public Node treeToDoublyList(Node root) {\r\n        if(root == null) return null;\r\n        dfs(root);\r\n        head.left = pre;\r\n        pre.right = head;\r\n        return head;\r\n    }\r\n    void dfs(Node cur) {\r\n        if(cur == null) return;\r\n        dfs(cur.left);\r\n        if(pre != null) pre.right = cur;\r\n        else head = cur;\r\n        cur.left = pre;\r\n        pre = cur;\r\n        dfs(cur.right);\r\n    }\r\n}\r\n```\r\n\r\n```C++ []\r\nclass Solution {\r\npublic:\r\n    Node* treeToDoublyList(Node* root) {\r\n        if(root == nullptr) return nullptr;\r\n        dfs(root);\r\n        head->left = pre;\r\n        pre->right = head;\r\n        return head;\r\n    }\r\nprivate:\r\n    Node *pre, *head;\r\n    void dfs(Node* cur) {\r\n        if(cur == nullptr) return;\r\n        dfs(cur->left);\r\n        if(pre != nullptr) pre->right = cur;\r\n        else head = cur;\r\n        cur->left = pre;\r\n        pre = cur;\r\n        dfs(cur->right);\r\n    }\r\n};\r\n```\r\n"
}