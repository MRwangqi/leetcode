{
	"titleSlug": "maximum-number-of-events-that-can-be-attended-ii",
	"slug": "po-su-dp-er-fen-dp-jie-fa-by-ac_oier-88du",
	"url": "https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended-ii/solution/po-su-dp-er-fen-dp-jie-fa-by-ac_oier-88du/",
	"content": "## 基本思路\n\n**定义 $f[i][j]$ 为考虑前 $i$ 个事件，选择不超过 $j$ 的最大价值**\n\n对于每个事件，都有选择与不选两种选择：\n\n* 不选： $f[i][j] = f[i - 1][j]$\n* 选：找到第 $i$ 件事件之前，与第 $i$ 件事件不冲突的事件，记为 `last`，则有 $f[i][j] = f[last][j - 1] + value_i$\n\n两者取 $max$，则是 $f[i][j]$ 的值。\n\n分析到这里，因为我们要找 `last`，我们需要先对 `events` 的结束时间排序，然后找从右往左找，找到第一个满足 `结束时间 小于 当前事件的开始时间` 的事件，就是 `last`\n\n而找 `last` 的过程，可以直接循环找，也可以通过二分来找，都能过。\n\n---\n\n## 动态规划\n\n不通过「二分」来找 `last` 的 DP 解法。\n\n代码：\n```Java []\nclass Solution {\n    public int maxValue(int[][] es, int k) {\n        int n = es.length;\n        Arrays.sort(es, (a, b)->a[1]-b[1]);\n        // f[i][j] 代表考虑前 i 个事件，选择不超过 j 的最大价值\n        int[][] f = new int[n + 1][k + 1];\n        for (int i = 1; i <= n; i++) {\n            int[] ev = es[i - 1];\n            int s = ev[0], e = ev[1], v = ev[2];\n            \n            // 找到第 i 件事件之前，与第 i 件事件不冲突的事件\n            // 对于当前事件而言，冲突与否，与 j 无关\n            int last = 0;\n            for (int p = i - 1; p >= 1; p--) {\n                int[] prev = es[p - 1];\n                if (prev[1] < s) {\n                    last = p;\n                    break;\n                }\n            }\n            \n            for (int j = 1; j <= k; j++) {\n                f[i][j] = Math.max(f[i - 1][j], f[last][j - 1] + v);    \n            }\n        }\n        return f[n][k];\n    }\n}\n```\n* 时间复杂度：排序复杂度为 $O(n\\log{n})$，循环 `n` 个事件，每次循环需要往回找一个事件，复杂度为 $O(n)$，并更新 `k` 个状态，复杂度为 $O(k)$，因此转移的复杂度为 $O(n * (n + k))$；总的复杂度为 $O(n * (n + k + \\log{n}))$\n* 空间复杂度：$O(n * k)$\n\n---\n\n## 二分 + 动态规划\n\n通过「二分」来找 `last` 的 DP 解法。\n\n代码：\n```Java []\nclass Solution {\n    public int maxValue(int[][] es, int k) {\n        int n = es.length;\n        Arrays.sort(es, (a, b)->a[1]-b[1]);\n        // f[i][j] 代表考虑前 i 个事件，选择不超过 j 的最大价值\n        int[][] f = new int[n + 1][k + 1];\n        for (int i = 1; i <= n; i++) {\n            int[] ev = es[i - 1];\n            int s = ev[0], e = ev[1], v = ev[2];\n            \n            // 通过「二分」，找到第 i 件事件之前，与第 i 件事件不冲突的事件\n            // 对于当前事件而言，冲突与否，与 j 无关\n            int l = 1, r = i - 1;\n            while (l < r) {\n                int mid = l + r + 1 >> 1;\n                int[] prev = es[mid - 1];\n                if (prev[1] < s) l = mid;    \n                else r = mid - 1;\n            }\n            int last = (r > 0 && es[r - 1][1] < s) ? r : 0;\n            \n            for (int j = 1; j <= k; j++) {\n                f[i][j] = Math.max(f[i - 1][j], f[last][j - 1] + v);    \n            }\n        }\n        return f[n][k];\n    }\n}\n```\n* 时间复杂度：排序复杂度为 $O(n\\log{n})$，循环 `n` 个事件，每次循环需要往回找一个事件，复杂度为 $O(\\log{n})$，并更新 `k` 个状态，复杂度为 $O(k)$，因此转移的复杂度为 $O(n * (\\log{n} + k))$；总的复杂度为 $O(n * (k + \\log{n}))$\n* 空间复杂度：$O(n * k)$\n\n---\n\n## 最后\n\n**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ (\"▔□▔)/**\n\n也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。\n\n所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~"
}