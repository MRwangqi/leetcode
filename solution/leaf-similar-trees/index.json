{
	"titleSlug": "leaf-similar-trees",
	"slug": "xie-zi-xiang-si-de-shu-by-leetcode-solut-z0w6",
	"url": "https://leetcode-cn.com/problems/leaf-similar-trees/solution/xie-zi-xiang-si-de-shu-by-leetcode-solut-z0w6/",
	"content": "#### 方法一：深度优先搜索\n\n**思路与算法**\n\n我们可以使用深度优先搜索的方法得到一棵树的「叶值序列」。\n\n具体地，在深度优先搜索的过程中，我们总是先搜索当前节点的左子节点，再搜索当前节点的右子节点。如果我们搜索到一个叶节点，就将它的值放入序列中。\n\n在得到了两棵树分别的「叶值序列」后，我们比较它们是否相等即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void dfs(TreeNode* node, vector<int>& seq) {\n        if (!node->left && !node->right) {\n            seq.push_back(node->val);\n        }\n        else {\n            if (node->left) {\n                dfs(node->left, seq);\n            }\n            if (node->right) {\n                dfs(node->right, seq);\n            }\n        }\n    }\n\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        vector<int> seq1;\n        if (root1) {\n            dfs(root1, seq1);\n        }\n\n        vector<int> seq2;\n        if (root2) {\n            dfs(root2, seq2);\n        }\n\n        return seq1 == seq2;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n        List<Integer> seq1 = new ArrayList<Integer>();\n        if (root1 != null) {\n            dfs(root1, seq1);\n        }\n\n        List<Integer> seq2 = new ArrayList<Integer>();\n        if (root2 != null) {\n            dfs(root2, seq2);\n        }\n\n        return seq1.equals(seq2);\n    }\n\n    public void dfs(TreeNode node, List<Integer> seq) {\n        if (node.left == null && node.right == null) {\n            seq.add(node.val);\n        } else {\n            if (node.left != null) {\n                dfs(node.left, seq);\n            }\n            if (node.right != null) {\n                dfs(node.right, seq);\n            }\n        }\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool LeafSimilar(TreeNode root1, TreeNode root2) {\n        IList<int> seq1 = new List<int>();\n        if (root1 != null) {\n            DFS(root1, seq1);\n        }\n\n        IList<int> seq2 = new List<int>();\n        if (root2 != null) {\n            DFS(root2, seq2);\n        }\n\n        return seq1.SequenceEqual(seq2);\n    }\n\n    public void DFS(TreeNode node, IList<int> seq) {\n        if (node.left == null && node.right == null) {\n            seq.Add(node.val);\n        } else {\n            if (node.left != null) {\n                DFS(node.left, seq);\n            }\n            if (node.right != null) {\n                DFS(node.right, seq);\n            }\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def leafSimilar(self, root1: TreeNode, root2: TreeNode) -> bool:\n        def dfs(node: TreeNode):\n            if not node.left and not node.right:\n                yield node.val\n            else:\n                if node.left:\n                    yield from dfs(node.left)\n                if node.right:\n                    yield from dfs(node.right)\n        \n        seq1 = list(dfs(root1)) if root1 else list()\n        seq2 = list(dfs(root2)) if root2 else list()\n        return seq1 == seq2\n```\n\n```JavaScript [sol1-JavaScript]\nvar leafSimilar = function(root1, root2) {\n    \n    const seq1 = [];\n    if (root1) {\n        dfs(root1, seq1);\n    }\n\n    const seq2 = [];\n    if (root2) {\n        dfs(root2, seq2);\n    }\n    return seq1.toString() === seq2.toString();\n};\n\nconst dfs = (node, seq) => {\n    if (!node.left && !node.right) {\n        seq.push(node.val);\n    } else {\n        if (node.left) {\n            dfs(node.left, seq);\n        }\n        if (node.right) {\n            dfs(node.right, seq);\n        }\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc leafSimilar(root1, root2 *TreeNode) bool {\n    vals := []int{}\n    var dfs func(*TreeNode)\n    dfs = func(node *TreeNode) {\n        if node == nil {\n            return\n        }\n        if node.Left == nil && node.Right == nil {\n            vals = append(vals, node.Val)\n            return\n        }\n        dfs(node.Left)\n        dfs(node.Right)\n    }\n    dfs(root1)\n    vals1 := append([]int(nil), vals...)\n    vals = []int{}\n    dfs(root2)\n    if len(vals) != len(vals1) {\n        return false\n    }\n    for i, v := range vals1 {\n        if v != vals[i] {\n            return false\n        }\n    }\n    return true\n}\n```\n\n```C [sol1-C]\nvoid dfs(struct TreeNode* node, int* seq, int* seqSize) {\n    if (!node->left && !node->right) {\n        seq[(*seqSize)++] = node->val;\n    } else {\n        if (node->left) {\n            dfs(node->left, seq, seqSize);\n        }\n        if (node->right) {\n            dfs(node->right, seq, seqSize);\n        }\n    }\n}\n\nbool leafSimilar(struct TreeNode* root1, struct TreeNode* root2) {\n    int seq1[200], seq1Size = 0;\n    if (root1) {\n        dfs(root1, seq1, &seq1Size);\n    }\n\n    int seq2[200], seq2Size = 0;\n    if (root2) {\n        dfs(root2, seq2, &seq2Size);\n    }\n    if (seq1Size != seq2Size) {\n        return false;\n    }\n    for (int i = 0; i < seq1Size; i++) {\n        if (seq1[i] != seq2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n_1 + n_2)$，其中 $n_1$ 和 $n_2$ 分别是两棵树的节点个数。\n\n- 空间复杂度：$O(n_1 + n_2)$。空间复杂度主要取决于存储「叶值序列」的空间以及深度优先搜索的过程中需要使用的栈空间。"
}