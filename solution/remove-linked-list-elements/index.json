{
	"titleSlug": "remove-linked-list-elements",
	"slug": "yi-chu-lian-biao-yuan-su-by-leetcode-sol-654m",
	"url": "https://leetcode-cn.com/problems/remove-linked-list-elements/solution/yi-chu-lian-biao-yuan-su-by-leetcode-sol-654m/",
	"content": "#### 方法一：递归\n\n链表的定义具有递归的性质，因此链表题目常可以用递归的方法求解。这道题要求删除链表中所有节点值等于特定值的节点，可以用递归实现。\n\n对于给定的链表，首先对除了头节点 $\\textit{head}$ 以外的节点进行删除操作，然后判断 $\\textit{head}$ 的节点值是否等于给定的 $\\textit{val}$。如果 $\\textit{head}$ 的节点值等于 $\\textit{val}$，则 $\\textit{head}$ 需要被删除，因此删除操作后的头节点为 $\\textit{head}.\\textit{next}$；如果 $\\textit{head}$ 的节点值不等于 $\\textit{val}$，则 $\\textit{head}$ 保留，因此删除操作后的头节点还是 $\\textit{head}$。上述过程是一个递归的过程。\n\n递归的终止条件是 $\\textit{head}$ 为空，此时直接返回 $\\textit{head}$。当 $\\textit{head}$ 不为空时，递归地进行删除操作，然后判断 $\\textit{head}$ 的节点值是否等于 $\\textit{val}$ 并决定是否要删除 $\\textit{head}$。\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        if (head == null) {\n            return head;\n        }\n        head.next = removeElements(head.next, val);\n        return head.val == val ? head.next : head;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public ListNode RemoveElements(ListNode head, int val) {\n        if (head == null) {\n            return head;\n        }\n        head.next = RemoveElements(head.next, val);\n        return head.val == val ? head.next : head;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar removeElements = function(head, val) {\n    if (head === null) {\n            return head;\n        }\n        head.next = removeElements(head.next, val);\n        return head.val === val ? head.next : head;\n};\n```\n\n```go [sol1-Golang]\nfunc removeElements(head *ListNode, val int) *ListNode {\n    if head == nil {\n        return head\n    }\n    head.Next = removeElements(head.Next, val)\n    if head.Val == val {\n        return head.Next\n    }\n    return head\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        if (head == nullptr) {\n            return head;\n        }\n        head->next = removeElements(head->next, val);\n        return head->val == val ? head->next : head;\n    }\n};\n```\n\n```C [sol1-C]\nstruct ListNode* removeElements(struct ListNode* head, int val) {\n    if (head == NULL) {\n        return head;\n    }\n    head->next = removeElements(head->next, val);\n    return head->val == val ? head->next : head;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的长度。递归过程中需要遍历链表一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是链表的长度。空间复杂度主要取决于递归调用栈，最多不会超过 $n$ 层。\n\n#### 方法二：迭代\n\n也可以用迭代的方法删除链表中所有节点值等于特定值的节点。\n\n用 $\\textit{temp}$ 表示当前节点。如果 $\\textit{temp}$ 的下一个节点不为空且下一个节点的节点值等于给定的 $\\textit{val}$，则需要删除下一个节点。删除下一个节点可以通过以下做法实现：\n\n$$\n\\textit{temp}.\\textit{next} = \\textit{temp}.\\textit{next}.\\textit{next}\n$$\n\n如果 $\\textit{temp}$ 的下一个节点的节点值不等于给定的 $\\textit{val}$，则保留下一个节点，将 $\\textit{temp}$ 移动到下一个节点即可。\n\n当 $\\textit{temp}$ 的下一个节点为空时，链表遍历结束，此时所有节点值等于 $\\textit{val}$ 的节点都被删除。\n\n具体实现方面，由于链表的头节点 $\\textit{head}$ 有可能需要被删除，因此创建哑节点 $\\textit{dummyHead}$，令 $\\textit{dummyHead}.\\textit{next} = \\textit{head}$，初始化 $\\textit{temp}=\\textit{dummyHead}$，然后遍历链表进行删除操作。最终返回 $\\textit{dummyHead}.\\textit{next}$ 即为删除操作后的头节点。\n\n```Java [sol2-Java]\nclass Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode dummyHead = new ListNode(0);\n        dummyHead.next = head;\n        ListNode temp = dummyHead;\n        while (temp.next != null) {\n            if (temp.next.val == val) {\n                temp.next = temp.next.next;\n            } else {\n                temp = temp.next;\n            }\n        }\n        return dummyHead.next;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public ListNode RemoveElements(ListNode head, int val) {\n        ListNode dummyHead = new ListNode(0);\n        dummyHead.next = head;\n        ListNode temp = dummyHead;\n        while (temp.next != null) {\n            if (temp.next.val == val) {\n                temp.next = temp.next.next;\n            } else {\n                temp = temp.next;\n            }\n        }\n        return dummyHead.next;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar removeElements = function(head, val) {\n    const dummyHead = new ListNode(0);\n    dummyHead.next = head;\n    let temp = dummyHead;\n    while (temp.next !== null) {\n        if (temp.next.val == val) {\n            temp.next = temp.next.next;\n        } else {\n            temp = temp.next;\n        }\n    }\n    return dummyHead.next;\n};\n```\n\n```go [sol2-Golang]\nfunc removeElements(head *ListNode, val int) *ListNode {\n    dummyHead := &ListNode{Next: head}\n    for tmp := dummyHead; tmp.Next != nil; {\n        if tmp.Next.Val == val {\n            tmp.Next = tmp.Next.Next\n        } else {\n            tmp = tmp.Next\n        }\n    }\n    return dummyHead.Next\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        struct ListNode* dummyHead = new ListNode(0, head);\n        struct ListNode* temp = dummyHead;\n        while (temp->next != NULL) {\n            if (temp->next->val == val) {\n                temp->next = temp->next->next;\n            } else {\n                temp = temp->next;\n            }\n        }\n        return dummyHead->next;\n    }\n};\n```\n\n```C [sol2-C]\nstruct ListNode* removeElements(struct ListNode* head, int val) {\n    struct ListNode* dummyHead = malloc(sizeof(struct ListNode));\n    dummyHead->next = head;\n    struct ListNode* temp = dummyHead;\n    while (temp->next != NULL) {\n        if (temp->next->val == val) {\n            temp->next = temp->next->next;\n        } else {\n            temp = temp->next;\n        }\n    }\n    return dummyHead->next;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的长度。需要遍历链表一次。\n\n- 空间复杂度：$O(1)$。"
}