{
	"titleSlug": "ju-qing-hong-fa-shi-jian",
	"slug": "ju-qing-hong-fa-shi-jian-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/ju-qing-hong-fa-shi-jian/solution/ju-qing-hong-fa-shi-jian-by-leetcode-solution/",
	"content": "## 题意概述\n\n题目大意是有一个游戏，随着时间的增加我们的属性会不断提升。当属性大于某个临界点时会触发相应剧情，最后问每个剧情触发的时间。\n\n### 题解\n\n#### 简化问题\n\n在原问题比较复杂时，我们可以先考虑简化问题的情况。原问题中有三种不同的属性，三种属性均满足要求才会触发相应剧情。这里我们可以先考虑简化为只有一种属性。\n\n##### 解法 1\n\n如果只有一种属性，显然我们只需要计算每一天的属性情况，最后对于所有的requirements 都在属性列表中进行二分查找（现在只有一种属性了)，就能知道他是在哪一天完成的了。\n\n##### 解法 2\n\n还可以换一个思路，计算完每一天的属性情况后，我们将 requirements 中的单属性也同样进行排序，放入一个队列中。\n\n\n接着，我们遍历每一天的属性情况，由于 requirements 也是排序过的，我们只需要看队首有多少元素满足当前触发要求，满足则触发就可以了。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/LCP_8.gif)\n\n#### 原始问题\n\n以上只是单属性的做法，原始题目中给了多达三种属性。但是实际上，每一种属性的满足是**互相独立**的。\n\n简单来说，对于一个剧情要求 (C, R, H) 来说，假设 C 要求是在第 x 天满足的，R要求是在第 y 天满足的，H 要求是在第 z 天满足的。那么该剧情的满足时间为：\n\n$$t = \\max(x, y, z)$$\n\n而每一个属性在什么时间满足，正好是我们前面提到的**简化问题**。至此，原始问题的解法也清晰了：\n\n1. 根据简化问题，分别只考虑三种属性，计算各剧情三种属性的触发时间。\n2. 根据上式计算各剧情的最终触发时间。\n\n```python\nclass Solution(object):\n    def getTriggerTime(self, day_increase, story_requires):\n        \"\"\"\n        :type day_increase: List[List[int]]\n        :type story_requires: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        a = [0 for i in range(3)]\n        #将剧情的下标记录在story中，方便映射结果\n        story_requires = [x + [i] for i, x in enumerate(story_requires)]\n        #将requirements按三种维度分别排序，得到 s\n        s = [sorted(story_requires, key=lambda x: x[i]) for i in range(3)]\n        index = [0 for i in range(3)]\n\n        n = len(story_requires)\n        trigger = [0 for i in range(n)]\n        ans = [-1 for i in range(n)]\n        #枚举每一天\n        for d, (na,nb,nc) in enumerate(day_increase):\n            #计算当天的属性\n            a[0] += na; a[1] += nb; a[2] += nc\n            #遍历三种属性的排序序列，计算当前可以被触发的剧情\n            for i in range(3):\n                while index[i] < n and a[i] >= s[i][index[i]][i]:\n                    trigger[s[i][index[i]][-1]] += 1\n                    #如果某个剧情触发次数等于3次(三种属性均触发，剧情被实际触发)\n                    if trigger[s[i][index[i]][-1]] == 3:\n                        ans[s[i][index[i]][-1]] = d + 1\n                    index[i] += 1\n        #第0天单独考虑\n        for i, (na, nb, nc, _) in enumerate(story_requires):\n            if na == 0 and nb == 0 and nc == 0:\n                ans[_] = 0\n        return ans\n```\n\n#### 复杂度分析\n\n* 时间复杂度：$O(n * \\log(n))$。对属性的排序为整体的时间复杂度瓶颈。\n\n* 空间复杂度：$O(n)$。\n\n#### 拓展\n\n题目本质能解的原因是各个属性的达成是互相独立的。在这个基础上，可以有许多不同的变种。例如如果要求改成触发某一个属性即能触发剧情的话，将上式中的 max 改为 min 即可。"
}