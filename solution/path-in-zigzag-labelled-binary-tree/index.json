{
	"titleSlug": "path-in-zigzag-labelled-binary-tree",
	"slug": "er-cha-shu-xun-lu-by-leetcode-solution-ryx0",
	"url": "https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/solution/er-cha-shu-xun-lu-by-leetcode-solution-ryx0/",
	"content": "#### 方法一：数学\n\n我们先来研究一个简单的情形：二叉树的每一行都是按从左到右的顺序进行标记。此时二叉树满足以下性质：\n\n- 根节点位于第 $1$ 行；\n\n- 第 $i$ 行有 $2^{i-1}$ 个节点，最左边的节点标号为 $2^{i-1}$，最右边的节点标号为 $2^i-1$；\n\n- 对于标号为 $\\textit{val}$ 的节点，其左子节点的标号为 $2 \\times \\textit{val}$，右子节点的标号为 $2 \\times \\textit{val} + 1$，当 $\\textit{val}>1$ 时，其父节点的标号为 $\\lfloor \\frac{\\textit{val}}{2} \\rfloor$。\n\n对于给定节点的标号 $\\textit{label}$，可以根据上述性质得到从该节点到根节点的路径，将路径反转后，即为从根节点到标号 $\\textit{label}$ 的节点的路径。\n\n回到这题，对于偶数行按从右到左的顺序进行标记的情况，可以转换成按从左到右的顺序进行标记的情况，然后按照上述思路得到路径，只要对偶数行的标号进行转换即可。为了表述简洁，下文将按从左到右的顺序进行标记时的节点的标号称为「从左到右标号」。\n\n首先找到标号为 $\\textit{label}$ 的节点所在的行和该节点的「从左到右标号」。为了找到节点所在行，需要找到 $i$ 满足 $2^{i-1} \\le \\textit{label} < 2^i$，则该节点在第 $i$ 行。该节点的「从左到右标号」需要根据 $i$ 的奇偶性计算：\n\n- 当 $i$ 是奇数时，第 $i$ 行为按从左到右的顺序进行标记，因此该节点的「从左到右标号」即为 $\\textit{label}$；\n\n- 当 $i$ 是偶数时，第 $i$ 行为按从右到左的顺序进行标记，将整行的标号左右翻转之后得到按从左到右的顺序进行标记的标号，对于同一个节点，其翻转前后的标号之和为 $2^{i-1} + 2^i - 1$，因此标号为 $\\textit{label}$ 的节点的「从左到右标号」为 $2^{i-1} + 2^i - 1 - \\textit{label}$。\n\n得到标号为 $\\textit{label}$ 的节点的「从左到右标号」之后，即可得到从该节点到根节点的路径，以及路径上的每个节点的「从左到右标号」。对于路径上的每个节点，需要根据节点所在行的奇偶性，得到该节点的实际标号：\n\n- 当 $i$ 是奇数时，第 $i$ 行的每个节点的「从左到右标号」即为该节点的实际标号；\n\n- 当 $i$ 是偶数时，如果第 $i$ 行的一个节点的「从左到右标号」为 $\\textit{val}$，则该节点的实际标号为 $2^{i-1} + 2^i - 1 - \\textit{val}$。\n\n最后，将路径反转，即可得到从根节点到标号 $\\textit{label}$ 的节点的路径。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/1104/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/1104/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/1104/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/1104/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/1104/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/1104/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/1104/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/1104/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/1104/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/1104/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/1104/11.png)>\n\n<![fig12](https://assets.leetcode-cn.com/solution-static/1104/12.png),![fig13](https://assets.leetcode-cn.com/solution-static/1104/13.png),![fig14](https://assets.leetcode-cn.com/solution-static/1104/14.png),![fig15](https://assets.leetcode-cn.com/solution-static/1104/15.png),![fig16](https://assets.leetcode-cn.com/solution-static/1104/16.png),![fig17](https://assets.leetcode-cn.com/solution-static/1104/17.png),![fig18](https://assets.leetcode-cn.com/solution-static/1104/18.png),![fig19](https://assets.leetcode-cn.com/solution-static/1104/19.png),![fig20](https://assets.leetcode-cn.com/solution-static/1104/20.png),![fig21](https://assets.leetcode-cn.com/solution-static/1104/21.png),![fig22](https://assets.leetcode-cn.com/solution-static/1104/22.png),![fig23](https://assets.leetcode-cn.com/solution-static/1104/23.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> pathInZigZagTree(int label) {\n        int row = 1, rowStart = 1;\n        while (rowStart * 2 <= label) {\n            row++;\n            rowStart *= 2;\n        }\n        if (row % 2 == 0) {\n            label = getReverse(label, row);\n        }\n        List<Integer> path = new ArrayList<Integer>();\n        while (row > 0) {\n            if (row % 2 == 0) {\n                path.add(getReverse(label, row));\n            } else {\n                path.add(label);\n            }\n            row--;\n            label >>= 1;\n        }\n        Collections.reverse(path);\n        return path;\n    }\n\n    public int getReverse(int label, int row) {\n        return (1 << row - 1) + (1 << row) - 1 - label;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<int> PathInZigZagTree(int label) {\n        int row = 1, rowStart = 1;\n        while (rowStart * 2 <= label) {\n            row++;\n            rowStart *= 2;\n        }\n        if (row % 2 == 0) {\n            label = GetReverse(label, row);\n        }\n        IList<int> path = new List<int>();\n        while (row > 0) {\n            if (row % 2 == 0) {\n                path.Add(GetReverse(label, row));\n            } else {\n                path.Add(label);\n            }\n            row--;\n            label >>= 1;\n        }\n        path = new List<int>(path.Reverse());\n        return path;\n    }\n\n    public int GetReverse(int label, int row) {\n        return (1 << row - 1) + (1 << row) - 1 - label;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar pathInZigZagTree = function(label) {\n    let row = 1, rowStart = 1;\n    while (rowStart * 2 <= label) {\n        row++;\n        rowStart *= 2;\n    }\n    if (row % 2 === 0) {\n        label = getReverse(label, row);\n    }\n    const path = [];\n    while (row > 0) {\n        if (row % 2 === 0) {\n            path.push(getReverse(label, row));\n        } else {\n            path.push(label);\n        }\n        row--;\n        label >>= 1;\n    }\n    path.reverse();\n    return path;\n};\n\nconst getReverse = (label, row) => {\n    return (1 << row - 1) + (1 << row) - 1 - label;\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int getReverse(int label, int row) {\n        return (1 << row - 1) + (1 << row) - 1 - label;\n    }\n\n    vector<int> pathInZigZagTree(int label) {\n        int row = 1, rowStart = 1;\n        while (rowStart * 2 <= label) {\n            row++;\n            rowStart *= 2;\n        }\n        if (row % 2 == 0) {\n            label = getReverse(label, row);\n        }\n        vector<int> path;\n        while (row > 0) {\n            if (row % 2 == 0) {\n                path.push_back(getReverse(label, row));\n            } else {\n                path.push_back(label);\n            }\n            row--;\n            label >>= 1;\n        }\n        reverse(path.begin(), path.end());\n        return path;\n    }\n};\n```\n\n```C [sol1-C]\nvoid swap(int* a, int* b) {\n    int t = *a;\n    *a = *b, *b = t;\n}\n\nvoid reverse(int* arr, int left, int right) {\n    while (left < right) {\n        swap(&arr[left], &arr[right]);\n        left++, right--;\n    }\n}\n\nint getReverse(int label, int row) {\n    return (1 << row - 1) + (1 << row) - 1 - label;\n}\n\nint* pathInZigZagTree(int label, int* returnSize) {\n    int row = 1, rowStart = 1;\n    while (rowStart * 2 <= label) {\n        row++;\n        rowStart *= 2;\n    }\n    if (row % 2 == 0) {\n        label = getReverse(label, row);\n    }\n    int* path = malloc(sizeof(int) * 20);\n    *returnSize = 0;\n    while (row > 0) {\n        if (row % 2 == 0) {\n            path[(*returnSize)++] = getReverse(label, row);\n        } else {\n            path[(*returnSize)++] = label;\n        }\n        row--;\n        label >>= 1;\n    }\n    reverse(path, 0, *returnSize - 1);\n    return path;\n}\n```\n\n```go [sol1-Golang]\nfunc getReverse(label, row int) int {\n    return 1<<(row-1) + 1<<row - 1 - label\n}\n\nfunc pathInZigZagTree(label int) (path []int) {\n    row, rowStart := 1, 1\n    for rowStart*2 <= label {\n        row++\n        rowStart *= 2\n    }\n    if row%2 == 0 {\n        label = getReverse(label, row)\n    }\n    for row > 0 {\n        if row%2 == 0 {\n            path = append(path, getReverse(label, row))\n        } else {\n            path = append(path, label)\n        }\n        row--\n        label >>= 1\n    }\n    for i, n := 0, len(path); i < n/2; i++ {\n        path[i], path[n-1-i] = path[n-1-i], path[i]\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log \\textit{label})$。标号为 $\\textit{label}$ 的节点所在的行数为 $O(\\log \\textit{label})$，因此从根节点到标号 $\\textit{label}$ 的节点的路径的长度为 $O(\\log \\textit{label})$，路径中的每个节点的标号都可以在 $O(1)$ 时间内计算得到。\n\n- 空间复杂度：$O(1)$。除了返回值以外，额外使用的空间为常数。"
}