{
	"titleSlug": "stone-game-iv",
	"slug": "shi-zi-you-xi-iv-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/stone-game-iv/solution/shi-zi-you-xi-iv-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n我们用 $f[i]$ 表示先手在面对 $i$ 颗石子时是否处于必胜态（会赢得比赛）。由于先手和后手都采取最优策略，那么 $f[i]$ 为必胜态，当且仅当存在某个 $f[i - k^2]$ 为必败态。也就是说，当先手在面对 $i$ 颗石子时，可以选择取走 $k^2$ 颗，剩余的 $i-k^2$ 颗对于后手来说是必败态，因此先手会获胜。\n\n我们可以写出状态转移方程：\n\n$$\nf[i] = \\begin{cases}\n\\text{true}, & \\text{any~} f[i-k^2] \\text{~is false where~} 1 \\leq k^2 \\leq i \\\\\n\\text{false}, & \\text{otherwise}\n\\end{cases}\n$$\n\n边界条件为 $f[0]=\\text{false}$，即没有石子时，先手会输掉游戏。\n\n最终的答案即为 $f[n]$。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool winnerSquareGame(int n) {\n        vector<int> f(n + 1);\n        for (int i = 1; i <= n; ++i) {\n            for (int k = 1; k * k <= i; ++k) {\n                if (!f[i - k * k]) {\n                    f[i] = true;\n                    break;\n                }\n            }\n        }\n        \n        return f[n];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean winnerSquareGame(int n) {\n        boolean[] f = new boolean[n + 1];\n        for (int i = 1; i <= n; ++i) {\n            for (int k = 1; k * k <= i; ++k) {\n                if (!f[i - k * k]) {\n                    f[i] = true;\n                    break;\n                }\n            }\n        }\n        \n        return f[n];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def winnerSquareGame(self, n: int) -> bool:\n        f = [False] * (n + 1)\n        for i in range(1, n + 1):\n            k = 1\n            while k * k <= i:\n                if not f[i - k * k]:\n                    f[i] = True\n                    break\n                k += 1\n        \n        return f[n]\n```\n\n```C [sol1-C]\nbool winnerSquareGame(int n) {\n    int f[n + 1];\n    memset(f, 0, sizeof(f));\n    for (int i = 1; i <= n; ++i) {\n        for (int k = 1; k * k <= i; ++k) {\n            if (!f[i - k * k]) {\n                f[i] = true;\n                break;\n            }\n        }\n    }\n\n    return f[n];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\sqrt n)$。对于每一个数 $i$，$k$ 的枚举上限不超过 $\\sqrt i$，所以总时间复杂度为 $O(\\sum_{i=1}^n \\sqrt i) = O(n \\sqrt n)$。\n\n- 空间复杂度：$O(n)$，即为存储所有状态需要的空间。"
}