{
	"titleSlug": "letter-case-permutation",
	"slug": "zi-mu-da-xiao-xie-quan-pai-lie-by-leetcode",
	"url": "https://leetcode-cn.com/problems/letter-case-permutation/solution/zi-mu-da-xiao-xie-quan-pai-lie-by-leetcode/",
	"content": "#### 方法一：递归【通过】\n\n**思路**\n\n从左往右依次遍历字符，过程中保持 `ans` 为已遍历过字符的字母大小全排列。\n\n例如，当 `S = \"abc\"` 时，考虑字母 `\"a\", \"b\", \"c\"`，初始令 `ans = [\"\"]`，依次更新 `ans = [\"a\", \"A\"]`， `ans = [\"ab\", \"Ab\", \"aB\", \"AB\"]`， `ans = [\"abc\", \"Abc\", \"aBc\", \"ABc\", \"abC\", \"AbC\", \"aBC\", \"ABC\"]`。\n\n**算法**\n\n如果下一个字符 `c` 是字母，将当前已遍历过的字符串全排列复制两份，在第一份的每个字符串末尾添加 `lowercase(c)`，在第二份的每个字符串末尾添加 `uppercase(c)`。\n\n如果下一个字符 `c` 是数字，将 `c` 直接添加到每个字符串的末尾。\n\n```java [solution1-Java]\nclass Solution {\n    public List<String> letterCasePermutation(String S) {\n        List<StringBuilder> ans = new ArrayList();\n        ans.add(new StringBuilder());\n\n        for (char c: S.toCharArray()) {\n            int n = ans.size();\n            if (Character.isLetter(c)) {\n                for (int i = 0; i < n; ++i) {\n                    ans.add(new StringBuilder(ans.get(i)));\n                    ans.get(i).append(Character.toLowerCase(c));\n                    ans.get(n+i).append(Character.toUpperCase(c));\n                }\n            } else {\n                for (int i = 0; i < n; ++i)\n                    ans.get(i).append(c);\n            }\n        }\n\n        List<String> finalans = new ArrayList();\n        for (StringBuilder sb: ans)\n            finalans.add(sb.toString());\n        return finalans;\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def letterCasePermutation(self, S):\n        ans = [[]]\n\n        for char in S:\n            n = len(ans)\n            if char.isalpha():\n                for i in xrange(n):\n                    ans.append(ans[i][:])\n                    ans[i].append(char.lower())\n                    ans[n+i].append(char.upper())\n            else:\n                for i in xrange(n):\n                    ans[i].append(char)\n\n        return map(\"\".join, ans)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(2^{N} * N)$，其中 $N$ 是 `S` 的长度。\n\n* 空间复杂度：$O(2^N * N)$。\n\n#### 方法二：二分掩码【通过】\n\n**思路**\n\n假设字符串 `S` 有 $B$ 个字母，那么全排列就有 $2^B$ 个字符串，且可以用位掩码 `bits` 唯一地表示。\n\n例如，可以用 `00` 表示 `a7b`， `01` 表示 `a7B`， `10` 表示 `A7b`， `11` 表示 `A7B`。注意数字不是掩码的一部分。\n\n**算法**\n\n根据位掩码，构造正确的全排列结果。如果下一个字符是字母，则根据位掩码添加小写或大写字母。 否则添加对应的数字。\n\n```java [solution2-Java]\nclass Solution {\n    public List<String> letterCasePermutation(String S) {\n        int B = 0;\n        for (char c: S.toCharArray())\n            if (Character.isLetter(c))\n                B++;\n\n        List<String> ans = new ArrayList();\n\n        for (int bits = 0; bits < 1<<B; bits++) {\n            int b = 0;\n            StringBuilder word = new StringBuilder();\n            for (char letter: S.toCharArray()) {\n                if (Character.isLetter(letter)) {\n                    if (((bits >> b++) & 1) == 1)\n                        word.append(Character.toLowerCase(letter));\n                    else\n                        word.append(Character.toUpperCase(letter));\n                } else {\n                    word.append(letter);\n                }\n            }\n\n            ans.add(word.toString());\n        }\n\n        return ans;\n\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution(object):\n    def letterCasePermutation(self, S):\n        B = sum(letter.isalpha() for letter in S)\n        ans = []\n\n        for bits in xrange(1 << B):\n            b = 0\n            word = []\n            for letter in S:\n                if letter.isalpha():\n                    if (bits >> b) & 1:\n                        word.append(letter.lower())\n                    else:\n                        word.append(letter.upper())\n\n                    b += 1\n                else:\n                    word.append(letter)\n\n            ans.append(\"\".join(word))\n        return ans\n```\n\n\n**复杂度分析**\n\n* 时间和空间复杂度：$O(2^{N} * N)$，与方法一分析相同。\n\n#### 方法三： 内置函数库【通过】\n\n**思路和算法**\n\n集合的笛卡尔乘积是从所有集合中选择每种可能的组合。例如 `{1, 2\n} x {a, b, c} = {1a, 1b, 1c, 2a, 2b, 2c}`。\n\n对于具有内置函数来计算笛卡尔积的语言，可以直接调用内置函数减少工作量。\n\n```python [solution3-Python]\nclass Solution(object):\n    def letterCasePermutation(self, S):\n        f = lambda x: (x.lower(), x.upper()) if x.isalpha() else x\n        return map(\"\".join, itertools.product(*map(f, S)))\n```\n\n**复杂度分析**\n\n* 时间和空间复杂度：$O(2^{N} * N)$，与方法一分析相同。"
}