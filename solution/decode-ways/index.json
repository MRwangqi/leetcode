{
	"titleSlug": "decode-ways",
	"slug": "jie-ma-fang-fa-by-leetcode-solution-p8np",
	"url": "https://leetcode-cn.com/problems/decode-ways/solution/jie-ma-fang-fa-by-leetcode-solution-p8np/",
	"content": "#### 方法一：动态规划\n\n**思路与算法**\n\n对于给定的字符串 $s$，设它的长度为 $n$，其中的字符从左到右依次为 $s[1], s[2], \\cdots, s[n]$。我们可以使用动态规划的方法计算出字符串 $s$ 的解码方法数。\n\n具体地，设 $f_i$ 表示字符串 $s$ 的前 $i$ 个字符 $s[1..i]$ 的解码方法数。在进行状态转移时，我们可以考虑最后一次解码使用了 $s$ 中的哪些字符，那么会有下面的两种情况：\n\n- 第一种情况是我们使用了一个字符，即 $s[i]$ 进行解码，那么只要 $s[i] \\neq 0$，它就可以被解码成 $\\text{A} \\sim \\text{I}$ 中的某个字母。由于剩余的前 $i-1$ 个字符的解码方法数为 $f_{i-1}$，因此我们可以写出状态转移方程：\n\n    $$\n    f_i = f_{i-1}, \\quad 其中 ~ s[i] \\neq 0\n    $$\n\n- 第二种情况是我们使用了两个字符，即 $s[i-1]$ 和 $s[i]$ 进行编码。与第一种情况类似，$s[i-1]$ 不能等于 $0$，并且 $s[i-1]$ 和 $s[i]$ 组成的整数必须小于等于 $26$，这样它们就可以被解码成 $\\text{J} \\sim \\text{Z}$ 中的某个字母。由于剩余的前 $i-2$ 个字符的解码方法数为 $f_{i-2}$，因此我们可以写出状态转移方程：\n\n    $$\n    f_i = f_{i-2}, \\quad 其中 ~ s[i-1] \\neq 0 ~并且~ 10\\cdot s[i-1]+s[i] \\leq 26\n    $$\n\n    需要注意的是，只有当 $i>1$ 时才能进行转移，否则 $s[i-1]$ 不存在。\n\n将上面的两种状态转移方程在对应的条件满足时进行累加，即可得到 $f_i$ 的值。在动态规划完成后，最终的答案即为 $f_n$。\n\n**细节**\n\n动态规划的边界条件为：\n\n$$\nf_0 = 1\n$$\n\n即**空字符串可以有 $1$ 种解码方法，解码出一个空字符串**。\n\n同时，由于在大部分语言中，字符串的下标是从 $0$ 而不是 $1$ 开始的，因此在代码的编写过程中，我们需要将所有字符串的下标减去 $1$，与使用的语言保持一致。\n\n**代码**\n\n```C++ [sol11-C++]\nclass Solution {\npublic:\n    int numDecodings(string s) {\n        int n = s.size();\n        vector<int> f(n + 1);\n        f[0] = 1;\n        for (int i = 1; i <= n; ++i) {\n            if (s[i - 1] != '0') {\n                f[i] += f[i - 1];\n            }\n            if (i > 1 && s[i - 2] != '0' && ((s[i - 2] - '0') * 10 + (s[i - 1] - '0') <= 26)) {\n                f[i] += f[i - 2];\n            }\n        }\n        return f[n];\n    }\n};\n```\n\n```Java [sol11-Java]\nclass Solution {\n    public int numDecodings(String s) {\n        int n = s.length();\n        int[] f = new int[n + 1];\n        f[0] = 1;\n        for (int i = 1; i <= n; ++i) {\n            if (s.charAt(i - 1) != '0') {\n                f[i] += f[i - 1];\n            }\n            if (i > 1 && s.charAt(i - 2) != '0' && ((s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0') <= 26)) {\n                f[i] += f[i - 2];\n            }\n        }\n        return f[n];\n    }\n}\n```\n\n```Python [sol11-Python3]\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        n = len(s)\n        f = [1] + [0] * n\n        for i in range(1, n + 1):\n            if s[i - 1] != '0':\n                f[i] += f[i - 1]\n            if i > 1 and s[i - 2] != '0' and int(s[i-2:i]) <= 26:\n                f[i] += f[i - 2]\n        return f[n]\n```\n\n```JavaScript [sol11-JavaScript]\nvar numDecodings = function(s) {\n    const n = s.length;\n    const f = new Array(n + 1).fill(0);\n    f[0] = 1;\n    for (let i = 1; i <= n; ++i) {\n        if (s[i - 1] !== '0') {\n            f[i] += f[i - 1];\n        }\n        if (i > 1 && s[i - 2] != '0' && ((s[i - 2] - '0') * 10 + (s[i - 1] - '0') <= 26)) {\n            f[i] += f[i - 2];\n        }\n    }\n    return f[n];\n};\n```\n\n```go [sol11-Golang]\nfunc numDecodings(s string) int {\n    n := len(s)\n    f := make([]int, n+1)\n    f[0] = 1\n    for i := 1; i <= n; i++ {\n        if s[i-1] != '0' {\n            f[i] += f[i-1]\n        }\n        if i > 1 && s[i-2] != '0' && ((s[i-2]-'0')*10+(s[i-1]-'0') <= 26) {\n            f[i] += f[i-2]\n        }\n    }\n    return f[n]\n}\n```\n\n```C [sol11-C]\nint numDecodings(char* s) {\n    int n = strlen(s);\n    int f[n + 1];\n    memset(f, 0, sizeof(f));\n    f[0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        if (s[i - 1] != '0') {\n            f[i] += f[i - 1];\n        }\n        if (i > 1 && s[i - 2] != '0' && ((s[i - 2] - '0') * 10 + (s[i - 1] - '0') <= 26)) {\n            f[i] += f[i - 2];\n        }\n    }\n    return f[n];\n}\n```\n\n注意到在状态转移方程中，$f_i$ 的值仅与 $f_{i-1}$ 和 $f_{i-2}$ 有关，因此我们可以使用三个变量进行状态转移，省去数组的空间。\n\n```C++ [sol12-C++]\nclass Solution {\npublic:\n    int numDecodings(string s) {\n        int n = s.size();\n        // a = f[i-2], b = f[i-1], c = f[i]\n        int a = 0, b = 1, c;\n        for (int i = 1; i <= n; ++i) {\n            c = 0;\n            if (s[i - 1] != '0') {\n                c += b;\n            }\n            if (i > 1 && s[i - 2] != '0' && ((s[i - 2] - '0') * 10 + (s[i - 1] - '0') <= 26)) {\n                c += a;\n            }\n            tie(a, b) = {b, c};\n        }\n        return c;\n    }\n};\n```\n\n```Java [sol12-Java]\nclass Solution {\n    public int numDecodings(String s) {\n        int n = s.length();\n        // a = f[i-2], b = f[i-1], c=f[i]\n        int a = 0, b = 1, c = 0;\n        for (int i = 1; i <= n; ++i) {\n            c = 0;\n            if (s.charAt(i - 1) != '0') {\n                c += b;\n            }\n            if (i > 1 && s.charAt(i - 2) != '0' && ((s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0') <= 26)) {\n                c += a;\n            }\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}\n```\n\n```Python [sol12-Python3]\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        n = len(s)\n        # a = f[i-2], b = f[i-1], c = f[i]\n        a, b, c = 0, 1, 0\n        for i in range(1, n + 1):\n            c = 0\n            if s[i - 1] != '0':\n                c += b\n            if i > 1 and s[i - 2] != '0' and int(s[i-2:i]) <= 26:\n                c += a\n            a, b = b, c\n        return c\n```\n\n```JavaScript [sol12-JavaScript]\nvar numDecodings = function(s) {\n    const n = s.length;\n    // a = f[i-2], b = f[i-1], c = f[i]\n    let a = 0, b = 1, c = 0;\n    for (let i = 1; i <= n; ++i) {\n        c = 0;\n        if (s[i - 1] !== '0') {\n            c += b;\n        }\n        if (i > 1 && s[i - 2] != '0' && ((s[i - 2] - '0') * 10 + (s[i - 1] - '0') <= 26)) {\n            c += a;\n        }\n        a = b;\n        b = c;\n    }\n    return c;\n};\n```\n\n```go [sol12-Golang]\nfunc numDecodings(s string) int {\n    n := len(s)\n    // a = f[i-2], b = f[i-1], c = f[i]\n    a, b, c := 0, 1, 0\n    for i := 1; i <= n; i++ {\n        c = 0\n        if s[i-1] != '0' {\n            c += b\n        }\n        if i > 1 && s[i-2] != '0' && ((s[i-2]-'0')*10+(s[i-1]-'0') <= 26) {\n            c += a\n        }\n        a, b = b, c\n    }\n    return c\n}\n```\n\n```C [sol12-C]\nint numDecodings(char* s) {\n    int n = strlen(s);\n    // a = f[i-2], b = f[i-1], c = f[i]\n    int a = 0, b = 1, c;\n    for (int i = 1; i <= n; ++i) {\n        c = 0;\n        if (s[i - 1] != '0') {\n            c += b;\n        }\n        if (i > 1 && s[i - 2] != '0' && ((s[i - 2] - '0') * 10 + (s[i - 1] - '0') <= 26)) {\n            c += a;\n        }\n        a = b, b = c;\n    }\n    return c;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度。\n\n- 空间复杂度：$O(n)$ 或 $O(1)$。如果使用数组进行状态转移，空间复杂度为 $O(n)$；如果仅使用三个变量，空间复杂度为 $O(1)$。"
}