{
	"titleSlug": "longest-arithmetic-subsequence-of-given-difference",
	"slug": "zui-chang-ding-chai-zi-xu-lie-by-leetcod-xkua",
	"url": "https://leetcode-cn.com/problems/longest-arithmetic-subsequence-of-given-difference/solution/zui-chang-ding-chai-zi-xu-lie-by-leetcod-xkua/",
	"content": "#### 方法一：动态规划\n\n下文为方便叙述将 $\\textit{difference}$ 简写成 $d$。\n\n我们从左往右遍历 $\\textit{arr}$，并计算出以 $\\textit{arr}[i]$ 为结尾的最长的等差子序列的长度，取所有长度的最大值，即为答案。\n\n令 $\\textit{dp}[i]$ 表示以 $\\textit{arr}[i]$ 为结尾的最长的等差子序列的长度，我们可以在 $\\textit{arr}[i]$ 左侧找到满足 $\\textit{arr}[j]=\\textit{arr}[i]-d$ 的元素，将 $\\textit{arr}[i]$ 加到以 $\\textit{arr}[j]$ 为结尾的最长的等差子序列的末尾，这样可以递推地从 $dp[j]$ 计算出 $dp[i]$。由于我们是从左往右遍历 $\\textit{arr}$ 的，对于两个**相同**的元素，下标较大的元素对应的 $\\textit{dp}$ 值不会小于下标较小的元素对应的 $\\textit{dp}$ 值，因此下标 $j$ 可以取满足 $j<i$ 且 $\\textit{arr}[j]=\\textit{arr}[i]-d$ 的所有下标的最大值。故有转移方程\n\n$$\n\\textit{dp}[i] = \\textit{dp}[j] + 1\n$$\n\n由于我们总是在左侧找一个最近的等于 $\\textit{arr}[i]-d$ 元素并取其对应 $\\textit{dp}$ 值，因此我们直接用 $\\textit{dp}[v]$ 表示以 $v$ 为结尾的最长的等差子序列的长度，这样 $\\textit{dp}[v-d]$ 就是我们要找的左侧元素对应的最长的等差子序列的长度，因此转移方程可以改为\n\n$$\n\\textit{dp}[v] = \\textit{dp}[v-d] + 1\n$$\n\n最后答案为 $\\max\\{\\textit{dp}\\}$。\n\n```Python [sol1-Python3]\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = defaultdict(int)\n        for v in arr:\n            dp[v] = dp[v - difference] + 1\n        return max(dp.values())\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int longestSubsequence(vector<int> &arr, int difference) {\n        int ans = 0;\n        unordered_map<int, int> dp;\n        for (int v: arr) {\n            dp[v] = dp[v - difference] + 1;\n            ans = max(ans, dp[v]);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int longestSubsequence(int[] arr, int difference) {\n        int ans = 0;\n        Map<Integer, Integer> dp = new HashMap<Integer, Integer>();\n        for (int v : arr) {\n            dp.put(v, dp.getOrDefault(v - difference, 0) + 1);\n            ans = Math.max(ans, dp.get(v));\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int LongestSubsequence(int[] arr, int difference) {\n        int ans = 0;\n        Dictionary<int, int> dp = new Dictionary<int, int>();\n        foreach (int v in arr) {\n            int prev = dp.ContainsKey(v - difference) ? dp[v - difference] : 0;\n            if (dp.ContainsKey(v)) {\n                dp[v] = prev + 1;\n            } else {\n                dp.Add(v, prev + 1);\n            }\n            ans = Math.Max(ans, dp[v]);\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc longestSubsequence(arr []int, difference int) (ans int) {\n    dp := map[int]int{}\n    for _, v := range arr {\n        dp[v] = dp[v-difference] + 1\n        if dp[v] > ans {\n            ans = dp[v]\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar longestSubsequence = function(arr, difference) {\n    let ans = 0;\n    const dp = new Map();\n    for (const v of arr) {\n        dp.set(v, (dp.get(v - difference) || 0) + 1);\n        ans = Math.max(ans, dp.get(v));\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。\n\n- 空间复杂度：$O(n)$。哈希表需要 $O(n)$ 的空间。"
}