{
	"titleSlug": "sort-integers-by-the-number-of-1-bits",
	"slug": "gen-ju-shu-zi-er-jin-zhi-xia-1-de-shu-mu-pai-xu-by",
	"url": "https://leetcode-cn.com/problems/sort-integers-by-the-number-of-1-bits/solution/gen-ju-shu-zi-er-jin-zhi-xia-1-de-shu-mu-pai-xu-by/",
	"content": "#### 前言\n\n题目本身很简单，只要调用系统自带的排序函数，然后自己改写排序规则即可，所以这里主要讲解如何计算数字二进制下 $1$ 的个数。\n\n#### 方法一：暴力\n\n对每个十进制的数转二进制的时候统计二进制表示中的 $1$ 的个数即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int get(int x){\n        int res = 0;\n        while (x) {\n            res += (x % 2);\n            x /= 2;\n        }\n        return res;\n    }\n    vector<int> sortByBits(vector<int>& arr) {\n        vector<int> bit(10001, 0);\n        for (auto x: arr) {\n            bit[x] = get(x);\n        }\n        sort(arr.begin(), arr.end(), [&](int x, int y){\n            if (bit[x] < bit[y]) {\n                return true;\n            }\n            if (bit[x] > bit[y]) {\n                return false;\n            }\n            return x < y;\n        });\n        return arr;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] sortByBits(int[] arr) {\n        int[] bit = new int[10001];\n        List<Integer> list = new ArrayList<Integer>();\n        for (int x : arr) {\n            list.add(x);\n            bit[x] = get(x);\n        }\n        Collections.sort(list, new Comparator<Integer>() {\n            public int compare(Integer x, Integer y) {\n                if (bit[x] != bit[y]) {\n                    return bit[x] - bit[y];\n                } else {\n                    return x - y;\n                }\n            }\n        });\n        for (int i = 0; i < arr.length; ++i) {\n            arr[i] = list.get(i);\n        }\n        return arr;\n    }\n\n    public int get(int x) {\n        int res = 0;\n        while (x != 0) {\n            res += x % 2;\n            x /= 2;\n        }\n        return res;\n    }\n}\n```\n\n```Golang [sol1-Golang]\nfunc onesCount(x int) (c int) {\n    for ; x > 0; x /= 2 {\n        c += x % 2\n    }\n    return\n}\n\nfunc sortByBits(a []int) []int {\n    sort.Slice(a, func(i, j int) bool {\n        x, y := a[i], a[j]\n        cx, cy := onesCount(x), onesCount(y)\n        return cx < cy || cx == cy && x < y\n    })\n    return a\n}\n```\n\n```C [sol1-C]\nint* bit;\n\nint get(int x) {\n    int res = 0;\n    while (x) {\n        res += (x % 2);\n        x /= 2;\n    }\n    return res;\n}\n\nint cmp(void* _x, void* _y) {\n    int x = *(int*)_x, y = *(int*)_y;\n    return bit[x] == bit[y] ? x - y : bit[x] - bit[y];\n}\n\nint* sortByBits(int* arr, int arrSize, int* returnSize) {\n    bit = malloc(sizeof(int) * 10001);\n    memset(bit, 0, sizeof(int) * 10001);\n    for (int i = 0; i < arrSize; ++i) {\n        bit[arr[i]] = get(arr[i]);\n    }\n    qsort(arr, arrSize, sizeof(int), cmp);\n    free(bit);\n    *returnSize = arrSize;\n    return arr;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 为整数数组 $\\textit{arr}$ 的长度。\n\n- 空间复杂度：$O(n)$，其中 $n$ 为整数数组 $\\textit{arr}$ 的长度。\n\n\n#### 方法二：递推预处理\n\n我们定义 $bit[i]$ 为数字 $i$ 二进制表示下数字 $1$ 的个数，则可以列出递推式：\n\n$$ bit[i] = bit[i>>1] + (i \\& 1)$$\n\n所以我们线性预处理 $bit$ 数组然后去排序即可。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> sortByBits(vector<int>& arr) {\n        vector<int> bit(10001, 0);\n        for (int i = 1; i <= 10000; ++i) {\n            bit[i] = bit[i >> 1] + (i & 1);\n        }\n        sort(arr.begin(), arr.end(), [&](int x, int y){\n            if (bit[x] < bit[y]) {\n                return true;\n            }\n            if (bit[x] > bit[y]) {\n                return false;\n            }\n            return x < y;\n        });\n        return arr;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] sortByBits(int[] arr) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int x : arr) {\n            list.add(x);\n        }\n        int[] bit = new int[10001];\n        for (int i = 1; i <= 10000; ++i) {\n            bit[i] = bit[i >> 1] + (i & 1);\n        }\n        Collections.sort(list, new Comparator<Integer>() {\n            public int compare(Integer x, Integer y) {\n                if (bit[x] != bit[y]) {\n                    return bit[x] - bit[y];\n                } else {\n                    return x - y;\n                }\n            }\n        });\n        for (int i = 0; i < arr.length; ++i) {\n            arr[i] = list.get(i);\n        }\n        return arr;\n    }\n}\n```\n\n```Golang [sol2-Golang]\nvar bit = [1e4 + 1]int{}\n\nfunc init() {\n    for i := 1; i <= 1e4; i++ {\n        bit[i] = bit[i>>1] + i&1\n    }\n}\n\nfunc sortByBits(a []int) []int {\n    sort.Slice(a, func(i, j int) bool {\n        x, y := a[i], a[j]\n        cx, cy := bit[x], bit[y]\n        return cx < cy || cx == cy && x < y\n    })\n    return a\n}\n```\n\n```C [sol2-C]\nint* bit;\n\nint cmp(void* _x, void* _y) {\n    int x = *(int*)_x, y = *(int*)_y;\n    return bit[x] == bit[y] ? x - y : bit[x] - bit[y];\n}\n\nint* sortByBits(int* arr, int arrSize, int* returnSize) {\n    bit = malloc(sizeof(int) * 10001);\n    memset(bit, 0, sizeof(int) * 10001);\n    for (int i = 1; i <= 10000; ++i) {\n        bit[i] = bit[i >> 1] + (i & 1);\n    }\n    qsort(arr, arrSize, sizeof(int), cmp);\n    free(bit);\n    *returnSize = arrSize;\n    return arr;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 为整数数组 $\\textit{arr}$ 的长度。\n\n- 空间复杂度：$O(n)$，其中 $n$ 为整数数组 $\\textit{arr}$ 的长度。"
}