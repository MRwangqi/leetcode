{
	"titleSlug": "lemonade-change",
	"slug": "ning-meng-shui-zhao-ling-by-leetcode-sol-nvp7",
	"url": "https://leetcode-cn.com/problems/lemonade-change/solution/ning-meng-shui-zhao-ling-by-leetcode-sol-nvp7/",
	"content": "#### 方法一：贪心\n\n由于顾客只可能给你三个面值的钞票，而且我们一开始没有任何钞票，因此我们拥有的钞票面值只可能是 $5$ 美元，$10$ 美元和 $20$ 美元三种。基于此，我们可以进行如下的分类讨论。\n\n- $5$ 美元，由于柠檬水的价格也为 $5$ 美元，因此我们直接收下即可。\n\n- $10$ 美元，我们需要找回 $5$ 美元，如果没有 $5$ 美元面值的钞票，则无法正确找零。\n\n- $20$ 美元，我们需要找回 $15$ 美元，此时有两种组合方式，一种是一张 $10$ 美元和 $5$ 美元的钞票，一种是 $3$ 张 $5$ 美元的钞票，如果两种组合方式都没有，则无法正确找零。当可以正确找零时，两种找零的方式中我们更倾向于第一种，即如果存在 $5$ 美元和 $10$ 美元，我们就按第一种方式找零，否则按第二种方式找零，因为需要使用 $5$ 美元的找零场景会比需要使用 $10$ 美元的找零场景多，我们需要尽可能保留 $5$ 美元的钞票。\n\n基于此，我们维护两个变量 $\\textit{five}$ 和 $\\textit{ten}$ 表示当前手中拥有的 $5$ 美元和 $10$ 美元钞票的张数，从前往后遍历数组分类讨论即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool lemonadeChange(vector<int>& bills) {\n        int five = 0, ten = 0;\n        for (auto& bill: bills) {\n            if (bill == 5) {\n                five++;\n            } else if (bill == 10) {\n                if (five == 0) {\n                    return false;\n                }\n                five--;\n                ten++;\n            } else {\n                if (five > 0 && ten > 0) {\n                    five--;\n                    ten--;\n                } else if (five >= 3) {\n                    five -= 3;\n                } else {\n                    return false;\n                }\n            }\n        }\n        return true;\n    } \n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean lemonadeChange(int[] bills) {\n        int five = 0, ten = 0;\n        for (int bill : bills) {\n            if (bill == 5) {\n                five++;\n            } else if (bill == 10) {\n                if (five == 0) {\n                    return false;\n                }\n                five--;\n                ten++;\n            } else {\n                if (five > 0 && ten > 0) {\n                    five--;\n                    ten--;\n                } else if (five >= 3) {\n                    five -= 3;\n                } else {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar lemonadeChange = function(bills) {\n    let five = 0, ten = 0;\n    for (const bill of bills) {\n        if (bill === 5) {\n            five += 1;\n        } else if (bill === 10) {\n            if (five === 0) {\n                return false;\n            }\n            five -= 1;\n            ten += 1;\n        } else {\n            if (five > 0 && ten > 0) {\n                five -= 1;\n                ten -= 1;\n            } else if (five >= 3) {\n                five -= 3;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n```\n\n```Golang [sol1-Golang]\nfunc lemonadeChange(bills []int) bool {\n    five, ten := 0, 0\n    for _, bill := range bills {\n        if bill == 5 {\n            five++\n        } else if bill == 10 {\n            if five == 0 {\n                return false\n            }\n            five--\n            ten++\n        } else {\n            if five > 0 && ten > 0 {\n                five--\n                ten--\n            } else if five >= 3 {\n                five -= 3\n            } else {\n                return false\n            }\n        }\n    }\n    return true\n}\n```\n\n```C [sol1-C]\nbool lemonadeChange(int* bills, int billsSize) {\n    int five = 0, ten = 0;\n    for (int i = 0; i < billsSize; i++) {\n        if (bills[i] == 5) {\n            five++;\n        } else if (bills[i] == 10) {\n            if (five == 0) {\n                return false;\n            }\n            five--;\n            ten++;\n        } else {\n            if (five > 0 && ten > 0) {\n                five--;\n                ten--;\n            } else if (five >= 3) {\n                five -= 3;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 $\\textit{bills}$ 的长度。\n\n* 空间复杂度：$O(1)$。"
}