{
	"titleSlug": "minimum-moves-to-move-a-box-to-their-target-location",
	"slug": "1263-by-ikaruga",
	"url": "https://leetcode-cn.com/problems/minimum-moves-to-move-a-box-to-their-target-location/solution/1263-by-ikaruga/",
	"content": "#### BFS：\r\n1. BFS 每走一步，会把下一步能走的格子加入队列\r\n2. 按顺序走完这一步所有的可能，队列里就剩下下一步所有的可能\r\n3. 当走到终点时，就是最少步骤\r\n4. 每走一步，还会使用 set 来记录已经走到过的格子的坐标\r\n5. 把下一步加入队列前，检查，重复的就不用进队列了\r\n\r\n#### 分析：\r\n1. 如果这道题没有人，箱子自己走，那么只需要了解BFS，就可以解决了\r\n2. 如果有人存在，把人的状态同时记录下来\r\n3. 当人走到箱子的格子上，把箱子沿同一方向移动，如果箱子位置合法，那就是推动箱子了\r\n\r\n#### 问题和解决：\r\n同时记录人和箱子的状态，会有一些问题要解决\r\n1. 因为人也动，箱子也动，但是只有箱子动才算步数，所以加入队列的顺序，并不是步数顺序了\r\n   所以需要一个记录步数，同时记录人和箱子的坐标，还可以排序的队列\r\n   使用 priority_queue（优先队列）解决。\r\n   ```C++ []\r\n\tpriority_queue<vector<size_t>, vector<vector<size_t>>, greater<vector<size_t>>> pq;\r\n   ```\r\n   队列中的数据是 `vector<size_t>`\r\n   优先队列会使用 `vector<vector<size_t>>` 来保存 `vector<size_t>`\r\n   设置为升序存储 `greater<vector<size_t>>`\r\n   > 其中 `vector<size_t>` 保存的内容是：\r\n   > [0] 当前状态最小推箱子次数\r\n   > [1] 人的坐标 x\r\n   > [2] 人的坐标 y\r\n   > [3] 箱子的坐标 x\r\n   > [4] 箱子的坐标 y\r\n2. set 怎么调整\r\n   `set<vector<size_t>>` 用人和箱子的坐标来做记录\r\n   > [0] 人的坐标 x\r\n   > [1] 人的坐标 y\r\n   > [2] 箱子的坐标 x\r\n   > [3] 箱子的坐标 y\r\n   \r\n#### 解题思路：\r\n1. 定义优先队列\r\n2. 将原始数据中的人和箱子坐标提取出来，地图还原成通路\r\n3. 将起始状态存入队列\r\n4. 定义 set\r\n5. 将起始状态存入 set\r\n6. 定义方向数组\r\n7. 开始 bfs 吧，`while (!pq.empty())`\r\n8. 对人移动，检查合法性\r\n9. 检查人是否走到箱子上\r\n   91. 移动箱子，检查合法性\r\n   92. 步数 +1\r\n10. 判断箱子是否到终点，返回步数\r\n11. 检查 set，移动后是否重复，记录 set\r\n12. 如果 bfs 没结果，无法到达终点，返回 -1\r\n\r\n#### 模拟：\r\n<![1.png](https://pic.leetcode-cn.com/75a7e4607a7e1f52e1688653044e26724fe6d925a00332cc942d34bacacfab81-1.png),![2.png](https://pic.leetcode-cn.com/7136acce77c99d08e82ee4fb9e26d9777d9d542502dabf3fc700f6674a0f32d4-2.png),![3.png](https://pic.leetcode-cn.com/fe645ef1a768e577dfef4e4201080f95e60c884f4bc9f8819c16bb62eaa2ba06-3.png),![4.png](https://pic.leetcode-cn.com/326b9d2771787448358dc83dbe3b35b771030674b93cb771ff824b42a67c2a5d-4.png),![5.png](https://pic.leetcode-cn.com/4f94704e022c15d71bd581ae2b4623e931a0e00d9b0ee77009a0b3129b60cf7d-5.png)>\r\n\r\n做了几张图帮助理解一下，虽然只有开始的几步，但是如果理解了，后面脑补就可以了。  \r\n\r\n> 可以看到，当从队列中取出一个状态，4 种情况有一种情况是推动箱子，另一种是箱子没动人动。\r\n> 当 4 种情况中合理的都加入队列后，根据优先队列的排序，下一个状态是优先箱子没动人动的情况。\r\n> 因为题目的最终目的是求最少的箱子移动步数，所以只要箱子没动，步数都不增加，那么优先级就会高\r\n> 所以 bfs 才能按照步数作为参考\r\n\r\n\r\n#### 答题\r\n```C++ []\r\nint minPushBox(vector<vector<char>>& grid) \r\n{\r\n\t// pq，[0]当前状态最小推箱子次数 [1]人的坐标x [2]人的坐标y [3]箱子的坐标x [4]箱子的坐标y\r\n\tpriority_queue<vector<size_t>, vector<vector<size_t>>, greater<vector<size_t>>> pq;\r\n\tsize_t m = grid.size();\r\n\tsize_t n = grid[0].size();\r\n\r\n\tvector<size_t> a(5, 0);\r\n\tfor (size_t x = 0; x < m; x++)\r\n\t{\r\n\t\tfor (size_t y = 0; y < n; y++)\r\n\t\t{\r\n\t\t\tif (grid[x][y] == 'S')\r\n\t\t\t{\r\n\t\t\t\ta[1] = x;\r\n\t\t\t\ta[2] = y;\r\n\t\t\t\tgrid[x][y] = '.';\r\n\t\t\t}\r\n\t\t\telse if (grid[x][y] == 'B')\r\n\t\t\t{\r\n\t\t\t\ta[3] = x;\r\n\t\t\t\ta[4] = y;\r\n\t\t\t\tgrid[x][y] = '.';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpq.push(a);\r\n\r\n\tset<vector<size_t>> dist;\r\n\tdist.insert({ a[1], a[2], a[3], a[4] });\r\n\tint dx[4] = { 0,0,1,-1 };\r\n\tint dy[4] = { 1,-1,0,0 };\r\n\r\n\twhile (!pq.empty())\r\n\t{\r\n\t\tauto v = pq.top();\r\n\t\tpq.pop();\r\n\r\n\t\tfor (int i = 0; i < 4; i++)\r\n\t\t{\r\n\t\t\tvector<size_t> next_s = { v[1] + dx[i], v[2] + dy[i] };\r\n\t\t\tif (next_s[0] >= m || next_s[1] >= n || grid[next_s[0]][next_s[1]] == '#')\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tvector<size_t> next_b = { v[3], v[4] };\r\n\t\t\tsize_t d = v[0];\r\n\t\t\tif (next_s == next_b)\r\n\t\t\t{\r\n\t\t\t\tnext_b[0] += dx[i];\r\n\t\t\t\tnext_b[1] += dy[i];\r\n\t\t\t\tif (next_b[0] >= m || next_b[1] >= n || grid[next_b[0]][next_b[1]] == '#')\r\n\t\t\t\t{\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\td++;\r\n\t\t\t}\r\n\t\t\tif (grid[next_b[0]][next_b[1]] == 'T')\r\n\t\t\t{\r\n\t\t\t\treturn (int)d;\r\n\t\t\t}\r\n\r\n\t\t\tif (dist.find({next_s[0], next_s[1], next_b[0], next_b[1]}) != dist.end())\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tdist.insert({ next_s[0], next_s[1], next_b[0], next_b[1] });\r\n\t\t\tpq.push({ d, next_s[0], next_s[1], next_b[0], next_b[1] });\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n```\r\n\r\n\r\n\r\n#### 致谢：\r\n\r\n感谢 `小白二号` [@scut_dell](/u/scut_dell/) 的竞赛题解，让我学到了这种解法。  \r\n我学会之后，再详细的讲解，分享给他人。\r\n\r\n感谢您的观看，希望对您有帮助，欢迎热烈的交流！  \r\n\r\n\r\n"
}