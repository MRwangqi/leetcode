{
	"titleSlug": "maximum-distance-between-a-pair-of-values",
	"slug": "xia-biao-dui-zhong-de-zui-da-ju-chi-by-l-dsou",
	"url": "https://leetcode-cn.com/problems/maximum-distance-between-a-pair-of-values/solution/xia-biao-dui-zhong-de-zui-da-ju-chi-by-l-dsou/",
	"content": "#### 方法一：双指针\n\n**提示 $1$**\n\n考虑遍历下标对中的某一个下标，并寻找此时所有有效坐标对中距离最大的另一个下标。暴力遍历另一个下标显然不满足时间复杂度要求，此时是否存在一些可以优化寻找过程的性质？\n\n**思路与算法**\n\n不失一般性，我们遍历 $\\textit{nums}_2$ 中的下标 $j$，同时寻找此时符合要求的 $\\textit{nums}_1$ 中最小的下标 $i$。\n\n假设下标 $j$ 对应的最小下标为 $i$，当 $j$ 变为 $j + 1$ 时，由于 $\\textit{nums}_2$ 非递增，即 $\\textit{nums}_2[j] \\ge \\textit{nums}_2[j+1]$，那么 $\\textit{nums}_1$ 中可取元素的上界不会增加。同时由于 $\\textit{nums}_1$ 也非递增，因此 $j + 1$ 对应的最小下标 $i'$ 一定满足 $i' \\ge i$。\n\n那么我们就可以在遍历 $j$ 的同时维护对应的 $i$，并用 $\\textit{res}$ 来维护下标对 $(i, j)$ 的最大距离。我们将 $\\textit{res}$ 初值置为 $0$，这样即使存在 $\\textit{nums}_1[i] \\le \\textit{nums}_2[j]$ 但 $i > j$ 这种不符合要求的情况，由于此时距离为负因而不会对结果产生影响（不存在时也返回 $0$）。\n\n另外，在维护最大距离的时候要注意下标 $i$ 的合法性，即 $i < n_1$，其中 $n_1$ 为 $\\textit{nums}_1$ 的长度。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxDistance(vector<int>& nums1, vector<int>& nums2) {\n        int n1 = nums1.size();\n        int n2 = nums2.size();\n        int i = 0;\n        int res = 0;\n        for (int j = 0; j < n2; ++j){\n            while (i < n1 && nums1[i] > nums2[j]){\n                ++i;\n            }\n            if (i < n1){\n                res = max(res, j - i);\n            }\n        }\n        return res;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxDistance(self, nums1: List[int], nums2: List[int]) -> int:\n        n1, n2 = len(nums1), len(nums2)\n        i = 0\n        res = 0\n        for j in range(n2):\n            while i < n1 and nums1[i] > nums2[j]:\n                i += 1\n            if i < n1:\n                res = max(res, j - i)\n        return res\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n_1 + n_2)$，其中 $n_1, n_2$ 分别为 $\\textit{nums}_1$ 与 $\\textit{nums}_2$ 的长度。在双指针寻找最大值的过程中，我们最多会遍历两个数组各一次。\n\n- 空间复杂度：$O(1)$，我们使用了常数个变量进行遍历。"
}