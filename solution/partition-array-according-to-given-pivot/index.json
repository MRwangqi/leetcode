{
	"titleSlug": "partition-array-according-to-given-pivot",
	"slug": "gen-ju-gei-ding-shu-zi-hua-fen-shu-zu-by-372i",
	"url": "https://leetcode-cn.com/problems/partition-array-according-to-given-pivot/solution/gen-ju-gei-ding-shu-zi-hua-fen-shu-zu-by-372i/",
	"content": "#### 方法一：双指针\n\n**思路与算法**\n\n我们可以对数组 $\\textit{nums}$ 进行一次遍历，并使用两个指针 $\\textit{left}$ 和 $\\textit{right}$ 来更新答案数组。答案数组长度与 $\\textit{nums}$ 的长度相同，初始时，$\\textit{left}$ 和 $\\textit{right}$ 分别指向答案数组的最左端和最右端。\n\n在对 $\\textit{nums}$ 进行遍历时，记当前遍历到的数为 $x$。如果 $x < \\textit{pivot}$，我们就将 $x$ 放入左指针的位置，并将左指针向右移动一个位置；如果 $x > \\textit{pivot}$，我们就将 $x$ 放入右指针的位置，并将右指针向左移动一个位置。\n\n在遍历结束之后，我们需要注意两点：\n\n- 对于所有与 $\\textit{pivot}$ 相等的元素，我们并没有进行处理。我们可以在初始化答案数组时，直接将所有元素赋值为 $\\textit{pivot}$ 来避免额外的处理；\n\n- 对于严格大于 $\\textit{pivot}$ 的元素，题目中要求它们的「相对顺序」不能发生改变，因此需要将这些元素在答案数组中对应的段进行反转。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> pivotArray(vector<int>& nums, int pivot) {\n        int n = nums.size();\n        vector<int> ans(n, pivot);\n        int left = 0, right = n - 1;\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] < pivot) {\n                ans[left] = nums[i];\n                ++left;\n            }\n            else if (nums[i] > pivot) {\n                ans[right] = nums[i];\n                --right;\n            }\n        }\n        reverse(ans.begin() + right + 1, ans.end());\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:\n        n = len(nums)\n        ans = [pivot] * n\n        left, right = 0, n - 1\n\n        for i in range(n):\n            if nums[i] < pivot:\n                ans[left] = nums[i]\n                left += 1\n            elif nums[i] > pivot:\n                ans[right] = nums[i]\n                right -= 1\n        \n        x, y = right + 1, n - 1\n        while x < y:\n            ans[x], ans[y] = ans[y], ans[x]\n            x += 1\n            y -= 1\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(1)$。这里不考虑答案数组需要使用的空间。"
}