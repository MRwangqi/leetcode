{
	"titleSlug": "remove-duplicates-from-sorted-list-ii",
	"slug": "shan-chu-pai-xu-lian-biao-zhong-de-zhong-oayn",
	"url": "https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/solution/shan-chu-pai-xu-lian-biao-zhong-de-zhong-oayn/",
	"content": "#### 方法一：一次遍历\n\n**思路与算法**\n\n由于给定的链表是排好序的，因此**重复的元素在链表中出现的位置是连续的**，因此我们只需要对链表进行一次遍历，就可以删除重复的元素。由于链表的头节点可能会被删除，因此我们需要额外使用一个哑节点（dummy node）指向链表的头节点。\n\n具体地，我们从指针 $\\textit{cur}$ 指向链表的哑节点，随后开始对链表进行遍历。如果当前 $\\textit{cur.next}$ 与 $\\textit{cur.next.next}$ 对应的元素相同，那么我们就需要将 $\\textit{cur.next}$ 以及所有后面拥有相同元素值的链表节点全部删除。我们记下这个元素值 $x$，随后不断将 $\\textit{cur.next}$ 从链表中移除，直到 $\\textit{cur.next}$ 为空节点或者其元素值不等于 $x$ 为止。此时，我们将链表中所有元素值为 $x$ 的节点全部删除。\n\n如果当前 $\\textit{cur.next}$ 与 $\\textit{cur.next.next}$ 对应的元素不相同，那么说明链表中只有一个元素值为 $\\textit{cur.next}$ 的节点，那么我们就可以将 $\\textit{cur}$ 指向 $\\textit{cur.next}$。\n\n当遍历完整个链表之后，我们返回链表的的哑节点的下一个节点 $\\textit{dummy.next}$ 即可。\n\n**细节**\n\n需要注意 $\\textit{cur.next}$ 以及 $\\textit{cur.next.next}$ 可能为空节点，如果不加以判断，可能会产生运行错误。\n\n**代码**\n\n注意下面 $\\texttt{C++}$ 代码中并没有释放被删除的链表节点以及哑节点的空间。如果在面试中遇到本题，读者需要针对这一细节与面试官进行沟通。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if (!head) {\n            return head;\n        }\n        \n        ListNode* dummy = new ListNode(0, head);\n\n        ListNode* cur = dummy;\n        while (cur->next && cur->next->next) {\n            if (cur->next->val == cur->next->next->val) {\n                int x = cur->next->val;\n                while (cur->next && cur->next->val == x) {\n                    cur->next = cur->next->next;\n                }\n            }\n            else {\n                cur = cur->next;\n            }\n        }\n\n        return dummy->next;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        \n        ListNode dummy = new ListNode(0, head);\n\n        ListNode cur = dummy;\n        while (cur.next != null && cur.next.next != null) {\n            if (cur.next.val == cur.next.next.val) {\n                int x = cur.next.val;\n                while (cur.next != null && cur.next.val == x) {\n                    cur.next = cur.next.next;\n                }\n            } else {\n                cur = cur.next;\n            }\n        }\n\n        return dummy.next;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n        if not head:\n            return head\n        \n        dummy = ListNode(0, head)\n\n        cur = dummy\n        while cur.next and cur.next.next:\n            if cur.next.val == cur.next.next.val:\n                x = cur.next.val\n                while cur.next and cur.next.val == x:\n                    cur.next = cur.next.next\n            else:\n                cur = cur.next\n\n        return dummy.next\n```\n\n```JavaScript [sol1-JavaScript]\nvar deleteDuplicates = function(head) {\n    if (!head) {\n        return head;\n    }\n\n    const dummy = new ListNode(0, head);\n\n    let cur = dummy;\n    while (cur.next && cur.next.next) {\n        if (cur.next.val === cur.next.next.val) {\n            const x = cur.next.val;\n            while (cur.next && cur.next.val === x) {\n                cur.next = cur.next.next;\n            } \n        } else {\n            cur = cur.next;\n        }\n    }\n    return dummy.next;\n};\n```\n\n```go [sol1-Golang]\nfunc deleteDuplicates(head *ListNode) *ListNode {\n    if head == nil {\n        return nil\n    }\n\n    dummy := &ListNode{0, head}\n\n    cur := dummy\n    for cur.Next != nil && cur.Next.Next != nil {\n        if cur.Next.Val == cur.Next.Next.Val {\n            x := cur.Next.Val\n            for cur.Next != nil && cur.Next.Val == x {\n                cur.Next = cur.Next.Next\n            }\n        } else {\n            cur = cur.Next\n        }\n    }\n\n    return dummy.Next\n}\n```\n\n```C [sol1-C]\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\n    if (!head) {\n        return head;\n    }\n\n    struct ListNode* dummy = malloc(sizeof(struct ListNode));\n    dummy->next = head;\n\n    struct ListNode* cur = dummy;\n    while (cur->next && cur->next->next) {\n        if (cur->next->val == cur->next->next->val) {\n            int x = cur->next->val;\n            while (cur->next && cur->next->val == x) {\n                cur->next = cur->next->next;\n            }\n        } else {\n            cur = cur->next;\n        }\n    }\n\n    return dummy->next;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的长度。\n\n- 空间复杂度：$O(1)$。"
}