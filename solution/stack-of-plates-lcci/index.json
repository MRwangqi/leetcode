{
	"titleSlug": "stack-of-plates-lcci",
	"slug": "jian-dan-mo-ni-ti-yi-jie-xi-yi-ji-zhu-yi-jri6",
	"url": "https://leetcode-cn.com/problems/stack-of-plates-lcci/solution/jian-dan-mo-ni-ti-yi-jie-xi-yi-ji-zhu-yi-jri6/",
	"content": "# 题意解析\r\n题目具体要做什么大家肯定都能看明白，看不明白的应该是用例，到底需要我们去实现什么。\r\n- `StackOfPlates[1]`：构造函数，初始化每堆盘子的容量为`1`，从构造函数的入参名称也能猜到是这个意思。\r\n- `push[1]`：往盘子堆里放置`编号为1`的盘子，这个入参，不是说放几个盘子，而是放入盘子的编号（我一开始也理解成放几个盘子了）\r\n\r\n![56a8ab6b21505ac00ce49ddda9687c7.jpg](https://pic.leetcode-cn.com/1639037512-hyJIvJ-56a8ab6b21505ac00ce49ddda9687c7.jpg)\r\n\r\n# 注意事项\r\n1. 放盘子`push`操作时，当最后一堆数量等于容量`capacity`时，就要新开一堆往里放。\r\n2. 拿盘子`pop`操作时，拿完之后如果这一堆没有盘子了，就得把这堆删除。`popAt`同理。\r\n3. 边界条件：即没有盘子时，`pop` 和 `popAt`都直接返回`-1`\r\n4. 隐藏边界条件：给定的初始化容量可能等于`0`，说明后边的操作都无法放置盘子。\r\n\r\n# 简单代码\r\n```java []\r\nclass StackOfPlates {\r\n    int capacity;// 每堆盘子的容量\r\n    List<Deque<Integer>> allPlates; // 盘子堆\r\n\r\n    // 初始化容量及盘子堆\r\n    public StackOfPlates(int cap) {\r\n        this.capacity = cap;\r\n        allPlates = new LinkedList<>();\r\n    }\r\n    \r\n    public void push(int val) {\r\n        if(capacity <= 0){// 容量为0，不需要继续放盘子\r\n            return;\r\n        }\r\n        // 没有盘子堆 或者 最后一堆的数量等于容量时，需要新开一堆盘子\r\n        if(allPlates.isEmpty() || allPlates.get(allPlates.size() - 1).size() == capacity){\r\n            allPlates.add(new ArrayDeque<>());\r\n        }\r\n        allPlates.get(allPlates.size()-1).offerFirst(val);// 放最后\r\n    }\r\n    \r\n    public int pop() {\r\n        // 没有盘子了 返回-1\r\n        if(allPlates.size() == 0){\r\n            return -1;\r\n        }\r\n        // 从最后一堆盘子顶上拿一个盘子\r\n        int result = allPlates.get(allPlates.size() - 1).pollFirst();\r\n        // 拿完之后，如果空了，就把这堆删掉\r\n        if(allPlates.get(allPlates.size() - 1).size() == 0){\r\n            allPlates.remove(allPlates.size() - 1);\r\n        }\r\n        return result; \r\n    }\r\n    \r\n    public int popAt(int index) {\r\n        // 如果索引不合法，并且没有盘子了，就返回-1\r\n        if(index < 0 || index >= allPlates.size() || allPlates.isEmpty()){\r\n            return -1;\r\n        }\r\n        int result = allPlates.get(index).pollFirst();\r\n        if(allPlates.get(index).size() == 0){\r\n            allPlates.remove(index);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```"
}