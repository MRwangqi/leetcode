{
	"titleSlug": "find-a-value-of-a-mysterious-function-closest-to-target",
	"slug": "zhao-dao-zui-jie-jin-mu-biao-zhi-de-han-shu-zhi-by",
	"url": "https://leetcode-cn.com/problems/find-a-value-of-a-mysterious-function-closest-to-target/solution/zhao-dao-zui-jie-jin-mu-biao-zhi-de-han-shu-zhi-by/",
	"content": "**思路**\n\n我们定义「[按位与运算](https://baike.baidu.com/item/%E6%8C%89%E4%BD%8D%E4%B8%8E)」为题目描述中的 $\\&$ 运算，「按位与之和」为若干个数依次进行 $\\&$ 运算得到的值。由于：\n\n- 按位与运算满足交换律，即 $a~\\&~b$ 等于 $b~\\&~a$；\n\n- 按位与运算满足结合律，即 $a~\\&~b~\\&~c$ 等于 $a~\\&~(b~\\&~c)$。\n\n所以给定的若干个数按照任意顺序进行按位与运算，得到的值都是相同的，即「按位与之和」的定义无歧义。\n\n题目中的函数 $\\textit{func}(\\textit{arr}, l, r)$ 实际上求的就是 $\\textit{arr}[l]$ 到 $\\textit{arr}[r]$ 的按位与之和，即：\n\n$$\n\\textit{arr}[l]~\\&~\\textit{arr}[l+1]~\\&~ \\cdots ~\\&~\\textit{arr}[r-1]~\\&~\\textit{arr}[r]\n$$\n\n如果我们直接暴力地枚举 $l$ 和 $r$，求出 $\\textit{func}(\\textit{arr}, l, r)$ 的值并更新答案，那么时间复杂度至少是 $O(n^2)$ 的（其中 $n$ 是数组 $\\textit{arr}$ 的长度）。要想通过本题，我们需要挖掘按位与之和的一些有趣的性质。\n\n如果我们固定右端点 $r$，那么左端点 $l$ 可以选择 $[0, r]$ 这个区间内的任意整数。如果我们从大到小枚举 $l$，那么：\n\n- 按位与之和是随着 $l$ 的减小而单调递减的。\n\n    > 由于按位与运算满足结合律，所以 $\\textit{func}(\\textit{arr}, l, r) = \\textit{arr}[l]~\\&~\\textit{func}(\\textit{arr}, l+1, r)$。并且由于按位与运算本身的性质，$a~\\&~b$ 的值不会大于 $a$，也不会大于 $b$。因此 $\\textit{func}(\\textit{arr}, l, r) \\leq \\textit{func}(\\textit{arr}, l+1, r)$，即按位与之和是随着 $l$ 的减小而单调递减的。\n\n- 按位与之和最多只有 $20$ 种不同的值。\n\n    > 当 $l=r$ 时，按位与之和就是 $\\textit{arr}[r]$。随着 $l$ 的减小，按位与之和变成 $\\textit{arr}[r-1]~\\&~\\textit{arr}[r]$，$\\textit{arr}[r-2]~\\&~\\textit{arr}[r-1]~\\&~arr[r]$ 等等。由于 $\\textit{arr}[r] \\leq 10^6 < 2^{20}$，那么 $\\textit{arr}[r]$ 的**二进制表示**中最多有 $20$ 个 $1$。而每进行一次按位与运算，如果按位与之和发生了变化，那么值中有若干个 $1$ 变成了 $0$。由于在按位与运算中，$0$ 不能变回 $1$。因此值的变化的次数不会超过 $\\textit{arr}[r]$ 二进制表示中 $1$ 的个数，即 $\\textit{func}(\\textit{arr}, l, r)$ 的值最多只有 $20$ 种。\n\n**算法**\n\n根据上面的分析，我们知道对于固定的右端点 $r$，按位与之和最多只有 $20$ 种不同的值，因此我们可以使用一个集合维护所有的值。\n\n我们从小到大遍历 $r$，并用一个集合实时地维护 $\\textit{func}(\\textit{arr}, l, r)$ 的所有不同的值，集合的大小不过超过 $20$。当我们从 $r$ 遍历到 $r+1$ 时，以 $r+1$ 为右端点的值，就是集合中的每个值和 $\\textit{arr}[r+1]$ 进行按位与运算得到的值，再加上 $\\textit{arr}[r+1]$ 本身。我们对这些新的值进行去重，就可以得到 $\\textit{func}(\\textit{arr}, l, r+1)$ 对应的值的集合。\n\n在遍历的过程中，当我们每次得到新的集合，就对集合中的每个值更新一次答案即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int closestToTarget(vector<int>& arr, int target) {\n        int ans = abs(arr[0] - target);\n        vector<int> valid = {arr[0]};\n        for (int num: arr) {\n            vector<int> validNew = {num};\n            ans = min(ans, abs(num - target));\n            for (int prev: valid) {\n                validNew.push_back(prev & num);\n                ans = min(ans, abs((prev & num) - target));\n            }\n            validNew.erase(unique(validNew.begin(), validNew.end()), validNew.end());\n            valid = validNew;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int closestToTarget(int[] arr, int target) {\n        int ans = Math.abs(arr[0] - target);\n        List<Integer> valid = new ArrayList<Integer>();\n        valid.add(arr[0]);\n        for (int num : arr) {\n            List<Integer> validNew = new ArrayList<Integer>();\n            validNew.add(num);\n            int last = num;\n            ans = Math.min(ans, Math.abs(num - target));\n            for (int prev : valid) {\n                int curr = prev & num;\n                if (curr != last) {\n                    validNew.add(curr);\n                    ans = Math.min(ans, Math.abs(curr - target));\n                    last = curr;\n                }\n            }\n            valid = validNew;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def closestToTarget(self, arr: List[int], target: int) -> int:\n        ans = abs(arr[0] - target)\n        valid = {arr[0]}\n        for num in arr:\n            valid = {x & num for x in valid} | {num}\n            ans = min(ans, min(abs(x - target) for x in valid))\n        return ans\n```\n\n```C [sol1-C]\nint closestToTarget(int* arr, int arrSize, int target) {\n    int ans = abs(arr[0] - target);\n    int* valid = (int*)malloc(sizeof(int) * 20);\n    int num = 1;\n    valid[0] = arr[0];\n    for (int i = 0; i < arrSize; i++) {\n        int* validNew = (int*)malloc(sizeof(int) * 20);\n        int numNew = 1;\n        validNew[0] = arr[i];\n        ans = fmin(ans, fabs(arr[i] - target));\n        for (int j = 0; j < num; j++) {\n            validNew[numNew++] = valid[j] & arr[i];\n            ans = fmin(ans, fabs((valid[j] & arr[i]) - target));\n        }\n        int add = 0;\n        for (int j = 1; j < numNew; j++) {\n            if (validNew[add] != validNew[j]) validNew[++add] = validNew[j];\n        }\n        num = add + 1;\n        free(valid);\n        valid = validNew;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log C)$，这里的 $C$ 是数组元素的最大范围，本题中 $\\log C = \\log_2 10^6 \\approx 20$。\n\n- 空间复杂度：$O(\\log C)$，记为集合中的值的最多数量。\n\n**思考**\n\n在上面的 `C++` 代码中，我们使用了 `unique() + erase()` 进行去重操作。然而 `unique()` 函数必须在数组有序时才能使用。我们没有对数组进行过排序，但为什么它是正确的呢？\n\n答案：可以使用数学归纳法。\n\n- 当 $r=0$ 时，集合中只有一个值，显然是有序的；\n\n- 假设当 $r=r_0$ 时有序，那么当 $r=r_0+1$ 时，将一个有序的集合对同一个数 $\\textit{arr}[r_0+1]$ 进行按位与运算，得到的集合仍然保持有序。并且我们是在一开始就将 $\\textit{arr}[r_0+1]$ 加入了集合，它显然不小于集合中的所有数。因此最终的集合是有序的，进行去重操作后也仍然保持有序。"
}