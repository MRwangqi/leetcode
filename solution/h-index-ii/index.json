{
	"titleSlug": "h-index-ii",
	"slug": "h-zhi-shu-ii-by-leetcode-solution-si7h",
	"url": "https://leetcode-cn.com/problems/h-index-ii/solution/h-zhi-shu-ii-by-leetcode-solution-si7h/",
	"content": "#### 前言\n\n这道题是「[274. H 指数](https://leetcode-cn.com/problems/h-index)」的延伸，和第 274 题相比，这道题中的输入数组 $\\textit{citations}$ 已经按照升序排序。\n\n除了使用第 274 题的方法以外（见「[274. H 指数的官方题解](https://leetcode-cn.com/problems/h-index/solution/h-zhi-shu-by-leetcode-solution-fnhl)」），这道题可以利用数组 $\\textit{citations}$ 有序的特点，使用二分查找的方法求解，时间复杂度为 $O(\\log n)$，其中 $n$ 为数组 $\\textit{citations}$ 的长度。\n\n#### 方法一：二分查找\n\n由于数组 $\\textit{citations}$ 已经按照升序排序，因此可以使用二分查找。\n\n设查找范围的初始左边界 $\\textit{left}$ 为 $0$, 初始右边界 $\\textit{right}$ 为 $n-1$，其中 $n$ 为数组 $\\textit{citations}$ 的长度。每次在查找范围内取中点 $\\textit{mid}$，则有 $n-\\textit{mid}$ 篇论文被引用了至少 $\\textit{citations}[\\textit{mid}]$ 次。如果在查找过程中满足 $\\textit{citations}[\\textit{mid}] \\ge n - \\textit{mid}$，则移动右边界 $\\textit{right}$，否则移动左边界 $\\textit{left}$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int hIndex(int[] citations) {\n        int n = citations.length;\n        int left = 0, right = n - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (citations[mid] >= n - mid) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return n - left;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int HIndex(int[] citations) {\n        int n = citations.Length;\n        int left = 0, right = n - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (citations[mid] >= n - mid) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return n - left;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        n = len(citations)\n        left = 0; right = n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if citations[mid] >= n - mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return n - left\n```\n\n```JavaScript [sol1-JavaScript]\nvar hIndex = function(citations) {\n    let n = citations.length;\n    let left = 0, right = n - 1;\n    while (left <= right) {\n        const mid = left + Math.floor((right - left) / 2);\n        if (citations[mid] >= n - mid) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return n - left;\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int hIndex(vector<int>& citations) {\n        int n = citations.size();\n        int left = 0, right = n - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (citations[mid] >= n - mid) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return n - left;\n    }\n};\n```\n\n```C [sol1-C]\nint hIndex(int* citations, int citationsSize) {\n    int left = 0, right = citationsSize - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (citations[mid] >= citationsSize - mid) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return citationsSize - left;\n}\n```\n\n```go [sol1-Golang]\nfunc hIndex(citations []int) int {\n    n := len(citations)\n    return n - sort.Search(n, func(x int) bool { return citations[x] >= n-x })\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$，其中 $n$ 为数组 $\\textit{citations}$ 的长度。二分查找的时间复杂度为 $O(\\log n)$。\n\n- 空间复杂度：$O(1)$。"
}