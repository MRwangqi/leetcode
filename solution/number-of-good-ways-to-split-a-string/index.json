{
	"titleSlug": "number-of-good-ways-to-split-a-string",
	"slug": "zi-fu-chuan-de-hao-fen-ge-shu-mu-by-leetcode-solut",
	"url": "https://leetcode-cn.com/problems/number-of-good-ways-to-split-a-string/solution/zi-fu-chuan-de-hao-fen-ge-shu-mu-by-leetcode-solut/",
	"content": "#### 方法一：动态规划\n\n**思路及算法**\n\n要使得左右两部分不同字符的数量相同，首先要统计一侧的不同字符数量。\n\n注意到当我们已经统计出字符串的前 $i-1$ 个字符中的不同字符数量时，我们可以利用该信息算出字符串前 $i$ 个字符的不同字符数量。记字符串的前 $i$ 个字符（为了方便处理边界情况，下标从 $1$ 开始编号）中的不同字符数量为 $f[i]$，当第 $i$ 个字符在字符串前 $i-1$ 个字符中出现过时，$f[i]=f[i-1]$，否则 $f[i]=f[i-1]+1$。\n\n$$\nf[i]=\n\\begin{cases}\nf[i-1], & \\text{第 $i$ 个字符在字符串前 $i-1$ 个字符中出现过} \\\\\nf[i-1]+1, & \\text{第 $i$ 个字符在字符串前 $i-1$ 个字符中没有出现过}\n\\end{cases}\n$$\n\n特别地，$f[0]=0$。\n\n为了判断第 $i$ 个字符是否在字符串前 $i-1$ 个字符中出现过，我们可以用一个布尔类型的数组 $\\text{rec}$ 进行标记，令 $\\text{rec}[i]$ 表示字符 $i$ 是否出现过。这样我们只需要在统计的同时，不断更新这个 $\\text{rec}$ 数组，即可实现每次 $O(1)$ 地查询字符串中第 $i$ 个字符是否出现过。\n\n实现了统计一侧的不同字符数量的功能，我们可以如法炮制，只需要将动态规划的计算顺序进行反向，就能统计出另一侧的不同字符数量。\n\n最后我们枚举每一个位置，判断其两侧的字符数量是否相同，即可知道这个位置的分割是不是一个「好分割」。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numSplits(string s) {\n        int n = s.length();\n        vector<int> left(n + 2), right(n + 2);\n        bitset<26> rec_left, rec_right;\n        for (int i = 1; i <= n; i++) {\n            int c = s[i - 1] - 'a';\n            if (rec_left.test(c)) {\n                left[i] = left[i - 1];\n            } else {\n                rec_left.set(c);\n                left[i] = left[i - 1] + 1;\n            }\n        }\n        for (int i = n; i > 0; i--) {\n            int c = s[i - 1] - 'a';\n            if (rec_right.test(c)) {\n                right[i] = right[i + 1];\n            } else {\n                rec_right.set(c);\n                right[i] = right[i + 1] + 1;\n            }\n        }\n        int ret = 0;\n        for (int i = 1; i < n; i++) {\n            if (left[i] == right[i + 1]) {\n                ret++;\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int numSplits(String s) {\n        int n = s.length();\n        int[] left = new int[n + 2];\n        int[] right = new int[n + 2];\n        boolean[] recLeft = new boolean[26];\n        boolean[] recRight = new boolean[26];\n        for (int i = 1; i <= n; i++) {\n            int c = s.charAt(i - 1) - 'a';\n            if (recLeft[c]) {\n                left[i] = left[i - 1];\n            } else {\n                recLeft[c] = true;;\n                left[i] = left[i - 1] + 1;\n            }\n        }\n        for (int i = n; i > 0; i--) {\n            int c = s.charAt(i - 1) - 'a';\n            if (recRight[c]) {\n                right[i] = right[i + 1];\n            } else {\n                recRight[c] = true;\n                right[i] = right[i + 1] + 1;\n            }\n        }\n        int ret = 0;\n        for (int i = 1; i < n; i++) {\n            if (left[i] == right[i + 1]) {\n                ret++;\n            }\n        }\n        return ret;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        n = len(s)\n        left, right = [0] * (n + 2), [0] * (n + 2)\n\n        rec_left = [False] * 26\n        rec_right = [False] * 26\n        for i in range(1, n + 1):\n            c = ord(s[i - 1]) - ord(\"a\")\n            if rec_left[c]:\n                left[i] = left[i - 1]\n            else:\n                rec_left[c] = True\n                left[i] = left[i - 1] + 1\n        \n        for i in range(n, 0, -1):\n            c = ord(s[i - 1]) - ord(\"a\")\n            if (rec_right[c]):\n                right[i] = right[i + 1]\n            else:\n                rec_right[c] = True\n                right[i] = right[i + 1] + 1\n        \n        ret = sum(1 for i in range(1, n) if left[i] == right[i + 1])\n        return ret\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为给定字符串的长度。\n\n- 空间复杂度：$O(n+|\\Sigma|)$，其中 $n$ 为给定字符串的长度，$\\Sigma$ 为字符集，在本题中字符串只包含小写字母，$|\\Sigma| = 26$。"
}