{
	"titleSlug": "check-if-it-is-a-straight-line",
	"slug": "zhui-dian-cheng-xian-by-leetcode-solutio-lpt6",
	"url": "https://leetcode-cn.com/problems/check-if-it-is-a-straight-line/solution/zhui-dian-cheng-xian-by-leetcode-solutio-lpt6/",
	"content": "#### 方法一：数学\n\n**思路**\n\n记数组 $\\textit{coordinates}$ 中的点为 $P_0, P_1, \\dots, P_{n-1}$。为方便后续计算，将所有点向 $(-P_{0x}, -P_{0y})$ 方向平移。记平移后的点为 $P_0', P_1', \\dots, P_{n-1}'$，其中 $P_i'=(P_{ix}-P_{0x}, P_{iy}-P_{0y})$，$P_0'$ 位于坐标系原点 $O$ 上。\n\n由于经过两点的直线有且仅有一条，我们以 $P_0'$ 和 $P_1'$ 来确定这条直线。\n\n因为 $P_0'$ 位于坐标系原点 $O$ 上，直线过原点，故设其方程为 $Ax+By=0$，将 $P_1'$ 坐标代入可得 $A=P_{1y}',B=-P_{1x}'$.\n\n然后依次判断 $P_2', \\dots, P_{n-1}'$ 是否在这条直线上，将其坐标代入直线方程即可。\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    bool checkStraightLine(vector<vector<int>> &coordinates) {\n        int deltaX = coordinates[0][0], deltaY = coordinates[0][1];\n        int n = coordinates.size();\n        for (int i = 0; i < n; ++i) {\n            coordinates[i][0] -= deltaX;\n            coordinates[i][1] -= deltaY;\n        }\n        int A = coordinates[1][1], B = -coordinates[1][0];\n        for (int i = 2; i < n; ++i) {\n            int x = coordinates[i][0], y = coordinates[i][1];\n            if (A * x + B * y != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Go [sol1-Golang]\nfunc checkStraightLine(coordinates [][]int) bool {\n    deltaX, deltaY := coordinates[0][0], coordinates[0][1]\n    for _, p := range coordinates {\n        p[0] -= deltaX\n        p[1] -= deltaY\n    }\n    A, B := coordinates[1][1], -coordinates[1][0]\n    for _, p := range coordinates[2:] {\n        x, y := p[0], p[1]\n        if A*x+B*y != 0 {\n            return false\n        }\n    }\n    return true\n}\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean checkStraightLine(int[][] coordinates) {\n        int deltaX = coordinates[0][0], deltaY = coordinates[0][1];\n        int n = coordinates.length;\n        for (int i = 0; i < n; i++) {\n            coordinates[i][0] -= deltaX;\n            coordinates[i][1] -= deltaY;\n        }\n        int A = coordinates[1][1], B = -coordinates[1][0];\n        for (int i = 2; i < n; i++) {\n            int x = coordinates[i][0], y = coordinates[i][1];\n            if (A * x + B * y != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar checkStraightLine = function(coordinates) {\n    const deltaX = coordinates[0][0], deltaY = coordinates[0][1];\n    const n = coordinates.length;\n    for (let i = 0; i < n; i++) {\n        coordinates[i][0] -= deltaX;\n        coordinates[i][1] -= deltaY;\n    }\n    const A = coordinates[1][1], B = -coordinates[1][0];\n    for (let i = 2; i < n; i++) {\n        const [x, y] = [coordinates[i][0], coordinates[i][1]];\n        if (A * x + B * y !== 0) {\n            return false;\n        }\n    }\n    return true;\n};\n```\n\n```C [sol1-C]\nbool checkStraightLine(int** coordinates, int coordinatesSize, int* coordinatesColSize) {\n    int deltaX = coordinates[0][0], deltaY = coordinates[0][1];\n    for (int i = 0; i < coordinatesSize; ++i) {\n        coordinates[i][0] -= deltaX;\n        coordinates[i][1] -= deltaY;\n    }\n    int A = coordinates[1][1], B = -coordinates[1][0];\n    for (int i = 2; i < coordinatesSize; ++i) {\n        int x = coordinates[i][0], y = coordinates[i][1];\n        if (A * x + B * y != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组中的元素数量。\n\n- 时间复杂度：$O(1)$"
}