{
	"titleSlug": "find-servers-that-handled-most-number-of-requests",
	"slug": "zhao-dao-chu-li-zui-duo-qing-qiu-de-fu-w-e0a5",
	"url": "https://leetcode-cn.com/problems/find-servers-that-handled-most-number-of-requests/solution/zhao-dao-chu-li-zui-duo-qing-qiu-de-fu-w-e0a5/",
	"content": "#### 方法一: 模拟 + 有序集合 + 优先队列\n\n**思路与算法**\n\n将空闲服务器的编号都放入一个有序集合 $\\textit{available}$ 中，将正在处理请求的服务器的处理结束时间和编号都放入一个优先队列 $\\textit{busy}$ 中，优先队列满足队首的服务器的处理结束时间最小，用一个数组 $\\textit{requests}$ 记录对应服务器处理的请求数目。\n\n假设当前到达的请求为第 $i$ 个，如果 $\\textit{busy}$ 不为空， 那么我们判断 $\\textit{busy}$ 的队首对应的服务器的结束时间是否小于等于当前请求的到达时间 $\\textit{arrival}[i]$，如果是，那么我们将它从 $\\textit{busy}$ 中移除，并且将该服务器的编号放入 $\\textit{available}$ 中，然后再次进行判断。如果 $\\textit{available}$ 为空，那么该请求被丢弃；否则查找 $\\textit{available}$ 中大于等于 $i \\bmod k$ 的第一个元素，如果查找成功，那么将它作为处理请求的服务器，否则将 $\\textit{available}$ 中编号最小的服务器作为处理请求的服务器。设处理请求的服务器的编号为 $j$，那么将 $\\textit{requests}[j]$ 加 $1$，并且将该服务器从 $\\textit{available}$ 移除，然后将服务器 $j$ 放入 $\\textit{busy}$ 中，对应的处理结束时间为 $\\textit{arrival}[i] + \\textit{load}[i]$。\n\n获取 $\\textit{requests}$ 的最大值 $\\textit{maxRequest}$，遍历 $\\textit{requests}$ 数组，对于每个下标 $i$，如果 $\\textit{requests}[i] = \\textit{maxRequest}$，那么将编号 $i$ 加入结果中。\n\n**代码**\n\n```Python [sol1-Python3]\nfrom sortedcontainers import SortedList\n\nclass Solution:\n    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:\n        available = SortedList(range(k))\n        busy = []\n        requests = [0] * k\n        for i, (start, t) in enumerate(zip(arrival, load)):\n            while busy and busy[0][0] <= start:\n                available.add(busy[0][1])\n                heappop(busy)\n            if len(available) == 0:\n                continue\n            j = available.bisect_left(i % k)\n            if j == len(available):\n                j = 0\n            id = available[j]\n            requests[id] += 1\n            heappush(busy, (start + t, id))\n            available.remove(id)\n        maxRequest = max(requests)\n        return [i for i, req in enumerate(requests) if req == maxRequest]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> busiestServers(int k, vector<int> &arrival, vector<int> &load) {\n        set<int> available;\n        for (int i = 0; i < k; i++) {\n            available.insert(i);\n        }\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> busy;\n        vector<int> requests(k);\n        for (int i = 0; i < arrival.size(); i++) {\n            while (!busy.empty() && busy.top().first <= arrival[i]) {\n                available.insert(busy.top().second);\n                busy.pop();\n            }\n            if (available.empty()) {\n                continue;\n            }\n            auto p = available.lower_bound(i % k);\n            if (p == available.end()) {\n                p = available.begin();\n            }\n            requests[*p]++;\n            busy.emplace(arrival[i] + load[i], *p);\n            available.erase(p);\n        }\n        int maxRequest = *max_element(requests.begin(), requests.end());\n        vector<int> ret;\n        for (int i = 0; i < k; i++) {\n            if (requests[i] == maxRequest) {\n                ret.push_back(i);\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {\n        TreeSet<Integer> available = new TreeSet<Integer>();\n        for (int i = 0; i < k; i++) {\n            available.add(i);\n        }\n        PriorityQueue<int[]> busy = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);\n        int[] requests = new int[k];\n        for (int i = 0; i < arrival.length; i++) {\n            while (!busy.isEmpty() && busy.peek()[0] <= arrival[i]) {\n                available.add(busy.poll()[1]);\n            }\n            if (available.isEmpty()) {\n                continue;\n            }\n            Integer p = available.ceiling(i % k);\n            if (p == null) {\n                p = available.first();\n            }\n            requests[p]++;\n            busy.offer(new int[]{arrival[i] + load[i], p});\n            available.remove(p);\n        }\n        int maxRequest = Arrays.stream(requests).max().getAsInt();\n        List<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            if (requests[i] == maxRequest) {\n                ret.add(i);\n            }\n        }\n        return ret;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc busiestServers(k int, arrival, load []int) (ans []int) {\n    available := redblacktree.NewWithIntComparator()\n    for i := 0; i < k; i++ {\n        available.Put(i, nil)\n    }\n    busy := hp{}\n    requests := make([]int, k)\n    maxRequest := 0\n    for i, t := range arrival {\n        for len(busy) > 0 && busy[0].end <= t {\n            available.Put(busy[0].id, nil)\n            heap.Pop(&busy)\n        }\n        if available.Size() == 0 {\n            continue\n        }\n        node, _ := available.Ceiling(i % k)\n        if node == nil {\n            node = available.Left()\n        }\n        id := node.Key.(int)\n        requests[id]++\n        if requests[id] > maxRequest {\n            maxRequest = requests[id]\n            ans = []int{id}\n        } else if requests[id] == maxRequest {\n            ans = append(ans, id)\n        }\n        heap.Push(&busy, pair{t + load[i], id})\n        available.Remove(id)\n    }\n    return\n}\n\ntype pair struct{ end, id int }\ntype hp []pair\nfunc (h hp) Len() int            { return len(h) }\nfunc (h hp) Less(i, j int) bool  { return h[i].end < h[j].end }\nfunc (h hp) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(v interface{}) { *h = append(*h, v.(pair)) }\nfunc (h *hp) Pop() interface{}   { a := *h; v := a[len(a)-1]; *h = a[:len(a)-1]; return v }\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O((k + n) \\log k)$，其中 $k$ 为服务器的数目，$n$ 为请求的数目。开始时 $\\textit{available}$ 放入所有的服务器的时间复杂度为 $O(k \\log k)$；在处理请求时，$\\textit{busy}$ 最多执行 $n$ 次放入和移除操作，$\\textit{available}$ 最多执行 $n$ 次放入、移除和查找操作， 因此时间复杂度为 $O(n \\log k)$；获取最繁忙服务器列表的时间复杂度为 $O(k)$。\n\n+ 空间复杂度：$O(k)$。$\\textit{busy}$ 和 $\\textit{available}$ 最多放入 $k$ 个元素，需要 $O(k)$ 的空间；$\\textit{requests}$ 需要 $O(k)$ 的空间。\n\n#### 方法二：模拟 + 双优先队列\n\n**思路与算法**\n\n方法一中的 $\\textit{available}$ 也可以用优先队列实现。\n\n设在第 $i$ 个请求到来时，编号为 $\\textit{id}$ 的服务器已经处理完请求，那么将 $\\textit{id}$ 从 $\\textit{busy}$ 中移除，并放入一个不小于 $i$ 且同余于 $\\textit{id}$ 的编号，这样就能在保证 $\\textit{available}$ 中，编号小于 $i \\bmod k$ 的空闲服务器能排到编号不小于 $i \\bmod k$ 的空闲服务器后面。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:\n        available = list(range(k))\n        busy = []\n        requests = [0] * k\n        for i, (start, t) in enumerate(zip(arrival, load)):\n            while busy and busy[0][0] <= start:\n                _, id = heappop(busy)\n                heappush(available, i + (id - i) % k)  # 利用 Python 负数取模变成同余的非负数的性质\n            if available:\n                id = heappop(available) % k\n                requests[id] += 1\n                heappush(busy, (start + t, id))\n        maxRequest = max(requests)\n        return [i for i, req in enumerate(requests) if req == maxRequest]\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> busiestServers(int k, vector<int> &arrival, vector<int> &load) {\n        priority_queue<int, vector<int>, greater<int>> available;\n        for (int i = 0; i < k; i++) {\n            available.push(i);\n        }\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> busy;\n        vector<int> requests(k, 0);\n        for (int i = 0; i < arrival.size(); i++) {\n            while (!busy.empty() && busy.top().first <= arrival[i]) {\n                auto[_, id] = busy.top();\n                busy.pop();\n                available.push(i + ((id - i) % k + k) % k); // 保证得到的是一个不小于 i 的且与 id 同余的数\n            }\n            if (available.empty()) {\n                continue;\n            }\n            int id = available.top() % k;\n            available.pop();\n            requests[id]++;\n            busy.push({arrival[i] + load[i], id});\n        }\n        int maxRequest = *max_element(requests.begin(), requests.end());\n        vector<int> ret;\n        for (int i = 0; i < k; i++) {\n            if (requests[i] == maxRequest) {\n                ret.push_back(i);\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {\n        PriorityQueue<Integer> available = new PriorityQueue<Integer>((a, b) -> a - b);\n        for (int i = 0; i < k; i++) {\n            available.offer(i);\n        }\n        PriorityQueue<int[]> busy = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);\n        int[] requests = new int[k];\n        for (int i = 0; i < arrival.length; i++) {\n            while (!busy.isEmpty() && busy.peek()[0] <= arrival[i]) {\n                int id = busy.peek()[1];\n                busy.poll();\n                available.offer(i + ((id - i) % k + k) % k); // 保证得到的是一个不小于 i 的且与 id 同余的数\n            }\n            if (available.isEmpty()) {\n                continue;\n            }\n            int server = available.poll() % k;\n            requests[server]++;\n            busy.offer(new int[]{arrival[i] + load[i], server});\n        }\n        int maxRequest = Arrays.stream(requests).max().getAsInt();\n        List<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            if (requests[i] == maxRequest) {\n                ret.add(i);\n            }\n        }\n        return ret;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc busiestServers(k int, arrival, load []int) (ans []int) {\n    available := hi{make([]int, k)}\n    for i := 0; i < k; i++ {\n        available.IntSlice[i] = i\n    }\n    busy := hp{}\n    requests := make([]int, k)\n    maxRequest := 0\n    for i, t := range arrival {\n        for len(busy) > 0 && busy[0].end <= t {\n            heap.Push(&available, i+((busy[0].id-i)%k+k)%k) // 保证得到的是一个不小于 i 的且与 id 同余的数\n            heap.Pop(&busy)\n        }\n        if available.Len() == 0 {\n            continue\n        }\n        id := heap.Pop(&available).(int) % k\n        requests[id]++\n        if requests[id] > maxRequest {\n            maxRequest = requests[id]\n            ans = []int{id}\n        } else if requests[id] == maxRequest {\n            ans = append(ans, id)\n        }\n        heap.Push(&busy, pair{t + load[i], id})\n    }\n    return\n}\n\ntype hi struct{ sort.IntSlice }\nfunc (h *hi) Push(v interface{}) { h.IntSlice = append(h.IntSlice, v.(int)) }\nfunc (h *hi) Pop() interface{}   { a := h.IntSlice; v := a[len(a)-1]; h.IntSlice = a[:len(a)-1]; return v }\n\ntype pair struct{ end, id int }\ntype hp []pair\nfunc (h hp) Len() int            { return len(h) }\nfunc (h hp) Less(i, j int) bool  { return h[i].end < h[j].end }\nfunc (h hp) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(v interface{}) { *h = append(*h, v.(pair)) }\nfunc (h *hp) Pop() interface{}   { a := *h; v := a[len(a)-1]; *h = a[:len(a)-1]; return v }\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O((k + n) \\log k)$ 或 $O(k + n \\log k)$，其中 $k$ 为服务器的数目，$n$ 为请求的数目。开始时 $\\textit{available}$ 放入所有的服务器的时间复杂度为 $O(k \\log k)$ 或 $O(k)$，取决于语言实现；在处理请求时，$\\textit{busy}$ 最多执行 $n$ 次放入和移除操作，$\\textit{available}$ 最多执行 $n$ 次放入和移除操作，因此时间复杂度为 $O(n \\log k)$；获取最繁忙服务器列表的时间复杂度为 $O(k)$。\n\n+ 空间复杂度：$O(k)$。$\\textit{busy}$ 和 $\\textit{available}$ 最多放入 $k$ 个元素，需要 $O(k)$ 的空间；$\\textit{requests}$ 需要 $O(k)$ 的空间。"
}