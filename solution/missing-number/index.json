{
	"titleSlug": "missing-number",
	"slug": "diu-shi-de-shu-zi-by-leetcode-solution-naow",
	"url": "https://leetcode-cn.com/problems/missing-number/solution/diu-shi-de-shu-zi-by-leetcode-solution-naow/",
	"content": "#### 方法一：排序\n\n将数组排序之后，即可根据数组中每个下标处的元素是否和下标相等，得到丢失的数字。\n\n由于数组的长度是 $n$，因此下标范围是 $[0, n-1]$。假设缺失的数字是 $k$，分别考虑以下两种情况：\n\n- 当 $0 \\le k < n$ 时，对任意 $0 \\le i < k$，都有 $\\textit{nums}[i]=i$，由于 $k$ 缺失，因此 $\\textit{nums}[k]=k+1$，$k$ 是第一个满足下标和元素不相等的下标；\n\n- 当 $k = n$ 时，$0$ 到 $n-1$ 都没有缺失，因此对任意 $0 \\le i < n$，都有 $\\textit{nums}[i]=i$。\n\n根据上述两种情况，可以得到如下方法得到丢失的数字：\n\n1. 从左到右遍历数组 $\\textit{nums}$，如果存在 $0 \\le i < n$ 使得 $\\textit{nums}[i] \\ne i$，则缺失的数字是满足 $\\textit{nums}[i] \\ne i$ 的最小的 $i$；\n\n2. 如果对任意 $0 \\le i < n$，都有 $\\textit{nums}[i]=i$，则缺失的数字是 $n$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int missingNumber(int[] nums) {\n        Arrays.sort(nums);\n        int n = nums.length;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] != i) {\n                return i;\n            }\n        }\n        return n;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MissingNumber(int[] nums) {\n        Array.Sort(nums);\n        int n = nums.Length;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] != i) {\n                return i;\n            }\n        }\n        return n;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        sort(nums.begin(),nums.end());\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            if (nums[i] != i) {\n                return i;\n            }\n        }\n        return n;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar missingNumber = function(nums) {\n    nums.sort((a, b) => a - b);\n    const n = nums.length;\n    for (let i = 0; i < n; i++) {\n        if (nums[i] !== i) {\n            return i;\n        }\n    }\n    return n;\n};\n```\n\n```TypeScript [sol1-TypeScript]\nfunction missingNumber(nums: number[]): number {\n    nums.sort((a, b) => a - b);\n    const n: number = nums.length;\n    for (let i = 0; i < n; i++) {\n        if (nums[i] !== i) {\n            return i;\n        }\n    }\n    return n;\n};\n```\n\n```go [sol1-Golang]\nfunc missingNumber(nums []int) int {\n    sort.Ints(nums)\n    for i, num := range nums {\n        if num != i {\n            return i\n        }\n    }\n    return len(nums)\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        nums.sort()\n        for i, num in enumerate(nums):\n            if num != i:\n                return i\n        return len(nums)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。排序的时间复杂度是 $O(n \\log n)$，遍历数组寻找丢失的数字的时间复杂度是 $O(n)$，因此总时间复杂度是 $O(n \\log n)$。\n\n- 空间复杂度：$O(\\log n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。空间复杂度主要取决于排序的递归调用栈空间。\n\n#### 方法二：哈希集合\n\n使用哈希集合，可以将时间复杂度降低到 $O(n)$。\n\n首先遍历数组 $\\textit{nums}$，将数组中的每个元素加入哈希集合，然后依次检查从 $0$ 到 $n$ 的每个整数是否在哈希集合中，不在哈希集合中的数字即为丢失的数字。由于哈希集合的每次添加元素和查找元素的时间复杂度都是 $O(1)$，因此总时间复杂度是 $O(n)$。\n\n```Java [sol2-Java]\nclass Solution {\n    public int missingNumber(int[] nums) {\n        Set<Integer> set = new HashSet<Integer>();\n        int n = nums.length;\n        for (int i = 0; i < n; i++) {\n            set.add(nums[i]);\n        }\n        int missing = -1;\n        for (int i = 0; i <= n; i++) {\n            if (!set.contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int MissingNumber(int[] nums) {\n        ISet<int> set = new HashSet<int>();\n        int n = nums.Length;\n        for (int i = 0; i < n; i++) {\n            set.Add(nums[i]);\n        }\n        int missing = -1;\n        for (int i = 0; i <= n; i++) {\n            if (!set.Contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        unordered_set<int> set;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            set.insert(nums[i]);\n        }\n        int missing = -1;\n        for (int i = 0; i <= n; i++) {\n            if (!set.count(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar missingNumber = function(nums) {\n    const set = new Set();\n    const n = nums.length;\n    for (let i = 0; i < n; i++) {\n        set.add(nums[i]);\n    }\n    let missing = -1;\n    for (let i = 0; i <= n; i++) {\n        if (!set.has(i)) {\n            missing = i;\n            break;\n        }\n    }\n    return missing;\n};\n```\n\n```TypeScript [sol2-TypeScript]\nfunction missingNumber(nums: number[]): number {\n    const set = new Set();\n    const n: number = nums.length;\n    for (let i = 0; i < n; i++) {\n        set.add(nums[i]);\n    }\n    let missing: number = -1;\n    for (let i = 0; i <= n; i++) {\n        if (!set.has(i)) {\n            missing = i;\n            break;\n        }\n    }\n    return missing;\n};\n```\n\n```go [sol2-Golang]\nfunc missingNumber(nums []int) int {\n    has := map[int]bool{}\n    for _, v := range nums {\n        has[v] = true\n    }\n    for i := 0; ; i++ {\n        if !has[i] {\n            return i\n        }\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        s = set(nums)\n        for i in range(len(nums) + 1):\n            if i not in s:\n                return i\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。遍历数组 $\\textit{nums}$ 将元素加入哈希集合的时间复杂度是 $O(n)$，遍历从 $0$ 到 $n$ 的每个整数并判断是否在哈希集合中的时间复杂度也是 $O(n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。哈希集合中需要存储 $n$ 个整数。\n\n#### 方法三：位运算\n\n数组 $\\textit{nums}$ 中有 $n$ 个数，在这 $n$ 个数的后面添加从 $0$ 到 $n$ 的每个整数，则添加了 $n+1$ 个整数，共有 $2n+1$ 个整数。\n\n在 $2n+1$ 个整数中，丢失的数字只在后面 $n+1$ 个整数中出现一次，其余的数字在前面 $n$ 个整数中（即数组中）和后面 $n+1$ 个整数中各出现一次，即其余的数字都出现了两次。\n\n根据出现的次数的奇偶性，可以使用按位异或运算得到丢失的数字。按位异或运算 $\\oplus$ 满足交换律和结合律，且对任意整数 $x$ 都满足 $x \\oplus x = 0$ 和 $x \\oplus 0 = x$。\n\n由于上述 $2n+1$ 个整数中，丢失的数字出现了一次，其余的数字都出现了两次，因此对上述 $2n+1$ 个整数进行按位异或运算，结果即为丢失的数字。\n\n```Java [sol3-Java]\nclass Solution {\n    public int missingNumber(int[] nums) {\n        int xor = 0;\n        int n = nums.length;\n        for (int i = 0; i < n; i++) {\n            xor ^= nums[i];\n        }\n        for (int i = 0; i <= n; i++) {\n            xor ^= i;\n        }\n        return xor;\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public int MissingNumber(int[] nums) {\n        int xor = 0;\n        int n = nums.Length;\n        for (int i = 0; i < n; i++) {\n            xor ^= nums[i];\n        }\n        for (int i = 0; i <= n; i++) {\n            xor ^= i;\n        }\n        return xor;\n    }\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int res = 0;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            res ^= nums[i];\n        }\n        for (int i = 0; i <= n; i++) {\n            res ^= i;\n        }\n        return res;\n    }\n};\n```\n\n```JavaScript [sol3-JavaScript]\nvar missingNumber = function(nums) {\n    let xor = 0;\n    const n = nums.length;\n    for (let i = 0; i < nums.length; i++) {\n        xor ^= nums[i];\n    }\n    for (let i = 0; i <= n; i++) {\n        xor ^= i;\n    }\n    return xor;\n};\n```\n\n```TypeScript [sol3-TypeScript]\nvar missingNumber = function(nums) {\n    let xor: number = 0;\n    const n: number = nums.length;\n    for (let i = 0; i < nums.length; i++) {\n        xor ^= nums[i];\n    }\n    for (let i = 0; i <= n; i++) {\n        xor ^= i;\n    }\n    return xor;\n};\n```\n\n```go [sol3-Golang]\nfunc missingNumber(nums []int) (xor int) {\n    for i, num := range nums {\n        xor ^= i ^ num\n    }\n    return xor ^ len(nums)\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        xor = 0\n        for i, num in enumerate(nums):\n            xor ^= i ^ num\n        return xor ^ len(nums)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。需要对 $2n+1$ 个数字计算按位异或的结果。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法四：数学\n\n将从 $0$ 到 $n$ 的全部整数之和记为 $\\textit{total}$，根据高斯求和公式，有：\n\n$$\n\\textit{total} = \\sum_{i=1}^n = \\dfrac{n(n+1)}{2}\n$$\n\n将数组 $\\textit{nums}$ 的元素之和记为 $\\textit{arrSum}$，则 $\\textit{arrSum}$ 比 $\\textit{total}$ 少了丢失的一个数字，因此丢失的数字即为 $\\textit{total}$ 与 $\\textit{arrSum}$ 之差。\n\n```Java [sol4-Java]\nclass Solution {\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        int total = n * (n + 1) / 2;\n        int arrSum = 0;\n        for (int i = 0; i < n; i++) {\n            arrSum += nums[i];\n        }\n        return total - arrSum;\n    }\n}\n```\n\n```C# [sol4-C#]\npublic class Solution {\n    public int MissingNumber(int[] nums) {\n        int n = nums.Length;\n        int total = n * (n + 1) / 2;\n        int arrSum = 0;\n        for (int i = 0; i < n; i++) {\n            arrSum += nums[i];\n        }\n        return total - arrSum;\n    }\n}\n```\n\n```C++ [sol4-C++]\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int n = nums.size();\n        int total = n * (n + 1) / 2;\n        int arrSum = 0;\n        for (int i = 0; i < n; i++) {\n            arrSum += nums[i];\n        }\n        return total - arrSum;\n    }\n};\n```\n\n```JavaScript [sol4-JavaScript]\nvar missingNumber = function(nums) {\n    const n = nums.length;\n    let total = Math.floor(n * (n + 1) / 2);\n    let arrSum = 0;\n    for (let i = 0; i < n; i++) {\n        arrSum += nums[i];\n    }\n    return total - arrSum;\n};\n```\n\n```TypeScript [sol4-TypeScript]\nvar missingNumber = function(nums) {\n    const n: number = nums.length;\n    let total: number = Math.floor(n * (n + 1) / 2);\n    let arrSum: number = 0;\n    for (let i = 0; i < n; i++) {\n        arrSum += nums[i];\n    }\n    return total - arrSum;\n};\n```\n\n```go [sol4-Golang]\nfunc missingNumber(nums []int) int {\n    n := len(nums)\n    total := n * (n + 1) / 2\n    arrSum := 0\n    for _, num := range nums {\n        arrSum += num\n    }\n    return total - arrSum\n}\n```\n\n```Python [sol4-Python3]\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        total = n * (n + 1) // 2\n        arrSum = sum(nums)\n        return total - arrSum\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。需要 $O(1)$ 的时间计算从 $0$ 到 $n$ 的全部整数之和以及需要 $O(n)$ 的时间计算数组 $\\textit{nums}$ 的元素之和。\n\n- 空间复杂度：$O(1)$。"
}