{
	"titleSlug": "sorted-merge-lcci",
	"slug": "mian-shi-ti-1001-he-bing-pai-xu-de-shu-zu-by-leetc",
	"url": "https://leetcode-cn.com/problems/sorted-merge-lcci/solution/mian-shi-ti-1001-he-bing-pai-xu-de-shu-zu-by-leetc/",
	"content": "#### 方法一：直接合并后排序\n\n**算法**\n\n最直观的方法是先将数组 $B$ 放进数组 $A$ 的尾部，然后直接对整个数组进行排序。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void merge(vector<int>& A, int m, vector<int>& B, int n) {\n        for (int i = 0; i != n; ++i) {\n            A[m + i] = B[i];\n        }\n        sort(A.begin(), A.end());\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public void merge(int[] A, int m, int[] B, int n) {\n        for (int i = 0; i != n; ++i) {\n            A[m + i] = B[i];\n        }\n        Arrays.sort(A);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def merge(self, A: List[int], m: int, B: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify A in-place instead.\n        \"\"\"\n        A[m:] = B\n        A.sort()\n```\n\n```go [sol1-Golang]\nfunc merge(A []int, m int, B []int, _ int) {\n    copy(A[m:], B)\n    sort.Ints(A)\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar merge = function(A, m, B, n) {\n    A.splice(m, A.length - m, ...B);\n    A.sort((a, b) => a - b);\n};\n```\n\n```C [sol1-C]\nint cmp(int* a, int* b) {\n    return *a - *b;\n}\n\nvoid merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    for (int i = 0; i != n; ++i) {\n        nums1[m + i] = nums2[i];\n    }\n    qsort(nums1, nums1Size, sizeof(int), cmp);\n}\n```\n\n**复杂度分析**\n\n  * 时间复杂度：$O((m+n)\\log(m+n))$。\n    排序序列长度为 $m+n$，套用快速排序的时间复杂度即可，平均情况为 $O((m+n)\\log(m+n))$。\n\n  * 空间复杂度：$O(\\log(m+n))$。\n    排序序列长度为 $m+n$，套用快速排序的空间复杂度即可，平均情况为 $O(\\log(m+n))$。\n\n#### 方法二：双指针\n\n**算法**\n\n方法一没有利用数组 $A$ 与 $B$ 已经被排序的性质。为了利用这一性质，我们可以使用双指针方法。这一方法将两个数组看作队列，每次从两个数组头部取出比较小的数字放到结果中。如下面的动画所示：\n\n![lc_animation.gif](https://pic.leetcode-cn.com/fc6ffc0e15f9af4cfd24be0e5848b704d378236c658e46da21ef9264d924614b-lc_animation.gif){:width=540}\n\n我们为两个数组分别设置一个指针 $\\textit{pa}$ 与 $\\textit{pb}$ 来作为队列的头部指针。代码实现如下：\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    void merge(vector<int>& A, int m, vector<int>& B, int n) {\n        int pa = 0, pb = 0;\n        int sorted[m + n];\n        int cur;\n        while (pa < m || pb < n) {\n            if (pa == m) {\n                cur = B[pb++];\n            } else if (pb == n) {\n                cur = A[pa++];\n            } else if (A[pa] < B[pb]) {\n                cur = A[pa++];\n            } else {\n                cur = B[pb++];\n            }\n            sorted[pa + pb - 1] = cur;\n        }\n        for (int i = 0; i != m + n; ++i) {\n            A[i] = sorted[i];\n        }\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public void merge(int[] A, int m, int[] B, int n) {\n        int pa = 0, pb = 0;\n        int[] sorted = new int[m + n];\n        int cur;\n        while (pa < m || pb < n) {\n            if (pa == m) {\n                cur = B[pb++];\n            } else if (pb == n) {\n                cur = A[pa++];\n            } else if (A[pa] < B[pb]) {\n                cur = A[pa++];\n            } else {\n                cur = B[pb++];\n            }\n            sorted[pa + pb - 1] = cur;\n        }\n        for (int i = 0; i != m + n; ++i) {\n            A[i] = sorted[i];\n        }\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def merge(self, A: List[int], m: int, B: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify A in-place instead.\n        \"\"\"\n        sorted = []\n        pa, pb = 0, 0\n        while pa < m or pb < n:\n            if pa == m:\n                sorted.append(B[pb])\n                pb += 1\n            elif pb == n:\n                sorted.append(A[pa])\n                pa += 1\n            elif A[pa] < B[pb]:\n                sorted.append(A[pa])\n                pa += 1\n            else:\n                sorted.append(B[pb])\n                pb += 1\n        A[:] = sorted\n```\n\n```go [sol2-Golang]\nfunc merge(A []int, m int, B []int, n int) {\n    sorted := make([]int, 0, m+n)\n    p1, p2 := 0, 0\n    for {\n        if p1 == m {\n            sorted = append(sorted, B[p2:]...)\n            break\n        }\n        if p2 == n {\n            sorted = append(sorted, A[p1:]...)\n            break\n        }\n        if A[p1] < B[p2] {\n            sorted = append(sorted, A[p1])\n            p1++\n        } else {\n            sorted = append(sorted, B[p2])\n            p2++\n        }\n    }\n    copy(A, sorted)\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar merge = function(A, m, B, n) {\n    let pa = 0, pb = 0;\n    const sorted = new Array(m + n).fill(0);\n    var cur;\n    while (pa < m || pb < n) {\n        if (pa === m) {\n            cur = B[pb++];\n        } else if (pb === n) {\n            cur = A[pa++];\n        } else if (A[pa] < B[pb]) {\n            cur = A[pa++];\n        } else {\n            cur = B[pb++];\n        }\n        sorted[pa + pb - 1] = cur;\n    }\n    for (let i = 0; i != m + n; ++i) {\n        A[i] = sorted[i];\n    }\n};\n```\n\n```C [sol2-C]\nvoid merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    int p1 = 0, p2 = 0;\n    int sorted[m + n];\n    int cur;\n    while (p1 < m || p2 < n) {\n        if (p1 == m) {\n            cur = nums2[p2++];\n        } else if (p2 == n) {\n            cur = nums1[p1++];\n        } else if (nums1[p1] < nums2[p2]) {\n            cur = nums1[p1++];\n        } else {\n            cur = nums2[p2++];\n        }\n        sorted[p1 + p2 - 1] = cur;\n    }\n    for (int i = 0; i != m + n; ++i) {\n        nums1[i] = sorted[i];\n    }\n}\n```\n\n**复杂度分析**\n\n  * 时间复杂度：$O(m+n)$。\n    指针移动单调递增，最多移动 $m+n$ 次，因此时间复杂度为 $O(m+n)$。\n\n  * 空间复杂度：$O(m+n)$。\n    需要建立长度为 $m+n$ 的中间数组 $\\textit{sorted}$。\n\n#### 方法三：逆向双指针\n\n**算法**\n\n方法二中，之所以要使用临时变量，是因为如果直接合并到数组 $A$ 中，$A$ 中的元素可能会在取出之前被覆盖。那么如何直接避免覆盖 $A$ 中的元素呢？观察可知，$A$ 的后半部分是空的，可以直接覆盖而不会影响结果。因此可以指针设置为从后向前遍历，每次取两者之中的较大者放进 $A$ 的最后面。\n\n严格来说，在此遍历过程中的任意一个时刻，$A$ 数组中有 $m-\\textit{pa}-1$ 个元素被放入 $A$ 的后半部，$B$ 数组中有 $n-\\textit{pb}-1$ 个元素被放入 $A$ 的后半部，而在指针 $\\textit{pa}$ 的后面，$A$ 数组有 $m+n-\\textit{pa}-1$ 个位置。由于\n\n$$m+n-\\textit{pa}-1\\geq m-\\textit{pa}-1+n-\\textit{pb}-1$$\n\n等价于\n\n$$pb\\geq -1$$\n\n永远成立，因此 $\\textit{pa}$ 后面的位置永远足够容纳被插入的元素，不会产生 $\\textit{pa}$ 的元素被覆盖的情况。\n\n实现代码如下：\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    void merge(vector<int>& A, int m, vector<int>& B, int n) {\n        int pa = m - 1, pb = n - 1;\n        int tail = m + n - 1;\n        int cur;\n        while (pa >= 0 || pb >= 0) {\n            if (pa == -1) {\n                cur = B[pb--];\n            } else if (pb == -1) {\n                cur = A[pa--];\n            } else if (A[pa] > B[pb]) {\n                cur = A[pa--];\n            } else {\n                cur = B[pb--];\n            }\n            A[tail--] = cur;\n        }\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public void merge(int[] A, int m, int[] B, int n) {\n        int pa = m - 1, pb = n - 1;\n        int tail = m + n - 1;\n        int cur;\n        while (pa >= 0 || pb >= 0) {\n            if (pa == -1) {\n                cur = B[pb--];\n            } else if (pb == -1) {\n                cur = A[pa--];\n            } else if (A[pa] > B[pb]) {\n                cur = A[pa--];\n            } else {\n                cur = B[pb--];\n            }\n            A[tail--] = cur;\n        }\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def merge(self, A: List[int], m: int, B: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify A in-place instead.\n        \"\"\"\n        pa, pb = m - 1, n - 1\n        tail = m + n - 1\n        while pa >= 0 or pb >= 0:\n            if pa == -1:\n                A[tail] = B[pb]\n                pb -= 1\n            elif pb == -1:\n                A[tail] = A[pa]\n                pa -= 1\n            elif A[pa] > B[pb]:\n                A[tail] = A[pa]\n                pa -= 1\n            else:\n                A[tail] = B[pb]\n                pb -= 1\n            tail -= 1\n```\n\n```go [sol3-Golang]\nfunc merge(A []int, m int, B []int, n int) {\n    for p1, p2, tail := m-1, n-1, m+n-1; p1 >= 0 || p2 >= 0; tail-- {\n        var cur int\n        if p1 == -1 {\n            cur = B[p2]\n            p2--\n        } else if p2 == -1 {\n            cur = A[p1]\n            p1--\n        } else if A[p1] > B[p2] {\n            cur = A[p1]\n            p1--\n        } else {\n            cur = B[p2]\n            p2--\n        }\n        A[tail] = cur\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar merge = function(A, m, B, n) {\n    let pa = m - 1, pb = n - 1;\n    let tail = m + n - 1;\n    var cur;\n    while (pa >= 0 || pb >= 0) {\n        if (pa === -1) {\n            cur = B[pb--];\n        } else if (pb === -1) {\n            cur = A[pa--];\n        } else if (A[pa] > B[pb]) {\n            cur = A[pa--];\n        } else {\n            cur = B[pb--];\n        }\n        A[tail--] = cur;\n    }\n};\n```\n\n```C [sol3-C]\nvoid merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    int p1 = m - 1, p2 = n - 1;\n    int tail = m + n - 1;\n    int cur;\n    while (p1 >= 0 || p2 >= 0) {\n        if (p1 == -1) {\n            cur = nums2[p2--];\n        } else if (p2 == -1) {\n            cur = nums1[p1--];\n        } else if (nums1[p1] > nums2[p2]) {\n            cur = nums1[p1--];\n        } else {\n            cur = nums2[p2--];\n        }\n        nums1[tail--] = cur;\n    }\n}\n```\n\n**复杂度分析**\n\n  * 时间复杂度：$O(m+n)$。\n    指针移动单调递减，最多移动 $m+n$ 次，因此时间复杂度为 $O(m+n)$。\n  \n  * 空间复杂度：$O(1)$。\n    直接对数组 $A$ 原地修改，不需要额外空间。"
}