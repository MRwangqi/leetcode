{
	"titleSlug": "4sum-ii",
	"slug": "si-shu-xiang-jia-ii-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/4sum-ii/solution/si-shu-xiang-jia-ii-by-leetcode-solution/",
	"content": "#### 方法一：分组 + 哈希表\n\n**思路与算法**\n\n我们可以将四个数组分成两部分，$A$ 和 $B$ 为一组，$C$ 和 $D$ 为另外一组。\n\n对于 $A$ 和 $B$，我们使用二重循环对它们进行遍历，得到所有 $A[i]+B[j]$ 的值并存入哈希映射中。对于哈希映射中的每个键值对，每个键表示一种 $A[i]+B[j]$，对应的值为 $A[i]+B[j]$ 出现的次数。\n\n对于 $C$ 和 $D$，我们同样使用二重循环对它们进行遍历。当遍历到 $C[k]+D[l]$ 时，如果 $-(C[k]+D[l])$ 出现在哈希映射中，那么将 $-(C[k]+D[l])$ 对应的值累加进答案中。\n\n最终即可得到满足 $A[i]+B[j]+C[k]+D[l]=0$ 的四元组数目。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\n        unordered_map<int, int> countAB;\n        for (int u: A) {\n            for (int v: B) {\n                ++countAB[u + v];\n            }\n        }\n        int ans = 0;\n        for (int u: C) {\n            for (int v: D) {\n                if (countAB.count(-u - v)) {\n                    ans += countAB[-u - v];\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {\n        Map<Integer, Integer> countAB = new HashMap<Integer, Integer>();\n        for (int u : A) {\n            for (int v : B) {\n                countAB.put(u + v, countAB.getOrDefault(u + v, 0) + 1);\n            }\n        }\n        int ans = 0;\n        for (int u : C) {\n            for (int v : D) {\n                if (countAB.containsKey(-u - v)) {\n                    ans += countAB.get(-u - v);\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def fourSumCount(self, A: List[int], B: List[int], C: List[int], D: List[int]) -> int:\n        countAB = collections.Counter(u + v for u in A for v in B)\n        ans = 0\n        for u in C:\n            for v in D:\n                if -u - v in countAB:\n                    ans += countAB[-u - v]\n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar fourSumCount = function(A, B, C, D) {\n    const countAB = new Map();\n    A.forEach(u => B.forEach(v => countAB.set(u + v, (countAB.get(u + v) || 0) + 1)));\n    let ans = 0; \n    for (let u of C) {\n        for (let v of D) {\n            if (countAB.has(-u - v)) {\n                ans += countAB.get(-u - v);\n            }\n        }\n    }\n    return ans;\n};\n```\n\n```Golang [sol1-Golang]\nfunc fourSumCount(a, b, c, d []int) (ans int) {\n    countAB := map[int]int{}\n    for _, v := range a {\n        for _, w := range b {\n            countAB[v+w]++\n        }\n    }\n    for _, v := range c {\n        for _, w := range d {\n            ans += countAB[-v-w]\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nstruct hashTable {\n    int key;\n    int val;\n    UT_hash_handle hh;\n};\n\nint fourSumCount(int* A, int ASize, int* B, int BSize, int* C, int CSize, int* D, int DSize) {\n    struct hashTable* hashtable = NULL;\n    for (int i = 0; i < ASize; ++i) {\n        for (int j = 0; j < BSize; ++j) {\n            int ikey = A[i] + B[j];\n            struct hashTable* tmp;\n            HASH_FIND_INT(hashtable, &ikey, tmp);\n            if (tmp == NULL) {\n                struct hashTable* tmp = malloc(sizeof(struct hashTable));\n                tmp->key = ikey, tmp->val = 1;\n                HASH_ADD_INT(hashtable, key, tmp);\n            } else {\n                tmp->val++;\n            }\n        }\n    }\n    int ans = 0;\n    for (int i = 0; i < CSize; ++i) {\n        for (int j = 0; j < DSize; ++j) {\n            int ikey = -C[i] - D[j];\n            struct hashTable* tmp;\n            HASH_FIND_INT(hashtable, &ikey, tmp);\n            if (tmp != NULL) {\n                ans += tmp->val;\n            }\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$。我们使用了两次二重循环，时间复杂度均为 $O(n^2)$。在循环中对哈希映射进行的修改以及查询操作的期望时间复杂度均为 $O(1)$，因此总时间复杂度为 $O(n^2)$。\n\n- 空间复杂度：$O(n^2)$，即为哈希映射需要使用的空间。在最坏的情况下，$A[i]+B[j]$ 的值均不相同，因此值的个数为 $n^2$，也就需要 $O(n^2)$ 的空间。"
}