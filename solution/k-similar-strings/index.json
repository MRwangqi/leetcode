{
	"titleSlug": "k-similar-strings",
	"slug": "xiang-si-du-wei-k-de-zi-fu-chuan-by-leet-8z10",
	"url": "https://leetcode-cn.com/problems/k-similar-strings/solution/xiang-si-du-wei-k-de-zi-fu-chuan-by-leet-8z10/",
	"content": "#### 方法一：广度优先搜索\n\n由于题目中给定的字符串的长度范围为 $[1,20]$ 且只包含 $6$ 种不同的字符，因此我们可以枚举所有可能的交换方案，在搜索时进行减枝从而提高搜索效率，最终找到最小的交换次数。\n\n设字符串的长度为 $n$，如果当前第 $i$ 个字符满足 $s_1[i] \\neq s_2[i]$，则从 $s_1[i+1, \\cdots]$ 选择一个合适的字符 $s_1[j]$ 进行交换，其中满足 $s_1[j] = s_2[i],j \\in [i+1,n-1]$。每次我们进行交换时，可将字符串 $s_1$ 的前 $x$ 个字符通过交换使得 $s_1[0,\\cdots,x - 1] = s_2[0,\\cdots,x - 1]$，最终使得 $s_1$ 的所有字符与 $s_2$ 相等即可。我们通过以上变换，找到最小的交换次数使得 $s_1$ 与 $s_2$ 相等。\n\n在搜索时，我们需要进行减枝，我们设当前的通过交换后的字符串 $s_1'$ 为一个中间状态，用哈希表记录这些中间状态，当通过交换时发现当前状态已经计算过，则此时我们可以直接跳过该状态。\n\n```Python [sol1-Python3]\nclass Solution:\n    def kSimilarity(self, s1: str, s2: str) -> int:\n        step, n = 0, len(s1)\n        q, vis = [(s1, 0)], {s1}\n        while True:\n            tmp = q\n            q = []\n            for s, i in tmp:\n                if s == s2:\n                    return step\n                while i < n and s[i] == s2[i]:\n                    i += 1\n                for j in range(i + 1, n):\n                    if s[j] == s2[i] != s2[j]:  # 剪枝，只在 s[j] != s2[j] 时去交换\n                        t = list(s)\n                        t[i], t[j] = t[j], t[i]\n                        t = ''.join(t)\n                        if t not in vis:\n                            vis.add(t)\n                            q.append((t, i + 1))\n            step += 1\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int kSimilarity(string s1, string s2) {\n        int n = s1.size();\n        queue<pair<string, int>> qu;\n        unordered_set<string> visit;\n        qu.emplace(s1, 0);\n        visit.emplace(s1);\n        for (int step = 0;; step++) {\n            int sz = qu.size();\n            for (int i = 0; i < sz; i++) {\n                auto [cur, pos] = qu.front();\n                qu.pop();\n                if (cur == s2) {\n                    return step;\n                }\n                while (pos < n && cur[pos] == s2[pos]) {\n                    pos++;\n                }\n                for (int j = pos + 1; j < n; j++) {\n                    if (cur[j] != s2[j] && cur[j] == s2[pos]) { // 剪枝，只在 cur[j] != s2[j] 时去交换\n                        swap(cur[pos], cur[j]);\n                        if (!visit.count(cur)) {\n                            visit.emplace(cur);\n                            qu.emplace(cur, pos + 1);\n                        }\n                        swap(cur[pos], cur[j]);\n                    }\n                }\n            }\n        }\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int kSimilarity(String s1, String s2) {\n        int n = s1.length();\n        Queue<Pair<String, Integer>> queue = new ArrayDeque<Pair<String, Integer>>();\n        Set<String> visit = new HashSet<String>();\n        queue.offer(new Pair<String, Integer>(s1, 0));\n        visit.add(s1);\n        int step = 0;\n        while (!queue.isEmpty()) {\n            int sz = queue.size();\n            for (int i = 0; i < sz; i++) {\n                Pair<String, Integer> pair = queue.poll();\n                String cur = pair.getKey();\n                int pos = pair.getValue();\n                if (cur.equals(s2)) {\n                    return step;\n                }\n                while (pos < n && cur.charAt(pos) == s2.charAt(pos)) {\n                    pos++;\n                }\n                for (int j = pos + 1; j < n; j++) {\n                    if (s2.charAt(j) == cur.charAt(j)) {\n                        continue;\n                    }\n                    if (s2.charAt(pos) == cur.charAt(j)) {\n                        String next = swap(cur, pos, j);\n                        if (!visit.contains(next)) {\n                            visit.add(next);\n                            queue.offer(new Pair<String, Integer>(next, pos + 1));\n                        }\n                    }\n                }\n            }\n            step++;\n        } \n        return step;\n    }\n\n    public String swap(String cur, int i, int j) {\n        char[] arr = cur.toCharArray();\n        char c = arr[i];\n        arr[i] = arr[j];\n        arr[j] = c;\n        return new String(arr);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int KSimilarity(string s1, string s2) {\n        int n = s1.Length;\n        Queue<Tuple<string, int>> queue = new Queue<Tuple<string, int>>();\n        ISet<string> visit = new HashSet<string>();\n        queue.Enqueue(new Tuple<string, int>(s1, 0));\n        visit.Add(s1);\n        int step = 0;\n        while (queue.Count > 0) {\n            int sz = queue.Count;\n            for (int i = 0; i < sz; i++) {\n                Tuple<string, int> tuple = queue.Dequeue();\n                string cur = tuple.Item1;\n                int pos = tuple.Item2;\n                if (cur.Equals(s2)) {\n                    return step;\n                }\n                while (pos < n && cur[pos] == s2[pos]) {\n                    pos++;\n                }\n                for (int j = pos + 1; j < n; j++) {\n                    if (s2[j] == cur[j]) {\n                        continue;\n                    }\n                    if (s2[pos] == cur[j]) {\n                        string next = Swap(cur, pos, j);\n                        if (!visit.Contains(next)) {\n                            visit.Add(next);\n                            queue.Enqueue(new Tuple<string, int>(next, pos + 1));\n                        }\n                    }\n                }\n            }\n            step++;\n        } \n        return step;\n    }\n\n    public string Swap(string cur, int i, int j) {\n        char[] arr = cur.ToCharArray();\n        char c = arr[i];\n        arr[i] = arr[j];\n        arr[j] = c;\n        return new string(arr);\n    }\n}\n```\n\n```C [sol1-C]\n#define MAX_STR_LEN 24\n\ntypedef struct Node {\n    char str[MAX_STR_LEN];\n    int pos;\n    struct Node* next;\n} Node;\n\ntypedef struct {\n    char key[MAX_STR_LEN];\n    UT_hash_handle hh;\n} HashItem;\n\nHashItem *hashFindItem(HashItem **obj, const char* key) {\n    HashItem *pEntry = NULL;\n    HASH_FIND_STR(*obj, key, pEntry);\n    return pEntry;\n}\n\nbool hashAddItem(HashItem **obj, const char* key) {\n    HashItem *pEntry = (HashItem *)malloc(sizeof(HashItem));\n    strcpy(pEntry->key, key);\n    HASH_ADD_STR(*obj, key, pEntry);\n    return true;\n}\n\nvoid hashFree(HashItem **obj) {\n    HashItem *curr = NULL, *tmp = NULL;\n    HASH_ITER(hh, *obj, curr, tmp) {\n        HASH_DEL(*obj, curr);  \n        free(curr);             \n    }\n}\n\nstatic inline void swap(char *pa, char *pb) {\n    char c = *pa;\n    *pa = *pb;\n    *pb = c;\n}\n\nint kSimilarity(char * s1, char * s2) {\n    int n = strlen(s1);\n    Node *head = NULL, *tail = NULL;\n    HashItem *visit = NULL;\n    hashAddItem(&visit, s1);\n    head = tail = (Node *)malloc(sizeof(Node));\n    strcpy(tail->str, s1);\n    tail->pos = 0;\n    tail->next = NULL;\n    int step = 0, queueSize = 1;\n    while (queueSize > 0) {\n        int sz = queueSize;\n        char cur[MAX_STR_LEN];\n        for (int i = 0; i < sz; i++) {\n            char *cur = head->str;\n            int pos = head->pos;\n            if (!strcmp(cur, s2)) {\n                return step;\n            }\n            while (pos < n && cur[pos] == s2[pos]) {\n                pos++;\n            }\n            for (int j = pos + 1; j < n; j++) {\n                if (s2[j] == cur[j]) {\n                    continue;\n                }\n                if (s2[pos] == cur[j]) {\n                    swap(&cur[pos], &cur[j]);\n                    if (!hashFindItem(&visit, cur)) {\n                        hashAddItem(&visit, cur);\n                        tail->next = (Node *)malloc(sizeof(Node));\n                        tail = tail->next;\n                        strcpy(tail->str, cur);\n                        tail->pos = pos + 1;\n                        tail->next = NULL;\n                        queueSize++;\n                    }\n                    swap(&cur[pos], &cur[j]);\n                }\n            }\n            Node *p = head;\n            head = head->next;\n            queueSize--;\n            free(p);\n        }\n        step++;\n    } \n    hashFree(&visit);\n    return step;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar kSimilarity = function(s1, s2) {\n    const n = s1.length;\n    const queue = [];\n    const visit = new Set();\n    queue.push([s1, 0]);\n    visit.add(s1);\n    let step = 0;\n    while (queue.length) {\n        const sz = queue.length;\n        for (let i = 0; i < sz; i++) {\n            let [cur, pos] = queue.shift();\n            if (cur === s2) {\n                return step;\n            }\n            while (pos < n && cur[pos] === s2[pos]) {\n                pos++;\n            }\n            for (let j = pos + 1; j < n; j++) {\n                if (s2[j] === cur[j]) {\n                    continue;\n                }\n                if (s2[pos] === cur[j]) {\n                    const next = swap(cur, pos, j);\n                    if (!visit.has(next)) {\n                        visit.add(next);\n                        queue.push([next, pos + 1]);\n                    }\n                }\n            }\n        }\n        step++;\n    } \n    return step;\n}\n\nconst swap = (cur, i, j) => {\n    const arr = [...cur];\n    const c = arr[i];\n    arr[i] = arr[j];\n    arr[j] = c;\n    return arr.join('');\n};\n```\n\n```go [sol1-Golang]\nfunc kSimilarity(s1, s2 string) (step int) {\n    type pair struct {\n        s string\n        i int\n    }\n    q := []pair{{s1, 0}}\n    vis := map[string]bool{s1: true}\n    for n := len(s1); ; step++ {\n        tmp := q\n        q = nil\n        for _, p := range tmp {\n            s, i := p.s, p.i\n            if s == s2 {\n                return\n            }\n            for i < n && s[i] == s2[i] {\n                i++\n            }\n            t := []byte(s)\n            for j := i + 1; j < n; j++ {\n                if s[j] == s2[i] && s[j] != s2[j] { // 剪枝，只在 s[j] != s2[j] 时去交换\n                    t[i], t[j] = t[j], t[i]\n                    if t := string(t); !vis[t] {\n                        vis[t] = true\n                        q = append(q, pair{t, i + 1})\n                    }\n                    t[i], t[j] = t[j], t[i]\n                }\n            }\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n该方法时空复杂度分析较为复杂，暂不讨论。\n\n#### 方法二：深度优先搜索\n\n与方法一同样的交换思路，我们也可以采用深度优先搜索来实现，每次遇到不同的字符 $s_1[i] \\neq s_2[i]$ 时，则从 $s_1[i+1, \\cdots]$ 中选择处于不同位置的字符 $s_1[j] = s_2[i]$，将其与 $s_1[i]$ 进行交换，然后保持当前子状态，搜索下一个位置 $i+1$，直到所有字符串 $s_1$ 全部与 $s_2$ 匹配完成；当前子状态搜索完成后，然后恢复字符串，继续搜索下一个与 $s_2[i]$ 相等的字符，并进行替换即可。在进行深度优先搜索时，由于每个搜索时每个子树的状态都是不同的，所以也可以不用哈希表去重，但是可以用一些特殊的减枝技巧。我们可以得到相似字符串交换次数的上限与下限：\n\n+ 对于长度为 $n$ 的两个相似的字符串 $s_1,s_2$，$s_1$ 最多需要 $n-1$ 次交换变为 $s_2$，因为每进行一次有效交换时，我们可以将 $s_1$ 的中的一个字符调整到与 $s_2$ 相同，我们只需要将 $s_1$ 的前 $n-1$ 个字符调整到与 $s_2$ 的前 $n-1$ 个字符相同，则 $s_1$ 的第 $n$ 个字符此时也一定与 $s_2$ 的第 $n$ 个字符相同，因此我们最多需要 $n-1$ 次交换，即可使得 $s_1, s_2$ 相等。\n\n+ 对于长度为 $n$ 的两个相似的字符串 $s_1,s_2$，且对于字符串中任意位置的字符均满足 $s_1[i] \\neq s_2[i]$。我们可以观察到此时 $s_1$ 最少需要 $\\lfloor \\dfrac{n+1}{2} \\rfloor$ 次交换变为 $s_2$。每进行一次有效交换时，我们最多可以将 $s_1$ 的中的两个字符调整到与 $s_2$ 相同。比如当满足 $s_1[i] = s_2[j],s_1[j] = s_2[i]$，此时我们交换位置 $(i,j)$，可以将两个字符调整到正确的位置，我们分两种情况进行讨论：\n    + 当 $n$ 为偶数时，由于每次交换时最多可以将两个字符同时移动到正确的位置，因此最少需要 $\\dfrac{n}{2}$ 次交换可以使得 $s_1$ 与 $s_2$ 相等。\n    + 当 $n$ 为奇数数时，每次交换时最多可以将两个字符同时移动到正确的位置，当最终剩下 $3$ 个字符时，此时我们再交换一次时无法交换两个字符到正确的位置。根据前置条件所有位置的字符均满足 $s_1[i] \\neq s_2[i]$，假设此时还剩余 $3$ 个字符满足 $s_1[i] \\neq s_2[i],s_1[j] \\neq s_2[j],s_1[k] \\neq s_2[k]$ 时，则此时任意交换一次两个字符使得 $s_1[i] = s_2[i],s_1[j] = s_2[j]$，还剩余一个字符 $s_1[k],s_2[k]$ 不相等，这与两个字符串相似矛盾，因此还需 $2$ 次交换才能使得 $s1,s_2$ 中剩余的 $3$ 个字符相等。因此当 $n$ 为奇数时，最少需要 $\\dfrac{n+1}{2}$ 次交换可以使得 $s_1$ 与 $s_2$ 相等。\n\n根据以上结论，我们可以进行如下减枝:\n+ 我们只需要计算两个字符 $s_1,s_2$ 中同一位置不同的字符的交换次数即可，同一位置相同的字符直接可以跳过。\n+ 根据之前的结论，假设当前已经通过计算得到的最少交换次数为 $\\textit{ans}$，假设当前字符字符串 $s_1$ 已经过 $\\textit{cost}$ 次交换变为了 $s_1{'}$，此时我们计算出字符串 $s_1^{'}$ 变为 $s_2$ 还需要进行交换次数的下限为 $\\text{minSwap}(s_1{'})$，则字符串 $s_1$ 经过交换变为中间状态 $s_1{'}$，然后交换变为 $s_2$ 所需的交换次数的下限为 $\\textit{cur} = \\textit{cost} + \\text{minSwap}(s_1^{'})$，如果当前最少交换次数下限满足 $\\textit{cur} \\ge \\textit{ans}$ 时，则表明当前的字符串 $s_1^{'}$ 已经不是更优的搜索状态，可直接提前终止搜索。\n\n```Python [sol2-Python3]\nclass Solution:\n    def kSimilarity(self, s1: str, s2: str) -> int:\n        s, t = [], []\n        for x, y in zip(s1, s2):\n            if x != y:\n                s.append(x)\n                t.append(y)\n        n = len(s)\n        if n == 0:\n            return 0\n\n        ans = n - 1\n        def dfs(i: int, cost: int) -> None:\n            nonlocal ans\n            if cost > ans:\n                return\n            while i < n and s[i] == t[i]:\n                i += 1\n            if i == n:\n                ans = min(ans, cost)\n                return\n            diff = sum(s[j] != t[j] for j in range(i, len(s)))\n            min_swap = (diff + 1) // 2\n            if cost + min_swap >= ans:  # 当前状态的交换次数下限大于等于当前的最小交换次数\n                return\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    s[i], s[j] = s[j], s[i]\n                    dfs(i + 1, cost + 1)\n                    s[i], s[j] = s[j], s[i]\n        dfs(0, 0)\n        return ans\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int minSwap(const string &s1, const string &s2, const int &pos) {\n        int tot = 0;\n        for (int i = pos; i < s1.size(); i++) {\n            tot += s1[i] != s2[i];\n        }\n        return (tot + 1) / 2;\n    }\n\n    int kSimilarity(string s1, string s2) {\n        string str1, str2;\n        for (int i = 0; i < s1.size(); i++) {\n            if (s1[i] != s2[i]) {\n                str1.push_back(s1[i]);\n                str2.push_back(s2[i]);\n            }\n        }\n        int n = str1.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int ans = n - 1;\n        function<void(int, int)> dfs = [&](int pos, int cost) {\n            if (cost > ans) {\n                return;\n            }\n            while (pos < n && str1[pos] == str2[pos]) {\n                pos++;\n            }\n            if (pos == n) {\n                ans = min(ans, cost);\n                return;\n            }\n            /* 当前状态的交换次数下限大于等于当前的最小交换次数 */\n            if (cost + minSwap(str1, str2, pos) >= ans) {\n                return;\n            }\n            for (int i = pos + 1; i < n; i++) {\n                if (str1[i] == str2[pos]) {\n                    swap(str1[i], str1[pos]);\n                    dfs(pos + 1, cost + 1);\n                    swap(str1[i], str1[pos]);\n                }\n            }\n        };\n        dfs(0, 0);\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    int ans;\n\n    public int kSimilarity(String s1, String s2) {\n        StringBuilder str1 = new StringBuilder();\n        StringBuilder str2 = new StringBuilder();\n        for (int i = 0; i < s1.length(); i++) {\n            if (s1.charAt(i) != s2.charAt(i)) {\n                str1.append(s1.charAt(i));\n                str2.append(s2.charAt(i));\n            }\n        }\n        if (str1.length() == 0) {\n            return 0;\n        }\n        ans = str1.length() - 1;\n        dfs(0, 0, str1.length(), str1.toString(), str2.toString());\n        return ans;\n    }\n\n    public void dfs(int pos, int cost, int len, String str1, String str2) {\n        if (cost > ans) {\n            return;\n        }\n        while (pos < str1.length() && str1.charAt(pos) == str2.charAt(pos)) {\n            pos++;\n        }\n        if (pos == str1.length()) {\n            ans = Math.min(ans, cost);\n            return;\n        }  \n        /* 当前状态的交换次数下限大于等于当前的最小交换次数 */      \n        if (cost + minSwap(str1, str2, pos) >= ans) {\n            return;\n        }\n        for (int i = pos + 1; i < str1.length(); i++) {\n            if (str1.charAt(i) == str2.charAt(pos)) {\n                String str1Next = swap(str1, i, pos);\n                dfs(pos + 1, cost + 1, len, str1Next, str2);\n            }\n        }\n    }\n\n    public int minSwap(String s1, String s2, int pos) {\n        int tot = 0;\n        for (int i = pos; i < s1.length(); i++) {\n            tot += s1.charAt(i) != s2.charAt(i) ? 1 : 0;\n        }\n        return (tot + 1) / 2;\n    }\n\n    public String swap(String cur, int i, int j) {\n        char[] arr = cur.toCharArray();\n        char c = arr[i];\n        arr[i] = arr[j];\n        arr[j] = c;\n        return new String(arr);\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    int ans;\n\n    public int KSimilarity(string s1, string s2) {\n        StringBuilder str1 = new StringBuilder();\n        StringBuilder str2 = new StringBuilder();\n        for (int i = 0; i < s1.Length; i++) {\n            if (s1[i] != s2[i]) {\n                str1.Append(s1[i]);\n                str2.Append(s2[i]);\n            }\n        }\n        if (str1.Length == 0) {\n            return 0;\n        }\n        ans = str1.Length - 1;\n        DFS(0, 0, str1.Length, str1.ToString(), str2.ToString());\n        return ans;\n    }\n\n    public void DFS(int pos, int cost, int len, string str1, string str2) {\n        if (cost > ans) {\n            return;\n        }\n        while (pos < str1.Length && str1[pos] == str2[pos]) {\n            pos++;\n        }\n        if (pos == str1.Length) {\n            ans = Math.Min(ans, cost);\n            return;\n        }  \n        /* 当前状态的交换次数下限大于等于当前的最小交换次数 */      \n        if (cost + MinSwap(str1, str2, pos) >= ans) {\n            return;\n        }\n        for (int i = pos + 1; i < str1.Length; i++) {\n            if (str1[i] == str2[pos]) {\n                string str1Next = Swap(str1, i, pos);\n                DFS(pos + 1, cost + 1, len, str1Next, str2);\n            }\n        }\n    }\n\n    public int MinSwap(string s1, string s2, int pos) {\n        int tot = 0;\n        for (int i = pos; i < s1.Length; i++) {\n            tot += s1[i] != s2[i] ? 1 : 0;\n        }\n        return (tot + 1) / 2;\n    }\n\n    public string Swap(string cur, int i, int j) {\n        char[] arr = cur.ToCharArray();\n        char c = arr[i];\n        arr[i] = arr[j];\n        arr[j] = c;\n        return new string(arr);\n    }\n}\n```\n\n```C [sol2-C]\n#define MAX_STR_LEN 24\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nstatic inline void swap(char *pa, char *pb) {\n    char c = *pa;\n    *pa = *pb;\n    *pb = c;\n}\n\nint minSwap(const char *s1, const char *s2, int pos) {\n    int tot = 0;\n    for (int i = pos; s1[i]; i++) {\n        tot += s1[i] != s2[i];\n    }\n    return (tot + 1) / 2;\n}\n\nvoid dfs(int pos, int cost, int len, char* str1, const char *str2, int *res) {\n    if (cost > *res) {\n        return;\n    }\n    while (pos < len && str1[pos] == str2[pos]) {\n        pos++;\n    }\n    if (pos == len) {\n        *res = MIN(*res, cost);\n        return;\n    }\n    /* 当前状态的交换次数下限大于等于当前的最小交换次数 */ \n    if (cost + minSwap(str1, str2, pos) >= *res) {\n        return;\n    }\n    for (int i = pos + 1; i < len; i++) {\n        if (str1[i] == str2[pos]) {\n            swap(&str1[i], &str1[pos]);\n            dfs(pos + 1, cost + 1, len, str1, str2, res);\n            swap(&str1[i], &str1[pos]);\n        }\n    }\n};\n\nint kSimilarity(char * s1, char * s2) {\n    char str1[MAX_STR_LEN], str2[MAX_STR_LEN];\n    int pos = 0, len = strlen(s1);\n    for (int i = 0; i < len; i++) {\n        if (s1[i] != s2[i]) {\n            str1[pos] = s1[i];\n            str2[pos] = s2[i];\n            pos++;\n        }\n    }\n    str1[pos] = '\\0';\n    str2[pos] = '\\0';\n    if (pos == 0) {\n        return 0;\n    }\n    int res = pos - 1;\n    dfs(0, 0, pos, str1, str2, &res);\n    return res;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar kSimilarity = function(s1, s2) {\n    let str1 = '';\n    let str2 = '';\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i] !== s2[i]) {\n            str1 += s1[i];\n            str2 += s2[i];\n        }\n    }\n    if (str1.length === 0) {\n        return 0;\n    }\n    let ans = str1.length - 1;\n\n    const dfs = (pos, cost, len, str1, str2) => {\n        if (cost > ans) {\n            return;\n        }\n        while (pos < str1.length && str1[pos] === str2[pos]) {\n            pos++;\n        }\n        if (pos === str1.length) {\n            ans = Math.min(ans, cost);\n            return;\n        }  \n        /* 当前状态的交换次数下限大于等于当前的最小交换次数 */      \n        if (cost + minSwap(str1, str2, pos) >= ans) {\n            return;\n        }\n        for (let i = pos + 1; i < str1.length; i++) {\n            if (str1[i] === str2[pos]) {\n                const str1Next = swap(str1, i, pos);\n                dfs(pos + 1, cost + 1, len, str1Next, str2);\n            }\n        }\n    }\n\n    const minSwap = (s1, s2, pos) => {\n        let tot = 0;\n        for (let i = pos; i < s1.length; i++) {\n            tot += s1[i] !== s2[i] ? 1 : 0;\n        }\n        return Math.floor((tot + 1) / 2);\n    }\n\n    const swap = (cur, i, j) => {\n        const arr = [...cur];\n        const c = arr[i];\n        arr[i] = arr[j];\n        arr[j] = c;\n        return arr.join('');\n    }\n    \n    dfs(0, 0, str1.length, str1, str2);\n    return ans;\n}\n```\n\n```go [sol2-Golang]\nfunc kSimilarity(s1, s2 string) int {\n    var s, t []byte\n    for i := range s1 {\n        if s1[i] != s2[i] {\n            s = append(s, s1[i])\n            t = append(t, s2[i])\n        }\n    }\n    n := len(s)\n    if n == 0 {\n        return 0\n    }\n\n    minSwap := func(i int) int {\n        diff := 0\n        for j := i; j < n; j++ {\n            if s[j] != t[j] {\n                diff++\n            }\n        }\n        return (diff + 1) / 2\n    }\n\n    ans := n - 1\n    var dfs func(int, int)\n    dfs = func(i, cost int) {\n        if cost > ans {\n            return\n        }\n        for i < n && s[i] == t[i] {\n            i++\n        }\n        if i == n {\n            ans = min(ans, cost)\n            return\n        }\n        // 当前状态的交换次数下限大于等于当前的最小交换次数\n        if cost+minSwap(i) >= ans {\n            return\n        }\n        for j := i + 1; j < n; j++ {\n            if s[j] == t[i] {\n                s[i], s[j] = s[j], s[i]\n                dfs(i+1, cost+1)\n                s[i], s[j] = s[j], s[i]\n            }\n        }\n    }\n    dfs(0, 0)\n    return ans\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```\n\n**复杂度分析**\n\n该方法时空复杂度分析较为复杂，暂不讨论。\n\n#### 方法三：A* 启发式搜索\n\n本题我们还可以使用 $\\text{A*}$ 启发式搜索，可参考相关 $\\text{A*}$ 算法的基础知识，例如「[Wikipedia - A* search algorithm](https://leetcode.cn/link/?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FA*_search_algorithm)」或 「[oi-wiki - A*](https://leetcode.cn/link/?target=https%3A%2F%2Foi-wiki.org%2Fsearch%2Fastar%2F)」，力扣上也可以参考类似题解「[752. 打开转盘锁](https://leetcode.cn/problems/open-the-lock/solution/da-kai-zhuan-pan-suo-by-leetcode-solutio-l0xo/)」。\n\n设估计函数为 $f(x) = g(x) + h(x)$，其中 $g(x)$ 表示起始状态到达状态 $x$ 的实际交换次数，$h(x)$ 为启发函数，在这里我们设 $h(x)$ 表示状态 $x$ 到达终态可能的最小交换次数，即方法二中提到的当前状态 $x$ 还需要的交换次数的下限 $\\text{minSwap}(x)$，$h(x)$ 满足小于等于实际的最小步数。实际上我们观察到该启发函数本质为一种贪心策略，在同样的状态下尽可能的选择一次交换 $(i,j)$ 使得 $s_1$ 中两个位置 $(i,j)$ 的字符与 $s_2$ 相等，这样才能使得启发函数 $h(x)$ 尽可能的小。\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int minSwap(const string &s1, const string &s2, const int &pos) {\n        int tot = 0;\n        for (int i = pos; i < s1.size(); i++) {\n            tot += s1[i] != s2[i];\n        }\n        return (tot + 1) / 2;\n    }\n\n    int kSimilarity(string s1, string s2) {\n        typedef tuple<int, int, int, string> State;\n        int n = s1.size();\n        priority_queue<State, vector<State>, greater<State>> pq;\n        unordered_set<string> visit;\n        pq.emplace(0, 0, 0, s1);\n        visit.emplace(s1);\n        while (!pq.empty()) {\n            auto [_, cost, pos, cur] = pq.top();\n            pq.pop();\n            if (cur == s2) {\n                return cost;\n            }\n            while (pos < n && cur[pos] == s2[pos]) {\n                pos++;\n            }\n            for (int j = pos + 1; j < n; j++) {\n                if (s2[j] == cur[j]) {\n                    continue;\n                }\n                if (s2[pos] == cur[j]) {\n                    swap(cur[pos], cur[j]);\n                    if (!visit.count(cur)) {\n                        visit.emplace(cur);\n                        pq.emplace(cost + 1 + minSwap(s2, cur, pos + 1), cost + 1, pos + 1, cur);\n                    }\n                    swap(cur[pos], cur[j]);\n                }\n            }\n        } \n        return 0;\n    }\n};\n```\n\n**复杂度分析**\n\n启发式搜索不讨论时空复杂度。\n\n#### 方法四：动态规划\n\n该解法思维难度较大且时间复杂度较高，可作为参考题解，同样的解题思路可以参考「[zj-future04. 门店商品调配](https://leetcode.cn/contest/zj-future2022/problems/NBCXIp/)」。\n\n解法二中提到过长度为 $n$ 两个相似的字符串的最大交换次数为 $n-1$，最小的交换次数为 $\\lfloor \\dfrac{n+1}{2} \\rfloor$。我们可以观察一下什么样的字符串交换次数为 $n-1$，比如长度以下字符串:\n> $\\text{``abcdef\", ``bcdefa\"} \\\\ \\text{``ab\", ``ba\"} \\\\ \\text{``abcd\", ``bcda\"} \\\\$\n\n在上述字符中无法如何交换，每次均只能将一个字符调整到位，因此需要的交换次数为 $n-1$。对于部分字符串需要的交换次数少于 $n-1$，比如下列字符串:\n> $\\text{``abcdef\", ``ecdbfa\"} \\\\ \\text{``acd\", ``cad\"} \\\\ \\text{``abcd\", ``dcba\"} \\\\$\n\n对于字符串 $s = \\text{``abcdef\"}$ 可以拆分为两个分别与字符串 $\\text{``ecdbfa\"}$ 的子串 $\\text{``\\_cdb\\_\\_\", ``e\\_\\_\\_fa\"}$ 相似的字符串 $\\text{p = ``a\\_\\_\\_ef \", q = ``\\_bcd\\_\\_\"}$。设 $\\textit{ks}(s)$ 表示字符串 $s$ 的转换为目标字符串的最小交换次数，则 $\\textit{ks}(s) = \\textit{ks}(p) + \\textit{ks}(q) = 2 + 2$。我们可以看到字符串 $\\text{``abcdef\"}$ 的交换次数也即等于相同位置相似的子串的交换次之和，即 $\\text{ks}(t) = \\text{ks}(p) + \\text{ks}(q)$。设初始值 $\\text{ks}(t) = \\text{len}(t) - 1$，其中 $\\text{len}(t)$ 表示字符串 $t$ 的长度，$\\text{ks}(p) + \\text{ks}(q) = \\text{len}(p) + \\text{len}(q) - 2  = len(t) - 2$。我们可以观察到字符串 $t$ 每进行一次相似子字符串拆分，则其交换次会减 $1$，字符串 $s$ 可拆分为的相似的子串的个数越多，则其交换次数最小。我们设字符串 $s$ 可以被拆分成 $k$ 个相似的子字符串，长度分别为 $C_1,C_2, \\cdots, C_k$，则 $\\text{ks}(s) = \\sum_{i=1}^{k} \\limits (C_i - 1) = \\text{len}(s) - k$，由此只需求出字符串可拆分的最大次数即可求出最小交换步数。\n\n> 字符串相似：即两个字符串中含有的字符和数量完全相等。我们应当将字符串尽可能的拆分成相似的子串，直到不能拆分为止。求字符串的最小交换次数则转换为求该字符串最多的相似子字符串的拆分次数。如果字符串不可拆分，则该字符串的最小交换次数即为字符串的长度减 $1$。\n\n因此我们可以使用动态规划来解决这个问题，令 $\\text{dp}(s)$ 表示字符串 $s$ 最多拆分为相似子字符串 $t$ 的数目，如果 $s$ 不能继续拆分，则令 $dp(s) = 1$。枚举 $s$ 的所有相似的子串 $t$，状态转移方程为 $\\text{dp}(s) = \\max(dp(t) + \\textit{dp}(s - t))$。由于题目中字符的长度串最多为 $20$，为了计算方便使用位图来表示字符串 $s$ 的子串，如果字符串 $t$ 为 $s$ 的子串，则一定满足 $(s \\And t) = t$，对于字符串 $t$ 我们枚举其所有的子集即可。当然可以直接遍历所有子串的子集，则时间复杂度为 $3^n$，在题目给定的测试用例下会超时。此时需要进行减枝以降低时间复杂度，减枝技巧如下：\n\n+ 由于子串中只含有 $6$ 种字符，因此长度大于 $6$ 的字符串则其一定可以拆分为长度小于等于 $6$ 的相似子串，此时字符串中一定含有相同的字符。我们可以将所有长度大于 $6$ 的字符串删选出来，依次尝试将其拆分出一个长度小于等于 $6$ 的子字符串。\n\n+ 通过筛选，只筛选出所有相似的子字符串，对于非相似的字符串直接忽略，因为只有相似的字符串才可以拆分成相似的子串。\n\n+ 对于所有筛选出来的相似的子字符串按照字符的个数进行排序，这样就能保证字符的子串一定排列在前面而保证最优的子状态现行进行计算。对于题目中给定的字符串 $s_1$ 一定是与 $s_2$ 相似的，我们求出 $s_1$ 进行最多的拆分次数即可，最终返回结果即为 $len(s_1) - dp(s1)$。\n\n从图论的角度来分析相似字符串，设相似字符串 $s_1,s_2$，我们用有向图来表示相似字符串，每个字符为有向图中的一个节点，$s_1$ 中的字符指向 $s_2$ 中同一个位置的字符表示一条有向边 $s_1[i] \\rightarrow s_2[i]$，则该有向图一定由多个环组成，且每个节点都在环上。我们进行一次“有效”的字符交换（即将其中一个字符交换到最终位置），等价于把有向图中两条首尾相连的边变成一条新边和被一个节点的自环。我们最终的目标是把 $s_1$ 中的所有字符都变成自环。一个长度为 $k$ 的环则我们需要 $k-1$ 次交换才能把所有的节点都变为自环。设长度为 $n$ 的字符串 $s_1$ 可以拆分为 $m$ 个环，则此时需要的有效交换次数为 $n - m$。因此，求最少的交换次数即等价于 $s_1$ 拆分成环的最大数目。\n\n比如相似字符为：\n\n> $s_1 = \\text{``abcdef\"}, s_2 = \\text{``bcdefa\"}$\n\n将其交换一次后则变为：\n\n> $s_1 = \\text{``fbcdea\"}, s_2 = \\text{``bcdefa\"}$\n\n如下图所示可以看到交换后被拆分为一个新的环和一个字符的自环。\n![img](https://assets.leetcode-cn.com/solution-static/854/1_1.png)\n由于此时字符串只包含 $6$ 种不同的字符，因此长度超过 $6$ 的字符串构成的有向图一定含有入度和出度大于 $1$ 的节点，则此时该有向图一定可以拆分为多个环。\n\n```C++ [sol4-C++]\nclass Solution {\npublic:\n    int kSimilarity(string s1, string s2) {\n        string str1, str2;\n        for (int i = 0; i < s1.size(); i++) {\n            if (s1[i] != s2[i]) {\n                str1.push_back(s1[i]);\n                str2.push_back(s2[i]);\n            }\n        }\n        int n = str1.size();\n        if (n == 0) {\n            return 0;\n        }\n        vector<int> smallCycles;\n        vector<int> largeCycles;\n        for (int i = 1; i < (1 << n); i++) {\n            vector<int> cnt(6);\n            for (int j = 0; j < n; j++) {\n                if (i & (1 << j)) {\n                    cnt[str1[j] - 'a']++;\n                    cnt[str2[j] - 'a']--;\n                }\n            }\n            bool isCycle = true;\n            for (int j = 0; j < 6; j++) {\n                if (cnt[j] != 0) {\n                    isCycle = false;\n                    break;\n                }\n            }\n            if (isCycle) {\n                int size = __builtin_popcount(i);\n                if (size <= 6) {\n                    smallCycles.emplace_back(i);\n                } else {\n                    largeCycles.emplace_back(i);\n                }\n            }\n        }\n        auto cmp = [](const int &a, const int &b)->bool {\n            return __builtin_popcount(a) < __builtin_popcount(b);\n        };\n        sort(smallCycles.begin(), smallCycles.end(), cmp);\n        sort(largeCycles.begin(), largeCycles.end(), cmp);\n        vector<int> dp(1 << n, 1);\n        dp[0] = 0;\n        for (int i = 0; i < smallCycles.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                int x = smallCycles[i], y = smallCycles[j];\n                if ((x & y) == y) {\n                    dp[x] = max(dp[x], dp[y] + dp[x ^ y]);\n                }\n            }\n        }\n        for (auto &x : largeCycles) {\n            for (auto &y : smallCycles) {\n                if ((x & y) == y) {\n                    dp[x] = max(dp[x], dp[y] + dp[x ^ y]);\n                }\n            }\n        }\n        return n - dp[(1 << n) - 1];\n    }\n};\n```\n\n```Java [sol4-Java]\nclass Solution {\n    public int kSimilarity(String s1, String s2) {\n        StringBuilder str1 = new StringBuilder();\n        StringBuilder str2 = new StringBuilder();\n        for (int i = 0; i < s1.length(); i++) {\n            if (s1.charAt(i) != s2.charAt(i)) {\n                str1.append(s1.charAt(i));\n                str2.append(s2.charAt(i));\n            }\n        }\n        int n = str1.length();\n        if (n == 0) {\n            return 0;\n        }\n        List<Integer> smallCycles = new ArrayList<Integer>();\n        List<Integer> largeCycles = new ArrayList<Integer>();\n        for (int i = 1; i < (1 << n); i++) {\n            int[] cnt = new int[6];\n            for (int j = 0; j < n; j++) {\n                if ((i & (1 << j)) != 0) {\n                    cnt[str1.charAt(j) - 'a']++;\n                    cnt[str2.charAt(j) - 'a']--;\n                }\n            }\n            boolean isCycle = true;\n            for (int j = 0; j < 6; j++) {\n                if (cnt[j] != 0) {\n                    isCycle = false;\n                    break;\n                }\n            }\n            if (isCycle) {\n                int size = Integer.bitCount(i);\n                if (size <= 6) {\n                    smallCycles.add(i);\n                } else {\n                    largeCycles.add(i);\n                }\n            }\n        }\n        Collections.sort(smallCycles, (a, b) -> Integer.bitCount(a) - Integer.bitCount(b));\n        Collections.sort(largeCycles, (a, b) -> Integer.bitCount(a) - Integer.bitCount(b));\n        int[] dp = new int[1 << n];\n        Arrays.fill(dp, 1);\n        dp[0] = 0;\n        for (int i = 0; i < smallCycles.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                int x = smallCycles.get(i), y = smallCycles.get(j);\n                if ((x & y) == y) {\n                    dp[x] = Math.max(dp[x], dp[y] + dp[x ^ y]);\n                }\n            }\n        }\n        for (int x : largeCycles) {\n            for (int y : smallCycles) {\n                if ((x & y) == y) {\n                    dp[x] = Math.max(dp[x], dp[y] + dp[x ^ y]);\n                }\n            }\n        }\n        return n - dp[(1 << n) - 1];\n    }\n}\n```\n\n```C [sol4-C]\n#define MAX_STR_LEN 24\n#define MAX_CYCLE_SIZE 15000\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n#define MAX(a, b) ((a) > (b) ? (a) : (b));\n\nstatic inline int cmp(const void *pa, const void *pb) {\n    return __builtin_popcount(*(int *)pa) - __builtin_popcount(*(int *)pb);\n}\n\nint kSimilarity(char * s1, char * s2) {\n    char str1[MAX_STR_LEN], str2[MAX_STR_LEN];\n    int len = strlen(s1), n = 0;\n    for (int i = 0; i < len; i++) {\n        if (s1[i] != s2[i]) {\n            str1[n] = s1[i];\n            str2[n] = s2[i];\n            n++;\n        }\n    }\n    if (n == 0) {\n        return 0;\n    }\n    int *smallCycles = (int *)malloc(sizeof(int) * MAX_CYCLE_SIZE);\n    int *largeCycles = (int *)malloc(sizeof(int) * MAX_CYCLE_SIZE);\n    int smallCyclesSize = 0, largeCyclesSize = 0;\n    int *dp = (int *)malloc(sizeof(int) * (1 << n));\n    for (int i = 1; i < (1 << n); i++) {\n        int cnt[6] = {0};\n        for (int j = 0; j < n; j++) {\n            if (i & (1 << j)) {\n                cnt[str1[j] - 'a']++;\n                cnt[str2[j] - 'a']--;\n            }\n        }\n        bool isCycle = true;\n        for (int j = 0; j < 6; j++) {\n            if (cnt[j] != 0) {\n                isCycle = false;\n                break;\n            }\n        }\n        if (isCycle) {\n            int size = __builtin_popcount(i);\n            dp[i] = 1;\n            if (size <= 6) {\n                smallCycles[smallCyclesSize++] = i;\n            } else {\n                largeCycles[largeCyclesSize++] = i;\n            }\n        }\n    }\n    qsort(smallCycles, smallCyclesSize, sizeof(int), cmp);\n    qsort(largeCycles, largeCyclesSize, sizeof(int), cmp);\n    dp[0] = 0;\n    for (int i = 0; i < smallCyclesSize; i++) {\n        int maskx = smallCycles[i];\n        for (int j = 0; j < i; j++) {\n            int masky = smallCycles[j];\n            if ((maskx & masky) == masky) {\n                dp[maskx] = MAX(dp[maskx], dp[masky] + dp[maskx ^ masky]);\n            }\n        }\n    }\n    for (int i = 0; i < largeCyclesSize; i++) {\n        for (int j = 0; j < smallCyclesSize; j++) {\n            int maskx = largeCycles[i];\n            int masky = smallCycles[j];\n            if ((maskx & masky) == masky) {\n                dp[maskx] = MAX(dp[maskx], dp[masky] + dp[maskx ^ masky]);\n            }\n        }\n    }\n    int ans = n - dp[(1 << n) - 1];\n    free(smallCycles);\n    free(largeCycles);\n    free(dp);\n    return ans;\n}\n```\n\n```JavaScript [sol4-JavaScript]\nvar kSimilarity = function(s1, s2) {\n    let str1 = '';\n    let str2 = '';\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i] !== s2[i]) {\n            str1 += s1[i];\n            str2 += s2[i];\n        }\n    }\n    const n = str1.length;\n    if (n === 0) {\n        return 0;\n    }\n    const smallCycles = [];\n    const largeCycles = [];\n    for (let i = 1; i < (1 << n); i++) {\n        const cnt = new Array(6).fill(0);\n        for (let j = 0; j < n; j++) {\n            if ((i & (1 << j)) !== 0) {\n                cnt[str1[j].charCodeAt() - 'a'.charCodeAt()]++;\n                cnt[str2[j].charCodeAt() - 'a'.charCodeAt()]--;\n            }\n        }\n        let isCycle = true;\n        for (let j = 0; j < 6; j++) {\n            if (cnt[j] !== 0) {\n                isCycle = false;\n                break;\n            }\n        }\n        if (isCycle) {\n            const size = bitCount(i);\n            if (size <= 6) {\n                smallCycles.push(i);\n            } else {\n                largeCycles.push(i);\n            }\n        }\n    }\n    smallCycles.sort((a, b) => bitCount(a) - bitCount(b));\n    largeCycles.sort((a, b) => bitCount(a) - bitCount(b));\n    const dp = new Array(1 << n).fill(1);\n    dp[0] = 0;\n    for (let i = 0; i < smallCycles.length; i++) {\n        for (let j = 0; j < i; j++) {\n            const x = smallCycles[i], y = smallCycles[j];\n            if ((x & y) === y) {\n                dp[x] = Math.max(dp[x], dp[y] + dp[x ^ y]);\n            }\n        }\n    }\n    for (const x of largeCycles) {\n        for (const y of smallCycles) {\n            if ((x & y) === y) {\n                dp[x] = Math.max(dp[x], dp[y] + dp[x ^ y]);\n            }\n        }\n    }\n    return n - dp[(1 << n) - 1];\n}\n\nconst bitCount = (num) => {\n    return num.toString(2).split('0').join('').length;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(2^n \\times |\\Sigma| + 3^n)$，其中 $n$ 为字符串的长度，$|\\Sigma|$ 表示字符集，在此题中字符集为 $\\text{`a',`b',`c',`d',`e',`f'}$，本题中 $|\\Sigma| = 6$。需要遍历并检测所有可能成环的子串，需要的时间为 $O(2^n \\times |\\Sigma|)$，检测每个环的最小交换次数需要的时间上限为 $O(3^n)$，因此时间复杂度为 $O(2^n \\times |\\Sigma| + 3^n)$。\n\n- 空间复杂度：$O(2^n)$，其中 $n$ 为字符串的长度。需要记录字符串所有的子串的状态，因此需要的存储空间为 $2^n$。"
}