{
	"titleSlug": "binary-tree-postorder-traversal",
	"slug": "er-cha-shu-de-hou-xu-bian-li-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/er-cha-shu-de-hou-xu-bian-li-by-leetcode-solution/",
	"content": "#### 方法一：递归\n\n**思路与算法**\n\n首先我们需要了解什么是二叉树的后序遍历：按照访问左子树——右子树——根节点的方式遍历这棵树，而在访问左子树或者右子树的时候，我们按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，我们可以直接用递归函数来模拟这一过程。\n\n定义 `postorder(root)` 表示当前遍历到 `root` 节点的答案。按照定义，我们只要递归调用 `postorder(root->left)` 来遍历 `root` 节点的左子树，然后递归调用 `postorder(root->right)` 来遍历 `root` 节点的右子树，最后将 `root` 节点的值加入答案即可，递归终止的条件为碰到空节点。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void postorder(TreeNode *root, vector<int> &res) {\n        if (root == nullptr) {\n            return;\n        }\n        postorder(root->left, res);\n        postorder(root->right, res);\n        res.push_back(root->val);\n    }\n\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> res;\n        postorder(root, res);\n        return res;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<Integer>();\n        postorder(root, res);\n        return res;\n    }\n\n    public void postorder(TreeNode root, List<Integer> res) {\n        if (root == null) {\n            return;\n        }\n        postorder(root.left, res);\n        postorder(root.right, res);\n        res.add(root.val);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def postorderTraversal(self, root: TreeNode) -> List[int]:\n        def postorder(root: TreeNode):\n            if not root:\n                return\n            postorder(root.left)\n            postorder(root.right)\n            res.append(root.val)\n        \n        res = list()\n        postorder(root)\n        return res\n```\n\n```Golang [sol1-Golang]\nfunc postorderTraversal(root *TreeNode) (res []int) {\n    var postorder func(*TreeNode)\n    postorder = func(node *TreeNode) {\n        if node == nil {\n            return\n        }\n        postorder(node.Left)\n        postorder(node.Right)\n        res = append(res, node.Val)\n    }\n    postorder(root)\n    return\n}\n```\n\n```C [sol1-C]\nvoid postorder(struct TreeNode *root, int *res, int *resSize) {\n    if (root == NULL) {\n        return;\n    }\n    postorder(root->left, res, resSize);\n    postorder(root->right, res, resSize);\n    res[(*resSize)++] = root->val;\n}\n\nint *postorderTraversal(struct TreeNode *root, int *returnSize) {\n    int *res = malloc(sizeof(int) * 2001);\n    *returnSize = 0;\n    postorder(root, res, returnSize);\n    return res;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉搜索树的节点数。每一个节点恰好被遍历一次。\n  \n- 空间复杂度：$O(n)$，为递归过程中栈的开销，平均情况下为 $O(\\log n)$，最坏情况下树呈现链状，为 $O(n)$。\n\n#### 方法二：迭代\n\n**思路与算法**\n\n我们也可以用迭代的方式实现方法一的递归函数，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来，其余的实现与细节都相同，具体可以参考下面的代码。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/145/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/145/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/145/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/145/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/145/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/145/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/145/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/145/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/145/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/145/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/145/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/145/12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/145/13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/145/14.png),![ppt15](https://assets.leetcode-cn.com/solution-static/145/15.png),![ppt16](https://assets.leetcode-cn.com/solution-static/145/16.png),![ppt17](https://assets.leetcode-cn.com/solution-static/145/17.png),![ppt18](https://assets.leetcode-cn.com/solution-static/145/18.png),![ppt19](https://assets.leetcode-cn.com/solution-static/145/19.png)>\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> res;\n        if (root == nullptr) {\n            return res;\n        }\n\n        stack<TreeNode *> stk;\n        TreeNode *prev = nullptr;\n        while (root != nullptr || !stk.empty()) {\n            while (root != nullptr) {\n                stk.emplace(root);\n                root = root->left;\n            }\n            root = stk.top();\n            stk.pop();\n            if (root->right == nullptr || root->right == prev) {\n                res.emplace_back(root->val);\n                prev = root;\n                root = nullptr;\n            } else {\n                stk.emplace(root);\n                root = root->right;\n            }\n        }\n        return res;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (root == null) {\n            return res;\n        }\n\n        Deque<TreeNode> stack = new LinkedList<TreeNode>();\n        TreeNode prev = null;\n        while (root != null || !stack.isEmpty()) {\n            while (root != null) {\n                stack.push(root);\n                root = root.left;\n            }\n            root = stack.pop();\n            if (root.right == null || root.right == prev) {\n                res.add(root.val);\n                prev = root;\n                root = null;\n            } else {\n                stack.push(root);\n                root = root.right;\n            }\n        }\n        return res;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def postorderTraversal(self, root: TreeNode) -> List[int]:\n        if not root:\n            return list()\n        \n        res = list()\n        stack = list()\n        prev = None\n\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            if not root.right or root.right == prev:\n                res.append(root.val)\n                prev = root\n                root = None\n            else:\n                stack.append(root)\n                root = root.right\n        \n        return res\n```\n\n```Golang [sol2-Golang]\nfunc postorderTraversal(root *TreeNode) (res []int) {\n    stk := []*TreeNode{}\n    var prev *TreeNode\n    for root != nil || len(stk) > 0 {\n        for root != nil {\n            stk = append(stk, root)\n            root = root.Left\n        }\n        root = stk[len(stk)-1]\n        stk = stk[:len(stk)-1]\n        if root.Right == nil || root.Right == prev {\n            res = append(res, root.Val)\n            prev = root\n            root = nil\n        } else {\n            stk = append(stk, root)\n            root = root.Right\n        }\n    }\n    return\n}\n```\n\n```C [sol2-C]\nint *postorderTraversal(struct TreeNode *root, int *returnSize) {\n    int *res = malloc(sizeof(int) * 2001);\n    *returnSize = 0;\n    if (root == NULL) {\n        return res;\n    }\n    struct TreeNode **stk = malloc(sizeof(struct TreeNode *) * 2001);\n    int top = 0;\n    struct TreeNode *prev = NULL;\n    while (root != NULL || top > 0) {\n        while (root != NULL) {\n            stk[top++] = root;\n            root = root->left;\n        }\n        root = stk[--top];\n        if (root->right == NULL || root->right == prev) {\n            res[(*returnSize)++] = root->val;\n            prev = root;\n            root = NULL;\n        } else {\n            stk[top++] = root;\n            root = root->right;\n        }\n    }\n    return res;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉搜索树的节点数。每一个节点恰好被遍历一次。\n  \n- 空间复杂度：$O(n)$，为迭代过程中显式栈的开销，平均情况下为 $O(\\log n)$，最坏情况下树呈现链状，为 $O(n)$。\n\n#### 方法三：Morris 遍历\n\n**思路与算法**\n\n有一种巧妙的方法可以在线性时间内，只占用常数空间来实现后序遍历。这种方法由 J. H. Morris 在 1979 年的论文「Traversing Binary Trees Simply and Cheaply」中首次提出，因此被称为 Morris 遍历。\n\nMorris 遍历的核心思想是利用树的大量空闲指针，实现空间开销的极限缩减。其后序遍历规则总结如下：\n\n1. 新建临时节点，令该节点为 `root`；\n\n2. 如果当前节点的左子节点为空，则遍历当前节点的右子节点；\n\n3. 如果当前节点的左子节点不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点；\n   \n   - 如果前驱节点的右子节点为空，将前驱节点的右子节点设置为当前节点，当前节点更新为当前节点的左子节点。\n   \n   - 如果前驱节点的右子节点为当前节点，将它的右子节点重新设为空。倒序输出从当前节点的左子节点到该前驱节点这条路径上的所有节点。当前节点更新为当前节点的右子节点。\n\n4. 重复步骤 2 和步骤 3，直到遍历结束。\n\n这样我们利用 Morris 遍历的方法，后序遍历该二叉搜索树，即可实现线性时间与常数空间的遍历。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    void addPath(vector<int> &vec, TreeNode *node) {\n        int count = 0;\n        while (node != nullptr) {\n            ++count;\n            vec.emplace_back(node->val);\n            node = node->right;\n        }\n        reverse(vec.end() - count, vec.end());\n    }\n\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> res;\n        if (root == nullptr) {\n            return res;\n        }\n\n        TreeNode *p1 = root, *p2 = nullptr;\n\n        while (p1 != nullptr) {\n            p2 = p1->left;\n            if (p2 != nullptr) {\n                while (p2->right != nullptr && p2->right != p1) {\n                    p2 = p2->right;\n                }\n                if (p2->right == nullptr) {\n                    p2->right = p1;\n                    p1 = p1->left;\n                    continue;\n                } else {\n                    p2->right = nullptr;\n                    addPath(res, p1->left);\n                }\n            }\n            p1 = p1->right;\n        }\n        addPath(res, root);\n        return res;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<Integer>();\n        if (root == null) {\n            return res;\n        }\n\n        TreeNode p1 = root, p2 = null;\n\n        while (p1 != null) {\n            p2 = p1.left;\n            if (p2 != null) {\n                while (p2.right != null && p2.right != p1) {\n                    p2 = p2.right;\n                }\n                if (p2.right == null) {\n                    p2.right = p1;\n                    p1 = p1.left;\n                    continue;\n                } else {\n                    p2.right = null;\n                    addPath(res, p1.left);\n                }\n            }\n            p1 = p1.right;\n        }\n        addPath(res, root);\n        return res;\n    }\n\n    public void addPath(List<Integer> res, TreeNode node) {\n        int count = 0;\n        while (node != null) {\n            ++count;\n            res.add(node.val);\n            node = node.right;\n        }\n        int left = res.size() - count, right = res.size() - 1;\n        while (left < right) {\n            int temp = res.get(left);\n            res.set(left, res.get(right));\n            res.set(right, temp);\n            left++;\n            right--;\n        }\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def postorderTraversal(self, root: TreeNode) -> List[int]:\n        def addPath(node: TreeNode):\n            count = 0\n            while node:\n                count += 1\n                res.append(node.val)\n                node = node.right\n            i, j = len(res) - count, len(res) - 1\n            while i < j:\n                res[i], res[j] = res[j], res[i]\n                i += 1\n                j -= 1\n        \n        if not root:\n            return list()\n        \n        res = list()\n        p1 = root\n\n        while p1:\n            p2 = p1.left\n            if p2:\n                while p2.right and p2.right != p1:\n                    p2 = p2.right\n                if not p2.right:\n                    p2.right = p1\n                    p1 = p1.left\n                    continue\n                else:\n                    p2.right = None\n                    addPath(p1.left)\n            p1 = p1.right\n        \n        addPath(root)\n        return res\n```\n\n```Golang [sol3-Golang]\nfunc reverse(a []int) {\n    for i, n := 0, len(a); i < n/2; i++ {\n        a[i], a[n-1-i] = a[n-1-i], a[i]\n    }\n}\n\nfunc postorderTraversal(root *TreeNode) (res []int) {\n    addPath := func(node *TreeNode) {\n        resSize := len(res)\n        for ; node != nil; node = node.Right {\n            res = append(res, node.Val)\n        }\n        reverse(res[resSize:])\n    }\n\n    p1 := root\n    for p1 != nil {\n        if p2 := p1.Left; p2 != nil {\n            for p2.Right != nil && p2.Right != p1 {\n                p2 = p2.Right\n            }\n            if p2.Right == nil {\n                p2.Right = p1\n                p1 = p1.Left\n                continue\n            }\n            p2.Right = nil\n            addPath(p1.Left)\n        }\n        p1 = p1.Right\n    }\n    addPath(root)\n    return\n}\n```\n\n```C [sol3-C]\nvoid addPath(int *vec, int *vecSize, struct TreeNode *node) {\n    int count = 0;\n    while (node != NULL) {\n        ++count;\n        vec[(*vecSize)++] = node->val;\n        node = node->right;\n    }\n    for (int i = (*vecSize) - count, j = (*vecSize) - 1; i < j; ++i, --j) {\n        int t = vec[i];\n        vec[i] = vec[j];\n        vec[j] = t;\n    }\n}\n\nint *postorderTraversal(struct TreeNode *root, int *returnSize) {\n    int *res = malloc(sizeof(int) * 2001);\n    *returnSize = 0;\n    if (root == NULL) {\n        return res;\n    }\n\n    struct TreeNode *p1 = root, *p2 = NULL;\n\n    while (p1 != NULL) {\n        p2 = p1->left;\n        if (p2 != NULL) {\n            while (p2->right != NULL && p2->right != p1) {\n                p2 = p2->right;\n            }\n            if (p2->right == NULL) {\n                p2->right = p1;\n                p1 = p1->left;\n                continue;\n            } else {\n                p2->right = NULL;\n                addPath(res, returnSize, p1->left);\n            }\n        }\n        p1 = p1->right;\n    }\n    addPath(res, returnSize, root);\n    return res;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树的节点数。没有左子树的节点只被访问一次，有左子树的节点被访问两次。\n  \n- 空间复杂度：$O(1)$。只操作已经存在的指针（树的空闲指针），因此只需要常数的额外空间。"
}