{
	"titleSlug": "robot-return-to-origin",
	"slug": "ji-qi-ren-neng-fou-fan-hui-yuan-dian-by-leetcode-s",
	"url": "https://leetcode-cn.com/problems/robot-return-to-origin/solution/ji-qi-ren-neng-fou-fan-hui-yuan-dian-by-leetcode-s/",
	"content": "#### 方法一： 模拟\n\n**思路与算法**\n\n我们只需按指令模拟机器人移动的坐标即可。起始时机器人的坐标为 $(0,0)$，在遍历完所有指令并对机器人进行移动之后，判断机器人的坐标是否为 $(0,0)$ 即可。\n\n具体来说，我们用两个变量 $x$ 和 $y$ 来表示机器人当前所在的坐标为 $(x,y)$，起始时 $x=0$，$y=0$。接下来我们遍历指令并更新机器人的坐标：\n\n- 如果指令是 $U$，则令 $y=y-1$\n- 如果指令是 $D$，则令 $y=y+1$\n- 如果指令是 $L$，则令 $x=x-1$\n- 如果指令是 $R$，则令 $x=x+1$\n\n最后判断 $(x,y)$ 是否为 $(0,0)$ 即可。\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean judgeCircle(String moves) {\n        int x = 0, y = 0;\n        int length = moves.length();\n        for (int i = 0; i < length; i++) {\n            char move = moves.charAt(i);\n            if (move == 'U') {\n                y--;\n            } else if (move == 'D') {\n                y++;\n            } else if (move == 'L') {\n                x--;\n            } else if (move == 'R') {\n                x++;\n            }\n        }\n        return x == 0 && y == 0;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool judgeCircle(string moves) {\n        int x = 0, y = 0;\n        for (const auto& move: moves) {\n            if (move == 'U') {\n                y--;\n            }\n            else if (move == 'D') {\n                y++;\n            }\n            else if (move == 'L') {\n                x--;\n            }\n            else if (move == 'R') {\n                x++;\n            }\n        }\n        return x == 0 && y == 0;\n    }\n};\n```\n\n```Python [sol1-Python]\nclass Solution(object):\n    def judgeCircle(self, moves):\n        x = y = 0\n        for move in moves:\n            if move == 'U': y -= 1\n            elif move == 'D': y += 1\n            elif move == 'L': x -= 1\n            elif move == 'R': x += 1\n\n        return x == y == 0\n```\n\n```C [sol1-C]\nbool judgeCircle(char* moves) {\n    int n = strlen(moves), x = 0, y = 0;\n    for (int i = 0; i < n; i++) {\n        if (moves[i] == 'U') {\n            y--;\n        } else if (moves[i] == 'D') {\n            y++;\n        } else if (moves[i] == 'L') {\n            x--;\n        } else if (moves[i] == 'R') {\n            x++;\n        }\n    }\n    return x == 0 && y == 0;\n}\n```\n\n```golang [sol1-Golang]\nfunc judgeCircle(moves string) bool {\n    x, y := 0, 0\n    length := len(moves)\n    for i := 0; i < length; i++ {\n        switch moves[i] {\n        case 'U':\n            y--\n        case 'D':\n            y++\n        case 'L':\n            x--\n        case 'R':\n            x++\n        }\n    }\n    return x == 0 && y == 0\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(N)$，其中 $N$ 表示 $\\textit{moves}$ 指令串的长度。我们只需要遍历一遍字符串即可。\n\n* 空间复杂度： $O(1)$。我们只需要常数的空间来存放若干变量。"
}