{
	"titleSlug": "ones-and-zeroes",
	"slug": "yi-he-ling-by-leetcode-solution-u2z2",
	"url": "https://leetcode-cn.com/problems/ones-and-zeroes/solution/yi-he-ling-by-leetcode-solution-u2z2/",
	"content": "#### 方法一：动态规划\n\n这道题和经典的背包问题非常相似，但是和经典的背包问题只有一种容量不同，这道题有两种容量，即选取的字符串子集中的 $0$ 和 $1$ 的数量上限。\n\n经典的背包问题可以使用二维动态规划求解，两个维度分别是物品和容量。这道题有两种容量，因此需要使用三维动态规划求解，三个维度分别是字符串、$0$ 的容量和 $1$ 的容量。\n\n定义三维数组 $\\textit{dp}$，其中 $\\textit{dp}[i][j][k]$ 表示在前 $i$ 个字符串中，使用 $j$ 个 $0$ 和 $k$ 个 $1$ 的情况下最多可以得到的字符串数量。假设数组 $\\textit{str}$ 的长度为 $l$，则最终答案为 $\\textit{dp}[l][m][n]$。\n\n当没有任何字符串可以使用时，可以得到的字符串数量只能是 $0$，因此动态规划的边界条件是：当 $i=0$ 时，对任意 $0 \\le j \\le m$ 和 $0 \\le k \\le n$，都有 $\\textit{dp}[i][j][k]=0$。\n\n当 $1 \\le i \\le l$ 时，对于 $\\textit{strs}$ 中的第 $i$ 个字符串（计数从 $1$ 开始），首先遍历该字符串得到其中的 $0$ 和 $1$ 的数量，分别记为 $\\textit{zeros}$ 和 $\\textit{ones}$，然后对于 $0 \\le j \\le m$ 和 $0 \\le k \\le n$，计算 $\\textit{dp}[i][j][k]$ 的值。\n\n当 $0$ 和 $1$ 的容量分别是 $j$ 和 $k$ 时，考虑以下两种情况：\n\n- 如果 $j < \\textit{zeros}$ 或 $k < \\textit{ones}$，则不能选第 $i$ 个字符串，此时有 $\\textit{dp}[i][j][k] = \\textit{dp}[i - 1][j][k]$；\n\n- 如果 $j \\ge \\textit{zeros}$ 且 $k \\ge \\textit{ones}$，则如果不选第 $i$ 个字符串，有 $\\textit{dp}[i][j][k] = \\textit{dp}[i - 1][j][k]$，如果选第 $i$ 个字符串，有 $\\textit{dp}[i][j][k] = \\textit{dp}[i - 1][j - \\textit{zeros}][k - \\textit{ones}] + 1$，$\\textit{dp}[i][j][k]$ 的值应取上面两项中的最大值。\n\n因此状态转移方程如下：\n\n$$\n\\textit{dp}[i][j][k]=\\begin{cases}\n\\textit{dp}[i - 1][j][k], & j<\\textit{zeros} ~~ | ~~ k<\\textit{ones} \\\\\n\\max(\\textit{dp}[i - 1][j][k], \\textit{dp}[i - 1][j - \\textit{zeros}][k - \\textit{ones}] + 1), & j \\ge \\textit{zeros} ~ \\& ~ k \\ge \\textit{ones}\n\\end{cases}\n$$\n\n最终得到 $\\textit{dp}[l][m][n]$ 的值即为答案。\n\n由此可以得到空间复杂度为 $O(lmn)$ 的实现。\n\n```Java [sol1-Java]\nclass Solution {\n    public int findMaxForm(String[] strs, int m, int n) {\n        int length = strs.length;\n        int[][][] dp = new int[length + 1][m + 1][n + 1];\n        for (int i = 1; i <= length; i++) {\n            int[] zerosOnes = getZerosOnes(strs[i - 1]);\n            int zeros = zerosOnes[0], ones = zerosOnes[1];\n            for (int j = 0; j <= m; j++) {\n                for (int k = 0; k <= n; k++) {\n                    dp[i][j][k] = dp[i - 1][j][k];\n                    if (j >= zeros && k >= ones) {\n                        dp[i][j][k] = Math.max(dp[i][j][k], dp[i - 1][j - zeros][k - ones] + 1);\n                    }\n                }\n            }\n        }\n        return dp[length][m][n];\n    }\n\n    public int[] getZerosOnes(String str) {\n        int[] zerosOnes = new int[2];\n        int length = str.length();\n        for (int i = 0; i < length; i++) {\n            zerosOnes[str.charAt(i) - '0']++;\n        }\n        return zerosOnes;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int FindMaxForm(string[] strs, int m, int n) {\n        int length = strs.Length;\n        int[,,] dp = new int[length + 1, m + 1, n + 1];\n        for (int i = 1; i <= length; i++) {\n            int[] zerosOnes = GetZerosOnes(strs[i - 1]);\n            int zeros = zerosOnes[0], ones = zerosOnes[1];\n            for (int j = 0; j <= m; j++) {\n                for (int k = 0; k <= n; k++) {\n                    dp[i, j, k] = dp[i - 1, j, k];\n                    if (j >= zeros && k >= ones) {\n                        dp[i, j, k] = Math.Max(dp[i, j, k], dp[i - 1, j - zeros, k - ones] + 1);\n                    }\n                }\n            }\n        }\n        return dp[length, m, n];\n    }\n\n    public int[] GetZerosOnes(string str) {\n        int[] zerosOnes = new int[2];\n        int length = str.Length;\n        for (int i = 0; i < length; i++) {\n            zerosOnes[str[i] - '0']++;\n        }\n        return zerosOnes;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findMaxForm = function(strs, m, n) {\n    const length = strs.length;\n    const dp = new Array(length + 1).fill(0).map(() => new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0)));\n    for (let i = 1; i <= length; i++) {\n        const zerosOnes = getZerosOnes(strs[i - 1]);\n        let zeros = zerosOnes[0], ones = zerosOnes[1];\n        for (let j = 0; j <= m; j++) {\n            for (let k = 0; k <= n; k++) {\n                dp[i][j][k] = dp[i - 1][j][k];\n                if (j >= zeros && k >= ones) {\n                    dp[i][j][k] = Math.max(dp[i][j][k], dp[i - 1][j - zeros][k - ones] + 1);\n                }\n            }\n        }\n    }\n    return dp[length][m][n];\n};\n\nconst getZerosOnes = (str) => {\n    const zerosOnes = new Array(2).fill(0);\n    const length = str.length;\n    for (let i = 0; i < length; i++) {\n        zerosOnes[str[i].charCodeAt() - '0'.charCodeAt()]++;\n    }\n    return zerosOnes;\n\n}\n```\n\n```go [sol1-Golang]\nfunc findMaxForm(strs []string, m, n int) int {\n    length := len(strs)\n    dp := make([][][]int, length+1)\n    for i := range dp {\n        dp[i] = make([][]int, m+1)\n        for j := range dp[i] {\n            dp[i][j] = make([]int, n+1)\n        }\n    }\n    for i, s := range strs {\n        zeros := strings.Count(s, \"0\")\n        ones := len(s) - zeros\n        for j := 0; j <= m; j++ {\n            for k := 0; k <= n; k++ {\n                dp[i+1][j][k] = dp[i][j][k]\n                if j >= zeros && k >= ones {\n                    dp[i+1][j][k] = max(dp[i+1][j][k], dp[i][j-zeros][k-ones]+1)\n                }\n            }\n        }\n    }\n    return dp[length][m][n]\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> getZerosOnes(string& str) {\n        vector<int> zerosOnes(2);\n        int length = str.length();\n        for (int i = 0; i < length; i++) {\n            zerosOnes[str[i] - '0']++;\n        }\n        return zerosOnes;\n    }\n\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        int length = strs.size();\n        vector<vector<vector<int>>> dp(length + 1, vector<vector<int>>(m + 1, vector<int>(n + 1)));\n        for (int i = 1; i <= length; i++) {\n            vector<int>&& zerosOnes = getZerosOnes(strs[i - 1]);\n            int zeros = zerosOnes[0], ones = zerosOnes[1];\n            for (int j = 0; j <= m; j++) {\n                for (int k = 0; k <= n; k++) {\n                    dp[i][j][k] = dp[i - 1][j][k];\n                    if (j >= zeros && k >= ones) {\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - zeros][k - ones] + 1);\n                    }\n                }\n            }\n        }\n        return dp[length][m][n];\n    }\n};\n```\n\n```C [sol1-C]\nvoid getZerosOnes(int* zerosOnes, char* str) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        zerosOnes[str[i] - '0']++;\n    }\n}\n\nint findMaxForm(char** strs, int strsSize, int m, int n) {\n    int length = strsSize;\n    int dp[length + 1][m + 1][n + 1];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 1; i <= length; i++) {\n        int zerosOnes[2];\n        memset(zerosOnes, 0, sizeof(zerosOnes));\n        getZerosOnes(zerosOnes, strs[i - 1]);\n        int zeros = zerosOnes[0], ones = zerosOnes[1];\n        for (int j = 0; j <= m; j++) {\n            for (int k = 0; k <= n; k++) {\n                dp[i][j][k] = dp[i - 1][j][k];\n                if (j >= zeros && k >= ones) {\n                    dp[i][j][k] = fmax(dp[i][j][k], dp[i - 1][j - zeros][k - ones] + 1);\n                }\n            }\n        }\n    }\n    return dp[length][m][n];\n}\n```\n\n由于 $\\textit{dp}[i][][]$ 的每个元素值的计算只和 $\\textit{dp}[i-1][][]$ 的元素值有关，因此可以使用滚动数组的方式，去掉 $\\textit{dp}$ 的第一个维度，将空间复杂度优化到 $O(mn)$。\n\n实现时，内层循环需采用倒序遍历的方式，这种方式保证转移来的是 $\\textit{dp}[i-1][][]$ 中的元素值。\n\n```Java [sol2-Java]\nclass Solution {\n    public int findMaxForm(String[] strs, int m, int n) {\n        int[][] dp = new int[m + 1][n + 1];\n        int length = strs.length;\n        for (int i = 0; i < length; i++) {\n            int[] zerosOnes = getZerosOnes(strs[i]);\n            int zeros = zerosOnes[0], ones = zerosOnes[1];\n            for (int j = m; j >= zeros; j--) {\n                for (int k = n; k >= ones; k--) {\n                    dp[j][k] = Math.max(dp[j][k], dp[j - zeros][k - ones] + 1);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n\n    public int[] getZerosOnes(String str) {\n        int[] zerosOnes = new int[2];\n        int length = str.length();\n        for (int i = 0; i < length; i++) {\n            zerosOnes[str.charAt(i) - '0']++;\n        }\n        return zerosOnes;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int FindMaxForm(string[] strs, int m, int n) {\n        int[,] dp = new int[m + 1, n + 1];\n        int length = strs.Length;\n        for (int i = 0; i < length; i++) {\n            int[] zerosOnes = GetZerosOnes(strs[i]);\n            int zeros = zerosOnes[0], ones = zerosOnes[1];\n            for (int j = m; j >= zeros; j--) {\n                for (int k = n; k >= ones; k--) {\n                    dp[j, k] = Math.Max(dp[j, k], dp[j - zeros, k - ones] + 1);\n                }\n            }\n        }\n        return dp[m, n];\n    }\n\n    public int[] GetZerosOnes(string str) {\n        int[] zerosOnes = new int[2];\n        int length = str.Length;\n        for (int i = 0; i < length; i++) {\n            zerosOnes[str[i] - '0']++;\n        }\n        return zerosOnes;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findMaxForm = function(strs, m, n) {\n    const dp = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0));\n    const length = strs.length;\n    for (let i = 0; i < length; i++) {\n        const zerosOnes = getZerosOnes(strs[i]);\n        const zeros = zerosOnes[0], ones = zerosOnes[1];\n        for (let j = m; j >= zeros; j--) {\n            for (let k = n; k >= ones; k--) {\n                dp[j][k] = Math.max(dp[j][k], dp[j - zeros][k - ones] + 1);\n            }\n        }\n    }\n    return dp[m][n];\n};\n\nconst getZerosOnes = (str) => {\n    const zerosOnes = new Array(2).fill(0);\n    const length = str.length;\n    for (let i = 0; i < length; i++) {\n        zerosOnes[str[i].charCodeAt() - '0'.charCodeAt()]++;\n    }\n    return zerosOnes;\n}\n```\n\n```go [sol2-Golang]\nfunc findMaxForm(strs []string, m, n int) int {\n    dp := make([][]int, m+1)\n    for i := range dp {\n        dp[i] = make([]int, n+1)\n    }\n    for _, s := range strs {\n        zeros := strings.Count(s, \"0\")\n        ones := len(s) - zeros\n        for j := m; j >= zeros; j-- {\n            for k := n; k >= ones; k-- {\n                dp[j][k] = max(dp[j][k], dp[j-zeros][k-ones]+1)\n            }\n        }\n    }\n    return dp[m][n]\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> getZerosOnes(string& str) {\n        vector<int> zerosOnes(2);\n        int length = str.length();\n        for (int i = 0; i < length; i++) {\n            zerosOnes[str[i] - '0']++;\n        }\n        return zerosOnes;\n    }\n\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        int length = strs.size();\n        vector<vector<int>> dp(m + 1, vector<int>(n + 1));\n        for (int i = 0; i < length; i++) {\n            vector<int>&& zerosOnes = getZerosOnes(strs[i]);\n            int zeros = zerosOnes[0], ones = zerosOnes[1];\n            for (int j = m; j >= zeros; j--) {\n                for (int k = n; k >= ones; k--) {\n                    dp[j][k] = max(dp[j][k], dp[j - zeros][k - ones] + 1);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n};\n```\n\n```C [sol2-C]\nvoid getZerosOnes(int* zerosOnes, char* str) {\n    int length = strlen(str);\n    for (int i = 0; i < length; i++) {\n        zerosOnes[str[i] - '0']++;\n    }\n}\n\nint findMaxForm(char** strs, int strsSize, int m, int n) {\n    int length = strsSize;\n    int dp[m + 1][n + 1];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < length; i++) {\n        int zerosOnes[2];\n        memset(zerosOnes, 0, sizeof(zerosOnes));\n        getZerosOnes(zerosOnes, strs[i]);\n        int zeros = zerosOnes[0], ones = zerosOnes[1];\n        for (int j = m; j >= zeros; j--) {\n            for (int k = n; k >= ones; k--) {\n                dp[j][k] = fmax(dp[j][k], dp[j - zeros][k - ones] + 1);\n            }\n        }\n    }\n    return dp[m][n];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(lmn + L)$，其中 $l$ 是数组 $\\textit{strs}$ 的长度，$m$ 和 $n$ 分别是 $0$ 和 $1$ 的容量，$L$ 是数组 $\\textit{strs}$ 中的所有字符串的长度之和。\n   动态规划需要计算的状态总数是 $O(lmn)$，每个状态的值需要 $O(1)$ 的时间计算。\n   对于数组 $\\textit{strs}$ 中的每个字符串，都要遍历字符串得到其中的 $0$ 和 $1$ 的数量，因此需要 $O(L)$ 的时间遍历所有的字符串。\n   总时间复杂度是 $O(lmn + L)$。\n\n- 空间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是 $0$ 和 $1$ 的容量。使用空间优化的实现，需要创建 $m+1$ 行 $n+1$ 列的二维数组 $\\textit{dp}$。"
}