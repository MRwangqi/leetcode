{
	"titleSlug": "VabMRr",
	"slug": "zi-fu-chuan-zhong-de-suo-you-bian-wei-ci-euod",
	"url": "https://leetcode-cn.com/problems/VabMRr/solution/zi-fu-chuan-zhong-de-suo-you-bian-wei-ci-euod/",
	"content": "#### 方法一：滑动窗口\n\n**思路**\n\n根据题目要求，我们需要在字符串 $s$ 寻找字符串 $p$ 的变位词。因为字符串 $p$ 的变位词的长度一定与字符串 $p$ 的长度相同，所以我们可以在字符串 $s$ 中构造一个长度为与字符串 $p$ 的长度相同的滑动窗口，并在滑动中维护窗口中每种字母的数量；当窗口中每种字母的数量与字符串 $p$ 中每种字母的数量相同时，则说明当前窗口为字符串 $p$ 的变位词。\n\n**算法**\n\n在算法的实现中，我们可以使用数组来存储字符串 $p$ 和滑动窗口中每种字母的数量。\n\n**细节**\n\n当字符串 $s$ 的长度小于字符串 $p$ 的长度时，字符串 $s$ 中一定不存在字符串 $p$ 的变位词。但是因为字符串 $s$ 中无法构造长度与字符串 $p$ 的长度相同的窗口，所以这种情况需要单独处理。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        s_len, p_len = len(s), len(p)\n        \n        if s_len < p_len:\n            return []\n\n        ans = []\n        s_count = [0] * 26\n        p_count = [0] * 26\n        for i in range(p_len):\n            s_count[ord(s[i]) - 97] += 1\n            p_count[ord(p[i]) - 97] += 1\n\n        if s_count == p_count:\n            ans.append(0)\n\n        for i in range(s_len - p_len):\n            s_count[ord(s[i]) - 97] -= 1\n            s_count[ord(s[i + p_len]) - 97] += 1\n            \n            if s_count == p_count:\n                ans.append(i + 1)\n\n        return ans\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        int sLen = s.length(), pLen = p.length();\n\n        if (sLen < pLen) {\n            return new ArrayList<Integer>();\n        }\n\n        List<Integer> ans = new ArrayList<Integer>();\n        int[] sCount = new int[26];\n        int[] pCount = new int[26];\n        for (int i = 0; i < pLen; ++i) {\n            ++sCount[s.charAt(i) - 'a'];\n            ++pCount[p.charAt(i) - 'a'];\n        }\n\n        if (Arrays.equals(sCount, pCount)) {\n            ans.add(0);\n        }\n\n        for (int i = 0; i < sLen - pLen; ++i) {\n            --sCount[s.charAt(i) - 'a'];\n            ++sCount[s.charAt(i + pLen) - 'a'];\n\n            if (Arrays.equals(sCount, pCount)) {\n                ans.add(i + 1);\n            }\n        }\n\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<int> FindAnagrams(string s, string p) {\n        int sLen = s.Length, pLen = p.Length;\n\n        if (sLen < pLen) {\n            return new List<int>();\n        }\n\n        IList<int> ans = new List<int>();\n        int[] sCount = new int[26];\n        int[] pCount = new int[26];\n        for (int i = 0; i < pLen; ++i) {\n            ++sCount[s[i] - 'a'];\n            ++pCount[p[i] - 'a'];\n        }\n\n        if (Enumerable.SequenceEqual(sCount, pCount)) {\n            ans.Add(0);\n        }\n\n        for (int i = 0; i < sLen - pLen; ++i) {\n            --sCount[s[i] - 'a'];\n            ++sCount[s[i + pLen] - 'a'];\n\n            if (Enumerable.SequenceEqual(sCount, pCount)) {\n                ans.Add(i + 1);\n            }\n        }\n\n        return ans;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        int sLen = s.size(), pLen = p.size();\n\n        if (sLen < pLen) {\n            return vector<int>();\n        }\n\n        vector<int> ans;\n        vector<int> sCount(26);\n        vector<int> pCount(26);\n        for (int i = 0; i < pLen; ++i) {\n            ++sCount[s[i] - 'a'];\n            ++pCount[p[i] - 'a'];\n        }\n\n        if (sCount == pCount) {\n            ans.emplace_back(0);\n        }\n\n        for (int i = 0; i < sLen - pLen; ++i) {\n            --sCount[s[i] - 'a'];\n            ++sCount[s[i + pLen] - 'a'];\n\n            if (sCount == pCount) {\n                ans.emplace_back(i + 1);\n            }\n        }\n\n        return ans;\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc findAnagrams(s, p string) (ans []int) {\n    sLen, pLen := len(s), len(p)\n    if sLen < pLen {\n        return\n    }\n\n    var sCount, pCount [26]int\n    for i, ch := range p {\n        sCount[s[i]-'a']++\n        pCount[ch-'a']++\n    }\n    if sCount == pCount {\n        ans = append(ans, 0)\n    }\n\n    for i, ch := range s[:sLen-pLen] {\n        sCount[ch-'a']--\n        sCount[s[i+pLen]-'a']++\n        if sCount == pCount {\n            ans = append(ans, i+1)\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findAnagrams = function(s, p) {\n    const sLen = s.length, pLen = p.length;\n\n    if (sLen < pLen) {\n        return [];\n    }\n\n    const ans = [];\n    const sCount = new Array(26).fill(0);\n    const pCount = new Array(26).fill(0);\n    for (let i = 0; i < pLen; ++i) {\n        ++sCount[s[i].charCodeAt() - 'a'.charCodeAt()];\n        ++pCount[p[i].charCodeAt() - 'a'.charCodeAt()];\n    }\n\n    if (sCount.toString() === pCount.toString()) {\n        ans.push(0);\n    }\n\n    for (let i = 0; i < sLen - pLen; ++i) {\n        --sCount[s[i].charCodeAt() - 'a'.charCodeAt()];\n        ++sCount[s[i + pLen].charCodeAt() - 'a'.charCodeAt()];\n\n        if (sCount.toString() === pCount.toString()) {\n            ans.push(i + 1);\n        }\n    }\n\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m + (n-m) \\times \\Sigma)$，其中 $n$ 为字符串 $s$ 的长度，$m$ 为字符串 $p$ 的长度，$\\Sigma$ 为所有可能的字符数。我们需要 $O(m)$ 来统计字符串 $p$ 中每种字母的数量；需要 $O(m)$ 来初始化滑动窗口；需要判断 $n-m+1$ 个滑动窗口中每种字母的数量是否与字符串 $p$ 中每种字母的数量相同，每次判断需要 $O(\\Sigma)$ 。因为 $s$ 和 $p$ 仅包含小写字母，所以 $\\Sigma = 26$。\n\n- 空间复杂度：$O(\\Sigma)$。用于存储字符串 $p$ 和滑动窗口中每种字母的数量。\n\n#### 方法二：优化的滑动窗口\n\n**思路和算法**\n\n在方法一的基础上，我们不再分别统计滑动窗口和字符串 $p$ 中每种字母的数量，而是统计滑动窗口和字符串 $p$ 中每种字母数量的差；并引入变量 $\\textit{differ}$ 来记录当前窗口与字符串 $p$ 中数量不同的字母的个数，并在滑动窗口的过程中维护它。\n\n在判断滑动窗口中每种字母的数量与字符串 $p$ 中每种字母的数量是否相同时，只需要判断 $\\textit{differ}$ 是否为零即可。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        s_len, p_len = len(s), len(p)\n\n        if s_len < p_len:\n            return []\n\n        ans = []\n        count = [0] * 26\n        for i in range(p_len):\n            count[ord(s[i]) - 97] += 1\n            count[ord(p[i]) - 97] -= 1\n\n        differ = [c != 0 for c in count].count(True)\n\n        if differ == 0:\n            ans.append(0)\n\n        for i in range(s_len - p_len):\n            if count[ord(s[i]) - 97] == 1:  # 窗口中字母 s[i] 的数量与字符串 p 中的数量从不同变得相同\n                differ -= 1\n            elif count[ord(s[i]) - 97] == 0:  # 窗口中字母 s[i] 的数量与字符串 p 中的数量从相同变得不同\n                differ += 1\n            count[ord(s[i]) - 97] -= 1\n\n            if count[ord(s[i + p_len]) - 97] == -1:  # 窗口中字母 s[i+p_len] 的数量与字符串 p 中的数量从不同变得相同\n                differ -= 1\n            elif count[ord(s[i + p_len]) - 97] == 0:  # 窗口中字母 s[i+p_len] 的数量与字符串 p 中的数量从相同变得不同\n                differ += 1\n            count[ord(s[i + p_len]) - 97] += 1\n            \n            if differ == 0:\n                ans.append(i + 1)\n\n        return ans\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        int sLen = s.length(), pLen = p.length();\n\n        if (sLen < pLen) {\n            return new ArrayList<Integer>();\n        }\n\n        List<Integer> ans = new ArrayList<Integer>();\n        int[] count = new int[26];\n        for (int i = 0; i < pLen; ++i) {\n            ++count[s.charAt(i) - 'a'];\n            --count[p.charAt(i) - 'a'];\n        }\n\n        int differ = 0;\n        for (int j = 0; j < 26; ++j) {\n            if (count[j] != 0) {\n                ++differ;\n            }\n        }\n\n        if (differ == 0) {\n            ans.add(0);\n        }\n\n        for (int i = 0; i < sLen - pLen; ++i) {\n            if (count[s.charAt(i) - 'a'] == 1) {  // 窗口中字母 s[i] 的数量与字符串 p 中的数量从不同变得相同\n                --differ;\n            } else if (count[s.charAt(i) - 'a'] == 0) {  // 窗口中字母 s[i] 的数量与字符串 p 中的数量从相同变得不同\n                ++differ;\n            }\n            --count[s.charAt(i) - 'a'];\n\n            if (count[s.charAt(i + pLen) - 'a'] == -1) {  // 窗口中字母 s[i+pLen] 的数量与字符串 p 中的数量从不同变得相同\n                --differ;\n            } else if (count[s.charAt(i + pLen) - 'a'] == 0) {  // 窗口中字母 s[i+pLen] 的数量与字符串 p 中的数量从相同变得不同\n                ++differ;\n            }\n            ++count[s.charAt(i + pLen) - 'a'];\n            \n            if (differ == 0) {\n                ans.add(i + 1);\n            }\n        }\n\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public IList<int> FindAnagrams(string s, string p) {\n        int sLen = s.Length, pLen = p.Length;\n\n        if (sLen < pLen) {\n            return new List<int>();\n        }\n\n        IList<int> ans = new List<int>();\n        int[] count = new int[26];\n        for (int i = 0; i < pLen; ++i) {\n            ++count[s[i] - 'a'];\n            --count[p[i] - 'a'];\n        }\n\n        int differ = 0;\n        for (int j = 0; j < 26; ++j) {\n            if (count[j] != 0) {\n                ++differ;\n            }\n        }\n\n        if (differ == 0) {\n            ans.Add(0);\n        }\n\n        for (int i = 0; i < sLen - pLen; ++i) {\n            if (count[s[i] - 'a'] == 1) {  // 窗口中字母 s[i] 的数量与字符串 p 中的数量从不同变得相同\n                --differ;\n            } else if (count[s[i] - 'a'] == 0) {  // 窗口中字母 s[i] 的数量与字符串 p 中的数量从相同变得不同\n                ++differ;\n            }\n            --count[s[i] - 'a'];\n\n            if (count[s[i + pLen] - 'a'] == -1) {  // 窗口中字母 s[i+pLen] 的数量与字符串 p 中的数量从不同变得相同\n                --differ;\n            } else if (count[s[i + pLen] - 'a'] == 0) {  // 窗口中字母 s[i+pLen] 的数量与字符串 p 中的数量从相同变得不同\n                ++differ;\n            }\n            ++count[s[i + pLen] - 'a'];\n            \n            if (differ == 0) {\n                ans.Add(i + 1);\n            }\n        }\n\n        return ans;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        int sLen = s.size(), pLen = p.size();\n\n        if (sLen < pLen) {\n            return vector<int>();\n        }\n\n        vector<int> ans;\n        vector<int> count(26);\n        for (int i = 0; i < pLen; ++i) {\n            ++count[s[i] - 'a'];\n            --count[p[i] - 'a'];\n        }\n\n        int differ = 0;\n        for (int j = 0; j < 26; ++j) {\n            if (count[j] != 0) {\n                ++differ;\n            }\n        }\n\n        if (differ == 0) {\n            ans.emplace_back(0);\n        }\n\n        for (int i = 0; i < sLen - pLen; ++i) {\n            if (count[s[i] - 'a'] == 1) {  // 窗口中字母 s[i] 的数量与字符串 p 中的数量从不同变得相同\n                --differ;\n            } else if (count[s[i] - 'a'] == 0) {  // 窗口中字母 s[i] 的数量与字符串 p 中的数量从相同变得不同\n                ++differ;\n            }\n            --count[s[i] - 'a'];\n\n            if (count[s[i + pLen] - 'a'] == -1) {  // 窗口中字母 s[i+pLen] 的数量与字符串 p 中的数量从不同变得相同\n                --differ;\n            } else if (count[s[i + pLen] - 'a'] == 0) {  // 窗口中字母 s[i+pLen] 的数量与字符串 p 中的数量从相同变得不同\n                ++differ;\n            }\n            ++count[s[i + pLen] - 'a'];\n            \n            if (differ == 0) {\n                ans.emplace_back(i + 1);\n            }\n        }\n\n        return ans;\n    }\n};\n```\n\n```go [sol2-Golang]\nfunc findAnagrams(s, p string) (ans []int) {\n    sLen, pLen := len(s), len(p)\n    if sLen < pLen {\n        return\n    }\n\n    count := [26]int{}\n    for i, ch := range p {\n        count[s[i]-'a']++\n        count[ch-'a']--\n    }\n\n    differ := 0\n    for _, c := range count {\n        if c != 0 {\n            differ++\n        }\n    }\n    if differ == 0 {\n        ans = append(ans, 0)\n    }\n\n    for i, ch := range s[:sLen-pLen] {\n        if count[ch-'a'] == 1 { // 窗口中字母 s[i] 的数量与字符串 p 中的数量从不同变得相同\n            differ--\n        } else if count[ch-'a'] == 0 { // 窗口中字母 s[i] 的数量与字符串 p 中的数量从相同变得不同\n            differ++\n        }\n        count[ch-'a']--\n\n        if count[s[i+pLen]-'a'] == -1 { // 窗口中字母 s[i+pLen] 的数量与字符串 p 中的数量从不同变得相同\n            differ--\n        } else if count[s[i+pLen]-'a'] == 0 { // 窗口中字母 s[i+pLen] 的数量与字符串 p 中的数量从相同变得不同\n            differ++\n        }\n        count[s[i+pLen]-'a']++\n\n        if differ == 0 {\n            ans = append(ans, i+1)\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findAnagrams = function(s, p) {\n    const sLen = s.length, pLen = p.length;\n\n    if (sLen < pLen) {\n        return [];\n    }\n\n    const ans = [];\n    const count = Array(26).fill(0);\n    for (let i = 0; i < pLen; ++i) {\n        ++count[s[i].charCodeAt() - 'a'.charCodeAt()];\n        --count[p[i].charCodeAt() - 'a'.charCodeAt()];\n    }\n\n    let differ = 0;\n    for (let j = 0; j < 26; ++j) {\n        if (count[j] !== 0) {\n            ++differ;\n        }\n    }\n\n    if (differ === 0) {\n        ans.push(0);\n    }\n\n    for (let i = 0; i < sLen - pLen; ++i) {\n        if (count[s[i].charCodeAt() - 'a'.charCodeAt()] === 1) {  // 窗口中字母 s[i] 的数量与字符串 p 中的数量从不同变得相同\n            --differ;\n        } else if (count[s[i].charCodeAt() - 'a'.charCodeAt()] === 0) {  // 窗口中字母 s[i] 的数量与字符串 p 中的数量从相同变得不同\n            ++differ;\n        }\n        --count[s[i].charCodeAt() - 'a'.charCodeAt()];\n\n        if (count[s[i + pLen].charCodeAt() - 'a'.charCodeAt()] === -1) {  // 窗口中字母 s[i+pLen] 的数量与字符串 p 中的数量从不同变得相同\n            --differ;\n        } else if (count[s[i + pLen].charCodeAt() - 'a'.charCodeAt()] === 0) {  // 窗口中字母 s[i+pLen] 的数量与字符串 p 中的数量从相同变得不同\n            ++differ;\n        }\n        ++count[s[i + pLen].charCodeAt() - 'a'.charCodeAt()];\n\n        if (differ === 0) {\n            ans.push(i + 1);\n        }\n    }\n\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m+\\Sigma)$，其中 $n$ 为字符串 $s$ 的长度，$m$ 为字符串 $p$ 的长度，其中$\\Sigma$ 为所有可能的字符数。我们需要 $O(m)$ 来统计字符串 $p$ 中每种字母的数量；需要 $O(m)$ 来初始化滑动窗口；需要 $O(\\Sigma)$ 来初始化 $\\textit{differ}$；需要 $O(n-m)$ 来滑动窗口并判断窗口内每种字母的数量是否与字符串 $p$ 中每种字母的数量相同，每次判断需要 $O(1)$ 。因为 $s$ 和 $p$ 仅包含小写字母，所以 $\\Sigma = 26$。\n\n- 空间复杂度：$O(\\Sigma)$。用于存储滑动窗口和字符串 $p$ 中每种字母数量的差。"
}