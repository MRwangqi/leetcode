{
	"titleSlug": "3Etpl5",
	"slug": "cong-gen-jie-dian-dao-xie-jie-dian-de-lu-nv9q",
	"url": "https://leetcode-cn.com/problems/3Etpl5/solution/cong-gen-jie-dian-dao-xie-jie-dian-de-lu-nv9q/",
	"content": "#### 前言\n\n这道题中，二叉树的每条从根节点到叶子节点的路径都代表一个数字。其实，每个节点都对应一个数字，等于其父节点对应的数字乘以 $10$ 再加上该节点的值（这里假设根节点的父节点对应的数字是 $0$）。只要计算出每个叶子节点对应的数字，然后计算所有叶子节点对应的数字之和，即可得到结果。可以通过深度优先搜索和广度优先搜索实现。\n\n#### 方法一：深度优先搜索\n\n**思路与算法**\n\n深度优先搜索是很直观的做法。从根节点开始，遍历每个节点，如果遇到叶子节点，则将叶子节点对应的数字加到数字之和。如果当前节点不是叶子节点，则计算其子节点对应的数字，然后对子节点递归遍历。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/fig1.png)\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    public int sumNumbers(TreeNode root) {\n        return dfs(root, 0);\n    }\n\n    public int dfs(TreeNode root, int prevSum) {\n        if (root == null) {\n            return 0;\n        }\n        int sum = prevSum * 10 + root.val;\n        if (root.left == null && root.right == null) {\n            return sum;\n        } else {\n            return dfs(root.left, sum) + dfs(root.right, sum);\n        }\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int dfs(TreeNode* root, int prevSum) {\n        if (root == nullptr) {\n            return 0;\n        }\n        int sum = prevSum * 10 + root->val;\n        if (root->left == nullptr && root->right == nullptr) {\n            return sum;\n        } else {\n            return dfs(root->left, sum) + dfs(root->right, sum);\n        }\n    }\n    int sumNumbers(TreeNode* root) {\n        return dfs(root, 0);\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nconst dfs = (root, prevSum) => {\n    if (root === null) {\n        return 0;\n    }\n    const sum = prevSum * 10 + root.val;\n    if (root.left == null && root.right == null) {\n        return sum;\n    } else {\n        return dfs(root.left, sum) + dfs(root.right, sum);\n    }\n}\nvar sumNumbers = function(root) {\n    return dfs(root, 0);\n};\n```\n\n```C [sol1-C]\nint dfs(struct TreeNode* root, int prevSum) {\n    if (root == NULL) {\n        return 0;\n    }\n    int sum = prevSum * 10 + root->val;\n    if (root->left == NULL && root->right == NULL) {\n        return sum;\n    } else {\n        return dfs(root->left, sum) + dfs(root->right, sum);\n    }\n}\n\nint sumNumbers(struct TreeNode* root) {\n    return dfs(root, 0);\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        def dfs(root: TreeNode, prevTotal: int) -> int:\n            if not root:\n                return 0\n            total = prevTotal * 10 + root.val\n            if not root.left and not root.right:\n                return total\n            else:\n                return dfs(root.left, total) + dfs(root.right, total)\n\n        return dfs(root, 0)\n```\n\n```Golang [sol1-Golang]\nfunc dfs(root *TreeNode, prevSum int) int {\n    if root == nil {\n        return 0\n    }\n    sum := prevSum*10 + root.Val\n    if root.Left == nil && root.Right == nil {\n        return sum\n    }\n    return dfs(root.Left, sum) + dfs(root.Right, sum)\n}\n\nfunc sumNumbers(root *TreeNode) int {\n    return dfs(root, 0)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树的节点个数。对每个节点访问一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树的节点个数。空间复杂度主要取决于递归调用的栈空间，递归栈的深度等于二叉树的高度，最坏情况下，二叉树的高度等于节点个数，空间复杂度为 $O(n)$。\n\n#### 方法二：广度优先搜索\n\n**思路与算法**\n\n使用广度优先搜索，需要维护两个队列，分别存储节点和节点对应的数字。\n\n初始时，将根节点和根节点的值分别加入两个队列。每次从两个队列分别取出一个节点和一个数字，进行如下操作：\n\n- 如果当前节点是叶子节点，则将该节点对应的数字加到数字之和；\n\n- 如果当前节点不是叶子节点，则获得当前节点的非空子节点，并根据当前节点对应的数字和子节点的值计算子节点对应的数字，然后将子节点和子节点对应的数字分别加入两个队列。\n\n搜索结束后，即可得到所有叶子节点对应的数字之和。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/jianzhi_II_049/12.png)>\n\n**代码**\n\n```Java [sol2-Java]\nclass Solution {\n    public int sumNumbers(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int sum = 0;\n        Queue<TreeNode> nodeQueue = new LinkedList<TreeNode>();\n        Queue<Integer> numQueue = new LinkedList<Integer>();\n        nodeQueue.offer(root);\n        numQueue.offer(root.val);\n        while (!nodeQueue.isEmpty()) {\n            TreeNode node = nodeQueue.poll();\n            int num = numQueue.poll();\n            TreeNode left = node.left, right = node.right;\n            if (left == null && right == null) {\n                sum += num;\n            } else {\n                if (left != null) {\n                    nodeQueue.offer(left);\n                    numQueue.offer(num * 10 + left.val);\n                }\n                if (right != null) {\n                    nodeQueue.offer(right);\n                    numQueue.offer(num * 10 + right.val);\n                }\n            }\n        }\n        return sum;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int sumNumbers(TreeNode* root) {\n        if (root == nullptr) {\n            return 0;\n        }\n        int sum = 0;\n        queue<TreeNode*> nodeQueue;\n        queue<int> numQueue;\n        nodeQueue.push(root);\n        numQueue.push(root->val);\n        while (!nodeQueue.empty()) {\n            TreeNode* node = nodeQueue.front();\n            int num = numQueue.front();\n            nodeQueue.pop();\n            numQueue.pop();\n            TreeNode* left = node->left;\n            TreeNode* right = node->right;\n            if (left == nullptr && right == nullptr) {\n                sum += num;\n            } else {\n                if (left != nullptr) {\n                    nodeQueue.push(left);\n                    numQueue.push(num * 10 + left->val);\n                }\n                if (right != nullptr) {\n                    nodeQueue.push(right);\n                    numQueue.push(num * 10 + right->val);\n                }\n            }\n        }\n        return sum;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar sumNumbers = function(root) {\n    if (root === null) {\n        return 0;\n    }\n    let sum = 0;\n    const nodeQueue = [];\n    const numQueue = [];\n    nodeQueue.push(root);\n    numQueue.push(root.val);\n    while (nodeQueue.length) {\n        const node = nodeQueue.shift();\n        const num = numQueue.shift();\n        const left = node.left, right = node.right;\n        if (left === null && right === null) {\n            sum += num;\n        } else {\n            if (left !== null) {\n                nodeQueue.push(left);\n                numQueue.push(num * 10 + left.val);\n            }\n            if (right !== null) {\n                nodeQueue.push(right);\n                numQueue.push(num * 10 + right.val);\n            }\n        }\n    }\n    return sum;\n};\n```\n\n```C [sol2-C]\nint sumNumbers(struct TreeNode* root) {\n    if (root == NULL) {\n        return 0;\n    }\n    int sum = 0;\n    struct TreeNode* nodeQueue[2000];\n    int numQueue[2000];\n    int leftQueue = 0, rightQueue = 0;\n    nodeQueue[rightQueue] = root;\n    numQueue[rightQueue++] = root->val;\n    while (leftQueue < rightQueue) {\n        struct TreeNode* node = nodeQueue[leftQueue];\n        int num = numQueue[leftQueue++];\n        struct TreeNode* left = node->left;\n        struct TreeNode* right = node->right;\n        if (left == NULL && right == NULL) {\n            sum += num;\n        } else {\n            if (left != NULL) {\n                nodeQueue[rightQueue] = left;\n                numQueue[rightQueue++] = num * 10 + left->val;\n            }\n            if (right != NULL) {\n                nodeQueue[rightQueue] = right;\n                numQueue[rightQueue++] = num * 10 + right->val;\n            }\n        }\n    }\n    return sum;\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        total = 0\n        nodeQueue = collections.deque([root])\n        numQueue = collections.deque([root.val])\n        \n        while nodeQueue:\n            node = nodeQueue.popleft()\n            num = numQueue.popleft()\n            left, right = node.left, node.right\n            if not left and not right:\n                total += num\n            else:\n                if left:\n                    nodeQueue.append(left)\n                    numQueue.append(num * 10 + left.val)\n                if right:\n                    nodeQueue.append(right)\n                    numQueue.append(num * 10 + right.val)\n\n        return total\n```\n\n```Golang [sol2-Golang]\ntype pair struct {\n    node *TreeNode\n    num  int\n}\n\nfunc sumNumbers(root *TreeNode) (sum int) {\n    if root == nil {\n        return\n    }\n    queue := []pair{{root, root.Val}}\n    for len(queue) > 0 {\n        p := queue[0]\n        queue = queue[1:]\n        left, right, num := p.node.Left, p.node.Right, p.num\n        if left == nil && right == nil {\n            sum += num\n        } else {\n            if left != nil {\n                queue = append(queue, pair{left, num*10 + left.Val})\n            }\n            if right != nil {\n                queue = append(queue, pair{right, num*10 + right.Val})\n            }\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树的节点个数。对每个节点访问一次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树的节点个数。空间复杂度主要取决于队列，每个队列中的元素个数不会超过 $n$。"
}