{
	"titleSlug": "regions-cut-by-slashes",
	"slug": "you-xie-gang-hua-fen-qu-yu-by-leetcode-67xb",
	"url": "https://leetcode-cn.com/problems/regions-cut-by-slashes/solution/you-xie-gang-hua-fen-qu-yu-by-leetcode-67xb/",
	"content": "### 📺 视频讲解 \n\n>力扣君温馨小贴士：觉得视频时间长的扣友，可以在视频右下角的「设置」按钮处选择 1.5 倍速或者 2 倍速观看。\n\n![959. 由斜杠划分区域.mp4](216fa559-2505-4304-b2b6-f01111efc8d8)\n\n\n### 📖 文字解析\n\n这是一个关于连通性的问题，让我们求解连通分量的个数，解决这个问题没有特别的技巧，根据题意 **画图分析**、稍微细心一点就可以通过系统测评。\n\n可以用深度优先遍历（Depth First Search）、广度优先遍历（Breadth First Search）和并查集（Disjoint Sets），由于只要求计算结果，不要求给出具体的连通信息，可以使用并查集。\n\n\n### 方法：并查集\n\n「斜杠」、「反斜杠」把单元格拆分成的 2 个三角形的形态，在做合并的时候需要分类讨论。**根据「斜杠」、「反斜杠」分割的特点**，我们把一个单元格分割成逻辑上的 4 个部分。如下图所示：\n\n![image.png](https://pic.leetcode-cn.com/1611301988-RWjuqg-image.png){:width=500}\n\n我们须要遍历一次输入的二维网格 `grid`，在 **单元格内** 和 **单元格间** 进行合并。\n\n**单元格内**：\n\n+ 如果是空格：合并 0、1、2、3；\n+ 如果是斜杠：合并 0、3，合并 1、2；\n+ 如果是反斜杠：合并 0、1，合并 2、3。\n\n**单元格间**：\n\n**把每一个单元格拆分成 4 个小三角形以后，相邻的单元格须要合并，无须分类讨论**。我们选择在遍历 `grid` 的每一个单元格的时候，分别「向右、向下」尝试合并。\n\n![image.png](https://pic.leetcode-cn.com/1611302894-vmBtyK-image.png){:width=300}\n\n+ 向右：合并 1 （当前单元格）和 3（当前单元格右边 1 列的单元格），上图中红色部分；\n+ 向下：合并 2 （当前单元格）和 0（当前单元格下边 1 列的单元格），上图中蓝色部分。\n\n事实上，大家选择在遍历 `grid` 的每一个单元格的时候，分别「向左、向上」、「向左、向下」、「向右、向上」、「向右、向下」中的任何一种都可以。\n\n合并完成以后，并查集里连通分量的个数就是题目要求的区域的个数。\n\n**参考代码**：\n\n```Java []\npublic class Solution {\n\n    public int regionsBySlashes(String[] grid) {\n        int N = grid.length;\n        int size = 4 * N * N;\n\n        UnionFind unionFind = new UnionFind(size);\n        for (int i = 0; i < N; i++) {\n            char[] row = grid[i].toCharArray();\n            for (int j = 0; j < N; j++) {\n                // 二维网格转换为一维表格，index 表示将单元格拆分成 4 个小三角形以后，编号为 0 的小三角形的在并查集中的下标\n                int index = 4 * (i * N + j);\n                char c = row[j];\n                // 单元格内合并\n                if (c == '/') {\n                    // 合并 0、3，合并 1、2\n                    unionFind.union(index, index + 3);\n                    unionFind.union(index + 1, index + 2);\n                } else if (c == '\\\\') {\n                    // 合并 0、1，合并 2、3\n                    unionFind.union(index, index + 1);\n                    unionFind.union(index + 2, index + 3);\n                } else {\n                    unionFind.union(index, index + 1);\n                    unionFind.union(index + 1, index + 2);\n                    unionFind.union(index + 2, index + 3);\n                }\n\n                // 单元格间合并\n                // 向右合并：1（当前）、3（右一列）\n                if (j + 1 < N) {\n                    unionFind.union(index + 1, 4 * (i * N + j + 1) + 3);\n                }\n                // 向下合并：2（当前）、0（下一行）\n                if (i + 1 < N) {\n                    unionFind.union(index + 2, 4 * ((i + 1) * N + j));\n                }\n            }\n        }\n        return unionFind.getCount();\n    }\n\n    private class UnionFind {\n\n        private int[] parent;\n\n        private int count;\n\n        public int getCount() {\n            return count;\n        }\n\n        public UnionFind(int n) {\n            this.count = n;\n            this.parent = new int[n];\n            for (int i = 0; i < n; i++) {\n                parent[i] = i;\n            }\n        }\n\n        public int find(int x) {\n            while (x != parent[x]) {\n                parent[x] = parent[parent[x]];\n                x = parent[x];\n            }\n            return x;\n        }\n\n        public void union(int x, int y) {\n            int rootX = find(x);\n            int rootY = find(y);\n            if (rootX == rootY) {\n                return;\n            }\n\n            parent[rootX] = rootY;\n            count--;\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2 \\log N)$，其中 $N$ 是网格的长度，$O(N^2  \\log N^2) = O(2N^2 \\log N)$；\n* 空间复杂度：$O(N^2)$。\n\n---\n\n本题采用了「先拆后合」的策略，避免了相对复杂的分类讨论。"
}