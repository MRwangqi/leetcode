{
	"titleSlug": "squares-of-a-sorted-array",
	"slug": "you-xu-shu-zu-de-ping-fang-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/squares-of-a-sorted-array/solution/you-xu-shu-zu-de-ping-fang-by-leetcode-solution/",
	"content": "#### 方法一：直接排序\n\n**思路与算法**\n\n最简单的方法就是将数组 $\\textit{nums}$ 中的数平方后直接排序。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        vector<int> ans;\n        for (int num: nums) {\n            ans.push_back(num * num);\n        }\n        sort(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] sortedSquares(int[] nums) {\n        int[] ans = new int[nums.length];\n        for (int i = 0; i < nums.length; ++i) {\n            ans[i] = nums[i] * nums[i];\n        }\n        Arrays.sort(ans);\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        return sorted(num * num for num in nums)\n```\n\n```Golang [sol1-Golang]\nfunc sortedSquares(nums []int) []int {\n    ans := make([]int, len(nums))\n    for i, v := range nums {\n        ans[i] = v * v\n    }\n    sort.Ints(ans)\n    return ans\n}\n```\n\n```C [sol1-C]\nint cmp(const void* _a, const void* _b) {\n    int a = *(int*)_a, b = *(int*)_b;\n    return a - b;\n}\n\nint* sortedSquares(int* nums, int numsSize, int* returnSize) {\n    (*returnSize) = numsSize;\n    int* ans = malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; ++i) {\n        ans[i] = nums[i] * nums[i];\n    }\n    qsort(ans, numsSize, sizeof(int), cmp);\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(\\log n)$。除了存储答案的数组以外，我们需要 $O(\\log n)$ 的栈空间进行排序。\n\n#### 方法二：双指针\n\n**思路与算法**\n\n方法一没有利用「数组 $\\textit{nums}$ 已经按照升序排序」这个条件。显然，如果数组 $\\textit{nums}$ 中的所有数都是非负数，那么将每个数平方后，数组仍然保持升序；如果数组 $\\textit{nums}$ 中的所有数都是负数，那么将每个数平方后，数组会保持降序。\n\n这样一来，如果我们能够找到数组 $\\textit{nums}$ 中负数与非负数的分界线，那么就可以用类似「归并排序」的方法了。具体地，我们设 $\\textit{neg}$ 为数组 $\\textit{nums}$ 中负数与非负数的分界线，也就是说，$\\textit{nums}[0]$ 到 $\\textit{nums}[\\textit{neg}]$ 均为负数，而 $\\textit{nums}[\\textit{neg}+1]$ 到 $\\textit{nums}[n-1]$ 均为非负数。当我们将数组 $\\textit{nums}$ 中的数平方后，那么 $\\textit{nums}[0]$ 到 $\\textit{nums}[\\textit{neg}]$ 单调递减，$\\textit{nums}[\\textit{neg}+1]$ 到 $\\textit{nums}[n-1]$ 单调递增。\n\n由于我们得到了两个已经有序的子数组，因此就可以使用归并的方法进行排序了。具体地，使用两个指针分别指向位置 $\\textit{neg}$ 和 $\\textit{neg}+1$，每次比较两个指针对应的数，选择较小的那个放入答案并移动指针。当某一指针移至边界时，将另一指针还未遍历到的数依次放入答案。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int n = nums.size();\n        int negative = -1;\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] < 0) {\n                negative = i;\n            } else {\n                break;\n            }\n        }\n\n        vector<int> ans;\n        int i = negative, j = negative + 1;\n        while (i >= 0 || j < n) {\n            if (i < 0) {\n                ans.push_back(nums[j] * nums[j]);\n                ++j;\n            }\n            else if (j == n) {\n                ans.push_back(nums[i] * nums[i]);\n                --i;\n            }\n            else if (nums[i] * nums[i] < nums[j] * nums[j]) {\n                ans.push_back(nums[i] * nums[i]);\n                --i;\n            }\n            else {\n                ans.push_back(nums[j] * nums[j]);\n                ++j;\n            }\n        }\n\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] sortedSquares(int[] nums) {\n        int n = nums.length;\n        int negative = -1;\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] < 0) {\n                negative = i;\n            } else {\n                break;\n            }\n        }\n\n        int[] ans = new int[n];\n        int index = 0, i = negative, j = negative + 1;\n        while (i >= 0 || j < n) {\n            if (i < 0) {\n                ans[index] = nums[j] * nums[j];\n                ++j;\n            } else if (j == n) {\n                ans[index] = nums[i] * nums[i];\n                --i;\n            } else if (nums[i] * nums[i] < nums[j] * nums[j]) {\n                ans[index] = nums[i] * nums[i];\n                --i;\n            } else {\n                ans[index] = nums[j] * nums[j];\n                ++j;\n            }\n            ++index;\n        }\n\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        negative = -1\n        for i, num in enumerate(nums):\n            if num < 0:\n                negative = i\n            else:\n                break\n\n        ans = list()\n        i, j = negative, negative + 1\n        while i >= 0 or j < n:\n            if i < 0:\n                ans.append(nums[j] * nums[j])\n                j += 1\n            elif j == n:\n                ans.append(nums[i] * nums[i])\n                i -= 1\n            elif nums[i] * nums[i] < nums[j] * nums[j]:\n                ans.append(nums[i] * nums[i])\n                i -= 1\n            else:\n                ans.append(nums[j] * nums[j])\n                j += 1\n\n        return ans\n```\n\n```Golang [sol2-Golang]\nfunc sortedSquares(nums []int) []int {\n    n := len(nums)\n    lastNegIndex := -1\n    for i := 0; i < n && nums[i] < 0; i++ {\n        lastNegIndex = i\n    }\n\n    ans := make([]int, 0, n)\n    for i, j := lastNegIndex, lastNegIndex+1; i >= 0 || j < n; {\n        if i < 0 {\n            ans = append(ans, nums[j]*nums[j])\n            j++\n        } else if j == n {\n            ans = append(ans, nums[i]*nums[i])\n            i--\n        } else if nums[i]*nums[i] < nums[j]*nums[j] {\n            ans = append(ans, nums[i]*nums[i])\n            i--\n        } else {\n            ans = append(ans, nums[j]*nums[j])\n            j++\n        }\n    }\n\n    return ans\n}\n```\n\n```C [sol2-C]\nint* sortedSquares(int* nums, int numsSize, int* returnSize) {\n    int negative = -1;\n    for (int i = 0; i < numsSize; ++i) {\n        if (nums[i] < 0) {\n            negative = i;\n        } else {\n            break;\n        }\n    }\n\n    int* ans = malloc(sizeof(int) * numsSize);\n    *returnSize = 0;\n    int i = negative, j = negative + 1;\n    while (i >= 0 || j < numsSize) {\n        if (i < 0) {\n            ans[(*returnSize)++] = nums[j] * nums[j];\n            ++j;\n        } else if (j == numsSize) {\n            ans[(*returnSize)++] = nums[i] * nums[i];\n            --i;\n        } else if (nums[i] * nums[i] < nums[j] * nums[j]) {\n            ans[(*returnSize)++] = nums[i] * nums[i];\n            --i;\n        } else {\n            ans[(*returnSize)++] = nums[j] * nums[j];\n            ++j;\n        }\n    }\n\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(1)$。除了存储答案的数组以外，我们只需要维护常量空间。\n\n#### 方法三：双指针\n\n**思路与算法**\n\n同样地，我们可以使用两个指针分别指向位置 $0$ 和 $n-1$，每次比较两个指针对应的数，选择较大的那个**逆序**放入答案并移动指针。这种方法无需处理某一指针移动至边界的情况，读者可以仔细思考其精髓所在。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> ans(n);\n        for (int i = 0, j = n - 1, pos = n - 1; i <= j;) {\n            if (nums[i] * nums[i] > nums[j] * nums[j]) {\n                ans[pos] = nums[i] * nums[i];\n                ++i;\n            }\n            else {\n                ans[pos] = nums[j] * nums[j];\n                --j;\n            }\n            --pos;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int[] sortedSquares(int[] nums) {\n        int n = nums.length;\n        int[] ans = new int[n];\n        for (int i = 0, j = n - 1, pos = n - 1; i <= j;) {\n            if (nums[i] * nums[i] > nums[j] * nums[j]) {\n                ans[pos] = nums[i] * nums[i];\n                ++i;\n            } else {\n                ans[pos] = nums[j] * nums[j];\n                --j;\n            }\n            --pos;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        ans = [0] * n\n        \n        i, j, pos = 0, n - 1, n - 1\n        while i <= j:\n            if nums[i] * nums[i] > nums[j] * nums[j]:\n                ans[pos] = nums[i] * nums[i]\n                i += 1\n            else:\n                ans[pos] = nums[j] * nums[j]\n                j -= 1\n            pos -= 1\n        \n        return ans\n```\n\n```Golang [sol3-Golang]\nfunc sortedSquares(nums []int) []int {\n    n := len(nums)\n    ans := make([]int, n)\n    i, j := 0, n-1\n    for pos := n - 1; pos >= 0; pos-- {\n        if v, w := nums[i]*nums[i], nums[j]*nums[j]; v > w {\n            ans[pos] = v\n            i++\n        } else {\n            ans[pos] = w\n            j--\n        }\n    }\n    return ans\n}\n```\n\n```C [sol3-C]\nint* sortedSquares(int* nums, int numsSize, int* returnSize) {\n    int* ans = malloc(sizeof(int) * numsSize);\n    *returnSize = numsSize;\n    for (int i = 0, j = numsSize - 1, pos = numsSize - 1; i <= j;) {\n        if (nums[i] * nums[i] > nums[j] * nums[j]) {\n            ans[pos] = nums[i] * nums[i];\n            ++i;\n        } else {\n            ans[pos] = nums[j] * nums[j];\n            --j;\n        }\n        --pos;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(1)$。除了存储答案的数组以外，我们只需要维护常量空间。"
}