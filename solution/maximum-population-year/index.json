{
	"titleSlug": "maximum-population-year",
	"slug": "ren-kou-zui-duo-de-nian-fen-by-leetcode-5m7r4",
	"url": "https://leetcode-cn.com/problems/maximum-population-year/solution/ren-kou-zui-duo-de-nian-fen-by-leetcode-5m7r4/",
	"content": "#### 方法一：差分数组\n\n**提示 $1$**\n\n遍历每个人的出生与死亡年份，并维护每一年的人口**变化量**。\n\n**提示 $1$ 解释**\n\n首先，每个人对于人口数量的影响是独立的，因此我们可以独立地考虑每个人对人口数量的影响。\n\n其次，每个人只在他的出生与死亡年份对人口数量有所影响，而这个影响体现在人口数量的变化量上。\n\n最后，在给定人口初值与每一年人口变化量的基础上，我们可以将对应的变化量求和得到每一年的人口数量，进而得到人口最多的年份。\n\n这种考虑数量「变化量」的方法也被称为「差分」方法，而对应的数组叫做「差分数组」。而将变化量转换为对应数量的过程正是求解「前缀和」的方法，因此「差分」也是「前缀和」的逆运算。如果读者不熟悉「差分数组」及其相关用法，可以在解决本题的同时尝试以下题目：\n\n- [370. 区间加法](https://leetcode-cn.com/problems/range-addition/)\n\n- [1094. 拼车](https://leetcode-cn.com/problems/car-pooling/)\n\n- [1109. 航班预订统计](https://leetcode-cn.com/problems/corporate-flight-bookings/)\n\n\n**思路与算法**\n\n我们用 $\\textit{delta}$ 数组维护每一年的人口变化量。由于题目中起始年份为 $1950$，我们希望数组的起始下标对应起始年份，并且年份与数组下标一一对应，因此我们需要引入起始年份与数组起始下标之差 $\\textit{offset} = 1950$，使得下标 $i$ 对应 $i + \\textit{offset}$ 年。\n\n在遍历 $\\textit{logs}$ 的时候，我们需要将每个人出生年份对应的变化量加上 $1$，同时将死亡年份对应的变化量减去 $1$。\n\n最终我们可以遍历 $\\textit{delta}$ 求出每一年的人口数量并维护最大值和对应的最小下标。下标为 $i$ 对应年份的人口数量即为初始人口数量 $0$ 加上 $[0, i]$ **闭区间**的人口变化量之和。在找到最小下标后，我们需要加上对应的 $\\textit{offset}$ 转回对应的年份。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int offset = 1950;   // 起始年份与起始下标之差\n    \npublic:\n    int maximumPopulation(vector<vector<int>>& logs) {\n        vector<int> delta(101, 0);   // 变化量\n        for (auto&& log: logs) {\n            ++delta[log[0]-offset];\n            --delta[log[1]-offset];\n        }\n        int mx = 0;   // 人口数量最大值\n        int res = 0;   // 最大值对应的最小下标\n        int curr = 0;   // 每一年的人口数量\n        // 前缀和\n        for (int i = 0; i < 101; ++i){\n            curr += delta[i];\n            if (curr > mx){\n                mx = curr;\n                res = i;\n            }\n        }\n        return res + offset;   // 转回对应的年份\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def maximumPopulation(self, logs: List[List[int]]) -> int:\n        delta = [0] * 101   # 变化量\n        offset = 1950   # 起始年份与起始下标之差\n        for b, d in logs:\n            delta[b-offset] += 1\n            delta[d-offset] -= 1\n        mx = 0   # 人口数量最大值\n        res = 0   # 最大值对应的最小下标\n        curr = 0   # 每一年的人口数量\n        # 前缀和\n        for i in range(101):\n            curr += delta[i]\n            if curr > mx:\n                mx = curr\n                res = i\n        return res + offset   # 转回对应的年份\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m + n)$，其中 $m$ 为 $\\textit{logs}$ 的长度，$n$ 为年份的跨度。建立变化量数组的时间复杂度为 $O(n)$，维护变化量数组的时间复杂度为 $O(m)$，遍历维护最大值的时间复杂度为 $O(n)$。\n\n- 空间复杂度：$O(n)$，即为变化量数组的空间开销。"
}