{
	"titleSlug": "a-number-after-a-double-reversal",
	"slug": "fan-zhuan-liang-ci-de-shu-zi-by-leetcode-w9j4",
	"url": "https://leetcode-cn.com/problems/a-number-after-a-double-reversal/solution/fan-zhuan-liang-ci-de-shu-zi-by-leetcode-w9j4/",
	"content": "#### 方法一：数学\n\n**提示 $1$**\n\n一个数字进行两次反转操作不变的**充要条件**为：在两次反转操作前后数字的**位数**均不变。\n\n**提示 $1$ 解释**\n\n首先考虑充分性。如果操作前后位数不变，则反转操作等价于数字对应的十进制字符串的反转操作，而字符串反转两次一定等于本身，因此该数字反转两次也为本身。\n\n其次考虑必要性。对于一个数进行反转操作，它的**位数**一定**不会增加**。因此进行两次反转操作后得到的数仍然等于原数，操作过程中必须保证数字位数不变。\n\n**思路与算法**\n\n根据 **提示 $1$** 以及取值范围，我们需要找出两次反转操作前后数字位数均不变的（正）整数。\n\n对于 $0$，进行两次反转操作后仍然为 $0$。\n\n考虑任意**非零**正整数，由于反转操作前后均不保留前导零，因此：\n\n- 对于第一次反转操作，位数不变的充要条件即为该整数**结尾不含 $0$**；\n\n- 对于第二次反转操作，由于第一次操作前的整数不含前导零，因此第二次操作前的整数结尾也不含 $0$，第二次操作前后位数不会改变。\n\n综上，非负整数进行两次反转操作不变的充要条件即为：该整数为 $0$ 或该整数结尾不含 $0$。而后者等价于该数模 $10$ 的余数不为 $0$。我们按照该条件判断并相应返回结果即可。\n\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isSameAfterReversals(int num) {\n        return num == 0 || num % 10 != 0;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def isSameAfterReversals(self, num: int) -> bool:\n        return num == 0 or num % 10 != 0\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。\n\n- 空间复杂度：$O(1)$。"
}