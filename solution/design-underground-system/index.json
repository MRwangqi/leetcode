{
	"titleSlug": "design-underground-system",
	"slug": "she-ji-di-tie-xi-tong-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/design-underground-system/solution/she-ji-di-tie-xi-tong-by-leetcode-solution/",
	"content": "#### 方法一：哈希映射\n\n我们需要两张哈希表。一张用来存编号为 `id` 的乘客的进站信息，键为 `id`，值需要保存两个信息：站点名字和进站时间。另一张用来存放以 `s` 为起点站，`e` 为终点站的已经出站的乘客的信息，键为 `(s, e)`，值也需要保存两个信息：花费的总时间和已经出站的总人数。\n\n在 `checkIn` 的时候，我们对第一张表进行操作，保存进站信息。在 `checkOut` 的时候，我们先从第一张表中查询这个 `id` 的进站信息 `(startStation, startTime)`，然后修改第二张表，把总时间加上 `t - startTime`，总人数自增一。在 `getAverageTime` 的时候直接查询第二张表得到 `(sum, amount)`，计算平均值。\n\n**代码**\n\n```C++ [sol1-C++]\nclass UndergroundSystem {\npublic:\n    using Start = pair <string, int>;\n    using StartEnd = pair <string, string>;\n    using SumAndAmount = pair <int, int>;\n\n    struct StartEndHash {\n        int operator() (const StartEnd& x) const{\n            return hash <string> () (x.first + x.second);\n        }\n    };\n\n    unordered_map <int, Start> startInfo;\n    unordered_map <StartEnd, SumAndAmount, StartEndHash> table;\n    \n    UndergroundSystem() {}\n    \n    void checkIn(int id, string stationName, int t) {\n        startInfo[id] = {stationName, t};\n    }\n    \n    void checkOut(int id, string stationName, int t) {\n        auto startTime = startInfo[id].second;\n        table[{startInfo[id].first, stationName}].first += t - startTime;\n        table[{startInfo[id].first, stationName}].second++;\n    }\n    \n    double getAverageTime(string startStation, string endStation) {\n        auto sum = table[{startStation, endStation}].first;\n        auto amount = table[{startStation, endStation}].second;\n        return double(sum) / amount;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass UndergroundSystem {\n    class Start {\n        String station;\n        int time;\n\n        public Start(String station, int time) {\n            this.station = station;\n            this.time = time;\n        }\n    }\n\n    class StartEnd {\n        String start;\n        String end;\n\n        public StartEnd(String start, String end) {\n            this.start = start;\n            this.end = end;\n        }\n\n        public int hashCode() {\n            return (start + end).hashCode();\n        }\n\n        public boolean equals(Object obj2) {\n            if (obj2 instanceof StartEnd) {\n                StartEnd startEnd2 = (StartEnd) obj2;\n                return this.start.equals(startEnd2.start) && this.end.equals(startEnd2.end);\n            }\n            return false;\n        }\n    }\n\n    class SumAmount {\n        int sum;\n        int amount;\n\n        public SumAmount(int sum, int amount) {\n            this.sum = sum;\n            this.amount = amount;\n        }\n    }\n\n    Map<Integer, Start> startInfo;\n    Map<StartEnd, SumAmount> table;\n\n    public UndergroundSystem() {\n        startInfo = new HashMap<Integer, Start>();\n        table = new HashMap<StartEnd, SumAmount>();\n    }\n    \n    public void checkIn(int id, String stationName, int t) {\n        startInfo.put(id, new Start(stationName, t));\n    }\n    \n    public void checkOut(int id, String stationName, int t) {\n        Start start = startInfo.get(id);\n        String startStation = start.station;\n        int startTime = start.time;\n        StartEnd startEnd = new StartEnd(startStation, stationName);\n        SumAmount sumAmount = table.getOrDefault(startEnd, new SumAmount(0, 0));\n        sumAmount.sum += t - startTime;\n        sumAmount.amount++;\n        table.put(startEnd, sumAmount);\n    }\n    \n    public double getAverageTime(String startStation, String endStation) {\n        StartEnd index = new StartEnd(startStation, endStation);\n        SumAmount sumAmount = table.get(index);\n        int sum = sumAmount.sum, amount = sumAmount.amount;\n        return 1.0 * sum / amount;\n    }\n}\n```\n\n```Python [sol1-Python]\nclass UndergroundSystem:\n    def __init__(self):\n        self.startInfo = dict()\n        self.table = dict()\n\n    def checkIn(self, id: int, stationName: str, t: int) -> None:\n        self.startInfo[id] = (stationName, t)\n\n    def checkOut(self, id: int, stationName: str, t: int) -> None:\n        startTime = self.startInfo[id][1]\n        index = (self.startInfo[id][0], stationName)\n        rec = self.table.get(index, (0, 0))\n        self.table[index] = (rec[0] + t - startTime, rec[1] + 1)\n\n\n    def getAverageTime(self, startStation: str, endStation: str) -> float:\n        index = (startStation, endStation)\n        sum, amount = self.table[index]\n        return sum / amount\n```\n\n**复杂度分析**\n\n+ 时间复杂度：从代码可以看出，这里 `checkIn`、`checkOut` 和 `getAverageTime` 的渐进时间复杂度都是 $O(1)$。\n\n+ 空间复杂度：这里我们用到了两张哈希表作为辅助空间。假设这里操作的总次数为 $n$，那么第一张表的键的总数为 $O(n)$，第二张表键的总数也为 $O(n)$，故渐进空间复杂度为 $O(n ^ 2)$。"
}