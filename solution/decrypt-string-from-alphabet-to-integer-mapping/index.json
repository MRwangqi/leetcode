{
	"titleSlug": "decrypt-string-from-alphabet-to-integer-mapping",
	"slug": "jie-ma-zi-mu-dao-zheng-shu-ying-she-by-leetcode-so",
	"url": "https://leetcode-cn.com/problems/decrypt-string-from-alphabet-to-integer-mapping/solution/jie-ma-zi-mu-dao-zheng-shu-ying-she-by-leetcode-so/",
	"content": "#### 方法一：遍历\n\n我们对字符串 `s` 进行顺序遍历。\n\n当遍历到位置 `i` 时，我们首先向后看两个字符（即 `s[i + 2]`），如果 `s[i + 2]` 存在且为 `'#'`，那么位置 `i`，`i + 1` 和 `i + 2` 表示一个 `'j'` 到 `'z'` 之间的字符，否则位置 `i` 表示一个 `'a'` 到 `'i'` 的字符。\n\n根据对 `s[i + 2]` 的判断，我们可以使用字符串转整数的方法得到对应的字符的 ASCII 码，从而得到字符本身。在这之后，我们将位置 `i` 后移，继续进行遍历直到结束。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string freqAlphabets(string s) {\n        string ans;\n        for (int i = 0; i < s.size(); ++i) {\n            if (i + 2 < s.size() && s[i + 2] == '#') {\n                ans += char((s[i] - '0') * 10 + (s[i + 1] - '1') + 'a');\n                i += 2;\n            }\n            else {\n                ans += char(s[i] - '1' + 'a');\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def freqAlphabets(self, s: str) -> str:\n        def get(st):\n            return chr(int(st) + 96)\n\n        i, ans = 0, \"\"\n        while i < len(s):\n            if i + 2 < len(s) and s[i + 2] == '#':\n                ans += get(s[i : i + 2])\n                i += 2\n            else:\n                ans += get(s[i])\n            i += 1\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是字符串 `s` 的长度。\n\n- 空间复杂度：$O(1)$。"
}