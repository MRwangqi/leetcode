{
	"titleSlug": "license-key-formatting",
	"slug": "mi-yao-ge-shi-hua-by-leetcode-solution-xnae",
	"url": "https://leetcode-cn.com/problems/license-key-formatting/solution/mi-yao-ge-shi-hua-by-leetcode-solution-xnae/",
	"content": "#### 方法一：数学\n\n**思路及解法**\n\n首先我们取出所有不为破折号的字符，题目要求对取出的字符进行重新分组，使得每个分组恰好包含 $k$ 个字符，且必须满足第一个分组包含的字符个数必须小于等于 $k$，但至少要包含 $1$ 个字符。设已经取出的字符的总数为 $n$，只需满足第一个分组包含的字符数目刚好等于 $n \\bmod k$，剩余的分组包含的字符数目刚好等于 $k$。\n+ 我们可以从字符串 $s$ 的末尾开始往前取出字符构建新的字符串 $\\textit{ans}$。每次取出字符时首先判断该字符是否为破折号，如果为破折号则跳过；否则将当前的字符计数 $\\textit{cnt}$ 加 $1$，同时检查如果当前字符为小写字母则将其转化为大写字母，将当前字符加入到字符串 $\\textit{ans}$ 的末尾。\n+ 对字符进行计数时，每隔 $k$ 个字符就在字符串 $\\textit{ans}$ 中添加一个破折号。特殊情况需要处理，字符串 $\\textit{ans}$ 的最后一个字符为破折号则将其去掉。\n+ 我们对已经构建的字符串 $\\textit{ans}$ 进行反转即为返回结果。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string licenseKeyFormatting(string s, int k) {\n        string ans;\n        int cnt = 0;\n        \n        for (int i = s.size() - 1; i >= 0; i--) {\n            if (s[i] != '-') {\n                ans.push_back(toupper(s[i]));\n                cnt++;\n                if (cnt % k == 0) {\n                    ans.push_back('-');\n                }  \n            }\n        }\n        if (ans.size() > 0 && ans.back() == '-') {\n            ans.pop_back();\n        }\n        reverse(ans.begin(), ans.end());\n        \n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String licenseKeyFormatting(String s, int k) {\n        StringBuilder ans = new StringBuilder();\n        int cnt = 0;\n\n        for (int i = s.length() - 1; i >= 0; i--) {\n            if (s.charAt(i) != '-') {\n                cnt++;\n                ans.append(Character.toUpperCase(s.charAt(i)));\n                if (cnt % k == 0) {\n                    ans.append(\"-\");\n                }\n            }\n        }\n        if (ans.length() > 0 && ans.charAt(ans.length() - 1) == '-') {\n            ans.deleteCharAt(ans.length() - 1);\n        }\n        \n        return ans.reverse().toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string LicenseKeyFormatting(string s, int k) {\n        StringBuilder sb = new StringBuilder();\n        int cnt = 0;\n\n        for (int i = s.Length - 1; i >= 0; i --) {\n            if (s[i] != '-') {\n                cnt++;\n                sb.Append(char.ToUpper(s[i]));\n                if (cnt % k == 0) {\n                    sb.Append(\"-\");\n                }\n            }\n        }\n        if (sb.Length > 0 && sb[sb.Length - 1] == '-') {\n            sb.Remove(sb.Length - 1, 1);\n        }\n\n        char[] cs = sb.ToString().ToCharArray();\n        Array.Reverse(cs);\n        return new string(cs);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def licenseKeyFormatting(self, s: str, k: int) -> str:\n        ans = list()\n        cnt = 0\n\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] != \"-\":\n                ans.append(s[i].upper())\n                cnt += 1\n                if cnt % k == 0:\n                    ans.append(\"-\")\n        \n        if ans and ans[-1] == \"-\":\n            ans.pop()\n        \n        return \"\".join(ans[::-1])\n```\n\n```JavaScript [sol1-JavaScript]\nvar licenseKeyFormatting = function(s, k) {\n    const ans = [];\n    let cnt = 0;\n\n    for (let i = s.length - 1; i >= 0; i--) {\n        if (s[i] !== '-') {\n            cnt++;\n            ans.push(s[i].toUpperCase());\n            if (cnt % k === 0) {\n                ans.push(\"-\");\n            }\n        }\n    }\n    if (ans.length > 0 && ans[ans.length - 1] === '-') {\n        ans.pop();\n    }\n    \n    return ans.reverse().join('');\n};\n```\n\n```go [sol1-Golang]\nfunc licenseKeyFormatting(s string, k int) string {\n    ans := []byte{}\n    for i, cnt := len(s)-1, 0; i >= 0; i-- {\n        if s[i] != '-' {\n            ans = append(ans, byte(unicode.ToUpper(rune(s[i]))))\n            cnt++\n            if cnt%k == 0 {\n                ans = append(ans, '-')\n            }\n        }\n    }\n    if len(ans) > 0 && ans[len(ans)-1] == '-' {\n        ans = ans[:len(ans)-1]\n    }\n    for i, n := 0, len(ans); i < n/2; i++ {\n        ans[i], ans[n-1-i] = ans[n-1-i], ans[i]\n    }\n    return string(ans)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为字符串的长度。一共需要两次遍历，第一次遍历字符串求得目标字符串，第二次遍历需要将目标字符串进行反转。\n\n- 空间复杂度：$O(1)$ 或 $O(N)$，其中 $N$ 为字符串的长度。这里的空间复杂度统计的是存储返回值以外的空间。如果使用的语言可以修改字符串，那么反转前后的字符串可以存储在同一片区域，空间复杂度为 $O(1)$；如果不可以修改，那么反转前的字符串需要额外的空间进行存储，空间复杂度为 $O(N)$。"
}