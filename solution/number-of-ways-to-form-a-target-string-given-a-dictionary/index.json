{
	"titleSlug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
	"slug": "1639-cji-hu-shuang-bai-de-dong-tai-gui-h-jmp6",
	"url": "https://leetcode-cn.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/solution/1639-cji-hu-shuang-bai-de-dong-tai-gui-h-jmp6/",
	"content": "![image.png](https://pic.leetcode-cn.com/1643695516-TGIIpo-image.png)\n\n\n### 解题思路\n动态规划\n\n- 定义\n   - d[i][j] 表示对于单词i的序号，对应target序号j的方案数\n   - 其中 i从0开始 [0, n-1]，j从0开始 [0, m-1], n = words[0].size(), m = target.size()\n\n- 辅助\n   - cnt[i][c] 表示对于words的序号i的情况下，字符c的个数，其中c单位[0,25]\n\n- 初始化\n   - 默认都是0\n   - d[0][0] = cnt[0][target[0]] 即对于单词0序号的情况下，target的数量\n\n- 计算\n   - d[i][0] = d[i-1][0] + cnt[i][target[0]] 表示不考虑i的情况下 和 考虑i序号下的数量\n   - d[i][j] 考虑两种该情况\n      - 不使用i序号： d[i-1][j]\n      - 使用i序号： d[i-1][j-1] * cnt[i][target[j]]\n\n- 结果\nd[m-1][n-1]\n\n### 代码\n\n```cpp\nclass Solution {\nprivate:\n    using L = long;\npublic:\n    int numWays(vector<string>& words, string target) {\n        L base = 1000000007;\n        int n = words[0].size();\n        int m = target.size();\n\n        int cnt[n][26];\n        memset(cnt, 0, sizeof(cnt));\n        for (int i = 0; i < n; ++i)\n        {\n            for (string& word : words)\n            {\n                ++cnt[i][word[i] - 'a'];\n            }\n        }\n\n        L d[n][m];\n        memset(d, 0, sizeof(d));\n        d[0][0] = cnt[0][target[0] - 'a'];\n        for (int i = 1; i < n; ++i)\n        {\n            d[i][0] = d[i-1][0] + cnt[i][target[0]- 'a'] % base;\n            for (int j = 1; j < m; ++j)\n            {\n                d[i][j] = (d[i-1][j] + d[i-1][j-1] * cnt[i][target[j]-'a']) % base;\n            }\n        }\n\n\n        return d[n-1][m-1];\n    }\n};\n```"
}