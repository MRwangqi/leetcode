{
	"titleSlug": "triples-with-bitwise-and-equal-to-zero",
	"slug": "982-cji-hu-shuang-bai-de-wei-yun-suan-by-tox5",
	"url": "https://leetcode-cn.com/problems/triples-with-bitwise-and-equal-to-zero/solution/982-cji-hu-shuang-bai-de-wei-yun-suan-by-tox5/",
	"content": "![image.png](https://pic.leetcode-cn.com/1633010860-reVZSH-image.png)\n\n\n### 解题思路\n位运算\n- 基本思路就是先计算任意两个数字的结果，然后再次去遍历单个数字去找可以构建为0的另外两个数字\n- 优化: 快速取记录有多少个两个数字的结果，利用范围是 2^16, 所以用一个数组去记录即可\n- 对于单个数字遍历操作\n   - 先找到可以与为零的目标结果：(1<<16)-1 - curr\n   - 按照目标去遍历每个bit情况：用一个经典消除最小bit的实现来遍历，即x=(x-1)&x\n   - 坑： 对于本身就是0的情况，也要加入计数里\n\n### 代码\n\n```cpp\n\nclass Solution {\npublic:\n    int countTriplets(vector<int>& nums) {\n        int maxNum = 1<<16;\n        int cnt[maxNum];\n        memset(cnt, 0, sizeof(cnt));\n        int n = nums.size();\n\n        // 对于两个数字与结果计数\n        for (int i = 0; i < n; ++i)\n        {\n            for (int j = 0; j < n; ++j)\n            {\n                ++cnt[nums[i] & nums[j]];\n            }\n        }\n\n        // 遍历每个数字去找满足条件的数量\n        int res = 0;\n        for (int i = 0; i < n; ++i)\n        {\n            int full = maxNum - 1 - nums[i];\n            // 遍历各种bit情况去计算: 移除最后一个数字\n            // 这里得注意： 因为数字每次会改变，所以得基于原始值去与，否则会漏掉很多数字\n            for (int j = full; j > 0; j = (j-1)&full)\n            {\n                res += cnt[j];\n            }\n\n            // 不要忘记加上0的情况，任何数字与0与都是0\n            res += cnt[0];\n        }\n        return res;\n    }\n};\n```"
}