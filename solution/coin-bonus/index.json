{
	"titleSlug": "coin-bonus",
	"slug": "by-cheng-liang-yu-8dbo",
	"url": "https://leetcode-cn.com/problems/coin-bonus/solution/by-cheng-liang-yu-8dbo/",
	"content": "![image.png](https://pic.leetcode-cn.com/1664906245-OZsZpM-image.png)\r\n\r\n```python\r\nM = 10 ** 9 + 7\r\nclass Solution:\r\n    def bonus(self, n: int, leadership: List[List[int]], operations: List[List[int]]) -> List[int]:\r\n        e = [[] for _ in range(n + 1)]\r\n        ls, rs = [0] * (n + 1), [0] * (n + 1)\r\n        for x, y in leadership: e[x].append(y)\r\n        n = 0\r\n        def dfs(x):\r\n            nonlocal n\r\n            ls[x] = n\r\n            n += 1\r\n            for y in e[x]: dfs(y)\r\n            rs[x] = n\r\n        dfs(1)\r\n        B = ceil(sqrt(n)) # 每个块的大小\r\n        a = [0] * n # 零散增加的值\r\n        bx = [0] * B # 每个块批量增加的值\r\n        bs = [0] * B # 每个块的和\r\n        def update(l, r, x):\r\n            bl = (l + B - 1) // B\r\n            br = r // B\r\n            if bl > br:\r\n                for i in range(l, r): a[i] += x\r\n                bs[br] += x * (r - l)\r\n                return\r\n            blB = bl * B\r\n            brB = br * B\r\n            for i in range(l, blB): a[i] += x\r\n            if l < blB: bs[bl - 1] += x * (blB - l)\r\n            for i in range(bl, br):\r\n                bx[i] += x\r\n                bs[i] += x * B\r\n            for i in range(brB, r): a[i] += x\r\n            if brB < r: bs[br] += x * (r - brB)\r\n        def query(l, r):\r\n            bl = (l + B - 1) // B\r\n            br = r // B\r\n            if bl > br: return sum(a[l:r]) + bx[br] * (r - l)\r\n            blB = bl * B\r\n            brB = br * B\r\n            res = sum(a[l:blB])\r\n            if l < blB: res += bx[bl - 1] * (blB - l)\r\n            res += sum(bs[bl:br])\r\n            res += sum(a[brB:r])\r\n            if brB < r: res += bx[br] * (r - brB)\r\n            return res\r\n        res = []\r\n        for op in operations:\r\n            x = op[1]\r\n            if op[0] == 1: update(ls[x], ls[x] + 1, op[2])\r\n            elif op[0] == 2: update(ls[x], rs[x], op[2])\r\n            else: res.append(query(ls[x], rs[x]) % M)\r\n        return res\r\n```"
}