{
	"titleSlug": "kth-missing-positive-number",
	"slug": "di-k-ge-que-shi-de-zheng-zheng-shu-by-leetcode-sol",
	"url": "https://leetcode-cn.com/problems/kth-missing-positive-number/solution/di-k-ge-que-shi-de-zheng-zheng-shu-by-leetcode-sol/",
	"content": "#### 方法一：枚举\n\n**思路与算法**\n\n我们可以顺序枚举。\n\n用一个变量 $\\textit{current}$ 表示当前应该出现的数，从 $1$ 开始，每次循环都让该变量递增。用一个指针 $\\textit{ptr}$ 指向数组中没有匹配的第一个元素，每轮循环中将该元素和 $\\textit{current}$ 进行比较，如果相等，则指针后移，否则指针留在原地不动，说明缺失正整数 $\\textit{current}$。我们用 $\\textit{missCount}$ 变量记录缺失的正整数的个数，每次发现有正整数缺失的时候，该变量自增，并且记录这个缺失的正整数，直到我们找到第 $k$ 个缺失的正整数。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findKthPositive(vector<int>& arr, int k) {\n        int missCount = 0, lastMiss = -1, current = 1, ptr = 0; \n        for (missCount = 0; missCount < k; ++current) {\n            if (current == arr[ptr]) {\n                ptr = (ptr + 1 < arr.size()) ? ptr + 1 : ptr;\n            } else {\n                ++missCount;\n                lastMiss = current;\n            }\n        }\n        return lastMiss;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findKthPositive(int[] arr, int k) {\n        int missCount = 0, lastMiss = -1, current = 1, ptr = 0; \n        for (missCount = 0; missCount < k; ++current) {\n            if (current == arr[ptr]) {\n                ptr = (ptr + 1 < arr.length) ? ptr + 1 : ptr;\n            } else {\n                ++missCount;\n                lastMiss = current;\n            }\n        }\n        return lastMiss;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int FindKthPositive(int[] arr, int k) {\n        int missCount = 0, lastMiss = -1, current = 1, ptr = 0; \n        for (missCount = 0; missCount < k; ++current) {\n            if (current == arr[ptr]) {\n                ptr = (ptr + 1 < arr.Length) ? ptr + 1 : ptr;\n            } else {\n                ++missCount;\n                lastMiss = current;\n            }\n        }\n        return lastMiss;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findKthPositive = function(arr, k) {\n    let missCount = 0, lastMiss = -1, current = 1, ptr = 0; \n    for (missCount = 0; missCount < k; ++current) {\n        if (current == arr[ptr]) {\n            ptr = (ptr + 1 < arr.length) ? ptr + 1 : ptr;\n        } else {\n            ++missCount;\n            lastMiss = current;\n        }\n    }\n    return lastMiss;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        missCount = 0\n        lastMiss = -1\n        current = 1\n        ptr = 0\n\n        while missCount < k:\n            if current == arr[ptr]:\n                if ptr + 1 < len(arr):\n                    ptr += 1\n            else:\n                missCount += 1\n                lastMiss = current\n            current += 1\n        \n        return lastMiss\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n + k)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度，$k$ 是给定的整数。最坏情况下遍历完整个数组都没有缺失正整数，还要再将 $\\textit{current}$ 递增 $k$ 次，才能找到最终的答案。\n\n+ 空间复杂度：$O(1)$。\n\n#### 方法二：二分查找\n\n**思路与算法**\n\n对于每个元素 $a_i$，我们都可以唯一确定到第 $i$ 个元素为止缺失的元素数量为 $a_i - i - 1$，例如：\n\n|第 $i$ 个元素| $a_i$ 的值 | 到第 $i$ 个元素为止缺失的元素数量 $p_i$ |\n|-------|------|-----|\n| $a_0$ | $2$  | $1$ |\n| $a_1$ | $3$  | $1$ |\n| $a_2$ | $4$  | $1$ |\n| $a_3$ | $7$  | $3$ |\n| $a_4$ | $11$ | $6$ |\n\n我们发现 $p_i$ 是随 $i$ 非严格递增的，于是可以使用二分查找解决这个问题。我们只要找到一个 $i$ 使得 $p_{i - 1} < k \\leq p_{i}$，就可以确定缺失的第 $k$ 个数为 $k - p_{i - 1} + a_{i - 1}$。也就是说，我们要找到第一个大于等于 $k$ 的 $p_i$。\n\n在实现的时候，我们要注意两个边界的处理：\n\n+ 当 $a_0 > k$ 时，最终 $i = 0$，找不到 $i - 1$，所以提前判断是否 $a_0 > k$，如果是，则直接返回 $k$。\n+ 当最后一个元素对应的缺失个数 $p_{n - 1} < k$ 时，我们并不能找到第一个大于等于 $k$ 的 $p_i$，为了解决这个问题，可以在 $a$ 序列的最后加入一个虚拟的值，这个值的大小为一个不会出现的非常大的数，这样就可以保证一定能找到一个大于等于 $k$ 的 $p_i$。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int findKthPositive(vector<int>& arr, int k) {\n        if (arr[0] > k) {\n            return k;\n        }\n\n        int l = 0, r = arr.size();\n        while (l < r) {\n            int mid = (l + r) >> 1;\n            int x = mid < arr.size() ? arr[mid] : INT_MAX;\n            if (x - mid - 1 >= k) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n\n        return k - (arr[l - 1] - (l - 1) - 1) + arr[l - 1];\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int findKthPositive(int[] arr, int k) {\n        if (arr[0] > k) {\n            return k;\n        }\n\n        int l = 0, r = arr.length;\n        while (l < r) {\n            int mid = (l + r) >> 1;\n            int x = mid < arr.length ? arr[mid] : Integer.MAX_VALUE;\n            if (x - mid - 1 >= k) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n\n        return k - (arr[l - 1] - (l - 1) - 1) + arr[l - 1];\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int FindKthPositive(int[] arr, int k) {\n        if (arr[0] > k) {\n            return k;\n        }\n\n        int l = 0, r = arr.Length;\n        while (l < r) {\n            int mid = (l + r) >> 1;\n            int x = mid < arr.Length ? arr[mid] : int.MaxValue;\n            if (x - mid - 1 >= k) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n\n        return k - (arr[l - 1] - (l - 1) - 1) + arr[l - 1];\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findKthPositive = function(arr, k) {\n    if (arr[0] > k) {\n        return k;\n    }\n\n    let l = 0, r = arr.length;\n    while (l < r) {\n        const mid = Math.floor((l + r) / 2);\n        let x = mid < arr.length ? arr[mid] : 2000000;\n        if (x - mid - 1 >= k) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n\n    return k - (arr[l - 1] - (l - 1) - 1) + arr[l - 1];\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        if arr[0] > k:\n            return k\n        \n        l, r = 0, len(arr)\n        while l < r:\n            mid = (l + r) >> 1\n            x = arr[mid] if mid < len(arr) else 10**9\n            if x - mid - 1 >= k:\n                r = mid\n            else:\n                l = mid + 1\n\n        return k - (arr[l - 1] - (l - 1) - 1) + arr[l - 1]\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(\\log n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。即二分查找的时间复杂度。\n\n+ 空间复杂度：$O(1)$。"
}