{
	"titleSlug": "print-in-order",
	"slug": "an-xu-da-yin-by-leetcode",
	"url": "https://leetcode-cn.com/problems/print-in-order/solution/an-xu-da-yin-by-leetcode/",
	"content": "#### 并发问题\n\n> 并发问题来自[并发计算](https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91%E8%AE%A1%E7%AE%97/9939802?fr=aladdin)的场景，该场景下，程序在多线程（或多进程）中 *同时* 执行。\n\n同时进行并不是完全指进程或线程在不同的物理 CPU 上独立运行，更多情况下，是在一个物理 CPU 上交替执行多个线程或进程。*并发既可在线程中，也可在进程中。*\n\n并发主要为多任务情况设计。但如果应用不当，可能会引发一些漏洞。按照情况不同，可以分为三种：\n\n- **竞态条件**：由于多进程之间的竞争执行，导致程序未按照期望的顺序输出。\n\n- **死锁**：并发程序等待一些必要资源，导致没有程序可以执行。\n\n- **资源不足**：进程被永久剥夺了运行所需的资源。\n\n此题中存在竞态条件。下面展示一个竞态条件的例子。\n\n假设有一个方法 `withdraw(amount)`，如果请求量小于当前余额，则从当前余额中减去请求量，然后返回余额。方法定义如下：\n\n```python [snippet1-Python]\nbalance = 500\ndef withdraw(amount):\n    if (amount < balance):\n        balance -= amount\n    return balance\n```\n\n```java [snippet1-Java]\nint balance = 500;\nint withdraw(int amount) {\n  if (amount < balance) {\n    balance -= amount;\n  }\n  return balance;\n}\n```\n\n我们 *期望* 该方法执行后余额永远不会为负。\n\n但是有可能出现竞态条件，使得余额变为负数。假设两个线程同时使用不同的参数执行该方法。例如：线程 1 执行 `withdraw(amount=400)`，线程 2 执行 `withdraw(amount=200)`。这两个线程的执行顺序如下图所示。在每个时刻只执行一条语句。\n\n![](https://pic.leetcode-cn.com/Figures/1114/1114_race_condition.png){:width=480}\n\n上述流程执行结束后，余额变成负数，这并不是期望的输出。\n\n\n#### 无竞争并发\n\n并发问题有一个共同特征：多个线程/进程之间共享一些资源（例如：余额）。由于无法消除资源共享的约束，防止并发问题就变成了 *资源共享的协调* 问题。\n\n根据这个思路，如果可以确保程序中 **关键部分代码的独占性**（例如：检查和减少余额），就可以防止程序进入不一致的状态。\n\n> 竞争条件的解决方案为：需要某些关键部分代码具有排他性，即在给定的时间内，只有一个线程可以进入关键部分代码。\n\n可以将这种机制看做限制关键部分代码访问的锁。在前面示例的关键部分代码加锁，即检查余额和减少余额的语句。然后重新运行两个线程，会有下图的执行顺序：\n\n![](https://pic.leetcode-cn.com/Figures/1114/1114_lock.png){:width=480}\n\n在该机制下，一旦一个线程进入关键部分，它就可以阻止其他线程进入该关键部分。例如，在时间点 3，`线程 2` 进入关键部分，那么在时间点 4，如果没有锁保护，`线程 1` 就可能进入关键部分。最后两个线程同时运行，保证系统的一致性，并确保余额正确。\n\n如果该线程未被授权进入关键代码，可以认为该线程被阻塞或进入睡眠状态。例如，`线程 1` 在时间点 4 被阻塞，之后关键部分被释放，可以通知其他等待线程。`线程 2` 在时间点 5 释放了关键部分，就可以通知 `线程 1` 进入。\n\n> 这种机制还具有唤醒其他等待线程的功能。\n\n总之，为了防止出现并发竞争状态，需要一种具有两种功能的机制：1）关键部分的访问控制；2）通知阻塞线程。\n\n\n#### 方法一：使用 synchronization\n\n**思路**\n\n题目要求按顺序依次执行三个方法，且每个方法都在单独的线程中运行。为了保证线程的执行顺序，可以在方法之间创建一些依赖关系，即第二个方法必须在第一个方法之后执行，第三个方法必须在第二个方法之后执行。\n\n> 方法对之间的依赖关系形成了所有方法的特定的执行顺序。例如 `A < B`, `B < C`，则所有方法的执行顺序为 `A < B < C`。\n\n![](https://pic.leetcode-cn.com/Figures/1114/1114_partial_order.png){:width=480}\n\n依赖关系可以通过并发机制实现。使用一个共享变量 `firstJobDone` 协调第一个方法与第二个方法的执行顺序，使用另一个共享变量 `secondJobDone` 协调第二个方法与第三个方法的执行顺序。\n\n**算法**\n\n- 首先初始化共享变量 `firstJobDone` 和 `secondJobDone`，初始值表示所有方法未执行。\n\n- 方法 `first()` 没有依赖关系，可以直接执行。在方法最后更新变量 `firstJobDone` 表示该方法执行完成。\n\n- 方法 `second()` 中，检查 `firstJobDone` 的状态。如果未更新则进入等待状态，否则执行方法 `second()`。在方法末尾，更新变量 `secondJobDone` 表示方法 `second()` 执行完成。\n\n- 方法 `third()` 中，检查 `secondJobDone` 的状态。与方法 `second()` 类似，执行 `third()` 之前，需要先等待 `secondJobDone` 的状态。\n\n![](https://pic.leetcode-cn.com/Figures/1114/1114_flow.png){:width=480}\n\n**实现**\n\n上述算法的实现在很大程度上取决于选择的编程语言。尽管在 Java，C++ 和 Python 中都存在[互斥](https://baike.baidu.com/item/%E4%BA%92%E6%96%A5%E4%BA%8B%E4%BB%B6/9980508?fr=aladdin)与[信号量](https://baike.baidu.com/item/%E4%BF%A1%E5%8F%B7%E9%87%8F/9807501?fr=aladdin)，但不同语言对并发机制有不同实现。\n\n```python [solution1-Python]\nfrom threading import Lock\n\nclass Foo:\n    def __init__(self):\n        self.firstJobDone = Lock()\n        self.secondJobDone = Lock()\n        self.firstJobDone.acquire()\n        self.secondJobDone.acquire()\n\n    def first(self, printFirst: 'Callable[[], None]') -> None:\n        # printFirst() outputs \"first\".\n        printFirst()\n        # Notify the thread that is waiting for the first job to be done.\n        self.firstJobDone.release()\n\n    def second(self, printSecond: 'Callable[[], None]') -> None:\n        # Wait for the first job to be done\n        with self.firstJobDone:\n            # printSecond() outputs \"second\".\n            printSecond()\n            # Notify the thread that is waiting for the second job to be done.\n            self.secondJobDone.release()\n\n    def third(self, printThird: 'Callable[[], None]') -> None:\n\n        # Wait for the second job to be done.\n        with self.secondJobDone:\n            # printThird() outputs \"third\".\n            printThird()\n```\n\n```cpp [solution1-Cpp]\n#include <semaphore.h>\n\nclass Foo {\n\nprotected:\n    sem_t firstJobDone;\n    sem_t secondJobDone;\n\npublic:\n\n    Foo() {\n        sem_init(&firstJobDone, 0, 0);\n        sem_init(&secondJobDone, 0, 0);\n    }\n\n    void first(function<void()> printFirst) {\n        // printFirst() outputs \"first\".\n        printFirst();\n        sem_post(&firstJobDone);\n    }\n\n    void second(function<void()> printSecond) {\n        sem_wait(&firstJobDone);\n        // printSecond() outputs \"second\".\n        printSecond();\n        sem_post(&secondJobDone);\n        \n    }\n\n    void third(function<void()> printThird) {\n        sem_wait(&secondJobDone);\n        // printThird() outputs \"third\".\n        printThird();\n    }\n};\n```\n\n```java [solution1-Java]\nclass Foo {\n\n  private AtomicInteger firstJobDone = new AtomicInteger(0);\n  private AtomicInteger secondJobDone = new AtomicInteger(0);\n\n  public Foo() {}\n\n  public void first(Runnable printFirst) throws InterruptedException {\n    // printFirst.run() outputs \"first\".\n    printFirst.run();\n    // mark the first job as done, by increasing its count.\n    firstJobDone.incrementAndGet();\n  }\n\n  public void second(Runnable printSecond) throws InterruptedException {\n    while (firstJobDone.get() != 1) {\n      // waiting for the first job to be done.\n    }\n    // printSecond.run() outputs \"second\".\n    printSecond.run();\n    // mark the second as done, by increasing its count.\n    secondJobDone.incrementAndGet();\n  }\n\n  public void third(Runnable printThird) throws InterruptedException {\n    while (secondJobDone.get() != 1) {\n      // waiting for the second job to be done.\n    }\n    // printThird.run() outputs \"third\".\n    printThird.run();\n  }\n}\n\n```"
}