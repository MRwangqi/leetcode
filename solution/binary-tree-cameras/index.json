{
	"titleSlug": "binary-tree-cameras",
	"slug": "jian-kong-er-cha-shu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/binary-tree-cameras/solution/jian-kong-er-cha-shu-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n**思路与算法**\n\n本题以二叉树为背景，不难想到用递归的方式求解。本题的难度在于如何从左、右子树的状态，推导出父节点的状态。\n\n为了表述方便，我们约定：如果某棵树的所有节点都被监控，则称该树被「覆盖」。\n\n假设当前节点为 $\\textit{root}$，其左右孩子为 $\\textit{left}, \\textit{right}$。如果要覆盖以 $\\textit{root}$ 为根的树，有两种情况：\n- 若在 $\\textit{root}$ 处安放摄像头，则孩子 $\\textit{left}, \\textit{right}$ 一定也会被监控到。此时，只需要保证 $\\textit{left}$ 的两棵子树被覆盖，同时保证  $\\textit{right}$ 的两棵子树也被覆盖即可。\n- 否则， 如果 $\\textit{root}$ 处不安放摄像头，则除了覆盖 $\\textit{root}$ 的两棵子树之外，孩子 $\\textit{left}, \\textit{right}$ 之一必须要安装摄像头，从而保证 $\\textit{root}$ 会被监控到。\n\n根据上面的讨论，能够分析出，对于每个节点 $\\textit{root}$ ，需要维护三种类型的状态：\n- 状态 $a$：$\\textit{root}$ 必须放置摄像头的情况下，覆盖整棵树需要的摄像头数目。\n- 状态 $b$：覆盖整棵树需要的摄像头数目，无论 $\\textit{root}$ 是否放置摄像头。\n- 状态 $c$：覆盖两棵子树需要的摄像头数目，无论节点 $\\textit{root}$ 本身是否被监控到。\n\n根据它们的定义，一定有 $a \\geq b \\geq c$。\n\n对于节点 $\\textit{root}$ 而言，设其左右孩子 $\\textit{left}, \\textit{right}$ 对应的状态变量分别为 $(l_a,l_b,l_c)$ 以及 $(r_a,r_b,r_c)$。根据一开始的讨论，我们已经得到了求解 $a,b$ 的过程：\n- $a = l_c + r_c + 1$\n- $b = \\min(a, \\min(l_a + r_b, r_a + l_b))$ \n\n对于 $c$ 而言，要保证两棵子树被完全覆盖，要么 $\\textit{root}$ 处放置一个摄像头，需要的摄像头数目为 $a$；要么 $\\textit{root}$ 处不放置摄像头，此时两棵子树分别保证自己被覆盖，需要的摄像头数目为 $l_b + r_b$。\n\n需要额外注意的是，对于 $\\textit{root}$ 而言，如果其某个孩子为空，则不能通过在该孩子处放置摄像头的方式，监控到当前节点。因此，该孩子对应的变量 $a$ 应当返回一个大整数，用于标识不可能的情形。\n\n最终，根节点的状态变量 $b$ 即为要求出的答案。\n\n**代码**\n\n```C++ [sol1-C++]\nstruct Status {\n    int a, b, c;\n};\n\nclass Solution {\npublic:\n    Status dfs(TreeNode* root) {\n        if (!root) {\n            return {INT_MAX / 2, 0, 0};\n        }\n        auto [la, lb, lc] = dfs(root->left);\n        auto [ra, rb, rc] = dfs(root->right);\n        int a = lc + rc + 1;\n        int b = min(a, min(la + rb, ra + lb));\n        int c = min(a, lb + rb);\n        return {a, b, c};\n    }\n\n    int minCameraCover(TreeNode* root) {\n        auto [a, b, c] = dfs(root);\n        return b;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minCameraCover(TreeNode root) {\n        int[] array = dfs(root);\n        return array[1];\n    }\n\n    public int[] dfs(TreeNode root) {\n        if (root == null) {\n            return new int[]{Integer.MAX_VALUE / 2, 0, 0};\n        }\n        int[] leftArray = dfs(root.left);\n        int[] rightArray = dfs(root.right);\n        int[] array = new int[3];\n        array[0] = leftArray[2] + rightArray[2] + 1;\n        array[1] = Math.min(array[0], Math.min(leftArray[0] + rightArray[1], rightArray[0] + leftArray[1]));\n        array[2] = Math.min(array[0], leftArray[1] + rightArray[1]);\n        return array;\n    }\n}\n```\n\n```Golang [sol1-Golang]\nconst inf = math.MaxInt32 / 2 // 或 math.MaxInt64 / 2\n\nfunc minCameraCover(root *TreeNode) int {\n    var dfs func(*TreeNode) (a, b, c int)\n    dfs = func(node *TreeNode) (a, b, c int) {\n        if node == nil {\n            return inf, 0, 0\n        }\n        la, lb, lc := dfs(node.Left)\n        ra, rb, rc := dfs(node.Right)\n        a = lc + rc + 1\n        b = min(a, min(la+rb, ra+lb))\n        c = min(a, lb+rb)\n        return\n    }\n    _, ans, _ := dfs(root)\n    return ans\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minCameraCover = function(root) {\n    const dfs = (root) => {\n        if (!root) {\n            return [Math.floor(Number.MAX_SAFE_INTEGER / 2), 0, 0];\n        }\n        const [la, lb, lc] = dfs(root.left);\n        const [ra, rb, rc] = dfs(root.right);\n        const a = lc + rc + 1;\n        const b = Math.min(a, Math.min(la + rb, ra + lb));\n        const c = Math.min(a, lb + rb);\n        return [a, b, c];\n    }\n\n    return dfs(root)[1];\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minCameraCover(self, root: TreeNode) -> int:\n        def dfs(root: TreeNode) -> List[int]:\n            if not root:\n                return [float(\"inf\"), 0, 0]\n            \n            la, lb, lc = dfs(root.left)\n            ra, rb, rc = dfs(root.right)\n            a = lc + rc + 1\n            b = min(a, la + rb, ra + lb)\n            c = min(a, lb + rb)\n            return [a, b, c]\n        \n        a, b, c = dfs(root)\n        return b\n```\n\n```C [sol1-C]\nstruct Status {\n    int a, b, c;\n};\n\nstruct Status dfs(struct TreeNode* root) {\n    if (!root) {\n        return (struct Status){INT_MAX / 2, 0, 0};\n    }\n    struct Status l = dfs(root->left);\n    struct Status r = dfs(root->right);\n    int a = l.c + r.c + 1;\n    int b = fmin(a, fmin(l.a + r.b, r.a + l.b));\n    int c = fmin(a, l.b + r.b);\n    return (struct Status){a, b, c};\n}\n\nint minCameraCover(struct TreeNode* root) {\n    struct Status ret = dfs(root);\n    return ret.b;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为树中节点的数量。对于每个节点，我们在常数时间内计算出 $a,b,c$ 三个状态变量。\n\n- 空间复杂度：$O(N)$。每次递归调用时，我们需要开辟常数大小的空间存储状态变量的取值，而递归栈的深度等于树的深度，即 $O(N)$。"
}