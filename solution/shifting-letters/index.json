{
	"titleSlug": "shifting-letters",
	"slug": "zi-mu-yi-wei-by-leetcode",
	"url": "https://leetcode-cn.com/problems/shifting-letters/solution/zi-mu-yi-wei-by-leetcode/",
	"content": "#### 方法一：前缀和【通过】\n\n**思路**\n\n知道第 `i` 个字母最终移位多少次。\n\n**算法**\n\n因为对第 `i` 个字母及后面字母的移位都会导致第 `i` 个字母移位，所以第 `i` 个字母共移位 `shifts[i] + shifts[i+1] + ... + shifts[shifts.length - 1]` 次。\n\n假设第 `i` 个字母移位 `X` 次，那么第 `i + 1` 个字母移位 `X - shifts[i]` 次。\n\n例如 `S.length = 4`，那么 `S[0]` 移位 `X = shifts[0] + shifts[1] + shifts[2] + shifts[3]` 次，`S[1]` 移位 `shifts[1] + shifts[2] + shifts[3]` 次，`S[2]` 移位 `shifts[2] + shifts[3]` 次，以此类推。\n\n当 `i` 增加时，令 `X -= shifts[i]` 计算下一个字母的移位次数。\n\n```java [solution1-Java]\nclass Solution {\n    public String shiftingLetters(String S, int[] shifts) {\n        StringBuilder ans = new StringBuilder();\n        int X = 0;\n        for (int shift: shifts)\n            X = (X + shift) % 26;\n\n        for (int i = 0; i < S.length(); ++i) {\n            int index = S.charAt(i) - 'a';\n            ans.append((char) ((index + X) % 26 + 97));\n            X = Math.floorMod(X - shifts[i], 26);\n        }\n\n        return ans.toString();\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def shiftingLetters(self, S, shifts):\n        ans = []\n        X = sum(shifts) % 26\n        for i, c in enumerate(S):\n            index = ord(c) - ord('a')\n            ans.append(chr(ord('a') + (index + X) % 26))\n            X = (X - shifts[i]) % 26\n\n        return \"\".join(ans)\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 `S` 和 `shifts` 的长度。\n\n* 空间复杂度：$O(N)$，存储移位后的字符串。"
}