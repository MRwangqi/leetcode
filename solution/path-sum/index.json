{
	"titleSlug": "path-sum",
	"slug": "lu-jing-zong-he-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/path-sum/solution/lu-jing-zong-he-by-leetcode-solution/",
	"content": "### 📺 视频题解 \n![112. 路径总和.mp4](fa34574c-0a90-48e9-8487-01d91349aade)\n\n### 📖 文字题解\n#### 写在前面\n\n注意到本题的要求是，询问是否有从「根节点」到某个「叶子节点」经过的路径上的节点之和等于目标和。核心思想是对树进行一次遍历，在遍历时记录从根节点到当前节点的路径和，以防止重复计算。\n\n> 需要特别注意的是，给定的 `root` 可能为空。\n\n#### 方法一：广度优先搜索\n\n**思路及算法**\n\n首先我们可以想到使用广度优先搜索的方式，记录从根节点到当前节点的路径和，以防止重复计算。\n\n这样我们使用两个队列，分别存储将要遍历的节点，以及根节点到这些节点的路径和即可。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/112/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/112/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/112/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/112/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/112/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/112/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/112/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/112/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/112/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/112/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/112/11.png),![fig12](https://assets.leetcode-cn.com/solution-static/112/12.png)>\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode *root, int sum) {\n        if (root == nullptr) {\n            return false;\n        }\n        queue<TreeNode *> que_node;\n        queue<int> que_val;\n        que_node.push(root);\n        que_val.push(root->val);\n        while (!que_node.empty()) {\n            TreeNode *now = que_node.front();\n            int temp = que_val.front();\n            que_node.pop();\n            que_val.pop();\n            if (now->left == nullptr && now->right == nullptr) {\n                if (temp == sum) {\n                    return true;\n                }\n                continue;\n            }\n            if (now->left != nullptr) {\n                que_node.push(now->left);\n                que_val.push(now->left->val + temp);\n            }\n            if (now->right != nullptr) {\n                que_node.push(now->right);\n                que_val.push(now->right->val + temp);\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean hasPathSum(TreeNode root, int sum) {\n        if (root == null) {\n            return false;\n        }\n        Queue<TreeNode> queNode = new LinkedList<TreeNode>();\n        Queue<Integer> queVal = new LinkedList<Integer>();\n        queNode.offer(root);\n        queVal.offer(root.val);\n        while (!queNode.isEmpty()) {\n            TreeNode now = queNode.poll();\n            int temp = queVal.poll();\n            if (now.left == null && now.right == null) {\n                if (temp == sum) {\n                    return true;\n                }\n                continue;\n            }\n            if (now.left != null) {\n                queNode.offer(now.left);\n                queVal.offer(now.left.val + temp);\n            }\n            if (now.right != null) {\n                queNode.offer(now.right);\n                queVal.offer(now.right.val + temp);\n            }\n        }\n        return false;\n    }\n}\n```\n\n```golang [sol1-Golang]\nfunc hasPathSum(root *TreeNode, sum int) bool {\n    if root == nil {\n        return false\n    }\n    queNode := []*TreeNode{}\n    queVal := []int{}\n    queNode = append(queNode, root)\n    queVal = append(queVal, root.Val)\n    for len(queNode) != 0 {\n        now := queNode[0]\n        queNode = queNode[1:]\n        temp := queVal[0]\n        queVal = queVal[1:]\n        if now.Left == nil && now.Right == nil {\n            if temp == sum {\n                return true\n            }\n            continue\n        }\n        if now.Left != nil {\n            queNode = append(queNode, now.Left)\n            queVal = append(queVal, now.Left.Val + temp)\n        }\n        if now.Right != nil {\n            queNode = append(queNode, now.Right)\n            queVal = append(queVal, now.Right.Val + temp)\n        }\n    }\n    return false\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def hasPathSum(self, root: TreeNode, sum: int) -> bool:\n        if not root:\n            return False\n        que_node = collections.deque([root])\n        que_val = collections.deque([root.val])\n        while que_node:\n            now = que_node.popleft()\n            temp = que_val.popleft()\n            if not now.left and not now.right:\n                if temp == sum:\n                    return True\n                continue\n            if now.left:\n                que_node.append(now.left)\n                que_val.append(now.left.val + temp)\n            if now.right:\n                que_node.append(now.right)\n                que_val.append(now.right.val + temp)\n        return False\n```\n\n```C [sol1-C]\ntypedef struct queNode {\n    int val;\n    struct TreeNode *node;\n    struct queNode *next;\n} queNode;\n\nvoid init(struct queNode **p, int val, struct TreeNode *node) {\n    (*p) = (struct queNode *)malloc(sizeof(struct queNode));\n    (*p)->val = val;\n    (*p)->node = node;\n    (*p)->next = NULL;\n}\n\nbool hasPathSum(struct TreeNode *root, int sum) {\n    if (root == NULL) {\n        return false;\n    }\n    struct queNode *queLeft, *queRight;\n    init(&queLeft, root->val, root);\n    queRight = queLeft;\n    while (queLeft != NULL) {\n        struct TreeNode *now = queLeft->node;\n        int temp = queLeft->val;\n        if (now->left == NULL && now->right == NULL) {\n            if (temp == sum) return true;\n        }\n        if (now->left != NULL) {\n            init(&queRight->next, now->left->val + temp, now->left);\n            queRight = queRight->next;\n        }\n        if (now->right != NULL) {\n            init(&queRight->next, now->right->val + temp, now->right);\n            queRight = queRight->next;\n        }\n        queLeft = queLeft->next;\n    }\n    return false;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是树的节点数。对每个节点访问一次。\n  \n- 空间复杂度：$O(N)$，其中 $N$ 是树的节点数。空间复杂度主要取决于队列的开销，队列中的元素个数不会超过树的节点数。\n\n#### 方法二：递归\n\n**思路及算法**\n\n观察要求我们完成的函数，我们可以归纳出它的功能：询问是否存在从当前节点 `root` 到叶子节点的路径，满足其路径和为 `sum`。\n\n假定从根节点到当前节点的值之和为 `val`，我们可以将这个大问题转化为一个小问题：是否存在从当前节点的子节点到叶子的路径，满足其路径和为 `sum - val`。 \n\n不难发现这满足递归的性质，若当前节点就是叶子节点，那么我们直接判断 `sum` 是否等于 `val` 即可（因为路径和已经确定，就是当前节点的值，我们只需要判断该路径和是否满足条件）。若当前节点不是叶子节点，我们只需要递归地询问它的子节点是否能满足条件即可。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode *root, int sum) {\n        if (root == nullptr) {\n            return false;\n        }\n        if (root->left == nullptr && root->right == nullptr) {\n            return sum == root->val;\n        }\n        return hasPathSum(root->left, sum - root->val) ||\n               hasPathSum(root->right, sum - root->val);\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean hasPathSum(TreeNode root, int sum) {\n        if (root == null) {\n            return false;\n        }\n        if (root.left == null && root.right == null) {\n            return sum == root.val;\n        }\n        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);\n    }\n}\n```\n\n```golang [sol2-Golang]\nfunc hasPathSum(root *TreeNode, sum int) bool {\n    if root == nil {\n        return false\n    }\n    if root.Left == nil && root.Right == nil {\n        return sum == root.Val\n    }\n    return hasPathSum(root.Left, sum - root.Val) || hasPathSum(root.Right, sum - root.Val)\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def hasPathSum(self, root: TreeNode, sum: int) -> bool:\n        if not root:\n            return False\n        if not root.left and not root.right:\n            return sum == root.val\n        return self.hasPathSum(root.left, sum - root.val) or self.hasPathSum(root.right, sum - root.val)\n```\n\n```C [sol2-C]\nbool hasPathSum(struct TreeNode *root, int sum) {\n    if (root == NULL) {\n        return false;\n    }\n    if (root->left == NULL && root->right == NULL) {\n        return sum == root->val;\n    }\n    return hasPathSum(root->left, sum - root->val) ||\n           hasPathSum(root->right, sum - root->val);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是树的节点数。对每个节点访问一次。\n  \n- 空间复杂度：$O(H)$，其中 $H$ 是树的高度。空间复杂度主要取决于递归时栈空间的开销，最坏情况下，树呈现链状，空间复杂度为 $O(N)$。平均情况下树的高度与节点数的对数正相关，空间复杂度为 $O(\\log N)$。"
}