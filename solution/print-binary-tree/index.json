{
	"titleSlug": "print-binary-tree",
	"slug": "shu-chu-er-cha-shu-by-leetcode-solution-cnxu",
	"url": "https://leetcode-cn.com/problems/print-binary-tree/solution/shu-chu-er-cha-shu-by-leetcode-solution-cnxu/",
	"content": "#### 方法一：深度优先搜索\n\n**思路与算法**\n\n我们可以通过深度优先搜索来解决此题。首先通过深度优先搜索来得到二叉树的高度 $\\textit{height}$（注意高度从 $0$ 开始），然后创建一个行数为 $m = \\textit{height} + 1$，列数为 $n = 2^{\\textit{height} + 1} - 1$ 的答案数组 $\\textit{res}$ 放置节点的值（字符串形式）。根节点的值应当放在当前空间的第一行正中间。根节点所在的行与列会将剩余空间划分为两部分（左下部分和右下部分），然后递归地将左子树输出在左下部分空间，右子树输出在右下部分空间即可。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def printTree(self, root: Optional[TreeNode]) -> List[List[str]]:\n        def calDepth(node: Optional[TreeNode]) -> int:\n            return max(calDepth(node.left) + 1 if node.left else 0, calDepth(node.right) + 1 if node.right else 0)\n        height = calDepth(root)\n\n        m = height + 1\n        n = 2 ** m - 1\n        ans = [[''] * n for _ in range(m)]\n        def dfs(node: Optional[TreeNode], r: int, c: int) -> None:\n            ans[r][c] = str(node.val)\n            if node.left:\n                dfs(node.left, r + 1, c - 2 ** (height - r - 1))\n            if node.right:\n                dfs(node.right, r + 1, c + 2 ** (height - r - 1))\n        dfs(root, 0, (n - 1) // 2)\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int calDepth(TreeNode* root) {\n        int h = 0;\n        if (root->left) {\n            h = max(h, calDepth(root->left) + 1);\n        }\n        if (root->right) {\n            h = max(h, calDepth(root->right) + 1);\n        }\n        return h;\n    }\n\n    void dfs(vector<vector<string>>& res, TreeNode* root, int r, int c, const int& height) {\n        res[r][c] = to_string(root->val);\n        if (root->left) {\n            dfs(res, root->left, r + 1, c - (1 << (height - r - 1)), height);\n        }\n        if (root->right) {\n            dfs(res, root->right, r + 1, c + (1 << (height - r - 1)), height);\n        }\n    }\n\n    vector<vector<string>> printTree(TreeNode* root) {\n        int height = calDepth(root);\n        int m = height + 1;\n        int n = (1 << (height + 1)) - 1;\n        vector<vector<string>> res(m, vector<string>(n, \"\"));\n        dfs(res, root, 0, (n - 1) / 2, height);\n        return res;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<List<String>> printTree(TreeNode root) {\n        int height = calDepth(root);\n        int m = height + 1;\n        int n = (1 << (height + 1)) - 1;\n        List<List<String>> res = new ArrayList<List<String>>();\n        for (int i = 0; i < m; i++) {\n            List<String> row = new ArrayList<String>();\n            for (int j = 0; j < n; j++) {\n                row.add(\"\");\n            }\n            res.add(row);\n        }\n        dfs(res, root, 0, (n - 1) / 2, height);\n        return res;\n    }\n\n    public int calDepth(TreeNode root) {\n        int h = 0;\n        if (root.left != null) {\n            h = Math.max(h, calDepth(root.left) + 1);\n        }\n        if (root.right != null) {\n            h = Math.max(h, calDepth(root.right) + 1);\n        }\n        return h;\n    }\n\n    public void dfs(List<List<String>> res, TreeNode root, int r, int c, int height) {\n        res.get(r).set(c, Integer.toString(root.val));\n        if (root.left != null) {\n            dfs(res, root.left, r + 1, c - (1 << (height - r - 1)), height);\n        }\n        if (root.right != null) {\n            dfs(res, root.right, r + 1, c + (1 << (height - r - 1)), height);\n        }\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<IList<string>> PrintTree(TreeNode root) {\n        int height = CalDepth(root);\n        int m = height + 1;\n        int n = (1 << (height + 1)) - 1;\n        IList<IList<string>> res = new List<IList<string>>();\n        for (int i = 0; i < m; i++) {\n            IList<string> row = new List<string>();\n            for (int j = 0; j < n; j++) {\n                row.Add(\"\");\n            }\n            res.Add(row);\n        }\n        DFS(res, root, 0, (n - 1) / 2, height);\n        return res;\n    }\n\n    public int CalDepth(TreeNode root) {\n        int h = 0;\n        if (root.left != null) {\n            h = Math.Max(h, CalDepth(root.left) + 1);\n        }\n        if (root.right != null) {\n            h = Math.Max(h, CalDepth(root.right) + 1);\n        }\n        return h;\n    }\n\n    public void DFS(IList<IList<string>> res, TreeNode root, int r, int c, int height) {\n        res[r][c] = root.val.ToString();\n        if (root.left != null) {\n            DFS(res, root.left, r + 1, c - (1 << (height - r - 1)), height);\n        }\n        if (root.right != null) {\n            DFS(res, root.right, r + 1, c + (1 << (height - r - 1)), height);\n        }\n    }\n}\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define MAX_VAL_LEN 32\n\nint calDepth(struct TreeNode* root) {\n    int h = 0;\n    if (root->left) {\n        h = MAX(h, calDepth(root->left) + 1);\n    }\n    if (root->right) {\n        h = MAX(h, calDepth(root->right) + 1);\n    }\n    return h;\n}\n\nvoid dfs(char ***res, struct TreeNode* root, int r, int c, const int height) {\n    sprintf(res[r][c], \"%d\", root->val);\n    if (root->left) {\n        dfs(res, root->left, r + 1, c - (1 << (height - r - 1)), height);\n    }\n    if (root->right) {\n        dfs(res, root->right, r + 1, c + (1 << (height - r - 1)), height);\n    }\n}\n\nchar ***printTree(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {\n    int height = calDepth(root);\n    int m = height + 1;\n    int n = (1 << (height + 1)) - 1;\n    char ***res = (char ***)malloc(sizeof(char **) * m);\n    for (int i = 0; i < m; i++) {\n        res[i] = (char **)malloc(sizeof(char *) * n);\n        for (int j = 0; j < n; j++) {\n            res[i][j] = (char *)malloc(sizeof(char) * MAX_VAL_LEN);\n            res[i][j][0] = '\\0';\n        }\n    }\n    dfs(res, root, 0, (n - 1) / 2, height);\n    *returnSize = m;\n    *returnColumnSizes = (int *)malloc(sizeof(int) * m);\n    for (int i = 0; i < m; i++) {\n        (*returnColumnSizes)[i] = n;\n    }\n    return res;\n}\n```\n\n```go [sol1-Golang]\nfunc calDepth(node *TreeNode) int {\n    h := 0\n    if node.Left != nil {\n        h = calDepth(node.Left) + 1\n    }\n    if node.Right != nil {\n        h = max(h, calDepth(node.Right)+1)\n    }\n    return h\n}\n\nfunc printTree(root *TreeNode) [][]string {\n    height := calDepth(root)\n    m := height + 1\n    n := 1<<m - 1\n    ans := make([][]string, m)\n    for i := range ans {\n        ans[i] = make([]string, n)\n    }\n    var dfs func(*TreeNode, int, int)\n    dfs = func(node *TreeNode, r, c int) {\n        ans[r][c] = strconv.Itoa(node.Val)\n        if node.Left != nil {\n            dfs(node.Left, r+1, c-1<<(height-r-1))\n        }\n        if node.Right != nil {\n            dfs(node.Right, r+1, c+1<<(height-r-1))\n        }\n    }\n    dfs(root, 0, (n-1)/2)\n    return ans\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar printTree = function(root) {\n    const calDepth = (root) => {\n        let h = 0;\n        if (root.left) {\n            h = Math.max(h, calDepth(root.left) + 1);\n        }\n        if (root.right) {\n            h = Math.max(h, calDepth(root.right) + 1);\n        }\n        return h;\n    }\n\n    const dfs = (res, root, r, c, height) => {\n        res[r][c] = root.val.toString();\n        if (root.left) {\n            dfs(res, root.left, r + 1, c - (1 << (height - r - 1)), height);\n        }\n        if (root.right) {\n            dfs(res, root.right, r + 1, c + (1 << (height - r - 1)), height);\n        }\n    }\n\n    const height = calDepth(root);\n    const m = height + 1;\n    const n = (1 << (height + 1)) - 1;\n    const res = new Array(m).fill(0).map(() => new Array(n).fill(''));\n    dfs(res, root, 0, Math.floor((n - 1) / 2), height);\n    return res;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\textit{height} \\times 2^\\textit{height})$，其中 $\\textit{height}$ 是二叉树的高度。需要填充 $(\\textit{height} + 1) \\times (2^{\\textit{height} + 1} - 1)$ 的数组。\n\n- 空间复杂度：$O(\\textit{height})$，其中 $\\textit{height}$ 是二叉树的高度。空间复杂度主要是递归调用的栈空间，取决于二叉树的高度。注意返回值不计入空间复杂度。\n\n#### 方法二：广度优先搜索\n\n**思路与算法**\n\n我们也可以通过广度优先搜索来解决此题。首先通过广度优先搜索来得到二叉树的高度 $\\textit{height}$，然后创建一个行数为 $m = \\textit{height} + 1$，列数为 $n = 2^{\\textit{height} + 1} - 1$ 的答案数组 $\\textit{res}$ 放置节点的值（字符串形式）。使用广度优先搜索遍历每一个节点时，记录每一个节点对应的放置空间，每一个节点的值放置在对应空间的第一行正中间，然后其所在的行和列会将剩余空间划分为两部分（左下部分和右下部分），并把它的非空左子节点和非空右子节点以及它们的对应的放置空间放入队列即可。特别地，根节点的放置空间为整个 $\\textit{res}$ 数组。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def printTree(self, root: Optional[TreeNode]) -> List[List[str]]:\n        def calDepth(root: Optional[TreeNode]) -> int:\n            h = -1\n            q = [root]\n            while q:\n                h += 1\n                tmp = q\n                q = []\n                for node in tmp:\n                    if node.left:\n                        q.append(node.left)\n                    if node.right:\n                        q.append(node.right)\n            return h\n        height = calDepth(root)\n\n        m = height + 1\n        n = 2 ** m - 1\n        ans = [[''] * n for _ in range(m)]\n        q = deque([(root, 0, (n - 1) // 2)])\n        while q:\n            node, r, c = q.popleft()\n            ans[r][c] = str(node.val)\n            if node.left:\n                q.append((node.left, r + 1, c - 2 ** (height - r - 1)))\n            if node.right:\n                q.append((node.right, r + 1, c + 2 ** (height - r - 1)))\n        return ans\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int calDepth(TreeNode* root) {\n        int res = -1;\n        queue<TreeNode*> q;\n        q.push(root);\n        while (!q.empty()) {\n            int len = q.size();\n            res++;\n            while (len) {\n                len--;\n                auto t = q.front();\n                q.pop();\n                if (t->left) {\n                    q.push(t->left);\n                }\n                if (t->right) {\n                    q.push(t->right);\n                }\n            }\n        }\n        return res;\n    }\n\n    vector<vector<string>> printTree(TreeNode* root) {\n        int height = calDepth(root);\n        int m = height + 1;\n        int n = (1 << (height + 1)) - 1;\n        vector<vector<string>> res(m, vector<string>(n, \"\"));\n        queue<tuple<TreeNode*, int, int>> q;\n        q.push({root, 0, (n - 1) / 2});\n        while (!q.empty()) {\n            auto t = q.front();\n            q.pop();\n            int r = get<1>(t), c = get<2>(t);\n            res[r][c] = to_string(get<0>(t)->val);\n            if (get<0>(t)->left) {\n                q.push({get<0>(t)->left, r + 1, c - (1 << (height - r - 1))});\n            }\n            if (get<0>(t)->right) {\n                q.push({get<0>(t)->right, r + 1, c + (1 << (height - r - 1))});\n            }\n        }\n        return res;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    class Tuple {\n        TreeNode node;\n        int r;\n        int c;\n\n        public Tuple(TreeNode node, int r, int c) {\n            this.node = node;\n            this.r = r;\n            this.c = c;\n        }\n    }\n\n    public List<List<String>> printTree(TreeNode root) {\n        int height = calDepth(root);\n        int m = height + 1;\n        int n = (1 << (height + 1)) - 1;\n        List<List<String>> res = new ArrayList<List<String>>();\n        for (int i = 0; i < m; i++) {\n            List<String> row = new ArrayList<String>();\n            for (int j = 0; j < n; j++) {\n                row.add(\"\");\n            }\n            res.add(row);\n        }\n        Queue<Tuple> queue = new ArrayDeque<Tuple>();\n        queue.offer(new Tuple(root, 0, (n - 1) / 2));\n        while (!queue.isEmpty()) {\n            Tuple t = queue.poll();\n            TreeNode node = t.node;\n            int r = t.r, c = t.c;\n            res.get(r).set(c, Integer.toString(node.val));\n            if (node.left != null) {\n                queue.offer(new Tuple(node.left, r + 1, c - (1 << (height - r - 1))));\n            }\n            if (node.right != null) {\n                queue.offer(new Tuple(node.right, r + 1, c + (1 << (height - r - 1))));\n            }\n        }\n        return res;\n    }\n\n    public int calDepth(TreeNode root) {\n        int res = -1;\n        Queue<TreeNode> queue = new ArrayDeque<TreeNode>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            int len = queue.size();\n            res++;\n            while (len > 0) {\n                len--;\n                TreeNode t = queue.poll();\n                if (t.left != null) {\n                    queue.offer(t.left);\n                }\n                if (t.right != null) {\n                    queue.offer(t.right);\n                }\n            }\n        }\n        return res;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public IList<IList<string>> PrintTree(TreeNode root) {\n        int height = CalDepth(root);\n        int m = height + 1;\n        int n = (1 << (height + 1)) - 1;\n        IList<IList<string>> res = new List<IList<string>>();\n        for (int i = 0; i < m; i++) {\n            IList<string> row = new List<string>();\n            for (int j = 0; j < n; j++) {\n                row.Add(\"\");\n            }\n            res.Add(row);\n        }\n        Queue<Tuple<TreeNode, int, int>> queue = new Queue<Tuple<TreeNode, int, int>>();\n        queue.Enqueue(new Tuple<TreeNode, int, int>(root, 0, (n - 1) / 2));\n        while (queue.Count > 0) {\n            Tuple<TreeNode, int, int> t = queue.Dequeue();\n            TreeNode node = t.Item1;\n            int r = t.Item2, c = t.Item3;\n            res[r][c] = node.val.ToString();\n            if (node.left != null) {\n                queue.Enqueue(new Tuple<TreeNode, int, int>(node.left, r + 1, c - (1 << (height - r - 1))));\n            }\n            if (node.right != null) {\n                queue.Enqueue(new Tuple<TreeNode, int, int>(node.right, r + 1, c + (1 << (height - r - 1))));\n            }\n        }\n        return res;\n    }\n\n    public int CalDepth(TreeNode root) {\n        int res = -1;\n        Queue<TreeNode> queue = new Queue<TreeNode>();\n        queue.Enqueue(root);\n        while (queue.Count > 0) {\n            int len = queue.Count;\n            res++;\n            while (len > 0) {\n                len--;\n                TreeNode t = queue.Dequeue();\n                if (t.left != null) {\n                    queue.Enqueue(t.left);\n                }\n                if (t.right != null) {\n                    queue.Enqueue(t.right);\n                }\n            }\n        }\n        return res;\n    }\n}\n```\n\n```C [sol2-C]\n#define MAX_NODE_SIZE 1024\n#define MAX_VAL_LEN 32\n\ntypedef struct {\n    struct TreeNode *node;\n    int row;\n    int col;\n} Tuple;\n\nint calDepth(struct TreeNode* root) {\n    int res = -1;\n    struct TreeNode **queue = (struct TreeNode **)malloc(sizeof(struct TreeNode*) * MAX_NODE_SIZE);\n    int head = 0, tail = 0;\n    queue[tail++] = root;   \n    while (head != tail) {\n        int len = tail - head;\n        res++;\n        while (len) {\n            len--;\n            struct TreeNode *t = queue[head++];\n            if (t->left) {\n                queue[tail++] = t->left;   \n            }\n            if (t->right) {\n                queue[tail++] = t->right;   \n            }\n        }\n    }\n    free(queue);\n    return res;\n}    \n\nTuple *creatTuple(struct TreeNode* node, int row, int col) {\n    Tuple *obj = (Tuple *)malloc(sizeof(Tuple));\n    obj->node = node;\n    obj->row = row;\n    obj->col = col;\n    return obj;\n}\n\nchar *** printTree(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\n    int height = calDepth(root);\n    printf(\"height = %d\\n\", height);\n    int m = height + 1;\n    int n = (1 << (height + 1)) - 1;\n    char ***res = (char ***)malloc(sizeof(char **) * m);\n    for (int i = 0; i < m; i++) {\n        res[i] = (char **)malloc(sizeof(char *) * n);\n        for (int j = 0; j < n; j++) {\n            res[i][j] = (char *)malloc(sizeof(char) * MAX_VAL_LEN);\n            res[i][j][0] = '\\0';\n        }\n    }\n    Tuple **queue = (Tuple **)malloc(sizeof(Tuple *) * n);\n    int head = 0, tail = 0;\n    queue[tail++] = creatTuple(root, 0, (n - 1) / 2);\n    while (head != tail) {\n        Tuple *t = queue[head++];\n        int r = t->row, c = t->col;\n        sprintf(res[r][c], \"%d\", t->node->val);\n        if (t->node->left) {\n            queue[tail++] = creatTuple(t->node->left, r + 1, c - (1 << (height - r - 1)));\n        }\n        if (t->node->right) {\n            queue[tail++] = creatTuple(t->node->right, r + 1, c + (1 << (height - r - 1)));\n        }\n    }\n    for (int i = 0; i < tail; i++) {\n        free(queue[i]);\n    }\n    free(queue);\n    *returnSize = m;\n    *returnColumnSizes = (int *)malloc(sizeof(int) * m);\n    for (int i = 0; i < m; i++) {\n        (*returnColumnSizes)[i] = n;\n    }\n    return res;\n}\n```\n\n```go [sol2-Golang]\nfunc calDepth(root *TreeNode) int {\n    h := -1\n    q := []*TreeNode{root}\n    for len(q) > 0 {\n        h++\n        tmp := q\n        q = nil\n        for _, node := range tmp {\n            if node.Left != nil {\n                q = append(q, node.Left)\n            }\n            if node.Right != nil {\n                q = append(q, node.Right)\n            }\n        }\n    }\n    return h\n}\n\nfunc printTree(root *TreeNode) [][]string {\n    height := calDepth(root)\n    m := height + 1\n    n := 1<<m - 1\n    ans := make([][]string, m)\n    for i := range ans {\n        ans[i] = make([]string, n)\n    }\n    type entry struct {\n        node *TreeNode\n        r, c int\n    }\n    q := []entry{{root, 0, (n - 1) / 2}}\n    for len(q) > 0 {\n        e := q[0]\n        q = q[1:]\n        node, r, c := e.node, e.r, e.c\n        ans[r][c] = strconv.Itoa(node.Val)\n        if node.Left != nil {\n            q = append(q, entry{node.Left, r + 1, c - 1<<(height-r-1)})\n        }\n        if node.Right != nil {\n            q = append(q, entry{node.Right, r + 1, c + 1<<(height-r-1)})\n        }\n    }\n    return ans\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar printTree = function(root) {\n    const height = CalDepth(root);\n    const m = height + 1;\n    const n = (1 << (height + 1)) - 1;\n    const res = new Array(m).fill(0).map(() => new Array(n).fill(''));\n    const queue = [];\n    queue.push([root, 0, Math.floor((n - 1) / 2)]);\n    while (queue.length > 0) {\n        const t = queue.shift();\n        const node = t[0];\n        let r = t[1], c = t[2];\n        res[r][c] = node.val.toString();\n        if (node.left) {\n            queue.push([node.left, r + 1, c - (1 << (height - r - 1))]);\n        }\n        if (node.right) {\n            queue.push([node.right, r + 1, c + (1 << (height - r - 1))]);\n        }\n    }\n    return res;\n};\n\nconst CalDepth = (root) => {\n    let res = -1;\n    const queue = [root];\n    while (queue.length > 0) {\n        let len = queue.length;\n        res++;\n        while (len > 0) {\n            len--;\n            const t = queue.shift();\n            if (t.left) {\n                queue.push(t.left);\n            }\n            if (t.right) {\n                queue.push(t.right);\n            }\n        }\n    }\n    return res;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\textit{height} \\times 2^\\textit{height})$，其中 $\\textit{height}$ 是二叉树的高度。需要填充 $(\\textit{height} + 1) \\times (2^{\\textit{height} + 1} - 1)$ 的数组。\n\n- 空间复杂度：$O(2^\\textit{height})$，其中 $\\textit{height}$ 是二叉树的高度。空间复杂度主要是队列空间，队列中的元素个数不超过二叉树的节点个数，为 $O(2^\\textit{height})$。注意返回值不计入空间复杂度。"
}