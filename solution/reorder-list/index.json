{
	"titleSlug": "reorder-list",
	"slug": "zhong-pai-lian-biao-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/reorder-list/solution/zhong-pai-lian-biao-by-leetcode-solution/",
	"content": "#### 方法一：线性表\n\n因为链表不支持下标访问，所以我们无法随机访问链表中任意位置的元素。\n\n因此比较容易想到的一个方法是，我们利用线性表存储该链表，然后利用线性表可以下标访问的特点，直接按顺序访问指定元素，重建该链表即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void reorderList(ListNode *head) {\n        if (head == nullptr) {\n            return;\n        }\n        vector<ListNode *> vec;\n        ListNode *node = head;\n        while (node != nullptr) {\n            vec.emplace_back(node);\n            node = node->next;\n        }\n        int i = 0, j = vec.size() - 1;\n        while (i < j) {\n            vec[i]->next = vec[j];\n            i++;\n            if (i == j) {\n                break;\n            }\n            vec[j]->next = vec[i];\n            j--;\n        }\n        vec[i]->next = nullptr;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public void reorderList(ListNode head) {\n        if (head == null) {\n            return;\n        }\n        List<ListNode> list = new ArrayList<ListNode>();\n        ListNode node = head;\n        while (node != null) {\n            list.add(node);\n            node = node.next;\n        }\n        int i = 0, j = list.size() - 1;\n        while (i < j) {\n            list.get(i).next = list.get(j);\n            i++;\n            if (i == j) {\n                break;\n            }\n            list.get(j).next = list.get(i);\n            j--;\n        }\n        list.get(i).next = null;\n    }\n}\n```\n\n```Golang [sol1-Golang]\nfunc reorderList(head *ListNode) {\n    if head == nil {\n        return\n    }\n    nodes := []*ListNode{}\n    for node := head; node != nil; node = node.Next {\n        nodes = append(nodes, node)\n    }\n    i, j := 0, len(nodes)-1\n    for i < j {\n        nodes[i].Next = nodes[j]\n        i++\n        if i == j {\n            break\n        }\n        nodes[j].Next = nodes[i]\n        j--\n    }\n    nodes[i].Next = nil\n}\n```\n\n```C [sol1-C]\nvoid reorderList(struct ListNode* head) {\n    if (head == NULL) {\n        return;\n    }\n    struct ListNode* vec[40001];\n    struct ListNode* node = head;\n    int n = 0;\n    while (node != NULL) {\n        vec[n++] = node;\n        node = node->next;\n    }\n    int i = 0, j = n - 1;\n    while (i < j) {\n        vec[i]->next = vec[j];\n        i++;\n        if (i == j) {\n            break;\n        }\n        vec[j]->next = vec[i];\n        j--;\n    }\n    vec[i]->next = NULL;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def reorderList(self, head: ListNode) -> None:\n        if not head:\n            return\n        \n        vec = list()\n        node = head\n        while node:\n            vec.append(node)\n            node = node.next\n        \n        i, j = 0, len(vec) - 1\n        while i < j:\n            vec[i].next = vec[j]\n            i += 1\n            if i == j:\n                break\n            vec[j].next = vec[i]\n            j -= 1\n        \n        vec[i].next = None\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是链表中的节点数。\n\n- 空间复杂度：$O(N)$，其中 $N$ 是链表中的节点数。主要为线性表的开销。\n\n#### 方法二：寻找链表中点 + 链表逆序 + 合并链表\n\n注意到目标链表即为将原链表的左半端和反转后的右半端合并后的结果。\n\n这样我们的任务即可划分为三步：\n\n1. 找到原链表的中点（参考「[876. 链表的中间结点](https://leetcode-cn.com/problems/middle-of-the-linked-list/)」）。\n   \n   - 我们可以使用快慢指针来 $O(N)$ 地找到链表的中间节点。\n\n2. 将原链表的右半端反转（参考「[206. 反转链表](https://leetcode-cn.com/problems/reverse-linked-list/)」）。\n\n   - 我们可以使用迭代法实现链表的反转。\n\n3. 将原链表的两端合并。\n\n   - 因为两链表长度相差不超过 $1$，因此直接合并即可。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    void reorderList(ListNode* head) {\n        if (head == nullptr) {\n            return;\n        }\n        ListNode* mid = middleNode(head);\n        ListNode* l1 = head;\n        ListNode* l2 = mid->next;\n        mid->next = nullptr;\n        l2 = reverseList(l2);\n        mergeList(l1, l2);\n    }\n\n    ListNode* middleNode(ListNode* head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        while (fast->next != nullptr && fast->next->next != nullptr) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return slow;\n    }\n\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr != nullptr) {\n            ListNode* nextTemp = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = nextTemp;\n        }\n        return prev;\n    }\n\n    void mergeList(ListNode* l1, ListNode* l2) {\n        ListNode* l1_tmp;\n        ListNode* l2_tmp;\n        while (l1 != nullptr && l2 != nullptr) {\n            l1_tmp = l1->next;\n            l2_tmp = l2->next;\n\n            l1->next = l2;\n            l1 = l1_tmp;\n\n            l2->next = l1;\n            l2 = l2_tmp;\n        }\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public void reorderList(ListNode head) {\n        if (head == null) {\n            return;\n        }\n        ListNode mid = middleNode(head);\n        ListNode l1 = head;\n        ListNode l2 = mid.next;\n        mid.next = null;\n        l2 = reverseList(l2);\n        mergeList(l1, l2);\n    }\n\n    public ListNode middleNode(ListNode head) {\n        ListNode slow = head;\n        ListNode fast = head;\n        while (fast.next != null && fast.next.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        return slow;\n    }\n\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode curr = head;\n        while (curr != null) {\n            ListNode nextTemp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = nextTemp;\n        }\n        return prev;\n    }\n\n    public void mergeList(ListNode l1, ListNode l2) {\n        ListNode l1_tmp;\n        ListNode l2_tmp;\n        while (l1 != null && l2 != null) {\n            l1_tmp = l1.next;\n            l2_tmp = l2.next;\n\n            l1.next = l2;\n            l1 = l1_tmp;\n\n            l2.next = l1;\n            l2 = l2_tmp;\n        }\n    }\n}\n```\n\n```Golang [sol2-Golang]\nfunc middleNode(head *ListNode) *ListNode {\n    slow, fast := head, head\n    for fast.Next != nil && fast.Next.Next != nil {\n        slow = slow.Next\n        fast = fast.Next.Next\n    }\n    return slow\n}\n\nfunc reverseList(head *ListNode) *ListNode {\n    var prev, cur *ListNode = nil, head\n    for cur != nil {\n        nextTmp := cur.Next\n        cur.Next = prev\n        prev = cur\n        cur = nextTmp\n    }\n    return prev\n}\n\nfunc mergeList(l1, l2 *ListNode) {\n    var l1Tmp, l2Tmp *ListNode\n    for l1 != nil && l2 != nil {\n        l1Tmp = l1.Next\n        l2Tmp = l2.Next\n\n        l1.Next = l2\n        l1 = l1Tmp\n\n        l2.Next = l1\n        l2 = l2Tmp\n    }\n}\n\nfunc reorderList(head *ListNode) {\n    if head == nil {\n        return\n    }\n    mid := middleNode(head)\n    l1 := head\n    l2 := mid.Next\n    mid.Next = nil\n    l2 = reverseList(l2)\n    mergeList(l1, l2)\n}\n```\n\n```C [sol2-C]\nstruct ListNode* middleNode(struct ListNode* head) {\n    struct ListNode* slow = head;\n    struct ListNode* fast = head;\n    while (fast->next != NULL && fast->next->next != NULL) {\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    return slow;\n}\n\nstruct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr != NULL) {\n        struct ListNode* nextTemp = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = nextTemp;\n    }\n    return prev;\n}\n\nvoid mergeList(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode* l1_tmp;\n    struct ListNode* l2_tmp;\n    while (l1 != NULL && l2 != NULL) {\n        l1_tmp = l1->next;\n        l2_tmp = l2->next;\n\n        l1->next = l2;\n        l1 = l1_tmp;\n\n        l2->next = l1;\n        l2 = l2_tmp;\n    }\n}\n\nvoid reorderList(struct ListNode* head) {\n    if (head == NULL) {\n        return;\n    }\n    struct ListNode* mid = middleNode(head);\n    struct ListNode* l1 = head;\n    struct ListNode* l2 = mid->next;\n    mid->next = NULL;\n    l2 = reverseList(l2);\n    mergeList(l1, l2);\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def reorderList(self, head: ListNode) -> None:\n        if not head:\n            return\n        \n        mid = self.middleNode(head)\n        l1 = head\n        l2 = mid.next\n        mid.next = None\n        l2 = self.reverseList(l2)\n        self.mergeList(l1, l2)\n    \n    def middleNode(self, head: ListNode) -> ListNode:\n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        return slow\n    \n    def reverseList(self, head: ListNode) -> ListNode:\n        prev = None\n        curr = head\n        while curr:\n            nextTemp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nextTemp\n        return prev\n\n    def mergeList(self, l1: ListNode, l2: ListNode):\n        while l1 and l2:\n            l1_tmp = l1.next\n            l2_tmp = l2.next\n\n            l1.next = l2\n            l1 = l1_tmp\n\n            l2.next = l1\n            l2 = l2_tmp\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是链表中的节点数。\n\n- 空间复杂度：$O(1)$。"
}