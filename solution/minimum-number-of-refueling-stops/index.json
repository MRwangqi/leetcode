{
	"titleSlug": "minimum-number-of-refueling-stops",
	"slug": "zui-di-jia-you-ci-shu-by-leetcode-soluti-nmga",
	"url": "https://leetcode-cn.com/problems/minimum-number-of-refueling-stops/solution/zui-di-jia-you-ci-shu-by-leetcode-soluti-nmga/",
	"content": "#### 方法一：动态规划\n\n由于数组 $\\textit{stations}$ 按照加油站的位置非递减排序，因此从左到右遍历数组 $\\textit{stations}$ 的过程中，当遍历到一个加油站时，位置小于该加油站的所有加油站都已经被遍历过。\n\n用 $n$ 表示数组 $\\textit{stations}$ 的长度，即加油站的个数。最多可以加油 $n$ 次，为了得到可以到达目的地的最少加油次数，需要计算每个加油次数对应的最大行驶英里数，然后得到最大行驶英里数大于等于 $\\textit{target}$ 的最少加油次数。\n\n用 $\\textit{dp}[i]$ 表示加油 $i$ 次的最大行驶英里数。由于初始时汽油量是 $\\textit{startFuel}$ 升，可以行驶 $\\textit{startFuel}$ 英里，因此 $\\textit{dp}[0] = \\textit{startFuel}$。\n\n当遍历到加油站 $\\textit{stations}[i]$ 时，假设在到达该加油站之前已经加油 $j$ 次，其中 $0 \\le j \\le i$，则只有当 $\\textit{dp}[j] \\ge \\textit{stations}[i][0]$ 时才能在加油 $j$ 次的情况下到达加油站 $\\textit{stations}[i]$ 的位置，在加油站 $\\textit{stations}[i]$ 加油之后，共加油 $j + 1$ 次，可以行驶的英里数是 $\\textit{dp}[j] + \\textit{stations}[i][1]$。遍历满足 $0 \\le j \\le i$ 且 $\\textit{dp}[j] \\ge \\textit{stations}[i][0]$ 的每个下标 $j$，计算 $\\textit{dp}[j + 1]$ 的最大值。\n\n当遍历到加油站 $\\textit{stations}[i]$ 时，对于每个符合要求的下标 $j$，计算 $\\textit{dp}[j + 1]$ 时都是将加油站 $\\textit{stations}[i]$ 作为最后一次加油的加油站。为了确保每个 $\\textit{dp}[j + 1]$ 的计算中，加油站 $\\textit{stations}[i]$ 只会被计算一次，应该按照从大到小的顺序遍历下标 $j$。\n\n以示例 3 为例。对于加油站 $\\textit{stations}[2]$ 计算之后，$\\textit{dp}[2] = 100$。对于加油站 $\\textit{stations}[3]$ 计算的过程中会将 $\\textit{dp}[2]$ 的值更新为 $110$，如果在计算 $\\textit{dp}[3]$ 之前计算 $\\textit{dp}[2]$，则 $\\textit{dp}[3]$ 的值将被错误地计算为 $\\textit{dp}[2] + \\textit{stations}[3][1] = 150$。只有当从大到小遍历下标 $j$ 时，才能得到 $\\textit{dp}[3] = 140$ 的正确结果。\n\n当所有的加油站遍历结束之后，遍历 $\\textit{dp}$，寻找使得 $\\textit{dp}[i] \\ge \\textit{target}$ 的最小下标 $i$ 并返回。如果不存在这样的下标，则无法到达目的地，返回 $-1$。\n\n```Python [sol1-Python3]\nclass Solution:\n    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:\n        dp = [startFuel] + [0] * len(stations)\n        for i, (pos, fuel) in enumerate(stations):\n            for j in range(i, -1, -1):\n                if dp[j] >= pos:\n                    dp[j + 1] = max(dp[j + 1], dp[j] + fuel)\n        return next((i for i, v in enumerate(dp) if v >= target), -1)\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minRefuelStops(int target, int startFuel, int[][] stations) {\n        int n = stations.length;\n        long[] dp = new long[n + 1];\n        dp[0] = startFuel;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j >= 0; j--) {\n                if (dp[j] >= stations[i][0]) {\n                    dp[j + 1] = Math.max(dp[j + 1], dp[j] + stations[i][1]);\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            if (dp[i] >= target) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MinRefuelStops(int target, int startFuel, int[][] stations) {\n        int n = stations.Length;\n        long[] dp = new long[n + 1];\n        dp[0] = startFuel;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j >= 0; j--) {\n                if (dp[j] >= stations[i][0]) {\n                    dp[j + 1] = Math.Max(dp[j + 1], dp[j] + stations[i][1]);\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            if (dp[i] >= target) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {\n        int n = stations.size();\n        vector<long> dp(n + 1);\n        dp[0] = startFuel;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j >= 0; j--) {\n                if (dp[j] >= stations[i][0]) {\n                    dp[j + 1] = max(dp[j + 1], dp[j] + stations[i][1]);\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            if (dp[i] >= target) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n\nint minRefuelStops(int target, int startFuel, int** stations, int stationsSize, int* stationsColSize){\n    long *dp = (long *)malloc(sizeof(long) * (stationsSize + 1));\n    memset(dp, 0, sizeof(long) * (stationsSize + 1));\n    dp[0] = startFuel;\n    for (int i = 0; i < stationsSize; i++) {\n        for (int j = i; j >= 0; j--) {\n            if (dp[j] >= stations[i][0]) {\n                dp[j + 1] = MAX(dp[j + 1], dp[j] + stations[i][1]);\n            }\n        }\n    }\n    for (int i = 0; i <= stationsSize; i++) {\n        if (dp[i] >= target) {\n            free(dp);\n            return i;\n        }\n    }\n    free(dp);\n    return -1;\n}\n```\n\n```go [sol1-Golang]\nfunc minRefuelStops(target, startFuel int, stations [][]int) int {\n    n := len(stations)\n    dp := make([]int, n+1)\n    dp[0] = startFuel\n    for i, s := range stations {\n        for j := i; j >= 0; j-- {\n            if dp[j] >= s[0] {\n                dp[j+1] = max(dp[j+1], dp[j]+s[1])\n            }\n        }\n    }\n    for i, v := range dp {\n        if v >= target {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minRefuelStops = function(target, startFuel, stations) {\n    const n = stations.length;\n    const dp = new Array(n + 1).fill(0);\n    dp[0] = startFuel;\n    for (let i = 0; i < n; i++) {\n        for (let j = i; j >= 0; j--) {\n            if (dp[j] >= stations[i][0]) {\n                dp[j + 1] = Math.max(dp[j + 1], dp[j] + stations[i][1]);\n            }\n        }\n    }\n    for (let i = 0; i <= n; i++) {\n        if (dp[i] >= target) {\n            return i;\n        }\n    }\n    return -1;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\\textit{stations}$ 的长度。动态规划的状态数是 $O(n)$，每个状态需要 $O(n)$ 的时间计算，因此时间复杂度是 $O(n^2)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{stations}$ 的长度。需要创建长度为 $n + 1$ 的数组 $\\textit{dp}$。\n\n#### 方法二：贪心\n\n用 $n$ 表示数组 $\\textit{stations}$ 的长度，即加油站的个数。行驶的过程中依次到达 $n + 1$ 个位置，分别是 $n$ 个加油站和目的地。为了得到最少加油次数，应该在确保每个位置都能到达的前提下，选择最大加油量的加油站加油。\n\n为了得到已经到达过的加油站中的最大加油量，需要使用优先队列记录所有已经到达过的加油站的加油量，优先队列中的最大元素位于队首，即每次从优先队列中取出的元素都是优先队列中的最大元素。\n\n从左到右遍历数组 $\\textit{stations}$，对于每个加油站，首先判断该位置是否可以达到，然后将当前加油站的加油量添加到优先队列中。对于目的地，则只需要判断是否可以达到。\n\n具体做法如下。\n\n1. 计算当前位置（加油站或目的地）与上一个位置的距离之差，根据该距离之差得到从上一个位置行驶到当前位置需要使用的汽油量，将使用的汽油量从剩余的汽油量中减去。\n\n2. 如果剩余的汽油量小于 $0$，则表示在不加油的情况下无法从上一个位置行驶到当前位置，需要加油。取出优先队列中的最大元素加到剩余的汽油量，并将加油次数加 $1$，重复该操作直到剩余的汽油量大于等于 $0$ 或优先队列变为空。\n\n3. 如果优先队列变为空时，剩余的汽油量仍小于 $0$，则表示在所有经过的加油站加油之后仍然无法到达当前位置，返回 $-1$。\n\n4. 如果当前位置是加油站，则将当前加油站的加油量添加到优先队列中，并使用当前位置更新上一个位置。\n\n如果无法到达目的地，则在遍历过程中返回 $-1$。如果遍历结束仍未返回 $-1$，则可以到达目的地，返回加油次数。\n\n```Python [sol2-Python3]\nclass Solution:\n    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:\n        n = len(stations)\n        ans, fuel, prev, h = 0, startFuel, 0, []\n        for i in range(n + 1):\n            curr = stations[i][0] if i < n else target\n            fuel -= curr - prev\n            while fuel < 0 and h:\n                fuel -= heappop(h)\n                ans += 1\n            if fuel < 0:\n                return -1\n            if i < n:\n                heappush(h, -stations[i][1])\n                prev = curr\n        return ans\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int minRefuelStops(int target, int startFuel, int[][] stations) {\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);\n        int ans = 0, prev = 0, fuel = startFuel;\n        int n = stations.length;\n        for (int i = 0; i <= n; i++) {\n            int curr = i < n ? stations[i][0] : target;\n            fuel -= curr - prev;\n            while (fuel < 0 && !pq.isEmpty()) {\n                fuel += pq.poll();\n                ans++;\n            }\n            if (fuel < 0) {\n                return -1;\n            }\n            if (i < n) {\n                pq.offer(stations[i][1]);\n                prev = curr;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int MinRefuelStops(int target, int startFuel, int[][] stations) {\n        PriorityQueue<int, int> pq = new PriorityQueue<int, int>();\n        int ans = 0, prev = 0, fuel = startFuel;\n        int n = stations.Length;\n        for (int i = 0; i <= n; i++) {\n            int curr = i < n ? stations[i][0] : target;\n            fuel -= curr - prev;\n            while (fuel < 0 && pq.Count > 0) {\n                fuel += pq.Dequeue();\n                ans++;\n            }\n            if (fuel < 0) {\n                return -1;\n            }\n            if (i < n) {\n                pq.Enqueue(stations[i][1], -stations[i][1]);\n                prev = curr;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {\n        priority_queue<int> pq;\n        int ans = 0, prev = 0, fuel = startFuel;\n        int n = stations.size();\n        for (int i = 0; i <= n; i++) {\n            int curr = i < n ? stations[i][0] : target;\n            fuel -= curr - prev;\n            while (fuel < 0 && !pq.empty()) {\n                fuel += pq.top();\n                pq.pop();\n                ans++;\n            }\n            if (fuel < 0) {\n                return -1;\n            }\n            if (i < n) {\n                pq.emplace(stations[i][1]);\n                prev = curr;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```go [sol2-Golang]\nfunc minRefuelStops(target, startFuel int, stations [][]int) (ans int) {\n    fuel, prev, h := startFuel, 0, hp{}\n    for i, n := 0, len(stations); i <= n; i++ {\n        curr := target\n        if i < n {\n            curr = stations[i][0]\n        }\n        fuel -= curr - prev\n        for fuel < 0 && h.Len() > 0 {\n            fuel += heap.Pop(&h).(int)\n            ans++\n        }\n        if fuel < 0 {\n            return -1\n        }\n        if i < n {\n            heap.Push(&h, stations[i][1])\n            prev = curr\n        }\n    }\n    return\n}\n\ntype hp struct{ sort.IntSlice }\nfunc (h hp) Less(i, j int) bool  { return h.IntSlice[i] > h.IntSlice[j] }\nfunc (h *hp) Push(v interface{}) { h.IntSlice = append(h.IntSlice, v.(int)) }\nfunc (h *hp) Pop() interface{}   { a := h.IntSlice; v := a[len(a)-1]; h.IntSlice = a[:len(a)-1]; return v }\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{stations}$ 的长度。需要遍历数组 $\\textit{stations}$ 一次，每个加油站的汽油量最多添加到优先队列和从优先队列中移除各一次，每次优先队列的操作需要 $O(\\log n)$ 的时间，因此时间复杂度是 $O(n \\log n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{stations}$ 的长度。优先队列需要 $O(n)$ 的空间。"
}