{
	"titleSlug": "longest-mountain-in-array",
	"slug": "shu-zu-zhong-de-zui-chang-shan-mai-by-leetcode-sol",
	"url": "https://leetcode-cn.com/problems/longest-mountain-in-array/solution/shu-zu-zhong-de-zui-chang-shan-mai-by-leetcode-sol/",
	"content": "#### 方法一：枚举山顶\n\n**思路与算法**\n\n对于一座「山脉」，我们称首元素 $B[0]$ 和尾元素 $B[\\text{len}(B)-1]$ 为「山脚」，满足题目要求 $B[i-1] < B[i] > B[i+1]$ 的元素 $B[i]$ 为「山顶」。为了找出数组 $\\textit{arr}$ 中最长的山脉，我们可以考虑枚举山顶，再从山顶向左右两侧扩展找到山脚。\n\n由于从左侧山脚到山顶的序列是**严格单调递增**的，而从山顶到右侧山脚的序列**是严格单调递减**的，因此我们可以使用动态规划（也可以理解为递推）的方法，计算出从任意一个元素开始，向左右两侧最多可以扩展的元素数目。\n\n我们用 $\\textit{left}[i]$ 表示 $\\textit{arr}[i]$ 向左侧最多可以扩展的元素数目。如果 $\\textit{arr}[i-1] < \\textit{arr}[i]$，那么 $\\textit{arr}[i]$ 可以向左扩展到 $\\textit{arr}[i-1]$，再扩展 $\\textit{left}[i]$ 个元素，因此有\n\n$$\n\\textit{left}[i] = \\textit{left}[i-1] + 1\n$$\n\n如果 $\\textit{arr}[i-1] \\geq \\textit{arr}[i]$，那么 $\\textit{arr}[i]$ 无法向左扩展，因此有\n\n$$\n\\textit{left}[i] = 0\n$$\n\n特别地，当 $i=0$ 时，$\\textit{arr}[i]$ 为首元素，无法向左扩展，因此同样有\n\n$$\n\\textit{left}[0] = 0\n$$\n\n同理，我们用 $\\textit{right}[i]$ 表示 $\\textit{arr}[i]$ 向右侧最多可以扩展的元素数目，那么有类似的状态转移方程（递推式）\n\n$$\n\\textit{right}[i] = \\begin{cases}\n\\textit{right}[i+1]+1, & \\textit{arr}[i] > \\textit{arr}[i+1] \\\\\n0, & \\textit{arr}[i] \\leq \\textit{arr}[i+1] ~或~ i=n-1\n\\end{cases}\n$$\n\n其中 $n$ 是数组 $\\textit{arr}$ 的长度。\n\n在计算出所有的 $\\textit{left}$ 以及 $\\textit{right}$ 之后，我们就可以枚举山顶。需要注意的是，只有当 $\\textit{left}[i]$ 和 $\\textit{right}[i]$ 均大于 $0$ 时，$\\textit{arr}[i]$ 才能作为山顶，并且山脉的长度为 $\\textit{left}+\\textit{right}[i]+1$。\n\n在所有的山脉中，最长的即为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int longestMountain(vector<int>& arr) {\n        int n = arr.size();\n        if (!n) {\n            return 0;\n        }\n        vector<int> left(n);\n        for (int i = 1; i < n; ++i) {\n            left[i] = (arr[i - 1] < arr[i] ? left[i - 1] + 1 : 0);\n        }\n        vector<int> right(n);\n        for (int i = n - 2; i >= 0; --i) {\n            right[i] = (arr[i + 1] < arr[i] ? right[i + 1] + 1 : 0);\n        }\n\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (left[i] > 0 && right[i] > 0) {\n                ans = max(ans, left[i] + right[i] + 1);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int longestMountain(int[] arr) {\n        int n = arr.length;\n        if (n == 0) {\n            return 0;\n        }\n        int[] left = new int[n];\n        for (int i = 1; i < n; ++i) {\n            left[i] = arr[i - 1] < arr[i] ? left[i - 1] + 1 : 0;\n        }\n        int[] right = new int[n];\n        for (int i = n - 2; i >= 0; --i) {\n            right[i] = arr[i + 1] < arr[i] ? right[i + 1] + 1 : 0;\n        }\n\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (left[i] > 0 && right[i] > 0) {\n                ans = Math.max(ans, left[i] + right[i] + 1);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        if not arr:\n            return 0\n            \n        n = len(arr)\n        left = [0] * n\n        for i in range(1, n):\n            left[i] = (left[i - 1] + 1 if arr[i - 1] < arr[i] else 0)\n        \n        right = [0] * n\n        for i in range(n - 2, -1, -1):\n            right[i] = (right[i + 1] + 1 if arr[i + 1] < arr[i] else 0)\n        \n        ans = 0\n        for i in range(n):\n            if left[i] > 0 and right[i] > 0:\n                ans = max(ans, left[i] + right[i] + 1)\n        \n        return ans\n```\n\n```Golang [sol1-Golang]\nfunc longestMountain(arr []int) int {\n    n := len(arr)\n    left := make([]int, n)\n    for i := 1; i < n; i++ {\n        if arr[i-1] < arr[i] {\n            left[i] = left[i-1] + 1\n        }\n    }\n    right := make([]int, n)\n    for i := n - 2; i >= 0; i-- {\n        if arr[i+1] < arr[i] {\n            right[i] = right[i+1] + 1\n        }\n    }\n    ans := 0\n    for i, l := range left {\n        r := right[i]\n        if l > 0 && r > 0 && l+r+1 > ans {\n            ans = l + r + 1\n        }\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nint longestMountain(int* arr, int arrSize) {\n    if (!arrSize) {\n        return 0;\n    }\n    int left[arrSize];\n    left[0] = 0;\n    for (int i = 1; i < arrSize; ++i) {\n        left[i] = (arr[i - 1] < arr[i] ? left[i - 1] + 1 : 0);\n    }\n    int right[arrSize];\n    right[arrSize - 1] = 0;\n    for (int i = arrSize - 2; i >= 0; --i) {\n        right[i] = (arr[i + 1] < arr[i] ? right[i + 1] + 1 : 0);\n    }\n\n    int ans = 0;\n    for (int i = 0; i < arrSize; ++i) {\n        if (left[i] > 0 && right[i] > 0) {\n            ans = fmax(ans, left[i] + right[i] + 1);\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。\n\n- 空间复杂度：$O(n)$，即为数组 $\\textit{left}$ 和 $\\textit{right}$ 需要使用的空间。\n\n#### 方法二：枚举山脚\n\n**思路与算法**\n\n我们也可以枚举山脚。例如当我们从左向右遍历整个数组 $\\textit{arr}$ 时，可以使用双指针的方法，一个指针枚举左侧山脚，另一个指针不断向右移动到右侧山脚。\n\n![](https://pic.leetcode-cn.com/Figures/845/diagram1.png)\n\n具体地，我们使用指针 $\\textit{left}$ 指向左侧山脚，它的初始值为 $0$。每次当我们固定 $\\textit{left}$ 时：\n\n- 我们首先需要保证 $\\textit{left} + 2 < n$，这是因为山脉的长度至少为 $3$；其次我们需要保证 $\\textit{arr}[\\textit{left}] < \\textit{arr}[\\textit{left} + 1]$，否则 $\\textit{left}$ 对应的不可能时左侧山脚；\n\n- 我们将右侧山脚的 $\\textit{right}$ 的初始值置为 $\\textit{left}+1$，随后不断地向右移动 $\\textit{right}$，直到不满足 $\\textit{arr}[\\textit{right}] < \\textit{arr}[\\textit{right} + 1]$ 为止，此时：\n\n    - 如果 $\\textit{right} = n-1$，说明我们已经移动到了数组末尾，已经无法形成山脉了；\n\n    - 否则，$\\textit{right}$ 指向的可能是山顶。我们需要额外判断是有满足 $\\textit{arr}[\\textit{right}] > \\textit{arr}[\\textit{right} + 1]$，这是因为如果两者相等，那么 $\\textit{right}$ 指向的就不是山顶了。\n\n- 如果 $\\textit{right}$ 指向的确实是山顶，那么我们使用类似的方法，不断地向右移动 $\\textit{right}$，直到不满足 $\\textit{arr}[\\textit{right}] > \\textit{arr}[\\textit{right} + 1]$ 为止，此时，$\\textit{right}$ 指向右侧山脚，$\\textit{arr}[\\textit{left}]$ 到 $\\textit{arr}[\\textit{right}]$ 就对应着一座山脉；\n\n- 需要注意的是，右侧山脚有可能是下一个左侧山脚，因此我们需要将 $\\textit{right}$ 的值赋予 $\\textit{left}$，以便与进行下一次枚举。在其它所有不满足要求的情况下，$\\textit{right}$ 对应的位置都不可能是下一个左侧山脚，因此可以将 $\\textit{right} + 1$ 的值赋予 $\\textit{left}$。\n\n在下面的代码中，当不满足要求时，我们立即将 $\\textit{right}$ 的值加 $1$。这样一来，我们就可以统一在下一次枚举左侧山脚之前，将 $\\textit{right}$ 的值赋予 $\\textit{left}$ 了。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int longestMountain(vector<int>& arr) {\n        int n = arr.size();\n        int ans = 0;\n        int left = 0;\n        while (left + 2 < n) {\n            int right = left + 1;\n            if (arr[left] < arr[left + 1]) {\n                while (right + 1 < n && arr[right] < arr[right + 1]) {\n                    ++right;\n                }\n                if (right < n - 1 && arr[right] > arr[right + 1]) {\n                    while (right + 1 < n && arr[right] > arr[right + 1]) {\n                        ++right;\n                    }\n                    ans = max(ans, right - left + 1);\n                }\n                else {\n                    ++right;\n                }\n            }\n            left = right;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int longestMountain(int[] arr) {\n        int n = arr.length;\n        int ans = 0;\n        int left = 0;\n        while (left + 2 < n) {\n            int right = left + 1;\n            if (arr[left] < arr[left + 1]) {\n                while (right + 1 < n && arr[right] < arr[right + 1]) {\n                    ++right;\n                }\n                if (right < n - 1 && arr[right] > arr[right + 1]) {\n                    while (right + 1 < n && arr[right] > arr[right + 1]) {\n                        ++right;\n                    }\n                    ans = Math.max(ans, right - left + 1);\n                } else {\n                    ++right;\n                }\n            }\n            left = right;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        ans = left = 0\n        while left + 2 < n:\n            right = left + 1\n            if arr[left] < arr[left + 1]:\n                while right + 1 < n and arr[right] < arr[right + 1]:\n                    right += 1\n                if right < n - 1 and arr[right] > arr[right + 1]:\n                    while right + 1 < n and arr[right] > arr[right + 1]:\n                        right += 1\n                    ans = max(ans, right - left + 1)\n                else:\n                    right += 1\n            left = right\n        return ans\n```\n\n```Golang [sol2-Golang]\nfunc longestMountain(arr []int) int {\n    n := len(arr)\n    ans := 0\n    left := 0\n    for left+2 < n {\n        right := left + 1\n        if arr[left] < arr[left+1] {\n            for right+1 < n && arr[right] < arr[right+1] {\n                right++\n            }\n            if right < n-1 && arr[right] > arr[right+1] {\n                for right+1 < n && arr[right] > arr[right+1] {\n                    right++\n                }\n                if right-left+1 > ans {\n                    ans = right - left + 1\n                }\n            } else {\n                right++\n            }\n        }\n        left = right\n    }\n    return ans\n}\n```\n\n```C [sol2-C]\nint longestMountain(int* arr, int arrSize) {\n    int ans = 0;\n    int left = 0;\n    while (left + 2 < arrSize) {\n        int right = left + 1;\n        if (arr[left] < arr[left + 1]) {\n            while (right + 1 < arrSize && arr[right] < arr[right + 1]) {\n                ++right;\n            }\n            if (right < arrSize - 1 && arr[right] > arr[right + 1]) {\n                while (right + 1 < arrSize && arr[right] > arr[right + 1]) {\n                    ++right;\n                }\n                ans = fmax(ans, right - left + 1);\n            } else {\n                ++right;\n            }\n        }\n        left = right;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。\n\n- 空间复杂度：$O(1)$。"
}