{
	"titleSlug": "jian-sheng-zi-ii-lcof",
	"slug": "mian-shi-ti-14-ii-jian-sheng-zi-iitan-xin-er-fen-f",
	"url": "https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/solution/mian-shi-ti-14-ii-jian-sheng-zi-iitan-xin-er-fen-f/",
	"content": "此题与 [面试题14- I. 剪绳子](https://leetcode-cn.com/problems/jian-sheng-zi-lcof/) 主体等价，唯一不同在于本题目涉及 **“大数越界情况下的求余问题”** 。\r\n建议先做上一道题，在此基础上再研究此题目的大数求余方法。\r\n\r\n#### 解题思路：\r\n\r\n- 设将长度为 $n$ 的绳子切为 $a$ 段：\r\n\r\n$$\r\nn = n_1 + n_2 + ... + n_a\r\n$$\r\n\r\n- 本题等价于求解：\r\n\r\n$$\r\n\\max(n_1 \\times n_2 \\times ... \\times n_a)\r\n$$\r\n\r\n> 以下数学推导总体分为两步：① 当所有绳段长度相等时，乘积最大。② 最优的绳段长度为 $3$ 。\r\n\r\n##### 数学推导：\r\n\r\n- 以下公式为“算术几何均值不等式” ，等号当且仅当 $n_1 = n_2 = ... = n_a$ 时成立。\r\n\r\n$$\r\n\\frac{n_1 + n_2 + ... + n_a}{a} \\geq \\sqrt[a]{n_1 n_2 ... n_a}\r\n$$\r\n\r\n> **推论一：** 将绳子 **以相等的长度等分为多段** ，得到的乘积最大。\r\n\r\n- 设将绳子按照 $x$ 长度等分为 $a$ 段，即 $n = ax$ ，则乘积为 $x^a$ 。观察以下公式，由于 $n$ 为常数，因此当 $x^{\\frac{1}{x}}$ 取最大值时， 乘积达到最大值。\r\n\r\n$$\r\nx^a = x^{\\frac{n}{x}} = (x^{\\frac{1}{x}})^n\r\n$$\r\n\r\n- 根据分析，可将问题转化为求 $y = x^{\\frac{1}{x}}$ 的极大值，因此对 $x$ 求导数。\r\n\r\n$$\r\n\\begin{aligned}\r\n \\ln y & = \\frac{1}{x} \\ln x & \\text{取对数} \\\\\r\n \\frac{1}{y} \\dot {y} & = \\frac{1}{x^2} - \\frac{1}{x^2} \\ln x & \\text{对 $x$ 求导} \\\\\r\n & = \\frac{1 - \\ln x}{x^2} \\\\\r\n \\dot {y} & = \\frac{1 - \\ln x}{x^2} x^{\\frac{1}{x}} & \\text{整理得}\r\n\\end{aligned}\r\n$$\r\n\r\n- 令 $\\dot {y} = 0$ ，则 $1 - \\ln x = 0$ ，易得驻点为 $x_0 = e \\approx 2.7$ ；根据以下公式，可知 $x_0$ 为极大值点。\r\n\r\n$$\r\n\\dot {y}\r\n\\begin{cases}\r\n > 0 & , x \\in [- \\infty, e) \\\\\r\n < 0 & , x \\in (e, \\infty] \\\\\r\n\\end{cases}\r\n$$\r\n\r\n- 由于切分长度 $x$ 必须为整数，最接近 $e$ 的整数为 $2$ 或 $3$ 。如下式所示，代入 $x = 2$ 和 $x = 3$ ，得出 $x = 3$ 时，乘积达到最大。\r\n\r\n$$\r\ny(3) = 3^{1/3} \\approx 1.44 \\\\\r\ny(2) = 2^{1/2} \\approx 1.41\r\n$$\r\n\r\n- 口算对比方法：给两数字同时取 $6$ 次方，再对比。\r\n\r\n$$\r\n[y(3)]^6 = (3^{1/3})^6 = 9 \\\\\r\n[y(2)]^6 = (2^{1/2})^6 = 8\r\n$$\r\n\r\n> **推论二：** 尽可能将绳子以长度 $3$ 等分为多段时，乘积最大。\r\n\r\n##### 切分规则：\r\n\r\n1. **最优：** $3$ 。把绳子尽可能切为多个长度为 $3$ 的片段，留下的最后一段绳子的长度可能为 $0,1,2$ 三种情况。\r\n2. **次优：** $2$ 。若最后一段绳子长度为 $2$ ；则保留，不再拆为 $1+1$ 。\r\n3. **最差：** $1$ 。若最后一段绳子长度为 $1$ ；则应把一份 $3 + 1$ 替换为 $2 + 2$，因为 $2 \\times 2 > 3 \\times 1$。\r\n\r\n##### 算法流程：\r\n\r\n1. 当 $n \\leq 3$ 时，按照规则应不切分，但由于题目要求必须剪成 $m>1$ 段，因此必须剪出一段长度为 $1$ 的绳子，即返回 $n - 1$ 。\r\n2. 当 $n>3$ 时，求 $n$ 除以 $3$ 的 整数部分 $a$ 和 余数部分 $b$ （即 $n = 3a + b$ ），并分为以下三种情况（设求余操作符号为 \"$\\odot$\" ）：\r\n    - 当 $b = 0$ 时，直接返回 $3^a \\odot 1000000007$；\r\n    - 当 $b = 1$ 时，要将一个 $1 + 3$ 转换为 $2+2$，因此返回 $(3^{a-1} \\times 4)\\odot 1000000007$；\r\n    - 当 $b = 2$ 时，返回 $(3^a \\times 2) \\odot 1000000007$。\r\n\r\n![Picture1.png](https://pic.leetcode-cn.com/7ed7d54e40bdf83733923fb1667872ae2fa949d46c2cf49942e37b1925765ea3-Picture1.png){:width=600}\r\n\r\n##### 大数求余解法：\r\n\r\n> **大数越界：** 当 $a$ 增大时，最后返回的 $3^a$ 大小以指数级别增长，可能超出 `int32` 甚至 `int64` 的取值范围，导致返回值错误。\r\n> **大数求余问题：** 在仅使用 `int32` 类型存储的前提下，正确计算 $x^a$ 对 $p$ 求余（即 $x^a \\odot p$ ）的值。\r\n> **解决方案：** *循环求余* 、 *快速幂求余* ，其中后者的时间复杂度更低，两种方法均基于以下求余运算规则推出：\r\n> $$\r\n> (xy) \\odot p = [(x \\odot p)(y \\odot p)] \\odot p\r\n> $$\r\n\r\n##### 1. 循环求余：\r\n\r\n- 根据求余运算性质推出（∵ 本题中 $x<p$，∴ $x \\odot p = x$ ）：\r\n\r\n$$\r\nx^a \\odot p = [(x ^{a-1} \\odot p)(x \\odot p)] \\odot p=[(x ^{a-1} \\odot p)x] \\odot p\r\n$$\r\n\r\n- **解析：** 利用此公式，可通过循环操作依次求 $x^1, x^2, ..., x^{a-1}, x^a$ 对 $p$ 的余数，保证每轮中间值 `rem` 都在 `int32` 取值范围中。封装方法代码如下所示。\r\n- **时间复杂度 $O(N)$ ：** 其中 $N=a$ ，即循环的线性复杂度。\r\n\r\n```python\r\n# 求 (x^a) % p —— 循环求余法\r\ndef remainder(x, a, p):\r\n    rem = 1\r\n    for _ in range(a):\r\n        rem = (rem * x) % p\r\n    return rem\r\n```\r\n\r\n##### 2. 快速幂求余：\r\n\r\n- 根据求余运算性质可推出：\r\n\r\n$$\r\nx^a \\odot p = (x^2)^{a/2} \\odot p = (x^2 \\odot p)^{a / 2} \\odot p\r\n$$\r\n\r\n- 当 $a$ 为奇数时 $a/2$ 不是整数，因此分为以下两种情况（ ''$//$'' 代表向下取整的除法）：\r\n\r\n$$\r\n{x^a \\odot p = }\r\n\\begin{cases}\r\n(x^2 \\odot p)^{a // 2} \\odot p &  \\text{, $a$ 为偶数} \\\\\r\n{[(x \\odot p)(x ^{a-1} \\odot p)] \\odot p = [x(x^2 \\odot p)^{a//2}] \\odot p} & \\text{, $a$ 为奇数} \\\\\r\n\\end{cases}\r\n$$\r\n\r\n- **解析：** 利用以上公式，可通过循环操作每次把指数 $a$ 问题降低至指数 $a//2$ 问题，只需循环 $log_2(N)$ 次，因此可将复杂度降低至对数级别。封装方法代码如下所示。\r\n\r\n```python\r\n# 求 (x^a) % p —— 快速幂求余\r\ndef remainder(x, a, p):\r\n    rem = 1\r\n    while a > 0:\r\n        if a % 2: rem = (rem * x) % p\r\n        x = x ** 2 % p\r\n        a //= 2\r\n    return rem\r\n```\r\n\r\n- **帮助理解：** 根据下表， 初始状态 $rem=1$, $x=3$, $a=19$, $p=1000000007$ ，最后会将 $rem \\times (x^a \\odot p)$ 化为 $rem \\times (x^0 \\odot p) = rem \\times 1$ 的形式，即 $rem$ 为余数答案。\r\n\r\n| $n$  |                 $rem \\times (x^a \\odot p)$ | $rem_n=rem_{n-1} \\times x_{n-1} \\odot p$ |        $x_n=x_{n-1}^2 \\odot p$ | $a_n=a_{n-1}//2$ |\r\n| ---- | -----------------------------------------: | ---------------------------------------: | -----------------------------: | :--------------: |\r\n| $1$  |                $1 \\times (3^{19} \\odot p)$ |                                      $1$ |                            $3$ |       $19$       |\r\n| $2$  |                 $3 \\times (9^{9} \\odot p)$ |                      $3=1\\times3\\odot p$ |                $9=3^2 \\odot p$ |    $9=19//2$     |\r\n| $3$  |               $27 \\times (81^{4} \\odot p)$ |                $27 = 3 \\times 9 \\odot p$ |                $81=9^2\\odot p$ |     $4=9//2$     |\r\n| $4$  |             $27 \\times (6561^{2} \\odot p)$ |                                     $27$ |            $6561=81^2 \\odot p$ |     $2=4//2$     |\r\n| $5$  |         $27 \\times (43046721^{1} \\odot p)$ |                                     $27$ |      $43046721=6561^2 \\odot p$ |     $1=2//2$     |\r\n| $6$  | $162261460 \\times (175880701^{0} \\odot p)$ |   $162261460=27 \\times 43046721 \\odot p$ | $175880701=43046721^2 \\odot p$ |     $0=1//2$     |\r\n\r\n##### 复杂度分析：\r\n\r\n> 以下为**二分求余法**的复杂度。\r\n\r\n- **时间复杂度 $O(\\log_2 N)$ ：** 其中 $N=a$ ，二分法为对数级别复杂度，每轮仅有求整、求余、次方运算。\r\n  - [求整和求余运算](https://stackoverflow.com/questions/35189851/time-complexity-of-modulo-operator-in-python)：资料提到不超过机器数的整数可以看作是 $O(1)$ ；\r\n  - [幂运算](https://stackoverflow.com/questions/32418731/java-math-powa-b-time-complexity)：查阅资料，提到浮点取幂为 $O(1)$ 。\r\n- **空间复杂度 $O(1)$ ：** 变量 `a, b, p, x, rem` 使用常数大小额外空间。\r\n\r\n##### 代码：\r\n\r\n> **Python 代码（第三栏）：** 由于语言特性，理论上 Python 中的变量取值范围由系统内存大小决定（无限大），因此在 Python 中其实不用考虑大数越界问题。\r\n> **Java 代码：** 根据二分法计算原理，至少要保证变量 `x` 和 `rem` 可以正确存储 $1000000007^2$ ，而 $2^{64} > 1000000007^2 > 2^{32}$ ，因此我们选取 `long` 类型。\r\n\r\n```python []\r\nclass Solution:\r\n    def cuttingRope(self, n: int) -> int:\r\n        if n <= 3: return n - 1\r\n        a, b, p, x, rem = n // 3 - 1, n % 3, 1000000007, 3 , 1\r\n        while a > 0:\r\n            if a % 2: rem = (rem * x) % p\r\n            x = x ** 2 % p\r\n            a //= 2\r\n        if b == 0: return (rem * 3) % p # = 3^(a+1) % p\r\n        if b == 1: return (rem * 4) % p # = 3^a * 4 % p\r\n        return (rem * 6) % p # = 3^(a+1) * 2  % p\r\n```\r\n\r\n```java []\r\nclass Solution {\r\n    public int cuttingRope(int n) {\r\n        if(n <= 3) return n - 1;\r\n        int b = n % 3, p = 1000000007;\r\n        long rem = 1, x = 3;\r\n        for(int a = n / 3 - 1; a > 0; a /= 2) {\r\n            if(a % 2 == 1) rem = (rem * x) % p;\r\n            x = (x * x) % p;\r\n        }\r\n        if(b == 0) return (int)(rem * 3 % p);\r\n        if(b == 1) return (int)(rem * 4 % p);\r\n        return (int)(rem * 6 % p);\r\n    }\r\n}\r\n```\r\n\r\n```python []\r\n# 由于语言特性，Python 可以不考虑大数越界问题\r\nclass Solution:\r\n    def cuttingRope(self, n: int) -> int:\r\n        if n <= 3: return n - 1\r\n        a, b, p = n // 3, n % 3, 1000000007\r\n        if b == 0: return 3 ** a % p\r\n        if b == 1: return 3 ** (a - 1) * 4 % p\r\n        return 3 ** a * 2 % p\r\n```\r\n\r\n> 数学推导需要一定的知识基础。下面分享一种基于贪心思想的思路，个人认为适合于时间有限情况下的快速解题。\r\n\r\n##### 贪心思路：\r\n\r\n> 设一绳子长度为 $n$ ( $n>1$ )，则其必可被切分为两段 $n=n_1+n_2$ 。\r\n> 根据经验推测，切分的两数字乘积往往原数字更大，即往往有 $n_1 \\times n_2 > n_1 + n_2 = n$ 。\r\n> - **例如绳子长度为 $6$ ：**  $6 = 3 + 3 < 3 \\times 3 = 9$ ；\r\n> - **也有少数反例，例如 $2$ ：** $2 = 1 + 1 > 1 \\times 1 = 1$ 。\r\n\r\n- **推论一：** 合理的切分方案可以带来更大的乘积。\r\n\r\n> 设一绳子长度为 $n$ ( $n>1$ )，**切分为两段** $n=n_1+n_2$ ，**切分为三段** $n=n_1+n_2+n_3$ 。\r\n> 根据经验推测，**三段** 的乘积往往更大，即往往有 $n_1 n_2 n_3 > n_1 n_2$ 。\r\n> - **例如绳子长度为 $9$ ：** 两段 $9=4+5$ 和 三段 $9=3+3+3$，则有 $4 \\times 5 < 3 \\times 3 \\times 3$ 。\r\n> - **也有少数反例，例如 $6$ ：** 两段 $6=3+3$ 和 三段 $6=2+2+2$，则有 $3 \\times 3 > 2 \\times 2 \\times 2$ 。\r\n\r\n- **推论二：** 若切分方案合理，绳子段切分的越多，乘积越大。\r\n\r\n> 总体上看，貌似长绳子切分为越多段乘积越大，但其实到某个长度分界点后，乘积到达最大值，就不应再切分了。\r\n> **问题转化：** 是否有**优先级最高的长度** $x$ 存在？若有，则应该尽可能把绳子以 $x$ 长度切为多段，以获取最大乘积。\r\n\r\n- **推论三：** 为使乘积最大，只有长度为 $2$ 和 $3$ 的绳子不应再切分，且 $3$ 比 $2$ 更优 *（详情见下表）* 。\r\n\r\n| 绳子切分方案  | 乘积                                       |      结论                                        |\r\n| ------------- | ------------------------------------------ | ----------------------------------------------- |\r\n| $2 = 1 + 1$   | $1 \\times 1 = 1$                           | $2$ 不应切分                                     |\r\n| $3=1+2$       | $1 \\times 2 = 2$                           | $3$ 不应切分                                     |\r\n| $4=2+2=1+3$   | $2 \\times 2 = 4 > 1 \\times 3 = 3$          | $4$ 和 $2$ 等价，且 $2+2$ 比 $1+3$ 更优           |\r\n| $5=2+3=1+4$   | $2 \\times 3 = 6 > 1 \\times 4 = 4$          | $5$ 应切分为 $2+3$                               |\r\n| $6=3+3=2+2+2$ | $3 \\times 3 = 9 > 2 \\times 2 \\times 2 = 8$ | $6$ 应切分为 $3+3$ ，进而**推出 $3$ 比 $2$ 更优** |\r\n| $>7$          | ...                                        | **长绳**（长度>7）可转化为多个**短绳**（长度1~6），因此肯定应切分 |"
}