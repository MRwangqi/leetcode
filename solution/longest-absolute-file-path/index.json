{
	"titleSlug": "longest-absolute-file-path",
	"slug": "wen-jian-de-zui-chang-jue-dui-lu-jing-by-fi0r",
	"url": "https://leetcode-cn.com/problems/longest-absolute-file-path/solution/wen-jian-de-zui-chang-jue-dui-lu-jing-by-fi0r/",
	"content": "#### 方法一：栈\n\n**思路与算法**\n\n题目中需求出文件系统中文件绝对路径的最大长度。首先观察文件绝对路径的特征，文件名一定包含 $\\texttt{`.'}$，此时文件的绝对路径为 $\\texttt{x/y/.../a.b}$，其中 $\\texttt{x,y}$ 代表文件夹的名称，$\\texttt{a.b}$ 代表文件名。我们可以观察到文件系统实际为树形结构，文件一定为树中的叶子节点，文件夹可以为根节点也可以为叶子节点，题目中给定的文件系统字符串实际为树按照前序遍历的结果，连续的 $\\texttt{`\\verb|\\|t'}$ 的个数代表当前节点的深度，相邻的文件名之间都以 $\\texttt{`\\verb|\\|n'}$ 进行隔开。\n\n假设当前的路径为 $\\texttt{x/y/z}$，其中 $\\texttt{x,y,z}$ 的文件名长度为分别为 $l_x,l_y,l_z$，则路径 $\\texttt{x, x/y, x/y/z}$ 的长度分别为 $l_x, l_x + l_y + 1, l_x + l_y + l_z + 2$。我们利用栈保存当前已遍历路径的长度，栈中元素的个数即为当前路径的深度，栈顶元素即为当前路径的长度。设根节点的深度为 $1$，字符串中连续的 $\\texttt{`\\verb|\\|t'}$ 的个数加 $1$ 即为当前节点的深度 $\\textit{depth}$，设当前节点的文件名为 $\\texttt{q}$，当前节点的文件名长度为 $l_p$，根据节点深度 $\\textit{depth}$ 有以下判断：\n\n+ 如果当前节点的深度大于当前路径的深度，则表明当前节点为栈顶节点的孩子节点，设当前栈顶节点的长度为 $\\textit{t}$，栈顶节点的路径为 $\\texttt{p}$，则此时当前文件的路径应该为 $\\texttt{p/q}$，则此时当前文件的路径长度为 $t + l_p + 1$。\n\n+ 如果当前节点的深度小于当前路径的深度，则表明当前节点并不是栈顶节点的孩子节点，按照先序遍历的顺序，则此时需要进行回退直到栈顶节点为当前节点的父亲节点，然后再求出当前节点的路径与长度。\n\n+ 由于题目只需要求出文件的长度即可，因此我们在实际运算中在栈中不需要保存完整的路径名称，只需要保存每个路径的长度即可。检测当前节点的文件名的长度并标记当前的文件名是文件还是文件夹，如果当前的字符串为文件，则求出当前文件绝对路径的长度。遍历所有可能的文件长度，即可找到文件绝对路径的最大长度。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def lengthLongestPath(self, input: str) -> int:\n        st = []\n        ans, i, n = 0, 0, len(input)\n        while i < n:\n            # 检测当前文件的深度\n            depth = 1\n            while i < n and input[i] == '\\t':\n                depth += 1\n                i += 1\n\n            # 统计当前文件名的长度\n            length, isFile = 0, False\n            while i < n and input[i] != '\\n':\n                if input[i] == '.':\n                    isFile = True\n                length += 1\n                i += 1\n            i += 1  # 跳过换行符\n\n            while len(st) >= depth:\n                st.pop()\n            if st:\n                length += st[-1] + 1\n            if isFile:\n                ans = max(ans, length)\n            else:\n                st.append(length)\n        return ans\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int lengthLongestPath(String input) {\n        int n = input.length();\n        int pos = 0;\n        int ans = 0;\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n\n        while (pos < n) {\n            /* 检测当前文件的深度 */\n            int depth = 1;\n            while (pos < n && input.charAt(pos) == '\\t') {\n                pos++;\n                depth++;\n            }\n            /* 统计当前文件名的长度 */\n            boolean isFile = false;  \n            int len = 0;   \n            while (pos < n && input.charAt(pos) != '\\n') {\n                if (input.charAt(pos) == '.') {\n                    isFile = true;\n                }\n                len++;\n                pos++;\n            }\n            /* 跳过当前的换行符 */\n            pos++;\n\n            while (stack.size() >= depth) {\n                stack.pop();\n            }\n            if (!stack.isEmpty()) {\n                len += stack.peek() + 1;\n            }\n            if (isFile) {\n                ans = Math.max(ans, len);\n            } else {\n                stack.push(len);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int lengthLongestPath(string input) {\n        int n = input.size();\n        int pos = 0;\n        int ans = 0;\n        stack<int> st;\n\n        while (pos < n) {\n            /* 检测当前文件的深度 */\n            int depth = 1;\n            while (pos < n && input[pos] == '\\t') {\n                pos++;\n                depth++;\n            }\n            /* 统计当前文件名的长度 */   \n            int len = 0; \n            bool isFile = false;     \n            while (pos < n && input[pos] != '\\n') {\n                if (input[pos] == '.') {\n                    isFile = true;\n                }\n                len++;\n                pos++;\n            }\n            /* 跳过换行符 */\n            pos++;\n\n            while (st.size() >= depth) {\n                st.pop();\n            }\n            if (!st.empty()) {\n                len += st.top() + 1;\n            }\n            if (isFile) {\n                ans = max(ans, len);\n            } else {\n                st.emplace(len);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int LengthLongestPath(string input) {\n        int n = input.Length;\n        int pos = 0;\n        int ans = 0;\n        Stack<int> stack = new Stack<int>();\n\n        while (pos < n) {\n            /* 检测当前文件的深度 */\n            int depth = 1;\n            while (pos < n && input[pos] == '\\t') {\n                pos++;\n                depth++;\n            }\n            /* 统计当前文件名的长度 */\n            bool isFile = false;  \n            int len = 0;   \n            while (pos < n && input[pos] != '\\n') {\n                if (input[pos] == '.') {\n                    isFile = true;\n                }\n                len++;\n                pos++;\n            }\n            /* 跳过当前的换行符 */\n            pos++;\n\n            while (stack.Count >= depth) {\n                stack.Pop();\n            }\n            if (stack.Count > 0) {\n                len += stack.Peek() + 1;\n            }\n            if (isFile) {\n                ans = Math.Max(ans, len);\n            } else {\n                stack.Push(len);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n\nint lengthLongestPath(char * input){\n    int n = strlen(input);\n    int pos = 0;\n    int ans = 0;\n    int * stack = (int *)malloc(sizeof(int) * n);\n    int top = 0;\n\n    while (pos < n) {\n        /* 检测当前文件的深度 */\n        int depth = 1;\n        while (pos < n && input[pos] == '\\t') {\n            pos++;\n            depth++;\n        }\n        /* 统计当前文件名的长度 */\n        bool isFile = false;  \n        int len = 0;   \n        while (pos < n && input[pos] != '\\n') {\n            if (input[pos] == '.') {\n                isFile = true;\n            }\n            len++;\n            pos++;\n        }\n        /* 跳过当前的换行符 */\n        pos++;\n\n        while (top >= depth) {\n            top--;\n        }\n        if (top > 0) {\n            len += stack[top - 1] + 1;\n        }\n        if (isFile) {\n            ans = MAX(ans, len);\n        } else {\n            stack[top++] = len;\n        }\n    }\n    free(stack);\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar lengthLongestPath = function(input) {\n    const n = input.length;\n    let pos = 0;\n    let ans = 0;\n    const stack = [];\n\n    while (pos < n) {\n        /* 检测当前文件的深度 */\n        let depth = 1;\n        while (pos < n && input[pos] === '\\t') {\n            pos++;\n            depth++;\n        }\n        /* 统计当前文件名的长度 */\n        let isFile = false;  \n        let len = 0;   \n        while (pos < n && input[pos] !== '\\n') {\n            if (input[pos] === '.') {\n                isFile = true;\n            }\n            len++;\n            pos++;\n        }\n        /* 跳过当前的换行符 */\n        pos++;\n\n        while (stack.length >= depth) {\n            stack.pop();\n        }\n        if (stack.length) {\n            len += stack[stack.length - 1] + 1;\n        }\n        if (isFile) {\n            ans = Math.max(ans, len);\n        } else {\n            stack.push(len);\n        }\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc lengthLongestPath(input string) (ans int) {\n    st := []int{}\n    for i, n := 0, len(input); i < n; {\n        // 检测当前文件的深度\n        depth := 1\n        for ; i < n && input[i] == '\\t'; i++ {\n            depth++\n        }\n\n        // 统计当前文件名的长度\n        length, isFile := 0, false\n        for ; i < n && input[i] != '\\n'; i++ {\n            if input[i] == '.' {\n                isFile = true\n            }\n            length++\n        }\n        i++ // 跳过换行符\n\n        for len(st) >= depth {\n            st = st[:len(st)-1]\n        }\n        if len(st) > 0 {\n            length += st[len(st)-1] + 1\n        }\n        if isFile {\n            ans = max(ans, length)\n        } else {\n            st = append(st, length)\n        }\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 是字符串 $\\textit{input}$ 的长度。需要遍历一遍字符串，因此时间复杂度为 $O(n)$。\n\n+ 空间复杂度：$O(n)$，其中 $n$ 是字符串 $\\textit{input}$ 的长度。需用栈保存当前路径中每个文件夹的长度，当前路径的最大深度为 $n$，因此栈中最多有 $n$ 个元素，因此空间复杂度为 $O(n)$。\n\n#### 方法二：遍历\n\n**思路与算法**\n\n假设当前的路径为 $\\texttt{x/y/z}$，其中 $\\texttt{x,y,z}$ 的文件名长度为分别为 $l_x,l_y,l_z$，则路径 $\\texttt{x, x/y, x/y/z}$ 的长度分别为 $l_x, l_x + l_y + 1, l_x + l_y + l_z + 2$。我们用 $\\textit{level}[i]$ 保存当前已遍历路径中第 $i$ 层目录的长度。设根目录为第 $1$ 层，字符串中连续的 $\\texttt{`\\verb|\\|t'}$ 的个数加 $1$ 即为当前路径的层次深度 $\\textit{depth}$，设当前节点的文件名为 $\\texttt{p}$，当前节点的文件名长度为 $l_p$，根据当前文件的层次深度 $\\textit{depth}$ 有以下判断：\n\n+ 当前文件绝对路径也就等于当前路径中第 $\\textit{depth} - 1$ 层的绝对路径加上 $\\texttt{`/'}$，然后再加上当前的文件名，当前文件绝对路径的长度也就等于 $\\textit{level}[\\textit{depth} - 1] + 1 + l_p$。特殊情况需要处理，当前为根目录时，不需要添加额外的 $\\texttt{`/'}$。如果当前文件名为文件夹时，则需要更新当前第 $\\textit{depth}$ 层的路径长度。\n\n+ 由于每次目录按照向下遍历时，是按照层级目录往下进行遍历的，即每次只能遍历完第 $i$ 层目录，才能遍历到第 $i+1$ 层目录，因此我们在向下进行遍历第 $i$ 层目录时，实际上前 $i-1$ 层的目录路径不会发生改变。当从 $i$ 层目录回退到第 $j$ 层时，$i > j$，此时前 $i-1$ 层绝对路径是保持不变的，因此可以直接利用已经保存的前 $i-1$ 层的绝对路径长度。\n\n+ 由于题目只需要求出文件的长度即可，因此我们在实际运算中不需要保存完整的路径名称，只需要保存每个路径的长度即可。检测当前节点的文件名的长度并标记当前的文件名是文件还是文件夹，如果当前的文件名为文件，则求出当前文件绝对路径的长度。遍历所有可能的文件路径长度，即可找到文件绝对路径的最大长度。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def lengthLongestPath(self, input: str) -> int:\n        ans, i, n = 0, 0, len(input)\n        level = [0] * (n + 1)\n        while i < n:\n            # 检测当前文件的深度\n            depth = 1\n            while i < n and input[i] == '\\t':\n                depth += 1\n                i += 1\n\n            # 统计当前文件名的长度\n            length, isFile = 0, False\n            while i < n and input[i] != '\\n':\n                if input[i] == '.':\n                    isFile = True\n                length += 1\n                i += 1\n            i += 1  # 跳过换行符\n\n            if depth > 1:\n                length += level[depth - 1] + 1\n            if isFile:\n                ans = max(ans, length)\n            else:\n                level[depth] = length\n        return ans\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int lengthLongestPath(String input) {\n        int n = input.length();\n        int pos = 0;\n        int ans = 0;\n        int[] level = new int[n + 1];\n\n        while (pos < n) {\n            /* 检测当前文件的深度 */\n            int depth = 1;\n            while (pos < n && input.charAt(pos) == '\\t') {\n                pos++;\n                depth++;\n            }\n            /* 统计当前文件名的长度 */   \n            int len = 0; \n            boolean isFile = false;     \n            while (pos < n && input.charAt(pos) != '\\n') {\n                if (input.charAt(pos) == '.') {\n                    isFile = true;\n                }\n                len++;\n                pos++;\n            }\n            /* 跳过换行符 */\n            pos++;\n\n            if (depth > 1) {\n                len += level[depth - 1] + 1;\n            }\n            if (isFile) {\n                ans = Math.max(ans, len);\n            } else {\n                level[depth] = len;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int lengthLongestPath(string input) {\n        int n = input.size();\n        int pos = 0;\n        int ans = 0;\n        vector<int> level(n + 1);\n\n        while (pos < n) {\n            /* 检测当前文件的深度 */\n            int depth = 1;\n            while (pos < n && input[pos] == '\\t') {\n                pos++;\n                depth++;\n            }\n            /* 统计当前文件名的长度 */   \n            int len = 0; \n            bool isFile = false;     \n            while (pos < n && input[pos] != '\\n') {\n                if (input[pos] == '.') {\n                    isFile = true;\n                }\n                len++;\n                pos++;\n            }\n            /* 跳过换行符 */\n            pos++;\n\n            if (depth > 1) {\n                len += level[depth - 1] + 1;\n            }\n            if (isFile) {\n                ans = max(ans, len);\n            } else {\n                level[depth] = len;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int LengthLongestPath(string input) {\n        int n = input.Length;\n        int pos = 0;\n        int ans = 0;\n        int[] level = new int[n + 1];\n\n        while (pos < n) {\n            /* 检测当前文件的深度 */\n            int depth = 1;\n            while (pos < n && input[pos] == '\\t') {\n                pos++;\n                depth++;\n            }\n            /* 统计当前文件名的长度 */   \n            int len = 0; \n            bool isFile = false;     \n            while (pos < n && input[pos] != '\\n') {\n                if (input[pos] == '.') {\n                    isFile = true;\n                }\n                len++;\n                pos++;\n            }\n            /* 跳过换行符 */\n            pos++;\n\n            if (depth > 1) {\n                len += level[depth - 1] + 1;\n            }\n            if (isFile) {\n                ans = Math.Max(ans, len);\n            } else {\n                level[depth] = len;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C [sol2-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n\nint lengthLongestPath(char * input){\n    int n = strlen(input);\n    int pos = 0;\n    int ans = 0;\n    int * level = (int *)malloc(sizeof(int) * (n + 1));\n    memset(level, 0, sizeof(int) * (n + 1));\n\n    while (pos < n) {\n        /* 检测当前文件的深度 */\n        int depth = 1;\n        while (pos < n && input[pos] == '\\t') {\n            pos++;\n            depth++;\n        }\n        /* 统计当前文件名的长度 */\n        bool isFile = false;  \n        int len = 0;   \n        while (pos < n && input[pos] != '\\n') {\n            if (input[pos] == '.') {\n                isFile = true;\n            }\n            len++;\n            pos++;\n        }\n        /* 跳过当前的换行符 */\n        pos++;\n\n        if (depth > 1) {\n            len += level[depth - 1] + 1;\n        }\n        if (isFile) {\n            ans = MAX(ans, len);\n        } else {\n            level[depth] = len;\n        }\n    }\n    free(level);\n    return ans;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar lengthLongestPath = function(input) {\n    const n = input.length;\n    let pos = 0;\n    let ans = 0;\n    const level = new Array(n + 1).fill(0);\n\n    while (pos < n) {\n        /* 检测当前文件的深度 */\n        let depth = 1;\n        while (pos < n && input[pos] === '\\t') {\n            pos++;\n            depth++;\n        }\n        /* 统计当前文件名的长度 */   \n        let len = 0; \n        let isFile = false;     \n        while (pos < n && input[pos] !== '\\n') {\n            if (input[pos] === '.') {\n                isFile = true;\n            }\n            len++;\n            pos++;\n        }\n        /* 跳过换行符 */\n        pos++;\n\n        if (depth > 1) {\n            len += level[depth - 1] + 1;\n        }\n        if (isFile) {\n            ans = Math.max(ans, len);\n        } else {\n            level[depth] = len;\n        }\n    }\n    return ans;\n}\n```\n\n```go [sol2-Golang]\nfunc lengthLongestPath(input string) (ans int) {\n    n := len(input)\n    level := make([]int, n+1)\n    for i := 0; i < n; {\n        // 检测当前文件的深度\n        depth := 1\n        for ; i < n && input[i] == '\\t'; i++ {\n            depth++\n        }\n\n        // 统计当前文件名的长度\n        length, isFile := 0, false\n        for ; i < n && input[i] != '\\n'; i++ {\n            if input[i] == '.' {\n                isFile = true\n            }\n            length++\n        }\n        i++ // 跳过换行符\n\n        if depth > 1 {\n            length += level[depth-1] + 1\n        }\n        if isFile {\n            ans = max(ans, length)\n        } else {\n            level[depth] = length\n        }\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 是字符串 $\\textit{input}$ 的长度。需要遍历一遍字符串，因此时间复杂度为 $O(n)$。\n\n+ 空间复杂度：$O(n)$，其中 $n$ 是字符串 $\\textit{input}$ 的长度。需要保存当前路径中每一层文件的长度，路径中最大深度为 $n$，因此需要 $O(n)$ 的空间复杂度，因此空间复杂度为 $O(n)$。"
}