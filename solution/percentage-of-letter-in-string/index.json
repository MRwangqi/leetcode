{
	"titleSlug": "percentage-of-letter-in-string",
	"slug": "zi-mu-zai-zi-fu-chuan-zhong-de-bai-fen-b-6jm6",
	"url": "https://leetcode-cn.com/problems/percentage-of-letter-in-string/solution/zi-mu-zai-zi-fu-chuan-zhong-de-bai-fen-b-6jm6/",
	"content": "#### 方法一：遍历统计\n\n**思路与算法**\n\n我们用 $n$ 表示字符串 $s$ 的长度。首先我们遍历字符串，并用 $\\textit{cnt}$ 统计字母 $\\textit{letter}$ 在 $s$ 中的出现次数。那么，$s$ 中 $\\textit{letter}$ 所占的**百分比**即为 $100 \\times \\textit{cnt} / s$，**向下取整**后的值即为 $\\lfloor 100 \\times \\textit{cnt} / s \\rfloor$（其中 $\\lfloor \\dots \\rfloor$ 代表向下取整）。我们计算上式的值，并作为答案返回即可。 \n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int percentageLetter(string s, char letter) {\n        int n = s.size();\n        int cnt = 0;\n        for (char ch: s) {\n            if (ch == letter) {\n                ++cnt;\n            }\n        }\n        return 100 * cnt / n;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def percentageLetter(self, s: str, letter: str) -> int:\n        n = len(s)\n        cnt = 0\n        for ch in s:\n            if ch == letter:\n                cnt += 1\n        return 100 * cnt // n\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $s$ 的长度。即为遍历计算字符出现次数的时间复杂度。\n\n- 空间复杂度：$O(1)$。"
}