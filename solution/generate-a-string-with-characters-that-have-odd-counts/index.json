{
	"titleSlug": "generate-a-string-with-characters-that-have-odd-counts",
	"slug": "sheng-cheng-mei-chong-zi-fu-du-shi-qi-sh-c2yf",
	"url": "https://leetcode-cn.com/problems/generate-a-string-with-characters-that-have-odd-counts/solution/sheng-cheng-mei-chong-zi-fu-du-shi-qi-sh-c2yf/",
	"content": "#### 方法一：分类讨论\n\n**思路与算法**\n\n当 $n$ 为奇数时，我们返回 $n$ 个 $\\texttt{`a'}$ 组成的字符串。\n\n当 $n$ 为偶数时，我们返回 $n-1$ 个 $\\texttt{`a'}$ 和一个 $\\texttt{`b'}$ 组成的字符串。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string generateTheString(int n) {\n        if (n % 2 == 1) {\n            return string(n, 'a');\n        }\n        return string(n - 1, 'a') + 'b';\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String generateTheString(int n) {\n        StringBuffer sb = new StringBuffer();\n        if (n % 2 == 1) {\n            return sb.append(\"a\".repeat(n)).toString();\n        }\n        return sb.append(\"a\".repeat(n - 1)).append(\"b\").toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string GenerateTheString(int n) {\n        StringBuilder sb = new StringBuilder();\n        if (n % 2 == 1) {\n            return new string('a', n);\n        }\n        return new string('a', n - 1) + \"b\";\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def generateTheString(self, n: int) -> str:\n        if n % 2 == 1:\n            return \"a\" * n\n        return \"a\" * (n - 1) + \"b\"\n```\n\n```C [sol1-C]\nchar * generateTheString(int n) {\n    char * ans = (char *)malloc(sizeof(char) * (n + 1));\n    memset(ans, 'a', sizeof(char) * n);\n    ans[n] = '\\0';\n    if (n % 2 == 1) {\n        return ans;\n    }\n    ans[n - 1] = 'b';\n    return ans;\n}\n```\n\n```go [sol1-Golang]\nfunc generateTheString(n int) string {\n    if n%2 == 1 {\n        return strings.Repeat(\"a\", n)\n    }\n    return strings.Repeat(\"a\", n-1) + \"b\"\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar generateTheString = function(n) {\n    const sb = '';\n    if (n % 2 === 1) {\n        return sb + 'a'.repeat(n);;\n    }\n    return sb + 'a'.repeat(n - 1) + 'b';\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。\n\n- 空间复杂度：$O(1)$。这里不计入返回值需要的空间。"
}