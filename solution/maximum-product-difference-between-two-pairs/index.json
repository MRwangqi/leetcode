{
	"titleSlug": "maximum-product-difference-between-two-pairs",
	"slug": "liang-ge-shu-dui-zhi-jian-de-zui-da-chen-1ksh",
	"url": "https://leetcode-cn.com/problems/maximum-product-difference-between-two-pairs/solution/liang-ge-shu-dui-zhi-jian-de-zui-da-chen-1ksh/",
	"content": "#### 方法一：贪心\n\n**思路与算法**\n\n由于 $\\textit{nums}$ 中的元素均为正整数，因此任意数对的乘积均为正整数。那么 $\\textit{nums}$ 中的最大数对乘积即为数组中最大两个元素 $\\textit{mx}_1$ 与 $\\textit{mx}_2$ 的乘积；同理，最小数对乘积即为数组中最小两个元素 $\\textit{mn}_1$ 与 $\\textit{mn}_2$ 的乘积。\n\n同时，由于 $\\textit{nums}$ 中的元素个数大于等于 $4$ 个，因此这四个元素的下标一定互不相同。那么，$\\textit{nums}$ 中两个数对之间的乘积差最大值即为 $(\\textit{mx}_1 \\times \\textit{mx}_2) - (\\textit{mn}_1 \\times \\textit{mn}_2)$。\n\n我们可以通过对数组 $\\textit{nums}$ 的一次遍历，找到对应的四个元素，进而计算出两个数对之间的乘积差最大值。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxProductDifference(vector<int>& nums) {\n        int n = nums.size();\n        // 数组中最大的两个值\n        int mx1 = max(nums[0], nums[1]);\n        int mx2 = min(nums[0], nums[1]);\n        // 数组中最小的两个值\n        int mn1 = min(nums[0], nums[1]);\n        int mn2 = max(nums[0], nums[1]);\n        for (int i = 2; i < n; ++i){\n            int tmp = nums[i];\n            if (tmp > mx1){\n                mx2 = mx1;\n                mx1 = tmp;\n            }\n            else if (tmp > mx2){\n                mx2 = tmp;\n            }\n            if (tmp < mn1){\n                mn2 = mn1;\n                mn1 = tmp;\n            }\n            else if (tmp < mn2){\n                mn2 = tmp;\n            }\n        }\n        return (mx1 * mx2) - (mn1 * mn2);\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxProductDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        # 数组中最大的两个值\n        mx1, mx2 = max(nums[0], nums[1]), min(nums[0], nums[1])\n        # 数组中最小的两个值\n        mn1, mn2 = min(nums[0], nums[1]), max(nums[0], nums[1])\n        for i in range(2, n):\n            tmp = nums[i]\n            if tmp > mx1:\n                mx1, mx2 = tmp, mx1\n            elif tmp > mx2:\n                mx2 = tmp\n            if tmp < mn1:\n                mn1, mn2 = tmp, mn1\n            elif tmp < mn2:\n                mn2 = tmp\n        return (mx1 * mx2) - (mn1 * mn2)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，即为遍历 $\\textit{nums}$ 寻找四个目标值的时间复杂度。\n\n- 空间复杂度：$O(1)$。"
}