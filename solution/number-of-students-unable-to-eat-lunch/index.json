{
	"titleSlug": "number-of-students-unable-to-eat-lunch",
	"slug": "wu-fa-chi-wu-can-de-xue-sheng-shu-liang-fv3f5",
	"url": "https://leetcode-cn.com/problems/number-of-students-unable-to-eat-lunch/solution/wu-fa-chi-wu-can-de-xue-sheng-shu-liang-fv3f5/",
	"content": "#### 方法一：模拟\n\n假设喜欢吃圆形三明治的学生数量为 $s_0$，喜欢吃方形三明治的学生数量为 $s_1$。根据题意，我们可以知道栈顶的三明治能否被拿走取决于队列剩余的学生中是否有喜欢它的，因此学生在队列的相对位置不影响整个过程，我们只需要记录队列剩余的学生中 $s_0$ 和 $s_1$ 的值。我们对整个过程进行模拟，如果栈顶的元素为 $0$ 并且 $s_0 \\gt 0$，我们将 $s_0$ 减 $1$；如果栈顶的元素为 $1$ 并且 $s_1 \\gt 0$，我们将 $s_1$ 减 $1$；否则终止过程，并返回 $s_0 + s_1$。\n\n```Python [sol1-Python3]\nclass Solution:\n    def countStudents(self, students: List[int], sandwiches: List[int]) -> int:\n        s1 = sum(students)\n        s0 = len(students) - s1\n        for x in sandwiches:\n            if x == 0 and s0:\n                s0 -= 1\n            elif x == 1 and s1:\n                s1 -= 1\n            else:\n                break\n        return s0 + s1\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countStudents(vector<int>& students, vector<int>& sandwiches) {\n        int s1 = accumulate(students.begin(), students.end(), 0);\n        int s0 = students.size() - s1;\n        for (int i = 0; i < sandwiches.size(); i++) {\n            if (sandwiches[i] == 0 && s0 > 0) {\n                s0--;\n            } else if (sandwiches[i] == 1 && s1 > 0) {\n                s1--;\n            } else {\n                break;\n            }\n        }\n        return s0 + s1;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countStudents(int[] students, int[] sandwiches) {\n        int s1 = Arrays.stream(students).sum();\n        int s0 = students.length - s1;\n        for (int i = 0; i < sandwiches.length; i++) {\n            if (sandwiches[i] == 0 && s0 > 0) {\n                s0--;\n            } else if (sandwiches[i] == 1 && s1 > 0) {\n                s1--;\n            } else {\n                break;\n            }\n        }\n        return s0 + s1;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int CountStudents(int[] students, int[] sandwiches) {\n        int s1 = students.Sum();\n        int s0 = students.Length - s1;\n        for (int i = 0; i < sandwiches.Length; i++) {\n            if (sandwiches[i] == 0 && s0 > 0) {\n                s0--;\n            } else if (sandwiches[i] == 1 && s1 > 0) {\n                s1--;\n            } else {\n                break;\n            }\n        }\n        return s0 + s1;\n    }\n}\n```\n\n```C [sol1-C]\nint countStudents(int* students, int studentsSize, int* sandwiches, int sandwichesSize) {\n    int s1 = 0;\n    for (int i = 0; i < studentsSize; i++) {\n        s1 += students[i];\n    }\n    int s0 = studentsSize - s1;\n    for (int i = 0; i < sandwichesSize; i++) {\n        if (sandwiches[i] == 0 && s0 > 0) {\n            s0--;\n        } else if (sandwiches[i] == 1 && s1 > 0) {\n            s1--;\n        } else {\n            break;\n        }\n    }\n    return s0 + s1;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar countStudents = function(students, sandwiches) {\n    let s1 = _.sum(students);\n    let s0 = students.length - s1;\n    for (let i = 0; i < sandwiches.length; i++) {\n        if (sandwiches[i] === 0 && s0 > 0) {\n            s0--;\n        } else if (sandwiches[i] === 1 && s1 > 0) {\n            s1--;\n        } else {\n            break;\n        }\n    }\n    return s0 + s1;\n};\n```\n\n```go [sol1-Golang]\nfunc countStudents(students, sandwiches []int) int {\n    s1 := 0\n    for _, v := range students {\n        s1 += v\n    }\n    s0 := len(students) - s1\n    for _, x := range sandwiches {\n        if x == 0 && s0 > 0 {\n            s0--\n        } else if x == 1 && s1 > 0 {\n            s1--\n        } else {\n            break\n        }\n    }\n    return s0 + s1\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 是学生的数量。\n\n+ 空间复杂度：$O(1)$。"
}