{
	"titleSlug": "new-21-game",
	"slug": "xin-21dian-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/new-21-game/solution/xin-21dian-by-leetcode-solution/",
	"content": "### 📺视频题解  \n![837. 新21点 4.mp4](8e029a47-ffea-47d0-a750-7c0c208ac6cb)\n\n### 📖文字题解\n\n#### 方法一：动态规划\n\n爱丽丝获胜的概率只和下一轮开始前的得分有关，因此根据得分计算概率。\n\n令 $\\textit{dp}[x]$ 表示从得分为 $x$ 的情况开始游戏并且获胜的概率，目标是求 $\\textit{dp}[0]$ 的值。\n\n根据规则，当分数达到或超过 $k$ 时游戏结束，游戏结束时，如果分数不超过 $n$ 则获胜，如果分数超过 $n$ 则失败。因此当 $k \\le x \\le \\min(n, k+\\textit{maxPts}-1)$ 时有 $\\textit{dp}[x]=1$，当 $x>\\min(n, k+\\textit{maxPts}-1)$ 时有 $\\textit{dp}[x]=0$。\n\n> 为什么分界线是 $\\min(n, k+\\textit{maxPts}-1)$？首先，只有在分数不超过 $n$ 时才算获胜；其次，可以达到的最大分数为 $k+\\textit{maxPts}-1$，即在最后一次抽取数字之前的分数为 $k-1$，并且抽到了 $\\textit{maxPts}$。\n\n当 $0 \\le x < k$ 时，如何计算 $\\textit{dp}[x]$ 的值？注意到每次在范围 $[1, \\textit{maxPts}]$ 内随机抽取一个整数，且每个整数被抽取到的概率相等，因此可以得到如下状态转移方程：\n\n$$\n\\textit{dp}[x]=\\frac{\\sum_{i=1}^\\textit{maxPts} \\textit{dp}[x+i]}{\\textit{maxPts}}\n$$\n\n根据状态转移方程，可以实现如下简单的动态规划：\n\n```Java [sol1-Java]\nclass Solution {\n    public double new21Game(int n, int k, int maxPts) {\n        if (k == 0) {\n            return 1.0;\n        }\n        double[] dp = new double[k + maxPts];\n        for (int i = k; i <= n && i < k + maxPts; i++) {\n            dp[i] = 1.0;\n        }\n        for (int i = k - 1; i >= 0; i--) {\n            for (int j = 1; j <= maxPts; j++) {\n                dp[i] += dp[i + j] / maxPts;\n            }\n        }\n        return dp[0];\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public double New21Game(int n, int k, int maxPts) {\n        if (k == 0) {\n            return 1.0;\n        }\n        double[] dp = new double[k + maxPts];\n        for (int i = k; i <= n && i < k + maxPts; i++) {\n            dp[i] = 1.0;\n        }\n        for (int i = k - 1; i >= 0; i--) {\n            for (int j = 1; j <= maxPts; j++) {\n                dp[i] += dp[i + j] / maxPts;\n            }\n        }\n        return dp[0];\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    double new21Game(int n, int k, int maxPts) {\n        if (k == 0) {\n            return 1.0;\n        }\n        vector<double> dp(k + maxPts);\n        for (int i = k; i <= n && i < k + maxPts; i++) {\n            dp[i] = 1.0;\n        }\n        for (int i = k - 1; i >= 0; i--) {\n            for (int j = 1; j <= maxPts; j++) {\n                dp[i] += dp[i + j] / maxPts;\n            }\n        }\n        return dp[0];\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def new21Game(self, n: int, k: int, maxPts: int) -> float:\n        if k == 0:\n            return 1.0\n        dp = [0.0] * (k + maxPts)\n        for i in range(k, min(n, k + maxPts - 1) + 1):\n            dp[i] = 1.0\n        for i in range(k - 1, -1, -1):\n            for j in range(1, maxPts + 1):\n                dp[i] += dp[i + j] / maxPts\n        return dp[0]\n```\n\n```golang [sol1-Golang]\nfunc new21Game(n int, k int, maxPts int) float64 {\n    if k == 0 {\n        return 1.0\n    }\n    dp := make([]float64, k + maxPts)\n    for i := k; i <= n && i < k + maxPts; i++ {\n        dp[i] = 1.0\n    }\n    for i := k - 1; i >= 0; i-- {\n        for j := 1; j <= maxPts; j++ {\n            dp[i] += dp[i + j] / float64(maxPts)\n        }\n    }\n    return dp[0]\n}\n```\n\n上述解法的时间复杂度是 $O(n+k \\times \\textit{maxPts})$，会超出时间限制，因此需要优化。\n\n考虑对 $\\textit{dp}$ 的相邻项计算差分，有如下结果：\n\n$$\n\\textit{dp}[x] - \\textit{dp}[x+1]=\\frac{\\textit{dp}[x+1] - \\textit{dp}[x+\\textit{maxPts}+1]}{\\textit{maxPts}}\n$$\n\n其中 $0 \\le x<k-1$。\n\n因此可以得到新的状态转移方程：\n\n$$\n\\textit{dp}[x]=\\textit{dp}[x+1]-\\frac{\\textit{dp}[x+\\textit{maxPts}+1]-\\textit{dp}[x+1]}{\\textit{maxPts}}\n$$\n\n其中 $0 \\le x<k-1$。\n\n注意到上述状态转移方程中 $x$ 的取值范围，当 $x=k-1$ 时不适用。因此对于 $\\textit{dp}[k-1]$ 的值，需要通过\n\n$$\n\\textit{dp}[k-1]=\\frac{\\sum_{i=0}^{\\textit{maxPts}-1} \\textit{dp}[k+i]}{\\textit{maxPts}}\n$$\n\n计算得到。注意到只有当 $k \\le x \\le \\min(n, k+\\textit{maxPts}-1)$ 时才有 $\\textit{dp}[x]=1$，因此\n\n$$\n\\textit{dp}[k-1]=\\frac{\\min(n, k+\\textit{maxPts}-1) - k + 1}{\\textit{maxPts}} = \\frac{\\min(n-k+1,\\textit{maxPts})}{\\textit{maxPts}}\n$$\n\n可在 $O(1)$ 时间内计算得到 $\\textit{dp}[k-1]$ 的值。\n\n对于 $\\textit{dp}[k-2]$ 到 $\\textit{dp}[0]$ 的值，则可通过新的状态转移方程得到。\n\n```Java [sol2-Java]\nclass Solution {\n    public double new21Game(int n, int k, int maxPts) {\n        if (k == 0) {\n            return 1.0;\n        }\n        double[] dp = new double[k + maxPts];\n        for (int i = k; i <= n && i < k + maxPts; i++) {\n            dp[i] = 1.0;\n        }\n        dp[k - 1] = 1.0 * Math.min(n - k + 1, maxPts) / maxPts;\n        for (int i = k - 2; i >= 0; i--) {\n            dp[i] = dp[i + 1] - (dp[i + maxPts + 1] - dp[i + 1]) / maxPts;\n        }\n        return dp[0];\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public double New21Game(int n, int k, int maxPts) {\n        if (k == 0) {\n            return 1.0;\n        }\n        double[] dp = new double[k + maxPts];\n        for (int i = k; i <= n && i < k + maxPts; i++) {\n            dp[i] = 1.0;\n        }\n        dp[k - 1] = 1.0 * Math.Min(n - k + 1, maxPts) / maxPts;\n        for (int i = k - 2; i >= 0; i--) {\n            dp[i] = dp[i + 1] - (dp[i + maxPts + 1] - dp[i + 1]) / maxPts;\n        }\n        return dp[0];\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    double new21Game(int n, int k, int maxPts) {\n        if (k == 0) {\n            return 1.0;\n        }\n        vector<double> dp(k + maxPts);\n        for (int i = k; i <= n && i < k + maxPts; i++) {\n            dp[i] = 1.0;\n        }\n        dp[k - 1] = 1.0 * min(n - k + 1, maxPts) / maxPts;\n        for (int i = k - 2; i >= 0; i--) {\n            dp[i] = dp[i + 1] - (dp[i + maxPts + 1] - dp[i + 1]) / maxPts;\n        }\n        return dp[0];\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def new21Game(self, n: int, k: int, maxPts: int) -> float:\n        if k == 0:\n            return 1.0\n        dp = [0.0] * (k + maxPts)\n        for i in range(k, min(n, k + maxPts - 1) + 1):\n            dp[i] = 1.0\n        dp[k - 1] = float(min(n - k + 1, maxPts)) / maxPts\n        for i in range(k - 2, -1, -1):\n            dp[i] = dp[i + 1] - (dp[i + maxPts + 1] - dp[i + 1]) / maxPts\n        return dp[0]\n```\n\n```golang [sol2-Golang]\nfunc new21Game(n int, k int, maxPts int) float64 {\n    if k == 0 {\n        return 1.0\n    }\n    dp := make([]float64, k + maxPts)\n    for i := k; i <= n && i < k + maxPts; i++ {\n        dp[i] = 1.0\n    }\n\n    dp[k - 1] = 1.0 * float64(min(n - k + 1, maxPts)) / float64(maxPts)\n    for i := k - 2; i >= 0; i-- {\n        dp[i] = dp[i + 1] - (dp[i + maxPts + 1] - dp[i + 1]) / float64(maxPts) \n    }\n    return dp[0]\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\min(n, k+\\textit{maxPts}))$。即需要计算的 $\\textit{dp}$ 值的数量 $\\min(n, k+\\textit{maxPts}-1)$。\n\n* 空间复杂度：$O(k+\\textit{maxPts})$。创建了一个长度为 $k+\\textit{maxPts}$ 的数组 $\\textit{dp}$。"
}