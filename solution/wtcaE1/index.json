{
	"titleSlug": "wtcaE1",
	"slug": "bu-han-zhong-fu-zi-fu-de-zui-chang-zi-zi-4g7m",
	"url": "https://leetcode-cn.com/problems/wtcaE1/solution/bu-han-zhong-fu-zi-fu-de-zui-chang-zi-zi-4g7m/",
	"content": "#### 方法一：滑动窗口\n\n**思路和算法**\n\n我们先用一个例子考虑如何在较优的时间复杂度内通过本题。\n\n我们不妨以示例一中的字符串 $\\texttt{abcabcbb}$ 为例，找出**从每一个字符开始的，不包含重复字符的最长子串**，那么其中最长的那个字符串即为答案。对于示例一中的字符串，我们列举出这些结果，其中括号中表示选中的字符以及最长的字符串：\n\n- 以 $\\texttt{(a)bcabcbb}$ 开始的最长字符串为 $\\texttt{(abc)abcbb}$；\n- 以 $\\texttt{a(b)cabcbb}$ 开始的最长字符串为 $\\texttt{a(bca)bcbb}$；\n- 以 $\\texttt{ab(c)abcbb}$ 开始的最长字符串为 $\\texttt{ab(cab)cbb}$；\n- 以 $\\texttt{abc(a)bcbb}$ 开始的最长字符串为 $\\texttt{abc(abc)bb}$；\n- 以 $\\texttt{abca(b)cbb}$ 开始的最长字符串为 $\\texttt{abca(bc)bb}$；\n- 以 $\\texttt{abcab(c)bb}$ 开始的最长字符串为 $\\texttt{abcab(cb)b}$；\n- 以 $\\texttt{abcabc(b)b}$ 开始的最长字符串为 $\\texttt{abcabc(b)b}$；\n- 以 $\\texttt{abcabcb(b)}$ 开始的最长字符串为 $\\texttt{abcabcb(b)}$。\n\n发现了什么？如果我们依次递增地枚举子串的起始位置，那么子串的结束位置也是递增的！这里的原因在于，假设我们选择字符串中的第 $k$ 个字符作为起始位置，并且得到了不包含重复字符的最长子串的结束位置为 $r_k$。那么当我们选择第 $k+1$ 个字符作为起始位置时，首先从 $k+1$ 到 $r_k$ 的字符显然是不重复的，并且由于少了原本的第 $k$ 个字符，我们可以尝试继续增大 $r_k$，直到右侧出现了重复字符为止。\n\n这样一来，我们就可以使用「滑动窗口」来解决这个问题了：\n\n- 我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界，其中左指针代表着上文中「枚举子串的起始位置」，而右指针即为上文中的 $r_k$；\n\n- 在每一步的操作中，我们会将左指针向右移动一格，表示 **我们开始枚举下一个字符作为起始位置**，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。在移动结束后，这个子串就对应着 **以左指针开始的，不包含重复字符的最长子串**。我们记录下这个子串的长度；\n\n- 在枚举结束后，我们找到的最长的子串的长度即为答案。\n\n**判断重复字符**\n\n在上面的流程中，我们还需要使用一种数据结构来判断 **是否有重复的字符**，常用的数据结构为哈希集合（即 `C++` 中的 `std::unordered_set`，`Java` 中的 `HashSet`，`Python` 中的 `set`, `JavaScript` 中的 `Set`）。在左指针向右移动的时候，我们从哈希集合中移除一个字符，在右指针向右移动的时候，我们往哈希集合中添加一个字符。\n\n至此，我们就完美解决了本题。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        // 哈希集合，记录每个字符是否出现过\n        unordered_set<char> occ;\n        int n = s.size();\n        // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动\n        int rk = -1, ans = 0;\n        // 枚举左指针的位置，初始值隐性地表示为 -1\n        for (int i = 0; i < n; ++i) {\n            if (i != 0) {\n                // 左指针向右移动一格，移除一个字符\n                occ.erase(s[i - 1]);\n            }\n            while (rk + 1 < n && !occ.count(s[rk + 1])) {\n                // 不断地移动右指针\n                occ.insert(s[rk + 1]);\n                ++rk;\n            }\n            // 第 i 到 rk 个字符是一个极长的无重复字符子串\n            ans = max(ans, rk - i + 1);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        // 哈希集合，记录每个字符是否出现过\n        Set<Character> occ = new HashSet<Character>();\n        int n = s.length();\n        // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动\n        int rk = -1, ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (i != 0) {\n                // 左指针向右移动一格，移除一个字符\n                occ.remove(s.charAt(i - 1));\n            }\n            while (rk + 1 < n && !occ.contains(s.charAt(rk + 1))) {\n                // 不断地移动右指针\n                occ.add(s.charAt(rk + 1));\n                ++rk;\n            }\n            // 第 i 到 rk 个字符是一个极长的无重复字符子串\n            ans = Math.max(ans, rk - i + 1);\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        # 哈希集合，记录每个字符是否出现过\n        occ = set()\n        n = len(s)\n        # 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动\n        rk, ans = -1, 0\n        for i in range(n):\n            if i != 0:\n                # 左指针向右移动一格，移除一个字符\n                occ.remove(s[i - 1])\n            while rk + 1 < n and s[rk + 1] not in occ:\n                # 不断地移动右指针\n                occ.add(s[rk + 1])\n                rk += 1\n            # 第 i 到 rk 个字符是一个极长的无重复字符子串\n            ans = max(ans, rk - i + 1)\n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar lengthOfLongestSubstring = function(s) {\n    // 哈希集合，记录每个字符是否出现过\n    const occ = new Set();\n    const n = s.length;\n    // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动\n    let rk = -1, ans = 0;\n    for (let i = 0; i < n; ++i) {\n        if (i != 0) {\n            // 左指针向右移动一格，移除一个字符\n            occ.delete(s.charAt(i - 1));\n        }\n        while (rk + 1 < n && !occ.has(s.charAt(rk + 1))) {\n            // 不断地移动右指针\n            occ.add(s.charAt(rk + 1));\n            ++rk;\n        }\n        // 第 i 到 rk 个字符是一个极长的无重复字符子串\n        ans = Math.max(ans, rk - i + 1);\n    }\n    return ans;\n};\n```\n\n```golang [sol1-Golang]\nfunc lengthOfLongestSubstring(s string) int {\n    // 哈希集合，记录每个字符是否出现过\n    m := map[byte]int{}\n    n := len(s)\n    // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动\n    rk, ans := -1, 0\n    for i := 0; i < n; i++ {\n        if i != 0 {\n            // 左指针向右移动一格，移除一个字符\n            delete(m, s[i-1])\n        }\n        for rk + 1 < n && m[s[rk+1]] == 0 {\n            // 不断地移动右指针\n            m[s[rk+1]]++\n            rk++\n        }\n        // 第 i 到 rk 个字符是一个极长的无重复字符子串\n        ans = max(ans, rk - i + 1)\n    }\n    return ans\n}\n\nfunc max(x, y int) int {\n    if x < y {\n        return y\n    }\n    return x\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是字符串的长度。左指针和右指针分别会遍历整个字符串一次。\n\n- 空间复杂度：$O(|\\Sigma|)$，其中 $\\Sigma$ 表示字符集（即字符串中可以出现的字符），$|\\Sigma|$ 表示字符集的大小。在本题中没有明确说明字符集，因此可以默认为所有 ASCII 码在 $[0, 128)$ 内的字符，即 $|\\Sigma| = 128$。我们需要用到哈希集合来存储出现过的字符，而字符最多有 $|\\Sigma|$ 个，因此空间复杂度为 $O(|\\Sigma|)$。"
}