{
	"titleSlug": "word-pattern",
	"slug": "dan-ci-gui-lu-by-leetcode-solution-6vqv",
	"url": "https://leetcode-cn.com/problems/word-pattern/solution/dan-ci-gui-lu-by-leetcode-solution-6vqv/",
	"content": "#### 方法一：哈希表\n\n**思路及解法**\n\n在本题中，我们需要判断字符与字符串之间是否恰好一一对应。即任意一个字符都对应着唯一的字符串，任意一个字符串也只被唯一的一个字符对应。在集合论中，这种关系被称为「双射」。\n\n想要解决本题，我们可以利用哈希表记录每一个字符对应的字符串，以及每一个字符串对应的字符。然后我们枚举每一对字符与字符串的配对过程，不断更新哈希表，如果发生了冲突，则说明给定的输入不满足双射关系。\n\n在实际代码中，我们枚举 $\\textit{pattern}$ 中的每一个字符，利用双指针来均摊线性地找到该字符在 $\\textit{str}$ 中对应的字符串。每次确定一个字符与字符串的组合，我们就检查是否出现冲突，最后我们再检查两字符串是否比较完毕即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool wordPattern(string pattern, string str) {\n        unordered_map<string, char> str2ch;\n        unordered_map<char, string> ch2str;\n        int m = str.length();\n        int i = 0;\n        for (auto ch : pattern) {\n            if (i >= m) {\n                return false;\n            }\n            int j = i;\n            while (j < m && str[j] != ' ') j++;\n            const string &tmp = str.substr(i, j - i);\n            if (str2ch.count(tmp) && str2ch[tmp] != ch) {\n                return false;\n            }\n            if (ch2str.count(ch) && ch2str[ch] != tmp) {\n                return false;\n            }\n            str2ch[tmp] = ch;\n            ch2str[ch] = tmp;\n            i = j + 1;\n        }\n        return i >= m;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean wordPattern(String pattern, String str) {\n        Map<String, Character> str2ch = new HashMap<String, Character>();\n        Map<Character, String> ch2str = new HashMap<Character, String>();\n        int m = str.length();\n        int i = 0;\n        for (int p = 0; p < pattern.length(); ++p) {\n            char ch = pattern.charAt(p);\n            if (i >= m) {\n                return false;\n            }\n            int j = i;\n            while (j < m && str.charAt(j) != ' ') {\n                j++;\n            }\n            String tmp = str.substring(i, j);\n            if (str2ch.containsKey(tmp) && str2ch.get(tmp) != ch) {\n                return false;\n            }\n            if (ch2str.containsKey(ch) && !tmp.equals(ch2str.get(ch))) {\n                return false;\n            }\n            str2ch.put(tmp, ch);\n            ch2str.put(ch, tmp);\n            i = j + 1;\n        }\n        return i >= m;\n    }\n}\n```\n\n```Golang [sol1-Golang]\nfunc wordPattern(pattern string, s string) bool {\n    word2ch := map[string]byte{}\n    ch2word := map[byte]string{}\n    words := strings.Split(s, \" \")\n    if len(pattern) != len(words) {\n        return false\n    }\n    for i, word := range words {\n        ch := pattern[i]\n        if word2ch[word] > 0 && word2ch[word] != ch || ch2word[ch] != \"\" && ch2word[ch] != word {\n            return false\n        }\n        word2ch[word] = ch\n        ch2word[ch] = word\n    }\n    return true\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar wordPattern = function(pattern, s) {\n    const word2ch = new Map();\n    const ch2word = new Map();\n    const words = s.split(' ');\n    if (pattern.length !== words.length) {\n        return false;\n    }\n    for (const [i, word] of words.entries()) {\n        const ch = pattern[i];\n        if (word2ch.has(word) && word2ch.get(word) != ch || ch2word.has(ch) && ch2word.get(ch) !== word) {\n            return false;\n        }\n        word2ch.set(word, ch);\n        ch2word.set(ch, word);\n    }\n    return true;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def wordPattern(self, pattern: str, s: str) -> bool:\n        word2ch = dict()\n        ch2word = dict()\n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        \n        for ch, word in zip(pattern, words):\n            if (word in word2ch and word2ch[word] != ch) or (ch in ch2word and ch2word[ch] != word):\n                return False\n            word2ch[word] = ch\n            ch2word[ch] = word\n    \n        return True\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + m)$，其中 $n$ 为 $\\textit{pattern}$ 的长度，$m$ 为 $\\textit{str}$ 的长度。插入和查询哈希表的均摊时间复杂度均为 $O(n + m)$。每一个字符至多只被遍历一次。\n\n- 空间复杂度：$O(n + m)$，其中 $n$ 为 $\\textit{pattern}$ 的长度，$m$ 为 $\\textit{str}$ 的长度。最坏情况下，我们需要存储 $\\textit{pattern}$ 中的每一个字符和 $\\textit{str}$ 中的每一个字符串。"
}