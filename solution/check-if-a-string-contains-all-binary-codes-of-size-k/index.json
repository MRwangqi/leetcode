{
	"titleSlug": "check-if-a-string-contains-all-binary-codes-of-size-k",
	"slug": "jian-cha-yi-ge-zi-fu-chuan-shi-fou-bao-h-1no1",
	"url": "https://leetcode-cn.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k/solution/jian-cha-yi-ge-zi-fu-chuan-shi-fou-bao-h-1no1/",
	"content": "#### 方法一：哈希表\n\n我们遍历字符串 $s$，并用一个哈希集合（HashSet）存储所有长度为 $k$ 的子串。在遍历完成后，只需要判断哈希集合中是否有 $2^k$ 项即可，这是因为长度为 $k$ 的二进制串的数量为 $2^k$。\n\n注意到如果 $s$ 包含 $2^k$ 个长度为 $k$ 的二进制串，那么它的长度至少为 $2^k+k-1$。因此我们可以在遍历前判断 $s$ 是否足够长。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool hasAllCodes(string s, int k) {\n        if (s.size() < (1 << k) + k - 1) {\n            return false;\n        }\n\n        unordered_set<string> exists;\n        for (int i = 0; i + k <= s.size(); ++i) {\n            exists.insert(move(s.substr(i, k)));\n        }\n        return exists.size() == (1 << k);\n    }\n};\n```\n\n```C++ [sol1-C++17]\nclass Solution {\npublic:\n    bool hasAllCodes(string s, int k) {\n        if (s.size() < (1 << k) + k - 1) {\n            return false;\n        }\n\n        string_view sv(s);\n        unordered_set<string_view> exists;\n        for (int i = 0; i + k <= s.size(); ++i) {\n            exists.insert(sv.substr(i, k));\n        }\n        return exists.size() == (1 << k);\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        if len(s) < (1 << k) + k - 1:\n            return False\n        \n        exists = set(s[i:i+k] for i in range(len(s) - k + 1))\n        return len(exists) == (1 << k)\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean hasAllCodes(String s, int k) {\n        if (s.length() < (1 << k) + k - 1) {\n            return false;\n        }\n\n        Set<String> exists = new HashSet<String>();\n        for (int i = 0; i + k <= s.length(); ++i) {\n            exists.add(s.substring(i, i + k));\n        }\n        return exists.size() == (1 << k);\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(k * |s|)$，其中 $|s|$ 是字符串 $s$ 的长度。将长度为 $k$ 的字符串加入哈希集合的时间复杂度为 $O(k)$，即为计算哈希值的时间。\n\n- 空间复杂度：$O(k * 2^k)$。哈希集合中最多有 $2^k$ 项，每一项是一个长度为 $k$ 的字符串。\n\n#### 方法二：哈希表 + 滑动窗口\n\n我们可以借助滑动窗口，对方法一进行优化。\n\n假设我们当前遍历到的长度为 $k$ 的子串为\n\n$$\ns_i, s_{i+1}, \\cdots, s_{i+k-1}\n$$\n\n它的下一个子串为\n\n$$\ns_{i+1}, s_{i+2}, \\cdots, s_{i+k}\n$$\n\n由于这些子串都是二进制串，我们可以将其表示成对应的十进制整数的形式，即\n\n$$\n\\begin{aligned}\n    & \\textit{num}_i &= s_i * 2^{k-1} + s_{i+1} * 2^{k-2} + \\cdots + s_{i+k-1} * 2^0 \\\\\n    & \\textit{num}_{i+1} &= s_{i+1} * 2^{k-1} + s_{i+2} * 2^{k-2} + \\cdots + s_{i+k} * 2^0 \\\\\n\\end{aligned}\n$$\n\n那么我们可以将这些十进制整数作为哈希表中的项。由于每一个长度为 $k$ 的二进制串都唯一对应了一个十进制整数，因此这样做与方法一是一致的。与二进制串本身不同的是，我们可以在 $O(1)$ 的时间内通过 $\\textit{num}_i$ 得到 $\\textit{num}_{i+1}$，即：\n\n$$\nnum_{i+1} = (num_{i} - s_i * 2^{k-1}) * 2 + s_{i+k}\n$$\n\n这样以来，我们在遍历 $s$ 的过程中只维护子串对应的十进制整数，而不需要对字符串进行操作，从而减少了时间复杂度。\n\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool hasAllCodes(string s, int k) {\n        if (s.size() < (1 << k) + k - 1) {\n            return false;\n        }\n\n        int num = stoi(s.substr(0, k), nullptr, 2);\n        unordered_set<int> exists = {num};\n        \n        for (int i = 1; i + k <= s.size(); ++i) {\n            num = (num - ((s[i - 1] - '0') << (k - 1))) * 2 + (s[i + k - 1] - '0');\n            exists.insert(num);\n        }\n        return exists.size() == (1 << k);\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        if len(s) < (1 << k) + k - 1:\n            return False\n        \n        num = int(s[:k], base=2)\n        exists = set([num])\n\n        for i in range(1, len(s) - k + 1):\n            num = (num - ((ord(s[i - 1]) - 48) << (k - 1))) * 2 + (ord(s[i + k - 1]) - 48)\n            exists.add(num)\n        \n        return len(exists) == (1 << k)\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean hasAllCodes(String s, int k) {\n        if (s.length() < (1 << k) + k - 1) {\n            return false;\n        }\n\n        int num = Integer.parseInt(s.substring(0, k), 2);\n        Set<Integer> exists = new HashSet<Integer>();\n        exists.add(num);\n        \n        for (int i = 1; i + k <= s.length(); ++i) {\n            num = (num - ((s.charAt(i - 1) - '0') << (k - 1))) * 2 + (s.charAt(i + k - 1) - '0');\n            exists.add(num);\n        }\n        return exists.size() == (1 << k);\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(|s|)$，其中 $|s|$ 是字符串 $s$ 的长度。\n\n- 空间复杂度：$O(2^k)$。哈希集合中最多有 $2^k$ 项，每一项是一个十进制整数。"
}