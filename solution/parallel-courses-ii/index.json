{
	"titleSlug": "parallel-courses-ii",
	"slug": "er-xu-cheng-ming-jiu-xu-zui-python3zhuan-kplk",
	"url": "https://leetcode-cn.com/problems/parallel-courses-ii/solution/er-xu-cheng-ming-jiu-xu-zui-python3zhuan-kplk/",
	"content": "### 解题思路\nPython3+状态压缩\n\n### 代码\n\n```python3\nfrom functools import lru_cache\nfrom itertools import combinations\n\n\nclass Solution:\n    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n        \n        @lru_cache(None)\n        def dfs(state):\n            if state == (1 << n) - 1:\n                return 0\n            nex = [i for i in range(n) if not state & (1 << i) and state & pre[i] == pre[i]]\n            res = n + 1\n            for sub in combinations(nex, min(k, len(nex))):\n                res = min(res, 1 + dfs(state | sum([1 << i for i in sub])))\n            return res\n\n        pre = [0] * n\n        for i, j in relations:\n            pre[j - 1] |= 1 << (i - 1)\n        return dfs(0)\n```\n***\n### 解题思路\n【儿须成名酒须醉】Python3+状态压缩DP\n\n### 代码\n- 执行用时：52 ms, 在所有 Python3 提交中击败了 92.31% 的用户\n- 内存消耗：15.4 MB, 在所有 Python3 提交中击败了 81.20% 的用户\n- 通过测试用例：81 / 81\n\n```python3\nclass Solution:\n    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n        @lru_cache(None)\n        def dfs(state):\n            if state == (1 << n) - 1:\n                return 0\n            nex = [j for j in range(n) if not state & (1 << j) and state & pre[j] == pre[j]]\n            m = len(nex)\n            floor = m // k + int(m % k > 0)\n            res = n\n            for item in combinations(nex, min(m, k)):\n                cur = 1 + dfs(state | sum(1 << j for j in item))\n                res = res if res < cur else cur\n                if res == floor: # 性能优化点，提前终止\n                    break\n            return res\n        \n        pre = [0] * n\n        for x, y in relations:\n            pre[y - 1] |= 1 << (x - 1)\n        return dfs(0)\n```"
}