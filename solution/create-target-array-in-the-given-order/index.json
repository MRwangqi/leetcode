{
	"titleSlug": "create-target-array-in-the-given-order",
	"slug": "an-ji-ding-shun-xu-chuang-jian-mu-biao-shu-zu-by-l",
	"url": "https://leetcode-cn.com/problems/create-target-array-in-the-given-order/solution/an-ji-ding-shun-xu-chuang-jian-mu-biao-shu-zu-by-l/",
	"content": "#### 方法一：模拟\n\n**思路**\n\n使用顺序表作为答案的存储结构，按照题意模拟即可。具体的方法是：要在当前的下标从 $0$ 开始长度为 $n$ 的顺序表的 $i$ 位置插入元素，就要先把原来表中区间 $[i, n]$ 中的元素从全部向后移动一位，然后在 $i$ 位置插入带插入的元素。当然很多语言中都有现成的方法可以调用，比如 C++ `vector` 类中的 `insert`、Python 列表中的 `insert` 等。\n\n**代码**\n\n```C [sol1-C]\nint* createTargetArray(int* nums, int numsSize, int* index, int indexSize, int* returnSize){\n    int* ret = (int*)malloc(sizeof(int) * indexSize);\n    int tail = -1;\n    for (int i = 0; i < indexSize; ++i) {\n        ++tail;\n        for (int j = tail; j > index[i]; --j) {\n            ret[j] = ret[j - 1];\n        }\n        ret[index[i]] = nums[i];\n    }\n    *returnSize = indexSize;\n    return ret;\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> createTargetArray(vector<int>& nums, vector<int>& index) {\n        vector <int> r;\n        for (unsigned i = 0; i < nums.size(); ++i) {\n            r.insert(r.begin() + index[i], nums[i]);\n        }\n        return r;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] createTargetArray(int[] nums, int[] index) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < nums.length; ++i) {\n            list.add(index[i], nums[i]);\n        }\n        int[] ret = new int[nums.length];\n        for (int i = 0; i < nums.length; ++i) {\n            ret[i] = list.get(i);\n        }\n        return ret;\n    }\n}\n```\n\n```Python [sol1-Python]\nclass Solution:\n    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:\n        ret = []\n        for i in range(len(nums)):\n            ret.insert(index[i], nums[i])\n        return ret\n```\n\n**复杂度分析**\n\n记数组的长度为 $n$。\n\n- 时间复杂度：考虑一次操作最坏情况下的时间代价和当前数组中元素的个数呈正比， 第 $i$ 次操作时元素个数为 $i - 1$，所以这里渐进时间复杂度为 $O(\\sum_{i = 1}^{n} (i - 1)) = O(n^2)$。\n\n- 空间复杂度：这里没有使用到辅助空间，故渐进空间复杂度为 $O(1)$。"
}