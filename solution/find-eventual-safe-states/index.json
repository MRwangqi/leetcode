{
	"titleSlug": "find-eventual-safe-states",
	"slug": "zhao-dao-zui-zhong-de-an-quan-zhuang-tai-yzfz",
	"url": "https://leetcode-cn.com/problems/find-eventual-safe-states/solution/zhao-dao-zui-zhong-de-an-quan-zhuang-tai-yzfz/",
	"content": "#### 方法一：深度优先搜索 + 三色标记法\n\n根据题意，若起始节点位于一个环内，或者能到达一个环，则该节点不是安全的。否则，该节点是安全的。\n\n我们可以使用深度优先搜索来找环，并在深度优先搜索时，用三种颜色对节点进行标记，标记的规则如下：\n\n- 白色（用 $0$ 表示）：该节点尚未被访问；\n- 灰色（用 $1$ 表示）：该节点位于递归栈中，或者在某个环上；\n- 黑色（用 $2$ 表示）：该节点搜索完毕，是一个安全节点。\n\n当我们首次访问一个节点时，将其标记为灰色，并继续搜索与其相连的节点。\n\n如果在搜索过程中遇到了一个灰色节点，则说明找到了一个环，此时退出搜索，栈中的节点仍保持为灰色，这一做法可以将「找到了环」这一信息传递到栈中的所有节点上。\n\n如果搜索过程中没有遇到灰色节点，则说明没有遇到环，那么递归返回前，我们将其标记由灰色改为黑色，即表示它是一个安全的节点。\n\n```Python [sol1-Python3]\nclass Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        n = len(graph)\n        color = [0] * n\n\n        def safe(x: int) -> bool:\n            if color[x] > 0:\n                return color[x] == 2\n            color[x] = 1\n            for y in graph[x]:\n                if not safe(y):\n                    return False\n            color[x] = 2\n            return True\n\n        return [i for i in range(n) if safe(i)]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> eventualSafeNodes(vector<vector<int>> &graph) {\n        int n = graph.size();\n        vector<int> color(n);\n\n        function<bool(int)> safe = [&](int x) {\n            if (color[x] > 0) {\n                return color[x] == 2;\n            }\n            color[x] = 1;\n            for (int y : graph[x]) {\n                if (!safe(y)) {\n                    return false;\n                }\n            }\n            color[x] = 2;\n            return true;\n        };\n\n        vector<int> ans;\n        for (int i = 0; i < n; ++i) {\n            if (safe(i)) {\n                ans.push_back(i);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> eventualSafeNodes(int[][] graph) {\n        int n = graph.length;\n        int[] color = new int[n];\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < n; ++i) {\n            if (safe(graph, color, i)) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n\n    public boolean safe(int[][] graph, int[] color, int x) {\n        if (color[x] > 0) {\n            return color[x] == 2;\n        }\n        color[x] = 1;\n        for (int y : graph[x]) {\n            if (!safe(graph, color, y)) {\n                return false;\n            }\n        }\n        color[x] = 2;\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<int> EventualSafeNodes(int[][] graph) {\n        int n = graph.Length;\n        int[] color = new int[n];\n        IList<int> ans = new List<int>();\n        for (int i = 0; i < n; ++i) {\n            if (Safe(graph, color, i)) {\n                ans.Add(i);\n            }\n        }\n        return ans;\n    }\n\n    public bool Safe(int[][] graph, int[] color, int x) {\n        if (color[x] > 0) {\n            return color[x] == 2;\n        }\n        color[x] = 1;\n        foreach (int y in graph[x]) {\n            if (!Safe(graph, color, y)) {\n                return false;\n            }\n        }\n        color[x] = 2;\n        return true;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc eventualSafeNodes(graph [][]int) (ans []int) {\n    n := len(graph)\n    color := make([]int, n)\n    var safe func(int) bool\n    safe = func(x int) bool {\n        if color[x] > 0 {\n            return color[x] == 2\n        }\n        color[x] = 1\n        for _, y := range graph[x] {\n            if !safe(y) {\n                return false\n            }\n        }\n        color[x] = 2\n        return true\n    }\n    for i := 0; i < n; i++ {\n        if safe(i) {\n            ans = append(ans, i)\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar eventualSafeNodes = function(graph) {\n    const n = graph.length;\n    const color = new Array(n).fill(0);\n    const ans = [];\n    for (let i = 0; i < n; ++i) {\n        if (safe(graph, color, i)) {\n            ans.push(i);\n        }\n    }\n    return ans;\n};\n\nconst safe = (graph, color, x) => {\n    if (color[x] > 0) {\n        return color[x] === 2;\n    }\n    color[x] = 1;\n    for (const y of graph[x]) {\n        if (!safe(graph, color, y)) {\n            return false;\n        }\n    }\n    color[x] = 2;\n    return true;\n}\n```\n\n```C [sol1-C]\nint color[10000];\n\nbool safe(int** graph, int graphSize, int* graphColSize, int x) {\n    if (color[x] > 0) {\n        return color[x] == 2;\n    }\n    color[x] = 1;\n    for (int i = 0; i < graphColSize[x]; i++){\n        if (!safe(graph, graphSize, graphColSize, graph[x][i])) {\n            return false;\n        }\n    }\n    color[x] = 2;\n    return true;\n}\n\nint* eventualSafeNodes(int** graph, int graphSize, int* graphColSize, int* returnSize) {\n    memset(color, 0, sizeof(int) * graphSize);\n    int* ans = malloc(sizeof(int) * graphSize);\n    *returnSize = 0;\n    for (int i = 0; i < graphSize; ++i) {\n        if (safe(graph, graphSize, graphColSize, i)) {\n            ans[(*returnSize)++] = i;\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m)$，其中 $n$ 是图中的点数，$m$ 是图中的边数。\n\n- 空间复杂度：$O(n)$。存储节点颜色以及递归栈的开销均为 $O(n)$。\n\n#### 方法二：拓扑排序\n\n根据题意，若一个节点没有出边，则该节点是安全的；若一个节点出边相连的点都是安全的，则该节点也是安全的。\n\n根据这一性质，我们可以将图中所有边反向，得到一个反图，然后在反图上运行拓扑排序。\n\n具体来说，首先得到反图 $\\textit{rg}$ 及其入度数组 $\\textit{inDeg}$。将所有入度为 $0$ 的点加入队列，然后不断取出队首元素，将其出边相连的点的入度减一，若该点入度减一后为 $0$，则将该点加入队列，如此循环直至队列为空。循环结束后，所有入度为 $0$ 的节点均为安全的。我们遍历入度数组，并将入度为 $0$ 的点加入答案列表。\n\n```Python [sol2-Python3]\nclass Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        rg = [[] for _ in graph]\n        for x, ys in enumerate(graph):\n            for y in ys:\n                rg[y].append(x)\n        in_deg = [len(ys) for ys in graph]\n\n        q = deque([i for i, d in enumerate(in_deg) if d == 0])\n        while q:\n            for x in rg[q.popleft()]:\n                in_deg[x] -= 1\n                if in_deg[x] == 0:\n                    q.append(x)\n\n        return [i for i, d in enumerate(in_deg) if d == 0]\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> eventualSafeNodes(vector<vector<int>> &graph) {\n        int n = graph.size();\n        vector<vector<int>> rg(n);\n        vector<int> inDeg(n);\n        for (int x = 0; x < n; ++x) {\n            for (int y : graph[x]) {\n                rg[y].push_back(x);\n            }\n            inDeg[x] = graph[x].size();\n        }\n\n        queue<int> q;\n        for (int i = 0; i < n; ++i) {\n            if (inDeg[i] == 0) {\n                q.push(i);\n            }\n        }\n        while (!q.empty()) {\n            int y = q.front();\n            q.pop();\n            for (int x : rg[y]) {\n                if (--inDeg[x] == 0) {\n                    q.push(x);\n                }\n            }\n        }\n\n        vector<int> ans;\n        for (int i = 0; i < n; ++i) {\n            if (inDeg[i] == 0) {\n                ans.push_back(i);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Integer> eventualSafeNodes(int[][] graph) {\n        int n = graph.length;\n        List<List<Integer>> rg = new ArrayList<List<Integer>>();\n        for (int i = 0; i < n; ++i) {\n            rg.add(new ArrayList<Integer>());\n        }\n        int[] inDeg = new int[n];\n        for (int x = 0; x < n; ++x) {\n            for (int y : graph[x]) {\n                rg.get(y).add(x);\n            }\n            inDeg[x] = graph[x].length;\n        }\n\n        Queue<Integer> queue = new LinkedList<Integer>();\n        for (int i = 0; i < n; ++i) {\n            if (inDeg[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        while (!queue.isEmpty()) {\n            int y = queue.poll();\n            for (int x : rg.get(y)) {\n                if (--inDeg[x] == 0) {\n                    queue.offer(x);\n                }\n            }\n        }\n\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < n; ++i) {\n            if (inDeg[i] == 0) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public IList<int> EventualSafeNodes(int[][] graph) {\n        int n = graph.Length;\n        IList<IList<int>> rg = new List<IList<int>>();\n        for (int i = 0; i < n; ++i) {\n            rg.Add(new List<int>());\n        }\n        int[] inDeg = new int[n];\n        for (int x = 0; x < n; ++x) {\n            foreach (int y in graph[x]) {\n                rg[y].Add(x);\n            }\n            inDeg[x] = graph[x].Length;\n        }\n\n        Queue<int> queue = new Queue<int>();\n        for (int i = 0; i < n; ++i) {\n            if (inDeg[i] == 0) {\n                queue.Enqueue(i);\n            }\n        }\n        while (queue.Count > 0) {\n            int y = queue.Dequeue();\n            foreach (int x in rg[y]) {\n                if (--inDeg[x] == 0) {\n                    queue.Enqueue(x);\n                }\n            }\n        }\n\n        IList<int> ans = new List<int>();\n        for (int i = 0; i < n; ++i) {\n            if (inDeg[i] == 0) {\n                ans.Add(i);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc eventualSafeNodes(graph [][]int) (ans []int) {\n    n := len(graph)\n    rg := make([][]int, n)\n    inDeg := make([]int, n)\n    for x, ys := range graph {\n        for _, y := range ys {\n            rg[y] = append(rg[y], x)\n        }\n        inDeg[x] = len(ys)\n    }\n\n    q := []int{}\n    for i, d := range inDeg {\n        if d == 0 {\n            q = append(q, i)\n        }\n    }\n    for len(q) > 0 {\n        y := q[0]\n        q = q[1:]\n        for _, x := range rg[y] {\n            inDeg[x]--\n            if inDeg[x] == 0 {\n                q = append(q, x)\n            }\n        }\n    }\n\n    for i, d := range inDeg {\n        if d == 0 {\n            ans = append(ans, i)\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar eventualSafeNodes = function(graph) {\n    const n = graph.length;\n    const rg = new Array(n).fill(0).map(() => new Array());\n    const inDeg = new Array(n).fill(0);\n    for (let x = 0; x < n; ++x) {\n        for (let y of graph[x]) {\n            rg[y].push(x);\n        }\n        inDeg[x] = graph[x].length;\n    }\n\n    const queue = [];\n    for (let i = 0; i < n; ++i) {\n        if (inDeg[i] === 0) {\n            queue.push(i);\n        }\n    }\n    while (queue.length) {\n        const y = queue.shift();\n        for (const x of rg[y]) {\n            if (--inDeg[x] === 0) {\n                queue.push(x);\n            }\n        }\n    }\n\n    const ans = [];\n    for (let i = 0; i < n; ++i) {\n        if (inDeg[i] === 0) {\n            ans.push(i);\n        }\n    }\n    return ans;\n};\n```\n\n```C [sol2-C]\nint* eventualSafeNodes(int** graph, int graphSize, int* graphColSize, int* returnSize) {\n    int n = graphSize;\n    int* rg[n];\n    int rgCol[n];\n    memset(rgCol, 0, sizeof(rgCol));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < graphColSize[i]; j++) {\n            rgCol[graph[i][j]]++;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        rg[i] = malloc(sizeof(int) * rgCol[i]);\n        rgCol[i] = 0;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < graphColSize[i]; j++) {\n            rg[graph[i][j]][rgCol[graph[i][j]]++] = i;\n        }\n    }\n    int inDeg[n];\n    memcpy(inDeg, graphColSize, sizeof(int) * n);\n\n    int que[10000];\n    int left = 0, right = 0;\n    for (int i = 0; i < n; ++i) {\n        if (inDeg[i] == 0) {\n            que[right++] = i;\n        }\n    }\n    while (left < right) {\n        int y = que[left++];\n        for (int i = 0; i < rgCol[y]; i++){\n            if (--inDeg[rg[y][i]] == 0) {\n                que[right++] = rg[y][i];\n            }\n        }\n    }\n\n    int *ans = malloc(sizeof(int) * n);\n    *returnSize = 0;\n    for (int i = 0; i < n; ++i) {\n        if (inDeg[i] == 0) {\n            ans[(*returnSize)++] = i;\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m)$，其中 $n$ 是图中的点数，$m$ 是图中的边数。\n\n- 空间复杂度：$O(n+m)$。需要 $O(n+m)$ 的空间记录反图。"
}