{
	"titleSlug": "xun-bao",
	"slug": "xun-bao-bfs-dp-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/xun-bao/solution/xun-bao-bfs-dp-by-leetcode-solution/",
	"content": "#### 方法一：状态压缩动态规划\n\n**题意概述**\n\n一个人在迷宫中，要从起点 $S$ 走到终点 $T$。迷宫有两类特殊点，分别是：\n\n+ $M$：机关点，需要用石头触发\n+ $O$：石头点，一次可以搬一块石头\n\n只有当所有 $M$ 点均被触发以后，终点才可到达，问起点走到终点的最小代价。\n\n**思路与算法**\n虽然迷宫有很多格子，但是我们实际上的走法只有几种：\n\n+ 从 $S$ 走到 $O$，我们不会从 $S$ 直接走到 $M$，因为触发机关要先搬石头\n+ 从 $O$ 走到 $M$\n+ 从 $M$ 走到 $O$\n+ 从 $M$ 走到 $T$\n\n有一点性质很重要，**不论我们触发机关还是搬运石头，都不会改变迷宫的连通状态。因此，两个点的最短距离一旦计算出，就不会再改变了。** 于是第一步，我们可以做一步预处理——我们计算所有特殊点（包括 $M$，$O$，$S$，$T$）互相之间的最短距离，即对这里面的每个点做一次 BFS。这样我们就不需要考虑其他点了。为什么要预处理出这些特殊点两两之间的距离，这个问题会在在下文中解释。\n\n解决这个问题的关键是理解我们要以什么样的策略来取石头和触发机关：\n\n+ 在最开始，我们一定会从 $S$，经过某一个 $O$，到达某一个 $M$。那么对于特定的 $M$ 来说，我们枚举 $O$ 就可以计算 $S-O-M$ 的最短距离。那么如果我们要从起点 $S$ 到达 $M$，一定会选择这条距离最短的路。这样，我们首先得到了 $S$ 到每一个 $M$ 的最短距离。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/LCP_13/1.png){:width=\"70%\"}\n\n+ 假定我们已经从起点到达了某个 $M$ 了，接下来需要去其他的 $O$ 点搬石头接着触发其他的机关，这是一个 $M-O-M'$ 的路线。同样的道理，对于给定的 $M'$，中间的 $O$ 也是固定的。即给定 $M$ 和 $M'$，我们可以确定一个 $O$，使得 $M-O-M'$ 距离最短。我们同样可以记录下这个最短距离，即得到了 所有 $M$ 到 $M'$ 的最短距离。\n\n![fig2](https://assets.leetcode-cn.com/solution-static/LCP_13/2.png){:width=\"86%\"}\n\n+ 最后，所有 $M$ 到 $T$ 的距离在前面已经计算出了。\n\n我们需要所有的 $M$ 都被触发，$M$ 的触发顺序不同会导致行走的路径长度不同。假设这里一共有 $n$ 个 $M$，我们用 $d(i, j)$ 表示第 $i$ 个 $M$ 到第 $j$ 个 $M$ 经过某一个 $O$ 的最短距离。因为这里的 $n$ 不大于 $16$，我们可以使用一个 $16$ 位的二进制数表示状态，这个二进制数的第 $i$ 位为 $1$ 表示第 $i$ 个 $M$ 已经触发，为 $0$ 表示第 $i$ 个 $M$ 还未被触发，记这个二进制数为 $\\rm mask$。记 $M_i$ 为第 $i$ 个 $M$（下标从 $1$ 开始），每一个 $\\rm mask$ 都可以表示成两个集合，一个已触发集合、一个未触发集合，例如 $n = 16$，$mask = 0000~1100~0001~0001$ 的已触发集合就可以表示为 $T = \\{ M_1, M_5, M_{11}, M_{12} \\}$，剩下的元素都在未触发集合 $U - T$ 中。\n\n我们定义 $f({\\rm mask}, i)$ 表示当前在第 $i$ 个 $M$ 处，触发状态为 ${\\rm mask}$ 的最小步数，如果当前 ${\\rm mask}$ 代表的已触发集合为 $T$，未触发集合为 $U - T$，则我们可以推出这样的动态规划转移方程：\n\n$$ f({\\rm mask}, i) = \\min_{j \\in T, j \\neq i } \\{ f({\\rm mask}~{\\rm xor}~2^i, j) + d(j, i)\\} $$\n\n其中 ${\\rm mask}~{\\rm xor}~2^i$ 表示把 $M_i$ 已触发的集合当中去掉，即 ${\\rm mask}$ 这个状态可以由 ${\\rm mask}~{\\rm xor}~2^i$ 状态转移得到，转移时我们除了关注触发状态 $\\rm mask$ 的变化，我们还关注是从哪一个 $M$ 转移到了 $M_i$，我们可以枚举 $\\rm mask$ 当中已触发的所有的 $M_j(j \\neq i)$ 作为上一个位置，而 $d(j, i)$ 就是我们从 $j$ 转移到 $i$ 行走的最短步数，我们可以在预处理之后按照我们的策略得到所有的 $d(j, i)$（如果 $i, j$ 不可达可以设为正无穷），然后 $O(1)$ 查询，这就是预处理的目的。\n\n实际上，在实现的时候，如果我们用记忆化搜索的方式实现，那么我们用到的是上面的转移方程；如果我们使用循环实现的话，也可以使用下面的转移方程，写法类似递推：\n\n$$ f({\\rm mask} | 2^j, j) = \\min \\{ f({\\rm mask}, i) + d(i, j) \\} $$\n\n大家可以结合代码来理解。当然，写代码的时候需要注意的是：\n\n+ 由于本题的复杂度较高，使用 Python 等性能较差的语言实现时需要注意效率问题。\n+ 本题边界情况较多，比如迷宫没有 $M$、$M$ 不可达等。\n\n**题型小结**\n\n这道题是一个非常经典的状态压缩动态规划模型：有 $n$ 个任务 $\\{M_1, M_2 \\cdots M_n \\}$，每两个任务之间有一个 $c(M_i, M_j)$ 表示在 $M_i$ 之后（下一个）做 $M_j$ 的花费，让你求解把 $n$ 个任务都做完需要的最小花费。通常这个 $n$ 会非常的小，因为需要构造 $2^n$ 种状态，$c(M_i, M_j)$ 可能是题目给出，也可能是可以在很短的时间内计算出来的一个值。这类问题的状态设计一般都是 $f({\\rm mask}, i)$ 表示当前任务完成的状态是 $\\rm mask$，当前位置是 $i$，考虑转移的时候我们只需要考虑当前任务的上一个任务即可。**希望读者可以理解这里的思想，并尝试使用记忆化搜索和循环两种方式实现。**\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int dx[4] = {1, -1, 0, 0};\n    int dy[4] = {0, 0, 1, -1};\n    int n, m;\n\n    bool inBound(int x, int y) {\n        return x >= 0 && x < n && y >= 0 && y < m;\n    }\n\n    vector<vector<int>> bfs(int x, int y, vector<string>& maze) {\n        vector<vector<int>> ret(n, vector<int>(m, -1));\n        ret[x][y] = 0;\n        queue<pair<int, int>> Q;\n        Q.push({x, y});\n        while (!Q.empty()) {\n            auto p = Q.front();\n            Q.pop();\n            int x = p.first, y = p.second;\n            for (int k = 0; k < 4; k++) {\n                int nx = x + dx[k], ny = y + dy[k];\n                if (inBound(nx, ny) && maze[nx][ny] != '#' && ret[nx][ny] == -1) {\n                    ret[nx][ny] = ret[x][y] + 1;\n                    Q.push({nx, ny});\n                }\n            }\n        }\n        return ret;\n    }\n\n    int minimalSteps(vector<string>& maze) {\n        n = maze.size(), m = maze[0].size();\n        // 机关 & 石头\n        vector<pair<int, int>> buttons, stones;\n        // 起点 & 终点\n        int sx, sy, tx, ty;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (maze[i][j] == 'M') {\n                    buttons.push_back({i, j});\n                }\n                if (maze[i][j] == 'O') {\n                    stones.push_back({i, j});\n                }\n                if (maze[i][j] == 'S') {\n                    sx = i, sy = j;\n                }\n                if (maze[i][j] == 'T') {\n                    tx = i, ty = j;\n                }\n            }\n        }\n        int nb = buttons.size();\n        int ns = stones.size();\n        vector<vector<int>> start_dist = bfs(sx, sy, maze);\n\n        // 边界情况：没有机关\n        if (nb == 0) {\n            return start_dist[tx][ty];\n        }\n        // 从某个机关到其他机关 / 起点与终点的最短距离。\n        vector<vector<int>> dist(nb, vector<int>(nb + 2, -1));\n        // 中间结果\n        vector<vector<vector<int>>> dd(nb);\n        for (int i = 0; i < nb; i++) {\n            vector<vector<int>> d = bfs(buttons[i].first, buttons[i].second, maze);\n            dd[i] = d;\n            // 从某个点到终点不需要拿石头\n            dist[i][nb + 1] = d[tx][ty];\n        }\n\n        for (int i = 0; i < nb; i++) {\n            int tmp = -1;\n            for (int k = 0; k < ns; k++) {\n                int mid_x = stones[k].first, mid_y = stones[k].second;\n                if (dd[i][mid_x][mid_y] != -1 && start_dist[mid_x][mid_y] != -1) {\n                    if (tmp == -1 || tmp > dd[i][mid_x][mid_y] + start_dist[mid_x][mid_y]) {\n                        tmp = dd[i][mid_x][mid_y] + start_dist[mid_x][mid_y];\n                    }\n                }\n            }\n            dist[i][nb] = tmp;\n            for (int j = i + 1; j < nb; j++) {\n                int mn = -1;\n                for (int k = 0; k < ns; k++) {\n                    int mid_x = stones[k].first, mid_y = stones[k].second;\n                    if (dd[i][mid_x][mid_y] != -1 && dd[j][mid_x][mid_y] != -1) {\n                        if (mn == -1 || mn > dd[i][mid_x][mid_y] + dd[j][mid_x][mid_y]) {\n                            mn = dd[i][mid_x][mid_y] + dd[j][mid_x][mid_y];\n                        }\n                    }\n                }\n                dist[i][j] = mn;\n                dist[j][i] = mn;\n            }\n        }\n\n        // 无法达成的情形\n        for (int i = 0; i < nb; i++) {\n            if (dist[i][nb] == -1 || dist[i][nb + 1] == -1) return -1;\n        }\n        \n        // dp 数组， -1 代表没有遍历到\n        vector<vector<int>> dp(1 << nb, vector<int>(nb, -1));\n        for (int i = 0; i < nb; i++) {\n            dp[1 << i][i] = dist[i][nb];\n        }\n        \n        // 由于更新的状态都比未更新的大，所以直接从小到大遍历即可\n        for (int mask = 1; mask < (1 << nb); mask++) {\n            for (int i = 0; i < nb; i++) {\n                // 当前 dp 是合法的\n                if (mask & (1 << i)) {\n                    for (int j = 0; j < nb; j++) {\n                        // j 不在 mask 里\n                        if (!(mask & (1 << j))) {\n                            int next = mask | (1 << j);\n                            if (dp[next][j] == -1 || dp[next][j] > dp[mask][i] + dist[i][j]) {\n                                dp[next][j] = dp[mask][i] + dist[i][j];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        int ret = -1;\n        int final_mask = (1 << nb) - 1;\n        for (int i = 0; i < nb; i++) {\n            if (ret == -1 || ret > dp[final_mask][i] + dist[i][nb + 1]) {\n                ret = dp[final_mask][i] + dist[i][nb + 1];\n            }\n        }\n\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int[] dx = {1, -1, 0, 0};\n    int[] dy = {0, 0, 1, -1};\n    int n, m;\n\n    public int minimalSteps(String[] maze) {\n        n = maze.length;\n        m = maze[0].length();\n        // 机关 & 石头\n        List<int[]> buttons = new ArrayList<int[]>();\n        List<int[]> stones = new ArrayList<int[]>();\n        // 起点 & 终点\n        int sx = -1, sy = -1, tx = -1, ty = -1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (maze[i].charAt(j) == 'M') {\n                    buttons.add(new int[]{i, j});\n                }\n                if (maze[i].charAt(j) == 'O') {\n                    stones.add(new int[]{i, j});\n                }\n                if (maze[i].charAt(j) == 'S') {\n                    sx = i;\n                    sy = j;\n                }\n                if (maze[i].charAt(j) == 'T') {\n                    tx = i;\n                    ty = j;\n                }\n            }\n        }\n        int nb = buttons.size();\n        int ns = stones.size();\n        int[][] startDist = bfs(sx, sy, maze);\n\n        // 边界情况：没有机关\n        if (nb == 0) {\n            return startDist[tx][ty];\n        }\n        // 从某个机关到其他机关 / 起点与终点的最短距离。\n        int[][] dist = new int[nb][nb + 2];\n        for (int i = 0; i < nb; i++) {\n            Arrays.fill(dist[i], -1);\n        }\n        // 中间结果\n        int[][][] dd = new int[nb][][];\n        for (int i = 0; i < nb; i++) {\n            int[][] d = bfs(buttons.get(i)[0], buttons.get(i)[1], maze);\n            dd[i] = d;\n            // 从某个点到终点不需要拿石头\n            dist[i][nb + 1] = d[tx][ty];\n        }\n\n        for (int i = 0; i < nb; i++) {\n            int tmp = -1;\n            for (int k = 0; k < ns; k++) {\n                int midX = stones.get(k)[0], midY = stones.get(k)[1];\n                if (dd[i][midX][midY] != -1 && startDist[midX][midY] != -1) {\n                    if (tmp == -1 || tmp > dd[i][midX][midY] + startDist[midX][midY]) {\n                        tmp = dd[i][midX][midY] + startDist[midX][midY];\n                    }\n                }\n            }\n            dist[i][nb] = tmp;\n            for (int j = i + 1; j < nb; j++) {\n                int mn = -1;\n                for (int k = 0; k < ns; k++) {\n                    int midX = stones.get(k)[0], midY = stones.get(k)[1];\n                    if (dd[i][midX][midY] != -1 && dd[j][midX][midY] != -1) {\n                        if (mn == -1 || mn > dd[i][midX][midY] + dd[j][midX][midY]) {\n                            mn = dd[i][midX][midY] + dd[j][midX][midY];\n                        }\n                    }\n                }\n                dist[i][j] = mn;\n                dist[j][i] = mn;\n            }\n        }\n\n        // 无法达成的情形\n        for (int i = 0; i < nb; i++) {\n            if (dist[i][nb] == -1 || dist[i][nb + 1] == -1) {\n                return -1;\n            }\n        }\n        \n        // dp 数组， -1 代表没有遍历到\n        int[][] dp = new int[1 << nb][nb];\n        for (int i = 0; i < 1 << nb; i++) {\n            Arrays.fill(dp[i], -1);\n        }\n        for (int i = 0; i < nb; i++) {\n            dp[1 << i][i] = dist[i][nb];\n        }\n        \n        // 由于更新的状态都比未更新的大，所以直接从小到大遍历即可\n        for (int mask = 1; mask < (1 << nb); mask++) {\n            for (int i = 0; i < nb; i++) {\n                // 当前 dp 是合法的\n                if ((mask & (1 << i)) != 0) {\n                    for (int j = 0; j < nb; j++) {\n                        // j 不在 mask 里\n                        if ((mask & (1 << j)) == 0) {\n                            int next = mask | (1 << j);\n                            if (dp[next][j] == -1 || dp[next][j] > dp[mask][i] + dist[i][j]) {\n                                dp[next][j] = dp[mask][i] + dist[i][j];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        int ret = -1;\n        int finalMask = (1 << nb) - 1;\n        for (int i = 0; i < nb; i++) {\n            if (ret == -1 || ret > dp[finalMask][i] + dist[i][nb + 1]) {\n                ret = dp[finalMask][i] + dist[i][nb + 1];\n            }\n        }\n\n        return ret;\n    }\n\n    public int[][] bfs(int x, int y, String[] maze) {\n        int[][] ret = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(ret[i], -1);\n        }\n        ret[x][y] = 0;\n        Queue<int[]> queue = new LinkedList<int[]>();\n        queue.offer(new int[]{x, y});\n        while (!queue.isEmpty()) {\n            int[] p = queue.poll();\n            int curx = p[0], cury = p[1];\n            for (int k = 0; k < 4; k++) {\n                int nx = curx + dx[k], ny = cury + dy[k];\n                if (inBound(nx, ny) && maze[nx].charAt(ny) != '#' && ret[nx][ny] == -1) {\n                    ret[nx][ny] = ret[curx][cury] + 1;\n                    queue.offer(new int[]{nx, ny});\n                }\n            }\n        }\n        return ret;\n    }\n\n    public boolean inBound(int x, int y) {\n        return x >= 0 && x < n && y >= 0 && y < m;\n    }\n}\n```\n\n```golang [sol1-Golang]\nvar (\n    dx = []int{1, -1, 0, 0}\n    dy = []int{0, 0, 1, -1}\n    n, m int\n)\nfunc minimalSteps(maze []string) int {\n    n, m = len(maze), len(maze[0])\n    // 机关 & 石头\n    var buttons, stones [][]int\n    // 起点 & 终点\n    sx, sy, tx, ty := -1, -1, -1, -1\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            switch maze[i][j] {\n            case 'M':\n                buttons = append(buttons, []int{i, j})\n            case 'O':\n                stones = append(stones, []int{i, j})\n            case 'S':\n                sx, sy = i, j\n            case 'T':\n                tx, ty = i, j\n            }\n        }\n    }\n\n    nb, ns := len(buttons), len(stones)\n    startDist := bfs(sx, sy, maze)\n    // 边界情况：没有机关\n    if nb == 0 {\n        return startDist[tx][ty]\n    }\n    // 从某个机关到其他机关 / 起点与终点的最短距离。\n    dist := make([][]int, nb)\n    for i := 0; i < nb; i++ {\n        dist[i] = make([]int, nb + 2)\n        for j := 0; j < nb + 2; j++ {\n            dist[i][j] = -1\n        }\n    }\n    // 中间结果\n    dd := make([][][]int, nb)\n    for i := 0; i < nb; i++ {\n        dd[i] = bfs(buttons[i][0], buttons[i][1], maze)\n        // 从某个点到终点不需要拿石头\n        dist[i][nb + 1] = dd[i][tx][ty]\n    }\n    for i := 0; i < nb; i++ {\n        tmp := -1\n        for k := 0; k < ns; k++ {\n            midX, midY := stones[k][0], stones[k][1]\n            if dd[i][midX][midY] != -1 && startDist[midX][midY] != -1 {\n                if tmp == -1 || tmp > dd[i][midX][midY] + startDist[midX][midY] {\n                    tmp = dd[i][midX][midY] + startDist[midX][midY]\n                }\n            }\n        }\n        dist[i][nb] = tmp\n        for j := i + 1; j < nb; j++ {\n            mn := -1\n            for k := 0; k < ns; k++ {\n                midX, midY := stones[k][0], stones[k][1]\n                if dd[i][midX][midY] != -1 && startDist[midX][midY] != -1 {\n                    if mn == -1 || mn > dd[i][midX][midY] + dd[j][midX][midY] {\n                        mn = dd[i][midX][midY] + dd[j][midX][midY]\n                    }\n                }\n            }\n            dist[i][j] = mn\n            dist[j][i] = mn\n        }\n    }\n    // 无法达成的情形\n    for i := 0; i < nb; i++ {\n        if dist[i][nb] == -1 || dist[i][nb + 1] == -1 {\n            return -1\n        }\n    }\n    // dp 数组， -1 代表没有遍历到\n    dp := make([][]int, 1 << nb)\n    for i := 0; i < (1 << nb); i++ {\n        dp[i] = make([]int, nb)\n        for j := 0; j < nb; j++ {\n            dp[i][j] = -1\n        }\n    }\n    for i := 0; i < nb; i++ {\n        dp[1 << i][i] = dist[i][nb]\n    }\n\n    // 由于更新的状态都比未更新的大，所以直接从小到大遍历即可\n    for mask := 1; mask < (1 << nb); mask++ {\n        for i := 0; i < nb; i++ {\n            // 当前 dp 是合法的\n            if mask & (1 << i) != 0 {\n                for j := 0; j < nb; j++ {\n                    // j 不在 mask 里\n                    if mask & (1 << j) == 0 {\n                        next := mask | (1 << j)\n                        if dp[next][j] == -1 || dp[next][j] > dp[mask][i] + dist[i][j] {\n                            dp[next][j] = dp[mask][i] + dist[i][j]\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ret := -1\n    finalMask := (1 << nb) - 1\n    for i := 0; i < nb; i++ {\n        if ret == -1 || ret > dp[finalMask][i] + dist[i][nb + 1] {\n            ret = dp[finalMask][i] + dist[i][nb + 1]\n        }\n    }\n    return ret\n}\n\nfunc bfs(x, y int, maze []string) [][]int {\n    ret := make([][]int, n)\n    for i := 0; i < n; i++ {\n        ret[i] = make([]int, m)\n        for j := 0; j < m; j++ {\n            ret[i][j] = -1\n        }\n    }\n    ret[x][y] = 0\n    queue := [][]int{}\n    queue = append(queue, []int{x, y})\n    for len(queue) > 0 {\n        p := queue[0]\n        queue = queue[1:]\n        curx, cury := p[0], p[1]\n        for k := 0; k < 4; k++ {\n            nx, ny := curx + dx[k], cury + dy[k]\n            if inBound(nx, ny) && maze[nx][ny] != '#' && ret[nx][ny] == -1 {\n                ret[nx][ny] = ret[curx][cury] + 1\n                queue = append(queue, []int{nx, ny})\n            }\n        }\n    }\n    return ret\n}\n\nfunc inBound(x, y int) bool {\n    return x >= 0 && x < n && y >= 0 && y < m\n}\n```\n\n```C [sol1-C]\nconst int dx[4] = {1, -1, 0, 0};\nconst int dy[4] = {0, 0, 1, -1};\nint n, m;\n\nbool inBound(int x, int y) { return x >= 0 && x < n && y >= 0 && y < m; }\n\nint** bfs(int x, int y, char** maze) {\n    int** ret = (int**)malloc(sizeof(int*) * n);\n    for (int i = 0; i < n; i++) {\n        ret[i] = (int*)malloc(sizeof(int) * m);\n        memset(ret[i], -1, sizeof(int) * m);\n    }\n    ret[x][y] = 0;\n    int quex[n * m], quey[n * m];\n    quex[0] = x, quey[0] = y;\n    int left = 0, right = 0;\n    while (left <= right) {\n        for (int k = 0; k < 4; k++) {\n            int nx = quex[left] + dx[k], ny = quey[left] + dy[k];\n            if (inBound(nx, ny) && maze[nx][ny] != '#' && ret[nx][ny] == -1) {\n                ret[nx][ny] = ret[quex[left]][quey[left]] + 1;\n                quex[++right] = nx, quey[right] = ny;\n            }\n        }\n        left++;\n    }\n    return ret;\n}\n\ntypedef struct point {\n    int x, y;\n} point;\n\nint minimalSteps(char** maze, int mazeSize) {\n    n = mazeSize, m = strlen(maze[0]);\n    // 机关 & 石头\n    point* buttons = (point*)malloc(0);\n    point* stones = (point*)malloc(0);\n    int nb = 0, ns = 0;\n    // 起点 & 终点\n    int sx, sy, tx, ty;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (maze[i][j] == 'M') {\n                buttons = (point*)realloc(buttons, sizeof(point) * (++nb));\n                buttons[nb - 1] = (point){i, j};\n            }\n            if (maze[i][j] == 'O') {\n                stones = (point*)realloc(stones, sizeof(point) * (++ns));\n                stones[ns - 1] = (point){i, j};\n            }\n            if (maze[i][j] == 'S') {\n                sx = i, sy = j;\n            }\n            if (maze[i][j] == 'T') {\n                tx = i, ty = j;\n            }\n        }\n    }\n    int** start_dist = bfs(sx, sy, maze);\n\n    // 边界情况：没有机关\n    if (nb == 0) {\n        return start_dist[tx][ty];\n    }\n    // 从某个机关到其他机关 / 起点与终点的最短距离。\n    int** dist = (int**)malloc(sizeof(int*) * nb);\n    for (int i = 0; i < nb; i++) {\n        dist[i] = (int*)malloc(sizeof(int) * (nb + 2));\n        memset(dist[i], -1, sizeof(int) * (nb + 2));\n    }\n    // 中间结果\n    int*** dd = (int***)malloc(sizeof(int**) * nb);\n    for (int i = 0; i < nb; i++) {\n        int** d = bfs(buttons[i].x, buttons[i].y, maze);\n        dd[i] = d;\n        // 从某个点到终点不需要拿石头\n        dist[i][nb + 1] = d[tx][ty];\n    }\n\n    for (int i = 0; i < nb; i++) {\n        int tmp = -1;\n        for (int k = 0; k < ns; k++) {\n            int mid_x = stones[k].x, mid_y = stones[k].y;\n            if (dd[i][mid_x][mid_y] != -1 && start_dist[mid_x][mid_y] != -1) {\n                if (tmp == -1 || tmp > dd[i][mid_x][mid_y] + start_dist[mid_x][mid_y]) {\n                    tmp = dd[i][mid_x][mid_y] + start_dist[mid_x][mid_y];\n                }\n            }\n        }\n        dist[i][nb] = tmp;\n        for (int j = i + 1; j < nb; j++) {\n            int mn = -1;\n            for (int k = 0; k < ns; k++) {\n                int mid_x = stones[k].x, mid_y = stones[k].y;\n                if (dd[i][mid_x][mid_y] != -1 && dd[j][mid_x][mid_y] != -1) {\n                    if (mn == -1 || mn > dd[i][mid_x][mid_y] + dd[j][mid_x][mid_y]) {\n                        mn = dd[i][mid_x][mid_y] + dd[j][mid_x][mid_y];\n                    }\n                }\n            }\n            dist[i][j] = mn;\n            dist[j][i] = mn;\n        }\n    }\n    // 无法达成的情形\n    for (int i = 0; i < nb; i++) {\n        if (dist[i][nb] == -1 || dist[i][nb + 1] == -1) return -1;\n    }\n\n    // dp 数组， -1 代表没有遍历到\n    int** dp = (int**)malloc(sizeof(int*) * (1 << nb));\n    for (int i = 0; i < (1 << nb); i++) {\n        dp[i] = (int*)malloc(sizeof(int) * nb);\n        memset(dp[i], -1, sizeof(int) * nb);\n    }\n    for (int i = 0; i < nb; i++) {\n        dp[1 << i][i] = dist[i][nb];\n    }\n\n    // 由于更新的状态都比未更新的大，所以直接从小到大遍历即可\n    for (int mask = 1; mask < (1 << nb); mask++) {\n        for (int i = 0; i < nb; i++) {\n            // 当前 dp 是合法的\n            if (mask & (1 << i)) {\n                for (int j = 0; j < nb; j++) {\n                    // j 不在 mask 里\n                    if (!(mask & (1 << j))) {\n                        int next = mask | (1 << j);\n                        if (dp[next][j] == -1 || dp[next][j] > dp[mask][i] + dist[i][j]) {\n                            dp[next][j] = dp[mask][i] + dist[i][j];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    int ret = -1;\n    int final_mask = (1 << nb) - 1;\n    for (int i = 0; i < nb; i++) {\n        if (ret == -1 || ret > dp[final_mask][i] + dist[i][nb + 1]) {\n            ret = dp[final_mask][i] + dist[i][nb + 1];\n        }\n    }\n\n    return ret;\n}\n```\n\n**复杂度分析**\n\n假设迷宫的面积为 $s$，$M$ 的数量为 $m$，$O$ 的数量为 $o$。\n\n- 时间复杂度：$O(ms + m^2o + 2^m m^2)$。单次 BFS 的时间代价为 $O(s)$，$m$ 次 BFS 的时间代价为 $O(ms)$；预处理任意两个 $M$ 经过 $O$ 的最短距离的时间代价是 $O(m^2o)$；动态规划的时间代价是 $O(2^m m^2)$。\n- 空间复杂度：$O(s + bs + 2^m m)$。BFS 队列的空间代价是 $O(s)$；预处理 $M_i$ 到各个点的最短距离的空间代价是 $O(bs)$；动态规划数组的空间代价是 $O(2^m m)$。"
}