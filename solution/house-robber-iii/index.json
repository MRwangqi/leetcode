{
	"titleSlug": "house-robber-iii",
	"slug": "da-jia-jie-she-iii-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/house-robber-iii/solution/da-jia-jie-she-iii-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n**思路与算法**\n\n简化一下这个问题：一棵二叉树，树上的每个点都有对应的权值，每个点有两种状态（选中和不选中），问在不能同时选中有父子关系的点的情况下，能选中的点的最大权值和是多少。\n\n我们可以用 $f(o)$ 表示选择 $o$ 节点的情况下，$o$ 节点的子树上被选择的节点的最大权值和；$g(o)$ 表示不选择 $o$ 节点的情况下，$o$ 节点的子树上被选择的节点的最大权值和；$l$ 和 $r$ 代表 $o$ 的左右孩子。\n\n+ 当 $o$ 被选中时，$o$ 的左右孩子都不能被选中，故 $o$ 被选中情况下子树上被选中点的最大权值和为 $l$ 和 $r$ 不被选中的最大权值和相加，即 $f(o) = g(l) + g(r)$。\n+ 当 $o$ 不被选中时，$o$ 的左右孩子可以被选中，也可以不被选中。对于 $o$ 的某个具体的孩子 $x$，它对 $o$ 的贡献是 $x$ 被选中和不被选中情况下权值和的较大值。故 $g(o) = \\max \\{ f(l) , g(l)\\}+\\max\\{ f(r) , g(r) \\}$。\n\n至此，我们可以用哈希表来存 $f$ 和 $g$ 的函数值，用深度优先搜索的办法后序遍历这棵二叉树，我们就可以得到每一个节点的 $f$ 和 $g$。根节点的 $f$ 和 $g$ 的最大值就是我们要找的答案。\n\n我们不难给出这样的实现：\n\n```cpp [sol0-C++]\nclass Solution {\npublic:\n    unordered_map <TreeNode*, int> f, g;\n\n    void dfs(TreeNode* node) {\n        if (!node) {\n            return;\n        }\n        dfs(node->left);\n        dfs(node->right);\n        f[node] = node->val + g[node->left] + g[node->right];\n        g[node] = max(f[node->left], g[node->left]) + max(f[node->right], g[node->right]);\n    }\n\n    int rob(TreeNode* root) {\n        dfs(root);\n        return max(f[root], g[root]);\n    }\n};\n```\n\n```Java [sol0-Java]\nclass Solution {\n    Map<TreeNode, Integer> f = new HashMap<TreeNode, Integer>();\n    Map<TreeNode, Integer> g = new HashMap<TreeNode, Integer>();\n\n    public int rob(TreeNode root) {\n        dfs(root);\n        return Math.max(f.getOrDefault(root, 0), g.getOrDefault(root, 0));\n    }\n\n    public void dfs(TreeNode node) {\n        if (node == null) {\n            return;\n        }\n        dfs(node.left);\n        dfs(node.right);\n        f.put(node, node.val + g.getOrDefault(node.left, 0) + g.getOrDefault(node.right, 0));\n        g.put(node, Math.max(f.getOrDefault(node.left, 0), g.getOrDefault(node.left, 0)) + Math.max(f.getOrDefault(node.right, 0), g.getOrDefault(node.right, 0)));\n    }\n}\n```\n\n```JavaScript [sol0-JavaScript]\nvar rob = function(root) {\n    const f = new Map();\n    const g = new Map();\n\n    const dfs = (node) => {\n        if (node === null) {\n            return;\n        }\n        dfs(node.left);\n        dfs(node.right);\n        f.set(node, node.val + (g.get(node.left) || 0) + (g.get(node.right) || 0));\n        g.set(node, Math.max(f.get(node.left) || 0, g.get(node.left) || 0) + Math.max(f.get(node.right) || 0, g.get(node.right) || 0));\n    }\n    \n    dfs(root);\n    return Math.max(f.get(root) || 0, g.get(root) || 0);\n};\n```\n\n假设二叉树的节点个数为 $n$。\n\n我们可以看出，以上的算法对二叉树做了一次后序遍历，时间复杂度是 $O(n)$；由于递归会使用到栈空间，空间代价是 $O(n)$，哈希表的空间代价也是 $O(n)$，故空间复杂度也是 $O(n)$。\n\n我们可以做一个小小的优化，我们发现无论是 $f(o)$ 还是 $g(o)$，他们最终的值只和 $f(l)$、$g(l)$、$f(r)$、$g(r)$ 有关，所以对于每个节点，我们只关心它的孩子节点们的 $f$ 和 $g$ 是多少。我们可以设计一个结构，表示某个节点的 $f$ 和 $g$ 值，在每次递归返回的时候，都把这个点对应的 $f$ 和 $g$ 返回给上一级调用，这样可以省去哈希表的空间。\n\n代码如下。\n\n**代码**\n\n```cpp [sol1-C++]\nstruct SubtreeStatus {\n    int selected;\n    int notSelected;\n};\n\nclass Solution {\npublic:\n    SubtreeStatus dfs(TreeNode* node) {\n        if (!node) {\n            return {0, 0};\n        }\n        auto l = dfs(node->left);\n        auto r = dfs(node->right);\n        int selected = node->val + l.notSelected + r.notSelected;\n        int notSelected = max(l.selected, l.notSelected) + max(r.selected, r.notSelected);\n        return {selected, notSelected};\n    }\n\n    int rob(TreeNode* root) {\n        auto rootStatus = dfs(root);\n        return max(rootStatus.selected, rootStatus.notSelected);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int rob(TreeNode root) {\n        int[] rootStatus = dfs(root);\n        return Math.max(rootStatus[0], rootStatus[1]);\n    }\n\n    public int[] dfs(TreeNode node) {\n        if (node == null) {\n            return new int[]{0, 0};\n        }\n        int[] l = dfs(node.left);\n        int[] r = dfs(node.right);\n        int selected = node.val + l[1] + r[1];\n        int notSelected = Math.max(l[0], l[1]) + Math.max(r[0], r[1]);\n        return new int[]{selected, notSelected};\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar rob = function(root) {\n    const dfs = (node) => {\n        if (node === null) {\n            return [0, 0];\n        }\n        const l = dfs(node.left);\n        const r = dfs(node.right);\n        const selected = node.val + l[1] + r[1];\n        const notSelected = Math.max(l[0], l[1]) + Math.max(r[0], r[1]);\n        return [selected, notSelected];\n    }\n    \n    const rootStatus = dfs(root);\n    return Math.max(rootStatus[0], rootStatus[1]);\n}; \n```\n\n```golang [sol1-Golang]\nfunc rob(root *TreeNode) int {\n    val := dfs(root)\n    return max(val[0], val[1])\n}\n\nfunc dfs(node *TreeNode) []int {\n    if node == nil {\n        return []int{0, 0}\n    }\n    l, r := dfs(node.Left), dfs(node.Right)\n    selected := node.Val + l[1] + r[1]\n    notSelected := max(l[0], l[1]) + max(r[0], r[1])\n    return []int{selected, notSelected}\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n```C [sol1-C]\nstruct SubtreeStatus {\n    int selected;\n    int notSelected;\n};\n\nstruct SubtreeStatus dfs(struct TreeNode *node) {\n    if (!node) {\n        return (struct SubtreeStatus){0, 0};\n    }\n    struct SubtreeStatus l = dfs(node->left);\n    struct SubtreeStatus r = dfs(node->right);\n    int selected = node->val + l.notSelected + r.notSelected;\n    int notSelected = fmax(l.selected, l.notSelected) + fmax(r.selected, r.notSelected);\n    return (struct SubtreeStatus){selected, notSelected};\n}\n\nint rob(struct TreeNode *root) {\n    struct SubtreeStatus rootStatus = dfs(root);\n    return fmax(rootStatus.selected, rootStatus.notSelected);\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$。上文中已分析。\n\n+ 空间复杂度：$O(n)$。虽然优化过的版本省去了哈希表的空间，但是栈空间的使用代价依旧是 $O(n)$，故空间复杂度不变。"
}