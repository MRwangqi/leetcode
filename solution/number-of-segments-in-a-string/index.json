{
	"titleSlug": "number-of-segments-in-a-string",
	"slug": "zi-fu-chuan-zhong-de-dan-ci-shu-by-leetc-igfb",
	"url": "https://leetcode-cn.com/problems/number-of-segments-in-a-string/solution/zi-fu-chuan-zhong-de-dan-ci-shu-by-leetc-igfb/",
	"content": "#### 方法一：原地法\n\n**思路与算法**\n\n计算字符串中单词的数量，就等同于计数单词的第一个下标的个数。因此，我们只需要遍历整个字符串，统计每个单词的第一个下标的数目即可。\n\n满足单词的第一个下标有以下两个条件：\n\n+ 该下标对应的字符不为空格；\n\n+ 该下标为初始下标或者该下标的前下标对应的字符为空格；\n\n另一种方法直接使用语言内置的 $\\texttt{split}$ 函数可直接分离出字符串中的每个单词，在此我们不再详细展开。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countSegments(string s) {\n        int segmentCount = 0;\n\n        for (int i = 0; i < s.size(); i++) {\n            if ((i == 0 || s[i - 1] == ' ') && s[i] != ' ') {\n                segmentCount++;\n            }\n        }\n\n        return segmentCount;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countSegments(String s) {\n        int segmentCount = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            if ((i == 0 || s.charAt(i - 1) == ' ') && s.charAt(i) != ' ') {\n                segmentCount++;\n            }\n        }\n\n        return segmentCount;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int CountSegments(string s) {\n        int segmentCount = 0;\n\n        for (int i = 0; i < s.Length; i++) {\n            if ((i == 0 || s[i - 1] == ' ') && s[i] != ' ') {\n                segmentCount++;\n            }\n        }\n\n        return segmentCount;\n    }\n}\n```\n\n```Python [sol1-Python]\nclass Solution:\n    def countSegments(self, s):\n        segment_count = 0\n\n        for i in range(len(s)):\n            if (i == 0 or s[i - 1] == ' ') and s[i] != ' ':\n                segment_count += 1\n\n        return segment_count\n```\n\n```JavaScript [sol1-JavaScript]\nvar countSegments = function(s) {\n    let segmentCount = 0;\n\n    for (let i = 0; i < s.length; i++) {\n        if ((i === 0 || s[i - 1] === ' ') && s[i] !== ' ') {\n            segmentCount++;\n        }\n    }\n\n    return segmentCount;\n};\n```\n\n```go [sol1-Golang]\nfunc countSegments(s string) (ans int) {\n    for i, ch := range s {\n        if (i == 0 || s[i-1] == ' ') && ch != ' ' {\n            ans++\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，只需要遍历一遍字符串检测每个下标即可。\n\n- 空间复杂度：$O(1)$。"
}