{
	"titleSlug": "maximal-square",
	"slug": "zui-da-zheng-fang-xing-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/maximal-square/solution/zui-da-zheng-fang-xing-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n![221. 最大正方形.mp4](3cb7322a-5285-49a0-b0e6-539a84fa8dd5)\n\n### 📖 文字题解\n#### 方法一：暴力法\n\n由于正方形的面积等于边长的平方，因此要找到最大正方形的面积，首先需要找到最大正方形的边长，然后计算最大边长的平方即可。\n\n暴力法是最简单直观的做法，具体做法如下：\n\n- 遍历矩阵中的每个元素，每次遇到 $1$，则将该元素作为正方形的左上角；\n\n- 确定正方形的左上角后，根据左上角所在的行和列计算可能的最大正方形的边长（正方形的范围不能超出矩阵的行数和列数），在该边长范围内寻找只包含 $1$ 的最大正方形；\n\n- 每次在下方新增一行以及在右方新增一列，判断新增的行和列是否满足所有元素都是 $1$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int maximalSquare(char[][] matrix) {\n        int maxSide = 0;\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return maxSide;\n        }\n        int rows = matrix.length, columns = matrix[0].length;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                if (matrix[i][j] == '1') {\n                    // 遇到一个 1 作为正方形的左上角\n                    maxSide = Math.max(maxSide, 1);\n                    // 计算可能的最大正方形边长\n                    int currentMaxSide = Math.min(rows - i, columns - j);\n                    for (int k = 1; k < currentMaxSide; k++) {\n                        // 判断新增的一行一列是否均为 1\n                        boolean flag = true;\n                        if (matrix[i + k][j + k] == '0') {\n                            break;\n                        }\n                        for (int m = 0; m < k; m++) {\n                            if (matrix[i + k][j + m] == '0' || matrix[i + m][j + k] == '0') {\n                                flag = false;\n                                break;\n                            }\n                        }\n                        if (flag) {\n                            maxSide = Math.max(maxSide, k + 1);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        int maxSquare = maxSide * maxSide;\n        return maxSquare;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maximalSquare(vector<vector<char>>& matrix) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return 0;\n        }\n        int maxSide = 0;\n        int rows = matrix.size(), columns = matrix[0].size();\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                if (matrix[i][j] == '1') {\n                    // 遇到一个 1 作为正方形的左上角\n                    maxSide = max(maxSide, 1);\n                    // 计算可能的最大正方形边长\n                    int currentMaxSide = min(rows - i, columns - j);\n                    for (int k = 1; k < currentMaxSide; k++) {\n                        // 判断新增的一行一列是否均为 1\n                        bool flag = true;\n                        if (matrix[i + k][j + k] == '0') {\n                            break;\n                        }\n                        for (int m = 0; m < k; m++) {\n                            if (matrix[i + k][j + m] == '0' || matrix[i + m][j + k] == '0') {\n                                flag = false;\n                                break;\n                            }\n                        }\n                        if (flag) {\n                            maxSide = max(maxSide, k + 1);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        int maxSquare = maxSide * maxSide;\n        return maxSquare;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return 0\n        \n        maxSide = 0\n        rows, columns = len(matrix), len(matrix[0])\n        for i in range(rows):\n            for j in range(columns):\n                if matrix[i][j] == '1':\n                    # 遇到一个 1 作为正方形的左上角\n                    maxSide = max(maxSide, 1)\n                    # 计算可能的最大正方形边长\n                    currentMaxSide = min(rows - i, columns - j)\n                    for k in range(1, currentMaxSide):\n                        # 判断新增的一行一列是否均为 1\n                        flag = True\n                        if matrix[i + k][j + k] == '0':\n                            break\n                        for m in range(k):\n                            if matrix[i + k][j + m] == '0' or matrix[i + m][j + k] == '0':\n                                flag = False\n                                break\n                        if flag:\n                            maxSide = max(maxSide, k + 1)\n                        else:\n                            break\n        \n        maxSquare = maxSide * maxSide\n        return maxSquare\n```\n\n```golang [sol1-Golang]\nfunc maximalSquare(matrix [][]byte) int {\n    maxSide := 0\n    if len(matrix) == 0 || len(matrix[0]) == 0 {\n        return maxSide\n    }\n    rows, columns := len(matrix), len(matrix[0])\n    for i := 0; i < rows; i++ {\n        for j := 0; j < columns; j++ {\n            if matrix[i][j] == '1' {\n                maxSide = max(maxSide, 1)\n                curMaxSide := min(rows - i, columns - j)\n                for k := 1; k < curMaxSide; k++ {\n                    flag := true\n                    if matrix[i+k][j+k] == '0' {\n                        break\n                    }\n                    for m := 0; m < k; m++ {\n                        if matrix[i+k][j+m] == '0' || matrix[i+m][j+k] == '0' {\n                            flag = false\n                            break\n                        }\n                    }\n                    if flag {\n                        maxSide = max(maxSide, k + 1)\n                    } else {\n                        break\n                    }\n                }\n            }\n        }\n    }\n    return maxSide * maxSide\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(mn \\min(m,n)^2)$，其中 $m$ 和 $n$ 是矩阵的行数和列数。\n   * 需要遍历整个矩阵寻找每个 $1$，遍历矩阵的时间复杂度是 $O(mn)$。\n   * 对于每个可能的正方形，其边长不超过 $m$ 和 $n$ 中的最小值，需要遍历该正方形中的每个元素判断是不是只包含 $1$，遍历正方形时间复杂度是 $O(\\min(m,n)^2)$。\n   * 总时间复杂度是 $O(mn \\min(m,n)^2)$。\n\n* 空间复杂度：$O(1)$。额外使用的空间复杂度为常数。\n\n#### 方法二：动态规划\n\n方法一虽然直观，但是时间复杂度太高，有没有办法降低时间复杂度呢？\n\n可以使用动态规划降低时间复杂度。我们用 $\\textit{dp}(i, j)$ 表示以 $(i, j)$ 为右下角，且只包含 $1$ 的正方形的边长最大值。如果我们能计算出所有 $\\textit{dp}(i, j)$ 的值，那么其中的最大值即为矩阵中只包含 $1$ 的正方形的边长最大值，其平方即为最大正方形的面积。\n\n那么如何计算 $\\textit{dp}$ 中的每个元素值呢？对于每个位置 $(i, j)$，检查在矩阵中该位置的值：\n\n- 如果该位置的值是 $0$，则 $\\textit{dp}(i, j) = 0$，因为当前位置不可能在由 $1$ 组成的正方形中；\n\n- 如果该位置的值是 $1$，则 $\\textit{dp}(i, j)$ 的值由其上方、左方和左上方的三个相邻位置的 $\\textit{dp}$ 值决定。具体而言，当前位置的元素值等于三个相邻位置的元素中的最小值加 $1$，状态转移方程如下：\n\n  $$\n  dp(i, j)=min(dp(i−1, j), dp(i−1, j−1), dp(i, j−1))+1\n  $$\n\n  如果读者对这个状态转移方程感到不解，可以参考 [1277. 统计全为 1 的正方形子矩阵的官方题解](https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/solution/tong-ji-quan-wei-1-de-zheng-fang-xing-zi-ju-zhen-2/)，其中给出了详细的证明。\n\n  此外，还需要考虑边界条件。如果 $i$ 和 $j$ 中至少有一个为 $0$，则以位置 $(i, j)$ 为右下角的最大正方形的边长只能是 $1$，因此 $\\textit{dp}(i, j) = 1$。\n\n以下用一个例子具体说明。原始矩阵如下。\n\n```\n0 1 1 1 0\n1 1 1 1 0\n0 1 1 1 1\n0 1 1 1 1\n0 0 1 1 1\n```\n\n对应的 $\\textit{dp}$ 值如下。\n\n```\n0 1 1 1 0\n1 1 2 2 0\n0 1 2 3 1\n0 1 2 3 2\n0 0 1 2 3\n```\n\n下图也给出了计算 $\\textit{dp}$ 值的过程。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/221/221_fig1.png)\n\n```Java [sol2-Java]\nclass Solution {\n    public int maximalSquare(char[][] matrix) {\n        int maxSide = 0;\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return maxSide;\n        }\n        int rows = matrix.length, columns = matrix[0].length;\n        int[][] dp = new int[rows][columns];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                if (matrix[i][j] == '1') {\n                    if (i == 0 || j == 0) {\n                        dp[i][j] = 1;\n                    } else {\n                        dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;\n                    }\n                    maxSide = Math.max(maxSide, dp[i][j]);\n                }\n            }\n        }\n        int maxSquare = maxSide * maxSide;\n        return maxSquare;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maximalSquare(vector<vector<char>>& matrix) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return 0;\n        }\n        int maxSide = 0;\n        int rows = matrix.size(), columns = matrix[0].size();\n        vector<vector<int>> dp(rows, vector<int>(columns));\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                if (matrix[i][j] == '1') {\n                    if (i == 0 || j == 0) {\n                        dp[i][j] = 1;\n                    } else {\n                        dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;\n                    }\n                    maxSide = max(maxSide, dp[i][j]);\n                }\n            }\n        }\n        int maxSquare = maxSide * maxSide;\n        return maxSquare;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return 0\n        \n        maxSide = 0\n        rows, columns = len(matrix), len(matrix[0])\n        dp = [[0] * columns for _ in range(rows)]\n        for i in range(rows):\n            for j in range(columns):\n                if matrix[i][j] == '1':\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                    maxSide = max(maxSide, dp[i][j])\n        \n        maxSquare = maxSide * maxSide\n        return maxSquare\n```\n\n```golang [sol2-Golang]\nfunc maximalSquare(matrix [][]byte) int {\n    dp := make([][]int, len(matrix))\n    maxSide := 0\n    for i := 0; i < len(matrix); i++ {\n        dp[i] = make([]int, len(matrix[i]))\n        for j := 0; j < len(matrix[i]); j++ {\n            dp[i][j] = int(matrix[i][j] - '0')\n            if dp[i][j] == 1 {\n                maxSide = 1\n            }\n        }\n    }\n\n    for i := 1; i < len(matrix); i++ {\n        for j := 1; j < len(matrix[i]); j++ {\n            if dp[i][j] == 1 {\n                dp[i][j] = min(min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1\n                if dp[i][j] > maxSide {\n                    maxSide = dp[i][j]\n                }\n            }\n        }\n    }\n    return maxSide * maxSide\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 是矩阵的行数和列数。需要遍历原始矩阵中的每个元素计算 $\\textit{dp}$ 的值。\n\n* 空间复杂度：$O(mn)$，其中 $m$ 和 $n$ 是矩阵的行数和列数。创建了一个和原始矩阵大小相同的矩阵 $\\textit{dp}$。由于状态转移方程中的 $\\textit{dp}(i, j)$ 由其上方、左方和左上方的三个相邻位置的 $\\textit{dp}$ 值决定，因此可以使用两个一维数组进行状态转移，空间复杂度优化至 $O(n)$。"
}