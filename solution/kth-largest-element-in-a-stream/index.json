{
	"titleSlug": "kth-largest-element-in-a-stream",
	"slug": "mian-shi-ti-jing-gao-jing-dian-topk-ben-u7w30",
	"url": "https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/solution/mian-shi-ti-jing-gao-jing-dian-topk-ben-u7w30/",
	"content": "\n**各位题友大家除夕好！** 今天是 **[@负雪明烛](/u/fuxuemingzhu/)** 坚持日更的第 **18** 天。今天力扣上的每日一题是「[703. 数据流中的第 K 大元素](https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/)」。\n\n# 解题思路\n\n首先，面试题警告：\n\n- 本题「**数据流中的 TopK**」是我参加亚马逊面试遇到过的真题。\n- 另外，**实现堆算法**是我参加微软面试遇到的真题。\n- 多说一句，TopK 算法在面试中常问，推荐阅读「[拜托，面试别再问我TopK了！！！](https://mp.weixin.qq.com/s/FFsvWXiaZK96PtUg-mmtEw)」\n\n\n\n本题是我们求在一个数据流中的第 $K$ 大元素。所谓数据流，即是说我们写的算法需要支持 `add()` 函数；在力扣后台评测程序中会多次调用`add()`函数，每次调用都会向我们写的算法中添加一个元素。而题目要求的就是在每次 `add()` 之后，整个数据流（包括初始化的元素和所有 add 进来的元素）中的第 $K$ 大元素。\n\n\n先说一个最暴力的解法：我们底层数据结构使用**数组**实现，当每次调用 `add()` 函数时，向数组中添加一个元素，然后调用 `sort()` 函数进行排序，返回排序后数组的第 $K$ 个数字。该做法在每次调用 `add()` 函数时的时间复杂度为  $O(K*log(K))$ ，该时间复杂度太高，当 $K$ 很大 / `add()`调用次数太多的时候，一定会超时。\n\n\n从上面的分析中，我们已经看出来了，使用**数组**的核心问题是：数组自身不带排序功能，只能用 `sort()` 函数，导致时间复杂度过高。\n\n\n因此我们考虑使用自带排序功能的数据结构——**堆**。\n\n\n在**大根堆**（图一）中，父节点的值比每一个子节点的值都要大。在**小根堆**（图二）中，父节点的值比每一个子节点的值都要小。\n\n![image.png](https://pic.leetcode-cn.com/1612977776-oQiAdf-image.png)\n\n\n\n本题的操作步骤如下：\n\n1. 使用大小为 $K$ 的**小根堆**，在初始化的时候，保证堆中的元素个数不超过 $K$ 。\n1. 在每次 `add()` 的时候，将新元素 `push()` 到堆中，如果此时堆中的元素超过了 $K$，那么需要把堆中的最小元素（堆顶）`pop()` 出来。\n1. 此时堆中的最小元素（堆顶）就是整个数据流中的第 $K$ 大元素。\n\n\n\n问答：\n\n1. 为什么使用小根堆？\n\n- 因为我们需要在堆中保留数据流中的前 $K$ 大元素，使用小根堆能保证每次调用堆的 `pop()` 函数时，从堆中删除的是堆中的最小的元素（堆顶）。\n\n2. 为什么能保证堆顶元素是第 $K$ 大元素？ \n\n- 因为小根堆中保留的一直是堆中的前 $K$ 大的元素，堆的大小是 $K$，所以堆顶元素是第 $K$ 大元素。 \n\n3. 每次 `add()` 的时间复杂度是多少？\n\n- 每次 `add()` 时，调用了堆的 `push()` 和 `pop()` 方法，两个操作的时间复杂度都是 $log(K)$.\n\n\n\n# 代码\n\n\n使用 Python2 写的代码如下。\n\n```python\nclass KthLargest(object):\n\n    def __init__(self, k, nums):\n        \"\"\"\n        :type k: int\n        :type nums: List[int]\n        \"\"\"\n        self.k = k\n        self.que = nums\n        heapq.heapify(self.que)\n\n    def add(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: int\n        \"\"\"\n        heapq.heappush(self.que, val)\n        while len(self.que) > self.k:\n            heapq.heappop(self.que)\n        return self.que[0]\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)\n```\n\n\n\n# 刷题心得\n\n1. 本题是堆的经典运用，在面试中可能会遇到，请认真对待本题，包括「TopK问题」；\n2. 数据流的题目还是很有意思的，力扣上有其他数据流题目，建议也做一下。\n\n\n---\n\n参考资料：\n\n1. [大根堆/小根堆 图源](https://www.cnblogs.com/GIggleZN/p/7789260.html)\n2. [拜托，面试别再问我TopK了！！！](https://mp.weixin.qq.com/s/FFsvWXiaZK96PtUg-mmtEw)\n3. [负雪明烛博客：703. Kth Largest Element in a Stream](https://blog.csdn.net/fuxuemingzhu/article/details/81027116?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161297276316780269899787%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&request_id=161297276316780269899787&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-81027116.pc_v2_rank_blog_default&utm_term=703)\n4. [【LeetCode】代码模板，刷题必会](https://fuxuemingzhu.blog.csdn.net/article/details/101900729)\n\n\n\n\nOK，以上就是 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 写的今天题解的全部内容了，如果你觉得有帮助的话，**求赞、求关注、求收藏**。如果有疑问的话，请在下面评论，我会及时解答。\n\n**关注我**，你将不会错过我的精彩动画题解、面试题分享、组队刷题活动，进入主页 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 右侧有刷题组织，从此刷题不再孤单。\n\n祝大家过年好！我们明天再见！"
}