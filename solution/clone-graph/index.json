{
	"titleSlug": "clone-graph",
	"slug": "ke-long-tu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/clone-graph/solution/ke-long-tu-by-leetcode-solution/",
	"content": "#### 方法一：深度优先搜索\n\n**思路**\n\n对于本题而言，我们需要明确**图的深拷贝**是在做什么，对于一张图而言，它的**深拷贝**即构建一张与原图结构，值均一样的图，但是其中的节点**不再是原来图节点的引用**。因此，为了深拷贝出整张图，我们需要知道整张图的结构以及对应节点的值。\n\n由于题目只给了我们一个节点的引用，因此为了知道整张图的结构以及对应节点的值，我们需要从给定的节点出发，进行「图的遍历」，并在遍历的过程中完成**图的深拷贝**。\n\n为了避免在深拷贝时陷入死循环，我们需要理解图的结构。对于一张无向图，任何给定的无向边都可以表示为**两个有向边**，即如果节点 `A` 和节点 `B` 之间存在无向边，则表示该图具有从节点 `A` 到节点 `B` 的有向边和从节点 `B` 到节点 `A` 的有向边。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/133/1.png)\n\n为了防止多次遍历同一个节点，陷入死循环，我们需要用一种数据结构记录已经被克隆过的节点。\n\n**算法**\n\n1. 使用一个哈希表存储所有已被访问和克隆的节点。哈希表中的 `key` 是原始图中的节点，`value` 是克隆图中的对应节点。\n\n2. 从给定节点开始遍历图。如果某个节点已经被访问过，则返回其克隆图中的对应节点。\n\n    如下图，我们给定无向边边 `A - B`，表示 `A` 能连接到 `B`，且 `B` 能连接到 `A`。如果不对访问过的节点做标记，则会陷入死循环中。\n\n![fig2](https://assets.leetcode-cn.com/solution-static/133/2.png)\n\n3. 如果当前访问的节点不在哈希表中，则创建它的克隆节点并存储在哈希表中。注意：在进入递归之前，必须先创建克隆节点并保存在哈希表中。如果不保证这种顺序，可能会在递归中再次遇到同一个节点，再次遍历该节点时，陷入死循环。\n   \n\n![fig3](https://assets.leetcode-cn.com/solution-static/133/3.png)\n    \n4. 递归调用每个节点的邻接点。每个节点递归调用的次数等于邻接点的数量，每一次调用返回其对应邻接点的克隆节点，最终返回这些克隆邻接点的列表，将其放入对应克隆节点的邻接表中。这样就可以克隆给定的节点和其邻接点。\n\n```java [sol1-Java]\nclass Solution {\n    private HashMap <Node, Node> visited = new HashMap <> ();\n    public Node cloneGraph(Node node) {\n        if (node == null) {\n            return node;\n        }\n\n        // 如果该节点已经被访问过了，则直接从哈希表中取出对应的克隆节点返回\n        if (visited.containsKey(node)) {\n            return visited.get(node);\n        }\n\n        // 克隆节点，注意到为了深拷贝我们不会克隆它的邻居的列表\n        Node cloneNode = new Node(node.val, new ArrayList());\n        // 哈希表存储\n        visited.put(node, cloneNode);\n\n        // 遍历该节点的邻居并更新克隆节点的邻居列表\n        for (Node neighbor: node.neighbors) {\n            cloneNode.neighbors.add(cloneGraph(neighbor));\n        }\n        return cloneNode;\n    }\n}\n```\n\n```python [sol1-Python]\nclass Solution(object):\n\n    def __init__(self):\n        self.visited = {}\n\n    def cloneGraph(self, node):\n        \"\"\"\n        :type node: Node\n        :rtype: Node\n        \"\"\"\n        if not node:\n            return node\n\n        # 如果该节点已经被访问过了，则直接从哈希表中取出对应的克隆节点返回\n        if node in self.visited:\n            return self.visited[node]\n\n        # 克隆节点，注意到为了深拷贝我们不会克隆它的邻居的列表\n        clone_node = Node(node.val, [])\n\n        # 哈希表存储\n        self.visited[node] = clone_node\n\n        # 遍历该节点的邻居并更新克隆节点的邻居列表\n        if node.neighbors:\n            clone_node.neighbors = [self.cloneGraph(n) for n in node.neighbors]\n\n        return clone_node\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    unordered_map<Node*, Node*> visited;\n    Node* cloneGraph(Node* node) {\n        if (node == nullptr) {\n            return node;\n        }\n\n        // 如果该节点已经被访问过了，则直接从哈希表中取出对应的克隆节点返回\n        if (visited.find(node) != visited.end()) {\n            return visited[node];\n        }\n\n        // 克隆节点，注意到为了深拷贝我们不会克隆它的邻居的列表\n        Node* cloneNode = new Node(node->val);\n        // 哈希表存储\n        visited[node] = cloneNode;\n\n        // 遍历该节点的邻居并更新克隆节点的邻居列表\n        for (auto& neighbor: node->neighbors) {\n            cloneNode->neighbors.emplace_back(cloneGraph(neighbor));\n        }\n        return cloneNode;\n    }\n};\n```\n\n```C [sol1-C]\nstruct Node** visited;\n\nstruct Node* dfs(struct Node* s) {\n    if (s == NULL) {\n        return NULL;\n    }\n\n    // 如果该节点已经被访问过了，则直接从哈希表中取出对应的克隆节点返回\n    if (visited[s->val]) {\n        return visited[s->val];\n    }\n\n    // 克隆节点，注意到为了深拷贝我们不会克隆它的邻居的列表\n    struct Node* cloneNode = (struct Node*)malloc(sizeof(struct Node));\n    cloneNode->val = s->val;\n    cloneNode->numNeighbors = s->numNeighbors;\n\n    // 哈希表存储\n    visited[cloneNode->val] = cloneNode;\n    cloneNode->neighbors = (struct Node**)malloc(sizeof(struct Node*) * cloneNode->numNeighbors);\n\n    // 遍历该节点的邻居并更新克隆节点的邻居列表\n    for (int i = 0; i < cloneNode->numNeighbors; i++) {\n        cloneNode->neighbors[i] = dfs(s->neighbors[i]);\n    }\n    return cloneNode;\n}\n\nstruct Node* cloneGraph(struct Node* s) {\n    visited = (struct Node**)malloc(sizeof(struct Node*) * 101);\n    memset(visited, 0, sizeof(struct Node*) * 101);\n    return dfs(s);\n}\n```\n\n```golang [sol1-Golang]\nfunc cloneGraph(node *Node) *Node {\n    visited := map[*Node]*Node{}\n    var cg func(node *Node) *Node\n    cg = func(node *Node) *Node {\n        if node == nil {\n            return node\n        }\n\n        // 如果该节点已经被访问过了，则直接从哈希表中取出对应的克隆节点返回\n        if _, ok := visited[node]; ok {\n            return visited[node]\n        }\n\n        // 克隆节点，注意到为了深拷贝我们不会克隆它的邻居的列表\n        cloneNode := &Node{node.Val, []*Node{}}\n        // 哈希表存储\n        visited[node] = cloneNode\n\n        // 遍历该节点的邻居并更新克隆节点的邻居列表\n        for _, n := range node.Neighbors {\n            cloneNode.Neighbors = append(cloneNode.Neighbors, cg(n))\n        }\n        return cloneNode\n    }\n    return cg(node)\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 表示节点数量。深度优先搜索遍历图的过程中每个节点只会被访问一次。\n\n* 空间复杂度：$O(N)$。存储克隆节点和原节点的哈希表需要 $O(N)$ 的空间，递归调用栈需要 $O(H)$ 的空间，其中 $H$ 是图的深度，经过放缩可以得到 $O(H) = O(N)$，因此总体空间复杂度为 $O(N)$。\n\n\n#### 方法二：广度优先遍历\n\n**思路**\n\n同样，我们也可以用广度优先搜索来进行「图的遍历」。\n\n![fig4](https://assets.leetcode-cn.com/solution-static/133/4.png)\n\n方法一与方法二的区别仅在于搜索的方式。深度优先搜索以深度优先，广度优先搜索以广度优先。这两种方法都需要借助哈希表记录被克隆过的节点来避免陷入死循环。\n\n**算法**\n\n1. 使用一个哈希表 `visited` 存储所有已被访问和克隆的节点。哈希表中的 `key` 是原始图中的节点，`value` 是克隆图中的对应节点。\n\n2. 将题目给定的节点添加到队列。克隆该节点并存储到哈希表中。\n\n3. 每次从队列首部取出一个节点，遍历该节点的所有邻接点。如果某个邻接点已被访问，则该邻接点一定在 `visited` 中，那么从 `visited` 获得该邻接点，否则创建一个新的节点存储在 `visited` 中，并将邻接点添加到队列。将克隆的邻接点添加到克隆图对应节点的邻接表中。重复上述操作直到队列为空，则整个图遍历结束。\n\n```java [sol2-Java]\nclass Solution {\n    public Node cloneGraph(Node node) {\n        if (node == null) {\n            return node;\n        }\n\n        HashMap<Node, Node> visited = new HashMap();\n\n        // 将题目给定的节点添加到队列\n        LinkedList<Node> queue = new LinkedList<Node> ();\n        queue.add(node);\n        // 克隆第一个节点并存储到哈希表中\n        visited.put(node, new Node(node.val, new ArrayList()));\n\n        // 广度优先搜索\n        while (!queue.isEmpty()) {\n            // 取出队列的头节点\n            Node n = queue.remove();\n            // 遍历该节点的邻居\n            for (Node neighbor: n.neighbors) {\n                if (!visited.containsKey(neighbor)) {\n                    // 如果没有被访问过，就克隆并存储在哈希表中\n                    visited.put(neighbor, new Node(neighbor.val, new ArrayList()));\n                    // 将邻居节点加入队列中\n                    queue.add(neighbor);\n                }\n                // 更新当前节点的邻居列表\n                visited.get(n).neighbors.add(visited.get(neighbor));\n            }\n        }\n\n        return visited.get(node);\n    }\n}\n```\n\n```python [sol2-Python]\nfrom collections import deque\nclass Solution(object):\n\n    def cloneGraph(self, node):\n        \"\"\"\n        :type node: Node\n        :rtype: Node\n        \"\"\"\n\n        if not node:\n            return node\n\n        visited = {}\n\n        # 将题目给定的节点添加到队列\n        queue = deque([node])\n        # 克隆第一个节点并存储到哈希表中\n        visited[node] = Node(node.val, [])\n\n        # 广度优先搜索\n        while queue:\n            # 取出队列的头节点\n            n = queue.popleft()\n            # 遍历该节点的邻居\n            for neighbor in n.neighbors:\n                if neighbor not in visited:\n                    # 如果没有被访问过，就克隆并存储在哈希表中\n                    visited[neighbor] = Node(neighbor.val, [])\n                    # 将邻居节点加入队列中\n                    queue.append(neighbor)\n                # 更新当前节点的邻居列表\n                visited[n].neighbors.append(visited[neighbor])\n\n        return visited[node]\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        if (node == nullptr) {\n            return node;\n        }\n\n        unordered_map<Node*, Node*> visited;\n\n        // 将题目给定的节点添加到队列\n        queue<Node*> Q;\n        Q.push(node);\n        // 克隆第一个节点并存储到哈希表中\n        visited[node] = new Node(node->val);\n\n        // 广度优先搜索\n        while (!Q.empty()) {\n            // 取出队列的头节点\n            auto n = Q.front();\n            Q.pop();\n            // 遍历该节点的邻居\n            for (auto& neighbor: n->neighbors) {\n                if (visited.find(neighbor) == visited.end()) {\n                    // 如果没有被访问过，就克隆并存储在哈希表中\n                    visited[neighbor] = new Node(neighbor->val);\n                    // 将邻居节点加入队列中\n                    Q.push(neighbor);\n                }\n                // 更新当前节点的邻居列表\n                visited[n]->neighbors.emplace_back(visited[neighbor]);\n            }\n        }\n\n        return visited[node];\n    }\n};\n```\n\n```C [sol2-C]\nstruct Node** visited;\nint* state;  //数组存放结点状态 0：结点未创建 1：仅创建结点 2：结点已创建并已填入所有内容\n\nvoid bfs(struct Node* s) {\n    if (visited[s->val] && state[s->val] == 2) {\n        return;\n    }\n    struct Node* neighbor;\n    if (visited[s->val]) {\n        neighbor = visited[s->val];\n        neighbor->val = s->val;\n        neighbor->numNeighbors = s->numNeighbors;\n        neighbor->neighbors = (struct Node**)malloc(sizeof(struct Node*) * neighbor->numNeighbors);\n    } else {\n        // 如果没有被访问过，就克隆并存储在哈希表中\n        neighbor = (struct Node*)malloc(sizeof(struct Node));\n        neighbor->val = s->val;\n        neighbor->numNeighbors = s->numNeighbors;\n        neighbor->neighbors = (struct Node**)malloc(sizeof(struct Node*) * neighbor->numNeighbors);\n        visited[s->val] = neighbor;\n    }\n    for (int i = 0; i < neighbor->numNeighbors; i++) {\n        if (visited[s->neighbors[i]->val]) {\n            neighbor->neighbors[i] = visited[s->neighbors[i]->val];\n        } else {\n            visited[s->neighbors[i]->val] = (struct Node*)malloc(sizeof(struct Node));\n            state[s->neighbors[i]->val] = 1;\n            neighbor->neighbors[i] = visited[s->neighbors[i]->val];\n        }\n    }\n    state[neighbor->val] = 2;\n}\n\nstruct Node* cloneGraph(struct Node* s) {\n    if (s == NULL) {\n        return NULL;\n    }\n\n    // 将题目给定的节点添加到队列\n    struct Node *QUEUE[101], *p;\n    int head = -1, eneighbor = -1, i, flag[101];\n\n    visited = (struct Node**)malloc(sizeof(struct Node*) * 101);\n    memset(visited, 0, sizeof(struct Node*) * 101);\n    state = (int*)malloc(sizeof(int) * 101);\n    memset(state, 0, sizeof(int) * 101);\n    memset(flag, 0, sizeof(int) * 101);\n\n    // 克隆第一个节点并存储到哈希表中\n    QUEUE[++eneighbor] = s;\n\n    // 广度优先搜索\n    while (head != eneighbor) {\n        // 取出队列的头节点\n        p = QUEUE[++head];\n        // 遍历该节点的邻居\n        bfs(p);\n        for (i = 0; i < p->numNeighbors; i++) {\n            if (!flag[p->neighbors[i]->val]) {\n                // 将邻居节点加入队列中\n                QUEUE[++eneighbor] = p->neighbors[i];\n                flag[p->neighbors[i]->val] = 1;\n            }\n        }\n    }\n\n    return visited[s->val];\n}\n```\n\n```golang [sol2-Golang]\nfunc cloneGraph(node *Node) *Node {\n    if node == nil {\n        return node\n    }\n    visited := map[*Node]*Node{}\n\n    // 将题目给定的节点添加到队列\n    queue := []*Node{node}\n    // 克隆第一个节点并存储到哈希表中\n    visited[node] = &Node{node.Val, []*Node{}}\n\n    // 广度优先搜索\n    for len(queue) > 0 {\n        // 取出队列的头节点\n        n := queue[0]\n        // 遍历该节点的邻居\n        queue = queue[1:]\n        for _, neighbor := range n.Neighbors {\n            if _, ok := visited[neighbor]; !ok {\n                // 如果没有被访问过，就克隆并存储在哈希表中\n                visited[neighbor] = &Node{neighbor.Val, []*Node{}}\n                // 将邻居节点加入队列中\n                queue = append(queue, neighbor)\n            }\n            // 更新当前节点的邻居列表\n            visited[n].Neighbors = append(visited[n].Neighbors, visited[neighbor])\n        }\n    }\n    return visited[node]\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 表示节点数量。广度优先搜索遍历图的过程中每个节点只会被访问一次。\n\n* 空间复杂度：$O(N)$。哈希表使用 $O(N)$ 的空间。广度优先搜索中的队列在最坏情况下会达到 $O(N)$ 的空间复杂度，因此总体空间复杂度为 $O(N)$。"
}