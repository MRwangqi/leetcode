{
	"titleSlug": "partition-array-into-disjoint-intervals",
	"slug": "fen-ge-shu-zu-by-leetcode",
	"url": "https://leetcode-cn.com/problems/partition-array-into-disjoint-intervals/solution/fen-ge-shu-zu-by-leetcode/",
	"content": "#### 方法 1：辅助数组\n\n**想法**\n\n不检验 `all(L <= R for L in left for R in right)`，而是检验 `max(left) <= min(right)`。\n\n**算法**\n\n找出对于所有子集 `left = A[:1], left = A[:2], left =  A[:3], ...` 的最大值 `max(left)`，也就是用 `maxleft[i]` 记录子集 `A[:i]` 的最大值。两两之间是相互关联的：`max(A[:4]) = max(max(A[:3]), A[3])` 所以有 `maxleft[4] = max(maxleft[3], A[3])`。\n\n同理，所有可能的 `right` 子集最小值 `min(right)` 也可以在线性时间内获得。\n\n最后只需要快速扫描一遍 `max(left)` 和 `min(right)`，答案非常明显。\n\n```Java []\nclass Solution {\n    public int partitionDisjoint(int[] A) {\n        int N = A.length;\n        int[] maxleft = new int[N];\n        int[] minright = new int[N];\n\n        int m = A[0];\n        for (int i = 0; i < N; ++i) {\n            m = Math.max(m, A[i]);\n            maxleft[i] = m;\n        }\n\n        m = A[N-1];\n        for (int i = N-1; i >= 0; --i) {\n            m = Math.min(m, A[i]);\n            minright[i] = m;\n        }\n\n        for (int i = 1; i < N; ++i)\n            if (maxleft[i-1] <= minright[i])\n                return i;\n\n        throw null;\n    }\n}\n```\n\n```Python []\nclass Solution(object):\n    def partitionDisjoint(self, A):\n        N = len(A)\n        maxleft = [None] * N\n        minright = [None] * N\n\n        m = A[0]\n        for i in xrange(N):\n            m = max(m, A[i])\n            maxleft[i] = m\n\n        m = A[-1]\n        for i in xrange(N-1, -1, -1):\n            m = min(m, A[i])\n            minright[i] = m\n\n        for i in xrange(1, N):\n            if maxleft[i-1] <= minright[i]:\n                return i\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 `A` 的长度。\n* 空间复杂度：$O(N)$。"
}