{
	"titleSlug": "count-collisions-on-a-road",
	"slug": "jie-lun-ti-san-xing-gao-ding-by-endlessc-bvnw",
	"url": "https://leetcode-cn.com/problems/count-collisions-on-a-road/solution/jie-lun-ti-san-xing-gao-ding-by-endlessc-bvnw/",
	"content": "去掉往左右两边开的车之后，剩下非停止的车必然会碰撞。 \r\n\r\n```python [sol1-Python3]\r\nclass Solution:\r\n    def countCollisions(self, s: str) -> int:\r\n        s = s.lstrip('L')  # 前缀向左的车不会发生碰撞\r\n        s = s.rstrip('R')  # 后缀向右的车不会发生碰撞\r\n        return len(s) - s.count('S')  # 剩下非停止的车必然会碰撞\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    public int countCollisions(String s) {\r\n        s = s.replaceAll(\"^L+\", \"\"); // 前缀向左的车不会发生碰撞\r\n        s = new StringBuilder(s).reverse().toString().replaceAll(\"^R+\", \"\"); // 后缀向右的车不会发生碰撞\r\n        return s.length() - (int) s.chars().filter(c -> c == 'S').count(); // 剩下非停止的车必然会碰撞\r\n    }\r\n}\r\n```\r\n\r\n```cpp [sol1-C++]\r\nclass Solution {\r\npublic:\r\n    int countCollisions(string &s) {\r\n        s.erase(s.begin(), find_if(s.begin(), s.end(), [](auto c) { return c != 'L'; })); // 前缀向左的车不会发生碰撞\r\n        s.erase(find_if(s.rbegin(), s.rend(), [](auto c) { return c != 'R'; }).base(), s.end()); // 后缀向右的车不会发生碰撞\r\n        return s.length() - count(s.begin(), s.end(), 'S'); // 剩下非停止的车必然会碰撞\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc countCollisions(s string) int {\r\n\ts = strings.TrimLeft(s, \"L\")          // 前缀向左的车不会发生碰撞\r\n\ts = strings.TrimRight(s, \"R\")         // 后缀向右的车不会发生碰撞\r\n\treturn len(s) - strings.Count(s, \"S\") // 剩下非停止的车必然会碰撞\r\n}\r\n```"
}