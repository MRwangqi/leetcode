{
	"titleSlug": "day-of-the-year",
	"slug": "yi-nian-zhong-de-di-ji-tian-by-leetcode-2i0gr",
	"url": "https://leetcode-cn.com/problems/day-of-the-year/solution/yi-nian-zhong-de-di-ji-tian-by-leetcode-2i0gr/",
	"content": "#### 方法一：直接计算\n\n**思路与算法**\n\n我们首先从给定的字符串 $\\textit{date}$ 中提取出年 $\\textit{year}$，月 $\\textit{month}$ 以及日 $\\textit{day}$。\n\n这样一来，我们就可以首先统计到 $\\textit{month}$ 的前一个月为止的天数。这一部分只需要使用一个长度为 $12$ 的数组，预先记录每一个月的天数，再进行累加即可。随后我们将答案再加上 $\\textit{day}$，就可以得到 $\\textit{date}$ 是一年中的第几天。\n\n需要注意的是，如果 $\\textit{year}$ 是闰年，那么二月份会多出一天。闰年的判定方法为：$\\textit{year}$ 是 $400$ 的倍数，或者 $\\textit{year}$ 是 $4$ 的倍数且不是 $100$ 的倍数。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int dayOfYear(string date) {\n        int year = stoi(date.substr(0, 4));\n        int month = stoi(date.substr(5, 2));\n        int day = stoi(date.substr(8, 2));\n\n        int amount[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n            ++amount[1];\n        }\n\n        int ans = 0;\n        for (int i = 0; i < month - 1; ++i) {\n            ans += amount[i];\n        }\n        return ans + day;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int dayOfYear(String date) {\n        int year = Integer.parseInt(date.substring(0, 4));\n        int month = Integer.parseInt(date.substring(5, 7));\n        int day = Integer.parseInt(date.substring(8));\n\n        int[] amount = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n            ++amount[1];\n        }\n\n        int ans = 0;\n        for (int i = 0; i < month - 1; ++i) {\n            ans += amount[i];\n        }\n        return ans + day;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int DayOfYear(string date) {\n        int year = int.Parse(date.Substring(0, 4));\n        int month = int.Parse(date.Substring(5, 2));\n        int day = int.Parse(date.Substring(8));\n\n        int[] amount = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n            ++amount[1];\n        }\n\n        int ans = 0;\n        for (int i = 0; i < month - 1; ++i) {\n            ans += amount[i];\n        }\n        return ans + day;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def dayOfYear(self, date: str) -> int:\n        year, month, day = [int(x) for x in date.split(\"-\")]\n\n        amount = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):\n            amount[1] += 1\n\n        ans = sum(amount[:month - 1])\n        return ans + day\n```\n\n```C [sol1-C]\nint dayOfYear(char * date){\n    int year = atoi(date);\n    int month = atoi(date + 5);\n    int day = atoi(date + 8);\n    int amount[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n        ++amount[1];\n    }\n    int ans = 0;\n    for (int i = 0; i < month - 1; ++i) {\n        ans += amount[i];\n    }\n    return ans + day;\n}\n```\n\n```go [sol1-Golang]\nfunc dayOfYear(date string) int {\n    year, _ := strconv.Atoi(date[:4])\n    month, _ := strconv.Atoi(date[5:7])\n    day, _ := strconv.Atoi(date[8:])\n\n    days := []int{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    if year%400 == 0 || (year%4 == 0 && year%100 != 0) {\n        days[1]++\n    }\n\n    ans := day\n    for _, d := range days[:month-1] {\n        ans += d\n    }\n    return ans\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar dayOfYear = function(date) {\n    const year = +date.slice(0, 4);\n    const month = +date.slice(5, 7);\n    const day = +date.slice(8);\n\n    const amount = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)) {\n        ++amount[1];\n    }\n\n    let ans = 0;\n    for (let i = 0; i < month - 1; ++i) {\n        ans += amount[i];\n    }\n    return ans + day;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。我们将字符串的长度（定值 $7$）以及一年的月份数 $12$ 视为常数。\n\n- 空间复杂度：$O(1)$。"
}