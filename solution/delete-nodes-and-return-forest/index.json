{
	"titleSlug": "delete-nodes-and-return-forest",
	"slug": "by-01xz-5y46",
	"url": "https://leetcode-cn.com/problems/delete-nodes-and-return-forest/solution/by-01xz-5y46/",
	"content": "```cpp\r\nclass Solution {\r\npublic:\r\n    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {\r\n        unordered_set<int> delete_items {to_delete.begin(), to_delete.end()};\r\n        vector<TreeNode*> ans;\r\n        std::function<void(TreeNode*, TreeNode*, bool)> dfs = [&](TreeNode* p, TreeNode* node, bool is_root) {\r\n            if (!node) {\r\n                return;\r\n            }\r\n            bool child_root = false;\r\n            bool need_delete = delete_items.count(node->val) != 0;\r\n            if (need_delete) {\r\n                child_root = 1;\r\n                if (p) {\r\n                    if (p->left == node) {\r\n                        p->left = nullptr;\r\n                    } else {\r\n                        p->right = nullptr;\r\n                    }\r\n                }\r\n            } else if (is_root) {\r\n                ans.emplace_back(node);\r\n            }\r\n            dfs(node, node->left, child_root);\r\n            dfs(node, node->right, child_root);\r\n            if (need_delete)\r\n                delete node;\r\n        };\r\n        dfs(nullptr, root, 1);\r\n        return ans;\r\n    }\r\n};\r\n```\r\n"
}