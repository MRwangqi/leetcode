{
	"titleSlug": "non-decreasing-array",
	"slug": "fei-di-jian-shu-lie-by-leetcode-solution-zdsm",
	"url": "https://leetcode-cn.com/problems/non-decreasing-array/solution/fei-di-jian-shu-lie-by-leetcode-solution-zdsm/",
	"content": "#### 方法一：数组\n\n首先思考如下问题：\n\n> 要使数组 $\\textit{nums}$ 变成一个非递减数列，数组中**至多**有多少个 $i$ 满足 $\\textit{nums}[i]>\\textit{nums}[i+1]$？\n\n假设有两个不同的下标 $i$, $j$ 满足上述不等式，不妨设 $i<j$.\n\n若 $i+1<j$，则无论怎么修改 $\\textit{nums}[i]$ 或 $\\textit{nums}[i+1]$，都不会影响 $\\textit{nums}[j]$ 与 $\\textit{nums}[j+1]$ 之间的大小关系；修改 $\\textit{nums}[j]$ 或 $\\textit{nums}[j+1]$ 也同理。因此，这种情况下，我们无法将 $\\textit{nums}$ 变成非递减数列。\n\n若 $i+1=j$，则有 $\\textit{nums}[i]>\\textit{nums}[i+1]>\\textit{nums}[i+2]$。同样地，无论怎么修改其中一个数，都无法使这三个数变为 $\\textit{nums}[i]\\le\\textit{nums}[i+1]\\le\\textit{nums}[i+2]$ 的大小关系。\n\n因此，上述问题的结论是:\n\n> 至多一个。\n\n满足这个条件就足够了吗？并不，对于满足该条件的数组 $[3,4,1,2]$ 而言，无论怎么修改也无法将其变成非递减数列。\n\n因此，若找到了一个满足 $\\textit{nums}[i]>\\textit{nums}[i+1]$ 的 $i$，在修改 $\\textit{nums}[i]$ 或 $\\textit{nums}[i+1]$ 之后，还需要检查 $\\textit{nums}$ 是否变成了非递减数列。\n\n我们可以将 $\\textit{nums}[i]$ 修改成小于或等于 $\\textit{nums}[i+1]$ 的数，但由于还需要保证 $\\textit{nums}[i]$ 不小于它之前的数，$\\textit{nums}[i]$ 越大越好，所以将 $\\textit{nums}[i]$ 修改成 $\\textit{nums}[i+1]$ 是最佳的；同理，对于 $\\textit{nums}[i+1]$，修改成 $\\textit{nums}[i]$ 是最佳的。\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    bool checkPossibility(vector<int> &nums) {\n        int n = nums.size();\n        for (int i = 0; i < n - 1; ++i) {\n            int x = nums[i], y = nums[i + 1];\n            if (x > y) {\n                nums[i] = y;\n                if (is_sorted(nums.begin(), nums.end())) {\n                    return true;\n                }\n                nums[i] = x; // 复原\n                nums[i + 1] = x;\n                return is_sorted(nums.begin(), nums.end());\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean checkPossibility(int[] nums) {\n        int n = nums.length;\n        for (int i = 0; i < n - 1; ++i) {\n            int x = nums[i], y = nums[i + 1];\n            if (x > y) {\n                nums[i] = y;\n                if (isSorted(nums)) {\n                    return true;\n                }\n                nums[i] = x; // 复原\n                nums[i + 1] = x;\n                return isSorted(nums);\n            }\n        }\n        return true;\n    }\n\n    public boolean isSorted(int[] nums) {\n        int n = nums.length;\n        for (int i = 1; i < n; ++i) {\n            if (nums[i - 1] > nums[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc checkPossibility(nums []int) bool {\n    for i := 0; i < len(nums)-1; i++ {\n        x, y := nums[i], nums[i+1]\n        if x > y {\n            nums[i] = y\n            if sort.IntsAreSorted(nums) {\n                return true\n            }\n            nums[i] = x // 复原\n            nums[i+1] = x\n            return sort.IntsAreSorted(nums)\n        }\n    }\n    return true\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar checkPossibility = function(nums) {\n    const n = nums.length;\n    for (let i = 0; i < n - 1; ++i) {\n        const x = nums[i], y = nums[i + 1];\n        if (x > y) {\n            nums[i] = y;\n            if (isSorted(nums)) {\n                return true;\n            }\n            nums[i] = x; // 复原\n            nums[i + 1] = x;\n            return isSorted(nums);\n        }\n    }\n    return true;\n};\n\nconst isSorted = (nums) => {\n    const n = nums.length;\n    for (let i = 1; i < n; ++i) {\n        if (nums[i - 1] > nums[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n```C [sol1-C]\nbool isSorted(int* nums, int numsSize) {\n    for (int i = 1; i < numsSize; ++i) {\n        if (nums[i - 1] > nums[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool checkPossibility(int* nums, int numsSize) {\n    for (int i = 0; i < numsSize - 1; ++i) {\n        int x = nums[i], y = nums[i + 1];\n        if (x > y) {\n            nums[i] = y;\n            if (isSorted(nums, numsSize)) {\n                return true;\n            }\n            nums[i] = x;  // 复原\n            nums[i + 1] = x;\n            return isSorted(nums, numsSize);\n        }\n    }\n    return true;\n}\n```\n\n**优化**\n\n上面的代码多次遍历了 $\\textit{nums}$ 数组，能否只遍历一次呢？\n\n修改 $\\textit{nums}[i]$ 为 $\\textit{nums}[i+1]$ 后，还需要保证 $\\textit{nums}[i-1]\\le\\textit{nums}[i]$ 仍然成立，即 $\\textit{nums}[i-1]\\le\\textit{nums}[i+1]$，若该不等式不成立则整个数组必然不是非递减的，则需要修改 $\\textit{nums}[i+1]$ 为 $\\textit{nums}[i]$。修改完后，接着判断后续数字的大小关系。在遍历中统计 $\\textit{nums}[i]>\\textit{nums}[i+1]$ 的次数，若超过一次可以直接返回 $\\text{false}$。\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    bool checkPossibility(vector<int> &nums) {\n        int n = nums.size(), cnt = 0;\n        for (int i = 0; i < n - 1; ++i) {\n            int x = nums[i], y = nums[i + 1];\n            if (x > y) {\n                cnt++;\n                if (cnt > 1) {\n                    return false;\n                }\n                if (i > 0 && y < nums[i - 1]) {\n                    nums[i + 1] = x;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean checkPossibility(int[] nums) {\n        int n = nums.length, cnt = 0;\n        for (int i = 0; i < n - 1; ++i) {\n            int x = nums[i], y = nums[i + 1];\n            if (x > y) {\n                cnt++;\n                if (cnt > 1) {\n                    return false;\n                }\n                if (i > 0 && y < nums[i - 1]) {\n                    nums[i + 1] = x;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc checkPossibility(nums []int) bool {\n    cnt := 0\n    for i := 0; i < len(nums)-1; i++ {\n        x, y := nums[i], nums[i+1]\n        if x > y {\n            cnt++\n            if cnt > 1 {\n                return false\n            }\n            if i > 0 && y < nums[i-1] {\n                nums[i+1] = x\n            }\n        }\n    }\n    return true\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar checkPossibility = function(nums) {\n    const n = nums.length;\n    let cnt = 0;\n    for (let i = 0; i < n - 1; ++i) {\n        const x = nums[i], y = nums[i + 1];\n        if (x > y) {\n            cnt++;\n            if (cnt > 1) {\n                return false;\n            }\n            if (i > 0 && y < nums[i - 1]) {\n                nums[i + 1] = x;\n            }\n        }\n    }\n    return true;\n};\n```\n\n```C [sol2-C]\nbool checkPossibility(int* nums, int numsSize) {\n    int cnt = 0;\n    for (int i = 0; i < numsSize - 1; ++i) {\n        int x = nums[i], y = nums[i + 1];\n        if (x > y) {\n            cnt++;\n            if (cnt > 1) {\n                return false;\n            }\n            if (i > 0 && y < nums[i - 1]) {\n                nums[i + 1] = x;\n            }\n        }\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(1)$。"
}