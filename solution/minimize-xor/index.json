{
	"titleSlug": "minimize-xor",
	"slug": "o1-kong-jian-fu-za-du-zuo-fa-by-endlessc-ywio",
	"url": "https://leetcode-cn.com/problems/minimize-xor/solution/o1-kong-jian-fu-za-du-zuo-fa-by-endlessc-ywio/",
	"content": "[视频讲解](https://www.bilibili.com/video/BV1kd4y1q7fC) 已出炉，欢迎点赞三连，在评论区分享你对这场周赛的看法~\r\n\r\n---\r\n\r\n设 $c_1$ 为 $\\textit{num}_1$ 的置位数，$c_2$ 为 $\\textit{num}_2$ 的置位数。\r\n\r\n基本思路：\r\n\r\n$x$ 的置位数和 $\\textit{num}_2$ 相同，意味着 $x$ 的二进制表示中有 $c_2$ 个 $1$，我们需要合理地分配这 $c_2$ 个 $1$。\r\n\r\n为了让异或和尽量小，这些 $1$ 应当从高位到低位匹配 $\\textit{num}_1$ 中的 $1$；如果匹配完了还有多余的 $1$，那么就从低位到高位把 $0$ 改成 $1$。\r\n\r\n考虑直接在 $\\textit{num}_1$ 上修改，分类讨论：\r\n\r\n- 如果 $c_2<c_1$，那么将 $\\textit{num}_1$ 的最低的 $c_1-c_2$ 个 $1$ 变成 $0$，其结果就是 $x$；\r\n- 如果 $c_2>c_1$，那么将 $\\textit{num}_1$ 的最低的 $c_2-c_1$ 个 $0$ 变成 $1$，其结果就是 $x$；\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def minimizeXor(self, num1: int, num2: int) -> int:\r\n        c1 = num1.bit_count()\r\n        c2 = num2.bit_count()\r\n        while c2 < c1:\r\n            num1 &= num1 - 1  # 最低的 1 变成 0\r\n            c2 += 1\r\n        while c2 > c1:\r\n            num1 |= num1 + 1  # 最低的 0 变成 1\r\n            c2 -= 1\r\n        return num1\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    public int minimizeXor(int num1, int num2) {\r\n        var c1 = Integer.bitCount(num1);\r\n        var c2 = Integer.bitCount(num2);\r\n        for (; c2 < c1; ++c2) num1 &= num1 - 1; // 最低的 1 变成 0\r\n        for (; c2 > c1; --c2) num1 |= num1 + 1; // 最低的 0 变成 1\r\n        return num1;\r\n    }\r\n}\r\n```\r\n\r\n```cpp [sol1-C++]\r\nclass Solution {\r\npublic:\r\n    int minimizeXor(int num1, int num2) {\r\n        int c1 = __builtin_popcount(num1);\r\n        int c2 = __builtin_popcount(num2);\r\n        for (; c2 < c1; ++c2) num1 &= num1 - 1; // 最低的 1 变成 0\r\n        for (; c2 > c1; --c2) num1 |= num1 + 1; // 最低的 0 变成 1\r\n        return num1;\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc minimizeXor(num1, num2 int) int {\r\n\tc1 := bits.OnesCount(uint(num1))\r\n\tc2 := bits.OnesCount(uint(num2))\r\n\tfor ; c2 < c1; c2++ {\r\n\t\tnum1 &= num1 - 1 // 最低的 1 变成 0\r\n\t}\r\n\tfor ; c2 > c1; c2-- {\r\n\t\tnum1 |= num1 + 1 // 最低的 0 变成 1\r\n\t}\r\n\treturn num1\r\n}\r\n```\r\n\r\n#### 复杂度分析\r\n\r\n- 时间复杂度：$O(|\\log\\textit{num}_1 - \\log\\textit{num}_2|)$。\r\n- 空间复杂度：$O(1)$，仅用到若干变量。\r\n"
}