{
	"titleSlug": "split-array-into-fibonacci-sequence",
	"slug": "jiang-shu-zu-chai-fen-cheng-fei-bo-na-qi-ts6c",
	"url": "https://leetcode-cn.com/problems/split-array-into-fibonacci-sequence/solution/jiang-shu-zu-chai-fen-cheng-fei-bo-na-qi-ts6c/",
	"content": "#### 方法一：回溯 + 剪枝\n\n将给定的字符串拆分成斐波那契式序列，可以通过回溯的方法实现。\n\n使用列表存储拆分出的数，回溯过程中维护该列表的元素，列表初始为空。遍历字符串的所有可能的前缀，作为当前被拆分出的数，然后对剩余部分继续拆分，直到整个字符串拆分完毕。\n\n根据斐波那契式序列的要求，从第 $3$ 个数开始，每个数都等于前 $2$ 个数的和，因此从第 $3$ 个数开始，需要判断拆分出的数是否等于前 $2$ 个数的和，只有满足要求时才进行拆分，否则不进行拆分。\n\n回溯过程中，还有三处可以进行剪枝操作。\n\n- 拆分出的数如果不是 $0$，则不能以 $0$ 开头，因此如果字符串剩下的部分以 $0$ 开头，就不需要考虑拆分出长度大于 $1$ 的数，因为长度大于 $1$ 的数以 $0$ 开头是不符合要求的，不可能继续拆分得到斐波那契式序列；\n\n- 拆分出的数必须符合 $32$ 位有符号整数类型，即每个数必须在 $[0,2^{31}-1]$ 的范围内，如果拆分出的数大于 $2^{31}-1$，则不符合要求，长度更大的数的数值也一定更大，一定也大于 $2^{31}-1$，因此不可能继续拆分得到斐波那契式序列；\n\n- 如果列表中至少有 $2$ 个数，并且拆分出的数已经大于最后 $2$ 个数的和，就不需要继续尝试拆分了。\n\n当整个字符串拆分完毕时，如果列表中至少有 $3$ 个数，则得到一个符合要求的斐波那契式序列，返回列表。如果没有找到符合要求的斐波那契式序列，则返回空列表。\n\n实现方面，回溯需要带返回值，表示是否存在符合要求的斐波那契式序列。\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> splitIntoFibonacci(String num) {\n        List<Integer> list = new ArrayList<Integer>();\n        backtrack(list, num, num.length(), 0, 0, 0);\n        return list;\n    }\n\n    public boolean backtrack(List<Integer> list, String num, int length, int index, int sum, int prev) {\n        if (index == length) {\n            return list.size() >= 3;\n        }\n        long currLong = 0;\n        for (int i = index; i < length; i++) {\n            if (i > index && num.charAt(index) == '0') {\n                break;\n            }\n            currLong = currLong * 10 + num.charAt(i) - '0';\n            if (currLong > Integer.MAX_VALUE) {\n                break;\n            }\n            int curr = (int) currLong;\n            if (list.size() >= 2) {\n                if (curr < sum) {\n                    continue;\n                } else if (curr > sum) {\n                    break;\n                }\n            }\n            list.add(curr);\n            if (backtrack(list, num, length, i + 1, prev + curr, curr)) {\n                return true;\n            } else {\n                list.remove(list.size() - 1);\n            }\n        }\n        return false;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> splitIntoFibonacci(string num) {\n        vector<int> list;\n        backtrack(list, num, num.length(), 0, 0, 0);\n        return list;\n    }\n\n    bool backtrack(vector<int>& list, string num, int length, int index, long long sum, int prev) {\n        if (index == length) {\n            return list.size() >= 3;\n        }\n        long long curr = 0;\n        for (int i = index; i < length; i++) {\n            if (i > index && num[index] == '0') {\n                break;\n            }\n            curr = curr * 10 + num[i] - '0';\n            if (curr > INT_MAX) {\n                break;\n            }\n            if (list.size() >= 2) {\n                if (curr < sum) {\n                    continue;\n                }\n                else if (curr > sum) {\n                    break;\n                }\n            }\n            list.push_back(curr);\n            if (backtrack(list, num, length, i + 1, prev + curr, curr)) {\n                return true;\n            }\n            list.pop_back();\n        }\n        return false;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar splitIntoFibonacci = function(num) {\n    const list = new Array().fill(0);\n    backtrack(list, num, num.length, 0, 0, 0);\n    return list;\n};\n\nconst backtrack = (list, num, length, index, sum, prev) => {\n    if (index === length) {\n        return list.length >= 3;\n    }\n    let currLong = 0;\n    for (let i = index; i < length; i++) {\n        if (i > index && num[index] === '0') {\n            break;\n        }\n        currLong = currLong * 10 + num[i].charCodeAt() - '0'.charCodeAt();\n        if (currLong > Math.pow(2, 31) - 1) {\n            break;\n        }\n        let curr = currLong;\n        if (list.length >= 2) {\n            if (curr < sum) {\n                continue;\n            } else if (curr > sum) {\n                break;\n            }\n        }\n        list.push(curr);\n        if (backtrack(list, num, length, i + 1, prev + curr, curr)) {\n            return true;\n        } else {\n            list.splice(list.length - 1, 1);\n        }\n    }\n    return false;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        ans = list()\n\n        def backtrack(index: int):\n            if index == len(num):\n                return len(ans) >= 3\n            \n            curr = 0\n            for i in range(index, len(num)):\n                if i > index and num[index] == \"0\":\n                    break\n                curr = curr * 10 + ord(num[i]) - ord(\"0\")\n                if curr > 2**31 - 1:\n                    break\n                \n                if len(ans) < 2 or curr == ans[-2] + ans[-1]:\n                    ans.append(curr)\n                    if backtrack(i + 1):\n                        return True\n                    ans.pop()\n                elif len(ans) > 2 and curr > ans[-2] + ans[-1]:\n                    break\n        \n            return False\n        \n        backtrack(0)\n        return ans\n```\n\n```Golang [sol1-Golang]\nfunc splitIntoFibonacci(num string) (F []int) {\n    n := len(num)\n    var backtrack func(index, sum, prev int) bool\n    backtrack = func(index, sum, prev int) bool {\n        if index == n {\n            return len(F) >= 3\n        }\n\n        cur := 0\n        for i := index; i < n; i++ {\n            // 每个块的数字一定不要以零开头，除非这个块是数字 0 本身\n            if i > index && num[index] == '0' {\n                break\n            }\n\n            cur = cur*10 + int(num[i]-'0')\n            // 拆出的整数要符合 32 位有符号整数类型\n            if cur > math.MaxInt32 {\n                break\n            }\n\n            // F[i] + F[i+1] = F[i+2]\n            if len(F) >= 2 {\n                if cur < sum {\n                    continue\n                }\n                if cur > sum {\n                    break\n                }\n            }\n\n            // cur 符合要求，加入序列 F\n            F = append(F, cur)\n            if backtrack(i+1, prev+cur, cur) {\n                return true\n            }\n            F = F[:len(F)-1]\n        }\n        return false\n    }\n    backtrack(0, 0, 0)\n    return\n}\n```\n\n```C [sol1-C]\nbool backtrack(int* list, int* listSize, char* num, int length, int index, long long sum, int prev) {\n    if (index == length) {\n        return (*listSize) >= 3;\n    }\n    long long curr = 0;\n    for (int i = index; i < length; i++) {\n        if (i > index && num[index] == '0') {\n            break;\n        }\n        curr = curr * 10 + num[i] - '0';\n        if (curr > INT_MAX) {\n            break;\n        }\n        if ((*listSize) >= 2) {\n            if (curr < sum) {\n                continue;\n            } else if (curr > sum) {\n                break;\n            }\n        }\n        list[(*listSize)++] = curr;\n        if (backtrack(list, listSize, num, length, i + 1, prev + curr, curr)) {\n            return true;\n        }\n        (*listSize)--;\n    }\n    return false;\n}\n\nint* splitIntoFibonacci(char* num, int* returnSize) {\n    int n = strlen(num);\n    int* list = malloc(sizeof(int) * n);\n    *returnSize = 0;\n    backtrack(list, returnSize, num, strlen(num), 0, 0, 0);\n    return list;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log^2 C)$，其中 $n$ 是字符串的长度，$C$ 是题目规定的整数范围 $2^{31}-1$。在回溯的过程中，实际上真正进行「回溯」的只有前 $2$ 个数，而从第 $3$ 个数开始，整个斐波那契数列是可以被唯一确定的，整个回溯过程只起到验证（而不是枚举）的作用。对于前 $2$ 个数，它们的位数不能超过 $\\lfloor \\log_{10} C \\rfloor$，那么枚举的空间为 $O(\\log^2 C)$；对于后面的所有数，回溯的过程是没有「分支」的，因此时间复杂度为 $O(n)$，相乘即可得到总时间复杂度 $O(n \\log^2 C)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是字符串的长度。除了返回值以外，空间复杂度主要取决于回溯过程中的递归调用层数，最大为 $n$。"
}