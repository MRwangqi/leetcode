{
	"titleSlug": "minimum-number-of-people-to-teach",
	"slug": "1733-xu-yao-jiao-yu-yan-de-zui-shao-ren-37dty",
	"url": "https://leetcode-cn.com/problems/minimum-number-of-people-to-teach/solution/1733-xu-yao-jiao-yu-yan-de-zui-shao-ren-37dty/",
	"content": "### 解题思路\n\n`选择 一门 语言`，多了不行，就能选一门。\n\n1. 哈希会的语言，备用。\n2. 剔除掉本来就可以沟通的人。\n3. 假设要教第i种语言，需不需要教给这个人。 or 教会的最多的语言。\n\n还能简化，太困了！！！\n### 代码\n\n执行用时：64 ms, 在所有 Java 提交中击败了25.00%的用户\n\n内存消耗：62.5 MB, 在所有 Java 提交中击败了6.25%的用户\n\n通过测试用例：100 / 100\n\n```java\nclass Solution {\n\tpublic int minimumTeachings(int n, int[][] languages, int[][] friendships) {\n\t\tMap<Integer, Set<Integer>> map = new HashMap<>();\n\t\tfor (int i = 0; i < languages.length; i++) {\n\t\t\tint[] lan = languages[i];\n\t\t\tSet<Integer> set = new HashSet<>();\n\t\t\tfor (int j = 0; j < lan.length; j++) {\n\t\t\t\tset.add(lan[j]);\n\t\t\t}\n\t\t\tmap.put(i + 1, set);\n\t\t}\n\t\tSet<Integer> ships = new HashSet<>();\n\t\tfor (int i = 0; i < friendships.length; i++) {\n\t\t\tint[] friend = friendships[i];\n\t\t\tSet<Integer> lan0 = map.get(friend[0]);\n\t\t\tSet<Integer> lan1 = map.get(friend[1]);\n\t\t\tif (!this.same(lan0, lan1)) {\n\t\t\t\tships.add(friend[0]);\n\t\t\t\tships.add(friend[1]);\n\t\t\t}\n\t\t}\n\t\tint ans = Integer.MAX_VALUE;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tint cur = 0;\n\t\t\tfor (int friend : ships) {\n\t\t\t\tSet<Integer> lan0 = map.get(friend);\n\t\t\t\tif (!lan0.contains(i)) {\n\t\t\t\t\tcur += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tans = Math.min(ans, cur);\n\t\t}\n\t\treturn ans;\n\t}\n\n\tprivate boolean same(Set<Integer> lan0, Set<Integer> lan1) {\n\t\tfor (Integer l : lan1) {\n\t\t\tif (lan0.contains(l)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}\n```\n\n教会的最多的语言。\n\n\n```java\n\nclass Solution {\n\tpublic int minimumTeachings(int n, int[][] languages, int[][] friendships) {\n\t\tMap<Integer, Set<Integer>> map = new HashMap<>();\n\t\tfor (int i = 0; i < languages.length; i++) {\n\t\t\tint[] lan = languages[i];\n\t\t\tSet<Integer> set = new HashSet<>();\n\t\t\tfor (int j = 0; j < lan.length; j++) {\n\t\t\t\tset.add(lan[j]);\n\t\t\t}\n\t\t\tmap.put(i + 1, set);\n\t\t}\n\t\tSet<Integer> ships = new HashSet<>();\n\t\tfor (int i = 0; i < friendships.length; i++) {\n\t\t\tint[] friend = friendships[i];\n\t\t\tSet<Integer> lan0 = map.get(friend[0]);\n\t\t\tSet<Integer> lan1 = map.get(friend[1]);\n\t\t\tif (!this.same(lan0, lan1)) {\n\t\t\t\tships.add(friend[0]);\n\t\t\t\tships.add(friend[1]);\n\t\t\t}\n\t\t}\n\t\tint ans = Integer.MAX_VALUE;\n\t\tint[] lans = new int[n + 1];\n\t\tfor (int friend : ships) {\n\t\t\tSet<Integer> lan0 = map.get(friend);\n\t\t\tfor (int lan : lan0) {\n\t\t\t\tlans[lan]++;\n\t\t\t}\n\t\t}\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor (int i = 0; i < lans.length; i++) {\n\t\t\tmax = Math.max(max, lans[i]);\n\t\t}\n\t\treturn ships.size() - max;\n\t}\n\n\tprivate boolean same(Set<Integer> lan0, Set<Integer> lan1) {\n\t\tfor (Integer l : lan1) {\n\t\t\tif (lan0.contains(l)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n```"
}