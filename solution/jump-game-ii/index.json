{
	"titleSlug": "jump-game-ii",
	"slug": "tiao-yue-you-xi-ii-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/jump-game-ii/solution/tiao-yue-you-xi-ii-by-leetcode-solution/",
	"content": "#### 解题思路\n\n这道题是典型的贪心算法，通过局部最优解得到全局最优解。以下两种方法都是使用贪心算法实现，只是贪心的策略不同。\n\n#### 方法一：反向查找出发位置\n\n我们的目标是到达数组的最后一个位置，因此我们可以考虑最后一步跳跃前所在的位置，该位置通过跳跃能够到达最后一个位置。\n\n如果有多个位置通过跳跃都能够到达最后一个位置，那么我们应该如何进行选择呢？直观上来看，我们可以「贪心」地选择距离最后一个位置最远的那个位置，也就是对应下标最小的那个位置。因此，我们可以从左到右遍历数组，选择第一个满足要求的位置。\n\n找到最后一步跳跃前所在的位置之后，我们继续贪心地寻找倒数第二步跳跃前所在的位置，以此类推，直到找到数组的开始位置。\n\n使用这种方法编写的 `C++` 和 `Python` 代码会超出时间限制，因此我们只给出 `Java` 和 `Go` 代码。\n\n```Java [sol1-Java]\nclass Solution {\n    public int jump(int[] nums) {\n        int position = nums.length - 1;\n        int steps = 0;\n        while (position > 0) {\n            for (int i = 0; i < position; i++) {\n                if (i + nums[i] >= position) {\n                    position = i;\n                    steps++;\n                    break;\n                }\n            }\n        }\n        return steps;\n    }\n}\n```\n\n```golang [sol1-Golang]\nfunc jump(nums []int) int {\n    position := len(nums) - 1\n    steps := 0\n    for position > 0 {\n        for i := 0; i < position; i++ {\n            if i + nums[i] >= position {\n                position = i\n                steps++\n                break\n            }\n        }\n    }\n    return steps\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n^2)$，其中 $n$ 是数组长度。有两层嵌套循环，在最坏的情况下，例如数组中的所有元素都是 $1$，`position` 需要遍历数组中的每个位置，对于 `position` 的每个值都有一次循环。\n\n* 空间复杂度：$O(1)$。\n\n#### 方法二：正向查找可到达的最大位置\n\n方法一虽然直观，但是时间复杂度比较高，有没有办法降低时间复杂度呢？\n\n如果我们「贪心」地进行正向查找，每次找到可到达的最远位置，就可以在线性时间内得到最少的跳跃次数。\n\n例如，对于数组 `[2,3,1,2,4,2,3]`，初始位置是下标 0，从下标 0 出发，最远可到达下标 2。下标 0 可到达的位置中，下标 1 的值是 3，从下标 1 出发可以达到更远的位置，因此第一步到达下标 1。\n\n从下标 1 出发，最远可到达下标 4。下标 1 可到达的位置中，下标 4 的值是 4 ，从下标 4 出发可以达到更远的位置，因此第二步到达下标 4。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/45/45_fig1.png)\n\n在具体的实现中，我们维护当前能够到达的最大下标位置，记为边界。我们从左到右遍历数组，到达边界时，更新边界并将跳跃次数增加 1。\n\n在遍历数组时，我们不访问最后一个元素，这是因为在访问最后一个元素之前，我们的边界一定大于等于最后一个位置，否则就无法跳到最后一个位置了。如果访问最后一个元素，在边界正好为最后一个位置的情况下，我们会增加一次「不必要的跳跃次数」，因此我们不必访问最后一个元素。\n\n```Java [sol2-Java]\nclass Solution {\n    public int jump(int[] nums) {\n        int length = nums.length;\n        int end = 0;\n        int maxPosition = 0; \n        int steps = 0;\n        for (int i = 0; i < length - 1; i++) {\n            maxPosition = Math.max(maxPosition, i + nums[i]); \n            if (i == end) {\n                end = maxPosition;\n                steps++;\n            }\n        }\n        return steps;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int jump(vector<int>& nums) {\n        int maxPos = 0, n = nums.size(), end = 0, step = 0;\n        for (int i = 0; i < n - 1; ++i) {\n            if (maxPos >= i) {\n                maxPos = max(maxPos, i + nums[i]);\n                if (i == end) {\n                    end = maxPos;\n                    ++step;\n                }\n            }\n        }\n        return step;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def jump(self, nums: List[int]) -> int:\n        n = len(nums)\n        maxPos, end, step = 0, 0, 0\n        for i in range(n - 1):\n            if maxPos >= i:\n                maxPos = max(maxPos, i + nums[i])\n                if i == end:\n                    end = maxPos\n                    step += 1\n        return step\n```\n\n```golang [sol2-Golang]\nfunc jump(nums []int) int {\n    length := len(nums)\n    end := 0\n    maxPosition := 0\n    steps := 0\n    for i := 0; i < length - 1; i++ {\n        maxPosition = max(maxPosition, i + nums[i])\n        if i == end {\n            end = maxPosition\n            steps++\n        }\n    }\n    return steps\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 是数组长度。\n\n* 空间复杂度：$O(1)$。"
}