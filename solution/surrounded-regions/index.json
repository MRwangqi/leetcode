{
	"titleSlug": "surrounded-regions",
	"slug": "bei-wei-rao-de-qu-yu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/surrounded-regions/solution/bei-wei-rao-de-qu-yu-by-leetcode-solution/",
	"content": "#### 写在前面\n\n本题给定的矩阵中有三种元素：\n\n* 字母 `X`；\n* 被字母 `X` 包围的字母 `O`；\n* 没有被字母 `X` 包围的字母 `O`。\n\n本题要求将所有被字母 `X` 包围的字母 `O`都变为字母 `X` ，但很难判断哪些 `O` 是被包围的，哪些 `O` 不是被包围的。\n\n注意到题目解释中提到：**任何边界上的 `O` 都不会被填充为 `X`。** 我们可以想到，所有的不被包围的 `O` 都直接或间接与边界上的 `O` 相连。我们可以利用这个性质判断 `O` 是否在边界上，具体地说：\n\n* 对于每一个边界上的 `O`，我们以它为起点，标记所有与它直接或间接相连的字母 `O`；\n* 最后我们遍历这个矩阵，对于每一个字母：\n  * 如果该字母被标记过，则该字母为没有被字母 `X` 包围的字母 `O`，我们将其还原为字母 `O`；\n  * 如果该字母没有被标记过，则该字母为被字母 `X` 包围的字母 `O`，我们将其修改为字母 `X`。\n\n#### 方法一：深度优先搜索\n\n**思路及解法**\n\n我们可以使用深度优先搜索实现标记操作。在下面的代码中，我们把标记过的字母 `O` 修改为字母 `A`。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int n, m;\n\n    void dfs(vector<vector<char>>& board, int x, int y) {\n        if (x < 0 || x >= n || y < 0 || y >= m || board[x][y] != 'O') {\n            return;\n        }\n        board[x][y] = 'A';\n        dfs(board, x + 1, y);\n        dfs(board, x - 1, y);\n        dfs(board, x, y + 1);\n        dfs(board, x, y - 1);\n    }\n\n    void solve(vector<vector<char>>& board) {\n        n = board.size();\n        if (n == 0) {\n            return;\n        }\n        m = board[0].size();\n        for (int i = 0; i < n; i++) {\n            dfs(board, i, 0);\n            dfs(board, i, m - 1);\n        }\n        for (int i = 1; i < m - 1; i++) {\n            dfs(board, 0, i);\n            dfs(board, n - 1, i);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (board[i][j] == 'A') {\n                    board[i][j] = 'O';\n                } else if (board[i][j] == 'O') {\n                    board[i][j] = 'X';\n                }\n            }\n        }\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int n, m;\n\n    public void solve(char[][] board) {\n        n = board.length;\n        if (n == 0) {\n            return;\n        }\n        m = board[0].length;\n        for (int i = 0; i < n; i++) {\n            dfs(board, i, 0);\n            dfs(board, i, m - 1);\n        }\n        for (int i = 1; i < m - 1; i++) {\n            dfs(board, 0, i);\n            dfs(board, n - 1, i);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (board[i][j] == 'A') {\n                    board[i][j] = 'O';\n                } else if (board[i][j] == 'O') {\n                    board[i][j] = 'X';\n                }\n            }\n        }\n    }\n\n    public void dfs(char[][] board, int x, int y) {\n        if (x < 0 || x >= n || y < 0 || y >= m || board[x][y] != 'O') {\n            return;\n        }\n        board[x][y] = 'A';\n        dfs(board, x + 1, y);\n        dfs(board, x - 1, y);\n        dfs(board, x, y + 1);\n        dfs(board, x, y - 1);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        if not board:\n            return\n        \n        n, m = len(board), len(board[0])\n\n        def dfs(x, y):\n            if not 0 <= x < n or not 0 <= y < m or board[x][y] != 'O':\n                return\n            \n            board[x][y] = \"A\"\n            dfs(x + 1, y)\n            dfs(x - 1, y)\n            dfs(x, y + 1)\n            dfs(x, y - 1)\n        \n        for i in range(n):\n            dfs(i, 0)\n            dfs(i, m - 1)\n        \n        for i in range(m - 1):\n            dfs(0, i)\n            dfs(n - 1, i)\n        \n        for i in range(n):\n            for j in range(m):\n                if board[i][j] == \"A\":\n                    board[i][j] = \"O\"\n                elif board[i][j] == \"O\":\n                    board[i][j] = \"X\"\n```\n\n```golang [sol1-Golang]\nvar n, m int\n\nfunc solve(board [][]byte)  {\n    if len(board) == 0 || len(board[0]) == 0 {\n        return\n    }\n    n, m = len(board), len(board[0])\n    for i := 0; i < n; i++ {\n        dfs(board, i, 0)\n        dfs(board, i, m - 1)\n    }\n    for i := 1; i < m - 1; i++ {\n        dfs(board, 0, i)\n        dfs(board, n - 1, i)\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            if board[i][j] == 'A' {\n                board[i][j] = 'O'\n            } else if board[i][j] == 'O' {\n                board[i][j] = 'X'\n            }\n        }\n    }\n}\n\nfunc dfs(board [][]byte, x, y int) {\n    if x < 0 || x >= n || y < 0 || y >= m || board[x][y] != 'O' {\n        return\n    }\n    board[x][y] = 'A'\n    dfs(board, x + 1, y)\n    dfs(board, x - 1, y)\n    dfs(board, x, y + 1)\n    dfs(board, x, y - 1)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times m)$，其中 $n$ 和 $m$ 分别为矩阵的行数和列数。深度优先搜索过程中，每一个点至多只会被标记一次。\n\n- 空间复杂度：$O(n \\times m)$，其中 $n$ 和 $m$ 分别为矩阵的行数和列数。主要为深度优先搜索的栈的开销。\n\n#### 方法二：广度优先搜索\n\n**思路及解法**\n\n我们可以使用广度优先搜索实现标记操作。在下面的代码中，我们把标记过的字母 `O` 修改为字母 `A`。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    const int dx[4] = {1, -1, 0, 0};\n    const int dy[4] = {0, 0, 1, -1};\n\n    void solve(vector<vector<char>>& board) {\n        int n = board.size();\n        if (n == 0) {\n            return;\n        }\n        int m = board[0].size();\n        queue<pair<int, int>> que;\n        for (int i = 0; i < n; i++) {\n            if (board[i][0] == 'O') {\n                que.emplace(i, 0);\n                board[i][0] = 'A';\n            }\n            if (board[i][m - 1] == 'O') {\n                que.emplace(i, m - 1);\n                board[i][m - 1] = 'A';\n            }\n        }\n        for (int i = 1; i < m - 1; i++) {\n            if (board[0][i] == 'O') {\n                que.emplace(0, i);\n                board[0][i] = 'A';\n            }\n            if (board[n - 1][i] == 'O') {\n                que.emplace(n - 1, i);\n                board[n - 1][i] = 'A';\n            }\n        }\n        while (!que.empty()) {\n            int x = que.front().first, y = que.front().second;\n            que.pop();\n            for (int i = 0; i < 4; i++) {\n                int mx = x + dx[i], my = y + dy[i];\n                if (mx < 0 || my < 0 || mx >= n || my >= m || board[mx][my] != 'O') {\n                    continue;\n                }\n                que.emplace(mx, my);\n                board[mx][my] = 'A';\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (board[i][j] == 'A') {\n                    board[i][j] = 'O';\n                } else if (board[i][j] == 'O') {\n                    board[i][j] = 'X';\n                }\n            }\n        }\n    }\n};\n\n```\n\n```Java [sol2-Java]\nclass Solution {\n    int[] dx = {1, -1, 0, 0};\n    int[] dy = {0, 0, 1, -1};\n\n    public void solve(char[][] board) {\n        int n = board.length;\n        if (n == 0) {\n            return;\n        }\n        int m = board[0].length;\n        Queue<int[]> queue = new LinkedList<int[]>();\n        for (int i = 0; i < n; i++) {\n            if (board[i][0] == 'O') {\n                queue.offer(new int[]{i, 0});\n                board[i][0] = 'A';\n            }\n            if (board[i][m - 1] == 'O') {\n                queue.offer(new int[]{i, m - 1});\n                board[i][m - 1] = 'A';\n            }\n        }\n        for (int i = 1; i < m - 1; i++) {\n            if (board[0][i] == 'O') {\n                queue.offer(new int[]{0, i});\n                board[0][i] = 'A';\n            }\n            if (board[n - 1][i] == 'O') {\n                queue.offer(new int[]{n - 1, i});\n                board[n - 1][i] = 'A';\n            }\n        }\n        while (!queue.isEmpty()) {\n            int[] cell = queue.poll();\n            int x = cell[0], y = cell[1];\n            for (int i = 0; i < 4; i++) {\n                int mx = x + dx[i], my = y + dy[i];\n                if (mx < 0 || my < 0 || mx >= n || my >= m || board[mx][my] != 'O') {\n                    continue;\n                }\n                queue.offer(new int[]{mx, my});\n                board[mx][my] = 'A';\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (board[i][j] == 'A') {\n                    board[i][j] = 'O';\n                } else if (board[i][j] == 'O') {\n                    board[i][j] = 'X';\n                }\n            }\n        }\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        if not board:\n            return\n        \n        n, m = len(board), len(board[0])\n        que = collections.deque()\n        for i in range(n):\n            if board[i][0] == \"O\":\n                que.append((i, 0))\n                board[i][0] = \"A\"\n            if board[i][m - 1] == \"O\":\n                que.append((i, m - 1))\n                board[i][m - 1] = \"A\"\n        for i in range(m - 1):\n            if board[0][i] == \"O\":\n                que.append((0, i))\n                board[0][i] = \"A\"\n            if board[n - 1][i] == \"O\":\n                que.append((n - 1, i))\n                board[n - 1][i] = \"A\"\n        \n        while que:\n            x, y = que.popleft()\n            for mx, my in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]:\n                if 0 <= mx < n and 0 <= my < m and board[mx][my] == \"O\":\n                    que.append((mx, my))\n                    board[mx][my] = \"A\"\n        \n        for i in range(n):\n            for j in range(m):\n                if board[i][j] == \"A\":\n                    board[i][j] = \"O\"\n                elif board[i][j] == \"O\":\n                    board[i][j] = \"X\"\n```\n\n```C [sol2-C]\nconst int dx[4] = {1, -1, 0, 0};\nconst int dy[4] = {0, 0, 1, -1};\n\nvoid solve(char** board, int boardSize, int* boardColSize) {\n    int n = boardSize;\n    if (n == 0) {\n        return;\n    }\n    int m = boardColSize[0];\n\n    int** que = (int**)malloc(sizeof(int*) * n * m);\n    for (int i = 0; i < n * m; i++) {\n        que[i] = (int*)malloc(sizeof(int) * 2);\n    }\n    int l = 0, r = 0;\n    for (int i = 0; i < n; i++) {\n        if (board[i][0] == 'O') {\n            board[i][0] = 'A';\n            que[r][0] = i, que[r++][1] = 0;\n        }\n        if (board[i][m - 1] == 'O') {\n            board[i][m - 1] = 'A';\n            que[r][0] = i, que[r++][1] = m - 1;\n        }\n    }\n    for (int i = 1; i < m - 1; i++) {\n        if (board[0][i] == 'O') {\n            board[0][i] = 'A';\n            que[r][0] = 0, que[r++][1] = i;\n        }\n        if (board[n - 1][i] == 'O') {\n            board[n - 1][i] = 'A';\n            que[r][0] = n - 1, que[r++][1] = i;\n        }\n    }\n    while (l < r) {\n        int x = que[l][0], y = que[l][1];\n        l++;\n        for (int i = 0; i < 4; i++) {\n            int mx = x + dx[i], my = y + dy[i];\n            if (mx < 0 || my < 0 || mx >= n || my >= m || board[mx][my] != 'O') {\n                continue;\n            }\n            board[mx][my] = 'A';\n            que[r][0] = mx, que[r++][1] = my;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (board[i][j] == 'A') {\n                board[i][j] = 'O';\n            } else if (board[i][j] == 'O') {\n                board[i][j] = 'X';\n            }\n        }\n    }\n    for (int i = 0; i < n * m; i++) {\n        free(que[i]);\n    }\n    free(que);\n}\n```\n\n```golang [sol2-Golang]\nvar (\n    dx = [4]int{1, -1, 0, 0}\n    dy = [4]int{0, 0, 1, -1}\n)\nfunc solve(board [][]byte)  {\n    if len(board) == 0 || len(board[0]) == 0 {\n        return\n    }\n    n, m := len(board), len(board[0])\n    queue := [][]int{}\n    for i := 0; i < n; i++ {\n        if board[i][0] == 'O' {\n            queue = append(queue, []int{i, 0})\n            board[i][0] = 'A'\n        }\n        if board[i][m-1] == 'O' {\n            queue = append(queue, []int{i, m - 1})\n            board[i][m - 1] = 'A'\n        }\n    }\n    for i := 1; i < m - 1; i++ {\n        if board[0][i] == 'O' {\n            queue = append(queue, []int{0, i})\n            board[0][i] = 'A'\n        }\n        if board[n-1][i] == 'O' {\n            queue = append(queue, []int{n - 1, i})\n            board[n - 1][i] = 'A'\n        }\n    }\n    for len(queue) > 0 {\n        cell := queue[0]\n        queue = queue[1:]\n        x, y := cell[0], cell[1]\n        for i := 0; i < 4; i++ {\n            mx, my := x + dx[i], y + dy[i]\n            if mx < 0 || my < 0 || mx >= n || my >= m || board[mx][my] != 'O' {\n                continue\n            }\n            queue = append(queue, []int{mx, my})\n            board[mx][my] = 'A'\n        }\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            if board[i][j] == 'A' {\n                board[i][j] = 'O'\n            } else if board[i][j] == 'O' {\n                board[i][j] = 'X'\n            }\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times m)$，其中 $n$ 和 $m$ 分别为矩阵的行数和列数。广度优先搜索过程中，每一个点至多只会被标记一次。\n\n- 空间复杂度：$O(n \\times m)$，其中 $n$ 和 $m$ 分别为矩阵的行数和列数。主要为广度优先搜索的队列的开销。"
}