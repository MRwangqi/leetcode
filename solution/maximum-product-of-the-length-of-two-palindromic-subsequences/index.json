{
	"titleSlug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
	"slug": "by-wanglongjiang-plba",
	"url": "https://leetcode-cn.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences/solution/by-wanglongjiang-plba/",
	"content": "### 解题思路\n思路：枚举 位运算\n字符串最大长度为12，可以枚举1..2^12的数字，每一位代表该索引的字符被选中，枚举到一个数字后，检查数字映射的字符串是否为回文串。\n如果是回文串，将其数字加入数组。\n最后遍历所有的回文串，将与其不相交的回文串长度相乘，找出最大乘积。\n\n时间复杂度：O(2^2n)\n空间复杂度：O(2^n)\n\n### 代码\n\n```python3\nclass Solution:\n    def maxProduct(self, s: str) -> int:\n        n = len(s)\n        palins = []  # 哈希表，保存所有的回文数字\n        for num in range(1, 2**n):\n            arr = []\n            for j in range(n):\n                if num & (1 << j):\n                    arr.append(s[j])\n            # 检查数字映射的序列是否为回文序列，如果是，将其加入数组\n            isPalin = True\n            for j in range(len(arr) // 2):\n                if arr[j] != arr[-j - 1]:\n                    isPalin = False\n                    break\n            if isPalin:\n                palins.append(num)\n        # 下面开始找到长度乘积最大的不相交回文串\n        ans = 0\n        for i in range(len(palins)):\n            for j in range(i + 1, len(palins)):\n                if palins[i] & palins[j] == 0:\n                    ans = max(ans, palins[i].bit_count() * palins[j].bit_count())\n        return ans\n```"
}