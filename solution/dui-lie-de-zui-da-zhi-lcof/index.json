{
	"titleSlug": "dui-lie-de-zui-da-zhi-lcof",
	"slug": "mian-shi-ti-59-ii-dui-lie-de-zui-da-zhi-by-leetcod",
	"url": "https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/solution/mian-shi-ti-59-ii-dui-lie-de-zui-da-zhi-by-leetcod/",
	"content": "### 📺 视频题解  \n![...- II. 队列的最大值(1).mp4](38597adb-b2c9-4c7c-86be-7a1dbfea42fd)\n\n### 📖 文字题解\n#### 方法一：暴力\n**思路**\n\n直接实现一个普通的队列，查询最大值时遍历计算。\n\n```python [-Python 3]\nimport queue\nclass MaxQueue:\n\n    def __init__(self):\n        self.deque = queue.deque()\n\n    def max_value(self) -> int:\n        return max(self.deque) if self.deque else -1\n\n    def push_back(self, value: int) -> None:\n        self.deque.append(value)\n\n    def pop_front(self) -> int:\n        return self.deque.popleft() if self.deque else -1\n```\n```cpp [-C++]\nclass MaxQueue {\n    int q[20000];\n    int begin = 0, end = 0;\npublic:\n    MaxQueue() {\n    }\n    \n    int max_value() {\n        int ans = -1;\n        for (int i = begin; i != end; ++i)\n            ans = max(ans, q[i]);\n        return ans;\n    }\n    \n    void push_back(int value) {\n        q[end++] = value;\n    }\n    \n    int pop_front() {\n        if (begin == end)\n            return -1;\n        return q[begin++];\n    }\n};\n```\n```Java [-Java]\nclass MaxQueue {\n    int[] q = new int[20000];\n    int begin = 0, end = 0;\n\n    public MaxQueue() {\n\n    }\n    \n    public int max_value() {\n        int ans = -1;\n        for (int i = begin; i != end; ++i) {\n            ans = Math.max(ans, q[i]);\n        }\n        return ans;\n    }\n    \n    public void push_back(int value) {\n        q[end++] = value;\n    }\n    \n    public int pop_front() {\n        if (begin == end) {\n            return -1;\n        }\n        return q[begin++];\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(1)$（插入，删除），$O(n)$（求最大值）。\n  插入与删除只需要普通的队列操作，为 $O(1)$，求最大值需要遍历当前的整个队列，最坏情况下为 $O(n)$。\n* 空间复杂度：$O(n)$，需要用队列存储所有插入的元素。\n\n#### 方法二：维护一个单调的双端队列\n**思路**\n\n本算法基于问题的一个重要性质：当一个元素进入队列的时候，它前面所有比它小的元素就不会再对答案产生影响。\n\n举个例子，如果我们向队列中插入数字序列 `1 1 1 1 2`，那么在第一个数字 2 被插入后，数字 2 前面的所有数字 1 将不会对结果产生影响。因为按照队列的取出顺序，数字 2 只能在所有的数字 1 被取出之后才能被取出，因此如果数字 1 如果在队列中，那么数字 2 必然也在队列中，使得数字 1 对结果没有影响。\n\n按照上面的思路，我们可以设计这样的方法：从队列尾部插入元素时，我们可以提前取出队列中所有比这个元素小的元素，使得队列中只保留对结果有影响的数字。这样的方法等价于要求维持队列单调递减，即要保证每个元素的前面都没有比它小的元素。\n\n那么如何高效实现一个始终递减的队列呢？我们只需要在插入每一个元素 `value` 时，从队列尾部依次取出比当前元素 `value` 小的元素，直到遇到一个比当前元素大的元素 `value'` 即可。\n\n  - 上面的过程保证了只要在元素 `value` 被插入之前队列递减，那么在 `value` 被插入之后队列依然递减。\n  - 而队列的初始状态（空队列）符合单调递减的定义。\n  - 由数学归纳法可知队列将会始终保持单调递减。\n\n上面的过程需要从队列尾部取出元素，因此需要使用双端队列来实现。另外我们也需要一个辅助队列来记录所有被插入的值，以确定 `pop_front` 函数的返回值。\n\n保证了队列单调递减后，求最大值时只需要直接取双端队列中的第一项即可。\n\n```python [-Python 3]\nimport queue\nclass MaxQueue:\n\n    def __init__(self):\n        self.deque = queue.deque()\n        self.queue = queue.Queue()\n\n    def max_value(self) -> int:\n        return self.deque[0] if self.deque else -1\n\n\n    def push_back(self, value: int) -> None:\n        while self.deque and self.deque[-1] < value:\n            self.deque.pop()\n        self.deque.append(value)\n        self.queue.put(value)\n\n    def pop_front(self) -> int:\n        if not self.deque:\n            return -1\n        ans = self.queue.get()\n        if ans == self.deque[0]:\n            self.deque.popleft()\n        return ans\n```\n```cpp [-C++]\nclass MaxQueue {\n    queue<int> q;\n    deque<int> d;\npublic:\n    MaxQueue() {\n    }\n    \n    int max_value() {\n        if (d.empty())\n            return -1;\n        return d.front();\n    }\n    \n    void push_back(int value) {\n        while (!d.empty() && d.back() < value) {\n            d.pop_back();\n        }\n        d.push_back(value);\n        q.push(value);\n    }\n    \n    int pop_front() {\n        if (q.empty())\n            return -1;\n        int ans = q.front();\n        if (ans == d.front()) {\n            d.pop_front();\n        }\n        q.pop();\n        return ans;\n    }\n};\n```\n```Java [-Java]\nclass MaxQueue {\n    Queue<Integer> q;\n    Deque<Integer> d;\n\n    public MaxQueue() {\n        q = new LinkedList<Integer>();\n        d = new LinkedList<Integer>();\n    }\n    \n    public int max_value() {\n        if (d.isEmpty()) {\n            return -1;\n        }\n        return d.peekFirst();\n    }\n    \n    public void push_back(int value) {\n        while (!d.isEmpty() && d.peekLast() < value) {\n            d.pollLast();\n        }\n        d.offerLast(value);\n        q.offer(value);\n    }\n    \n    public int pop_front() {\n        if (q.isEmpty()) {\n            return -1;\n        }\n        int ans = q.poll();\n        if (ans == d.peekFirst()) {\n            d.pollFirst();\n        }\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(1)$（插入，删除，求最大值）\n  删除操作于求最大值操作显然只需要 $O(1)$ 的时间。\n  而插入操作虽然看起来有循环，做一个插入操作时最多可能会有 $n$ 次出队操作。但要注意，由于每个数字只会出队一次，因此对于所有的 $n$ 个数字的插入过程，对应的所有出队操作也不会大于 $n$ 次。因此将出队的时间均摊到每个插入操作上，时间复杂度为 $O(1)$。\n* 空间复杂度：$O(n)$，需要用队列存储所有插入的元素。"
}