{
	"titleSlug": "rotate-array",
	"slug": "xuan-zhuan-shu-zu-by-leetcode-solution-nipk",
	"url": "https://leetcode-cn.com/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/",
	"content": "#### 方法一：使用额外的数组\n\n我们可以使用额外的数组来将每个元素放至正确的位置。用 $n$ 表示数组的长度，我们遍历原数组，将原数组下标为 $i$ 的元素放至新数组下标为 $(i+k)\\bmod n$ 的位置，最后将新数组拷贝至原数组即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> newArr(n);\n        for (int i = 0; i < n; ++i) {\n            newArr[(i + k) % n] = nums[i];\n        }\n        nums.assign(newArr.begin(), newArr.end());\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public void rotate(int[] nums, int k) {\n        int n = nums.length;\n        int[] newArr = new int[n];\n        for (int i = 0; i < n; ++i) {\n            newArr[(i + k) % n] = nums[i];\n        }\n        System.arraycopy(newArr, 0, nums, 0, n);\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar rotate = function(nums, k) {\n    const n = nums.length;\n    const newArr = new Array(n);\n    for (let i = 0; i < n; ++i) {\n        newArr[(i + k) % n] = nums[i];\n    }\n    for (let i = 0; i < n; ++i) {\n        nums[i] = newArr[i];\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc rotate(nums []int, k int) {\n    newNums := make([]int, len(nums))\n    for i, v := range nums {\n        newNums[(i+k)%len(nums)] = v\n    }\n    copy(nums, newNums)\n}\n```\n\n```C [sol1-C]\nvoid rotate(int* nums, int numsSize, int k) {\n    int newArr[numsSize];\n    for (int i = 0; i < numsSize; ++i) {\n        newArr[(i + k) % numsSize] = nums[i];\n    }\n    for (int i = 0; i < numsSize; ++i) {\n        nums[i] = newArr[i];\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(n)$，其中 $n$ 为数组的长度。\n\n* 空间复杂度： $O(n)$。\n\n#### 方法二：环状替换\n\n方法一中使用额外数组的原因在于如果我们直接将每个数字放至它最后的位置，这样被放置位置的元素会被覆盖从而丢失。因此，从另一个角度，我们可以将被替换的元素保存在变量 $\\textit{temp}$ 中，从而避免了额外数组的开销。\n\n我们从位置 $0$ 开始，最初令 $\\textit{temp}=\\textit{nums}[0]$。根据规则，位置 $0$ 的元素会放至 $(0+k)\\bmod n$ 的位置，令 $x=(0+k)\\bmod n$，此时交换 $\\textit{temp}$ 和 $\\textit{nums}[x]$，完成位置 $x$ 的更新。然后，我们考察位置 $x$，并交换  $\\textit{temp}$ 和 $\\textit{nums}[(x+k)\\bmod n]$，从而完成下一个位置的更新。不断进行上述过程，直至回到初始位置 $0$。\n\n容易发现，当回到初始位置 $0$ 时，有些数字可能还没有遍历到，此时我们应该从下一个数字开始重复的过程，可是这个时候怎么才算遍历结束呢？我们不妨先考虑这样一个问题：从 $0$ 开始不断遍历，最终回到起点 $0$ 的过程中，我们遍历了多少个元素？\n\n由于最终回到了起点，故该过程恰好走了整数数量的圈，不妨设为 $a$ 圈；再设该过程总共遍历了 $b$ 个元素。因此，我们有 $an=bk$，即 $an$ 一定为 $n,k$ 的公倍数。又因为我们在第一次回到起点时就结束，因此 $a$ 要尽可能小，故 $an$ 就是 $n,k$ 的最小公倍数 $\\text{lcm}(n,k)$，因此 $b$ 就为 $\\text{lcm}(n,k)/k$。\n\n这说明单次遍历会访问到 $\\text{lcm}(n,k)/k$ 个元素。为了访问到所有的元素，我们需要进行遍历的次数为\n\n$$\n\\frac{n}{\\text{lcm}(n,k)/k}=\\frac{nk}{\\text{lcm}(n,k)}=\\text{gcd}(n,k)\n$$\n\n其中 $\\text{gcd}$ 指的是最大公约数。\n\n我们用下面的例子更具体地说明这个过程：\n ```\nnums = [1, 2, 3, 4, 5, 6]\nk = 2\n ```\n\n![image.png](https://pic.leetcode-cn.com/f0493a97cdb7bc46b37306ca14e555451496f9f9c21effcad8517a81a26f30d6-image.png)\n\n如果读者对上面的数学推导的理解有一定困难，也可以使用另外一种方式完成代码：使用单独的变量 $\\textit{count}$ 跟踪当前已经访问的元素数量，当 $\\textit{count}=n$ 时，结束遍历过程。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n = nums.size();\n        k = k % n;\n        int count = gcd(k, n);\n        for (int start = 0; start < count; ++start) {\n            int current = start;\n            int prev = nums[start];\n            do {\n                int next = (current + k) % n;\n                swap(nums[next], prev);\n                current = next;\n            } while (start != current);\n        }\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public void rotate(int[] nums, int k) {\n        int n = nums.length;\n        k = k % n;\n        int count = gcd(k, n);\n        for (int start = 0; start < count; ++start) {\n            int current = start;\n            int prev = nums[start];\n            do {\n                int next = (current + k) % n;\n                int temp = nums[next];\n                nums[next] = prev;\n                prev = temp;\n                current = next;\n            } while (start != current);\n        }\n    }\n\n    public int gcd(int x, int y) {\n        return y > 0 ? gcd(y, x % y) : x;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nconst gcd = (x, y) => y ? gcd(y, x % y) : x;\n\nvar rotate = function(nums, k) {\n    const n = nums.length;\n    k = k % n;\n    let count = gcd(k, n);\n    for (let start = 0; start < count; ++start) {\n        let current = start;\n        let prev = nums[start];\n        do {\n            const next = (current + k) % n;\n            const temp = nums[next];\n            nums[next] = prev;\n            prev = temp;\n            current = next;\n        } while (start !== current);\n    }\n};\n```\n\n```go [sol2-Golang]\nfunc rotate(nums []int, k int) {\n    n := len(nums)\n    k %= n\n    for start, count := 0, gcd(k, n); start < count; start++ {\n        pre, cur := nums[start], start\n        for ok := true; ok; ok = cur != start {\n            next := (cur + k) % n\n            nums[next], pre, cur = pre, nums[next], next\n        }\n    }\n}\n\nfunc gcd(a, b int) int {\n    for a != 0 {\n        a, b = b%a, a\n    }\n    return b\n}\n```\n\n```C [sol2-C]\nint gcd(int a, int b) {\n    return b ? gcd(b, a % b) : a;\n}\n\nvoid swap(int* a, int* b) {\n    int t = *a;\n    *a = *b, *b = t;\n}\n\nvoid rotate(int* nums, int numsSize, int k) {\n    k = k % numsSize;\n    int count = gcd(k, numsSize);\n    for (int start = 0; start < count; ++start) {\n        int current = start;\n        int prev = nums[start];\n        do {\n            int next = (current + k) % numsSize;\n            swap(&nums[next], &prev);\n            current = next;\n        } while (start != current);\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。每个元素只会被遍历一次。\n\n* 空间复杂度：$O(1)$。我们只需常数空间存放若干变量。\n\n#### 方法三：数组翻转\n\n该方法基于如下的事实：当我们将数组的元素向右移动 $k$ 次后，尾部 $k\\bmod n$ 个元素会移动至数组头部，其余元素向后移动 $k\\bmod n$ 个位置。\n\n该方法为数组的翻转：我们可以先将所有元素翻转，这样尾部的 $k\\bmod n$ 个元素就被移至数组头部，然后我们再翻转 $[0, k\\bmod n-1]$ 区间的元素和 $[k\\bmod n, n-1]$ 区间的元素即能得到最后的答案。\n\n我们以 $n=7$，$k=3$ 为例进行如下展示：\n\n| 操作                                | 结果            |\n| ----------------------------------- | --------------- |\n| 原始数组                            | $1~2~3~4~5~6~7$ |\n| 翻转所有元素                        | $7~6~5~4~3~2~1$ |\n| 翻转 $[0, k\\bmod n - 1]$ 区间的元素 | $5~6~7~4~3~2~1$ |\n| 翻转 $[k\\bmod n, n - 1]$ 区间的元素 | $5~6~7~1~2~3~4$ |\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    void reverse(vector<int>& nums, int start, int end) {\n        while (start < end) {\n            swap(nums[start], nums[end]);\n            start += 1;\n            end -= 1;\n        }\n    }\n\n    void rotate(vector<int>& nums, int k) {\n        k %= nums.size();\n        reverse(nums, 0, nums.size() - 1);\n        reverse(nums, 0, k - 1);\n        reverse(nums, k, nums.size() - 1);\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public void rotate(int[] nums, int k) {\n        k %= nums.length;\n        reverse(nums, 0, nums.length - 1);\n        reverse(nums, 0, k - 1);\n        reverse(nums, k, nums.length - 1);\n    }\n\n    public void reverse(int[] nums, int start, int end) {\n        while (start < end) {\n            int temp = nums[start];\n            nums[start] = nums[end];\n            nums[end] = temp;\n            start += 1;\n            end -= 1;\n        }\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nconst reverse = (nums, start, end) => {\n    while (start < end) {\n        const temp = nums[start];\n        nums[start] = nums[end];\n        nums[end] = temp;\n        start += 1;\n        end -= 1;\n    }\n}\n\nvar rotate = function(nums, k) {\n    k %= nums.length;\n    reverse(nums, 0, nums.length - 1);\n    reverse(nums, 0, k - 1);\n    reverse(nums, k, nums.length - 1);\n};\n```\n\n```go [sol3-Golang]\nfunc reverse(a []int) {\n    for i, n := 0, len(a); i < n/2; i++ {\n        a[i], a[n-1-i] = a[n-1-i], a[i]\n    }\n}\n\nfunc rotate(nums []int, k int) {\n    k %= len(nums)\n    reverse(nums)\n    reverse(nums[:k])\n    reverse(nums[k:])\n}\n```\n\n```C [sol3-C]\nvoid swap(int* a, int* b) {\n    int t = *a;\n    *a = *b, *b = t;\n}\n\nvoid reverse(int* nums, int start, int end) {\n    while (start < end) {\n        swap(&nums[start], &nums[end]);\n        start += 1;\n        end -= 1;\n    }\n}\n\nvoid rotate(int* nums, int numsSize, int k) {\n    k %= numsSize;\n    reverse(nums, 0, numsSize - 1);\n    reverse(nums, 0, k - 1);\n    reverse(nums, k, numsSize - 1);\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。每个元素被翻转两次，一共 $n$ 个元素，因此总时间复杂度为 $O(2n)=O(n)$。\n\n* 空间复杂度：$O(1)$。"
}