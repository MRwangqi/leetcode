{
	"titleSlug": "8Zf90G",
	"slug": "hou-zhui-biao-da-shi-by-leetcode-solutio-39j5",
	"url": "https://leetcode-cn.com/problems/8Zf90G/solution/hou-zhui-biao-da-shi-by-leetcode-solutio-39j5/",
	"content": "#### 前言\n\n后缀表达式由波兰的逻辑学家卢卡西维兹提出，也称逆波兰表达式。后缀表达式的特点是：没有括号，运算符总是放在和它相关的操作数之后。\n\n#### 方法一：栈\n\n后缀表达式严格遵循「从左到右」的运算。计算后缀表达式的值时，使用一个栈存储操作数，从左到右遍历后缀表达式，进行如下操作：\n\n- 如果遇到操作数，则将操作数入栈；\n\n- 如果遇到运算符，则将两个操作数出栈，其中先出栈的是右操作数，后出栈的是左操作数，使用运算符对两个操作数进行运算，将运算得到的新操作数入栈。\n\n整个后缀表达式遍历完毕之后，栈内只有一个元素，该元素即为后缀表达式的值。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p14.png),![ppt15](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/p15.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public int evalRPN(String[] tokens) {\n        Deque<Integer> stack = new LinkedList<Integer>();\n        int n = tokens.length;\n        for (int i = 0; i < n; i++) {\n            String token = tokens[i];\n            if (isNumber(token)) {\n                stack.push(Integer.parseInt(token));\n            } else {\n                int num2 = stack.pop();\n                int num1 = stack.pop();\n                switch (token) {\n                    case \"+\":\n                        stack.push(num1 + num2);\n                        break;\n                    case \"-\":\n                        stack.push(num1 - num2);\n                        break;\n                    case \"*\":\n                        stack.push(num1 * num2);\n                        break;\n                    case \"/\":\n                        stack.push(num1 / num2);\n                        break;\n                    default:\n                }\n            }\n        }\n        return stack.pop();\n    }\n\n    public boolean isNumber(String token) {\n        return !(\"+\".equals(token) || \"-\".equals(token) || \"*\".equals(token) || \"/\".equals(token));\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar evalRPN = function(tokens) {\n    const stack = [];\n    const n = tokens.length;\n    for (let i = 0; i < n; i++) {\n        const token = tokens[i];\n        if (isNumber(token)) {\n            stack.push(parseInt(token));\n        } else {\n            const num2 = stack.pop();\n            const num1 = stack.pop();\n            if (token === '+') {\n                stack.push(num1 + num2);\n            } else if (token === '-') {\n                stack.push(num1 - num2);\n            } else if (token === '*') {\n                stack.push(num1 * num2);\n            } else if (token === '/') {\n                stack.push(num1 / num2 > 0 ? Math.floor(num1 / num2) : Math.ceil(num1 / num2));\n            }\n        }\n    }\n    return stack.pop();\n};\n\nconst isNumber = (token) => {\n    return !('+' === token || '-' === token || '*' === token || '/' === token );\n}\n```\n\n```go [sol1-Golang]\nfunc evalRPN(tokens []string) int {\n    stack := []int{}\n    for _, token := range tokens {\n        val, err := strconv.Atoi(token)\n        if err == nil {\n            stack = append(stack, val)\n        } else {\n            num1, num2 := stack[len(stack)-2], stack[len(stack)-1]\n            stack = stack[:len(stack)-2]\n            switch token {\n            case \"+\":\n                stack = append(stack, num1+num2)\n            case \"-\":\n                stack = append(stack, num1-num2)\n            case \"*\":\n                stack = append(stack, num1*num2)\n            default:\n                stack = append(stack, num1/num2)\n            }\n        }\n    }\n    return stack[0]\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        op_to_binary_fn = {\n            \"+\": add,\n            \"-\": sub,\n            \"*\": mul,\n            \"/\": lambda x, y: int(x / y),   # 需要注意 python 中负数除法的表现与题目不一致\n        }\n\n        stack = list()\n        for token in tokens:\n            try:\n                num = int(token)\n            except ValueError:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                num = op_to_binary_fn[token](num1, num2)\n            finally:\n                stack.append(num)\n            \n        return stack[0]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        stack<int> stk;\n        int n = tokens.size();\n        for (int i = 0; i < n; i++) {\n            string& token = tokens[i];\n            if (isNumber(token)) {\n                stk.push(atoi(token.c_str()));\n            } else {\n                int num2 = stk.top();\n                stk.pop();\n                int num1 = stk.top();\n                stk.pop();\n                switch (token[0]) {\n                    case '+':\n                        stk.push(num1 + num2);\n                        break;\n                    case '-':\n                        stk.push(num1 - num2);\n                        break;\n                    case '*':\n                        stk.push(num1 * num2);\n                        break;\n                    case '/':\n                        stk.push(num1 / num2);\n                        break;\n                }\n            }\n        }\n        return stk.top();\n    }\n\n    bool isNumber(string& token) {\n        return !(token == \"+\" || token == \"-\" || token == \"*\" || token == \"/\");\n    }\n};\n```\n\n```C [sol1-C]\nbool isNumber(char* token) {\n    return strlen(token) > 1 || ('0' <= token[0] && token[0] <= '9');\n}\n\nint evalRPN(char** tokens, int tokensSize) {\n    int n = tokensSize;\n    int stk[n], top = 0;\n    for (int i = 0; i < n; i++) {\n        char* token = tokens[i];\n        if (isNumber(token)) {\n            stk[top++] = atoi(token);\n        } else {\n            int num2 = stk[--top];\n            int num1 = stk[--top];\n            switch (token[0]) {\n                case '+':\n                    stk[top++] = num1 + num2;\n                    break;\n                case '-':\n                    stk[top++] = num1 - num2;\n                    break;\n                case '*':\n                    stk[top++] = num1 * num2;\n                    break;\n                case '/':\n                    stk[top++] = num1 / num2;\n                    break;\n            }\n        }\n    }\n    return stk[top - 1];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{tokens}$ 的长度。需要遍历数组 $\\textit{tokens}$ 一次，计算后缀表达式的值。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{tokens}$ 的长度。使用栈存储计算过程中的数，栈内元素个数不会超过后缀表达式的长度。\n\n#### 方法二：数组模拟栈\n\n方法一使用栈存储操作数。也可以使用一个数组模拟栈操作。\n\n如果使用数组代替栈，则需要预先定义数组的长度。对于长度为 $n$ 的后缀表达式，显然栈内元素个数不会超过 $n$，但是将数组的长度定义为 $n$ 仍然超过了栈内元素个数的上界。那么，栈内元素最多可能有多少个？\n\n对于一个有效的后缀表达式，其长度 $n$ 一定是奇数，且操作数的个数一定比运算符的个数多 $1$ 个，即包含 $\\frac{n+1}{2}$ 个操作数和 $\\frac{n-1}{2}$ 个运算符。考虑遇到操作数和运算符时，栈内元素个数分别会如何变化：\n\n- 如果遇到操作数，则将操作数入栈，因此栈内元素增加 $1$ 个；\n\n- 如果遇到运算符，则将两个操作数出栈，然后将一个新操作数入栈，因此栈内元素先减少 $2$ 个再增加 $1$ 个，结果是栈内元素减少 $1$ 个。\n\n由此可以得到操作数和运算符与栈内元素个数变化的关系：遇到操作数时，栈内元素增加 $1$ 个；遇到运算符时，栈内元素减少 $1$ 个。\n\n最坏情况下，$\\frac{n+1}{2}$ 个操作数都在表达式的前面，$\\frac{n-1}{2}$ 个运算符都在表达式的后面，此时栈内元素最多为 $\\frac{n+1}{2}$ 个。在其余情况下，栈内元素总是少于 $\\frac{n+1}{2}$ 个。因此，在任何情况下，栈内元素最多可能有 $\\frac{n+1}{2}$ 个，将数组的长度定义为 $\\frac{n+1}{2}$ 即可。\n\n具体实现方面，创建数组 $\\textit{stack}$ 模拟栈，数组下标 $0$ 的位置对应栈底，定义 $\\textit{index}$ 表示栈顶元素的下标位置，初始时栈为空，$\\textit{index}=-1$。当遇到操作数和运算符时，进行如下操作：\n\n- 如果遇到操作数，则将 $\\textit{index}$ 的值加 $1$，然后将操作数赋给 $\\textit{stack}[\\textit{index}]$；\n\n- 如果遇到运算符，则将 $\\textit{index}$ 的值减 $1$，此时 $\\textit{stack}[\\textit{index}]$ 和 $\\textit{stack}[\\textit{index}+1]$ 的元素分别是左操作数和右操作数，使用运算符对两个操作数进行运算，将运算得到的新操作数赋给 $\\textit{stack}[\\textit{index}]$。\n\n整个后缀表达式遍历完毕之后，栈内只有一个元素，因此 $\\textit{index}=0$，此时 $\\textit{stack}[\\textit{index}]$ 即为后缀表达式的值。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/14.png),![ppt15](https://assets.leetcode-cn.com/solution-static/jianzhi_II_036/15.png)>\n\n```Java [sol2-Java]\nclass Solution {\n    public int evalRPN(String[] tokens) {\n        int n = tokens.length;\n        int[] stack = new int[(n + 1) / 2];\n        int index = -1;\n        for (int i = 0; i < n; i++) {\n            String token = tokens[i];\n            switch (token) {\n                case \"+\":\n                    index--;\n                    stack[index] += stack[index + 1];\n                    break;\n                case \"-\":\n                    index--;\n                    stack[index] -= stack[index + 1];\n                    break;\n                case \"*\":\n                    index--;\n                    stack[index] *= stack[index + 1];\n                    break;\n                case \"/\":\n                    index--;\n                    stack[index] /= stack[index + 1];\n                    break;\n                default:\n                    index++;\n                    stack[index] = Integer.parseInt(token);\n            }\n        }\n        return stack[index];\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar evalRPN = function(tokens) {\n    const n = tokens.length;\n    const stack = new Array(Math.floor((n + 1) / 2)).fill(0);\n    let index = -1;\n    for (let i = 0; i < n; i++) {\n        const token = tokens[i];\n        if (token === '+') {\n            index--;\n            stack[index] += stack[index + 1];\n        } else if (token === '-') {\n            index--;\n            stack[index] -= stack[index + 1];\n        } else if (token === '*') {\n            index--;\n            stack[index] *= stack[index + 1];\n        } else if (token === '/') {\n            index--;\n            stack[index] = stack[index] / stack[index + 1] > 0 ? Math.floor(stack[index] / stack[index + 1]) : Math.ceil(stack[index] / stack[index + 1]);\n        } else {\n            index++;\n            stack[index] = parseInt(token);\n        }\n    }\n    return stack[index];\n}; \n```\n\n```go [sol2-Golang]\nfunc evalRPN(tokens []string) int {\n    stack := make([]int, (len(tokens)+1)/2)\n    index := -1\n    for _, token := range tokens {\n        val, err := strconv.Atoi(token)\n        if err == nil {\n            index++\n            stack[index] = val\n        } else {\n            index--\n            switch token {\n            case \"+\":\n                stack[index] += stack[index+1]\n            case \"-\":\n                stack[index] -= stack[index+1]\n            case \"*\":\n                stack[index] *= stack[index+1]\n            default:\n                stack[index] /= stack[index+1]\n            }\n        }\n    }\n    return stack[0]\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        op_to_binary_fn = {\n            \"+\": add,\n            \"-\": sub,\n            \"*\": mul,\n            \"/\": lambda x, y: int(x / y),   # 需要注意 python 中负数除法的表现与题目不一致\n        }\n\n        n = len(tokens)\n        stack = [0] * ((n + 1) // 2)\n        index = -1\n        for token in tokens:\n            try:\n                num = int(token)\n                index += 1\n                stack[index] = num\n            except ValueError:\n                index -= 1\n                stack[index] = op_to_binary_fn[token](stack[index], stack[index + 1])\n            \n        return stack[0]\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        int n = tokens.size();\n        vector<int> stk((n + 1) / 2);\n        int index = -1;\n        for (int i = 0; i < n; i++) {\n            string& token = tokens[i];\n            if (token.length() > 1 || isdigit(token[0])) {\n                index++;\n                stk[index] = atoi(token.c_str());\n            } else {\n                switch (token[0]) {\n                    case '+':\n                        index--;\n                        stk[index] += stk[index + 1];\n                        break;\n                    case '-':\n                        index--;\n                        stk[index] -= stk[index + 1];\n                        break;\n                    case '*':\n                        index--;\n                        stk[index] *= stk[index + 1];\n                        break;\n                    case '/':\n                        index--;\n                        stk[index] /= stk[index + 1];\n                        break;\n                }\n            }\n        }\n        return stk[index];\n    }\n};\n```\n\n```C [sol2-C]\nint evalRPN(char** tokens, int tokensSize) {\n    int n = tokensSize;\n    int stk[(n + 1) / 2];\n    memset(stk, 0, sizeof(stk));\n    int index = -1;\n    for (int i = 0; i < n; i++) {\n        char* token = tokens[i];\n        if (strlen(token) > 1 || isdigit(token[0])) {\n            index++;\n            stk[index] = atoi(token);\n        } else {\n            switch (token[0]) {\n                case '+':\n                    index--;\n                    stk[index] += stk[index + 1];\n                    break;\n                case '-':\n                    index--;\n                    stk[index] -= stk[index + 1];\n                    break;\n                case '*':\n                    index--;\n                    stk[index] *= stk[index + 1];\n                    break;\n                case '/':\n                    index--;\n                    stk[index] /= stk[index + 1];\n                    break;\n            }\n        }\n    }\n    return stk[index];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{tokens}$ 的长度。需要遍历数组 $\\textit{tokens}$ 一次，计算后缀表达式的值。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{tokens}$ 的长度。需要创建长度为 $\\frac{n+1}{2}$ 的数组模拟栈操作。"
}