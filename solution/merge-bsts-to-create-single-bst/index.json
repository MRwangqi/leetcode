{
	"titleSlug": "merge-bsts-to-create-single-bst",
	"slug": "he-bing-duo-ke-er-cha-sou-suo-shu-by-lee-m42t",
	"url": "https://leetcode-cn.com/problems/merge-bsts-to-create-single-bst/solution/he-bing-duo-ke-er-cha-sou-suo-shu-by-lee-m42t/",
	"content": "#### 方法一：构造的唯一性\n\n**提示 $1$**\n\n对于给定的第 $i$ 棵树 $\\textit{tree}[i]$，记它根节点的值为 $\\textit{root}[i]$。我们需要找到另一棵树，记为第 $j~(j \\neq i)$ 棵。第 $j$ 棵树必须存在一个值为 $\\textit{root}[i]$ 的叶节点，这样我们就可以把第 $i$ 棵树与第 $j$ 棵树合并。\n\n如果不存在满足要求的第 $j$ 棵树，**那么第 $i$ 棵树的根节点就必须是合并完成后的树的根节点**。显然，这样的第 $i$ 棵树必须**恰好**有且仅有一棵。\n\n如果存在唯一的第 $j$ 棵树，那么我们必须要将第 $i$ 棵树和第 $j$ 棵树合并。如果不这样做，合并完成后的树中就至少有两个值为 $\\textit{root}[i]$ 的节点，它就一定不是二叉搜索树了。\n\n如果存在多棵可行的第 $j$ 棵树，那么我们应当选择哪一棵呢？我们发现，由于题目保证**不存在值相同的两个根节点**，那么我们没有选择的那些树中，它们值为 $\\textit{root}[i]$ 的叶节点都会被保留，而我们选择的第 $j$ 棵树与第 $i$ 棵树合并后，也会留下一个值为 $\\textit{root}[i]$ 的节点。这样合并完成后的树中同样至少有两个值为 $\\textit{root}[i]$ 的节点，也一定不是二叉搜索树了。\n\n因此，如果某一棵树的根节点如果需要合并，那么合并的方案是**唯一**的。\n\n**思路与算法**\n\n根据提示 $1$，我们可以设计出如下的算法：\n\n> 需要注意的是，该算法的细节较多，为了保证流畅性，在这一节中我们只会叙述算法本身，而不去解释其原因。算法中一些步骤的正确性会在下一节中阐述。\n\n- 我们首先将每一棵树叶节点的值使用哈希集合 $\\textit{leaves}$ 存储下来，随后就可以找出合并完成后的树的根节点。记包含根节点的那棵树为 $\\textit{tree}[\\textit{pivot}]$，则 $\\textit{root}[\\textit{pivot}]$ 不能在 $\\textit{leaves}$ 中出现过。\n\n    如果不存在满足要求的 $\\textit{tree}[\\textit{pivot}]$，那么就无法构造出一棵二叉搜索树；如果满足要求的 $\\textit{tree}[\\textit{pivot}]$ 不唯一，那么我们随便挑选一棵即可。\n\n- 我们知道，一棵二叉树是二叉搜索树，当且仅当它的中序遍历的序列是严格单调递增的。因此，我们从 $\\textit{tree}[\\textit{pivot}]$ 的根节点开始，使用递归的方法对其进行一种特殊的中序遍历：\n\n    - 当我们遍历到一个非叶节点时，我们按照常规的中序遍历的方法，继续进行遍历；\n\n    - 当我们遍历到一个叶节点时，该叶节点可能会与另一棵树的根节点进行合并。设该叶节点的值为 $x$，如果存在根节点值同样为 $x$ 的树，我们就将其与该叶节点进行合并。在合并完成之后，该叶节点可能会变为非叶节点，我们需要继续按照常规的中序遍历的方法，继续进行遍历。\n\n- 在遍历的过程中，如果我们发现遍历到的值不是严格单调递增的，说明无法构造出一棵二叉搜索树。同时，如果遍历结束，但存在某一棵树的根节点没有被遍历到，那也说明无法构造出一棵二叉搜索树。\n\n**细节**\n\n上一节中的给出的算法看上去非常神奇，我们针对几个具体的点进行详细的解释。\n\n- 问：为什么如果满足要求的 $\\textit{tree}[\\textit{pivot}]$ 不唯一，我们可以随便挑选一棵？\n\n- 答：假设有 $\\textit{tree}[p_1]$ 和 $\\textit{tree}[p_2]$ 都满足要求，不妨设我们挑选了 $\\textit{tree}[p_1]$。由于 $\\textit{root}[p_2]$ 没有在 $\\textit{leaves}$ 中出现过，那么我们在遍历的过程中一定不会遍历到 $\\textit{tree}[p_2]$ 的根节点。在遍历结束后，我们就发现无法构造出一棵二叉搜索树。\n\n- 问：如何判断是否存在根节点值为 $x$ 的树？\n\n- 答：我们可以使用哈希映射。由于题目保证不存在值相同的两个根节点，我们可以将树的根节点值与树本身作为键值对放入哈希映射中，这样就可以快速进行判断。\n\n- 问：在遍历的过程中，如何保证一棵树最多只会被合并一次？\n\n- 答：中序遍历的严格单调递增性保证了这一点。我们遍历的节点的值是严格单调递增的，那么同一棵树的根节点值最多只会被遍历到一次，这棵树也就最多只会被合并一次。\n\n对于其余的细节，可以参考下面给出的代码。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    TreeNode* canMerge(vector<TreeNode*>& trees) {\n        // 存储所有叶节点值的哈希集合\n        unordered_set<int> leaves;\n        // 存储 (根节点值, 树) 键值对的哈希映射\n        unordered_map<int, TreeNode*> candidates;\n        for (TreeNode* tree: trees) {\n            if (tree->left) {\n                leaves.insert(tree->left->val);\n            }\n            if (tree->right) {\n                leaves.insert(tree->right->val);\n            }\n            candidates[tree->val] = tree;\n        }\n\n        // 存储中序遍历上一个遍历到的值，便于检查严格单调性\n        int prev = 0;\n        \n        // 中序遍历，返回值表示是否有严格单调性\n        function<bool(TreeNode*)> dfs = [&](TreeNode* tree) {\n            if (!tree) {\n                return true;\n            }\n\n            // 如果遍历到叶节点，并且存在可以合并的树，那么就进行合并\n            if (!tree->left && !tree->right && candidates.count(tree->val)) {\n                tree->left = candidates[tree->val]->left;\n                tree->right = candidates[tree->val]->right;\n                // 合并完成后，将树从哈希映射中移除，以便于在遍历结束后判断是否所有树都被遍历过\n                candidates.erase(tree->val);\n            }\n            \n            // 先遍历左子树\n            if (!dfs(tree->left)) {\n                return false;\n            }\n            // 再遍历当前节点\n            if (tree->val <= prev) {\n                return false;\n            };\n            prev = tree->val;\n            // 最后遍历右子树\n            return dfs(tree->right);\n        };\n        \n        for (TreeNode* tree: trees) {\n            // 寻找合并完成后的树的根节点\n            if (!leaves.count(tree->val)) {\n                // 将其从哈希映射中移除\n                candidates.erase(tree->val);\n                // 从根节点开始进行遍历\n                // 如果中序遍历有严格单调性，并且所有树的根节点都被遍历到，说明可以构造二叉搜索树\n                return (dfs(tree) && candidates.empty()) ? tree : nullptr;\n            }\n        }\n        return nullptr;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def canMerge(self, trees: List[TreeNode]) -> Optional[TreeNode]:\n        # 存储所有叶节点值的哈希集合\n        leaves = set()\n        # 存储 (根节点值, 树) 键值对的哈希映射\n        candidates = dict()\n        for tree in trees:\n            if tree.left:\n                leaves.add(tree.left.val)\n            if tree.right:\n                leaves.add(tree.right.val)\n            candidates[tree.val] = tree\n        \n        # 存储中序遍历上一个遍历到的值，便于检查严格单调性\n        prev = float(\"-inf\")\n        \n        # 中序遍历，返回值表示是否有严格单调性\n        def dfs(tree: Optional[TreeNode]) -> bool:\n            if not tree:\n                return True\n            \n            # 如果遍历到叶节点，并且存在可以合并的树，那么就进行合并\n            if not tree.left and not tree.right and tree.val in candidates:\n                tree.left = candidates[tree.val].left\n                tree.right = candidates[tree.val].right\n                # 合并完成后，将树丛哈希映射中移除，以便于在遍历结束后判断是否所有树都被遍历过\n                candidates.pop(tree.val)\n            \n            # 先遍历左子树\n            if not dfs(tree.left):\n                return False\n            # 再遍历当前节点\n            nonlocal prev\n            if tree.val <= prev:\n                return False\n            prev = tree.val\n            # 最后遍历右子树\n            return dfs(tree.right)\n        \n        for tree in trees:\n            # 寻找合并完成后的树的根节点\n            if tree.val not in leaves:\n                # 将其从哈希映射中移除\n                candidates.pop(tree.val)\n                # 从根节点开始进行遍历\n                # 如果中序遍历有严格单调性，并且所有树的根节点都被遍历到，说明可以构造二叉搜索树\n                return tree if dfs(tree) and not candidates else None\n        \n        return None\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。\n\n- 空间复杂度：$O(n)$。"
}