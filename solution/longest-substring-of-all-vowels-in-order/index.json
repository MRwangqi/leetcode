{
	"titleSlug": "longest-substring-of-all-vowels-in-order",
	"slug": "suo-you-yuan-yin-an-shun-xu-pai-bu-de-zu-9wqg",
	"url": "https://leetcode-cn.com/problems/longest-substring-of-all-vowels-in-order/solution/suo-you-yuan-yin-an-shun-xu-pai-bu-de-zu-9wqg/",
	"content": "#### 方法一：状态机\n\n**提示 $1$**\n\n我们可以将 $\\texttt{a,e,i,o,u}$ 看成 $5$ 个状态。\n当我们在遍历字符串的每个字符时，都会处于其中的一个状态。如果当前在 $\\texttt{u}$ 状态，那么就可以对答案进行更新。\n\n**提示 $2$**\n\n你会如何设计状态之间的转移呢？\n\n**思路与算法**\n\n下面给出了状态转移图，其中蓝色的 $\\texttt{a,e,i,o}$ 表示正常状态，绿色的 $\\texttt{u}$ 表示目标状态，红色的 $\\texttt{x}$ 表示非法状态。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/5740/1.png){:style=\"width:300px\"}\n\n图中也标注了两个状态之间的转移方式，对于没有标注的转移，一律转移到 $\\texttt{x}$ 非法状态。\n\n这样一来，我们只需要从 $\\texttt{x}$ 状态开始，在对字符串进行一次遍历的同时，在状态机上进行转移即可。在转移的同时，我们需要记录到目前为止成功转移的次数 $\\textit{cnt}$，当到达 $\\texttt{u}$ 状态时，我们就可以用 $\\textit{cnt}$ 来更新答案。\n\n转移次数 $\\textit{cnt}$ 的计算规则如下：\n\n- 当我们转移到 $\\texttt{x}$ 状态时，会将 $\\textit{cnt}$ 清零；\n- 当我们转移到 $\\texttt{a}$ 状态时，如果上一个状态不为 $\\texttt{a}$，那么会将 $\\textit{cnt}$ 置为 $1$；\n- 对于其余的情况，将 $\\textit{cnt}$ 增加 $1$ 即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static unordered_set<string> transit;\n\npublic:\n    int longestBeautifulSubstring(string word) {\n        int cur = 0, ans = 0;\n        char status = 'x';\n        \n        for (char ch: word) {\n            if (transit.count(string(1, status) + ch)) {\n                if (status != 'a' && ch == 'a') {\n                    cur = 1;\n                }\n                else {\n                    ++cur;\n                }\n                status = ch;\n            }\n            else {\n                cur = 0;\n                status = 'x';\n            }\n            if (status == 'u') {\n                ans = max(ans, cur);\n            }\n        }\n        \n        return ans;\n    }\n};\n\nunordered_set<string> Solution::transit = {\n    \"ae\", \"ei\", \"io\", \"ou\",\n    \"aa\", \"ee\", \"ii\", \"oo\", \"uu\",\n    \"xa\", \"ea\", \"ia\", \"oa\", \"ua\"\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n\n    TRANSIT = {\n        (\"a\", \"e\"), (\"e\", \"i\"), (\"i\", \"o\"), (\"o\", \"u\"),\n        (\"a\", \"a\"), (\"e\", \"e\"), (\"i\", \"i\"), (\"o\", \"o\"), (\"u\", \"u\"),\n        (\"x\", \"a\"), (\"e\", \"a\"), (\"i\", \"a\"), (\"o\", \"a\"), (\"u\", \"a\"),\n    }\n    \n    def longestBeautifulSubstring(self, word: str) -> int:\n        cur, ans = 0, 0\n        status = \"x\"\n        \n        for ch in word:\n            if (status, ch) in Solution.TRANSIT:\n                if status != \"a\" and ch == \"a\":\n                    cur = 1\n                else:\n                    cur = cur + 1\n                status = ch\n            else:\n                cur = 0\n                status = \"x\"\n            if status == \"u\":\n                ans = max(ans, cur)\n\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $\\textit{word}$ 的长度。\n\n- 空间复杂度：$O(|\\Sigma|)$，其中 $\\Sigma$ 是字符集，本体中给定的字符串仅包含元音字母，$|\\Sigma|=5$。状态机中的转移分为三种：\n\n    - 一个状态转移到本身，这种转移的数量为 $O(|\\Sigma|)$；\n    - 一个状态转移到相邻的下一个状态，例如 $\\texttt{a}$ 转移到 $\\texttt{e}$，$\\texttt{e}$ 转移到 $\\texttt{i}$，这种转移的数量为 $O(|\\Sigma|)$；\n    - 一个非 $\\texttt{a}$ 的状态转移到 $\\texttt{a}$，这种转移的数量为 $O(|\\Sigma|)$。\n\n    因此转移的数量为 $O(|\\Sigma|)$，即为我们需要的空间。"
}