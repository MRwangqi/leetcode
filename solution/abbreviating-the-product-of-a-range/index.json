{
	"titleSlug": "abbreviating-the-product-of-a-range",
	"slug": "yi-ge-shu-ju-tuan-mie-jue-da-bu-fen-dai-234yd",
	"url": "https://leetcode-cn.com/problems/abbreviating-the-product-of-a-range/solution/yi-ge-shu-ju-tuan-mie-jue-da-bu-fen-dai-234yd/",
	"content": "大家好，今天再次给大家带来一篇团灭系列的文章。这里我会分享一些构造极端数据的心得，介绍误差分析的一些知识，以及如何在合理的精度下通过本题。\r\n要想成功叉掉标程，首先要有不错的直觉：这题很可能出现精度问题。LC的不少出题人似乎不会误差分析的样子，出的数据范围也比较随意(常见问题是只考虑时限，不考虑数据精度的限制)，所以这已经不是第一个被我叉掉的标程了... \r\n\r\n### 误差分析\r\n猜到标程可能出问题之后，我们就可以动手寻找使程序出现精度问题的极端情况。首先估算一下这题极限情况下的精度要求，这需要一些误差分析的知识：如果我们把 $n$ 个随机数乘起来，每乘一次后四舍五入截断产生 $\\varepsilon$ 的(相对)误差，那么最终期望的相对误差为 $\\sqrt{n}\\cdot \\varepsilon$ 的量级。这是因为根据随机游走的分析，每次四舍五入时可能有一半的概率高估，一半的概率低估，绝大部分的高估与低估会互相抵消。注意在最坏情况下，如果我们每次都低估(截断时舍去)，那么最终的相对误差会是 $n\\cdot \\varepsilon$ 量级的，所以四舍五入会比手动舍去尾数的做法精度更好。注意我这里为了方便分析把 $[l,r]$ 内的数看成随机的了。\r\n如果我们用 double 进行计算的话，$\\varepsilon$大概是 $1e$-$16$ 的量级($2^{-52}$)。那么对于 $n=10^6$，期望的误差是$\\sqrt{n}\\cdot \\varepsilon\\approx 1e$-$13$ 的量级。\r\n\r\n### 极端数据的构造\r\n下一步是构造一个极端情况下的数据，使得计算过程中微小的精度误差可以影响最终的输出结果。比如如果真实值是 xxxx40001... 的形式，而我们的(绝对)误差低估了 2... 的形式(尾部省略的位数相同)，那么我们实际输出的数会变成 xxxx39999... 的形式，就错了。也就是说我们要让构造的真实值的从高往低数第6位开始尽可能地接近 0000...或者9999... 的形式(具体是哪种需要根据想叉掉的程序是如何舍入的来确定)。\r\n那么最坏情况下我们在第6位后可以构造出几个连续的9呢？如果我们把 $O(n^2)$ 种可能输出的数也看作是随机的(这样简化处理是因为受到了分析技巧的限制)，那么对于最坏的一个输入我们大概可以构造出 12 个连续的 9，也就是说使得 $10^{-16}\\sim 10^{-17}$ 量级的相对误差就可以产生错误。这远小于 $1e$-$13$，表明用double或者long long进行计算是不可靠的。有了量级估算之后，我写代码暴力枚举出了一些较坏的数据。下面就让我们来看看周赛前五名的代码能否顺利通过我们精心构造的数据吧！\r\n第五名 [@suspicious-keldyshlkl](/u/suspicious-keldyshlkl/)：\r\n```\r\n6\r\n563035\r\n```\r\n输出 78782，实际值为 7878300000012...。\r\n\r\n第四名 [@tsreaper](/u/tsreaper/)：\r\n以上数据正确。加大难度。\r\n```\r\n18\r\n237575\r\n```\r\n输出 76682，实际值为 76683000000061...。\r\n\r\n第三名 [@darrenhp](/u/darrenhp/)：\r\n以上数据正确。加大难度。\r\n```\r\n3940\r\n836328\r\n```\r\n输出 24931，标程输出24930，实际值为 249310000000000016...。标程挂了，让我们恭喜这位选手。不过我们还是要继续加大难度：\r\n```\r\n2965\r\n574229\r\n```\r\n输出 89071，实际值为 8907099999999951...。\r\n\r\n第二名 [@tonghuikang](/u/tonghuikang/)：\r\n第二名用的是 python 啊，我很慌张。不过还是挂在叉掉第四名的数据上了。\r\n\r\n第一名 [@arignote](/u/arignote/)：\r\n第一名用的是 Java，虽然跟第三名的 C++ 代码计算方式是一样的(double 一直乘，超过 100000 就 /10)，但是换成 Java 就神奇地过了。以上数据全部正确。继续加大难度。\r\n```\r\n6148\r\n215373\r\n```\r\n输出 36553，实际值为 36552999999999913...。至此前五名全部团灭。\r\n\r\n\r\n### 如何通过本题\r\n在平衡运算速度与精度后，可以使用C++的__int128或者__float128进行计算(对应的 $\\varepsilon$ 约为 $1e$-$34$ 的量级)，或者用python自动进行高精度计算。C++的long double似乎也是可行的，我暂时没有叉掉，但是理论精度正好处在将要挂掉的边界上。Java 的大整数类我不确定够不够快，或者手写高精度也可以。我看到了 Go 的高精度还是挺快的。其他语言就自寻出路吧。\r\n更新：我花了两天搜索了所有容易出错的数据，没有卡掉正确实现的 long double。其中最难的数据大概是\r\n```\r\n468620\r\n595075\r\n```\r\n实际值为 1655700000000000**135**...，用 long double 相乘算出来的是 1655700000000000**075**...，偏差稍微差了那么一点，再翻一倍的话就有可能出错了。比赛中唯一通过的 C++ 选手的写法为\r\n```cpp\r\nlong double pre = 1.0;\r\nfor (int x = left; x <= right; x++) {\r\n\tpre = pre * x;\r\n\twhile(pre > 100000) pre /= 10;\r\n}\r\n//注：换成 while(pre > 1000000000) pre /= 1000000000; 的话精度会更好，因为少做了几次除法。\r\n//把数据范围放到 10^9 可以明显地看出区别。\r\n```\r\n我也试了用 long double 求 log 之和再 pow 恢复的方案，求完 log 之和精度就差很远了，算出的是 165569999999948...。尽力优化细节的话可以把精度提升两个数量级，但还是会差一些。\r\n\r\n<br>\r\n另外再更新一个 $\\log^{O(1)} n$ 复杂度的算法，思路是用 Stirling 近似公式来快速计算 $\\log (n!)$。以下代码用的 long double，所以还是有些精度问题，但可以通过目前LC上的所有数据。我再手写了个 float128 版本，精度就有保障了，能算到三十几位。注意到 $[l,r]$ 内的数乘积末尾的 $L$ 位非零值也可以在 $\\mathrm{poly}(L,\\log n)$ 的复杂度内算出(可以看[这里](https://emathgroup.github.io/blog/factorial-tail))，所以本题是有 $\\mathrm{polylog}~n$ 复杂度的做法的。\r\n```C++ [code1-long double版]\r\n#define double long double\r\nconst double PI=atan((double)1)*4,E=exp((double)1),\r\n  B[]={1,1./2,1./6,0,-1./30,0,1./42,0,-1./30,0,5./66,0,-691./2730,0,7./6,0,-3617./510,0,43867./798,0,-174611./330};\r\nconst int M=10;\r\ndouble log_fac(double n){\r\n\tdouble ans=n*log(n/E)+log(n)/2+log(sqrt(PI*2));\r\n\tfor (int i=2;i<=M;++i)ans+=pow(-1,i)*B[i]/(i*(i-1)*pow(n,i-1));\r\n\tif (n<20){\r\n\t\tans=0;\r\n\t\tfor (int i=1;i<=n;++i)ans+=log(i);\r\n\t}\r\n\treturn ans;\r\n}\r\nint leading(int l,int r){\r\n\tdouble t=log_fac(r)-log_fac(l-1);\r\n\tt/=log((double)10); t-=int(t)-4;\r\n\treturn pow(10,t);\r\n}\r\n```\r\n```C++ [code1-float128版]\r\ntypedef __float128 D;\r\nconst D PI=3.1415926535897932384626433832795028841971Q,\r\n\tE=2.7182818284590452353602874713526624977572Q;\r\nvoid print(__float128 x,int K=35){\r\n\tif (x<0){printf(\"-\");x=-x;}\r\n\tint y=0,t;\r\n\twhile (x>=1)x*=0.1Q,++y;\r\n\tif (!y)printf(\"0.\");\r\n\tfor (int i=1;i<=max(y,K);++i){\r\n\t\tx*=10; t=(int)x;\r\n\t\tif (x<t)--t;\r\n\t\telse if (x>=t+1)++t;\r\n\t\tprintf(\"%d\",t);\r\n\t\tif (i==y)printf(\".\");\r\n\t\tx-=t;\r\n\t}\r\n\tprintf(\"\\n\");\r\n}\r\ninline __float128 sqrt(__float128 x){\r\n\t__float128 f=1.5Q,x1=x*0.5Q,y=1.Q/sqrt((double)x);\r\n\tfor (int i=1;i<=4;++i)y=y*(f-x1*y*y);\r\n\treturn x*y;\r\n}\r\ninline __float128 exp(__float128 x){\r\n\tif (x<0)return 1/exp(-x);\r\n\tint t=0; for (;x>1e-5;++t)x/=2;\r\n\t__float128 ans=0,y=x;\r\n\tfor (int i=1;i<=7;++i,y*=x/i)ans+=y;\r\n\twhile (t--)ans=ans*2+ans*ans;\r\n\treturn ans+1;\r\n}\r\ninline __float128 log(__float128 x){\r\n\tif (x<1)return -log(1/x);\r\n\tint t=0; for (x-=1;x>1e-5;++t)x=x/(sqrt(x+1)+1);\r\n\t__float128 ans=0,y=x;\r\n\tfor (int i=1;i<=7;++i,y*=-x)ans+=y/i;\r\n\tans*=1<<t;\r\n\treturn ans;\r\n}\r\ninline __float128 pow(__float128 x,__float128 y){return exp(y*log(x));}\r\nconst D B[]={1,D(1)/2,D(1)/6,0,-D(1)/30,0,D(1)/42,0,-D(1)/30,0,D(5)/66,0,\r\n\t-D(691)/2730,0,D(7)/6,0,-D(3617)/510,0,D(43867)/798,0,-D(174611)/330};\r\nconst int M=10;\r\nD log_fac(D n){\r\n\tD ans=0;\r\n\tif (n>20){\r\n\t\tans=n*log(n/E)+log(n)/2+log(sqrt(PI*2));\r\n\t\tfor (int i=2;i<=M;++i)ans+=(i%2?-1:1)*B[i]/(D(i)*(i-1)*pow(n,D(i-1)));\r\n\t}\r\n\telse for (int i=1;i<=n;++i)ans+=log(D(i));\r\n\treturn ans;\r\n}\r\nint leading(int l,int r){\r\n\tD t=log_fac(r)-log_fac(l-1);\r\n\tt/=log(10.Q); t-=int(t)-4;\r\n\treturn pow(10.Q,t);\r\n}\r\n```\r\n<br>\r\n三更：现在数据范围被改小到 $n\\leq 10000$ 了，不过还是得小心处理细节才能用 double 通过本题。比如我测试了一下比赛中前 150 名中的所有 82 位 C++ 选手，其中只有 24 位通过了下面这个数据：\r\n```\r\n4838\r\n6186\r\n```\r\n实际值为 36088000000027...。\r\n另外再提供一些数据：\r\n```\r\n//格式为left, right, 实际值的前5位。\r\n5451,7344,\"36274...\"\r\n1368,1577,\"16375...\"\r\n1385,5673,\"46222...\"\r\n5387,9507,\"11343...\"\r\n445,7931,\"15669...\"\r\n2230,5489,\"34409...\"\r\n3175,8949,\"31926...\"\r\n3317,5963,\"19446...\"\r\n3372,5890,\"10907...\"\r\n8229,8924,\"31684...\"\r\n3543,4907,\"45166...\"\r\n5975,9674,\"36300...\"\r\n```\r\n\r\n<br>\r\n最后贴一下完整版的 $O(\\mathrm{poly}\\log n)$ 复杂度的代码，可以跑到 0ms：\r\n```\r\n#define double long double\r\nconst double PI=atan((double)1)*4,E=exp((double)1),\r\n  B[]={1,1./2,1./6,0,-1./30,0,1./42,0,-1./30,0,5./66,0,-691./2730,0,7./6,0,-3617./510,0,43867./798,0,-174611./330};\r\nconst int M=10;\r\ndouble log_fac(double n){\r\n\tdouble ans=n*log(n/E)+log(n)/2+log(sqrt(PI*2));\r\n\tfor (int i=2;i<=M;++i)ans+=pow(-1,i)*B[i]/(i*(i-1)*pow(n,i-1));\r\n\tif (n<20){\r\n\t\tans=0;\r\n\t\tfor (int i=1;i<=n;++i)ans+=log(i);\r\n\t}\r\n\treturn ans;\r\n}\r\nint leading(int l,int r){\r\n\tdouble t=log_fac(r)-log_fac(l-1);\r\n\tt/=log((double)10); t-=int(t)-4;\r\n\treturn pow(10,t);\r\n}\r\n\r\nconst int P=3125;\r\ntemplate<class T> T extend_gcd(T a,T b,T &x,T &y){\r\n\tif (!b){x=1;y=0;return a;}\r\n\tT res=extend_gcd(b,a%b,y,x); y-=x*(a/b);\r\n\treturn res;\r\n}\r\ntemplate<class T>\r\ninline T inv(T a,T M){\r\n\tT x,y; extend_gcd(a,M,x,y);\r\n\treturn (x%M+M)%M;\r\n}\r\nconst int inv2=inv(2,P);\r\nint exp(int x,int y,int z){\r\n\tint ans=1;\r\n\twhile (y){\r\n\t\tif (y&1)ans=ans*x%z;\r\n\t\tx=x*x%z;y>>=1;\r\n\t}\r\n\treturn ans;\r\n}\r\nint Chinese_Remainder_Theorem(int A[],int M[],int n){\r\n\tfor (int i=1;i<n;++i){\r\n\t\tint x,y,P=M[0]*M[i];\r\n\t\textend_gcd(M[0],M[i],x,y);\r\n\t\tx=(x*(A[i]-A[0])%P+P)%P;\r\n\t\tA[0]=(x*M[0]+A[0])%P; M[0]=P;\r\n\t}\r\n\treturn A[0];\r\n}\r\n// PolynomialMod[Product[If[Mod[i,5]>0,5^4*x+i,1],{i,1,5^4}],3125]\r\nint calc(int x,int d){\r\n\tswitch(d){\r\n\t\tcase 0: return x%5?x%P:1;\r\n\t\tcase 1: return (24+250*x+875*x%P*x+1250*x%P*x%P*x+625*x%P*x%P*x%P*x)%P;\r\n\t\tcase 2: return 124;\r\n\t\tcase 3: return 624;\r\n\t\tcase 4:\r\n\t\tcase 5: return 3124;\r\n\t}\r\n\treturn 0;\r\n}\r\nint get(int l,int r,int d){\r\n\tif (l>r||d<0)return 1;\r\n\tint mod=pow(5,d),l0=(l-1)/mod+1,r0=(r+1)/mod,res=1;\r\n\tfor (int i=l0;i<r0;++i)res=res*calc(i,d)%P;\r\n\tif (l0<r0)return res*get(l,l0*mod-1,d-1)%P*get(r0*mod,r,d-1)%P;\r\n\telse return get(l,r,d-1);\r\n}\r\nstring abbreviateProduct1(int left, int right) {  // brute force. 随便抄了一个\r\n    long long suff = 1, c = 0, total = 0, max_suff = 100000000000LL;\r\n    double pref = 1.0;\r\n    for (int i = left; i <= right; ++i) {\r\n        pref *= i;\r\n        suff *= i;\r\n        while (pref >= 100000) {\r\n            pref /= 10;\r\n            total = total == 0 ? 6 : total + 1; \r\n        }\r\n        while (suff % 10 == 0) {\r\n            suff /= 10;\r\n            ++c;\r\n        }\r\n        suff %= max_suff;\r\n    }\r\n    string s = to_string(suff);\r\n    return to_string((int)pref) + (total - c <= 10 ? \"\" : \"...\") \r\n    \t+ (total - c < 5 ? \"\" : s.substr(s.size() - min(5LL, total - c - 5))) + \"e\" + to_string(c);\r\n}\r\nclass Solution {\r\npublic:\r\n\tstring abbreviateProduct(int l, int r) {\r\n\t\tif (r-l<20)return abbreviateProduct1(l,r);\r\n\t\tint last=1,l0=l,r0=r,zeros=0;\r\n\t\twhile (l0<=r0){\r\n\t\t\tlast=last*get(l0,r0,5)%P;\r\n\t\t\tl0=(l0-1)/5+1; r0/=5;\r\n\t\t\tzeros+=r0-l0+1;\r\n\t\t}\r\n\t\tlast=last*exp(inv2,zeros,P)%P;\r\n\t\tint A[]={0,last},M[]={32,3125};\r\n\t\tlast=Chinese_Remainder_Theorem(A,M,2);\r\n\t\tchar str1[15]; sprintf(str1,\"%05d\",last);\r\n\t\treturn to_string(leading(l,r))+\"...\"+string(str1)+\"e\"+to_string(zeros);\r\n\t}\r\n};\r\n```\r\n![2117_0ms_cn.png](https://pic.leetcode-cn.com/1656929244-XDorEn-2117_0ms_cn.png)\r\n"
}