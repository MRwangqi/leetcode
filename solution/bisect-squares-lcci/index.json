{
	"titleSlug": "bisect-squares-lcci",
	"slug": "gao-zhong-zhi-shi-ni-shang-ni-ye-xing-by-5x6d",
	"url": "https://leetcode-cn.com/problems/bisect-squares-lcci/solution/gao-zhong-zhi-shi-ni-shang-ni-ye-xing-by-5x6d/",
	"content": "**要平分两个正方形，则平分线一定是两个正方形中点的连线，因此我们就根据这个条件就可以来做了，我们可以得出以下步骤**\r\n![image.png](https://pic.leetcode-cn.com/1627221487-Ajpxco-image.png)\r\n\r\n1.计算两个正方形的中心坐标\r\n2.判断此时两点形成的直线斜率是否存在\r\n3.若不存在则说明两点在同一条x轴上\r\n![image.png](https://pic.leetcode-cn.com/1627221648-hcyVFf-image.png)\r\n\r\n4.若存在，则计算斜率k和系数b\r\n5.根据斜率的绝对值的大小，可以知道直线与正方形的上下相交还是左右相交\r\n   - 斜率绝对值大于1，上下相交\r\n![image.png](https://pic.leetcode-cn.com/1627221839-oJZlLK-image.png)\r\n\r\n   - 斜率绝对值小于等于1，左右相交，斜率等于1就是对角线，既是上下相交又左右相交，随便放哪边计算都行\r\n![image.png](https://pic.leetcode-cn.com/1627221770-nXaILs-image.png)\r\n\r\n最后跟着步骤直接编写代码\r\n\r\n```java []\r\nclass Solution {\r\n    public double[] cutSquares(int[] square1, int[] square2) {\r\n        //第一个正方形的中心点，x,y坐标及正方形边长\r\n        double x1 = square1[0] + square1[2]/2.0;\r\n        double y1 = square1[1] + square1[2]/2.0;\r\n        int d1 = square1[2];\r\n        //第二个正方形的中心点，x,y坐标及正方形边长\r\n        double x2 = square2[0] + square2[2]/2.0;\r\n        double y2 = square2[1] + square2[2]/2.0;\r\n        int d2 = square2[2];\r\n        //结果集\r\n        double[] res = new double[4];\r\n        //两个中心坐标在同一条x轴上，此时两条直线的斜率都是无穷大\r\n        if(x1 == x2){\r\n            res[0] = x1;\r\n            res[1] = Math.min(square1[1], square2[1]);\r\n            res[2] = x1;\r\n            res[3] = Math.max(square1[1] + d1, square2[1] + d2);\r\n        }else{\r\n            //斜率存在，则计算斜率和系数，y = kx + b;\r\n            double k = (y1 - y2)/(x1 - x2);//斜率计算公式\r\n            double b = y1 - k*x1;\r\n            //斜率绝对值大于1，说明与正方形的上边和下边相交\r\n            if(Math.abs(k) > 1){\r\n            //先计算底边，也就是两个正方形左下坐标y的最小值\r\n                res[1] = Math.min(square1[1],square2[1]);\r\n                res[0] = (res[1] - b)/k;\r\n            //再计算顶边，也就是两个正方形左下坐标y+边长的最大值\r\n                res[3] = Math.max(square1[1] + d1,square2[1] + d2);\r\n                res[2] = (res[3] - b)/k;\r\n            }else{\r\n                //斜率绝对值小于等于1，说明与正方形的左边和右边相交，同理\r\n                res[0] = Math.min(square1[0],square2[0]);\r\n                res[1] = res[0]*k + b;\r\n                res[2] = Math.max(square1[0] + d1,square2[0] + d2);\r\n                res[3] = res[2]*k + b;\r\n            }\r\n        }\r\n        //题目要求x1 < x2,如果结果不满足，我们交换两个点的坐标即可\r\n        if(res[0] > res[2]){\r\n            swap(res, 0 ,2);\r\n            swap(res, 1, 3);\r\n        }\r\n        return res;\r\n    }\r\n    public void swap(double[] res, int x, int y){\r\n        double temp = res[x];\r\n        res[x] = res[y];\r\n        res[y] = temp;\r\n    }\r\n}\r\n```\r\n\r\n"
}