{
	"titleSlug": "sfvd7V",
	"slug": "bian-wei-ci-zu-by-leetcode-solution-5wnz",
	"url": "https://leetcode-cn.com/problems/sfvd7V/solution/bian-wei-ci-zu-by-leetcode-solution-5wnz/",
	"content": "#### 前言\n\n两个字符串互为字母异位词，当且仅当两个字符串包含的字母相同。同一组字母异位词中的字符串具备相同点，可以使用相同点作为一组字母异位词的标志，使用哈希表存储每一组字母异位词，哈希表的键为一组字母异位词的标志，哈希表的值为一组字母异位词列表。\n\n遍历每个字符串，对于每个字符串，得到该字符串所在的一组字母异位词的标志，将当前字符串加入该组字母异位词的列表中。遍历全部字符串之后，哈希表中的每个键值对即为一组字母异位词。\n\n以下的两种方法分别使用排序和计数作为哈希表的键。\n\n#### 方法一：排序\n\n由于互为字母异位词的两个字符串包含的字母相同，因此对两个字符串分别进行排序之后得到的字符串一定是相同的，故可以将排序之后的字符串作为哈希表的键。\n\n```Java [sol1-Java]\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> map = new HashMap<String, List<String>>();\n        for (String str : strs) {\n            char[] array = str.toCharArray();\n            Arrays.sort(array);\n            String key = new String(array);\n            List<String> list = map.getOrDefault(key, new ArrayList<String>());\n            list.add(str);\n            map.put(key, list);\n        }\n        return new ArrayList<List<String>>(map.values());\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar groupAnagrams = function(strs) {\n    const map = new Map();\n    for (let str of strs) {\n        let array = Array.from(str);\n        array.sort();\n        let key = array.toString();\n        let list = map.get(key) ? map.get(key) : new Array();\n        list.push(str);\n        map.set(key, list);\n    }\n    return Array.from(map.values());\n};\n```\n\n```Golang [sol1-Golang]\nfunc groupAnagrams(strs []string) [][]string {\n    mp := map[string][]string{}\n    for _, str := range strs {\n        s := []byte(str)\n        sort.Slice(s, func(i, j int) bool { return s[i] < s[j] })\n        sortedStr := string(s)\n        mp[sortedStr] = append(mp[sortedStr], str)\n    }\n    ans := make([][]string, 0, len(mp))\n    for _, v := range mp {\n        ans = append(ans, v)\n    }\n    return ans\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        unordered_map<string, vector<string>> mp;\n        for (string& str: strs) {\n            string key = str;\n            sort(key.begin(), key.end());\n            mp[key].emplace_back(str);\n        }\n        vector<vector<string>> ans;\n        for (auto it = mp.begin(); it != mp.end(); ++it) {\n            ans.emplace_back(it->second);\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        mp = collections.defaultdict(list)\n\n        for st in strs:\n            key = \"\".join(sorted(st))\n            mp[key].append(st)\n        \n        return list(mp.values())\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nk \\log k)$，其中 $n$ 是 $\\textit{strs}$ 中的字符串的数量，$k$ 是 $\\textit{strs}$ 中的字符串的的最大长度。需要遍历 $n$ 个字符串，对于每个字符串，需要 $O(k \\log k)$ 的时间进行排序以及 $O(1)$ 的时间更新哈希表，因此总时间复杂度是 $O(nk \\log k)$。\n\n- 空间复杂度：$O(nk)$，其中 $n$ 是 $\\textit{strs}$ 中的字符串的数量，$k$ 是 $\\textit{strs}$ 中的字符串的的最大长度。需要用哈希表存储全部字符串。\n\n#### 方法二：计数\n\n由于互为字母异位词的两个字符串包含的字母相同，因此两个字符串中的相同字母出现的次数一定是相同的，故可以将每个字母出现的次数使用字符串表示，作为哈希表的键。\n\n由于字符串只包含小写字母，因此对于每个字符串，可以使用长度为 $26$ 的数组记录每个字母出现的次数。需要注意的是，在使用数组作为哈希表的键时，不同语言的支持程度不同，因此不同语言的实现方式也不同。\n\n```Java [sol2-Java]\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> map = new HashMap<String, List<String>>();\n        for (String str : strs) {\n            int[] counts = new int[26];\n            int length = str.length();\n            for (int i = 0; i < length; i++) {\n                counts[str.charAt(i) - 'a']++;\n            }\n            // 将每个出现次数大于 0 的字母和出现次数按顺序拼接成字符串，作为哈希表的键\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < 26; i++) {\n                if (counts[i] != 0) {\n                    sb.append((char) ('a' + i));\n                    sb.append(counts[i]);\n                }\n            }\n            String key = sb.toString();\n            List<String> list = map.getOrDefault(key, new ArrayList<String>());\n            list.add(str);\n            map.put(key, list);\n        }\n        return new ArrayList<List<String>>(map.values());\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar groupAnagrams = function(strs) {\n    const map = new Object();\n    for (let s of strs) {\n        const count = new Array(26).fill(0);\n        for (let c of s) {\n            count[c.charCodeAt() - 'a'.charCodeAt()]++;\n        }\n        map[count] ? map[count].push(s) : map[count] = [s];\n    }\n    return Object.values(map);\n};\n```\n\n```Golang [sol2-Golang]\nfunc groupAnagrams(strs []string) [][]string {\n    mp := map[[26]int][]string{}\n    for _, str := range strs {\n        cnt := [26]int{}\n        for _, b := range str {\n            cnt[b-'a']++\n        }\n        mp[cnt] = append(mp[cnt], str)\n    }\n    ans := make([][]string, 0, len(mp))\n    for _, v := range mp {\n        ans = append(ans, v)\n    }\n    return ans\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        // 自定义对 array<int, 26> 类型的哈希函数\n        auto arrayHash = [fn = hash<int>{}] (const array<int, 26>& arr) -> size_t {\n            return accumulate(arr.begin(), arr.end(), 0u, [&](size_t acc, int num) {\n                return (acc << 1) ^ fn(num);\n            });\n        };\n\n        unordered_map<array<int, 26>, vector<string>, decltype(arrayHash)> mp(0, arrayHash);\n        for (string& str: strs) {\n            array<int, 26> counts{};\n            int length = str.length();\n            for (int i = 0; i < length; ++i) {\n                counts[str[i] - 'a'] ++;\n            }\n            mp[counts].emplace_back(str);\n        }\n        vector<vector<string>> ans;\n        for (auto it = mp.begin(); it != mp.end(); ++it) {\n            ans.emplace_back(it->second);\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        mp = collections.defaultdict(list)\n\n        for st in strs:\n            counts = [0] * 26\n            for ch in st:\n                counts[ord(ch) - ord(\"a\")] += 1\n            # 需要将 list 转换成 tuple 才能进行哈希\n            mp[tuple(counts)].append(st)\n        \n        return list(mp.values())\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n(k+|\\Sigma|))$，其中 $n$ 是 $\\textit{strs}$ 中的字符串的数量，$k$ 是 $\\textit{strs}$ 中的字符串的的最大长度，$\\Sigma$ 是字符集，在本题中字符集为所有小写字母，$|\\Sigma|=26$。需要遍历 $n$ 个字符串，对于每个字符串，需要 $O(k)$ 的时间计算每个字母出现的次数，$O(|\\Sigma|)$ 的时间生成哈希表的键，以及 $O(1)$ 的时间更新哈希表，因此总时间复杂度是 $O(n(k+|\\Sigma|))$。\n\n- 空间复杂度：$O(n(k+|\\Sigma|))$，其中 $n$ 是 $\\textit{strs}$ 中的字符串的数量，$k$ 是 $\\textit{strs}$ 中的字符串的最大长度，$\\Sigma$ 是字符集，在本题中字符集为所有小写字母，$|\\Sigma|=26$。需要用哈希表存储全部字符串，而记录每个字符串中每个字母出现次数的数组需要的空间为 $O(|\\Sigma|)$，在渐进意义下小于 $O(n(k+|\\Sigma|))$，可以忽略不计。"
}