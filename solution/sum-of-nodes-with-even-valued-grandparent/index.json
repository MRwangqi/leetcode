{
	"titleSlug": "sum-of-nodes-with-even-valued-grandparent",
	"slug": "zu-fu-jie-dian-zhi-wei-ou-shu-de-jie-dian-he-by-2",
	"url": "https://leetcode-cn.com/problems/sum-of-nodes-with-even-valued-grandparent/solution/zu-fu-jie-dian-zhi-wei-ou-shu-de-jie-dian-he-by-2/",
	"content": "#### 方法一：深度优先搜索\n\n我们可以通过深度优先搜索找出所有满足题目要求的节点。\n\n具体地，在进行搜索时，搜索状态除了当前节点之外，还需要存储该节点的祖父节点和父节点，即三元组 `(grandparent, parent, node)`。如果节点 `grandparent` 的值为偶数，那么就将节点 `node` 的值加入答案。在这之后，我们继续搜索节点 `node` 的左孩子 `(parent, node, node.left)` 以及右孩子 `(parent, node, node.right)`，直到搜索结束。\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    int ans = 0;\n    \npublic:\n    void dfs(TreeNode* grandparent, TreeNode* parent, TreeNode* node) {\n        if (!node) {\n            return;\n        }\n        if (grandparent->val % 2 == 0) {\n            ans += node->val;\n        }\n        dfs(parent, node, node->left);\n        dfs(parent, node, node->right);\n    }\n    \n    int sumEvenGrandparent(TreeNode* root) {\n        if (root->left) {\n            dfs(root, root->left, root->left->left);\n            dfs(root, root->left, root->left->right);\n        }\n        if (root->right) {\n            dfs(root, root->right, root->right->left);\n            dfs(root, root->right, root->right->right);\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sumEvenGrandparent(self, root: TreeNode) -> int:\n        ans = 0\n\n        def dfs(grandparent, parent, node):\n            if not node:\n                return\n            if grandparent.val % 2 == 0:\n                nonlocal ans\n                ans += node.val\n            dfs(parent, node, node.left)\n            dfs(parent, node, node.right)\n        \n        if root.left:\n            dfs(root, root.left, root.left.left)\n            dfs(root, root.left, root.left.right)\n        if root.right:\n            dfs(root, root.right, root.right.left)\n            dfs(root, root.right, root.right.right)\n        \n        return ans\n```\n\n然而这种搜索状态的表示方法不够通用。在上面的代码中，我们需要使用两次 `if` 进行四次搜索函数的调用，才能完成树中所有节点的搜索。那么如何将代码写得更加通用和美观呢？\n\n我们想一想为什么需要在代码中使用两次 `if` 进行四次搜索：由于根节点没有父节点，根节点的子节点没有祖父节点，那么搜索状态中的`grandparent` 和 `parent` 无法进行表示，因此我们必须从根节点的孙子节点（即子节点的子节点）开始搜索。而我们发现，在搜索状态三元组 `(grandparent, parent, node)` 中，`grandparent` 和 `parent` 这两项我们只使用了它的值，而不使用节点本身，因此我们可以在搜索状态中用值来替换这些节点。\n\n我们可以假设根节点有一个虚拟的祖父节点和父节点，它们的值都为 `1`。在搜索时，我们使用三元组 `(gp_val, p_val, node)` 表示搜索状态，其中 `gp_val` 和 `p_val` 分别表示祖父节点和父节点的值，`node` 表示当前节点。这样以来，我们就可以直接从状态 `(1, 1, root)` 开始直接对根节点进行搜索了。\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    int ans = 0;\n    \npublic:\n    void dfs(int gp_val, int p_val, TreeNode* node) {\n        if (!node) {\n            return;\n        }\n        if (gp_val % 2 == 0) {\n            ans += node->val;\n        }\n        dfs(p_val, node->val, node->left);\n        dfs(p_val, node->val, node->right);\n    }\n    \n    int sumEvenGrandparent(TreeNode* root) {\n        dfs(1, 1, root);\n        return ans;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def sumEvenGrandparent(self, root: TreeNode) -> int:\n        ans = 0\n\n        def dfs(gp_val, p_val, node):\n            if not node:\n                return\n            if gp_val % 2 == 0:\n                nonlocal ans\n                ans += node.val\n            dfs(p_val, node.val, node.left)\n            dfs(p_val, node.val, node.right)\n        \n        dfs(1, 1, root)\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是树中的节点个数。\n\n- 空间复杂度：$O(H)$，其中 $H$ 是树的高度。\n\n#### 方法二：广度优先搜索\n\n我们也可以换一种思考方式。既然要找出祖父节点的值为偶数的节点，我们不如找到所有值为偶数的节点，并对这些节点的孙子节点（即子节点的子节点）统计答案。\n\n这样我们就可以使用广度优先搜索遍历整棵树，当我们找到一个值为偶数的节点时，我们将该节点的所有孙子节点的值加入答案。\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int sumEvenGrandparent(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        int ans = 0;\n        while (!q.empty()) {\n            TreeNode* node = q.front();\n            q.pop();\n            if (node->val % 2 == 0) {\n                if (node->left) {\n                    if (node->left->left) {\n                        ans += node->left->left->val;\n                    }\n                    if (node->left->right) {\n                        ans += node->left->right->val;\n                    }\n                }\n                if (node->right) {\n                    if (node->right->left) {\n                        ans += node->right->left->val;\n                    }\n                    if (node->right->right) {\n                        ans += node->right->right->val;\n                    }\n                }\n            }\n            if (node->left) {\n                q.push(node->left);\n            }\n            if (node->right) {\n                q.push(node->right);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def sumEvenGrandparent(self, root: TreeNode) -> int:\n        q = collections.deque([root])\n        ans = 0\n        while len(q) > 0:\n            node = q.popleft()\n            if node.val % 2 == 0:\n                if node.left:\n                    if node.left.left:\n                        ans += node.left.left.val\n                    if node.left.right:\n                        ans += node.left.right.val\n                if node.right:\n                    if node.right.left:\n                        ans += node.right.left.val\n                    if node.right.right:\n                        ans += node.right.right.val\n            if node.left:\n                q.append(node.left)\n            if node.right:\n                q.append(node.right)\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是树中的节点个数。\n\n- 空间复杂度：$O(N)$。"
}