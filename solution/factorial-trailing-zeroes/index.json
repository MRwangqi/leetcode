{
	"titleSlug": "factorial-trailing-zeroes",
	"slug": "jie-cheng-hou-de-ling-by-leetcode-soluti-1egk",
	"url": "https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/jie-cheng-hou-de-ling-by-leetcode-soluti-1egk/",
	"content": "#### 方法一：数学\n\n$n!$ 尾零的数量即为 $n!$ 中因子 $10$ 的个数，而 $10=2\\times 5$，因此转换成求 $n!$ 中质因子 $2$ 的个数和质因子 $5$ 的个数的较小值。\n\n由于质因子 $5$ 的个数不会大于质因子 $2$ 的个数（具体证明见方法二），我们可以仅考虑质因子 $5$ 的个数。\n\n而 $n!$ 中质因子 $5$ 的个数等于 $[1,n]$ 的每个数的质因子 $5$ 的个数之和，我们可以通过遍历 $[1,n]$ 的所有 $5$ 的倍数求出。 \n\n```Python [sol1-Python3]\nclass Solution:\n    def trailingZeroes(self, n: int) -> int:\n        ans = 0\n        for i in range(5, n + 1, 5):\n            while i % 5 == 0:\n                i //= 5\n                ans += 1\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int trailingZeroes(int n) {\n        int ans = 0;\n        for (int i = 5; i <= n; i += 5) {\n            for (int x = i; x % 5 == 0; x /= 5) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int trailingZeroes(int n) {\n        int ans = 0;\n        for (int i = 5; i <= n; i += 5) {\n            for (int x = i; x % 5 == 0; x /= 5) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int TrailingZeroes(int n) {\n        int ans = 0;\n        for (int i = 5; i <= n; i += 5) {\n            for (int x = i; x % 5 == 0; x /= 5) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc trailingZeroes(n int) (ans int) {\n    for i := 5; i <= n; i += 5 {\n        for x := i; x%5 == 0; x /= 5 {\n            ans++\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint trailingZeroes(int n){\n    int ans = 0;\n    for (int i = 5; i <= n; i += 5) {\n        for (int x = i; x % 5 == 0; x /= 5) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar trailingZeroes = function(n) {\n    let ans = 0;\n    for (let i = 5; i <= n; i += 5) {\n        for (let x = i; x % 5 == 0; x /= 5) {\n            ++ans;\n        }\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。$n!$ 中因子 $5$ 的个数为 $O(n)$，具体证明见方法二。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：优化计算\n\n换一个角度考虑 $[1,n]$ 中质因子 $p$ 的个数。\n \n$[1,n]$ 中 $p$ 的倍数有 $n_1=\\Big\\lfloor\\dfrac{n}{p}\\Big\\rfloor$ 个，这些数至少贡献出了 $n_1$ 个质因子 $p$。$p^2$ 的倍数有 $n_2=\\Big\\lfloor\\dfrac{n}{p^2}\\Big\\rfloor$ 个，由于这些数已经是 $p$ 的倍数了，为了不重复统计 $p$ 的个数，我们仅考虑额外贡献的质因子个数，即这些数额外贡献了至少 $n_2$ 个质因子 $p$。\n\n依此类推，$[1,n]$ 中质因子 $p$ 的个数为\n\n$$\n\\sum_{k=1}^{\\infty} \\Big\\lfloor\\dfrac{n}{p^k}\\Big\\rfloor\n$$\n\n上式表明：\n\n1. $n$ 不变，$p$ 越大，质因子个数越少，因此 $[1,n]$ 中质因子 $5$ 的个数不会大于质因子 $2$ 的个数；\n2. $[1,n]$ 中质因子 $5$ 的个数为\n\n   $$\n   \\sum_{k=1}^{\\infty} \\Big\\lfloor\\dfrac{n}{5^k}\\Big\\rfloor < \\sum_{k=1}^{\\infty} \\dfrac{n}{5^k} = \\dfrac{n}{4} = O(n)\n   $$\n\n代码实现时，由于\n\n$$\n\\Big\\lfloor\\dfrac{n}{5^k}\\Big\\rfloor = \\Bigg\\lfloor\\dfrac{\\Big\\lfloor\\dfrac{n}{5^{k-1}}\\Big\\rfloor}{5}\\Bigg\\rfloor\n$$\n\n因此我们可以通过不断将 $n$ 除以 $5$，并累加每次除后的 $n$，来得到答案。 \n\n```Python [sol2-Python3]\nclass Solution:\n    def trailingZeroes(self, n: int) -> int:\n        ans = 0\n        while n:\n            n //= 5\n            ans += n\n        return ans\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int trailingZeroes(int n) {\n        int ans = 0;\n        while (n) {\n            n /= 5;\n            ans += n;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int trailingZeroes(int n) {\n        int ans = 0;\n        while (n != 0) {\n            n /= 5;\n            ans += n;\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int TrailingZeroes(int n) {\n        int ans = 0;\n        while (n != 0) {\n            n /= 5;\n            ans += n;\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc trailingZeroes(n int) (ans int) {\n    for n > 0 {\n        n /= 5\n        ans += n\n    }\n    return\n}\n```\n\n```C [sol2-C]\nint trailingZeroes(int n) {\n    int ans = 0;\n    while (n) {\n        n /= 5;\n        ans += n;\n    }\n    return ans;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar trailingZeroes = function(n) {\n    let ans = 0;\n    while (n !== 0) {\n        n = Math.floor(n / 5);\n        ans += n;\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$。\n\n- 空间复杂度：$O(1)$。"
}