{
	"titleSlug": "reverse-nodes-in-k-group",
	"slug": "tu-jie-kge-yi-zu-fan-zhuan-lian-biao-by-user7208t",
	"url": "https://leetcode-cn.com/problems/reverse-nodes-in-k-group/solution/tu-jie-kge-yi-zu-fan-zhuan-lian-biao-by-user7208t/",
	"content": "一图胜千言，根据图片看代码，马上就懂了\n\n**步骤分解:**\n1. 链表分区为已翻转部分+待翻转部分+未翻转部分\n2. 每次翻转前，要确定翻转链表的范围，这个必须通过 `k` 此循环来确定\n3. 需记录翻转链表前驱和后继，方便翻转完成后把已翻转部分和未翻转部分连接起来\n4. 初始需要两个变量 `pre` 和 `end`，`pre` 代表待翻转链表的前驱，`end` 代表待翻转链表的末尾\n5. 经过k此循环，`end` 到达末尾，记录待翻转链表的后继 `next = end.next`\n6. 翻转链表，然后将三部分链表连接起来，然后重置 `pre` 和 `end` 指针，然后进入下一次循环\n7. 特殊情况，当翻转部分长度不足 `k` 时，在定位 `end` 完成后，`end==null`，已经到达末尾，说明题目已完成，直接返回即可\n8. 时间复杂度为 $O(n*K)$ 最好的情况为 $O(n)$ 最差的情况未 $O(n^2)$\n9. 空间复杂度为 $O(1)$ 除了几个必须的节点指针外，我们并没有占用其他空间\n\n![k个一组翻转链表.png](https://pic.leetcode-cn.com/866b404c6b0b52fa02385e301ee907fc015742c3766c80c02e24ef3a8613e5ad-k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.png){:width=600}\n{:align=center}\n\n\n**代码如下:**\n```java [-Java]\npublic ListNode reverseKGroup(ListNode head, int k) {\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n\n    ListNode pre = dummy;\n    ListNode end = dummy;\n\n    while (end.next != null) {\n        for (int i = 0; i < k && end != null; i++) end = end.next;\n        if (end == null) break;\n        ListNode start = pre.next;\n        ListNode next = end.next;\n        end.next = null;\n        pre.next = reverse(start);\n        start.next = next;\n        pre = start;\n\n        end = pre;\n    }\n    return dummy.next;\n}\n\nprivate ListNode reverse(ListNode head) {\n    ListNode pre = null;\n    ListNode curr = head;\n    while (curr != null) {\n        ListNode next = curr.next;\n        curr.next = pre;\n        pre = curr;\n        curr = next;\n    }\n    return pre;\n}\n```"
}