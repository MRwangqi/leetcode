{
	"titleSlug": "count-of-smaller-numbers-after-self",
	"slug": "ji-suan-you-ce-xiao-yu-dang-qian-yuan-su-de-ge-s-7",
	"url": "https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/solution/ji-suan-you-ce-xiao-yu-dang-qian-yuan-su-de-ge-s-7/",
	"content": "#### 方法一：离散化树状数组\n\n**预备知识**\n\n「树状数组」是一种可以动态维护序列前缀和的数据结构，它的功能是：\n\n+ **单点更新 `update(i, v)`：** 把序列 $i$ 位置的数加上一个值 $v$，在该题中 $v = 1$\n+ **区间查询 `query(i)`：** 查询序列 $[1 \\cdots i]$ 区间的区间和，即 $i$ 位置的前缀和\n\n修改和查询的时间代价都是 $O(\\log n)$，其中 $n$ 为需要维护前缀和的序列的长度。\n\n**思路与算法**\n\n记题目给定的序列为 $a$，我们规定 $a_i$ 的取值集合为 $a$ 的「值域」。我们用桶来表示值域中的每一个数，桶中记录这些数字出现的次数。假设$a = \\{5, 5, 2, 3, 6\\}$，那么遍历这个序列得到的桶是这样的：\n\n```\nindex  ->  1 2 3 4 5 6 7 8 9\nvalue  ->  0 1 1 0 2 1 0 0 0\n```\n\n**转化为动态维护前缀和问题** \n\n记 `value` 序列为 $v$，我们可以看出它第 $i - 1$ 位的前缀和表示「有多少个数比 $i$ 小」。那么我们可以从后往前遍历序列 $a$，记当前遍历到的元素为 $a_i$，我们把 $a_i$ 对应的桶的值自增 $1$，记 $a_i = p$，把 $v$ 序列 $p - 1$ 位置的前缀和加入到答案中算贡献。为什么这么做是对的呢，因为我们在循环的过程中，我们把原序列分成了两部分，后半部部分已经遍历过（已入桶），前半部分是待遍历的（未入桶），那么我们求到的 $p - 1$ 位置的前缀和就是「已入桶」的元素中比 $p$ 小的元素的个数总和。**这种动态维护前缀和的问题我们可以用「树状数组」来解决**。\n\n**用离散化优化空间** \n\n我们显然可以用数组来实现这个桶，可问题是如果 $a_i$ 中有很大的元素，比如 $10^9$，我们就要开一个大小为 $10^9$ 的桶，内存中是存不下的。这个桶数组中很多位置是 $0$，有效位置是稀疏的，我们要想一个办法让有效的位置全聚集到一起，减少无效位置的出现，这个时候我们就需要用到一个方法——离散化。**离散化的方法有很多，但是目的是一样的，即把原序列的值域映射到一个连续的整数区间，并保证它们的偏序关系不变。** 这里我们将原数组去重后排序，原数组每个数映射到去重排序后这个数对应位置的下标，我们称这个下标为这个对应数字的 $\\rm id$。已知数字获取 $\\rm id$ 可以在去重排序后的数组里面做二分查找，已知 $\\rm id$ 获取数字可以直接把 $\\rm id$ 作为下标访问去重排序数组的对应位置。大家可以参考代码和图来理解这个过程。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/315/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/315/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/315/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/315/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/315/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/315/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/315/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/315/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/315/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/315/10.png)>\n\n其实，计算每个数字右侧小于当前元素的个数，这个问题我们在「[剑指 Offer 51. 数组中的逆序对](https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/)」题解的「方法二：离散化树状数组」中遇到过，在统计逆序对的时候，只需要统计每个位置右侧小于当前元素的个数，再对它们求和，就可以得到逆序对的总数。这道逆序对的题可以作为本题的补充练习。\n\n代码如下。\n\n**代码**\n\n```csharp [sol1-C#]\npublic class Solution \n{\n    private int[] c;\n\n    private int[] a;\n\n    private void Init(int length)\n    {\n        c = new int[length];\n        Array.Fill(c, 0);\n    }\n\n    private int LowBit(int x)\n    {\n        return x & (-x);\n    }\n\n    private void Update(int pos)\n    {\n        while (pos < c.Length)\n        {\n            c[pos] += 1;\n            pos += LowBit(pos);\n        }\n    }\n\n    private int Query(int pos)\n    {\n        int ret = 0;\n        while (pos > 0)\n        {\n            ret += c[pos];\n            pos -= LowBit(pos);\n        }\n\n        return ret;\n    }\n\n    private void Discretization(int[] nums)\n    {\n        a = (int[])nums.Clone();\n        var hashSet = new HashSet<int>(a);\n        a = hashSet.ToArray();\n        Array.Sort(a);\n    }\n\n    private int GetId(int x)\n    {\n        return Array.BinarySearch(a, x) + 1;\n    }\n\n    public IList<int> CountSmaller(int[] nums) \n    {\n        var resultList = new List<int>(); \n\n        Discretization(nums);\n\n        Init(nums.Length + 5);\n\n        for (int i = nums.Length - 1; i >= 0; --i)\n        {\n            var id = GetId(nums[i]);\n            resultList.Add(Query(id - 1));\n            Update(id);\n        }\n\n        resultList.Reverse();\n\n        return resultList;\n    }\n}\n```\n\n```java [sol1-Java]\nclass Solution {\n    private int[] c;\n    private int[] a;\n\n    public List<Integer> countSmaller(int[] nums) {\n        List<Integer> resultList = new ArrayList<Integer>(); \n        discretization(nums);\n        init(nums.length + 5);\n        for (int i = nums.length - 1; i >= 0; --i) {\n            int id = getId(nums[i]);\n            resultList.add(query(id - 1));\n            update(id);\n        }\n        Collections.reverse(resultList);\n        return resultList;\n    }\n\n    private void init(int length) {\n        c = new int[length];\n        Arrays.fill(c, 0);\n    }\n\n    private int lowBit(int x) {\n        return x & (-x);\n    }\n\n    private void update(int pos) {\n        while (pos < c.length) {\n            c[pos] += 1;\n            pos += lowBit(pos);\n        }\n    }\n\n    private int query(int pos) {\n        int ret = 0;\n        while (pos > 0) {\n            ret += c[pos];\n            pos -= lowBit(pos);\n        }\n\n        return ret;\n    }\n\n    private void discretization(int[] nums) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (int num : nums) {\n            set.add(num);\n        }\n        int size = set.size();\n        a = new int[size];\n        int index = 0;\n        for (int num : set) {\n            a[index++] = num;\n        }\n        Arrays.sort(a);\n    }\n\n    private int getId(int x) {\n        return Arrays.binarySearch(a, x) + 1;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    vector<int> c;\n    vector<int> a;\n\n    void Init(int length) {\n        c.resize(length, 0);\n    }\n\n    int LowBit(int x) {\n        return x & (-x);\n    }\n\n    void Update(int pos) {\n        while (pos < c.size()) {\n            c[pos] += 1;\n            pos += LowBit(pos);\n        }\n    }\n\n    int Query(int pos) {\n        int ret = 0;\n\n        while (pos > 0) {\n            ret += c[pos];\n            pos -= LowBit(pos);\n        }\n\n        return ret;\n    }\n\n    void Discretization(vector<int>& nums) {\n        a.assign(nums.begin(), nums.end());\n        sort(a.begin(), a.end());\n        a.erase(unique(a.begin(), a.end()), a.end());\n    }\n    \n    int getId(int x) {\n        return lower_bound(a.begin(), a.end(), x) - a.begin() + 1;\n    }\npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n        vector<int> resultList;\n\n        Discretization(nums);\n\n        Init(nums.size() + 5);\n        \n        for (int i = (int)nums.size() - 1; i >= 0; --i) {\n            int id = getId(nums[i]);\n            resultList.push_back(Query(id - 1));\n            Update(id);\n        }\n\n        reverse(resultList.begin(), resultList.end());\n\n        return resultList;\n    }\n};\n```\n\n```golang [sol1-Golang]\nvar a, c []int\n\nfunc countSmaller(nums []int) []int {\n    resultList := []int{}\n    discretization(nums)\n    c = make([]int, len(nums) + 5)\n    for i := len(nums) - 1; i >= 0; i-- {\n        id := getId(nums[i])\n        resultList = append(resultList, query(id - 1))\n        update(id)\n    }\n    for i := 0; i < len(resultList)/2; i++ {\n        resultList[i], resultList[len(resultList)-1-i] = resultList[len(resultList)-1-i], resultList[i]\n    }\n    return resultList\n}\n\nfunc lowBit(x int) int {\n    return x & (-x)\n}\n\nfunc update(pos int) {\n    for pos < len(c) {\n        c[pos]++\n        pos += lowBit(pos)\n    }\n}\n\nfunc query(pos int) int {\n    ret := 0\n    for pos > 0 {\n        ret += c[pos]\n        pos -= lowBit(pos)\n    }\n    return ret\n}\n\nfunc discretization(nums []int) {\n    set := map[int]struct{}{}\n    for _, num := range nums {\n        set[num] = struct{}{} \n    }\n    a = make([]int, 0, len(nums))\n    for num := range set {\n        a = append(a, num)\n    }\n    sort.Ints(a)\n}\n\nfunc getId(x int) int {\n    return sort.SearchInts(a, x) + 1\n}\n```\n\n```C [sol1-C]\nint LowBit(int x) { return x & (-x); }\n\nvoid Update(int* c, int n, int pos) {\n    while (pos < n) {\n        c[pos] += 1;\n        pos += LowBit(pos);\n    }\n}\n\nint Query(int* c, int n, int pos) {\n    int ret = 0;\n\n    while (pos > 0) {\n        ret += c[pos];\n        pos -= LowBit(pos);\n    }\n\n    return ret;\n}\n\nint lower_bound(int* a, int n, int x) {\n    int l = 0, r = n;\n    while (l < r) {\n        int mid = (l + r) >> 1;\n        if (a[mid] < x) {\n            l = mid + 1;\n        } else {\n            r = mid;\n        }\n    }\n    return l;\n}\n\nint comp(const void* a, const void* b) { return (*(int*)a - *(int*)b); }\n\nint Discretization(int* a, int* nums, int n) {\n    memcpy(a, nums, sizeof(int) * n);\n    qsort(a, n, sizeof(int), comp);\n    int m = 0;\n    for (int i = 1; i < n; i++) {\n        if (a[i] > a[m]) {\n            a[++m] = a[i];\n        }\n    }\n    return m + 1;\n}\nint* countSmaller(int* nums, int numsSize, int* returnSize) {\n    int* a = (int*)malloc(sizeof(int) * numsSize);\n    int* c = (int*)malloc(sizeof(int) * (numsSize + 1));\n    int* ret = (int*)malloc(sizeof(int) * numsSize);\n    memset(a, 0, sizeof(int) * numsSize);\n    memset(c, 0, sizeof(int) * (numsSize + 1));\n    memset(ret, 0, sizeof(int) * numsSize);\n\n    int m = Discretization(a, nums, numsSize);\n    for (int i = numsSize - 1; i >= 0; --i) {\n        int id = lower_bound(a, m, nums[i]) + 1;\n        ret[i] = Query(c, m + 1, id - 1);\n        Update(c, m + 1, id);\n    }\n    free(a);\n    free(c);\n    *returnSize = numsSize;\n    return ret;\n}\n```\n\n**复杂度分析**\n\n假设题目给出的序列长度为 $n$。\n\n- 时间复杂度：我们梳理一下这个算法的流程，这里离散化使用哈希表去重，然后再对去重的数组进行排序，时间代价为 $O(n \\log n)$；初始化树状数组的时间代价是 $O(n)$；通过值获取离散化 $\\rm id$ 的操作单次时间代价为 $O(\\log n)$；对于每个序列中的每个元素，都会做一次查询 $\\rm id$、单点修改和前缀和查询，总的时间代价为 $O(n \\log n)$。故渐进时间复杂度为 $O(n \\log n)$。\n- 空间复杂度：这里用到的离散化数组、树状数组、哈希表的空间代价都是 $O(n)$，故渐进空间复杂度为 $O(n)$。\n\n\n#### 方法二：归并排序\n\n**预备知识**\n\n这里假设读者已经知道如何使用归并排序的方法计算序列的逆序对数，如果读者还不知道的话可以参考 [「剑指 Offer 51. 数组中的逆序对」](https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/) 的官方题解哦。\n\n**思路与算法**\n\n我们发现「离散化树状数组」的方法几乎于 [「剑指 Offer 51. 数组中的逆序对」](https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/) 中的完全相同，那么我们可不可以借鉴逆序对问题中的归并排序的方法呢？\n\n我们还是要在「归并排序」的「并」中做文章。我们通过一个实例来看看。假设我们有两个已排序的序列等待合并，分别是 $L = \\{ 8, 12, 16, 22, 100 \\}$ 和 $R = \\{ 7, 26, 55, 64, 91 \\}$。一开始我们用指针 `lPtr = 0` 指向 $L$ 的头部，`rPtr = 0` 指向 $R$ 的头部。记已经合并好的部分为 $M$。\n\n```\nL = [8, 12, 16, 22, 100]   R = [7, 26, 55, 64, 91]  M = []\n     |                          |\n   lPtr                       rPtr\n```\n\n我们发现 `lPtr` 指向的元素大于 `rPtr` 指向的元素，于是把 `rPtr` 指向的元素放入答案，并把 `rPtr` 后移一位。\n\n```\nL = [8, 12, 16, 22, 100]   R = [7, 26, 55, 64, 91]  M = [7]\n     |                              |\n    lPtr                          rPtr\n```\n\n接着我们继续合并：\n\n```\nL = [8, 12, 16, 22, 100]   R = [7, 26, 55, 64, 91]  M = [8, 9]\n        |                          |\n       lPtr                       rPtr\n```\n\n此时 `lPtr` 比 `rPtr` 小，把 `lPtr` 对应的数加入答案。如果我们要统计 $8$ 的右边比 $8$ 小的元素，这里 $7$ 对它做了一次贡献。如果带合并的序列 $L = \\{ 8, 12, 16, 22, 100 \\}$，$R = \\{ 7, 7, 7, 26, 55, 64, 91\\}$，那么一定有一个时刻，`lPtr` 和 `rPtr` 分别指向这些对应的位置：\n\n```\nL = [8, 12, 16, 22, 100]   R = [7, 7, 7, 26, 55, 64, 91]  M = [7, 7, 7]\n     |                                   |\n    lPtr                                rPtr\n```\n\n下一步我们就是把 $8$ 加入 $M$ 中，此时三个 $7$ 对 $8$ 的右边比 $8$ 小的元素的贡献为 $3$。以此类推，我们可以一边合并一边计算 $R$ 的头部到 `rPtr` 前一个数字对当前 `lPtr` 指向的数字的贡献。\n\n我们发现用这种「算贡献」的思想在合并的过程中计算逆序对的数量的时候，只在 `lPtr` 右移的时候计算，是基于这样的事实：当前 `lPtr` 指向的数字比 `rPtr` 小，但是比 $R$ 中 `[0 ... rPtr - 1]` 的其他数字大，`[0 ... rPtr - 1]` 的数字是在 `lPtr` 右边但是比 `lPtr` 对应数小的数字，贡献为这些数字的个数。\n\n但是我们又遇到了新的问题，在「并」的过程中 $8$ 的位置一直在发生改变，我们应该把计算的贡献保存到哪里呢？这个时候我们引入一个新的数组，来记录每个数字对应的原数组中的下标，例如：\n\n```\n    a = [8, 9, 1, 5, 2]\nindex = [0, 1, 2, 3, 4]\n```\n\n排序的时候原数组和这个下标数组同时变化，则排序后我们得到这样的两个数组：\n\n```\n    a = [1, 2, 5, 8, 9]\nindex = [2, 4, 3, 0, 1]\n```\n\n我们用一个数组 `ans` 来记录贡献。我们对某个元素计算贡献的时候，如果它对应的下标为 `p`，我们只需要在 `ans[p]` 上加上贡献即可。\n\n大家可以参考代码来理解这个过程。\n\n**代码**\n\n```csharp [sol2-C#]\npublic class Solution {\n    private int[] index;\n\n    private int[] temp;\n\n    private int[] tempIndex;\n\n    private int[] ans;\n\n    public void Merge(int[] a, int l, int mid, int r)\n    {\n        int i = l, j = mid + 1, p = l;\n        while (i <= mid && j <= r)\n        {\n            if (a[i] <= a[j])\n            {\n                temp[p] = a[i];\n                tempIndex[p] = index[i];\n                ans[index[i]] += (j - mid - 1);\n                ++i;\n                ++p;\n            }\n            else \n            {\n                temp[p] = a[j];\n                tempIndex[p] = index[j];\n                ++j;\n                ++p;\n            }\n        }\n\n        while (i <= mid) \n        {\n            temp[p] = a[i];\n            tempIndex[p] = index[i];\n            ans[index[i]] += (j - mid - 1);\n            ++i;\n            ++p;\n        }\n\n        while (j <= r)\n        {\n            temp[p] = a[j];\n            tempIndex[p] = index[j];\n            ++j;\n            ++p;\n        }\n\n        for (int k = l; k <= r; ++k)\n        {\n            index[k] = tempIndex[k];\n            a[k] = temp[k];\n        }\n    }\n\n    public void MergeSort(int[] a, int l, int r)\n    {\n        if (l >= r) \n        {\n            return;\n        }\n\n        int mid = (l + r) >> 1;\n        MergeSort(a, l, mid);\n        MergeSort(a, mid + 1, r);\n        Merge(a, l, mid, r);\n    }\n\n    public IList<int> CountSmaller(int[] nums) {\n        this.index = new int[nums.Length];\n        this.temp = new int[nums.Length];\n        this.tempIndex = new int[nums.Length];\n        this.ans = new int[nums.Length];\n\n        for (int i = 0; i < nums.Length; ++i)\n        {\n            index[i] = i;\n        }\n\n        int l = 0, r = nums.Length - 1;\n        MergeSort(nums, l, r);\n\n        return new List<int>(ans);\n    }\n}\n```\n\n```Java [sol2-Java]\nclass Solution {\n    private int[] index;\n    private int[] temp;\n    private int[] tempIndex;\n    private int[] ans;\n\n    public List<Integer> countSmaller(int[] nums) {\n        this.index = new int[nums.length];\n        this.temp = new int[nums.length];\n        this.tempIndex = new int[nums.length];\n        this.ans = new int[nums.length];\n        for (int i = 0; i < nums.length; ++i) {\n            index[i] = i;\n        }\n        int l = 0, r = nums.length - 1;\n        mergeSort(nums, l, r);\n        List<Integer> list = new ArrayList<Integer>();\n        for (int num : ans) {\n            list.add(num);\n        }\n        return list;\n    }\n\n    public void mergeSort(int[] a, int l, int r) {\n        if (l >= r) {\n            return;\n        }\n        int mid = (l + r) >> 1;\n        mergeSort(a, l, mid);\n        mergeSort(a, mid + 1, r);\n        merge(a, l, mid, r);\n    }\n\n    public void merge(int[] a, int l, int mid, int r) {\n        int i = l, j = mid + 1, p = l;\n        while (i <= mid && j <= r) {\n            if (a[i] <= a[j]) {\n                temp[p] = a[i];\n                tempIndex[p] = index[i];\n                ans[index[i]] += (j - mid - 1);\n                ++i;\n                ++p;\n            } else {\n                temp[p] = a[j];\n                tempIndex[p] = index[j];\n                ++j;\n                ++p;\n            }\n        }\n        while (i <= mid)  {\n            temp[p] = a[i];\n            tempIndex[p] = index[i];\n            ans[index[i]] += (j - mid - 1);\n            ++i;\n            ++p;\n        }\n        while (j <= r) {\n            temp[p] = a[j];\n            tempIndex[p] = index[j];\n            ++j;\n            ++p;\n        }\n        for (int k = l; k <= r; ++k) {\n            index[k] = tempIndex[k];\n            a[k] = temp[k];\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n \\log n)$，即归并排序的时间复杂度。\n+ 空间复杂度：$O(n)$，这里归并排序的临时数组、下标映射数组以及答案数组的空间代价均为 $O(n)$。"
}