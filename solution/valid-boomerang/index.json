{
	"titleSlug": "valid-boomerang",
	"slug": "you-xiao-de-hui-xuan-biao-by-leetcode-so-yqby",
	"url": "https://leetcode-cn.com/problems/valid-boomerang/solution/you-xiao-de-hui-xuan-biao-by-leetcode-so-yqby/",
	"content": "#### 方法一：向量叉乘\n\n计算从 $\\textit{points}[0]$ 开始，分别指向 $\\textit{points}[1]$ 和 $\\textit{points}[2]$ 的向量 $\\vec{v}_1$ 和 $\\vec{v}_2$。「三点各不相同且不在一条直线上」等价于「这两个向量的叉乘结果不为零」：\n$$\\vec{v}_1 \\times \\vec{v}_2 \\ne \\vec{0}$$\n\n```Python [sol1-Python3]\nclass Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        v1 = (points[1][0] - points[0][0], points[1][1] - points[0][1])\n        v2 = (points[2][0] - points[0][0], points[2][1] - points[0][1])\n        return v1[0] * v2[1] - v1[1] * v2[0] != 0\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isBoomerang(vector<vector<int>>& points) {\n        vector<int> v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};\n        vector<int> v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};\n        return v1[0] * v2[1] - v1[1] * v2[0] != 0;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isBoomerang(int[][] points) {\n        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};\n        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};\n        return v1[0] * v2[1] - v1[1] * v2[0] != 0;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool IsBoomerang(int[][] points) {\n        int[] v1 = {points[1][0] - points[0][0], points[1][1] - points[0][1]};\n        int[] v2 = {points[2][0] - points[0][0], points[2][1] - points[0][1]};\n        return v1[0] * v2[1] - v1[1] * v2[0] != 0;\n    }\n}\n```\n\n```C [sol1-C]\nbool isBoomerang(int** points, int pointsSize, int* pointsColSize){\n    int v1[2] = {points[1][0] - points[0][0], points[1][1] - points[0][1]};\n    int v2[2] = {points[2][0] - points[0][0], points[2][1] - points[0][1]};\n    return v1[0] * v2[1] - v1[1] * v2[0] != 0;\n}\n```\n\n```go [sol1-Golang]\nfunc isBoomerang(points [][]int) bool {\n    v1 := [2]int{points[1][0] - points[0][0], points[1][1] - points[0][1]}\n    v2 := [2]int{points[2][0] - points[0][0], points[2][1] - points[0][1]}\n    return v1[0]*v2[1]-v1[1]*v2[0] != 0\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar isBoomerang = function(points) {\n    const v1 = [points[1][0] - points[0][0], points[1][1] - points[0][1]];\n    const v2 = [points[2][0] - points[0][0], points[2][1] - points[0][1]];\n    return v1[0] * v2[1] - v1[1] * v2[0] != 0;\n};\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(1)$。\n\n+ 空间复杂度：$O(1)$。"
}