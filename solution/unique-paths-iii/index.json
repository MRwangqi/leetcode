{
	"titleSlug": "unique-paths-iii",
	"slug": "bu-tong-lu-jing-iii-by-leetcode",
	"url": "https://leetcode-cn.com/problems/unique-paths-iii/solution/bu-tong-lu-jing-iii-by-leetcode/",
	"content": "#### 方法一：回溯深度优先搜索\n\n**思路与算法**\n\n让我们尝试遍历每一个 `0` 方格，并在走过的方格里留下一个障碍。回溯的时候，我们要删除那些自己留下的障碍。\n\n介于输入数据的限制，这个方法是可以通过的，因为一个不好的路径很快就会因没有无障碍的方格可以走而被卡住。 \n\n```java [2RULHstn-Java]\nclass Solution {\n    int ans;\n    int[][] grid;\n    int tr, tc;\n    int[] dr = new int[]{0, -1, 0, 1};\n    int[] dc = new int[]{1, 0, -1, 0};\n    int R, C;\n\n    public int uniquePathsIII(int[][] grid) {\n        this.grid = grid;\n        R = grid.length;\n        C = grid[0].length;\n\n        int todo = 0;\n        int sr = 0, sc = 0;\n        for (int r = 0; r < R; ++r)\n            for (int c = 0; c < C; ++c) {\n                if (grid[r][c] != -1) {\n                    todo++;\n                }\n\n                if (grid[r][c] == 1) {\n                    sr = r;\n                    sc = c;\n                } else if (grid[r][c] == 2) {\n                    tr = r;\n                    tc = c;\n                }\n            }\n\n        ans = 0;\n        dfs(sr, sc, todo);\n        return ans;\n    }\n\n    public void dfs(int r, int c, int todo) {\n        todo--;\n        if (todo < 0) return;\n        if (r == tr && c == tc) {\n            if (todo == 0) ans++;\n            return;\n        }\n\n        grid[r][c] = 3;\n        for (int k = 0; k < 4; ++k) {\n            int nr = r + dr[k];\n            int nc = c + dc[k];\n            if (0 <= nr && nr < R && 0 <= nc && nc < C) {\n                if (grid[nr][nc] % 2 == 0)\n                    dfs(nr, nc, todo);\n            }\n        }\n        grid[r][c] = 0;\n    }\n}\n```\n```python [2RULHstn-Python]\nclass Solution:\n    def uniquePathsIII(self, grid):\n        R, C = len(grid), len(grid[0])\n\n        def nei***ors(r, c):\n            for nr, nc in ((r-1, c), (r, c-1), (r+1, c), (r, c+1)):\n                if 0 <= nr < R and 0 <= nc < C and grid[nr][nc] % 2 == 0:\n                    yield nr, nc\n\n        todo = 0\n        for r, row in enumerate(grid):\n            for c, val in enumerate(row):\n                if val != -1: todo += 1\n                if val == 1: sr, sc = r, c\n                if val == 2: tr, tc = r, c\n\n        self.ans = 0\n        def dfs(r, c, todo):\n            todo -= 1\n            if todo < 0: return\n            if r == tr and c == tc:\n                if todo == 0:\n                    self.ans += 1\n                return\n\n            grid[r][c] = -1\n            for nr, nc in nei***ors(r, c):\n                dfs(nr, nc, todo)\n            grid[r][c] = 0\n\n        dfs(sr, sc, todo)\n        return self.ans\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(4^{R*C})$，其中 $R, C$ 是这个二维网格行与列的大小。（我们可以找到一个更加精确的界限，但是这个界限已经超越了本文的范围）\n\n* 空间复杂度：$O(R*C)$。\n\n\n\n\n\n---\n#### 方法二：动态规划\n\n**思路与算法**\n\n让我们定义 `dp(r, c, todo)` 为从  `(r, c)` 开始行走，还没有遍历的无障碍方格集合为 `todo` 的好路径的数量。\n\n我们可以使用一个与 *方法一* 类似的方法，并通过记忆化状态 `(r, c, todo)` 的答案来避免重复搜索。\n\n```java [pRtnUqNa-Java]\nclass Solution {\n    int ans;\n    int[][] grid;\n    int R, C;\n    int tr, tc, target;\n    int[] dr = new int[]{0, -1, 0, 1};\n    int[] dc = new int[]{1, 0, -1, 0};\n    Integer[][][] memo;\n\n    public int uniquePathsIII(int[][] grid) {\n        this.grid = grid;\n        R = grid.length;\n        C = grid[0].length;\n        target = 0;\n\n        int sr = 0, sc = 0;\n        for (int r = 0; r < R; ++r)\n            for (int c = 0; c < C; ++c) {\n                if (grid[r][c] % 2 == 0)\n                    target |= code(r, c);\n\n                if (grid[r][c] == 1) {\n                    sr = r;\n                    sc = c;\n                } else if (grid[r][c] == 2) {\n                    tr = r;\n                    tc = c;\n                }\n            }\n\n        memo = new Integer[R][C][1 << R*C];\n        return dp(sr, sc, target);\n    }\n\n    public int code(int r, int c) {\n        return 1 << (r * C + c);\n    }\n\n    public Integer dp(int r, int c, int todo) {\n        if (memo[r][c][todo] != null)\n            return memo[r][c][todo];\n\n        if (r == tr && c == tc) {\n            return todo == 0 ? 1 : 0;\n        }\n\n        int ans = 0;\n        for (int k = 0; k < 4; ++k) {\n            int nr = r + dr[k];\n            int nc = c + dc[k];\n            if (0 <= nr && nr < R && 0 <= nc && nc < C) {\n                if ((todo & code(nr, nc)) != 0)\n                    ans += dp(nr, nc, todo ^ code(nr, nc));\n            }\n        }\n        memo[r][c][todo] = ans;\n        return ans;\n    }\n}\n```\n```python [pRtnUqNa-Python]\nfrom functools import lru_cache\nclass Solution:\n    def uniquePathsIII(self, grid):\n        R, C = len(grid), len(grid[0])\n\n        def code(r, c):\n            return 1 << (r * C + c)\n\n        def nei***ors(r, c):\n            for nr, nc in ((r-1, c), (r, c-1), (r+1, c), (r, c+1)):\n                if 0 <= nr < R and 0 <= nc < C and grid[nr][nc] % 2 == 0:\n                    yield nr, nc\n\n        target = 0\n        for r, row in enumerate(grid):\n            for c, val in enumerate(row):\n                if val % 2 == 0:\n                    target |= code(r, c)\n\n                if val == 1:\n                    sr, sc = r, c\n                if val == 2:\n                    tr, tc = r, c\n\n        @lru_cache(None)\n        def dp(r, c, todo):\n            if r == tr and c == tc:\n                return +(todo == 0)\n\n            ans = 0\n            for nr, nc in nei***ors(r, c):\n                if todo & code(nr, nc):\n                    ans += dp(nr, nc, todo ^ code(nr, nc))\n            return ans\n\n        return dp(sr, sc, target)\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(R * C * 2^{R*C})$，其中 $R, C$ 是给定二维网格行与列的大小。\n* 空间复杂度：$O(R * C * 2^{R*C})$。\n  \n\n  \n"
}