{
	"titleSlug": "island-perimeter",
	"slug": "dao-yu-de-zhou-chang-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/island-perimeter/solution/dao-yu-de-zhou-chang-by-leetcode-solution/",
	"content": "#### 方法一：迭代\n\n**思路与算法**\n\n对于一个陆地格子的每条边，它被算作岛屿的周长当且仅当这条边为网格的边界或者相邻的另一个格子为水域。 因此，我们可以遍历每个陆地格子，看其四个方向是否为边界或者水域，如果是，将这条边的贡献（即 $1$）加入答案 $\\textit{ans}$ 中即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\n    constexpr static int dx[4] = {0, 1, 0, -1};\n    constexpr static int dy[4] = {1, 0, -1, 0};\npublic:\n    int islandPerimeter(vector<vector<int>> &grid) {\n        int n = grid.size(), m = grid[0].size();\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j]) {\n                    int cnt = 0;\n                    for (int k = 0; k < 4; ++k) {\n                        int tx = i + dx[k];\n                        int ty = j + dy[k];\n                        if (tx < 0 || tx >= n || ty < 0 || ty >= m || !grid[tx][ty]) {\n                            cnt += 1;\n                        }\n                    }\n                    ans += cnt;\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    static int[] dx = {0, 1, 0, -1};\n    static int[] dy = {1, 0, -1, 0};\n\n    public int islandPerimeter(int[][] grid) {\n        int n = grid.length, m = grid[0].length;\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j] == 1) {\n                    int cnt = 0;\n                    for (int k = 0; k < 4; ++k) {\n                        int tx = i + dx[k];\n                        int ty = j + dy[k];\n                        if (tx < 0 || tx >= n || ty < 0 || ty >= m || grid[tx][ty] == 0) {\n                            cnt += 1;\n                        }\n                    }\n                    ans += cnt;\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar islandPerimeter = function (grid) {\n    const dx = [0, 1, 0, -1];\n    const dy = [1, 0, -1, 0];\n    const n = grid.length, m = grid[0].length;\n    let ans = 0;\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < m; ++j) {\n            if (grid[i][j]) {\n                let cnt = 0;\n                for (let k = 0; k < 4; ++k) {\n                    let tx = i + dx[k];\n                    let ty = j + dy[k];\n                    if (tx < 0 || tx >= n || ty < 0 || ty >= m || !grid[tx][ty]) {\n                        cnt += 1;\n                    }\n                }\n                ans += cnt;\n            }\n        }\n    }\n    return ans;\n};\n```\n\n```Golang [sol1-Golang]\ntype pair struct{ x, y int }\nvar dir4 = []pair{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\nfunc islandPerimeter(grid [][]int) (ans int) {\n    n, m := len(grid), len(grid[0])\n    for i, row := range grid {\n        for j, v := range row {\n            if v == 1 {\n                for _, d := range dir4 {\n                    if x, y := i+d.x, j+d.y; x < 0 || x >= n || y < 0 || y >= m || grid[x][y] == 0 {\n                        ans++\n                    }\n                }\n            }\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nconst int dx[4] = {0, 1, 0, -1};\nconst int dy[4] = {1, 0, -1, 0};\n\nint islandPerimeter(int** grid, int gridSize, int* gridColSize) {\n    int n = gridSize, m = gridColSize[0];\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (grid[i][j]) {\n                int cnt = 0;\n                for (int k = 0; k < 4; ++k) {\n                    int tx = i + dx[k];\n                    int ty = j + dy[k];\n                    if (tx < 0 || tx >= n || ty < 0 || ty >= m || !grid[tx][ty]) {\n                        cnt += 1;\n                    }\n                }\n                ans += cnt;\n            }\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nm)$，其中 $n$ 为网格的高度，$m$ 为网格的宽度。我们需要遍历每个格子，每个格子要看其周围 $4$ 个格子是否为岛屿，因此总时间复杂度为 $O(4nm)=O(nm)$。\n\n-  空间复杂度：$O(1)$。只需要常数空间存放若干变量。\n\n#### 方法二：深度优先搜索\n\n**思路与算法**\n\n我们也可以将方法一改成深度优先搜索遍历的方式，此时遍历的方式可扩展至统计多个岛屿各自的周长。需要注意的是为了防止陆地格子在深度优先搜索中被重复遍历导致死循环，我们需要将遍历过的陆地格子标记为已经遍历过，下面的代码中我们设定值为 $2$ 的格子为已经遍历过的陆地格子。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\n    constexpr static int dx[4] = {0, 1, 0, -1};\n    constexpr static int dy[4] = {1, 0, -1, 0};\npublic:\n    int dfs(int x, int y, vector<vector<int>> &grid, int n, int m) {\n        if (x < 0 || x >= n || y < 0 || y >= m || grid[x][y] == 0) {\n            return 1;\n        }\n        if (grid[x][y] == 2) {\n            return 0;\n        }\n        grid[x][y] = 2;\n        int res = 0;\n        for (int i = 0; i < 4; ++i) {\n            int tx = x + dx[i];\n            int ty = y + dy[i];\n            res += dfs(tx, ty, grid, n, m);\n        }\n        return res;\n    }\n    int islandPerimeter(vector<vector<int>> &grid) {\n        int n = grid.size(), m = grid[0].size();\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j] == 1) {\n                    ans += dfs(i, j, grid, n, m);\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    static int[] dx = {0, 1, 0, -1};\n    static int[] dy = {1, 0, -1, 0};\n\n    public int islandPerimeter(int[][] grid) {\n        int n = grid.length, m = grid[0].length;\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j] == 1) {\n                    ans += dfs(i, j, grid, n, m);\n                }\n            }\n        }\n        return ans;\n    }\n\n    public int dfs(int x, int y, int[][] grid, int n, int m) {\n        if (x < 0 || x >= n || y < 0 || y >= m || grid[x][y] == 0) {\n            return 1;\n        }\n        if (grid[x][y] == 2) {\n            return 0;\n        }\n        grid[x][y] = 2;\n        int res = 0;\n        for (int i = 0; i < 4; ++i) {\n            int tx = x + dx[i];\n            int ty = y + dy[i];\n            res += dfs(tx, ty, grid, n, m);\n        }\n        return res;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar islandPerimeter = function (grid) {\n    const dx = [0, 1, 0, -1];\n    const dy = [1, 0, -1, 0];\n    const n = grid.length, m = grid[0].length;\n\n    const dfs = (x, y) => {\n        if (x < 0 || x >= n || y < 0 || y >= m || grid[x][y] === 0) {\n            return 1;\n        }\n        if (grid[x][y] === 2) {\n            return 0;\n        }\n        grid[x][y] = 2;\n        let res = 0;\n        for (let i = 0; i < 4; ++i) {\n            const tx = x + dx[i];\n            const ty = y + dy[i];\n            res += dfs(tx, ty);\n        }\n        return res;\n    }\n\n    let ans = 0;\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < m; ++j) {\n            if (grid[i][j] === 1) {\n                ans += dfs(i, j);\n            }\n        }\n    }\n    return ans;\n};\n```\n\n```Golang [sol2-Golang]\ntype pair struct{ x, y int }\nvar dir4 = []pair{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\nfunc islandPerimeter(grid [][]int) (ans int) {\n    n, m := len(grid), len(grid[0])\n    var dfs func(x, y int)\n    dfs = func(x, y int) {\n        if x < 0 || x >= n || y < 0 || y >= m || grid[x][y] == 0 {\n            ans++\n            return\n        }\n        if grid[x][y] == 2 {\n            return\n        }\n        grid[x][y] = 2\n        for _, d := range dir4 {\n            dfs(x+d.x, y+d.y)\n        }\n    }\n    for i, row := range grid {\n        for j, v := range row {\n            if v == 1 {\n                dfs(i, j)\n            }\n        }\n    }\n    return\n}\n```\n\n```C [sol2-C]\nconst int dx[4] = {0, 1, 0, -1};\nconst int dy[4] = {1, 0, -1, 0};\n\nint dfs(int x, int y, int** grid, int n, int m) {\n    if (x < 0 || x >= n || y < 0 || y >= m || grid[x][y] == 0) {\n        return 1;\n    }\n    if (grid[x][y] == 2) {\n        return 0;\n    }\n    grid[x][y] = 2;\n    int res = 0;\n    for (int i = 0; i < 4; ++i) {\n        int tx = x + dx[i];\n        int ty = y + dy[i];\n        res += dfs(tx, ty, grid, n, m);\n    }\n    return res;\n}\n\nint islandPerimeter(int** grid, int gridSize, int* gridColSize) {\n    int n = gridSize, m = gridColSize[0];\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (grid[i][j] == 1) {\n                ans += dfs(i, j, grid, n, m);\n            }\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nm)$，其中 $n$ 为网格的高度，$m$ 为网格的宽度。每个格子至多会被遍历一次，因此总时间复杂度为 $O(nm)$。\n\n- 空间复杂度：$O(nm)$。深度优先搜索复杂度取决于递归的栈空间，而栈空间最坏情况下会达到 $O(nm)$。"
}