{
	"titleSlug": "longest-valid-parentheses",
	"slug": "zui-chang-you-xiao-gua-hao-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/longest-valid-parentheses/solution/zui-chang-you-xiao-gua-hao-by-leetcode-solution/",
	"content": "### 📺视频题解  \n![32.最长有效括号.mp4](0a7923be-03e4-4682-9851-1136a30387ae)\n\n### 📖文字题解\n#### 方法一：动态规划\n\n**思路和算法**\n\n我们定义 $\\textit{dp}[i]$ 表示以下标 $i$ 字符结尾的最长有效括号的长度。我们将 $\\textit{dp}$ 数组全部初始化为 $0$ 。显然有效的子串一定以 $\\text{‘)’}$ 结尾，因此我们可以知道以 $\\text{‘(’}$ 结尾的子串对应的 $\\textit{dp}$ 值必定为 $0$ ，我们只需要求解 $\\text{‘)’}$ 在 $\\textit{dp}$ 数组中对应位置的值。\n\n我们从前往后遍历字符串求解 $\\textit{dp}$ 值，我们每两个字符检查一次：\n\n1. $s[i] = \\text{‘)’}$ 且 $s[i - 1] = \\text{‘(’}$，也就是字符串形如 $“……()”$，我们可以推出：\n    $$\n    \\textit{dp}[i]=\\textit{dp}[i-2]+2\n    $$\n    我们可以进行这样的转移，是因为结束部分的 \"()\" 是一个有效子字符串，并且将之前有效子字符串的长度增加了 $2$ 。\n\n2. $s[i] = \\text{‘)’}$ 且 $s[i - 1] = \\text{‘)’}$，也就是字符串形如 $“……))”$，我们可以推出：\n    如果 $s[i - \\textit{dp}[i - 1] - 1] = \\text{‘(’}$，那么\n    $$\n    \\textit{dp}[i]=\\textit{dp}[i-1]+\\textit{dp}[i-\\textit{dp}[i-1]-2]+2\n    $$\n\n我们考虑如果倒数第二个 $\\text{‘)’}$ 是一个有效子字符串的一部分（记作 $sub_s$），对于最后一个 $\\text{‘)’}$ ，如果它是一个更长子字符串的一部分，那么它一定有一个对应的 $\\text{‘(’}$ ，且它的位置在倒数第二个 $\\text{‘)’}$ 所在的有效子字符串的前面（也就是 $sub_s$ 的前面）。因此，如果子字符串 $sub_s$ 的前面恰好是 $\\text{‘(’}$ ，那么我们就用 $2$ 加上 $sub_s$ 的长度（$\\textit{dp}[i-1]$）去更新 $\\textit{dp}[i]$。同时，我们也会把有效子串 $“(sub_s)”$ 之前的有效子串的长度也加上，也就是再加上 $\\textit{dp}[i-\\textit{dp}[i-1]-2]$。\n\n最后的答案即为 $\\textit{dp}$ 数组中的最大值。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/32/p1.png),![fig2](https://assets.leetcode-cn.com/solution-static/32/p2.png),![fig3](https://assets.leetcode-cn.com/solution-static/32/p3.png),![fig4](https://assets.leetcode-cn.com/solution-static/32/p4.png),![fig5](https://assets.leetcode-cn.com/solution-static/32/p5.png),![fig6](https://assets.leetcode-cn.com/solution-static/32/p6.png),![fig7](https://assets.leetcode-cn.com/solution-static/32/p7.png),![fig8](https://assets.leetcode-cn.com/solution-static/32/p8.png)>\n\n\n```Java [sol1-Java]\nclass Solution {\n    public int longestValidParentheses(String s) {\n        int maxans = 0;\n        int[] dp = new int[s.length()];\n        for (int i = 1; i < s.length(); i++) {\n            if (s.charAt(i) == ')') {\n                if (s.charAt(i - 1) == '(') {\n                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;\n                } else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {\n                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;\n                }\n                maxans = Math.max(maxans, dp[i]);\n            }\n        }\n        return maxans;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int maxans = 0, n = s.length();\n        vector<int> dp(n, 0);\n        for (int i = 1; i < n; i++) {\n            if (s[i] == ')') {\n                if (s[i - 1] == '(') {\n                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;\n                } else if (i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] == '(') {\n                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;\n                }\n                maxans = max(maxans, dp[i]);\n            }\n        }\n        return maxans;\n    }\n};\n```\n\n```C [sol1-C]\nint longestValidParentheses(char* s) {\n    int maxans = 0, n = strlen(s);\n    if (n == 0) return 0;\n    int dp[n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 1; i < n; i++) {\n        if (s[i] == ')') {\n            if (s[i - 1] == '(') {\n                dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;\n            } else if (i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] == '(') {\n                dp[i] = dp[i - 1] +\n                        ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;\n            }\n            maxans = fmax(maxans, dp[i]);\n        }\n    }\n    return maxans;\n}\n```\n\n```golang [sol1-Golang]\nfunc longestValidParentheses(s string) int {\n    maxAns := 0\n    dp := make([]int, len(s))\n    for i := 1; i < len(s); i++ {\n        if s[i] == ')' {\n            if s[i-1] == '(' {\n                if i >= 2 {\n                    dp[i] = dp[i - 2] + 2\n                } else {\n                    dp[i] = 2\n                }\n            } else if i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] == '(' {\n                if i - dp[i - 1] >= 2 {\n                    dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2\n                } else {\n                    dp[i] = dp[i - 1] + 2\n                }\n            }\n            maxAns = max(maxAns, dp[i])\n        }\n    }\n    return maxAns\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(n)$，其中 $n$ 为字符串的长度。我们只需遍历整个字符串一次，即可将 $\\textit{dp}$ 数组求出来。\n\n* 空间复杂度： $O(n)$。我们需要一个大小为 $n$ 的 $\\textit{dp}$ 数组。\n\n#### 方法二：栈\n\n**思路和算法**\n\n撇开方法一提及的动态规划方法，相信大多数人对于这题的第一直觉是找到每个可能的子串后判断它的有效性，但这样的时间复杂度会达到 $O(n^3)$，无法通过所有测试用例。但是通过栈，我们可以在遍历给定字符串的过程中去判断到目前为止扫描的子串的有效性，同时能得到最长有效括号的长度。\n\n具体做法是我们始终保持栈底元素为当前已经遍历过的元素中「最后一个没有被匹配的右括号的下标」，这样的做法主要是考虑了边界条件的处理，栈里其他元素维护左括号的下标：\n\n- 对于遇到的每个 $\\text{‘(’}$ ，我们将它的下标放入栈中\n- 对于遇到的每个 $\\text{‘)’}$ ，我们先弹出栈顶元素表示匹配了当前右括号：\n  - 如果栈为空，说明当前的右括号为没有被匹配的右括号，我们将其下标放入栈中来更新我们之前提到的「最后一个没有被匹配的右括号的下标」\n  - 如果栈不为空，当前右括号的下标减去栈顶元素即为「以该右括号为结尾的最长有效括号的长度」\n\n我们从前往后遍历字符串并更新答案即可。\n\n需要注意的是，如果一开始栈为空，第一个字符为左括号的时候我们会将其放入栈中，这样就不满足提及的「最后一个没有被匹配的右括号的下标」，为了保持统一，我们在一开始的时候往栈中放入一个值为 $-1$ 的元素。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/32/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/32/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/32/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/32/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/32/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/32/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/32/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/32/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/32/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/32/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/32/11.png)>\n\n\n```Java [sol2-Java]\nclass Solution {\n    public int longestValidParentheses(String s) {\n        int maxans = 0;\n        Deque<Integer> stack = new LinkedList<Integer>();\n        stack.push(-1);\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    stack.push(i);\n                } else {\n                    maxans = Math.max(maxans, i - stack.peek());\n                }\n            }\n        }\n        return maxans;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int maxans = 0;\n        stack<int> stk;\n        stk.push(-1);\n        for (int i = 0; i < s.length(); i++) {\n            if (s[i] == '(') {\n                stk.push(i);\n            } else {\n                stk.pop();\n                if (stk.empty()) {\n                    stk.push(i);\n                } else {\n                    maxans = max(maxans, i - stk.top());\n                }\n            }\n        }\n        return maxans;\n    }\n};\n```\n\n```C [sol2-C]\nint longestValidParentheses(char* s) {\n    int maxans = 0, n = strlen(s);\n    int stk[n + 1], top = -1;\n    stk[++top] = -1;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '(') {\n            stk[++top] = i;\n        } else {\n            --top;\n            if (top == -1) {\n                stk[++top] = i;\n            } else {\n                maxans = fmax(maxans, i - stk[top]);\n            }\n        }\n    }\n    return maxans;\n}\n```\n\n```golang [sol2-Golang]\nfunc longestValidParentheses(s string) int {\n    maxAns := 0\n    stack := []int{}\n    stack = append(stack, -1)\n    for i := 0; i < len(s); i++ {\n        if s[i] == '(' {\n            stack = append(stack, i)\n        } else {\n            stack = stack[:len(stack)-1]\n            if len(stack) == 0 {\n                stack = append(stack, i)\n            } else {\n                maxAns = max(maxAns, i - stack[len(stack)-1])\n            }\n        }\n    }\n    return maxAns\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(n)$，$n$ 是给定字符串的长度。我们只需要遍历字符串一次即可。\n\n* 空间复杂度： $O(n)$。栈的大小在最坏情况下会达到 $n$，因此空间复杂度为 $O(n)$ 。\n\n#### 方法三：不需要额外的空间\n\n**思路和算法**\n\n在此方法中，我们利用两个计数器 $\\textit{left}$ 和 $\\textit{right}$ 。首先，我们从左到右遍历字符串，对于遇到的每个 $\\text{‘(’}$，我们增加 $\\textit{left}$ 计数器，对于遇到的每个 $\\text{‘)’}$ ，我们增加 $\\textit{right}$ 计数器。每当 $\\textit{left}$ 计数器与 $\\textit{right}$ 计数器相等时，我们计算当前有效字符串的长度，并且记录目前为止找到的最长子字符串。当 $\\textit{right}$ 计数器比 $\\textit{left}$ 计数器大时，我们将 $\\textit{left}$ 和 $\\textit{right}$ 计数器同时变回 $0$。\n\n这样的做法贪心地考虑了以当前字符下标结尾的有效括号长度，每次当右括号数量多于左括号数量的时候之前的字符我们都扔掉不再考虑，重新从下一个字符开始计算，但这样会漏掉一种情况，就是遍历的时候左括号的数量始终大于右括号的数量，即 `(()` ，这种时候最长有效括号是求不出来的。\n\n解决的方法也很简单，我们只需要从右往左遍历用类似的方法计算即可，只是这个时候判断条件反了过来：\n\n- 当 $\\textit{left}$ 计数器比 $\\textit{right}$ 计数器大时，我们将 $\\textit{left}$ 和 $\\textit{right}$ 计数器同时变回 $0$ \n- 当 $\\textit{left}$ 计数器与 $\\textit{right}$ 计数器相等时，我们计算当前有效字符串的长度，并且记录目前为止找到的最长子字符串\n\n这样我们就能涵盖所有情况从而求解出答案。\n\n<![f1](https://assets.leetcode-cn.com/solution-static/32/3_1.png),![f2](https://assets.leetcode-cn.com/solution-static/32/3_2.png),![f3](https://assets.leetcode-cn.com/solution-static/32/3_3.png),![f4](https://assets.leetcode-cn.com/solution-static/32/3_4.png),![f5](https://assets.leetcode-cn.com/solution-static/32/3_5.png),![f6](https://assets.leetcode-cn.com/solution-static/32/3_6.png),![f7](https://assets.leetcode-cn.com/solution-static/32/3_7.png),![f8](https://assets.leetcode-cn.com/solution-static/32/3_8.png),![f9](https://assets.leetcode-cn.com/solution-static/32/3_9.png),![f10](https://assets.leetcode-cn.com/solution-static/32/3_10.png),![f11](https://assets.leetcode-cn.com/solution-static/32/3_11.png),![f12](https://assets.leetcode-cn.com/solution-static/32/3_12.png),![f13](https://assets.leetcode-cn.com/solution-static/32/3_13.png),![f14](https://assets.leetcode-cn.com/solution-static/32/3_14.png),![f15](https://assets.leetcode-cn.com/solution-static/32/3_15.png),![f16](https://assets.leetcode-cn.com/solution-static/32/3_16.png),![f17](https://assets.leetcode-cn.com/solution-static/32/3_17.png)>\n\n```Java [sol3-Java]\nclass Solution {\n    public int longestValidParentheses(String s) {\n        int left = 0, right = 0, maxlength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = Math.max(maxlength, 2 * right);\n            } else if (right > left) {\n                left = right = 0;\n            }\n        }\n        left = right = 0;\n        for (int i = s.length() - 1; i >= 0; i--) {\n            if (s.charAt(i) == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = Math.max(maxlength, 2 * left);\n            } else if (left > right) {\n                left = right = 0;\n            }\n        }\n        return maxlength;\n    }\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int left = 0, right = 0, maxlength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s[i] == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = max(maxlength, 2 * right);\n            } else if (right > left) {\n                left = right = 0;\n            }\n        }\n        left = right = 0;\n        for (int i = (int)s.length() - 1; i >= 0; i--) {\n            if (s[i] == '(') {\n                left++;\n            } else {\n                right++;\n            }\n            if (left == right) {\n                maxlength = max(maxlength, 2 * left);\n            } else if (left > right) {\n                left = right = 0;\n            }\n        }\n        return maxlength;\n    }\n};\n```\n\n```C [sol3-C]\nint longestValidParentheses(char* s) {\n    int n = strlen(s);\n    int left = 0, right = 0, maxlength = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '(') {\n            left++;\n        } else {\n            right++;\n        }\n        if (left == right) {\n            maxlength = fmax(maxlength, 2 * right);\n        } else if (right > left) {\n            left = right = 0;\n        }\n    }\n    left = right = 0;\n    for (int i = n - 1; i >= 0; i--) {\n        if (s[i] == '(') {\n            left++;\n        } else {\n            right++;\n        }\n        if (left == right) {\n            maxlength = fmax(maxlength, 2 * left);\n        } else if (left > right) {\n            left = right = 0;\n        }\n    }\n    return maxlength;\n}\n```\n\n```golang [sol3-Golang]\nfunc longestValidParentheses(s string) int {\n    left, right, maxLength := 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == '(' {\n            left++\n        } else {\n            right++\n        }\n        if left == right {\n            maxLength = max(maxLength, 2 * right)\n        } else if right > left {\n            left, right = 0, 0\n        }\n    }\n    left, right = 0, 0\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == '(' {\n            left++\n        } else {\n            right++\n        }\n        if left == right {\n            maxLength = max(maxLength, 2 * left)\n        } else if left > right {\n            left, right = 0, 0\n        }\n    }\n    return maxLength\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(n)$，其中 $n$ 为字符串长度。我们只要正反遍历两边字符串即可。\n\n* 空间复杂度： $O(1)$。我们只需要常数空间存放若干变量。"
}