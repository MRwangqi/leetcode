{
	"titleSlug": "reveal-cards-in-increasing-order",
	"slug": "an-di-zeng-shun-xu-xian-shi-qia-pai-by-leetcode",
	"url": "https://leetcode-cn.com/problems/reveal-cards-in-increasing-order/solution/an-di-zeng-shun-xu-xian-shi-qia-pai-by-leetcode/",
	"content": "#### 方法一： 模拟法\n\n**思路和算法**\n\n直接模拟从牌组中取牌的过程就可以了。举个例子，如果从牌组中以 `[0, 2, 4, ...]` 的顺序取牌，我们只需要把最小的牌放在下标为 `0` 的地方，第二小的牌放在下标为 `1` 的地方，第三小的牌放在下标为 `4` 的地方，依次类推即可。\n\n```java [solution1-Java]\nclass Solution {\n    public int[] deckRevealedIncreasing(int[] deck) {\n        int N = deck.length;\n        Deque<Integer> index = new LinkedList();\n        for (int i = 0; i < N; ++i)\n            index.add(i);\n\n        int[] ans = new int[N];\n        Arrays.sort(deck);\n        for (int card: deck) {\n            ans[index.pollFirst()] = card;\n            if (!index.isEmpty())\n                index.add(index.pollFirst());\n        }\n\n        return ans;\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def deckRevealedIncreasing(self, deck):\n        N = len(deck)\n        index = collections.deque(range(N))\n        ans = [None] * N\n\n        for card in sorted(deck):\n            ans[index.popleft()] = card\n            if index:\n                index.append(index.popleft())\n\n        return ans\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(N \\log N)$，其中 $N$ 是牌组的大小。\n\n* 空间复杂度： $O(N)$。"
}