{
	"titleSlug": "rotate-image",
	"slug": "xuan-zhuan-tu-xiang-by-leetcode-solution-vu3m",
	"url": "https://leetcode-cn.com/problems/rotate-image/solution/xuan-zhuan-tu-xiang-by-leetcode-solution-vu3m/",
	"content": "### 📺 视频题解  \n\n![48. 旋转图像.mp4](c822bfe3-419a-42d1-a358-a78067a76355)\n\n### 📖 文字题解\n\n#### 方法一：使用辅助数组\n\n我们以题目中的示例二\n\n$$\n\\begin{bmatrix}\n5 & 1 & 9 & 11 \\\\\n2 & 4 & 8 & 10 \\\\\n13 & 3 & 6 & 7 \\\\\n15 & 14 & 12 & 16\n\\end{bmatrix}\n$$\n\n作为例子，分析将图像旋转 90 度之后，这些数字出现在什么位置。\n\n对于矩阵中的第一行而言，在旋转后，它出现在倒数第一列的位置：\n\n$$\n\\begin{bmatrix}\n5 & 1 & 9 & 11 \\\\\n\\circ & \\circ & \\circ & \\circ \\\\\n\\circ & \\circ & \\circ & \\circ \\\\\n\\circ & \\circ & \\circ & \\circ \\\\\n\\end{bmatrix}\n\\xRightarrow[]{旋转后}\n\\begin{bmatrix}\n\\circ & \\circ & \\circ & 5 \\\\\n\\circ & \\circ & \\circ & 1 \\\\\n\\circ & \\circ & \\circ & 9 \\\\\n\\circ & \\circ & \\circ & 11\n\\end{bmatrix}\n$$\n\n并且，第一行的第 $x$ 个元素在旋转后恰好是倒数第一列的第 $x$ 个元素。\n\n对于矩阵中的第二行而言，在旋转后，它出现在倒数第二列的位置：\n\n$$\n\\begin{bmatrix}\n\\circ & \\circ & \\circ & \\circ \\\\\n2 & 4 & 8 & 10 \\\\\n\\circ & \\circ & \\circ & \\circ \\\\\n\\circ & \\circ & \\circ & \\circ\n\\end{bmatrix}\n\\xRightarrow[]{旋转后}\n\\begin{bmatrix}\n\\circ & \\circ & 2 & \\circ \\\\\n\\circ & \\circ & 4 & \\circ \\\\\n\\circ & \\circ & 8 & \\circ \\\\\n\\circ & \\circ & 10 & \\circ\n\\end{bmatrix}\n$$\n\n对于矩阵中的第三行和第四行同理。这样我们可以得到规律：\n\n> 对于矩阵中第 $i$ 行的第 $j$ 个元素，在旋转后，它出现在倒数第 $i$ 列的第 $j$ 个位置。\n\n我们将其翻译成代码。由于矩阵中的行列从 $0$ 开始计数，因此对于矩阵中的元素 $\\textit{matrix}[\\textit{row}][\\textit{col}]$，在旋转后，它的新位置为 $\\textit{matrix}_\\textit{new}[\\textit{col}][n - \\textit{row} - 1]$。\n\n这样以来，我们使用一个与 $\\textit{matrix}$ 大小相同的辅助数组 ${matrix}_\\textit{new}$，临时存储旋转后的结果。我们遍历 $\\textit{matrix}$ 中的每一个元素，根据上述规则将该元素存放到 ${matrix}_\\textit{new}$ 中对应的位置。在遍历完成之后，再将 ${matrix}_\\textit{new}$ 中的结果复制到原数组中即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        // C++ 这里的 = 拷贝是值拷贝，会得到一个新的数组\n        auto matrix_new = matrix;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                matrix_new[j][n - i - 1] = matrix[i][j];\n            }\n        }\n        // 这里也是值拷贝\n        matrix = matrix_new;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public void rotate(int[][] matrix) {\n        int n = matrix.length;\n        int[][] matrix_new = new int[n][n];\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                matrix_new[j][n - i - 1] = matrix[i][j];\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                matrix[i][j] = matrix_new[i][j];\n            }\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        n = len(matrix)\n        # Python 这里不能 matrix_new = matrix 或 matrix_new = matrix[:] 因为是引用拷贝\n        matrix_new = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                matrix_new[j][n - i - 1] = matrix[i][j]\n        # 不能写成 matrix = matrix_new\n        matrix[:] = matrix_new\n```\n\n```JavaScript [sol1-JavaScript]\nvar rotate = function(matrix) {\n    const n = matrix.length;\n    const matrix_new = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            matrix_new[j][n - i - 1] = matrix[i][j];\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            matrix[i][j] = matrix_new[i][j];\n        }\n    }\n};\n```\n\n```Go [sol1-Golang]\nfunc rotate(matrix [][]int) {\n    n := len(matrix)\n    tmp := make([][]int, n)\n    for i := range tmp {\n        tmp[i] = make([]int, n)\n    }\n    for i, row := range matrix {\n        for j, v := range row {\n            tmp[j][n-1-i] = v\n        }\n    }\n    copy(matrix, tmp) // 拷贝 tmp 矩阵每行的引用\n}\n```\n\n```C [sol1-C]\nvoid rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    int matrix_new[matrixSize][matrixSize];\n    for (int i = 0; i < matrixSize; i++) {\n        for (int j = 0; j < matrixSize; j++) {\n            matrix_new[i][j] = matrix[i][j];\n        }\n    }\n    for (int i = 0; i < matrixSize; ++i) {\n        for (int j = 0; j < matrixSize; ++j) {\n            matrix[j][matrixSize - i - 1] = matrix_new[i][j];\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N^2)$，其中 $N$ 是 $\\textit{matrix}$ 的边长。\n\n- 空间复杂度：$O(N^2)$。我们需要使用一个和 $\\textit{matrix}$ 大小相同的辅助数组。\n\n#### 方法二：原地旋转\n\n题目中要求我们尝试在不使用额外内存空间的情况下进行矩阵的旋转，也就是说，我们需要「原地旋转」这个矩阵。那么我们如何在方法一的基础上完成原地旋转呢？\n\n我们观察方法一中的关键等式：\n\n$$\n\\textit{matrix}_\\textit{new}[\\textit{col}][n - \\textit{row} - 1] = \\textit{matrix}[\\textit{row}][\\textit{col}]\n$$\n\n它阻止了我们进行原地旋转，这是因为如果我们直接将 $\\textit{matrix}[\\textit{row}][\\textit{col}]$ 放到原矩阵中的目标位置 $\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]$：\n\n$$\n\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1] = \\textit{matrix}[\\textit{row}][\\textit{col}]\n$$\n\n原矩阵中的 $\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]$ 就被覆盖了！这并不是我们想要的结果。因此我们可以考虑用一个临时变量 $\\textit{temp}$ 暂存 $\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]$ 的值，这样虽然 $\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]$ 被覆盖了，我们还是可以通过 $\\textit{temp}$ 获取它原来的值：\n\n$$\n\\left\\{\n\\begin{alignedat}{2}\n&\\textit{temp} &&= \\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]\\\\\n&\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1] &&= \\textit{matrix}[\\textit{row}][\\textit{col}]\n\\end{alignedat}\n\\right.\n$$\n\n那么 $\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]$ 经过旋转操作之后会到哪个位置呢？我们还是使用方法一中的关键等式，不过这次，我们需要将\n\n$$\n\\left\\{\n\\begin{alignedat}{2}\n& \\textit{row} &&= \\textit{col} \\\\\n& \\textit{col} &&= n - \\textit{row} - 1\n\\end{alignedat}\n\\right.\n$$\n\n带入关键等式，就可以得到：\n\n$$\n\\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1] = \\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]\n$$\n\n同样地，直接赋值会覆盖掉 $\\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1]$ 原来的值，因此我们还是需要使用一个临时变量进行存储，不过这次，我们可以直接使用之前的临时变量 $\\textit{temp}$：\n\n$$\n\\left\\{\n\\begin{alignedat}{2}\n&\\textit{temp} &&= \\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1]\\\\\n&\\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1] &&= \\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]\\\\\n&\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1] &&= \\textit{matrix}[\\textit{row}][\\textit{col}]\n\\end{alignedat}\n\\right.\n$$\n\n我们再重复一次之前的操作，$\\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1]$ 经过旋转操作之后会到哪个位置呢？\n\n$$\n\\left\\{\n\\begin{alignedat}{2}\n& \\textit{row} &&= n - \\textit{row} - 1\\\\\n& \\textit{col} &&= n - \\textit{col} - 1\n\\end{alignedat}\n\\right.\n$$\n\n带入关键等式，就可以得到：\n\n$$\n\\textit{matrix}[n - \\textit{col} - 1][\\textit{row}] = \\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1]\n$$\n\n写进去：\n\n$$\n\\left\\{\n\\begin{alignedat}{2}\n&\\textit{temp} &&= \\textit{matrix}[n - \\textit{col} - 1][\\textit{row}]\\\\\n&\\textit{matrix}[n - \\textit{col} - 1][\\textit{row}] &&= \\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1]\\\\\n&\\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1] &&= \\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]\\\\\n&\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1] &&= \\textit{matrix}[\\textit{row}][\\textit{col}]\n\\end{alignedat}\n\\right.\n$$\n\n不要灰心，再来一次！$\\textit{matrix}[n - \\textit{col} - 1][\\textit{row}]$ 经过旋转操作之后回到哪个位置呢？\n\n$$\n\\left\\{\n\\begin{alignedat}{2}\n& \\textit{row} &&= n - \\textit{col} - 1\\\\\n& \\textit{col} &&= \\textit{row}\n\\end{alignedat}\n\\right.\n$$\n\n带入关键等式，就可以得到：\n\n$$\n\\textit{matrix}[\\textit{row}][\\textit{col}] = \\textit{matrix}[n - \\textit{col} - 1][\\textit{row}]\n$$\n\n我们回到了最初的起点 $\\textit{matrix}[\\textit{row}][\\textit{col}]$，也就是说：\n\n$$\n\\begin{cases}\n\\textit{matrix}[\\textit{row}][\\textit{col}]\\\\\n\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]\\\\\n\\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1]\\\\\n\\textit{matrix}[n - \\textit{col} - 1][\\textit{row}]\n\\end{cases}\n$$\n\n这四项处于一个循环中，并且每一项旋转后的位置就是下一项所在的位置！因此我们可以使用一个临时变量 $\\textit{temp}$ 完成这四项的原地交换：\n\n$$\n\\left\\{\n\\begin{alignedat}{2}\n&\\textit{temp} &&= \\textit{matrix}[\\textit{row}][\\textit{col}]\\\\\n&\\textit{matrix}[\\textit{row}][\\textit{col}] &&= \\textit{matrix}[n - \\textit{col} - 1][\\textit{row}]\\\\\n&\\textit{matrix}[n - \\textit{col} - 1][\\textit{row}] &&= \\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1]\\\\\n&\\textit{matrix}[n - \\textit{row} - 1][n - \\textit{col} - 1] &&= \\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]\\\\\n&\\textit{matrix}[\\textit{col}][n - \\textit{row} - 1] &&= \\textit{temp}\n\\end{alignedat}\n\\right.\n$$\n\n当我们知道了如何原地旋转矩阵之后，还有一个重要的问题在于：我们应该枚举哪些位置 $(\\textit{row}, \\textit{col})$ 进行上述的原地交换操作呢？由于每一次原地交换四个位置，因此：\n\n- 当 $n$ 为偶数时，我们需要枚举 $n^2 / 4 = (n/2) \\times (n/2)$ 个位置，可以将该图形分为四块，以 $4 \\times 4$ 的矩阵为例：\n\n![fig1](https://assets.leetcode-cn.com/solution-static/48/1.png){:width=\"80%\"}\n  \n保证了不重复、不遗漏；\n\n- 当 $n$ 为奇数时，由于中心的位置经过旋转后位置不变，我们需要枚举 $(n^2-1) / 4 = ((n-1)/2) \\times ((n+1)/2)$ 个位置，需要换一种划分的方式，以 $5 \\times 5$ 的矩阵为例：\n\n![fig2](https://assets.leetcode-cn.com/solution-static/48/2.png){:width=\"80%\"}\n\n同样保证了不重复、不遗漏，矩阵正中央的点无需旋转。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < (n + 1) / 2; ++j) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[n - j - 1][i];\n                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n                matrix[j][n - i - 1] = temp;\n            }\n        }\n    }\n};\n```\n\n```C++ [sol2-C++17]\nclass Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < (n + 1) / 2; ++j) {\n                tie(matrix[i][j], matrix[n - j - 1][i], matrix[n - i - 1][n - j - 1], matrix[j][n - i - 1]) \\\n                    = make_tuple(matrix[n - j - 1][i], matrix[n - i - 1][n - j - 1], matrix[j][n - i - 1], matrix[i][j]);\n            }\n        }\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public void rotate(int[][] matrix) {\n        int n = matrix.length;\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < (n + 1) / 2; ++j) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[n - j - 1][i];\n                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n                matrix[j][n - i - 1] = temp;\n            }\n        }\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        n = len(matrix)\n        for i in range(n // 2):\n            for j in range((n + 1) // 2):\n                matrix[i][j], matrix[n - j - 1][i], matrix[n - i - 1][n - j - 1], matrix[j][n - i - 1] \\\n                    = matrix[n - j - 1][i], matrix[n - i - 1][n - j - 1], matrix[j][n - i - 1], matrix[i][j]\n```\n\n```JavaScript [sol2-JavaScript]\nvar rotate = function(matrix) {\n    const n = matrix.length;\n    for (let i = 0; i < Math.floor(n / 2); ++i) {\n        for (let j = 0; j < Math.floor((n + 1) / 2); ++j) {\n            const temp = matrix[i][j];\n            matrix[i][j] = matrix[n - j - 1][i];\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];\n            matrix[j][n - i - 1] = temp;\n        }\n    }\n};\n```\n\n```Go [sol2-Golang]\nfunc rotate(matrix [][]int) {\n    n := len(matrix)\n    for i := 0; i < n/2; i++ {\n        for j := 0; j < (n+1)/2; j++ {\n            matrix[i][j], matrix[n-j-1][i], matrix[n-i-1][n-j-1], matrix[j][n-i-1] =\n                matrix[n-j-1][i], matrix[n-i-1][n-j-1], matrix[j][n-i-1], matrix[i][j]\n        }\n    }\n}\n```\n\n```C [sol2-C]\nvoid rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    for (int i = 0; i < matrixSize / 2; ++i) {\n        for (int j = 0; j < (matrixSize + 1) / 2; ++j) {\n            int temp = matrix[i][j];\n            matrix[i][j] = matrix[matrixSize - j - 1][i];\n            matrix[matrixSize - j - 1][i] = matrix[matrixSize - i - 1][matrixSize - j - 1];\n            matrix[matrixSize - i - 1][matrixSize - j - 1] = matrix[j][matrixSize - i - 1];\n            matrix[j][matrixSize - i - 1] = temp;\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N^2)$，其中 $N$ 是 $\\textit{matrix}$ 的边长。我们需要枚举的子矩阵大小为 O($\\lfloor n/2 \\rfloor \\times \\lfloor (n+1)/2 \\rfloor) = O(N^2)$。\n\n- 空间复杂度：$O(1)$。为原地旋转。\n\n#### 方法三：用翻转代替旋转\n\n我们还可以另辟蹊径，用翻转操作代替旋转操作。我们还是以题目中的示例二\n\n$$\n\\begin{bmatrix}\n5 & 1 & 9 & 11 \\\\\n2 & 4 & 8 & 10 \\\\\n13 & 3 & 6 & 7 \\\\\n15 & 14 & 12 & 16\n\\end{bmatrix}\n$$\n\n作为例子，先将其通过水平轴翻转得到：\n\n$$\n\\begin{bmatrix}\n5 & 1 & 9 & 11 \\\\\n2 & 4 & 8 & 10 \\\\\n13 & 3 & 6 & 7 \\\\\n15 & 14 & 12 & 16\n\\end{bmatrix}\n\\xRightarrow[]{水平翻转}\n\\begin{bmatrix}\n15 & 14 & 12 & 16 \\\\\n13 & 3 & 6 & 7 \\\\\n2 & 4 & 8 & 10 \\\\\n5 & 1 & 9 & 11\n\\end{bmatrix}\n$$\n\n再根据主对角线翻转得到：\n\n$$\n\\begin{bmatrix}\n15 & 14 & 12 & 16 \\\\\n13 & 3 & 6 & 7 \\\\\n2 & 4 & 8 & 10 \\\\\n5 & 1 & 9 & 11\n\\end{bmatrix}\n\\xRightarrow[]{主对角线翻转}\n\\begin{bmatrix}\n15 & 13 & 2 & 5 \\\\\n14 & 3 & 4 & 1 \\\\\n12 & 6 & 8 & 9 \\\\\n16 & 7 & 10 & 11\n\\end{bmatrix}\n$$\n\n就得到了答案。这是为什么呢？对于水平轴翻转而言，我们只需要枚举矩阵上半部分的元素，和下半部分的元素进行交换，即\n\n$$\n\\textit{matrix}[\\textit{row}][\\textit{col}] \\xRightarrow[]{水平轴翻转} \\textit{matrix}[n - \\textit{row} - 1][\\textit{col}]\n$$\n\n对于主对角线翻转而言，我们只需要枚举对角线左侧的元素，和右侧的元素进行交换，即\n\n$$\n\\textit{matrix}[\\textit{row}][\\textit{col}] \\xRightarrow[]{主对角线翻转} \\textit{matrix}[\\textit{col}][\\textit{row}]\n$$\n\n将它们联立即可得到：\n\n$$\n\\begin{aligned}\n\\textit{matrix}[\\textit{row}][\\textit{col}] & \\xRightarrow[]{水平轴翻转} \\textit{matrix}[n - \\textit{row} - 1][\\textit{col}] \\\\\n&\\xRightarrow[]{主对角线翻转} \\textit{matrix}[\\textit{col}][n - \\textit{row} - 1]\n\\end{aligned}\n$$\n\n和方法一、方法二中的关键等式：\n\n$$\n\\textit{matrix}_\\textit{new}[\\textit{col}][n - \\textit{row} - 1] = \\textit{matrix}[\\textit{row}][\\textit{col}]\n$$\n\n是一致的。\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        // 水平翻转\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < n; ++j) {\n                swap(matrix[i][j], matrix[n - i - 1][j]);\n            }\n        }\n        // 主对角线翻转\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                swap(matrix[i][j], matrix[j][i]);\n            }\n        }\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public void rotate(int[][] matrix) {\n        int n = matrix.length;\n        // 水平翻转\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < n; ++j) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[n - i - 1][j];\n                matrix[n - i - 1][j] = temp;\n            }\n        }\n        // 主对角线翻转\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def rotate(self, matrix: List[List[int]]) -> None:\n        n = len(matrix)\n        # 水平翻转\n        for i in range(n // 2):\n            for j in range(n):\n                matrix[i][j], matrix[n - i - 1][j] = matrix[n - i - 1][j], matrix[i][j]\n        # 主对角线翻转\n        for i in range(n):\n            for j in range(i):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n```\n\n```JavaScript [sol3-JavaScript]\nvar rotate = function(matrix) {\n    const n = matrix.length;\n    // 水平翻转\n    for (let i = 0; i < Math.floor(n / 2); i++) {\n        for (let j = 0; j < n; j++) {\n            [matrix[i][j], matrix[n - i - 1][j]] = [matrix[n - i - 1][j], matrix[i][j]];\n        }\n    }\n    // 主对角线翻转\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];\n        }\n    }\n};\n```\n\n```Go [sol3-Golang]\nfunc rotate(matrix [][]int) {\n    n := len(matrix)\n    // 水平翻转\n    for i := 0; i < n/2; i++ {\n        matrix[i], matrix[n-1-i] = matrix[n-1-i], matrix[i]\n    }\n    // 主对角线翻转\n    for i := 0; i < n; i++ {\n        for j := 0; j < i; j++ {\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        }\n    }\n}\n```\n\n```C [sol3-C]\nvoid swap(int* a, int* b) {\n    int t = *a;\n    *a = *b, *b = t;\n}\n\nvoid rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    // 水平翻转\n    for (int i = 0; i < matrixSize / 2; ++i) {\n        for (int j = 0; j < matrixSize; ++j) {\n            swap(&matrix[i][j], &matrix[matrixSize - i - 1][j]);\n        }\n    }\n    // 主对角线翻转\n    for (int i = 0; i < matrixSize; ++i) {\n        for (int j = 0; j < i; ++j) {\n            swap(&matrix[i][j], &matrix[j][i]);\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N^2)$，其中 $N$ 是 $\\textit{matrix}$ 的边长。对于每一次翻转操作，我们都需要枚举矩阵中一半的元素。\n\n- 空间复杂度：$O(1)$。为原地翻转得到的原地旋转。"
}