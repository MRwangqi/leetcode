{
	"titleSlug": "shuffle-the-array",
	"slug": "zhong-xin-pai-lie-shu-zu-by-leetcode-sol-1eps",
	"url": "https://leetcode-cn.com/problems/shuffle-the-array/solution/zhong-xin-pai-lie-shu-zu-by-leetcode-sol-1eps/",
	"content": "#### 方法一：一次遍历\n\n用 $\\textit{ans}$ 表示结果数组，数组 $\\textit{nums}$ 和 $\\textit{ans}$ 的长度都是 $2n$。对于 $0 \\le i < n$，重新排列数组的规则如下：\n\n- $\\textit{nums}[i]$ 填到 $\\textit{ans}[2 \\times i]$；\n\n- $\\textit{nums}[i + n]$ 填到 $\\textit{ans}[2 \\times i + 1]$。\n\n根据该规则将原数组 $\\textit{nums}$ 中的元素依次填入结果数组 $\\textit{ans}$ 中，即可得到重新排列后的数组。\n\n```Python [sol1-Python3]\nclass Solution:\n    def shuffle(self, nums: List[int], n: int) -> List[int]:\n        ans = [0] * (2 * n)\n        for i in range(n):\n            ans[2 * i] = nums[i]\n            ans[2 * i + 1] = nums[n + i]\n        return ans\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] shuffle(int[] nums, int n) {\n        int[] ans = new int[2 * n];\n        for (int i = 0; i < n; i++) {\n            ans[2 * i] = nums[i];\n            ans[2 * i + 1] = nums[i + n];\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] Shuffle(int[] nums, int n) {\n        int[] ans = new int[2 * n];\n        for (int i = 0; i < n; i++) {\n            ans[2 * i] = nums[i];\n            ans[2 * i + 1] = nums[i + n];\n        }\n        return ans;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> shuffle(vector<int>& nums, int n) {\n        vector<int> ans(2 * n);\n        for (int i = 0; i < n; i++) {\n            ans[2 * i] = nums[i];\n            ans[2 * i + 1] = nums[i + n];\n        }\n        return ans;\n    }\n};\n```\n\n```C [sol1-C]\nint* shuffle(int* nums, int numsSize, int n, int* returnSize){\n    int *ans = (int *)malloc(sizeof(int) * n * 2);\n    for (int i = 0; i < n; i++) {\n        ans[2 * i] = nums[i];\n        ans[2 * i + 1] = nums[i + n];\n    }\n    *returnSize = n * 2;\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar shuffle = function(nums, n) {\n    const ans = new Array(2 * n).fill(0);\n    for (let i = 0; i < n; i++) {\n        ans[2 * i] = nums[i];\n        ans[2 * i + 1] = nums[i + n];\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc shuffle(nums []int, n int) []int {\n    ans := make([]int, n*2)\n    for i, num := range nums[:n] {\n        ans[2*i] = num\n        ans[2*i+1] = nums[n+i]\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是给定的参数。需要遍历长度为 $2n$ 的数组 $\\textit{nums}$ 一次将数组重新排列，每个元素重新排列的时间是 $O(1)$。\n\n- 空间复杂度：$O(1)$。注意返回值不计入空间复杂度。"
}