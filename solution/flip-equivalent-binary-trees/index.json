{
	"titleSlug": "flip-equivalent-binary-trees",
	"slug": "fan-zhuan-deng-jie-er-cha-shu-by-leetcode",
	"url": "https://leetcode-cn.com/problems/flip-equivalent-binary-trees/solution/fan-zhuan-deng-jie-er-cha-shu-by-leetcode/",
	"content": "#### 方法一： 递归\n\n**思路**\n\n如果二叉树 `root1`，`root2` 根节点值相等，那么只需要检查他们的孩子是不是相等就可以了。\n\n**算法**\n\n存在三种情况：\n* 如果 `root1` 或者 `root2` 是 `null`，那么只有在他们都为 `null` 的情况下这两个二叉树才等价。\n* 如果 `root1`，`root2` 的值不相等，那这两个二叉树的一定不等价。\n* 如果以上条件都不满足，也就是当 `root1` 和 `root2` 的值相等的情况下，需要继续判断 `root1` 的孩子节点是不是跟 `root2` 的孩子节点相当。因为可以做翻转操作，所以这里有两种情况需要去判断。\n\n```java [solution1-Java]\nclass Solution {\n    public boolean flipEquiv(TreeNode root1, TreeNode root2) {\n        if (root1 == root2)\n            return true;\n        if (root1 == null || root2 == null || root1.val != root2.val)\n            return false;\n\n        return (flipEquiv(root1.left, root2.left) && flipEquiv(root1.right, root2.right) ||\n                flipEquiv(root1.left, root2.right) && flipEquiv(root1.right, root2.left));\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def flipEquiv(self, root1, root2):\n        if root1 is root2:\n            return True\n        if not root1 or not root2 or root1.val != root2.val:\n            return False\n\n        return (self.flipEquiv(root1.left, root2.left) and\n                self.flipEquiv(root1.right, root2.right) or\n                self.flipEquiv(root1.left, root2.right) and\n                self.flipEquiv(root1.right, root2.left))\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(min(N_1, N_2))$，其中 $N_1$，$N_2$ 分别是二叉树 `root1`，`root2` 的大小。\n\n* 空间复杂度： $O(min(H_1, H_2))$，其中 $H_1$，$H_2$ 分别是二叉树 `root1`， `root2` 的高度。\n\n#### 方法二： 标准态遍历\n\n**思路**\n\n让树中所有节点的左孩子都小于右孩子，如果当前不满足就翻转。我们把这种状态的二叉树称为 `标准态`。所有等价二叉树在转换成标准态后都是完全一样的。\n\n**算法**\n\n用深度优先遍历来对比这两棵树在标准态下是否完全一致。对于两颗等价树，在标准态下遍历的结果一定是一样的。\n\n```java [solution2-Java]\nclass Solution {\n    public boolean flipEquiv(TreeNode root1, TreeNode root2) {\n        List<Integer> vals1 = new ArrayList();\n        List<Integer> vals2 = new ArrayList();\n        dfs(root1, vals1);\n        dfs(root2, vals2);\n        return vals1.equals(vals2);\n    }\n\n    public void dfs(TreeNode node, List<Integer> vals) {\n        if (node != null) {\n            vals.add(node.val);\n            int L = node.left != null ? node.left.val : -1;\n            int R = node.right != null ? node.right.val : -1;\n\n            if (L < R) {\n                dfs(node.left, vals);\n                dfs(node.right, vals);\n            } else {\n                dfs(node.right, vals);\n                dfs(node.left, vals);\n            }\n\n            vals.add(null);\n        }\n    }\n}\n\n```\n\n```python [solution2-Python]\nclass Solution:\n    def flipEquiv(self, root1, root2):\n        def dfs(node):\n            if node:\n                yield node.val\n                L = node.left.val if node.left else -1\n                R = node.right.val if node.right else -1\n                if L < R:\n                    yield from dfs(node.left)\n                    yield from dfs(node.right)\n                else:\n                    yield from dfs(node.right)\n                    yield from dfs(node.left)\n                yield '#'\n\n        return all(x == y for x, y in itertools.zip_longest(\n            dfs(root1), dfs(root2)))\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(N_1 + N_2)$，其中 $N_1$，$N_2$ 分别为二叉树 `root1`，`root2` 的大小（在 Python 实现中，复杂度为 $O(\\min(N_1, N_2))$。）\n\n* 空间复杂度： $O(N_1 + N_2)$。其中 $H_1$，$H_2$ 是二叉树 `root1`，`root2` 的高度。（在 Python 实现中，复杂度为 $O(\\min(H_1, H_2))$。）"
}