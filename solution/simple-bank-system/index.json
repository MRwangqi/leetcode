{
	"titleSlug": "simple-bank-system",
	"slug": "jian-yi-yin-xing-xi-tong-by-leetcode-sol-q3o7",
	"url": "https://leetcode-cn.com/problems/simple-bank-system/solution/jian-yi-yin-xing-xi-tong-by-leetcode-sol-q3o7/",
	"content": "#### 方法一：模拟\n\n**思路与算法**\n\n已有的帐号为 $1$ 到 $n$，分别对三种操作进行分析：\n\n+ $\\textit{transfer}$ 操作\n\n    如果要进行操作的帐号不在已有的帐号中，即 $\\textit{account1} > n$ 或者 $\\textit{account2} > n$，那么交易无效。如果账号 $\\textit{account1}$ 的余额小于 $\\textit{money}$，那么交易无效。交易有效时，我们将账号 $\\textit{account1}$ 的余额减少 $\\textit{money}$，账号 $\\textit{account2}$ 的余额增加 $\\textit{money}$。\n\n+ $\\textit{deposit}$ 操作\n\n    如果要进行操作的帐号不在已有的帐号中，即 $\\textit{account} > n$，那么交易无效。交易有效时，我们将账号 $\\textit{account}$ 的余额增加 $\\textit{money}$。\n\n+ $\\textit{withdraw}$ 操作\n\n    如果要进行操作的帐号不在已有的帐号中，即 $\\textit{account} > n$，那么交易无效。如果账号 $\\textit{account}$ 的余额小于 $\\textit{money}$，那么交易无效。交易有效时，我们将账号 $\\textit{account}$ 的余额减少 $\\textit{money}$。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Bank:\n    def __init__(self, balance: List[int]):\n        self.balance = balance\n\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\n        if account1 > len(self.balance) or account2 > len(self.balance) or self.balance[account1 - 1] < money:\n            return False\n        self.balance[account1 - 1] -= money\n        self.balance[account2 - 1] += money\n        return True\n\n    def deposit(self, account: int, money: int) -> bool:\n        if account > len(self.balance):\n            return False\n        self.balance[account - 1] += money\n        return True\n\n    def withdraw(self, account: int, money: int) -> bool:\n        if account > len(self.balance) or self.balance[account - 1] < money:\n            return False\n        self.balance[account - 1] -= money\n        return True\n```\n\n```C++ [sol1-C++]\nclass Bank {\nprivate:\n    vector<long long> balance;\n\npublic:\n    Bank(vector<long long>& balance) : balance(balance) {}\n\n    bool transfer(int account1, int account2, long long money) {\n        if (account1 > balance.size() || account2 > balance.size() || balance[account1 - 1] < money) {\n            return false;\n        }\n        balance[account1 - 1] -= money;\n        balance[account2 - 1] += money;\n        return true;\n    }\n\n    bool deposit(int account, long long money) {\n        if (account > balance.size()) {\n            return false;\n        }\n        balance[account - 1] += money;\n        return true;\n    }\n\n    bool withdraw(int account, long long money) {\n        if (account > balance.size() || balance[account - 1] < money) {\n            return false;\n        }\n        balance[account - 1] -= money;\n        return true;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Bank {\n    long[] balance;\n\n    public Bank(long[] balance) {\n        this.balance = balance;\n    }\n\n    public boolean transfer(int account1, int account2, long money) {\n        if (account1 > balance.length || account2 > balance.length || balance[account1 - 1] < money) {\n            return false;\n        }\n        balance[account1 - 1] -= money;\n        balance[account2 - 1] += money;\n        return true;\n    }\n\n    public boolean deposit(int account, long money) {\n        if (account > balance.length) {\n            return false;\n        }\n        balance[account - 1] += money;\n        return true;\n    }\n\n    public boolean withdraw(int account, long money) {\n        if (account > balance.length || balance[account - 1] < money) {\n            return false;\n        }\n        balance[account - 1] -= money;\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Bank {\n    long[] balance;\n\n    public Bank(long[] balance) {\n        this.balance = balance;\n    }\n\n    public bool Transfer(int account1, int account2, long money) {\n        if (account1 > balance.Length || account2 > balance.Length || balance[account1 - 1] < money) {\n            return false;\n        }\n        balance[account1 - 1] -= money;\n        balance[account2 - 1] += money;\n        return true;\n    }\n\n    public bool Deposit(int account, long money) {\n        if (account > balance.Length) {\n            return false;\n        }\n        balance[account - 1] += money;\n        return true;\n    }\n\n    public bool Withdraw(int account, long money) {\n        if (account > balance.Length || balance[account - 1] < money) {\n            return false;\n        }\n        balance[account - 1] -= money;\n        return true;\n    }\n}\n```\n\n```C [sol1-C]\ntypedef struct {\n    long long * balance;\n    int balanceSize;\n} Bank;\n\nBank* bankCreate(long long* balance, int balanceSize) {\n    Bank * obj = (Bank *)malloc(sizeof(Bank));\n    obj->balance = (long long *)malloc(sizeof(long long) * balanceSize);\n    obj->balanceSize = balanceSize;\n    memcpy(obj->balance, balance, sizeof(long long) * balanceSize);\n    return obj;\n}\n\nbool bankTransfer(Bank* obj, int account1, int account2, long long money) {\n    if (account1 > obj->balanceSize || account2 > obj->balanceSize || obj->balance[account1 - 1] < money) {\n        return false;\n    }\n    obj->balance[account1 - 1] -= money;\n    obj->balance[account2 - 1] += money;\n    return true;\n}\n\nbool bankDeposit(Bank* obj, int account, long long money) {\n    if (account > obj->balanceSize) {\n        return false;\n    }\n    obj->balance[account - 1] += money;\n    return true;\n}\n\nbool bankWithdraw(Bank* obj, int account, long long money) {\n    if (account > obj->balanceSize || obj->balance[account - 1] < money) {\n        return false;\n    }\n    obj->balance[account - 1] -= money;\n    return true;\n}\n\nvoid bankFree(Bank* obj) {\n    free(obj->balance);\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar Bank = function(balance) {\n    this.balance = balance;\n};\n\nBank.prototype.transfer = function(account1, account2, money) {\n    if (account1 > this.balance.length || account2 > this.balance.length || this.balance[account1 - 1] < money) {\n        return false;\n    }\n    this.balance[account1 - 1] -= money;\n    this.balance[account2 - 1] += money;\n    return true;\n};\n\nBank.prototype.deposit = function(account, money) {\n    if (account > this.balance.length) {\n        return false;\n    }\n    this.balance[account - 1] += money;\n    return true;\n};\n\nBank.prototype.withdraw = function(account, money) {\n    if (account > this.balance.length || this.balance[account - 1] < money) {\n        return false;\n    }\n    this.balance[account - 1] -= money;\n    return true;\n};\n```\n\n```go [sol1-Golang]\ntype Bank []int64\n\nfunc Constructor(balance []int64) Bank {\n    return balance\n}\n\nfunc (b Bank) Transfer(account1, account2 int, money int64) bool {\n    if account1 > len(b) || account2 > len(b) || b[account1-1] < money {\n        return false\n    }\n    b[account1-1] -= money\n    b[account2-1] += money\n    return true\n}\n\nfunc (b Bank) Deposit(account int, money int64) bool {\n    if account > len(b) {\n        return false\n    }\n    b[account-1] += money\n    return true\n}\n\nfunc (b Bank) Withdraw(account int, money int64) bool {\n    if account > len(b) || b[account-1] < money {\n        return false\n    }\n    b[account-1] -= money\n    return true\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：\n  + $\\textit{transfer}$：$O(1)$；\n  + $\\textit{deposit}$：$O(1)$；\n  + $\\textit{withdraw}$：$O(1)$。\n\n+ 空间复杂度：\n  + 初始化：$O(n)$，其中 $n$ 为已有的帐号数目。\n  + $\\textit{transfer}$：$O(1)$；\n  + $\\textit{deposit}$：$O(1)$；\n  + $\\textit{withdraw}$：$O(1)$。"
}