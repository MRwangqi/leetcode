{
	"titleSlug": "cherry-pickup-ii",
	"slug": "zhai-ying-tao-ii-by-leetcode-solution-v2k5",
	"url": "https://leetcode-cn.com/problems/cherry-pickup-ii/solution/zhai-ying-tao-ii-by-leetcode-solution-v2k5/",
	"content": "#### 方法一：动态规划\n\n**思路与算法**\n\n设矩阵的长度为 $m$，宽度为 $n$，我们用 $f[i][j_1][j_2]$ 表示当第一个机器人从 $(0, 0)$ 走到 $(i, j_1)$，第二个机器人从 $(0, n-1)$ 走到 $(i, j_2)$，最多能收集的樱桃数目。\n\n在进行状态转移时，我们可以枚举这两个机器人在第 $i-1$ 行的位置 $\\textit{dj}_1$ 和 $\\textit{dj}_2$，它们满足；\n\n$$\n\\begin{aligned}\n0 \\leq \\textit{dj}_1 < n ~且~ \\textit{dj}_1 - j_1 \\in [-1, 0, 1] \\\\\n0 \\leq \\textit{dj}_2 < n ~且~ \\textit{dj}_2 - j_2 \\in [-1, 0, 1]\n\\end{aligned}\n$$\n\n也就是说，我们只需要在 $[j_1-1, j_1, j_1+1]$ 中枚举 $\\textit{dj}_1$，并且需要判断其是否在 $[0, n)$ 的范围内。对于 $\\textit{dj}_2$ 也是如此。因此我们可以写出如下的状态转移方程；\n\n$$\nf[i][j_1][j_2] = \\max(f[i-1][\\textit{dj}_1][\\textit{dj}_2] + \\text{value}(i, j_1, j_2))\n$$\n\n其中 $\\text{value}(i, j_1, j_2)$ 表示两个机器人分别在 $(i, j_1)$ 和 $(i, j_2)$ 时可以收集的樱桃数目总和。根据题目描述，有：\n\n$$\n\\text{value}(i, j_1, j_2) =\n\\begin{cases}\n\\text{grid}[i][j_1] + \\text{grid}[i][j_2] & 如果~j_1 \\neq j_2 \\\\\n\\text{grid}[i][j_1] & 如果~j_1 = j_2\n\\end{cases}\n$$\n\n动态规划的边界条件为\n\n$$\nf[i][0][n-1] = \\text{grid}[0][0] + \\text{grid}[0][n-1]\n$$\n\n即两个机器人初始所在的位置。最终的答案即为所有 $f[m-1][j_1][j_2]$ 中的最大值。\n\n**细节**\n\n动态规划一般有自顶向下和自底向上两种编写方式，其中自顶向下也被称为「记忆化搜索」。\n\n- 如果我们用自顶向下的方式来编写代码，那么代码将会十分简洁，并且不需要考虑很多特殊情况和边界条件，这是因为「记忆化搜索」只会「搜索」可行的状态；\n\n- 如果我们用自底向上的方式来编写代码，那么就需要考虑特殊情况和边界条件。例如在 $i=0$ 时，除了 $f[0][0][n-1]$ 之外的其余状态都是不合法的。对于这些状态，我们可以将其标记为 $-1$，并在状态转移时进行特殊判断。并且，我们可以发现在状态转移方程中，$f[i][..][..]$ 只会从 $f[i-1][..][..]$ 转移而来，因此我们可以使用两个二维数组代替三位数组，交替地进行状态转移，使空间复杂度得到优化。\n\n下面的 `C++` 和 `Java` 代码给出了自底向上 + 空间优化的参考；`Python` 代码给出了自顶向下的参考。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int cherryPickup(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        \n        vector<vector<int>> f(n, vector<int>(n, -1)), g(n, vector<int>(n, -1));\n        f[0][n - 1] = grid[0][0] + grid[0][n - 1];\n        for (int i = 1; i < m; ++i) {\n            for (int j1 = 0; j1 < n; ++j1) {\n                for (int j2 = 0; j2 < n; ++j2) {\n                    int best = -1;\n                    for (int dj1 = j1 - 1; dj1 <= j1 + 1; ++dj1) {\n                        for (int dj2 = j2 - 1; dj2 <= j2 + 1; ++dj2) {\n                            if (dj1 >= 0 && dj1 < n && dj2 >= 0 && dj2 < n && f[dj1][dj2] != -1) {\n                                best = max(best, f[dj1][dj2] + (j1 == j2 ? grid[i][j1] : grid[i][j1] + grid[i][j2]));\n                            }\n                        }\n                    }\n                    g[j1][j2] = best;\n                }\n            }\n            swap(f, g);\n        }\n\n        int ans = 0;\n        for (int j1 = 0; j1 < n; ++j1) {\n            for (int j2 = 0; j2 < n; ++j2) {\n                ans = max(ans, f[j1][j2]);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int cherryPickup(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        \n        int[][] f = new int[n][n];\n        int[][] g = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(f[i], -1);\n            Arrays.fill(g[i], -1);\n        }\n        f[0][n - 1] = grid[0][0] + grid[0][n - 1];\n        for (int i = 1; i < m; ++i) {\n            for (int j1 = 0; j1 < n; ++j1) {\n                for (int j2 = 0; j2 < n; ++j2) {\n                    int best = -1;\n                    for (int dj1 = j1 - 1; dj1 <= j1 + 1; ++dj1) {\n                        for (int dj2 = j2 - 1; dj2 <= j2 + 1; ++dj2) {\n                            if (dj1 >= 0 && dj1 < n && dj2 >= 0 && dj2 < n && f[dj1][dj2] != -1) {\n                                best = Math.max(best, f[dj1][dj2] + (j1 == j2 ? grid[i][j1] : grid[i][j1] + grid[i][j2]));\n                            }\n                        }\n                    }\n                    g[j1][j2] = best;\n                }\n            }\n            int[][] temp = f;\n            f = g;\n            g = temp;\n        }\n\n        int ans = 0;\n        for (int j1 = 0; j1 < n; ++j1) {\n            for (int j2 = 0; j2 < n; ++j2) {\n                ans = Math.max(ans, f[j1][j2]);\n            }\n        }\n        return ans;\n\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n\n        def getValue(i, j1, j2):\n            return grid[i][j1] + grid[i][j2] if j1 != j2 else grid[i][j1]\n\n        @lru_cache(None)\n        def dfs(i, j1, j2):\n            if i == m - 1:\n                return getValue(i, j1, j2)\n            \n            best = 0\n            for dj1 in [j1 - 1, j1, j1 + 1]:\n                for dj2 in [j2 - 1, j2, j2 + 1]:\n                    if 0 <= dj1 < n and 0 <= dj2 < n:\n                        best = max(best, dfs(i + 1, dj1, dj2))\n\n            return best + getValue(i, j1, j2)\n        \n        return dfs(0, 0, n - 1)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn^2)$。动态规划中的状态有 $mn^2$ 个，对于每个状态，我们会从最多 $3*3=9$ 个前置状态中选择一个进行转移。\n\n- 空间复杂度：$O(mn^2)$ 或 $O(n^2)$，取决于是否使用了空间优化。"
}