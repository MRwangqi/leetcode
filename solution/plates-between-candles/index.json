{
	"titleSlug": "plates-between-candles",
	"slug": "zha-zhu-zhi-jian-de-pan-zi-by-leetcode-s-ejst",
	"url": "https://leetcode-cn.com/problems/plates-between-candles/solution/zha-zhu-zhi-jian-de-pan-zi-by-leetcode-s-ejst/",
	"content": "#### 方法一：预处理 + 前缀和\n\n**思路和算法**\n\n对于每一个询问，我们只需要找到给定区间内最左侧和最右侧的两个蜡烛，这样两个蜡烛之间的所有盘子都是符合条件的。\n\n对于**寻找蜡烛**，我们可以预处理区间内每个位置左侧的第一个蜡烛和右侧的第一个蜡烛。这样区间左端点 $\\textit{left}_i$ 右侧的第一个蜡烛即为区间最左侧的蜡烛，区间右端点 $\\textit{right}_i$ 左侧的第一个蜡烛即为区间最右侧的蜡烛。\n\n对于**计算盘子数量**，我们可以计算盘子数量的前缀和 $\\textit{preSum}$。假设找到的两蜡烛的位置分别为 $x$ 和 $y$，那么两位置之间的盘子数量即为 $\\textit{preSum}_y - \\textit{preSum}_{x - 1}$。\n\n这样我们就通过预处理，将寻找蜡烛和计算盘子数量两个操作的时间复杂度降至 $O(1)$，因此对于每个询问，时间复杂度为 $O(1)$。\n\n在实际代码中，可能某个位置的左侧或右侧是不存在蜡烛的，此时我们将对应数组的值记为 $-1$。当 $x$ 为 $-1$ 或者 $y$ 为 $-1$ 或者 $x \\geq y$ 时，不存在满足条件的盘子。同时注意到因为 $x$ 位置是蜡烛，所以盘子数量也可以表示为 $\\textit{preSum}_y - \\textit{preSum}_{x}$，这个写法可以防止 $x$ 为 $0$ 时数组越界。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> platesBetweenCandles(string s, vector<vector<int>>& queries) {\n        int n = s.length();\n        vector<int> preSum(n);\n        for (int i = 0, sum = 0; i < n; i++) {\n            if (s[i] == '*') {\n                sum++;\n            }\n            preSum[i] = sum;\n        }\n        vector<int> left(n);\n        for (int i = 0, l = -1; i < n; i++) {\n            if (s[i] == '|') {\n                l = i;\n            }\n            left[i] = l;\n        }\n        vector<int> right(n);\n        for (int i = n - 1, r = -1; i >= 0; i--) {\n            if (s[i] == '|') {\n                r = i;\n            }\n            right[i] = r;\n        }\n        vector<int> ans;\n        for (auto& query : queries) {\n            int x = right[query[0]], y = left[query[1]];\n            ans.push_back(x == -1 || y == -1 || x >= y ? 0 : preSum[y] - preSum[x]);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] platesBetweenCandles(String s, int[][] queries) {\n        int n = s.length();\n        int[] preSum = new int[n];\n        for (int i = 0, sum = 0; i < n; i++) {\n            if (s.charAt(i) == '*') {\n                sum++;\n            }\n            preSum[i] = sum;\n        }\n        int[] left = new int[n];\n        for (int i = 0, l = -1; i < n; i++) {\n            if (s.charAt(i) == '|') {\n                l = i;\n            }\n            left[i] = l;\n        }\n        int[] right = new int[n];\n        for (int i = n - 1, r = -1; i >= 0; i--) {\n            if (s.charAt(i) == '|') {\n                r = i;\n            }\n            right[i] = r;\n        }\n        int[] ans = new int[queries.length];\n        for (int i = 0; i < queries.length; i++) {\n            int[] query = queries[i];\n            int x = right[query[0]], y = left[query[1]];\n            ans[i] = x == -1 || y == -1 || x >= y ? 0 : preSum[y] - preSum[x];\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] PlatesBetweenCandles(string s, int[][] queries) {\n        int n = s.Length;\n        int[] preSum = new int[n];\n        for (int i = 0, sum = 0; i < n; i++) {\n            if (s[i] == '*') {\n                sum++;\n            }\n            preSum[i] = sum;\n        }\n        int[] left = new int[n];\n        for (int i = 0, l = -1; i < n; i++) {\n            if (s[i] == '|') {\n                l = i;\n            }\n            left[i] = l;\n        }\n        int[] right = new int[n];\n        for (int i = n - 1, r = -1; i >= 0; i--) {\n            if (s[i] == '|') {\n                r = i;\n            }\n            right[i] = r;\n        }\n        int[] ans = new int[queries.Length];\n        for (int i = 0; i < queries.Length; i++) {\n            int[] query = queries[i];\n            int x = right[query[0]], y = left[query[1]];\n            ans[i] = x == -1 || y == -1 || x >= y ? 0 : preSum[y] - preSum[x];\n        }\n        return ans;\n    }\n}\n```\n\n```C [sol1-C]\nint* platesBetweenCandles(char * s, int** queries, int queriesSize, int* queriesColSize, int* returnSize){\n    int n = strlen(s);\n    int * preSum = (int *)malloc(sizeof(int) * n);\n    memset(preSum, 0, sizeof(int) * n);\n    for (int i = 0, sum = 0; i < n; i++) {\n        if (s[i] == '*') {\n            sum++;\n        }\n        preSum[i] = sum;\n    }\n    int * left = (int *)malloc(sizeof(int) * n);\n    memset(left, 0, sizeof(int) * n);\n    for (int i = 0, l = -1; i < n; i++) {\n        if (s[i] == '|') {\n            l = i;\n        }\n        left[i] = l;\n    }\n    int * right = (int *)malloc(sizeof(int) * n);\n    memset(right, 0, sizeof(int) * n);\n    for (int i = n - 1, r = -1; i >= 0; i--) {\n        if (s[i] == '|') {\n            r = i;\n        }\n        right[i] = r;\n    }\n    int * ans = (int *)malloc(sizeof(int) * queriesSize);\n    for (int i = 0; i < queriesSize; i++) {\n        int x = right[queries[i][0]], y = left[queries[i][1]];\n        ans[i] = x == -1 || y == -1 || x >= y ? 0 : preSum[y] - preSum[x];\n    }\n    free(preSum);\n    free(left);\n    free(right);\n    *returnSize = queriesSize; \n    return ans;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def platesBetweenCandles(self, s: str, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        preSum, sum = [0] * n, 0\n        left, l = [0] * n, -1\n        for i, ch in enumerate(s):\n            if ch == '*':\n                sum += 1\n            else:\n                l = i\n            preSum[i] = sum\n            left[i] = l\n\n        right, r = [0] * n, -1\n        for i in range(n - 1, -1, -1):\n            if s[i] == '|':\n                r = i\n            right[i] = r\n\n        ans = [0] * len(queries)\n        for i, (x, y) in enumerate(queries):\n            x, y = right[x], left[y]\n            if x >= 0 and y >= 0 and x < y:\n                ans[i] = preSum[y] - preSum[x]\n        return ans\n```\n\n```go [sol1-Golang]\nfunc platesBetweenCandles(s string, queries [][]int) []int {\n    n := len(s)\n    preSum := make([]int, n)\n    left := make([]int, n)\n    sum, l := 0, -1\n    for i, ch := range s {\n        if ch == '*' {\n            sum++\n        } else {\n            l = i\n        }\n        preSum[i] = sum\n        left[i] = l\n    }\n\n    right := make([]int, n)\n    for i, r := n-1, -1; i >= 0; i-- {\n        if s[i] == '|' {\n            r = i\n        }\n        right[i] = r\n    }\n\n    ans := make([]int, len(queries))\n    for i, q := range queries {\n        x, y := right[q[0]], left[q[1]]\n        if x >= 0 && y >= 0 && x < y {\n            ans[i] = preSum[y] - preSum[x]\n        }\n    }\n    return ans\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar platesBetweenCandles = function(s, queries) {\n    const n = s.length;\n    const preSum = new Array(n).fill(0);\n    for (let i = 0, sum = 0; i < n; i++) {\n        if (s[i] === '*') {\n            sum++;\n        }\n        preSum[i] = sum;\n    }\n    const left = new Array(n).fill(0);;\n    for (let i = 0, l = -1; i < n; i++) {\n        if (s[i] === '|') {\n            l = i;\n        }\n        left[i] = l;\n    }\n    const right = new Array(n).fill(0);;\n    for (let i = n - 1, r = -1; i >= 0; i--) {\n        if (s[i] === '|') {\n            r = i;\n        }\n        right[i] = r;\n    }\n    const ans = new Array(queries.length).fill(0);\n    for (let i = 0; i < queries.length; i++) {\n        const query = queries[i];\n        const x = right[query[0]], y = left[query[1]];\n        ans[i] = x === -1 || y === -1 || x >= y ? 0 : preSum[y] - preSum[x];\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + q)$，其中 $n$ 为数组长度，$q$ 为询问数量。我们需要 $O(n)$ 的时间预处理。对于每一个询问，我们需要 $O(1)$ 的时间计算答案。\n\n- 空间复杂度：$O(n)$，其中 $n$ 为数组长度。我们需要 $O(n)$ 的空间保存预处理的结果。注意返回值不计入空间复杂度。"
}