{
	"titleSlug": "longest-palindromic-substring",
	"slug": "zui-chang-hui-wen-zi-chuan-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n![5-最长回文子串.mp4](fa050df7-29f7-4f4e-b0f6-a196c2da0724)\n\n### 📖 文字题解\n#### 方法一：动态规划\n\n**思路与算法**\n\n对于一个子串而言，如果它是回文串，并且长度大于 $2$，那么将它首尾的两个字母去除之后，它仍然是个回文串。例如对于字符串 $\\textrm{``ababa''}$，如果我们已经知道 $\\textrm{``bab''}$ 是回文串，那么 $\\textrm{``ababa''}$ 一定是回文串，这是因为它的首尾两个字母都是 $\\textrm{``a''}$。\n\n根据这样的思路，我们就可以用动态规划的方法解决本题。我们用 $P(i,j)$ 表示字符串 $s$ 的第 $i$ 到 $j$ 个字母组成的串（下文表示成 $s[i:j]$）是否为回文串：\n\n$$\nP(i,j) =\n     \\begin{cases}\n       \\text{true,} &\\quad\\text{如果子串~} S_i \\dots S_j \\text{~是回文串}\\\\\n       \\text{false,} &\\quad\\text{其它情况}\n     \\end{cases}\n$$\n\n这里的「其它情况」包含两种可能性：\n\n- $s[i, j]$ 本身不是一个回文串；\n\n- $i > j$，此时 $s[i, j]$ 本身不合法。\n\n那么我们就可以写出动态规划的状态转移方程：\n\n$$\nP(i, j) = P(i+1, j-1) \\wedge (S_i == S_j)\n$$\n\n也就是说，只有 $s[i+1:j-1]$ 是回文串，并且 $s$ 的第 $i$ 和 $j$ 个字母相同时，$s[i:j]$ 才会是回文串。\n\n上文的所有讨论是建立在子串长度大于 $2$ 的前提之上的，我们还需要考虑动态规划中的边界条件，即子串的长度为 $1$ 或 $2$。对于长度为 $1$ 的子串，它显然是个回文串；对于长度为 $2$ 的子串，只要它的两个字母相同，它就是一个回文串。因此我们就可以写出动态规划的边界条件：\n\n$$\n\\begin{cases}\nP(i, i) = \\text{true} \\\\\nP(i, i+1) = ( S_i == S_{i+1} )\n\\end{cases}\n$$\n\n根据这个思路，我们就可以完成动态规划了，最终的答案即为所有 $P(i, j) = \\text{true}$ 中 $j-i+1$（即子串长度）的最大值。**注意：在状态转移方程中，我们是从长度较短的字符串向长度较长的字符串进行转移的，因此一定要注意动态规划的循环顺序。**\n\n```Java [sol1-Java]\npublic class Solution {\n\n    public String longestPalindrome(String s) {\n        int len = s.length();\n        if (len < 2) {\n            return s;\n        }\n\n        int maxLen = 1;\n        int begin = 0;\n        // dp[i][j] 表示 s[i..j] 是否是回文串\n        boolean[][] dp = new boolean[len][len];\n        // 初始化：所有长度为 1 的子串都是回文串\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = true;\n        }\n\n        char[] charArray = s.toCharArray();\n        // 递推开始\n        // 先枚举子串长度\n        for (int L = 2; L <= len; L++) {\n            // 枚举左边界，左边界的上限设置可以宽松一些\n            for (int i = 0; i < len; i++) {\n                // 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得\n                int j = L + i - 1;\n                // 如果右边界越界，就可以退出当前循环\n                if (j >= len) {\n                    break;\n                }\n\n                if (charArray[i] != charArray[j]) {\n                    dp[i][j] = false;\n                } else {\n                    if (j - i < 3) {\n                        dp[i][j] = true;\n                    } else {\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                }\n\n                // 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置\n                if (dp[i][j] && j - i + 1 > maxLen) {\n                    maxLen = j - i + 1;\n                    begin = i;\n                }\n            }\n        }\n        return s.substring(begin, begin + maxLen);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        n = len(s)\n        if n < 2:\n            return s\n        \n        max_len = 1\n        begin = 0\n        # dp[i][j] 表示 s[i..j] 是否是回文串\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        \n        # 递推开始\n        # 先枚举子串长度\n        for L in range(2, n + 1):\n            # 枚举左边界，左边界的上限设置可以宽松一些\n            for i in range(n):\n                # 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得\n                j = L + i - 1\n                # 如果右边界越界，就可以退出当前循环\n                if j >= n:\n                    break\n                    \n                if s[i] != s[j]:\n                    dp[i][j] = False \n                else:\n                    if j - i < 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i + 1][j - 1]\n                \n                # 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置\n                if dp[i][j] and j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    begin = i\n        return s[begin:begin + max_len]\n```\n\n```C++ [sol1-C++]\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.size();\n        if (n < 2) {\n            return s;\n        }\n\n        int maxLen = 1;\n        int begin = 0;\n        // dp[i][j] 表示 s[i..j] 是否是回文串\n        vector<vector<int>> dp(n, vector<int>(n));\n        // 初始化：所有长度为 1 的子串都是回文串\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = true;\n        }\n        // 递推开始\n        // 先枚举子串长度\n        for (int L = 2; L <= n; L++) {\n            // 枚举左边界，左边界的上限设置可以宽松一些\n            for (int i = 0; i < n; i++) {\n                // 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得\n                int j = L + i - 1;\n                // 如果右边界越界，就可以退出当前循环\n                if (j >= n) {\n                    break;\n                }\n\n                if (s[i] != s[j]) {\n                    dp[i][j] = false;\n                } else {\n                    if (j - i < 3) {\n                        dp[i][j] = true;\n                    } else {\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                }\n\n                // 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置\n                if (dp[i][j] && j - i + 1 > maxLen) {\n                    maxLen = j - i + 1;\n                    begin = i;\n                }\n            }\n        }\n        return s.substr(begin, maxLen);\n    }\n};\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(n^2)$，其中 $n$ 是字符串的长度。动态规划的状态总数为 $O(n^2)$，对于每个状态，我们需要转移的时间为 $O(1)$。\n\n* 空间复杂度：$O(n^2)$，即存储动态规划状态需要的空间。\n\n#### 方法二：中心扩展算法\n\n**思路与算法**\n\n我们仔细观察一下方法一中的状态转移方程：\n\n$$\n\\begin{cases}\n    P(i, i) &=\\quad \\text{true} \\\\\n    P(i, i+1) &=\\quad ( S_i == S_{i+1} ) \\\\\n    P(i, j) &=\\quad P(i+1, j-1) \\wedge (S_i == S_j)\n\\end{cases}\n$$\n\n找出其中的状态转移链：\n\n$$\nP(i, j) \\leftarrow P(i+1, j-1) \\leftarrow P(i+2, j-2) \\leftarrow \\cdots \\leftarrow \\text{某一边界情况}\n$$\n\n可以发现，**所有的状态在转移的时候的可能性都是唯一的**。也就是说，我们可以从每一种边界情况开始「扩展」，也可以得出所有的状态对应的答案。\n\n边界情况即为子串长度为 $1$ 或 $2$ 的情况。我们枚举每一种边界情况，并从对应的子串开始不断地向两边扩展。如果两边的字母相同，我们就可以继续扩展，例如从 $P(i+1,j-1)$ 扩展到 $P(i,j)$；如果两边的字母不同，我们就可以停止扩展，因为在这之后的子串都不能是回文串了。\n\n聪明的读者此时应该可以发现，「边界情况」对应的子串实际上就是我们「扩展」出的回文串的「回文中心」。方法二的本质即为：我们枚举所有的「回文中心」并尝试「扩展」，直到无法扩展为止，此时的回文串长度即为此「回文中心」下的最长回文串长度。我们对所有的长度求出最大值，即可得到最终的答案。\n\n```Java [sol2-Java]\nclass Solution {\n    public String longestPalindrome(String s) {\n        if (s == null || s.length() < 1) {\n            return \"\";\n        }\n        int start = 0, end = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int len1 = expandAroundCenter(s, i, i);\n            int len2 = expandAroundCenter(s, i, i + 1);\n            int len = Math.max(len1, len2);\n            if (len > end - start) {\n                start = i - (len - 1) / 2;\n                end = i + len / 2;\n            }\n        }\n        return s.substring(start, end + 1);\n    }\n\n    public int expandAroundCenter(String s, int left, int right) {\n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            --left;\n            ++right;\n        }\n        return right - left - 1;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def expandAroundCenter(self, s, left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return left + 1, right - 1\n\n    def longestPalindrome(self, s: str) -> str:\n        start, end = 0, 0\n        for i in range(len(s)):\n            left1, right1 = self.expandAroundCenter(s, i, i)\n            left2, right2 = self.expandAroundCenter(s, i, i + 1)\n            if right1 - left1 > end - start:\n                start, end = left1, right1\n            if right2 - left2 > end - start:\n                start, end = left2, right2\n        return s[start: end + 1]\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    pair<int, int> expandAroundCenter(const string& s, int left, int right) {\n        while (left >= 0 && right < s.size() && s[left] == s[right]) {\n            --left;\n            ++right;\n        }\n        return {left + 1, right - 1};\n    }\n\n    string longestPalindrome(string s) {\n        int start = 0, end = 0;\n        for (int i = 0; i < s.size(); ++i) {\n            auto [left1, right1] = expandAroundCenter(s, i, i);\n            auto [left2, right2] = expandAroundCenter(s, i, i + 1);\n            if (right1 - left1 > end - start) {\n                start = left1;\n                end = right1;\n            }\n            if (right2 - left2 > end - start) {\n                start = left2;\n                end = right2;\n            }\n        }\n        return s.substr(start, end - start + 1);\n    }\n};\n```\n\n```golang [sol2-Golang]\nfunc longestPalindrome(s string) string {\n    if s == \"\" {\n        return \"\"\n    }\n    start, end := 0, 0\n    for i := 0; i < len(s); i++ {\n        left1, right1 := expandAroundCenter(s, i, i)\n        left2, right2 := expandAroundCenter(s, i, i + 1)\n        if right1 - left1 > end - start {\n            start, end = left1, right1\n        }\n        if right2 - left2 > end - start {\n            start, end = left2, right2\n        }\n    }\n    return s[start:end+1]\n}\n\nfunc expandAroundCenter(s string, left, right int) (int, int) {\n    for ; left >= 0 && right < len(s) && s[left] == s[right]; left, right = left-1 , right+1 { }\n    return left + 1, right - 1\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n^2)$，其中 $n$ 是字符串的长度。长度为 $1$ 和 $2$ 的回文中心分别有 $n$ 和 $n-1$ 个，每个回文中心最多会向外扩展 $O(n)$ 次。\n\n* 空间复杂度：$O(1)$。\n\n#### 方法三：$\\text{Manacher}$ 算法\n\n还有一个复杂度为 $O(n)$ 的 $\\text{Manacher}$ 算法。然而本算法十分复杂，一般不作为面试内容。这里给出，仅供有兴趣的同学挑战自己。\n\n为了表述方便，我们定义一个新概念**臂长**，表示中心扩展算法向外扩展的长度。如果一个位置的最大回文字符串长度为 `2 * length + 1` ，其臂长为 `length`。\n\n下面的讨论只涉及长度为奇数的回文字符串。长度为偶数的回文字符串我们将会在最后与长度为奇数的情况统一起来。\n\n**思路与算法**\n\n在中心扩展算法的过程中，我们能够得出每个位置的臂长。那么当我们要得出以下一个位置 `i` 的臂长时，能不能利用之前得到的信息呢？\n\n答案是肯定的。具体来说，如果位置 `j` 的臂长为 `length`，并且有 `j + length > i`，如下图所示：\n\n![fig1](https://assets.leetcode-cn.com/solution-static/5/5_fig1.png)\n\n当在位置 `i` 开始进行中心拓展时，我们可以先找到 `i` 关于 `j` 的对称点 `2 * j - i`。那么如果点 `2 * j - i` 的臂长等于 `n`，我们就可以知道，点 `i` 的臂长至少为 `min(j + length - i, n)`。那么我们就可以直接跳过 `i` 到 `i + min(j + length - i, n)` 这部分，从 `i + min(j + length - i, n) + 1` 开始拓展。\n\n我们只需要在中心扩展法的过程中记录右臂在最右边的回文字符串，将其中心作为 `j`，在计算过程中就能最大限度地避免重复计算。\n\n那么现在还有一个问题：如何处理长度为偶数的回文字符串呢？\n\n我们可以通过一个特别的操作将奇偶数的情况统一起来：我们向字符串的头尾以及每两个字符中间添加一个特殊字符 `#`，比如字符串 `aaba` 处理后会变成 `#a#a#b#a#`。那么原先长度为偶数的回文字符串 `aa` 会变成长度为奇数的回文字符串 `#a#a#`，而长度为奇数的回文字符串 `aba` 会变成长度仍然为奇数的回文字符串 `#a#b#a#`，我们就不需要再考虑长度为偶数的回文字符串了。\n\n注意这里的特殊字符不需要是没有出现过的字母，我们可以使用任何一个字符来作为这个特殊字符。这是因为，当我们只考虑长度为奇数的回文字符串时，每次我们比较的两个字符奇偶性一定是相同的，所以原来字符串中的字符不会与插入的特殊字符互相比较，不会因此产生问题。\n\n```Java [sol3-Java]\nclass Solution {\n    public String longestPalindrome(String s) {\n        int start = 0, end = -1;\n        StringBuffer t = new StringBuffer(\"#\");\n        for (int i = 0; i < s.length(); ++i) {\n            t.append(s.charAt(i));\n            t.append('#');\n        }\n        t.append('#');\n        s = t.toString();\n\n        List<Integer> arm_len = new ArrayList<Integer>();\n        int right = -1, j = -1;\n        for (int i = 0; i < s.length(); ++i) {\n            int cur_arm_len;\n            if (right >= i) {\n                int i_sym = j * 2 - i;\n                int min_arm_len = Math.min(arm_len.get(i_sym), right - i);\n                cur_arm_len = expand(s, i - min_arm_len, i + min_arm_len);\n            } else {\n                cur_arm_len = expand(s, i, i);\n            }\n            arm_len.add(cur_arm_len);\n            if (i + cur_arm_len > right) {\n                j = i;\n                right = i + cur_arm_len;\n            }\n            if (cur_arm_len * 2 + 1 > end - start) {\n                start = i - cur_arm_len;\n                end = i + cur_arm_len;\n            }\n        }\n\n        StringBuffer ans = new StringBuffer();\n        for (int i = start; i <= end; ++i) {\n            if (s.charAt(i) != '#') {\n                ans.append(s.charAt(i));\n            }\n        }\n        return ans.toString();\n    }\n\n    public int expand(String s, int left, int right) {\n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            --left;\n            ++right;\n        }\n        return (right - left - 2) / 2;\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def expand(self, s, left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return (right - left - 2) // 2\n\n    def longestPalindrome(self, s: str) -> str:\n        end, start = -1, 0\n        s = '#' + '#'.join(list(s)) + '#'\n        arm_len = []\n        right = -1\n        j = -1\n        for i in range(len(s)):\n            if right >= i:\n                i_sym = 2 * j - i\n                min_arm_len = min(arm_len[i_sym], right - i)\n                cur_arm_len = self.expand(s, i - min_arm_len, i + min_arm_len)\n            else:\n                cur_arm_len = self.expand(s, i, i)\n            arm_len.append(cur_arm_len)\n            if i + cur_arm_len > right:\n                j = i\n                right = i + cur_arm_len\n            if 2 * cur_arm_len + 1 > end - start:\n                start = i - cur_arm_len\n                end = i + cur_arm_len\n        return s[start+1:end+1:2]\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int expand(const string& s, int left, int right) {\n        while (left >= 0 && right < s.size() && s[left] == s[right]) {\n            --left;\n            ++right;\n        }\n        return (right - left - 2) / 2;\n    }\n\n    string longestPalindrome(string s) {\n        int start = 0, end = -1;\n        string t = \"#\";\n        for (char c: s) {\n            t += c;\n            t += '#';\n        }\n        t += '#';\n        s = t;\n\n        vector<int> arm_len;\n        int right = -1, j = -1;\n        for (int i = 0; i < s.size(); ++i) {\n            int cur_arm_len;\n            if (right >= i) {\n                int i_sym = j * 2 - i;\n                int min_arm_len = min(arm_len[i_sym], right - i);\n                cur_arm_len = expand(s, i - min_arm_len, i + min_arm_len);\n            } else {\n                cur_arm_len = expand(s, i, i);\n            }\n            arm_len.push_back(cur_arm_len);\n            if (i + cur_arm_len > right) {\n                j = i;\n                right = i + cur_arm_len;\n            }\n            if (cur_arm_len * 2 + 1 > end - start) {\n                start = i - cur_arm_len;\n                end = i + cur_arm_len;\n            }\n        }\n\n        string ans;\n        for (int i = start; i <= end; ++i) {\n            if (s[i] != '#') {\n                ans += s[i];\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```golang [sol3-Golang]\nfunc longestPalindrome(s string) string {\n    start, end := 0, -1\n    t := \"#\"\n    for i := 0; i < len(s); i++ {\n        t += string(s[i]) + \"#\"\n    }\n    t += \"#\"\n    s = t\n    arm_len := []int{}\n    right, j := -1, -1\n    for i := 0; i < len(s); i++ {\n        var cur_arm_len int\n        if right >= i {\n            i_sym := j * 2 - i\n            min_arm_len := min(arm_len[i_sym], right-i)\n            cur_arm_len = expand(s, i-min_arm_len, i+min_arm_len)\n        } else {\n            cur_arm_len = expand(s, i, i)\n        }\n        arm_len = append(arm_len, cur_arm_len)\n        if i + cur_arm_len > right {\n            j = i\n            right = i + cur_arm_len\n        }\n        if cur_arm_len * 2 + 1 > end - start {\n            start = i - cur_arm_len\n            end = i + cur_arm_len\n        }\n    }\n    ans := \"\"\n    for i := start; i <= end; i++ {\n        if s[i] != '#' {\n            ans += string(s[i])\n        }\n    }\n    return ans\n}\n\nfunc expand(s string, left, right int) int {\n    for ; left >= 0 && right < len(s) && s[left] == s[right]; left, right = left-1, right+1 { }\n    return (right - left - 2) / 2\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 是字符串的长度。由于对于每个位置，扩展要么从当前的最右侧臂长 `right` 开始，要么只会进行一步，而 `right` 最多向前走 $O(n)$ 步，因此算法的复杂度为 $O(n)$。\n\n* 空间复杂度：$O(n)$，我们需要 $O(n)$ 的空间记录每个位置的臂长。"
}