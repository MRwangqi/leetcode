{
	"titleSlug": "maximum-segment-sum-after-removals",
	"slug": "by-endlesscheng-p61j",
	"url": "https://leetcode-cn.com/problems/maximum-segment-sum-after-removals/solution/by-endlesscheng-p61j/",
	"content": "本题 [视频讲解](https://www.bilibili.com/video/BV1Kd4y1Z7Fv) 已出炉，欢迎点赞三连，在评论区分享你对这场双周赛的看法~\r\n\r\n---\r\n\r\n#### 提示 1 \r\n\r\n删除不好做，添加比较好做。不妨倒着思考，删除变成了添加。\r\n\r\n#### 提示 2\r\n\r\n添加时可能会合并两个子段。\r\n\r\n我们需要考虑如何动态维护每个子段的元素和，并高效地合并两个子段。\r\n\r\n#### 提示 3\r\n\r\n用并查集（[视频讲解](https://www.bilibili.com/video/BV1Kd4y1Z7Fv) 中讲了原理），添加下标 $x=\\textit{removeQueries}[i]$ 时，用并查集合并 $x$ 和 $x+1$，并把 $\\textit{nums}[x]$ 加到子段和中。\r\n\r\n以 $\\textit{removeQueries}=[3,1,2,0]$ 为例说明。倒序遍历，我们会先合并下标 $0$ 和 $1$，这样相当于创建了一个下标子段 $[0]$；然后合并 $2$ 和 $3$，创建了下标子段 $[2]$；然后合并 $1$ 和 $2$，由于 $0$ 和 $1$ 已经合并了，这一操作会把 $0 1 2$ 都合并起来，最终形成下标子段 $[0,1,2]$。注意，这一合并过程中会形成若干条「链」，每一条链去掉最右边的元素就等价于实际的下标子段。\r\n\r\n另外一种理解方式是，把链看成是一列火车，这列火车有一节「幽灵火车头」，不算在实际的子段中。如果要合并两条链，就需要把左边这节幽灵火车头作为一节实际的车厢加到右边这列火车中，因此我们只需要合并 $x$ 和 $x+1$，不需要合并 $x$ 和 $x-1$。\r\n\r\n最后，对于 $\\textit{ans}[i]$，要么取上一个 $\\textit{ans}[i+1]$ 的最大子段和，要么取合并后的子段和，这两者取最大值。\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def maximumSegmentSum(self, nums: List[int], removeQueries: List[int]) -> List[int]:\r\n        n = len(nums)\r\n        fa = list(range(n + 1))\r\n        sum = [0] * (n + 1)\r\n        def find(x: int) -> int:\r\n            if fa[x] != x:\r\n                fa[x] = find(fa[x])\r\n            return fa[x]\r\n        ans = [0] * n\r\n        for i in range(n - 1, 0, -1):\r\n            x = removeQueries[i]\r\n            to = find(x + 1)\r\n            fa[x] = to  # 合并 x 和 x+1\r\n            sum[to] += sum[x] + nums[x]\r\n            ans[i - 1] = max(ans[i], sum[to])\r\n        return ans\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    int[] fa;\r\n\r\n    public long[] maximumSegmentSum(int[] nums, int[] removeQueries) {\r\n        var n = nums.length;\r\n        fa = new int[n + 1];\r\n        for (var i = 0; i <= n; i++) fa[i] = i;\r\n        var sum = new long[n + 1];\r\n\r\n        var ans = new long[n];\r\n        for (var i = n - 1; i > 0; --i) {\r\n            var x = removeQueries[i];\r\n            var to = find(x + 1);\r\n            fa[x] = to; // 合并 x 和 x+1\r\n            sum[to] += sum[x] + nums[x];\r\n            ans[i - 1] = Math.max(ans[i], sum[to]);\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    int find(int x) {\r\n        if (fa[x] != x) fa[x] = find(fa[x]);\r\n        return fa[x];\r\n    }\r\n}\r\n```\r\n\r\n```cpp [sol1-C++]\r\nclass Solution {\r\npublic:\r\n    vector<long long> maximumSegmentSum(vector<int> &nums, vector<int> &removeQueries) {\r\n        int n = nums.size();\r\n        int fa[n + 1];\r\n        iota(fa, fa + n + 1, 0);\r\n        long long sum[n + 1];\r\n        memset(sum, 0, sizeof(sum));\r\n        function<int(int)> find = [&](int x) -> int { return fa[x] == x ? x : fa[x] = find(fa[x]); };\r\n\r\n        vector<long long> ans(n);\r\n        for (int i = n - 1; i > 0; --i) {\r\n            int x = removeQueries[i];\r\n            int to = find(x + 1);\r\n            fa[x] = to; // 合并 x 和 x+1\r\n            sum[to] += sum[x] + nums[x];\r\n            ans[i - 1] = max(ans[i], sum[to]);\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc maximumSegmentSum(nums []int, removeQueries []int) (ans []int64) {\r\n\tn := len(nums)\r\n\tfa := make([]int, n+1)\r\n\tfor i := range fa {\r\n\t\tfa[i] = i\r\n\t}\r\n\tsum := make([]int64, n+1)\r\n\tvar find func(int) int\r\n\tfind = func(x int) int {\r\n\t\tif fa[x] != x {\r\n\t\t\tfa[x] = find(fa[x])\r\n\t\t}\r\n\t\treturn fa[x]\r\n\t}\r\n\r\n\tans = make([]int64, n)\r\n\tfor i := n - 1; i > 0; i-- {\r\n\t\tx := removeQueries[i]\r\n\t\tto := find(x + 1)\r\n\t\tfa[x] = to // 合并 x 和 x+1\r\n\t\tsum[to] += sum[x] + int64(nums[x])\r\n\t\tans[i-1] = max(ans[i], sum[to])\r\n\t}\r\n\treturn\r\n}\r\n\r\nfunc max(a, b int64) int64 { if b > a { return b }; return a }\r\n```\r\n\r\n#### 相似题目\r\n\r\n- [2334. 元素值大于变化阈值的子数组](https://leetcode.cn/problems/subarray-with-elements-greater-than-varying-threshold/)\r\n- [1562. 查找大小为 M 的最新分组](https://leetcode.cn/problems/find-latest-group-of-size-m/)\r\n\r\n#### 思考题\r\n\r\n$\\textit{nums}$ 有负数要怎么做？\r\n\r\n如果询问的是 $\\textit{nums}$ 某个子区间的最大子段和呢？\r\n\r\n更加一般的情况，见 [洛谷 P4513 小白逛公园](https://www.luogu.com.cn/problem/P4513) 和一道相似的问题 [2213. 由单个字符重复的最长子字符串](https://leetcode.cn/problems/longest-substring-of-one-repeating-character/)。\r\n"
}