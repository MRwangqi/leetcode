{
	"titleSlug": "largest-plus-sign",
	"slug": "zui-da-jia-hao-biao-zhi-by-leetcode",
	"url": "https://leetcode-cn.com/problems/largest-plus-sign/solution/zui-da-jia-hao-biao-zhi-by-leetcode/",
	"content": "#### 方法一： 暴力 【超时】\n\n**思路和算法**\n\n遍历所有可能的加号中心，找到其中最大的加号。这个算法的时间复杂度为 $O(N^3)$，大致估算的运算量为 $500^3 = (1.25) * 10^8$，这个复杂度是略微高出了题目要求的复杂度的。\n\n```python [solution1-Python]\nclass Solution(object):\n    def orderOfLargestPlusSign(self, N, mines):\n        banned = {tuple(mine) for mine in mines}\n        ans = 0\n        for r in xrange(N):\n            for c in xrange(N):\n                k = 0\n                while (k <= r < N-k and k <= c < N-k and\n                        (r-k, c) not in banned and\n                        (r+k, c) not in banned and\n                        (r, c-k) not in banned and\n                        (r, c+k) not in banned):\n                    k += 1\n                ans = max(ans, k)\n        return ans\n```\n```java [solution2-Java]\nclass Solution {\n    public int orderOfLargestPlusSign(int N, int[][] mines) {\n        Set<Integer> banned = new HashSet();\n        for (int[] mine: mines)\n            banned.add(mine[0] * N + mine[1]);\n            \n        int ans = 0;\n        for (int r = 0; r < N; ++r) for (int c = 0; c < N; ++c) {\n            int k = 0;\n            while (k <= r && r < N-k && k <= c && c < N-k &&\n                    !banned.contains((r-k)*N + c) &&\n                    !banned.contains((r+k)*N + c) &&\n                    !banned.contains(r*N + c-k) &&\n                    !banned.contains(r*N + c+k))\n                k++;\n            \n            ans = Math.max(ans, k);\n        }\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度: $O(N^3)$，遍历整个网格需要 $O(N^2)$，对于每个中心点需要遍历 $O(N)$ 次来找到 `k`。\n\n* 空间复杂度: $O(mines.length)$。\n\n#### 方法二： 动态规划 【通过】\n\n**思路**\n\n怎么提升暴力算法的性能呢？有一个方法就是加快找到 `k` 的速度。如果我们能预先计算出每个中心的最长臂长 $L_u, L_l, L_d, L_r$，那么就能知道以这个为中心的加号的阶就是 $\\min(L_u, L_l, L_d, L_r)$。动态规划可以用来预先计算臂长。\n\n**算法**\n\n对于每个中心点坐标 `(r, c)`，从四个方向计算从 `(r, c)` 开始最长连续 `1` 的个数。用动态规划的方法来看，如果 `grid[r][c]` 是 `0`，那么臂长就是 `0`，如果 `grid[r][c]` 是 `l`, 那么臂长就是当前方向上连续 `1` 的个数再加 `1`。\n举个例子，假设当前方向为左，网格中有一行为 `01110110`， 那么对应的连续 `1` 的个数就是 `012301201`。可以观察到，每个数要么是它相邻左边的数加 `1`， 要么是 `0`。\n对于每个中心点，让 `dp[r][c]` 为四个方向中最小的连续 `1` 的个数。显然，`dp` 数组中最大的值就是我们要的结果。\n\n```python [solution2-Python]\nclass Solution(object):\n    def orderOfLargestPlusSign(self, N, mines):\n        banned = {tuple(mine) for mine in mines}\n        dp = [[0] * N for _ in xrange(N)]\n        ans = 0\n        \n        for r in xrange(N):\n            count = 0\n            for c in xrange(N):\n                count = 0 if (r,c) in banned else count+1\n                dp[r][c] = count\n            \n            count = 0\n            for c in xrange(N-1, -1, -1):\n                count = 0 if (r,c) in banned else count+1\n                if count < dp[r][c]: dp[r][c] = count\n        \n        for c in xrange(N):\n            count = 0\n            for r in xrange(N):\n                count = 0 if (r,c) in banned else count+1\n                if count < dp[r][c]: dp[r][c] = count\n            \n            count = 0\n            for r in xrange(N-1, -1, -1):\n                count = 0 if (r, c) in banned else count+1\n                if count < dp[r][c]: dp[r][c] = count\n                if dp[r][c] > ans: ans = dp[r][c]\n        \n        return ans\n```\n\n```java [solution2-Java]\nclass Solution {\n    public int orderOfLargestPlusSign(int N, int[][] mines) {\n        Set<Integer> banned = new HashSet();\n        int[][] dp = new int[N][N];\n        \n        for (int[] mine: mines)\n            banned.add(mine[0] * N + mine[1]);\n        int ans = 0, count;\n        \n        for (int r = 0; r < N; ++r) {\n            count = 0;\n            for (int c = 0; c < N; ++c) {\n                count = banned.contains(r*N + c) ? 0 : count + 1;\n                dp[r][c] = count;\n            }\n            \n            count = 0;\n            for (int c = N-1; c >= 0; --c) {\n                count = banned.contains(r*N + c) ? 0 : count + 1;\n                dp[r][c] = Math.min(dp[r][c], count);\n            }\n        }\n        \n        for (int c = 0; c < N; ++c) {\n            count = 0;\n            for (int r = 0; r < N; ++r) {\n                count = banned.contains(r*N + c) ? 0 : count + 1;\n                dp[r][c] = Math.min(dp[r][c], count);\n            }\n            \n            count = 0;\n            for (int r = N-1; r >= 0; --r) {\n                count = banned.contains(r*N + c) ? 0 : count + 1;\n                dp[r][c] = Math.min(dp[r][c], count);\n                ans = Math.max(ans, dp[r][c]);\n            }\n        }\n        \n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度: $O(N^2)$。\n\n* 空间复杂度: $O(N^2)$，其中 $N$ 为 `dp` 数组的大小。"
}