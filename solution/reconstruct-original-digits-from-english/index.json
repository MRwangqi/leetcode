{
	"titleSlug": "reconstruct-original-digits-from-english",
	"slug": "cong-ying-wen-zhong-zhong-jian-shu-zi-by-9g1r",
	"url": "https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/solution/cong-ying-wen-zhong-zhong-jian-shu-zi-by-9g1r/",
	"content": "#### 方法一：依次确定每一个数字的次数\n\n**思路与算法**\n\n首先我们可以统计每个字母分别在哪些数字中出现：\n\n| 字母 | 数字 |\n| :-: | :-:|\n| e | 0 1 3 5 7 8 9 |\n| f | 4 5 |\n| g | 8 |\n| h | 3 8 |\n| i | 5 6 8 9 |\n| n | 1 7 9 |\n| o | 0 1 2 4 |\n| r | 0 3 4 |\n| s | 6 7 |\n| t | 2 3 8 |\n| u | 4 |\n| v | 5 7 |\n| w | 2 |\n| x | 6 |\n| z | 0 |\n\n可以发现，$\\text{z, w, u, x, g}$ 都只在一个数字中，即 $0, 2, 4, 6, 8$ 中出现。因此我们可以使用一个哈希表统计每个字母出现的次数，那么 $\\text{z, w, u, x, g}$ 出现的次数，即分别为 $0, 2, 4, 6, 8$ 出现的次数。\n\n随后我们可以注意那些只在两个数字中出现的字符：\n\n- $\\text{h}$ 只在 $3, 8$ 中出现。由于我们已经知道了 $8$ 出现的次数，因此可以计算出 $3$ 出现的次数。\n\n- $\\text{f}$ 只在 $4, 5$ 中出现。由于我们已经知道了 $4$ 出现的次数，因此可以计算出 $5$ 出现的次数。\n\n- $\\text{s}$ 只在 $6, 7$ 中出现。由于我们已经知道了 $6$ 出现的次数，因此可以计算出 $7$ 出现的次数。\n\n此时，我们还剩下 $1$ 和 $9$ 的出现次数没有求出：\n\n- $\\text{o}$ 只在 $0, 1, 2, 4$ 中出现，由于我们已经知道了 $0, 2, 4$ 出现的次数，因此可以计算出 $1$ 出现的次数。\n\n最后的 $9$ 就可以通过 $\\text{n, i, e}$ 中的任一字符计算得到了。这里推荐使用 $\\text{i}$ 进行计算，因为 $\\text{n}$ 在 $9$ 中出现了 $2$ 次，$\\text{e}$ 在 $3$ 中出现了 $2$ 次，容易在计算中遗漏。\n\n当我们统计完每个数字出现的次数后，我们按照升序将它们进行拼接即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string originalDigits(string s) {\n        unordered_map<char, int> c;\n        for (char ch: s) {\n            ++c[ch];\n        }\n\n        vector<int> cnt(10);\n        cnt[0] = c['z'];\n        cnt[2] = c['w'];\n        cnt[4] = c['u'];\n        cnt[6] = c['x'];\n        cnt[8] = c['g'];\n\n        cnt[3] = c['h'] - cnt[8];\n        cnt[5] = c['f'] - cnt[4];\n        cnt[7] = c['s'] - cnt[6];\n\n        cnt[1] = c['o'] - cnt[0] - cnt[2] - cnt[4];\n\n        cnt[9] = c['i'] - cnt[5] - cnt[6] - cnt[8];\n\n        string ans;\n        for (int i = 0; i < 10; ++i) {\n            for (int j = 0; j < cnt[i]; ++j) {\n                ans += char(i + '0');\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String originalDigits(String s) {\n        Map<Character, Integer> c = new HashMap<Character, Integer>();\n        for (int i = 0; i < s.length(); ++i) {\n            char ch = s.charAt(i);\n            c.put(ch, c.getOrDefault(ch, 0) + 1);\n        }\n\n        int[] cnt = new int[10];\n        cnt[0] = c.getOrDefault('z', 0);\n        cnt[2] = c.getOrDefault('w', 0);\n        cnt[4] = c.getOrDefault('u', 0);\n        cnt[6] = c.getOrDefault('x', 0);\n        cnt[8] = c.getOrDefault('g', 0);\n\n        cnt[3] = c.getOrDefault('h', 0) - cnt[8];\n        cnt[5] = c.getOrDefault('f', 0) - cnt[4];\n        cnt[7] = c.getOrDefault('s', 0) - cnt[6];\n\n        cnt[1] = c.getOrDefault('o', 0) - cnt[0] - cnt[2] - cnt[4];\n\n        cnt[9] = c.getOrDefault('i', 0) - cnt[5] - cnt[6] - cnt[8];\n\n        StringBuffer ans = new StringBuffer();\n        for (int i = 0; i < 10; ++i) {\n            for (int j = 0; j < cnt[i]; ++j) {\n                ans.append((char) (i + '0'));\n            }\n        }\n        return ans.toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string OriginalDigits(string s) {\n        Dictionary<char, int> c = new Dictionary<char, int>();\n        foreach (char ch in s) {\n            if (!c.ContainsKey(ch)) {\n                c.Add(ch, 0);\n            }\n            ++c[ch];\n        }\n\n        int[] cnt = new int[10];\n        cnt[0] = c.ContainsKey('z') ? c['z'] : 0;\n        cnt[2] = c.ContainsKey('w') ? c['w'] : 0;\n        cnt[4] = c.ContainsKey('u') ? c['u'] : 0;\n        cnt[6] = c.ContainsKey('x') ? c['x'] : 0;\n        cnt[8] = c.ContainsKey('g') ? c['g'] : 0;\n\n        cnt[3] = (c.ContainsKey('h') ? c['h'] : 0) - cnt[8];\n        cnt[5] = (c.ContainsKey('f') ? c['f'] : 0) - cnt[4];\n        cnt[7] = (c.ContainsKey('s') ? c['s'] : 0) - cnt[6];\n\n        cnt[1] = (c.ContainsKey('o') ? c['o'] : 0) - cnt[0] - cnt[2] - cnt[4];\n\n        cnt[9] = (c.ContainsKey('i') ? c['i'] : 0) - cnt[5] - cnt[6] - cnt[8];\n\n        StringBuilder ans = new StringBuilder();\n        for (int i = 0; i < 10; ++i) {\n            for (int j = 0; j < cnt[i]; ++j) {\n                ans.Append((char) (i + '0'));\n            }\n        }\n        return ans.ToString();\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def originalDigits(self, s: str) -> str:\n        c = Counter(s)\n\n        cnt = [0] * 10\n        cnt[0] = c[\"z\"]\n        cnt[2] = c[\"w\"]\n        cnt[4] = c[\"u\"]\n        cnt[6] = c[\"x\"]\n        cnt[8] = c[\"g\"]\n\n        cnt[3] = c[\"h\"] - cnt[8]\n        cnt[5] = c[\"f\"] - cnt[4]\n        cnt[7] = c[\"s\"] - cnt[6]\n        \n        cnt[1] = c[\"o\"] - cnt[0] - cnt[2] - cnt[4]\n\n        cnt[9] = c[\"i\"] - cnt[5] - cnt[6] - cnt[8]\n\n        return \"\".join(str(x) * cnt[x] for x in range(10))\n```\n\n```go [sol1-Golang]\nfunc originalDigits(s string) string {\n    c := map[rune]int{}\n    for _, ch := range s {\n        c[ch]++\n    }\n\n    cnt := [10]int{}\n    cnt[0] = c['z']\n    cnt[2] = c['w']\n    cnt[4] = c['u']\n    cnt[6] = c['x']\n    cnt[8] = c['g']\n\n    cnt[3] = c['h'] - cnt[8]\n    cnt[5] = c['f'] - cnt[4]\n    cnt[7] = c['s'] - cnt[6]\n\n    cnt[1] = c['o'] - cnt[0] - cnt[2] - cnt[4]\n\n    cnt[9] = c['i'] - cnt[5] - cnt[6] - cnt[8]\n\n    ans := []byte{}\n    for i, c := range cnt {\n        ans = append(ans, bytes.Repeat([]byte{byte('0' + i)}, c)...)\n    }\n    return string(ans)\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar originalDigits = function(s) {\n    const c = new Map();\n    for (const ch of s) {\n        c.set(ch, (c.get(ch) || 0) + 1);\n    }\n\n    const cnt = new Array(10).fill(0);\n    cnt[0] = c.get('z') || 0;\n    cnt[2] = c.get('w') || 0;\n    cnt[4] = c.get('u') || 0;\n    cnt[6] = c.get('x') || 0;\n    cnt[8] = c.get('g') || 0;\n\n    cnt[3] = (c.get('h') || 0) - cnt[8];\n    cnt[5] = (c.get('f') || 0) - cnt[4];\n    cnt[7] = (c.get('s') || 0) - cnt[6];\n\n    cnt[1] = (c.get('o') || 0) - cnt[0] - cnt[2] - cnt[4];\n\n    cnt[9] = (c.get('i') || 0) - cnt[5] - cnt[6] - cnt[8];\n\n    const ans = [];\n    for (let i = 0; i < 10; ++i) {\n        for (let j = 0; j < cnt[i]; ++j) {\n            ans.push(String.fromCharCode(i + '0'.charCodeAt()));\n        }\n    }\n    return ans.join('');\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(|s|)$，其中 $|s|$ 是字符串 $s$ 的长度。\n\n- 空间复杂度：$O(|\\Sigma|)$，其中 $\\Sigma$ 表示字符集，$|\\Sigma|$ 表示字符集的大小，在本题中 $\\Sigma$ 为所有在 $0 \\sim 9$ 中出现的英文字母。"
}