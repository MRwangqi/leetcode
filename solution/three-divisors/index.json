{
	"titleSlug": "three-divisors",
	"slug": "san-chu-shu-by-leetcode-solution-z1b4",
	"url": "https://leetcode-cn.com/problems/three-divisors/solution/san-chu-shu-by-leetcode-solution-z1b4/",
	"content": "#### 方法一：枚举正除数\n\n**思路与算法**\n\n为了计算整数 $n$ 的正除数数目，一种常见的思路是遍历 $[1, n]$ 闭区间内的所有正整数。但对于任意一个大于等于 $\\left\\lfloor \\sqrt{n} \\right\\rfloor$ （其中 $\\left\\lfloor \\dots \\right\\rfloor$ 为向下取整）的正除数 $x$，$n / x$ 也是 $n$ 的正除数，且一定小于等于 $\\left\\lfloor \\sqrt{n} \\right\\rfloor$。\n\n因此，我们只需遍历 $[1, \\left\\lfloor \\sqrt{n} \\right\\rfloor]$ 闭区间内的所有正整数，便可以统计出整数 $n$ 的正除数数目。如果整数 $x$ 被 $n$ 整除，那么 $x$ 与 $n / x$ 都是 $n$ 的正除数。此时我们需要根据 $x$ 与 $n / x$ 是否相等来确定新增的正除数数目：\n\n- $x = n / x$，此时新增的正除数数目为 $1$；\n\n- $x \\not = n / x$，此时新增的正除数数目为 $2$。\n\n最终，我们判断正除数总数是否等于 $3$ 并返回答案。\n\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isThree(int n) {\n        int cnt = 0;\n        for (int i = 1; i * i <= n; ++i){\n            if (n % i == 0){\n                if (i != n / i){\n                    // 此时 i 与 n / i 为不同整数\n                    cnt += 2;\n                }\n                else{\n                    // 此时 i 与 n / i 相等\n                    cnt += 1;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n};\n```\n\n```Python [sol1-Python3]\nfrom math import sqrt\n\nclass Solution:\n    def isThree(self, n: int) -> bool:\n        cnt = 0\n        i = 1\n        while i * i <= n:\n            if n % i == 0:\n                if i != n // i:\n                    # 此时 i 与 n / i 为不同整数\n                    cnt += 2\n                else:\n                    /# 此时 i 与 n / i 相等\n                    cnt += 1\n            i += 1\n        return cnt == 3\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\sqrt{n})$，其中 $n$ 为整数的大小。即为遍历 $[1, \\left\\lfloor \\sqrt{n} \\right\\rfloor]$ 内整数并统计正除数数量的时间复杂度。\n\n- 空间复杂度：$O(1)$。"
}