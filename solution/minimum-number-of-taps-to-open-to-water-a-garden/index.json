{
	"titleSlug": "minimum-number-of-taps-to-open-to-water-a-garden",
	"slug": "guan-gai-hua-yuan-de-zui-shao-shui-long-tou-shu-3",
	"url": "https://leetcode-cn.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/solution/guan-gai-hua-yuan-de-zui-shao-shui-long-tou-shu-3/",
	"content": "#### 分析：\n\n本题给一个经典的模型披上了一件华丽的外衣，即：\n\n> 给定数轴上的一个大区间 `I` 和 `n` 个小区间 `i[0], i[1], ..., i[n - 1]`，问最少选择多少个小区间，使得这些小区间的并集可以覆盖整个大区间。\n\n对于本题，我们将 `[0, n]` 看成大区间 `I`，`n + 1` 个水龙头的灌溉区域分别看成小区间 `i[0], i[1] ..., i[n]`，那么灌溉整个花园的最少水龙头数目就等价于将大区间 `I` 完全覆盖的最少小区间数目。\n\n在力扣平台中有一些类似的题目，本质也是上述的模型，例如 [45. 跳跃游戏 II](https://leetcode-cn.com/problems/jump-game-ii/) 和 [1024. 视频拼接](https://leetcode-cn.com/problems/video-stitching/)。下面给出的代码虽然仅适用于本题，但这一类题目的方法是通用的。读者在阅读完题解后，可以尝试从中归纳出通用的解题方法。\n\n#### 方法一：动态规划\n\n对于位置为 `i` 的水龙头，它可以灌溉的区间为 `[i - ranges[i], i + ranges[i]]`。由于整个花园的区间为 `[0, n]`，我们需要将灌溉的区间约束在 `[0, n]` 的范围内。我们将约束后的区间记为 `[li, ri]`，即：\n\n```\nli = max(i - ranges[i], 0)\nri = min(i + ranges[i], n)\n```\n\n那么我们需要在 `[l0, r0], [l1, r1], ..., [ln, rn]` 中选出一些区间，使得它们可以覆盖 `[0, n]` 并且区间的个数最少。\n\n对于每一个区间 `[li, ri]`，我们将其绑定在它的右端点 `ri` 上，即 `prev(i) = li` 表示有一个区间为 `[li, ri]`。当多个区间有相同的 `ri` 时，我们将最长的那个区间作为 `ri` 的绑定区间，这是因为在选取区间时，如果区间的右端点固定，选取长的区间一定更优。如果某一个位置 `rx` 没有被绑定区间，那么我们给它赋予默认值 `prev(rx) = rx`，表示有一个区间为 `[rx, rx]`，它只覆盖了花园中的一个点，不可能作为答案的一部分，因此这个区间是无效的。\n\n在得到了 `prev(0), prev(1), ..., prev(n)` 之后，我们就可以进行动态规划了。我们令 `dp[i]` 表示覆盖花园的子区间 `[0, i]`，并且在选取了右端点 `i` 绑定的区间 `[prev(i), i]` 的情况下，至少需要选取的区间数目。由于花园区间 `[0, n]` 的右端点需要被覆盖，那么我们必须要选取右端点 `n` 绑定的区间 `[prev(n), n]`，因此 `dp[n]` 即为最终的答案。\n\n那么如何进行状态转移呢？我们可以考虑在选取了区间 `[prev(i), i]` 之后，为了覆盖花园中剩余的部分（即 `[0, prev(i) - 1]`），我们还需要选取哪些区间。如果先不处理 `prev(i) == 0` 的特殊情况，那么我们必须要选取一个右端点在 `[prev(i), i - 1]` 内的区间，因为如果不这样做，`[prev(i) - 1, prev(i)]` 这个长度为 `1` 的段就不会被任何区间覆盖。因此我们可以得到如下的状态转移方程：\n\n```\ndp[i] = min(dp[j]) + 1, 其中 prev(i) <= j < i\n```\n\n我们再回过头来考虑 `prev(i) == 0` 的特殊情况，将 `prev(i) = 0` 带入状态转移方程：\n\n```\ndp[i] = min(dp[j]) + 1, 其中 0 <= j < i\n```\n\n如果 `prev(i) == 0`，我们只需要一个区间（即 `[prev(i), i]`）就可以覆盖花园中的一段 `[0, i]` 了，即 `dp[i]` 的值为 `1`。那么使用上述的状态转移方程可以计算出正确的结果吗？\n\n答案是肯定的。我们只需要将 `dp[0]` 这一项作为边界情况，将其置为 `0` 即可。这样以来，当 `j = 0` 时，`dp[i] = dp[0] + 1 = 1`，可以计算出正确的结果。将 `dp[0]` 置为 `0` 也是十分自然的，这是因为 `prev(i)` 的值一定为 `0`，那么它对应的区间 `[0, 0]` 是一个无效的区间。同时，`dp[0]` 对应花园的子区间 `[0, 0]`，这也是一个无效的区间，因此我们可以将 `dp[0]` 置为 `0`，并从 `i = 1` 开始进行动态规划。\n\n最后，我们还需要考虑不合法的情况。我们可以用 `dp[i] = BIG` 表示花园子区间 `[0, i]` 无法被覆盖，其中 `BIG` 是一个很大的整数。在进行状态转移时，如果 `dp[j] == BIG`，那么我们就不使用 `dp[j]` 对 `dp[i]` 进行状态转移。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minTaps(int n, vector<int>& ranges) {\n        vector<int> prev(n + 1);\n        iota(prev.begin(), prev.end(), 0);\n\n        for (int i = 0; i <= n; ++i) {\n            int l = max(i - ranges[i], 0);\n            int r = min(i + ranges[i], n);\n            prev[r] = min(prev[r], l);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 1; i <= n; ++i) {\n            for (int j = prev[i]; j < i; ++j) {\n                if (dp[j] != INT_MAX) {\n                    dp[i] = min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n\n        return (dp[n] == INT_MAX ? -1 : dp[n]);\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minTaps(self, n: int, ranges: List[int]) -> int:\n        prev = [x for x in range(n + 1)]\n        for i in range(n + 1):\n            l = max(i - ranges[i], 0)\n            r = min(i + ranges[i], n)\n            prev[r] = min(prev[r], l)\n        \n        BIG = 2**30\n        dp = [0] + [BIG] * n\n        for i in range(1, n + 1):\n            for j in range(prev[i], i):\n                if dp[j] != BIG:\n                    dp[i] = min(dp[i], dp[j] + 1)\n        \n        return -1 if dp[n] == BIG else dp[n]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(NR)$，其中 $R$ 是数组 `ranges` 中的最大值。\n\n- 空间复杂度：$O(N)$。\n\n#### 方法二：贪心算法\n\n方法一中的状态转移方程看上去非常简单，给我们一种直观的感受：它可以继续优化下去。\n\n我们不妨倒过来考虑这个问题。对于花园区间 `[0, n]`，首先我们必须选取右端点 `n` 绑定的区间 `[prev(n), n]`。在这之后，动态规划的做法告诉我们，`dp[n]` 应当从 `dp[j]` 转移而来，其中 `prev(n) <= j < n`，那么我们如何更快速地选择 `j` 呢？\n\n想一想我们在选择右端点 `n` 绑定的区间时，如果有多个区间的右端点都是 `n`，我们就选择一个最长的区间进行绑定。那么我们在选择 `j` 时，也可以使用类似的方法，选择 `prev(j)` 值最小的 `j`，也就是说，只要 `j` 在有效的范围 `prev(n) <= j < n` 内，我们就选择一个左端点 `prev(j)` 最小的区间。这是一种贪心的方法，它的正确性也是显然的：在必须选择一个区间的前提下，选择 `prev(j)` 最小的区间可以尽可能多地覆盖花园。\n\n我们选择的这两个区间有两种不同的位置情况：\n\n```\n   |----------------|\nprev(n)             n\n     |---------|\n  prev(j)      j\n```\n\n第一种情况是 `prev(j) >= prev(n)`，此时我们无法在 `prev(n) <= j < n` 内选出一个区间，使得花园的覆盖范围变大。因此在这种情况下是无解的。\n\n```\n          |----------------|\n       prev(n)             n\n   |--------------|\nprev(j)           j\n```\n\n第二种情况是 `prev(j) < prev(n)`，此时我们选取的区间 `[prev(j), j]` 使得花园的覆盖范围变得尽可能大。类似地，当我们选择第三个区间时，需要找出 `prev(j) <= j' < n` 且 `prev(j')` 值最小的 `j'`，将 `[prev(j'), j']` 作为第三个区间。\n\n以此类推，我们可以得到如下的算法流程：\n\n- 我们用 `breakpoint` 表示最近一个被选取的区间的左边界，初始值为 `n`，表示选取了无效的 `[n, n]` 区间；\n\n- 我们用 `furthest` 表示遍历到当前位置 `i` 时，所有 `prev(i)` 的最小值，也就是当我们必须要选择一个区间时，应当选择的那个区间的左端点。初始值为一个很大的整数；\n\n- 我们从 `n` 开始递减地遍历花园中的每一个位置：\n\n  - 对于当前位置 `i`，用 `prev(i)` 更新 `furthest`；\n\n  - 如果当前位置 `i` 等于左边界 `breakpoint`，说明我们遍历到了当前选择的所有区间的交集的左边界，此时必须要选择一个新的区间，它的左端点是 `furthest`。如果 `furthest >= breakpoint`，就对应了上面的第一种情况，表示无解；如果 `furthest < breakpoint`，就对应了上面的第二种情况，我们将 `breakpoint` 更新为 `furthest`，并将答案（选择的区间数量）增加 `1`。\n\n- 在遍历结束后，我们返回答案。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int minTaps(int n, vector<int>& ranges) {\n        vector<int> prev(n + 1);\n        iota(prev.begin(), prev.end(), 0);\n\n        for (int i = 0; i <= n; ++i) {\n            int l = max(i - ranges[i], 0);\n            int r = min(i + ranges[i], n);\n            prev[r] = min(prev[r], l);\n        }\n\n        int breakpoint = n, furthest = INT_MAX;\n        int ans = 0;\n        for (int i = n; i > 0; --i) {\n            furthest = min(furthest, prev[i]);\n            if (i == breakpoint) {\n                if (furthest >= i) {\n                    return -1;\n                }\n                breakpoint = furthest;\n                ++ans;\n            }\n        }\n\n        return ans;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def minTaps(self, n: int, ranges: List[int]) -> int:\n        prev = [x for x in range(n + 1)]\n        for i in range(n + 1):\n            l = max(i - ranges[i], 0)\n            r = min(i + ranges[i], n)\n            prev[r] = min(prev[r], l)\n        \n        breakpoint, furthest = n, 2**30\n        ans = 0\n        for i in range(n, 0, -1):\n            furthest = min(furthest, prev[i])\n            if i == breakpoint:\n                if furthest >= i:\n                    return -1\n                breakpoint = furthest\n                ans += 1\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$。\n\n- 空间复杂度：$O(N)$。"
}