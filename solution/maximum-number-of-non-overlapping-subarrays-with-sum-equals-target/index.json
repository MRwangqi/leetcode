{
	"titleSlug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
	"slug": "he-wei-mu-biao-zhi-de-zui-da-shu-mu-bu-zhong-die-f",
	"url": "https://leetcode-cn.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/solution/he-wei-mu-biao-zhi-de-zui-da-shu-mu-bu-zhong-die-f/",
	"content": "#### 方法一：贪心\n\n**思路与算法**\n\n由于题目要求所有的子数组**互不重叠**，因此对于某个满足条件的子数组，如果其右端点是所有满足条件的子数组的右端点中最小的那一个，则该子数组一定会被选择。\n\n故可以使用贪心算法：从左到右遍历数组，一旦发现有某个以当前下标 $i$ 为右端点的子数组和为 $\\textit{target}$，就给计数器的值加 $1$，并从数组 $\\textit{nums}$ 的下标 $i+1$ 开始，进行下一次寻找。\n\n为了判断是否存在和为 $\\textit{target}$ 的子数组，我们在遍历的过程中记录数组的前缀和，并将它们保存在哈希表中。如果位置 $i$ 对应的前缀和为 $\\textit{sum}_i$，而 $\\textit{sum}_i-\\textit{target}$ 已经存在于哈希表中，就说明找到了一个和为 $\\textit{target}$ 的子数组。\n\n如果找到了一个符合条件的子数组，则接下来遍历时需要用一个新的哈希表，而不是使用原有的哈希表，因为要确保每次找到的子数组都与此前找到的不重合。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxNonOverlapping(vector<int>& nums, int target) {\n        int size = nums.size();\n        int ret = 0;\n        int i = 0;\n        while (i < size) {\n            unordered_set <int> s = {0};\n            int sum = 0;\n            while (i < size) {\n                sum += nums[i];\n                if (s.find(sum - target) != s.end()) {\n                    ret++;\n                    break;\n                } else {\n                    s.insert(sum);\n                    i++;\n                }\n            }\n            i++;\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxNonOverlapping(int[] nums, int target) {\n        int size = nums.length;\n        int ret = 0;\n        int i = 0;\n        while (i < size) {\n            Set<Integer> set = new HashSet<Integer>() {{\n                add(0);\n            }};\n            int sum = 0;\n            while (i < size) {\n                sum += nums[i];\n                if (set.contains(sum - target)) {\n                    ret++;\n                    break;\n                } else {\n                    set.add(sum);\n                    i++;\n                }\n            }\n            i++;\n        }\n        return ret;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        size = len(nums)\n        ret = 0\n        i = 0\n        while i < size:\n            s = {0}\n            total = 0\n            while i < size:\n                total += nums[i]\n                if total - target in s:\n                    ret += 1\n                    break\n                else:\n                    s.add(total)\n                    i += 1\n            i += 1\n        return ret\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为数组 $\\textit{nums}$ 的长度。我们要遍历数组的每个元素，其中哈希表的插入和查询都只需要单次 $O(1)$ 的时间。\n\n- 空间复杂度：$O(N)$，因为哈希表中最多保存 $O(N)$ 个元素。"
}