{
	"titleSlug": "check-if-every-row-and-column-contains-all-numbers",
	"slug": "jian-cha-shi-fou-mei-yi-xing-mei-yi-lie-uwrwu",
	"url": "https://leetcode-cn.com/problems/check-if-every-row-and-column-contains-all-numbers/solution/jian-cha-shi-fou-mei-yi-xing-mei-yi-lie-uwrwu/",
	"content": "#### 方法一：哈希表\n\n**思路与算法**\n\n由于矩阵元素仅由从 $1$ 到 $n$ 的整数构成，因此，「某一行/列包含从 $1$ 到 $n$ 的所有整数」等价于「某一行/列的数值**互不重复**」。\n\n因此，在遍历每一行/列的过程中，我们可以用一个哈希集合 $\\textit{occur}$ 维护该行/列出现过的整数。如果遍历到某一个在 $\\textit{occur}$ 中存在的整数，则说明该行/列没有包含从 $1$ 到 $n$ 的所有整数，此时我们返回 $\\texttt{false}$。\n\n当遍历完成全部行与列后，每一行/列都包含从 $1$ 到 $n$ 的所有整数，则说明该矩阵为有效矩阵，此时我们返回 $\\texttt{true}$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool checkValid(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        unordered_set<int> occur;   // 每一行/列出现过的整数\n        // 判断每一行是否符合要求\n        for (int i = 0; i < n; ++i) {\n            occur.clear();   // 确保统计前哈希表为空\n            for (int j = 0; j < n; ++j) {\n                if (occur.count(matrix[i][j])) {\n                    // 出现重复整数，该行不符合要求\n                    return false;\n                }\n                occur.insert(matrix[i][j]);\n            }\n        }\n        // 判断每一列是否符合要求\n        for (int i = 0; i < n; ++i) {\n            occur.clear();   // 确保统计前哈希表为空\n            for (int j = 0; j < n; ++j) {\n                if (occur.count(matrix[j][i])) {\n                    // 出现重复整数，该列不符合要求\n                    return false;\n                }\n                occur.insert(matrix[j][i]);\n            }\n        }\n        return true;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def checkValid(self, matrix: List[List[int]]) -> bool:\n        n = len(matrix)\n        occur = set()   # 每一行/列出现过的整数\n        # 判断每一行是否符合要求\n        for i in range(n):\n            occur.clear()   # 确保统计前哈希表为空\n            for j in range(n):\n                if matrix[i][j] in occur:\n                    # 出现重复整数，该行不符合要求\n                    return False\n                occur.add(matrix[i][j])\n        # 判断每一列是否符合要求\n        for i in range(n):\n            occur.clear()   # 确保统计前哈希表为空\n            for j in range(n):\n                if matrix[j][i] in occur:\n                    # 出现重复整数，该列不符合要求\n                    return False\n                occur.add(matrix[j][i])\n        return True\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 为矩阵 $\\textit{matrix}$ 的长或宽。判断每一行或列是否符合要求的时间复杂度为 $O(n)$，我们共需判断 $O(n)$ 次。\n\n- 空间复杂度：$O(n)$，即为哈希表的空间开销。"
}