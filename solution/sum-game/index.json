{
	"titleSlug": "sum-game",
	"slug": "qiu-he-you-xi-by-leetcode-solution-06ti",
	"url": "https://leetcode-cn.com/problems/sum-game/solution/qiu-he-you-xi-by-leetcode-solution-06ti/",
	"content": "#### 方法一：猜想 + 数学归纳法验证\n\n**提示 $1$**\n\n如果问号的个数为**奇数**，那么 Alice 一定获胜。\n\n**提示 $1$ 解释**\n\n由于 Alice 先手，那么最后一个问号一定是由 Alice 操作。\n\n显然，在 $[0, 9]$ 中最多只有一个数字 $d$ 可以使得最终前一半数字的和等于后一半数字的和，因此 Alice 只要将问号替换成 $d$ 以外的任意数字即可。\n\n接下来我们就只需要考虑问号的个数为**偶数**的情况。\n\n**提示 $2$**\n\n如果问号的个数为 $0$，那么 Bob 获胜当且仅当前一半数字的和等于后一半数字的和。\n\n**提示 $3$**\n\n如果问号的个数为 $2$ 并且它们出现在不同侧（即一个问号在前一半中，另一个问号在后一半中），那么 Bob 获胜当且仅当前一半数字的和等于后一半数字的和。\n\n**提示 $3$ 解释**\n\n如果前一半数字的和等于后一半数字的和，那么 Alice 选择任意一个问号替换成任意数字 $d$，Bob 只需要选择另一个问号同样替换成数字 $d$ 即可，因此 Bob 一定获胜。\n\n如果前一半数字的和不等于后一半数字的和，那么 Alice 只需要选择较大的那一半数字中的问号，将其替换成 $9$。由于无法将问号替换成比 $9$ 更大的数，因此 Alice 一定获胜。\n\n**提示 $4$**\n\n如果问号的个数为 $2$ 并且它们出现在同侧，那么 Bob 获胜当且仅当包含问号的一半的数字和恰好比不包含问号的一半的数字和小 $9$。\n\n**提示 $4$ 解释**\n\nBob 总可以保证它和 Alice 在相邻的两次操作中替换的数字之和为 $9$，即如果 Alice 选择将问号替换成数字 $d$，Bob 就将另一个问号替换成数字 $9-d$。\n\n因此，如果满足提示 $4$，那么 Bob 一定获胜，否则：\n\n- 如果超过 $9$，那么 Alice 将问号替换成 $0$；\n\n- 如果不超过 $9$（不包含 $9$），那么 Alice 将问号替换成 $9$。\n\n这样一来，Bob 无法选择 $[0, 9]$ 中的数字使得前一半数字的和等于后一半数字的和，因此 Alice 一定获胜。\n\n**提示 $5$**\n\n假设前一半的数字和为 $n_0$，问号的个数为 $q_0$，后一半的数字和为 $n_1$，问号的个数为 $q_1$，且 $q_0+q_1$ 为偶数，那么 Bob 获胜当且仅当：\n\n$$\nn_0 - n_1 = \\frac{9}{2}(q_1 - q_0) \\tag{1}\n$$\n\n我们可以根据提示 $3$ 和提示 $4$ 形象地解释这个等式。不失一般性，我们假设 $q_0 \\leq q_1$，那么：\n\n- 对于 $q_0$ 个分别在两侧的问号，根据提示 $3$，Alice 和 Bob 的最优策略会使得它们的数字和完全相等；\n\n- 对于 $q_1-q_0$ 个在后一半中的问号，根据提示 $4$，Alice 和 Bob 的最优策略会使得它们分成 $\\dfrac{q_1-q_0}{2}$ 对，每一对的数字和为 $9$。\n\n- 因此，要使得数字和相等，前一半必须比后一半大 $\\dfrac{9}{2}(q_1-q_0)$。\n\n**提示 $5$ 解释**\n\n更严谨的证明可以对问号的总个数 $q_0+q_1$ 使用数学归纳法：\n\n- 根据提示 $3$ 和提示 $4$，当 $q_0+q_1=2$ 时，提示 $5$ 成立，即当等式 $(1)$ 成立时 Bob 一定获胜，否则 Alice 一定获胜；\n\n- 假设当 $q_0+q_1=k$ 时提示 $5$ 成立，那么当 $q_0+q_1=k+2$ 时，不失一般性，我们假设 $q_0 \\leq q_1$，那么：\n\n    - 如果此时等式 $(1)$ 已经成立，那么如果 Alice 选择将左侧的问号替换成 $d$，Bob 就将右侧的问号替换成 $d$；如果 Alice 选择将右侧的问号替换成 $d$，Bob 就将另一个右侧的问号替换成 $9-d$，使得等式 $(1)$ 仍然成立。这样就归纳到了 $q_0+q_1=k$ 的情况，说明 Bob 一定获胜；\n\n    - 如果此时等式 $(1)$ 不成立，记 $n_0 - n_1 = \\dfrac{9}{2}(q_1-q_0) + \\delta$，\n    \n        - 如果 $\\delta > 0$，那么 Alice 选择将右侧的问号替换成 $0$。这样一来，如果 Bob 选择左侧的问号替换成 $d$：\n        \n        $$\n        (n_0+d)-n_1=\\frac{9}{2}(q_1-q_0)+(\\delta + d) \\neq \\frac{9}{2}((q_1-1)-(q_0-1))\n        $$\n        \n        等式 $(1)$ 仍然不成立。如果 Bob 选择另一个右侧的问号替换成 $d$：\n        \n        $$\n        n_0 - (n_1 + d) = \\frac{9}{2}((q_1-2)-q_0)+(\\delta+9-d) \\neq \\frac{9}{2}((q_1-2)-q_0)\n        $$\n\n        等式 $(1)$ 同样不成立；\n\n        - 如果 $\\delta < 0$，那么 Alice 选择将右侧的问号替换成 $9$。这样一来，如果 Bob 选择左侧的问号替换成 $d$：\n\n        $$\n        (n_0+d)-(n_1+9)=\\frac{9}{2}(q_1-q_0)+(\\delta-9+d) \\neq \\frac{9}{2}((q_1-1)-(q_0-1))\n        $$\n\n        等式 $(1)$ 仍然不成立。如果 Bob 选择另一个右侧的问号替换成 $d$：\n\n        $$\n        n_0 - (n_1 + 9 + d) = \\frac{9}{2}((q_1-2)-q_0)+(\\delta-d) \\neq \\frac{9}{2}((q_1-2)-q_0)\n        $$\n\n        等式 $(1)$ 同样不成立。\n\n        此时我们就将所有的可能归纳到了 $q_0+q_1=k$ 的情况，说明 Alice 一定获胜。\n\n因此提示 $5$ 成立。\n\n**思路与算法**\n\n我们对字符串 $\\textit{num}$ 进行遍历，计算出 $n_0, q_0, n_1, q_1$。如果 $q_0+q_1$ 为奇数则 Alice 必胜，否则通过提示 $5$ 来判断获胜方。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool sumGame(string num) {\n        int n = num.size();\n\n        auto get = [](string&& s) -> pair<int, int> {\n            int nn = 0, qq = 0;\n            for (char ch: s) {\n                if (ch == '?') {\n                    ++qq;\n                }\n                else {\n                    nn += (ch - '0');\n                }\n            }\n            return {nn, qq};\n        };\n\n        auto [n0, q0] = get(num.substr(0, n / 2));\n        auto [n1, q1] = get(num.substr(n / 2, n / 2));\n\n        return ((q0 + q1) % 2 == 1) || (n0 - n1 != (q1 - q0) * 9 / 2);\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sumGame(self, num: str) -> bool:\n        n = len(num)\n        \n        def get(s: str) -> (int, int):\n            nn = qq = 0\n            for ch in s:\n                if ch == \"?\":\n                    qq += 1\n                else:\n                    nn += int(ch)\n            return nn, qq\n        \n        n0, q0 = get(num[:n//2])\n        n1, q1 = get(num[n//2:])\n        \n        return (q0 + q1) % 2 == 1 or n0 - n1 != (q1 - q0) * 9 // 2\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $\\textit{num}$ 的长度。\n\n- 空间复杂度：$O(n)$。上面给出的代码对 $\\textit{num}$ 的两侧进行了拷贝，使得代码更加直观。我们也可以直接对 $\\textit{num}$ 进行一次遍历计算出 $n_0, q_0, n_1, q_1$，空间复杂度为 $O(1)$。"
}