{
	"titleSlug": "paths-with-sum-lcci",
	"slug": "qiu-he-lu-jing-by-leetcode-solution-wjy7",
	"url": "https://leetcode-cn.com/problems/paths-with-sum-lcci/solution/qiu-he-lu-jing-by-leetcode-solution-wjy7/",
	"content": "#### 方法一：深度优先搜索\n\n**思路与算法**\n\n我们首先想到的解法是穷举所有的可能，我们访问每一个节点 $\\textit{node}$，检测以 $\\textit{node}$ 为起始节点且向下延深的路径有多少种。我们递归遍历每一个节点的所有可能的路径，然后将这些路径数目加起来即为返回结果。\n\n+ 我们首先定义 $\\textit{rootSum}(p,\\textit{val})$ 表示以节点 $p$ 为起点向下且满足路径总和为 $val$ 的路径数目。我们对二叉树上每个节点 $p$ 求出 $\\textit{rootSum}(p,\\textit{sum})$，然后对这些路径数目求和即为返回结果。\n\n+ 我们对节点 $p$ 求 $\\textit{rootSum}(p,\\textit{sum})$ 时，以当前节点 $p$ 为目标路径的起点递归向下进行搜索。假设当前的节点 $p$ 的值为 $\\textit{val}$，我们对左子树和右子树进行递归搜索，对节点 $p$ 的左孩子节点 $p_{l}$ 求出 $\\textit{rootSum}(p_{l},\\textit{sum}-\\textit{val})$，以及对右孩子节点 $p_{r}$ 求出 $\\textit{rootSum}(p_{r},\\textit{sum}-\\textit{val})$。节点 $p$ 的 $\\textit{rootSum}(p,\\textit{sum})$ 即等于 $\\textit{rootSum}(p_{l},\\textit{sum}-\\textit{val})$ 与 $\\textit{rootSum}(p_{r},\\textit{sum}-\\textit{val})$ 之和，同时我们还需要判断一下当前节点 $p$ 的值是否刚好等于 $\\textit{sum}$。\n\n+ 我们采用递归遍历二叉树的每个节点 $p$，对节点 $p$ 求 $\\textit{rootSum}(p,\\textit{val})$，然后将每个节点所有求的值进行相加求和返回。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int rootSum(TreeNode* root, int sum) {\n        if (!root) {\n            return 0;\n        }\n\n        int ret = 0;\n        if (root->val == sum) {\n            ret++;\n        } \n\n        ret += rootSum(root->left, sum - root->val);\n        ret += rootSum(root->right, sum - root->val);\n        return ret;\n    }\n\n    int pathSum(TreeNode* root, int sum) {\n        if (!root) {\n            return 0;\n        }\n        \n        int ret = rootSum(root, sum);\n        ret += pathSum(root->left, sum);\n        ret += pathSum(root->right, sum);\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int pathSum(TreeNode root, int sum) {\n        if (root == null) {\n            return 0;\n        }\n\n        int ret = rootSum(root, sum);\n        ret += pathSum(root.left, sum);\n        ret += pathSum(root.right, sum);\n        return ret;\n    }\n\n    public int rootSum(TreeNode root, int sum) {\n        int ret = 0;\n\n        if (root == null) {\n            return 0;\n        }\n        int val = root.val;\n        if (val == sum) {\n            ret++;\n        } \n\n        ret += rootSum(root.left, sum - val);\n        ret += rootSum(root.right, sum - val);\n        return ret;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int PathSum(TreeNode root, int sum) {\n        if (root == null) {\n            return 0;\n        }\n\n        int ret = RootSum(root, sum);\n        ret += PathSum(root.left, sum);\n        ret += PathSum(root.right, sum);\n        return ret;\n    }\n\n    public int RootSum(TreeNode root, int sum) {\n        int ret = 0;\n\n        if (root == null) {\n            return 0;\n        }\n        int val = root.val;\n        if (val == sum) {\n            ret++;\n        } \n\n        ret += RootSum(root.left, sum - val);\n        ret += RootSum(root.right, sum - val);\n        return ret;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> int:\n        def rootSum(root, sum):\n            if root is None:\n                return 0\n\n            ret = 0\n            if root.val == sum:\n                ret += 1\n\n            ret += rootSum(root.left, sum - root.val)\n            ret += rootSum(root.right, sum - root.val)\n            return ret\n        \n        if root is None:\n            return 0\n            \n        ret = rootSum(root, sum)\n        ret += self.pathSum(root.left, sum)\n        ret += self.pathSum(root.right, sum)\n        return ret\n```\n\n```JavaScript [sol1-JavaScript]\nvar pathSum = function(root, sum) {\n    if (root == null) {\n        return 0;\n    }\n    \n    let ret = rootSum(root, sum);\n    ret += pathSum(root.left, sum);\n    ret += pathSum(root.right, sum);\n    return ret;\n};\n\nconst rootSum = (root, sum) => {\n    let ret = 0;\n\n    if (root == null) {\n        return 0;\n    }\n    const val = root.val;\n    if (val === sum) {\n        ret++;\n    } \n\n    ret += rootSum(root.left, sum - val);\n    ret += rootSum(root.right, sum - val);\n    return ret;\n}\n```\n\n```go [sol1-Golang]\nfunc rootSum(root *TreeNode, sum int) (res int) {\n    if root == nil {\n        return\n    }\n    val := root.Val\n    if val == sum {\n        res++\n    }\n    res += rootSum(root.Left, sum-val)\n    res += rootSum(root.Right, sum-val)\n    return\n}\n\nfunc pathSum(root *TreeNode, sum int) int {\n    if root == nil {\n        return 0\n    }\n    res := rootSum(root, sum)\n    res += pathSum(root.Left, sum)\n    res += pathSum(root.Right, sum)\n    return res\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N^2)$，其中 $N$ 为该二叉树节点的个数。对于每一个节点，求以该节点为起点的路径数目时，则需要遍历以该节点为根节点的子树的所有节点，因此求该路径所花费的最大时间为 $O(N)$，我们会对每个节点都求一次以该节点为起点的路径数目，因此时间复杂度为 $O(N^{2})$。\n\n- 空间复杂度：$O(N)$，考虑到递归需要在栈上开辟空间。\n\n#### 方法二: 前缀和\n\n**思路与算法**\n\n我们仔细思考一下，解法一中应该存在许多重复计算。我们定义节点的前缀和为：由根结点到当前结点的路径上所有节点的和。我们利用先序遍历二叉树，记录下根节点 $\\textit{root}$ 到当前节点 $p$ 的路径上除当前节点以外所有节点的前缀和，在已保存的路径前缀和中查找是否存在前缀和刚好等于当前节点到根节点的前缀和 $curr$ 减去 $\\textit{sum}$。\n\n+ 对于空路径我们也需要保存预先处理一下，此时因为空路径不经过任何节点，因此它的前缀和为 $0$。\n+ 假设根节点为 $\\textit{root}$，我们当前刚好访问节点 $\\textit{node}$，则此时从根节点 $\\textit{root}$ 到节点 $\\textit{node}$ 的路径（无重复节点）刚好为 $\\textit{root} \\rightarrow p_1 \\rightarrow p_2 \\rightarrow \\ldots \\rightarrow p_k \\rightarrow \\textit{node}$，此时我们可以已经保存了节点 $p_1, p_2, p_3, \\ldots, p_k$ 的前缀和，并且计算出了节点 $\\textit{node}$ 的前缀和。\n\n+ 假设当前从根节点 $\\textit{root}$ 到节点 $\\textit{node}$ 的前缀和为 $\\textit{curr}$，则此时我们在已保存的前缀和查找是否存在前缀和刚好等于 $\\textit{curr} - \\textit{sum}$。假设从根节点 $\\textit{root}$ 到节点 $\\textit{node}$ 的路径中存在节点 $p_i$ 到根节点 $\\textit{root}$ 的前缀和为 $\\textit{curr} - \\textit{sum}$，则节点 $p_{i+1}$ 到 $\\textit{node}$ 的路径上所有节点的和一定为 $\\textit{sum}$。\n\n+ 我们利用深度搜索遍历树，当我们退出当前节点时，我们需要及时更新已经保存的前缀和。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    unordered_map<long long, int> prefix;\n\n    int dfs(TreeNode *root, long long curr, int sum) {\n        if (!root) {\n            return 0;\n        }\n\n        int ret = 0;\n        curr += root->val;\n        if (prefix.count(curr - sum)) {\n            ret = prefix[curr - sum];\n        }\n\n        prefix[curr]++;\n        ret += dfs(root->left, curr, sum);\n        ret += dfs(root->right, curr, sum);\n        prefix[curr]--;\n\n        return ret;\n    }\n\n    int pathSum(TreeNode* root, int sum) {\n        prefix[0] = 1;\n        return dfs(root, 0, sum);\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int pathSum(TreeNode root, int sum) {\n        Map<Long, Integer> prefix = new HashMap<Long, Integer>();\n        prefix.put(0L, 1);\n        return dfs(root, prefix, 0, sum);\n    }\n\n    public int dfs(TreeNode root, Map<Long, Integer> prefix, long curr, int sum) {\n        if (root == null) {\n            return 0;\n        }\n\n        int ret = 0;\n        curr += root.val;\n\n        ret = prefix.getOrDefault(curr - sum, 0);\n        prefix.put(curr, prefix.getOrDefault(curr, 0) + 1);\n        ret += dfs(root.left, prefix, curr, sum);\n        ret += dfs(root.right, prefix, curr, sum);\n        prefix.put(curr, prefix.getOrDefault(curr, 0) - 1);\n\n        return ret;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int PathSum(TreeNode root, int sum) {\n        Dictionary<long, int> prefix = new Dictionary<long, int>();\n        prefix.Add(0, 1);\n        return DFS(root, prefix, 0, sum);\n    }\n\n    public int DFS(TreeNode root, Dictionary<long, int> prefix, long curr, int sum) {\n        if (root == null) {\n            return 0;\n        }\n\n        int ret = 0;\n        curr += root.val;\n\n        prefix.TryGetValue(curr - sum, out ret);\n        if (prefix.ContainsKey(curr)) {\n            ++prefix[curr];\n        } else {\n            prefix.Add(curr, 1);\n        }\n        ret += DFS(root.left, prefix, curr, sum);\n        ret += DFS(root.right, prefix, curr, sum);\n        --prefix[curr];\n\n        return ret;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> int:\n        prefix = collections.defaultdict(int)\n        prefix[0] = 1\n\n        def dfs(root, curr):\n            if not root:\n                return 0\n            \n            ret = 0\n            curr += root.val\n            ret += prefix[curr - sum]\n            prefix[curr] += 1\n            ret += dfs(root.left, curr)\n            ret += dfs(root.right, curr)\n            prefix[curr] -= 1\n\n            return ret\n\n        return dfs(root, 0)\n```\n\n```JavaScript [sol2-JavaScript]\nvar pathSum = function(root, sum) {\n    const prefix = new Map();\n    prefix.set(0, 1);\n    return dfs(root, prefix, 0, sum);\n}\n\nconst dfs = (root, prefix, curr, sum) => {\n    if (root == null) {\n        return 0;\n    }\n\n    let ret = 0;\n    curr += root.val;\n\n    ret = prefix.get(curr - sum) || 0;\n    prefix.set(curr, (prefix.get(curr) || 0) + 1);\n    ret += dfs(root.left, prefix, curr, sum);\n    ret += dfs(root.right, prefix, curr, sum);\n    prefix.set(curr, (prefix.get(curr) || 0) - 1);\n\n    return ret;\n}\n```\n\n```go [sol2-Golang]\nfunc pathSum(root *TreeNode, sum int) (ans int) {\n    preSum := map[int64]int{0: 1}\n    var dfs func(*TreeNode, int64)\n    dfs = func(node *TreeNode, curr int64) {\n        if node == nil {\n            return\n        }\n        curr += int64(node.Val)\n        ans += preSum[curr-int64(sum)]\n        preSum[curr]++\n        dfs(node.Left, curr)\n        dfs(node.Right, curr)\n        preSum[curr]--\n        return\n    }\n    dfs(root, 0)\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为二叉树中节点的个数。利用前缀和只需遍历一次二叉树即可。\n\n- 空间复杂度：$O(N)$。"
}