{
	"titleSlug": "find-all-numbers-disappeared-in-an-array",
	"slug": "zhao-dao-suo-you-shu-zu-zhong-xiao-shi-d-mabl",
	"url": "https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/solution/zhao-dao-suo-you-shu-zu-zhong-xiao-shi-d-mabl/",
	"content": "#### 方法一：原地修改\n\n**思路及解法**\n\n我们可以用一个哈希表记录数组 $\\textit{nums}$ 中的数字，由于数字范围均在 $[1,n]$ 中，记录数字后我们再利用哈希表检查 $[1,n]$ 中的每一个数是否出现，从而找到缺失的数字。\n\n由于数字范围均在 $[1,n]$ 中，我们也可以用一个长度为 $n$ 的数组来代替哈希表。这一做法的空间复杂度是 $O(n)$ 的。我们的目标是优化空间复杂度到 $O(1)$。\n\n注意到 $\\textit{nums}$ 的长度恰好也为 $n$，能否让 $\\textit{nums}$ 充当哈希表呢？\n\n由于 $\\textit{nums}$ 的数字范围均在 $[1,n]$ 中，我们可以利用这一范围**之外**的数字，来表达「是否存在」的含义。\n\n具体来说，遍历 $\\textit{nums}$，每遇到一个数 $x$，就让 $\\textit{nums}[x-1]$ 增加 $n$。由于 $\\textit{nums}$ 中所有数均在 $[1,n]$ 中，增加以后，这些数必然大于 $n$。最后我们遍历 $\\textit{nums}$，若 $\\textit{nums}[i]$ 未大于 $n$，就说明没有遇到过数 $i+1$。这样我们就找到了缺失的数字。\n\n注意，当我们遍历到某个位置时，其中的数可能已经被增加过，因此需要对 $n$ 取模来还原出它本来的值。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        for (auto& num : nums) {\n            int x = (num - 1) % n;\n            nums[x] += n;\n        }\n        vector<int> ret;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= n) {\n                ret.push_back(i + 1);\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        int n = nums.length;\n        for (int num : nums) {\n            int x = (num - 1) % n;\n            nums[x] += n;\n        }\n        List<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= n) {\n                ret.add(i + 1);\n            }\n        }\n        return ret;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        for num in nums:\n            x = (num - 1) % n\n            nums[x] += n\n        \n        ret = [i + 1 for i, num in enumerate(nums) if num <= n]\n        return ret\n```\n\n```go [sol1-Golang]\nfunc findDisappearedNumbers(nums []int) (ans []int) {\n    n := len(nums)\n    for _, v := range nums {\n        v = (v - 1) % n\n        nums[v] += n\n    }\n    for i, v := range nums {\n        if v <= n {\n            ans = append(ans, i+1)\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        int x = (nums[i] - 1) % numsSize;\n        nums[x] += numsSize;\n    }\n    int* ret = malloc(sizeof(int) * numsSize);\n    *returnSize = 0;\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] <= numsSize) {\n            ret[(*returnSize)++] = i + 1;\n        }\n    }\n    return ret;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findDisappearedNumbers = function(nums) {\n    const n = nums.length;\n    for (const num of nums) {\n        const x = (num - 1) % n;\n        nums[x] += n;\n    }\n    const ret = [];\n    for (const [i, num] of nums.entries()) {\n        if (num <= n) {\n            ret.push(i + 1);\n        }\n    }\n    return ret;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(1)$。返回值不计入空间复杂度。"
}