{
	"titleSlug": "verify-preorder-serialization-of-a-binary-tree",
	"slug": "pai-an-jiao-jue-de-liang-chong-jie-fa-zh-66nt",
	"url": "https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/solution/pai-an-jiao-jue-de-liang-chong-jie-fa-zh-66nt/",
	"content": "各位题友大家好！ 今天是 **[@负雪明烛](/u/fuxuemingzhu/)** 坚持日更的第 **47** 天。今天力扣上的每日一题是「[331. 验证二叉树的前序序列化](https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/)」。\n\n# 解题思路\n\n今天题目要我们验证输入字符串是否是有效的二叉树的前序序列化，力扣的二叉树题目的输入都是这种格式的。\n\n本文使用两种方法解决：\n\n\n1. 栈\n2. 计算入度出度\n\n\n## 方法一：栈\n\n\n栈的思路是「自底向上」的想法。下面要结合本题是「**前序遍历**」这个重要特点。\n\n\n我们知道「前序遍历」是按照「**根节点-左子树-右子树**」的顺序遍历的，只有当根节点的所有左子树遍历完成之后，才会遍历右子树。对于本题的输入，我们可以先判断「**左子树**」是否有效的，然后再判断「**右子树**」是否有效的，最后判断「**根节点-左子树-右子树**」是否为有效的。这个思路类似于递归，而把递归改写成循环时，就会使用「栈」，这就是本题使用「栈」的原因。\n\n\n下面的重点是如何判断一棵子树是否有效？首先考虑最简单情况：怎么判断一个节点是叶子节点？很明显，当一个节点的两个孩子都是 `\"#\"`（空）的时候，该节点就是叶子节点。\n\n![331.001.jpeg](https://pic.leetcode-cn.com/1615514464-BqZzYz-331.001.jpeg)\n\n当一个节点不是叶子节点的时候，那么它必定至少有一个孩子非空！有两种情况：\n\n- 两个孩子都非`\"#\"`（空）；\n- 一个孩子为`\"#\"`（空），另一个孩子非`\"#\"`（空）；\n\n\n为了兼容这两个情况，我们想出了本题的一个重磅级的技巧：**把有效的叶子节点使用 `\"#\"` 代替。** 比如把 `4##` 替换成 `#` 。此时，**叶子节点会变成空节点**！\n\n![331.002.jpeg](https://pic.leetcode-cn.com/1615514475-eyLemW-331.002.jpeg)\n\n\n\n具体操作流程示例如下：\n\n\n\n如输入： `\"9,3,4,#,#,1,#,#,2,#,6,#,#\"` ，当遇到 `x,#,#` 的时候，就把它变为 `#`。\n\n\n模拟一遍过程：\n\n\n1. `[9,3,4,#,#] => [9,3,#]`，继续\n2. `[9,3,#,1,#,#] => [9,3,#,#] => [9,#]` ，继续\n3. `[9,#2,#,6,#,#] => [9,#,2,#,#] => [9,#,#] => [#]`，结束\n\n\n下面的动画模拟了`\"9,3,4,#,#,1,#,#,#\"`的操作过程：\n\n\n![331.gif](https://pic.leetcode-cn.com/1615551708-uxodPT-331.gif)\n\n\nPPT 如下，可以逐步点击观看：\n\n\n \n<![331转图片.003.jpeg](https://pic.leetcode-cn.com/1615552079-ELrLGi-331%E8%BD%AC%E5%9B%BE%E7%89%87.003.jpeg),![331转图片.004.jpeg](https://pic.leetcode-cn.com/1615552079-dDierQ-331%E8%BD%AC%E5%9B%BE%E7%89%87.004.jpeg),![331转图片.005.jpeg](https://pic.leetcode-cn.com/1615552079-UVCFzv-331%E8%BD%AC%E5%9B%BE%E7%89%87.005.jpeg),![331转图片.006.jpeg](https://pic.leetcode-cn.com/1615552079-yQHSQm-331%E8%BD%AC%E5%9B%BE%E7%89%87.006.jpeg),![331转图片.007.jpeg](https://pic.leetcode-cn.com/1615552079-DsuaTt-331%E8%BD%AC%E5%9B%BE%E7%89%87.007.jpeg),![331转图片.008.jpeg](https://pic.leetcode-cn.com/1615552079-hXEgvH-331%E8%BD%AC%E5%9B%BE%E7%89%87.008.jpeg),![331转图片.009.jpeg](https://pic.leetcode-cn.com/1615552079-iawiUU-331%E8%BD%AC%E5%9B%BE%E7%89%87.009.jpeg),![331转图片.010.jpeg](https://pic.leetcode-cn.com/1615552079-WjIMFu-331%E8%BD%AC%E5%9B%BE%E7%89%87.010.jpeg),![331转图片.011.jpeg](https://pic.leetcode-cn.com/1615552079-LXklyw-331%E8%BD%AC%E5%9B%BE%E7%89%87.011.jpeg),![331转图片.012.jpeg](https://pic.leetcode-cn.com/1615552079-zoQPnF-331%E8%BD%AC%E5%9B%BE%E7%89%87.012.jpeg),![331转图片.013.jpeg](https://pic.leetcode-cn.com/1615552079-TDYFWF-331%E8%BD%AC%E5%9B%BE%E7%89%87.013.jpeg),![331转图片.014.jpeg](https://pic.leetcode-cn.com/1615552079-znnOOn-331%E8%BD%AC%E5%9B%BE%E7%89%87.014.jpeg),![331转图片.015.jpeg](https://pic.leetcode-cn.com/1615552079-tLrQjP-331%E8%BD%AC%E5%9B%BE%E7%89%87.015.jpeg),![331转图片.016.jpeg](https://pic.leetcode-cn.com/1615552079-TvkeHS-331%E8%BD%AC%E5%9B%BE%E7%89%87.016.jpeg),![331转图片.017.jpeg](https://pic.leetcode-cn.com/1615552079-MBxVxw-331%E8%BD%AC%E5%9B%BE%E7%89%87.017.jpeg),![331转图片.018.jpeg](https://pic.leetcode-cn.com/1615552079-ivSgFS-331%E8%BD%AC%E5%9B%BE%E7%89%87.018.jpeg),![331转图片.019.jpeg](https://pic.leetcode-cn.com/1615552079-BqMScy-331%E8%BD%AC%E5%9B%BE%E7%89%87.019.jpeg),![331转图片.020.jpeg](https://pic.leetcode-cn.com/1615552079-VDciBB-331%E8%BD%AC%E5%9B%BE%E7%89%87.020.jpeg),![331转图片.021.jpeg](https://pic.leetcode-cn.com/1615552079-oCFZSi-331%E8%BD%AC%E5%9B%BE%E7%89%87.021.jpeg),![331转图片.022.jpeg](https://pic.leetcode-cn.com/1615552079-DzwVqQ-331%E8%BD%AC%E5%9B%BE%E7%89%87.022.jpeg),![331转图片.023.jpeg](https://pic.leetcode-cn.com/1615552079-ihaTRy-331%E8%BD%AC%E5%9B%BE%E7%89%87.023.jpeg),![331转图片.024.jpeg](https://pic.leetcode-cn.com/1615552079-fARXsh-331%E8%BD%AC%E5%9B%BE%E7%89%87.024.jpeg)>\n\n\n这个操作流程完美结合了「**栈**」和「**前序遍历**」的特性，完美！代码如下：\n\n\n```Python []\nclass Solution(object):\n    def isValidSerialization(self, preorder):\n        stack = []\n        for node in preorder.split(','):\n            stack.append(node)\n            while len(stack) >= 3 and stack[-1] == stack[-2] == '#' and stack[-3] != '#':\n                stack.pop(), stack.pop(), stack.pop()\n                stack.append('#')\n        return len(stack) == 1 and stack.pop() == '#'\n```\n\n\n- 时间复杂度：$O(N)$\n- 空间复杂度：$O(N)$\n\n\n\n## 方法二：计算入度出度\n\n背景知识：\n\n- **入度**：有多少个节点指向它；\n- **出度**：它指向多少个节点。\n\n我们知道在树（甚至图）中，**所有节点的入度之和等于出度之和**。可以根据这个特点判断输入序列是否为有效的！\n\n\n在一棵二叉树中：\n\n\n- 每个空节点（ `\"#\"` ）会提供 0 个出度和 1 个入度。\n- 每个非空节点会提供 2 个出度和 1 个入度（根节点的入度是 0）。\n\n\n![331转图片.003.jpeg](https://pic.leetcode-cn.com/1615552473-UUReDo-331%E8%BD%AC%E5%9B%BE%E7%89%87.003.jpeg)\n\n\n我们只要把字符串遍历一次，每个节点都累加 `diff = 出度 - 入度` 。在遍历到任何一个节点的时候，要求`diff >= 0`，原因是还没遍历到该节点的子节点，所以此时的出度应该大于等于入度。当所有节点遍历完成之后，整棵树的 `diff == 0` 。 \n\n这里解释一下为什么下面的代码中 diff 的初始化为 1。因为，我们加入一个非空节点时，都会对 diff 先减去 1（入度），再加上 2（出度）。但是由于根节点没有父节点，所以其入度为 0，出度为 2。因此 diff 初始化为 1，是为了在加入根节点的时候，diff 先减去 1（入度），再加上 2（出度），此时 diff 正好应该是2.\n\n```Python []\nclass Solution(object):\n    def isValidSerialization(self, preorder):\n        nodes = preorder.split(',')\n        diff = 1\n        for node in nodes:\n            diff -= 1\n            if diff < 0:\n                return False\n            if node != '#':\n                diff += 2\n        return diff == 0\n```\n\n- 时间复杂度：$O(N)$\n- 空间复杂度：$O(1)$\n\n\n# 刷题心得\n\n\n这个题是真的不错，特别是把二叉树的题目和「栈」的应用完美结合，给我很大启发。\n\n\n参考资料：[细语呢喃](https://www.hrwhisper.me/leetcode-verify-preorder-serialization-of-a-binary-tree/)\n\n\n-----\n\n\nOK，以上就是 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 写的今天题解的全部内容了，如果你觉得有帮助的话，**求赞、求关注、求收藏**。如果有疑问的话，请在下面评论，我会及时解答。\n\n\n**关注我**，你将不会错过我的精彩动画题解、面试题分享、组队刷题活动，进入主页 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 右侧有刷题组织，从此刷题不再孤单。\n\n\n祝大家 AC 多多，Offer 多多！我们明天再见！"
}