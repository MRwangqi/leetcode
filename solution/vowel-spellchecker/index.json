{
	"titleSlug": "vowel-spellchecker",
	"slug": "yuan-yin-pin-xie-jian-cha-qi-by-leetcode",
	"url": "https://leetcode-cn.com/problems/vowel-spellchecker/solution/yuan-yin-pin-xie-jian-cha-qi-by-leetcode/",
	"content": "#### 方法：哈希映射（HashMap）\n \n**思路与算法**\n\n我们分析了算法需要考虑的 3 种情况: 当查询完全匹配时，当查询存在大小写不同的单词匹配时，当查询与出现元音错误的单词匹配时。\n\n在所有 3 种情况下，我们都可以使用哈希表来查询答案。\n\n* 对于第一种情况（完全匹配），我们使用集合存放单词以有效地测试查询单词是否在该组中。\n* 对于第二种情况（大小写不同），我们使用一个哈希表，该哈希表将单词从其小写形式转换为原始单词（大小写正确的形式）。\n* 对于第三种情况（元音错误），我们使用一个哈希表，将单词从其小写形式（忽略元音的情况下）转换为原始单词。\n\n该算法仅剩的要求是认真规划和仔细阅读问题。\n\n```java [MUcCoDbr-Java]\nclass Solution {\n    Set<String> words_perfect;\n    Map<String, String> words_cap;\n    Map<String, String> words_vow;\n\n    public String[] spellchecker(String[] wordlist, String[] queries) {\n        words_perfect = new HashSet();\n        words_cap = new HashMap();\n        words_vow = new HashMap();\n\n        for (String word: wordlist) {\n            words_perfect.add(word);\n\n            String wordlow = word.toLowerCase();\n            words_cap.putIfAbsent(wordlow, word);\n\n            String wordlowDV = devowel(wordlow);\n            words_vow.putIfAbsent(wordlowDV, word);\n        }\n\n        String[] ans = new String[queries.length];\n        int t = 0;\n        for (String query: queries)\n            ans[t++] = solve(query);\n        return ans;\n    }\n\n    public String solve(String query) {\n        if (words_perfect.contains(query))\n            return query;\n\n        String queryL = query.toLowerCase();\n        if (words_cap.containsKey(queryL))\n            return words_cap.get(queryL);\n\n        String queryLV = devowel(queryL);\n        if (words_vow.containsKey(queryLV))\n            return words_vow.get(queryLV);\n\n        return \"\";\n    }\n\n    public String devowel(String word) {\n        StringBuilder ans = new StringBuilder();\n        for (char c: word.toCharArray())\n            ans.append(isVowel(c) ? '*' : c);\n        return ans.toString();\n    }\n\n    public boolean isVowel(char c) {\n        return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n    }\n}\n```\n```python [MUcCoDbr-Python]\nclass Solution(object):\n    def spellchecker(self, wordlist, queries):\n        def devowel(word):\n            return \"\".join('*' if c in 'aeiou' else c\n                           for c in word)\n\n        words_perfect = set(wordlist)\n        words_cap = {}\n        words_vow = {}\n\n        for word in wordlist:\n            wordlow = word.lower()\n            words_cap.setdefault(wordlow, word)\n            words_vow.setdefault(devowel(wordlow), word)\n\n        def solve(query):\n            if query in words_perfect:\n                return query\n\n            queryL = query.lower()\n            if queryL in words_cap:\n                return words_cap[queryL]\n\n            queryLV = devowel(queryL)\n            if queryLV in words_vow:\n                return words_vow[queryLV]\n            return \"\"\n\n        return map(solve, queries)\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\mathcal{C})$，其中 $\\mathcal{C}$  是 `wordlist` 和 `queries` 中内容的总数。\n\n* 空间复杂度：$O(\\mathcal{C})$。"
}