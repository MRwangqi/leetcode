{
	"titleSlug": "sorted-matrix-search-lcci",
	"slug": "pai-xu-ju-zhen-cha-zhao-by-leetcode-solu-zgjd",
	"url": "https://leetcode-cn.com/problems/sorted-matrix-search-lcci/solution/pai-xu-ju-zhen-cha-zhao-by-leetcode-solu-zgjd/",
	"content": "#### 方法一：直接查找\n\n**思路与算法**\n\n我们直接遍历整个矩阵 $\\textit{matrix}$，判断 $\\textit{target}$ 是否出现即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return false;\n        }\n        for (const auto& row: matrix) {\n            for (int element: row) {\n                if (element == target) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        if (matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        for (int[] row : matrix) {\n            for (int element : row) {\n                if (element == target) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool SearchMatrix(int[][] matrix, int target) {\n        if (matrix.Length == 0 || matrix[0].Length == 0) {\n            return false;\n        }\n        foreach (int[] row in matrix) {\n            foreach (int element in row) {\n                if (element == target) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return False\n        for row in matrix:\n            for element in row:\n                if element == target:\n                    return True\n        return False\n```\n\n```go [sol1-Golang]\nfunc searchMatrix(matrix [][]int, target int) bool {\n    if len(matrix) == 0 || len(matrix[0]) == 0 {\n        return false\n    }\n    for _, row := range matrix {\n        for _, v := range row {\n            if v == target {\n                return true\n            }\n        }\n    }\n    return false\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：二分查找\n\n**思路与算法**\n\n由于矩阵 $\\textit{matrix}$ 中每一行的元素都是升序排列的，因此我们可以对每一行都使用一次二分查找，判断 $\\textit{target}$ 是否在该行中，从而判断 $\\textit{target}$ 是否出现。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return false;\n        }\n        for (const auto& row: matrix) {\n            auto it = lower_bound(row.begin(), row.end(), target);\n            if (it != row.end() && *it == target) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        if (matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        for (int[] row : matrix) {\n            int index = search(row, target);\n            if (index >= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public int search(int[] nums, int target) {\n        int low = 0, high = nums.length - 1;\n        while (low <= high) {\n            int mid = (high - low) / 2 + low;\n            int num = nums[mid];\n            if (num == target) {\n                return mid;\n            } else if (num > target) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public bool SearchMatrix(int[][] matrix, int target) {\n        if (matrix.Length == 0 || matrix[0].Length == 0) {\n            return false;\n        }\n        foreach (int[] row in matrix) {\n            int index = Search(row, target);\n            if (index >= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public int Search(int[] nums, int target) {\n        int low = 0, high = nums.Length - 1;\n        while (low <= high) {\n            int mid = (high - low) / 2 + low;\n            int num = nums[mid];\n            if (num == target) {\n                return mid;\n            } else if (num > target) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return False\n        for row in matrix:\n            idx = bisect.bisect_left(row, target)\n            if idx < len(row) and row[idx] == target:\n                return True\n        return False\n```\n\n```JavaScript [sol2-JavaScript]\nvar searchMatrix = function(matrix, target) {\n    if (matrix.length == 0 || matrix[0].length == 0) {\n        return false;\n    }\n    for (const row of matrix) {\n        const index = search(row, target);\n        if (index >= 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst search = (nums, target) => {\n    let low = 0, high = nums.length - 1;\n    while (low <= high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        const num = nums[mid];\n        if (num === target) {\n            return mid;\n        } else if (num > target) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n```\n\n```go [sol2-Golang]\nfunc searchMatrix(matrix [][]int, target int) bool {\n    if len(matrix) == 0 || len(matrix[0]) == 0 {\n        return false\n    }\n    for _, row := range matrix {\n        i := sort.SearchInts(row, target)\n        if i < len(row) && row[i] == target {\n            return true\n        }\n    }\n    return false\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\log n)$。对一行使用二分查找的时间复杂度为 $O(\\log n)$，最多需要进行 $m$ 次二分查找。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法三：Z 字形查找\n\n**思路与算法**\n\n我们可以从矩阵 $\\textit{matrix}$ 的右上角 $(0, n-1)$ 进行搜索。在每一步的搜索过程中，如果我们位于位置 $(x, y)$，那么我们希望在以 $\\textit{matrix}$ 的左下角为左下角、以 $(x, y)$ 为右上角的矩阵中进行搜索，即行的范围为 $[x, m - 1]$，列的范围为 $[0, y]$：\n\n- 如果 $\\textit{matrix}[x, y] = \\textit{target}$，说明搜索完成；\n\n- 如果 $\\textit{matrix}[x, y] > \\textit{target}$，由于每一列的元素都是升序排列的，那么在当前的搜索矩阵中，所有位于第 $y$ 列的元素都是严格大于 $\\textit{target}$ 的，因此我们可以将它们全部忽略，即将 $y$ 减少 $1$；\n\n- 如果 $\\textit{matrix}[x, y] < \\textit{target}$，由于每一行的元素都是升序排列的，那么在当前的搜索矩阵中，所有位于第 $x$ 行的元素都是严格小于 $\\textit{target}$ 的，因此我们可以将它们全部忽略，即将 $x$ 增加 $1$。\n\n在搜索的过程中，如果我们超出了矩阵的边界，那么说明矩阵中不存在 $\\textit{target}$。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return false;\n        }\n        int m = matrix.size(), n = matrix[0].size();\n        int x = 0, y = n - 1;\n        while (x < m && y >= 0) {\n            if (matrix[x][y] == target) {\n                return true;\n            }\n            if (matrix[x][y] > target) {\n                --y;\n            }\n            else {\n                ++x;\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        if (matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int m = matrix.length, n = matrix[0].length;\n        int x = 0, y = n - 1;\n        while (x < m && y >= 0) {\n            if (matrix[x][y] == target) {\n                return true;\n            }\n            if (matrix[x][y] > target) {\n                --y;\n            } else {\n                ++x;\n            }\n        }\n        return false;\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public bool SearchMatrix(int[][] matrix, int target) {\n        if (matrix.Length == 0 || matrix[0].Length == 0) {\n            return false;\n        }\n        int m = matrix.Length, n = matrix[0].Length;\n        int x = 0, y = n - 1;\n        while (x < m && y >= 0) {\n            if (matrix[x][y] == target) {\n                return true;\n            }\n            if (matrix[x][y] > target) {\n                --y;\n            } else {\n                ++x;\n            }\n        }\n        return false;\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        x, y = 0, n - 1\n        while x < m and y >= 0:\n            if matrix[x][y] == target:\n                return True\n            if matrix[x][y] > target:\n                y -= 1\n            else:\n                x += 1\n        return False\n```\n\n```JavaScript [sol3-JavaScript]\nvar searchMatrix = function(matrix, target) {\n    if (matrix.length == 0 || matrix[0].length == 0) {\n        return false;\n    }\n    const m = matrix.length, n = matrix[0].length;\n    let x = 0, y = n - 1;\n    while (x < m && y >= 0) {\n        if (matrix[x][y] === target) {\n            return true;\n        }\n        if (matrix[x][y] > target) {\n            --y;\n        } else {\n            ++x;\n        }\n    }\n    return false;\n};\n```\n\n```go [sol3-Golang]\nfunc searchMatrix(matrix [][]int, target int) bool {\n    if len(matrix) == 0 || len(matrix[0]) == 0 {\n        return false\n    }\n    m, n := len(matrix), len(matrix[0])\n    x, y := 0, n-1\n    for x < m && y >= 0 {\n        if matrix[x][y] == target {\n            return true\n        }\n        if matrix[x][y] > target {\n            y--\n        } else {\n            x++\n        }\n    }\n    return false\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m + n)$。在搜索的过程中，如果我们没有找到 $\\textit{target}$，那么我们要么将 $y$ 减少 $1$，要么将 $x$ 增加 $1$。由于 $(x, y)$ 的初始值分别为 $(0, n-1)$，因此 $y$ 最多能被减少 $n$ 次，$x$ 最多能被增加 $m$ 次，总搜索次数为 $m + n$。在这之后，$x$ 和 $y$ 就会超出矩阵的边界。\n\n- 空间复杂度：$O(1)$。"
}