{
	"titleSlug": "count-artifacts-that-can-be-extracted",
	"slug": "tong-ji-ke-yi-ti-qu-de-gong-jian-by-leet-uszp",
	"url": "https://leetcode-cn.com/problems/count-artifacts-that-can-be-extracted/solution/tong-ji-ke-yi-ti-qu-de-gong-jian-by-leet-uszp/",
	"content": "#### 方法一：使用哈希表存储挖掘的位置\n\n**思路与算法**\n\n我们首先遍历数组 $\\textit{digs}$，并使用哈希集合存储其中的每一个位置。\n\n随后我们遍历数组 $\\textit{artifacts}$ 中的每一个工件，由于「每个工件最多只覆盖 $4$ 个单元格」，我们可以直接遍历每一个工件的每一个单元格，如果该工件的所有单元格都在哈希集合中，我们就可以提取该工件。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int digArtifacts(int n, vector<vector<int>>& artifacts, vector<vector<int>>& dig) {\n        auto pair_hash = [&n, fn = hash<int>()](const pair<int, int>& o) -> size_t {\n            return fn(o.first * n + o.second);\n        };\n\n        unordered_set<pair<int, int>, decltype(pair_hash)> valid(0, pair_hash);\n        for (const auto& pos: dig) {\n            int r = pos[0], c = pos[1];\n            valid.emplace(r, c);\n        }\n\n        int ans = 0;\n        for (const auto& artifact: artifacts) {\n            int r1 = artifact[0], c1 = artifact[1], r2 = artifact[2], c2 = artifact[3];\n            bool check = true;\n            for (int r = r1; r <= r2; ++r) {\n                for (int c = c1; c <= c2; ++c) {\n                    if (!valid.count({r, c})) {\n                        check = false;\n                        break;\n                    }\n                }\n                if (!check) {\n                    break;\n                }\n            }\n            if (check) {\n                ++ans;\n            }\n        }\n\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def digArtifacts(self, n: int, artifacts: List[List[int]], dig: List[List[int]]) -> int:\n        valid = {tuple(pos) for pos in dig}\n        \n        ans = 0\n        for (r1, c1, r2, c2) in artifacts:\n            check = True\n            for r in range(r1, r2 + 1):\n                for c in range(c1, c2 + 1):\n                    if (r, c) not in valid:\n                        check = False\n                        break\n                if not check:\n                    break\n            \n            if check:\n                ans += 1\n\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(C \\cdot a + d)$，其中 $a$ 和 $d$ 分别是数组 $\\textit{artifacts}$ 和 $\\textit{dig}$ 的长度，$C$ 是每个工件最多覆盖的单元格数，在本题中 $C=4$。\n\n- 空间复杂度：$O(d)$，即为哈希表需要使用的空间。"
}