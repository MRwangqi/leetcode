{
	"titleSlug": "shun-shi-zhen-da-yin-ju-zhen-lcof",
	"slug": "shun-shi-zhen-da-yin-ju-zhen-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/solution/shun-shi-zhen-da-yin-ju-zhen-by-leetcode-solution/",
	"content": "#### 方法一：模拟\n\n可以模拟打印矩阵的路径。初始位置是矩阵的左上角，初始方向是向右，当路径超出界限或者进入之前访问过的位置时，顺时针旋转，进入下一个方向。\n\n判断路径是否进入之前访问过的位置需要使用一个与输入矩阵大小相同的辅助矩阵 $\\textit{visited}$，其中的每个元素表示该位置是否被访问过。当一个元素被访问时，将 $\\textit{visited}$ 中的对应位置的元素设为已访问。\n\n如何判断路径是否结束？由于矩阵中的每个元素都被访问一次，因此路径的长度即为矩阵中的元素数量，当路径的长度达到矩阵中的元素数量时即为完整路径，将该路径返回。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] spiralOrder(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return new int[0];\n        }\n        int rows = matrix.length, columns = matrix[0].length;\n        boolean[][] visited = new boolean[rows][columns];\n        int total = rows * columns;\n        int[] order = new int[total];\n        int row = 0, column = 0;\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        int directionIndex = 0;\n        for (int i = 0; i < total; i++) {\n            order[i] = matrix[row][column];\n            visited[row][column] = true;\n            int nextRow = row + directions[directionIndex][0], nextColumn = column + directions[directionIndex][1];\n            if (nextRow < 0 || nextRow >= rows || nextColumn < 0 || nextColumn >= columns || visited[nextRow][nextColumn]) {\n                directionIndex = (directionIndex + 1) % 4;\n            }\n            row += directions[directionIndex][0];\n            column += directions[directionIndex][1];\n        }\n        return order;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int directions[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return {};\n        }\n        \n        int rows = matrix.size(), columns = matrix[0].size();\n        vector<vector<bool>> visited(rows, vector<bool>(columns));\n        int total = rows * columns;\n        vector<int> order(total);\n\n        int row = 0, column = 0;\n        int directionIndex = 0;\n        for (int i = 0; i < total; i++) {\n            order[i] = matrix[row][column];\n            visited[row][column] = true;\n            int nextRow = row + directions[directionIndex][0], nextColumn = column + directions[directionIndex][1];\n            if (nextRow < 0 || nextRow >= rows || nextColumn < 0 || nextColumn >= columns || visited[nextRow][nextColumn]) {\n                directionIndex = (directionIndex + 1) % 4;\n            }\n            row += directions[directionIndex][0];\n            column += directions[directionIndex][1];\n        }\n        return order;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        if not matrix or not matrix[0]:\n            return list()\n        \n        rows, columns = len(matrix), len(matrix[0])\n        visited = [[False] * columns for _ in range(rows)]\n        total = rows * columns\n        order = [0] * total\n\n        directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n        row, column = 0, 0\n        directionIndex = 0\n        for i in range(total):\n            order[i] = matrix[row][column]\n            visited[row][column] = True\n            nextRow, nextColumn = row + directions[directionIndex][0], column + directions[directionIndex][1]\n            if not (0 <= nextRow < rows and 0 <= nextColumn < columns and not visited[nextRow][nextColumn]):\n                directionIndex = (directionIndex + 1) % 4\n            row += directions[directionIndex][0]\n            column += directions[directionIndex][1]\n        return order\n```\n\n```golang [sol1-Golang]\nfunc spiralOrder(matrix [][]int) []int {\n    if len(matrix) == 0 || len(matrix[0]) == 0 {\n        return []int{}\n    }\n    rows, columns := len(matrix), len(matrix[0])\n    visited := make([][]bool, rows)\n    for i := 0; i < rows; i++ {\n        visited[i] = make([]bool, columns)\n    }\n\n    var (\n        total = rows * columns\n        order = make([]int, total)\n        row, column = 0, 0\n        directions = [][]int{[]int{0, 1}, []int{1, 0}, []int{0, -1}, []int{-1, 0}}\n        directionIndex = 0\n    )\n\n    for i := 0; i < total; i++ {\n        order[i] = matrix[row][column]\n        visited[row][column] = true\n        nextRow, nextColumn := row + directions[directionIndex][0], column + directions[directionIndex][1]\n        if nextRow < 0 || nextRow >= rows || nextColumn < 0 || nextColumn >= columns || visited[nextRow][nextColumn] {\n            directionIndex = (directionIndex + 1) % 4\n        }\n        row += directions[directionIndex][0]\n        column += directions[directionIndex][1]\n    }\n    return order\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar spiralOrder = function(matrix) {\n    if (!matrix.length || !matrix[0].length) {\n        return [];\n    }\n    const rows = matrix.length, columns = matrix[0].length;\n    const visited = new Array(rows).fill(0).map(() => new Array(columns).fill(false));\n    const total = rows * columns;\n    const order = new Array(total).fill(0);\n\n    let directionIndex = 0, row = 0, column = 0;\n    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n    for (let i = 0; i < total; i++) { \n        order[i] = matrix[row][column];\n        visited[row][column] = true;\n        const nextRow = row + directions[directionIndex][0], nextColumn = column + directions[directionIndex][1];\n        if (!(0 <= nextRow && nextRow < rows && 0 <= nextColumn && nextColumn < columns && !(visited[nextRow][nextColumn]))) {\n            directionIndex = (directionIndex + 1) % 4;\n        }\n        row += directions[directionIndex][0];\n        column += directions[directionIndex][1];\n    }\n    return order;\n};\n```\n\n```C [sol1-C]\nint directions[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\nint* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize) {\n    if (matrixSize == 0 || matrixColSize[0] == 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n\n    int rows = matrixSize, columns = matrixColSize[0];\n    int visited[rows][columns];\n    memset(visited, 0, sizeof(visited));\n    int total = rows * columns;\n    int* order = malloc(sizeof(int) * total);\n    *returnSize = total;\n\n    int row = 0, column = 0;\n    int directionIndex = 0;\n    for (int i = 0; i < total; i++) {\n        order[i] = matrix[row][column];\n        visited[row][column] = true;\n        int nextRow = row + directions[directionIndex][0], nextColumn = column + directions[directionIndex][1];\n        if (nextRow < 0 || nextRow >= rows || nextColumn < 0 || nextColumn >= columns || visited[nextRow][nextColumn]) {\n            directionIndex = (directionIndex + 1) % 4;\n        }\n        row += directions[directionIndex][0];\n        column += directions[directionIndex][1];\n    }\n    return order;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是输入矩阵的行数和列数。矩阵中的每个元素都要被访问一次。\n\n* 空间复杂度：$O(mn)$。需要创建一个大小为 $m \\times n$ 的矩阵 $\\textit{visited}$ 记录每个位置是否被访问过。\n\n#### 方法二：按层模拟\n\n可以将矩阵看成若干层，首先打印最外层的元素，其次打印次外层的元素，直到打印最内层的元素。\n\n定义矩阵的第 $k$ 层是到最近边界距离为 $k$ 的所有顶点。例如，下图矩阵最外层元素都是第 $1$ 层，次外层元素都是第 $2$ 层，剩下的元素都是第 $3$ 层。\n\n```\n[[1, 1, 1, 1, 1, 1, 1],\n [1, 2, 2, 2, 2, 2, 1],\n [1, 2, 3, 3, 3, 2, 1],\n [1, 2, 2, 2, 2, 2, 1],\n [1, 1, 1, 1, 1, 1, 1]]\n```\n\n对于每层，从左上方开始以顺时针的顺序遍历所有元素。假设当前层的左上角位于 $(\\textit{top}, \\textit{left})$，右下角位于 $(\\textit{bottom}, \\textit{right})$，按照如下顺序遍历当前层的元素。\n\n1. 从左到右遍历上侧元素，依次为 $(\\textit{top}, \\textit{left})$ 到 $(\\textit{top}, \\textit{right})$。\n\n2. 从上到下遍历右侧元素，依次为 $(\\textit{top} + 1, \\textit{right})$ 到 $(\\textit{bottom}, \\textit{right})$。\n\n3. 如果 $\\textit{left} < \\textit{right}$ 且 $\\textit{top} < \\textit{bottom}$，则从右到左遍历下侧元素，依次为 $(\\textit{bottom}, \\textit{right} - 1)$ 到 $(\\textit{bottom}, \\textit{left} + 1)$，以及从下到上遍历左侧元素，依次为 $(\\textit{bottom}, \\textit{left})$ 到 $(\\textit{top} + 1, \\textit{left})$。\n\n遍历完当前层的元素之后，将 $\\textit{left}$ 和 $\\textit{top}$ 分别增加 $1$，将 $\\textit{right}$ 和 $\\textit{bottom}$ 分别减少 $1$，进入下一层继续遍历，直到遍历完所有元素为止。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_29/jianzhi_29_fig1.png)\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] spiralOrder(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return new int[0];\n        }\n        int rows = matrix.length, columns = matrix[0].length;\n        int[] order = new int[rows * columns];\n        int index = 0;\n        int left = 0, right = columns - 1, top = 0, bottom = rows - 1;\n        while (left <= right && top <= bottom) {\n            for (int column = left; column <= right; column++) {\n                order[index++] = matrix[top][column];\n            }\n            for (int row = top + 1; row <= bottom; row++) {\n                order[index++] = matrix[row][right];\n            }\n            if (left < right && top < bottom) {\n                for (int column = right - 1; column > left; column--) {\n                    order[index++] = matrix[bottom][column];\n                }\n                for (int row = bottom; row > top; row--) {\n                    order[index++] = matrix[row][left];\n                }\n            }\n            left++;\n            right--;\n            top++;\n            bottom--;\n        }\n        return order;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return {};\n        }\n\n        int rows = matrix.size(), columns = matrix[0].size();\n        vector<int> order;\n        int left = 0, right = columns - 1, top = 0, bottom = rows - 1;\n        while (left <= right && top <= bottom) {\n            for (int column = left; column <= right; column++) {\n                order.push_back(matrix[top][column]);\n            }\n            for (int row = top + 1; row <= bottom; row++) {\n                order.push_back(matrix[row][right]);\n            }\n            if (left < right && top < bottom) {\n                for (int column = right - 1; column > left; column--) {\n                    order.push_back(matrix[bottom][column]);\n                }\n                for (int row = bottom; row > top; row--) {\n                    order.push_back(matrix[row][left]);\n                }\n            }\n            left++;\n            right--;\n            top++;\n            bottom--;\n        }\n        return order;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        if not matrix or not matrix[0]:\n            return list()\n        \n        rows, columns = len(matrix), len(matrix[0])\n        order = list()\n        left, right, top, bottom = 0, columns - 1, 0, rows - 1\n        while left <= right and top <= bottom:\n            for column in range(left, right + 1):\n                order.append(matrix[top][column])\n            for row in range(top + 1, bottom + 1):\n                order.append(matrix[row][right])\n            if left < right and top < bottom:\n                for column in range(right - 1, left, -1):\n                    order.append(matrix[bottom][column])\n                for row in range(bottom, top, -1):\n                    order.append(matrix[row][left])\n            left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n        return order\n```\n\n```golang [sol2-Golang]\nfunc spiralOrder(matrix [][]int) []int {\n    if len(matrix) == 0 || len(matrix[0]) == 0 {\n        return []int{}\n    }\n    var (\n        rows, columns = len(matrix), len(matrix[0])\n        order = make([]int, rows * columns)\n        index = 0\n        left, right, top, bottom = 0, columns - 1, 0, rows - 1\n    )\n\n    for left <= right && top <= bottom {\n        for column := left; column <= right; column++ {\n            order[index] = matrix[top][column]\n            index++\n        }\n        for row := top + 1; row <= bottom; row++ {\n            order[index] = matrix[row][right]\n            index++\n        }\n        if left < right && top < bottom {\n            for column := right - 1; column > left; column-- {\n                order[index] = matrix[bottom][column]\n                index++\n            }\n            for row := bottom; row > top; row-- {\n                order[index] = matrix[row][left]\n                index++\n            }\n        }\n        left++\n        right--\n        top++\n        bottom--\n    }\n    return order\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar spiralOrder = function(matrix) {\n    if (!matrix.length || !matrix[0].length) {\n        return [];\n    }\n\n    const rows = matrix.length, columns = matrix[0].length;\n    const order = [];\n    let left = 0, right = columns - 1, top = 0, bottom = rows - 1;\n    while (left <= right && top <= bottom) {\n        for (let column = left; column <= right; column++) {\n            order.push(matrix[top][column]);\n        }\n        for (let row = top + 1; row <= bottom; row++) {\n            order.push(matrix[row][right]);\n        }\n        if (left < right && top < bottom) {\n            for (let column = right - 1; column > left; column--) {\n                order.push(matrix[bottom][column]);\n            }\n            for (let row = bottom; row > top; row--) {\n                order.push(matrix[row][left]);\n            }\n        }\n        [left, right, top, bottom] = [left + 1, right - 1, top + 1, bottom - 1];\n    }\n    return order;\n};\n```\n\n```C [sol2-C]\nint* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize) {\n    if (matrixSize == 0 || matrixColSize[0] == 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n\n    int rows = matrixSize, columns = matrixColSize[0];\n    int total = rows * columns;\n    int* order = malloc(sizeof(int) * total);\n    *returnSize = 0;\n\n    int left = 0, right = columns - 1, top = 0, bottom = rows - 1;\n    while (left <= right && top <= bottom) {\n        for (int column = left; column <= right; column++) {\n            order[(*returnSize)++] = matrix[top][column];\n        }\n        for (int row = top + 1; row <= bottom; row++) {\n            order[(*returnSize)++] = matrix[row][right];\n        }\n        if (left < right && top < bottom) {\n            for (int column = right - 1; column > left; column--) {\n                order[(*returnSize)++] = matrix[bottom][column];\n            }\n            for (int row = bottom; row > top; row--) {\n                order[(*returnSize)++] = matrix[row][left];\n            }\n        }\n        left++;\n        right--;\n        top++;\n        bottom--;\n    }\n    return order;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是输入矩阵的行数和列数。矩阵中的每个元素都要被访问一次。\n\n* 空间复杂度：$O(1)$。除了输出数组以外，空间复杂度是常数。"
}