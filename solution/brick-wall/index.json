{
	"titleSlug": "brick-wall",
	"slug": "zhuan-qiang-by-leetcode-solution-2kls",
	"url": "https://leetcode-cn.com/problems/brick-wall/solution/zhuan-qiang-by-leetcode-solution-2kls/",
	"content": "#### 方法一：哈希表\n\n**思路及算法**\n\n由于砖墙是一面矩形，所以对于任意一条垂线，其穿过的砖块数量加上从边缘经过的砖块数量之和是一个定值，即砖墙的高度。\n\n因此，问题可以转换成求「垂线穿过的砖块边缘数量的最大值」，用砖墙的高度减去该最大值即为答案。\n\n虽然垂线在每行至多只能通过一个砖块边缘，但是每行的砖块边缘也各不相同，因此我们需要用哈希表统计所有符合要求的砖块边缘的数量。\n\n注意到题目要求垂线不能通过砖墙的两个垂直边缘，所以砖墙两侧的边缘不应当被统计。因此，我们只需要统计每行砖块中除了最右侧的砖块以外的其他砖块的右边缘即可。\n\n具体地，我们遍历砖墙的每一行，对于当前行，我们从左到右地扫描每一块砖，使用一个累加器记录当前砖的右侧边缘到砖墙的左边缘的距离，将除了最右侧的砖块以外的其他砖块的右边缘到砖墙的左边缘的距离加入到哈希表中。最后我们遍历该哈希表，找到出现次数最多的砖块边缘，这就是垂线经过的砖块边缘，而该垂线经过的砖块数量即为砖墙的高度减去该垂线经过的砖块边缘的数量。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int leastBricks(vector<vector<int>>& wall) {\n        unordered_map<int, int> cnt;\n        for (auto& widths : wall) {\n            int n = widths.size();\n            int sum = 0;\n            for (int i = 0; i < n - 1; i++) {\n                sum += widths[i];\n                cnt[sum]++;\n            }\n        }\n        int maxCnt = 0;\n        for (auto& [_, c] : cnt) {\n            maxCnt = max(maxCnt, c);\n        }\n        return wall.size() - maxCnt;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int leastBricks(List<List<Integer>> wall) {\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        for (List<Integer> widths : wall) {\n            int n = widths.size();\n            int sum = 0;\n            for (int i = 0; i < n - 1; i++) {\n                sum += widths.get(i);\n                cnt.put(sum, cnt.getOrDefault(sum, 0) + 1);\n            }\n        }\n        int maxCnt = 0;\n        for (Map.Entry<Integer, Integer> entry : cnt.entrySet()) {\n            maxCnt = Math.max(maxCnt, entry.getValue());\n        }\n        return wall.size() - maxCnt;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int LeastBricks(IList<IList<int>> wall) {\n        Dictionary<int, int> cnt = new Dictionary<int, int>();\n        foreach (IList<int> widths in wall) {\n            int n = widths.Count;\n            int sum = 0;\n            for (int i = 0; i < n - 1; i++) {\n                sum += widths[i];\n                if (!cnt.ContainsKey(sum)) {\n                    cnt.Add(sum, 1);\n                } else {\n                    cnt[sum]++;\n                }\n            }\n        }\n        int maxCnt = 0;\n        foreach (var entry in cnt) {\n            maxCnt = Math.Max(maxCnt, entry.Value);\n        }\n        return wall.Count - maxCnt;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar leastBricks = function(wall) {\n    const cnt = new Map();\n    for (const widths of wall) {\n        const n = widths.length;\n        let sum = 0;\n        for (let i = 0; i < n - 1; i++) {\n            sum += widths[i];\n            cnt.set(sum, (cnt.get(sum) || 0) + 1);\n        }\n    }\n    let maxCnt = 0;\n    for (const [_, c] of cnt.entries()) {\n        maxCnt = Math.max(maxCnt, c);\n    }\n    return wall.length - maxCnt;\n};\n```\n\n```go [sol1-Golang]\nfunc leastBricks(wall [][]int) int {\n    cnt := map[int]int{}\n    for _, widths := range wall {\n        sum := 0\n        for _, width := range widths[:len(widths)-1] {\n            sum += width\n            cnt[sum]++\n        }\n    }\n    maxCnt := 0\n    for _, c := range cnt {\n        if c > maxCnt {\n            maxCnt = c\n        }\n    }\n    return len(wall) - maxCnt\n}\n```\n\n```C [sol1-C]\nstruct HashTable {\n    int key, val;\n    UT_hash_handle hh;\n};\n\nint leastBricks(int** wall, int wallSize, int* wallColSize) {\n    struct HashTable* cnt = NULL;\n    for (int i = 0; i < wallSize; i++) {\n        int n = wallColSize[i];\n        int sum = 0;\n        for (int j = 0; j < n - 1; j++) {\n            sum += wall[i][j];\n            struct HashTable* tmp;\n            HASH_FIND_INT(cnt, &sum, tmp);\n            if (tmp == NULL) {\n                tmp = malloc(sizeof(struct HashTable));\n                tmp->key = sum, tmp->val = 1;\n                HASH_ADD_INT(cnt, key, tmp);\n            } else {\n                tmp->val++;\n            }\n        }\n    }\n    int maxCnt = 0;\n    struct HashTable *iter, *tmp;\n    HASH_ITER(hh, cnt, iter, tmp) {\n        maxCnt = fmax(maxCnt, iter->val);\n    }\n    return wallSize - maxCnt;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nm)$，其中 $n$ 是砖墙的高度，$m$ 是每行砖墙的砖的平均数量。我们需要遍历每行砖块中除了最右侧的砖块以外的每一块砖，将其右侧边缘到砖墙的左边缘的距离加入到哈希表中。\n\n- 空间复杂度：$O(nm)$，其中 $n$ 是砖墙的高度，$m$ 是每行砖墙的砖的平均数量。我们需要将每行砖块中除了最右侧的砖块以外的每一块砖的右侧边缘到砖墙的左边缘的距离加入到哈希表中。"
}