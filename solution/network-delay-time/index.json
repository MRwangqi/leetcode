{
	"titleSlug": "network-delay-time",
	"slug": "wang-luo-yan-chi-shi-jian-by-leetcode-so-6phc",
	"url": "https://leetcode-cn.com/problems/network-delay-time/solution/wang-luo-yan-chi-shi-jian-by-leetcode-so-6phc/",
	"content": "#### 前言\n\n本题需要用到单源最短路径算法 $\\text{Dijkstra}$，现在让我们回顾该算法，其主要思想是贪心。\n\n将所有节点分成两类：已确定从起点到当前点的最短路长度的节点，以及未确定从起点到当前点的最短路长度的节点（下面简称「未确定节点」和「已确定节点」）。\n\n每次从「未确定节点」中取一个与起点距离最短的点，将它归类为「已确定节点」，并用它「更新」从起点到其他所有「未确定节点」的距离。直到所有点都被归类为「已确定节点」。\n\n用节点 $A$「更新」节点 $B$ 的意思是，用起点到节点 $A$ 的最短路长度加上从节点 $A$ 到节点 $B$ 的边的长度，去比较起点到节点 $B$ 的最短路长度，如果前者小于后者，就用前者更新后者。这种操作也被叫做「松弛」。\n\n这里暗含的信息是：每次选择「未确定节点」时，起点到它的最短路径的长度可以被确定。\n\n可以这样理解，因为我们已经用了每一个「已确定节点」更新过了当前节点，无需再次更新（因为一个点不能多次到达）。而当前节点已经是所有「未确定节点」中与起点距离最短的点，不可能被其它「未确定节点」更新。所以当前节点可以被归类为「已确定节点」。\n\n#### 方法一：$\\text{Dijkstra}$ 算法\n\n根据题意，从节点 $k$ 发出的信号，到达节点 $x$ 的时间就是节点 $k$ 到节点 $x$ 的最短路的长度。因此我们需要求出节点 $k$ 到其余所有点的最短路，其中的最大值就是答案。若存在从 $k$ 出发无法到达的点，则返回 $-1$。\n\n下面的代码将节点编号减小了 $1$，从而使节点编号位于 $[0,n-1]$ 范围。\n\n```C++ [sol11-C++]\nclass Solution {\npublic:\n    int networkDelayTime(vector<vector<int>> &times, int n, int k) {\n        const int inf = INT_MAX / 2;\n        vector<vector<int>> g(n, vector<int>(n, inf));\n        for (auto &t : times) {\n            int x = t[0] - 1, y = t[1] - 1;\n            g[x][y] = t[2];\n        }\n\n        vector<int> dist(n, inf);\n        dist[k - 1] = 0;\n        vector<int> used(n);\n        for (int i = 0; i < n; ++i) {\n            int x = -1;\n            for (int y = 0; y < n; ++y) {\n                if (!used[y] && (x == -1 || dist[y] < dist[x])) {\n                    x = y;\n                }\n            }\n            used[x] = true;\n            for (int y = 0; y < n; ++y) {\n                dist[y] = min(dist[y], dist[x] + g[x][y]);\n            }\n        }\n\n        int ans = *max_element(dist.begin(), dist.end());\n        return ans == inf ? -1 : ans;\n    }\n};\n```\n\n```Java [sol11-Java]\nclass Solution {\n    public int networkDelayTime(int[][] times, int n, int k) {\n        final int INF = Integer.MAX_VALUE / 2;\n        int[][] g = new int[n][n];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(g[i], INF);\n        }\n        for (int[] t : times) {\n            int x = t[0] - 1, y = t[1] - 1;\n            g[x][y] = t[2];\n        }\n\n        int[] dist = new int[n];\n        Arrays.fill(dist, INF);\n        dist[k - 1] = 0;\n        boolean[] used = new boolean[n];\n        for (int i = 0; i < n; ++i) {\n            int x = -1;\n            for (int y = 0; y < n; ++y) {\n                if (!used[y] && (x == -1 || dist[y] < dist[x])) {\n                    x = y;\n                }\n            }\n            used[x] = true;\n            for (int y = 0; y < n; ++y) {\n                dist[y] = Math.min(dist[y], dist[x] + g[x][y]);\n            }\n        }\n\n        int ans = Arrays.stream(dist).max().getAsInt();\n        return ans == INF ? -1 : ans;\n    }\n}\n```\n\n```C# [sol11-C#]\npublic class Solution {\n    public int NetworkDelayTime(int[][] times, int n, int k) {\n        const int INF = int.MaxValue / 2;\n        int[,] g = new int[n, n];\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                g[i, j] = INF;\n            }\n        }\n        foreach (int[] t in times) {\n            int x = t[0] - 1, y = t[1] - 1;\n            g[x, y] = t[2];\n        }\n\n        int[] dist = new int[n];\n        Array.Fill(dist, INF);\n        dist[k - 1] = 0;\n        bool[] used = new bool[n];\n        for (int i = 0; i < n; ++i) {\n            int x = -1;\n            for (int y = 0; y < n; ++y) {\n                if (!used[y] && (x == -1 || dist[y] < dist[x])) {\n                    x = y;\n                }\n            }\n            used[x] = true;\n            for (int y = 0; y < n; ++y) {\n                dist[y] = Math.Min(dist[y], dist[x] + g[x, y]);\n            }\n        }\n\n        int ans = dist.Max();\n        return ans == INF ? -1 : ans;\n    }\n}\n```\n\n```go [sol11-Golang]\nfunc networkDelayTime(times [][]int, n, k int) (ans int) {\n    const inf = math.MaxInt64 / 2\n    g := make([][]int, n)\n    for i := range g {\n        g[i] = make([]int, n)\n        for j := range g[i] {\n            g[i][j] = inf\n        }\n    }\n    for _, t := range times {\n        x, y := t[0]-1, t[1]-1\n        g[x][y] = t[2]\n    }\n\n    dist := make([]int, n)\n    for i := range dist {\n        dist[i] = inf\n    }\n    dist[k-1] = 0\n    used := make([]bool, n)\n    for i := 0; i < n; i++ {\n        x := -1\n        for y, u := range used {\n            if !u && (x == -1 || dist[y] < dist[x]) {\n                x = y\n            }\n        }\n        used[x] = true\n        for y, time := range g[x] {\n            dist[y] = min(dist[y], dist[x]+time)\n        }\n    }\n\n    for _, d := range dist {\n        if d == inf {\n            return -1\n        }\n        ans = max(ans, d)\n    }\n    return\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol11-Python3]\nclass Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        g = [[float('inf')] * n for _ in range(n)]\n        for x, y, time in times:\n            g[x - 1][y - 1] = time\n\n        dist = [float('inf')] * n\n        dist[k - 1] = 0\n        used = [False] * n\n        for _ in range(n):\n            x = -1\n            for y, u in enumerate(used):\n                if not u and (x == -1 or dist[y] < dist[x]):\n                    x = y\n            used[x] = True\n            for y, time in enumerate(g[x]):\n                dist[y] = min(dist[y], dist[x] + time)\n\n        ans = max(dist)\n        return ans if ans < float('inf') else -1\n```\n\n```JavaScript [sol11-JavaScript]\nvar networkDelayTime = function(times, n, k) {\n    const INF = Number.MAX_SAFE_INTEGER;\n    const g = new Array(n).fill(INF).map(() => new Array(n).fill(INF));\n    for (const t of times) {\n        const x = t[0] - 1, y = t[1] - 1;\n        g[x][y] = t[2];\n    }\n\n    const dist = new Array(n).fill(INF);\n    dist[k - 1] = 0;\n    const used = new Array(n).fill(false);\n    for (let i = 0; i < n; ++i) {\n        let x = -1;\n        for (let y = 0; y < n; ++y) {\n            if (!used[y] && (x === -1 || dist[y] < dist[x])) {\n                x = y;\n            }\n        }\n        used[x] = true;\n        for (let y = 0; y < n; ++y) {\n            dist[y] = Math.min(dist[y], dist[x] + g[x][y]);\n        }\n    }\n\n    let ans = Math.max(...dist);\n    return ans === INF ? -1 : ans;\n};\n```\n\n```C [sol11-C]\nint networkDelayTime(int** times, int timesSize, int* timesColSize, int n, int k) {\n    const int inf = 0x3f3f3f3f;\n    int g[n][n];\n    memset(g, 0x3f, sizeof(g));\n    for (int i = 0; i < timesSize; i++) {\n        int x = times[i][0] - 1, y = times[i][1] - 1;\n        g[x][y] = times[i][2];\n    }\n\n    int dist[n];\n    memset(dist, 0x3f, sizeof(dist));\n    dist[k - 1] = 0;\n    int used[n];\n    memset(used, 0, sizeof(used));\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        int x = -1;\n        for (int y = 0; y < n; ++y) {\n            if (!used[y] && (x == -1 || dist[y] < dist[x])) {\n                x = y;\n            }\n        }\n        used[x] = true;\n        ans = fmax(ans, dist[x]);\n        for (int y = 0; y < n; ++y) {\n            dist[y] = fmin(dist[y], dist[x] + g[x][y]);\n        }\n    }\n\n    return ans == inf ? -1 : ans;\n}\n```\n\n除了枚举，我们还可以使用一个小根堆来寻找「未确定节点」中与起点距离最近的点。\n\n```C++ [sol12-C++]\nclass Solution {\npublic:\n    int networkDelayTime(vector<vector<int>> &times, int n, int k) {\n        const int inf = INT_MAX / 2;\n        vector<vector<pair<int, int>>> g(n);\n        for (auto &t : times) {\n            int x = t[0] - 1, y = t[1] - 1;\n            g[x].emplace_back(y, t[2]);\n        }\n\n        vector<int> dist(n, inf);\n        dist[k - 1] = 0;\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> q;\n        q.emplace(0, k - 1);\n        while (!q.empty()) {\n            auto p = q.top();\n            q.pop();\n            int time = p.first, x = p.second;\n            if (dist[x] < time) {\n                continue;\n            }\n            for (auto &e : g[x]) {\n                int y = e.first, d = dist[x] + e.second;\n                if (d < dist[y]) {\n                    dist[y] = d;\n                    q.emplace(d, y);\n                }\n            }\n        }\n\n        int ans = *max_element(dist.begin(), dist.end());\n        return ans == inf ? -1 : ans;\n    }\n};\n```\n\n```Java [sol12-Java]\nclass Solution {\n    public int networkDelayTime(int[][] times, int n, int k) {\n        final int INF = Integer.MAX_VALUE / 2;\n        List<int[]>[] g = new List[n];\n        for (int i = 0; i < n; ++i) {\n            g[i] = new ArrayList<int[]>();\n        }\n        for (int[] t : times) {\n            int x = t[0] - 1, y = t[1] - 1;\n            g[x].add(new int[]{y, t[2]});\n        }\n\n        int[] dist = new int[n];\n        Arrays.fill(dist, INF);\n        dist[k - 1] = 0;\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] != b[0] ? a[0] - b[0] : a[1] - b[1]);\n        pq.offer(new int[]{0, k - 1});\n        while (!pq.isEmpty()) {\n            int[] p = pq.poll();\n            int time = p[0], x = p[1];\n            if (dist[x] < time) {\n                continue;\n            }\n            for (int[] e : g[x]) {\n                int y = e[0], d = dist[x] + e[1];\n                if (d < dist[y]) {\n                    dist[y] = d;\n                    pq.offer(new int[]{d, y});\n                }\n            }\n        }\n\n        int ans = Arrays.stream(dist).max().getAsInt();\n        return ans == INF ? -1 : ans;\n    }\n}\n```\n\n```go [sol12-Golang]\nfunc networkDelayTime(times [][]int, n, k int) (ans int) {\n    type edge struct{ to, time int }\n    g := make([][]edge, n)\n    for _, t := range times {\n        x, y := t[0]-1, t[1]-1\n        g[x] = append(g[x], edge{y, t[2]})\n    }\n\n    const inf int = math.MaxInt64 / 2\n    dist := make([]int, n)\n    for i := range dist {\n        dist[i] = inf\n    }\n    dist[k-1] = 0\n    h := &hp{{0, k - 1}}\n    for h.Len() > 0 {\n        p := heap.Pop(h).(pair)\n        x := p.x\n        if dist[x] < p.d {\n            continue\n        }\n        for _, e := range g[x] {\n            y := e.to\n            if d := dist[x] + e.time; d < dist[y] {\n                dist[y] = d\n                heap.Push(h, pair{d, y})\n            }\n        }\n    }\n\n    for _, d := range dist {\n        if d == inf {\n            return -1\n        }\n        ans = max(ans, d)\n    }\n    return\n}\n\ntype pair struct{ d, x int }\ntype hp []pair\n\nfunc (h hp) Len() int              { return len(h) }\nfunc (h hp) Less(i, j int) bool    { return h[i].d < h[j].d }\nfunc (h hp) Swap(i, j int)         { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(v interface{})   { *h = append(*h, v.(pair)) }\nfunc (h *hp) Pop() (v interface{}) { a := *h; *h, v = a[:len(a)-1], a[len(a)-1]; return }\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol12-Python3]\nclass Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        g = [[] for _ in range(n)]\n        for x, y, time in times:\n            g[x - 1].append((y - 1, time))\n\n        dist = [float('inf')] * n\n        dist[k - 1] = 0\n        q = [(0, k - 1)]\n        while q:\n            time, x = heapq.heappop(q)\n            if dist[x] < time:\n                continue\n            for y, time in g[x]:\n                if (d := dist[x] + time) < dist[y]:\n                    dist[y] = d\n                    heapq.heappush(q, (d, y))\n\n        ans = max(dist)\n        return ans if ans < float('inf') else -1\n```\n\n**复杂度分析**\n\n枚举写法的复杂度如下：\n\n- 时间复杂度：$O(n^2+m)$，其中 $m$ 是数组 $\\textit{times}$ 的长度。\n\n- 空间复杂度：$O(n^2)$。邻接矩阵需占用 $O(n^2)$ 的空间。\n\n堆的写法复杂度如下：\n\n- 时间复杂度：$O(m\\log m)$，其中 $m$ 是数组 $\\textit{times}$ 的长度。\n\n- 空间复杂度：$O(n+m)$。\n\n值得注意的是，由于本题边数远大于点数，是一张稠密图，因此在运行时间上，枚举写法要略快于堆的写法。"
}