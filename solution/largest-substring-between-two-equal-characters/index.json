{
	"titleSlug": "largest-substring-between-two-equal-characters",
	"slug": "liang-ge-xiang-tong-zi-fu-zhi-jian-de-zu-9n2l",
	"url": "https://leetcode-cn.com/problems/largest-substring-between-two-equal-characters/solution/liang-ge-xiang-tong-zi-fu-zhi-jian-de-zu-9n2l/",
	"content": "#### 方法一：直接遍历\n\n题目要求求出两个相同字符之间的最长子字符串的长度。对于字符 $\\textit{ch}$，只需要求出 $\\textit{ch}$ 第一次出现在字符串中的索引位置 $\\textit{first}$ 和最后一次出现在字符串中的索引位置 $\\textit{last}$，则以 $\\textit{ch}$ 为相同字符之间的子字符串的最大长度一定为 $\\textit{last} - \\textit{first} - 1$，我们依次求出所有可能的子字符的长度的最大值即可。我们设数组 $\\textit{firstIndex}$ 记录每个字符 $i$ 在字符串中第一次出现的索引，$\\textit{maxLength}$ 表示当前子字符串的最大长度。\n+ 初始化时 $\\textit{firstIndex}$ 中的每个元素都初始化为 $-1$，表示该字符还未出现。\n+ 当遍历到第 $i$ 个字符 $\\textit{ch}$ 时，如果当前数组中 $\\textit{firstIndex}[\\textit{ch}] = -1$，则记录该字符第一次出现的索引为 $i$，更新 $\\textit{firstIndex}[\\textit{ch}] = 1$；如果当前数组中 $\\textit{firstIndex}[\\textit{ch}] \\ge 0$ 时，则表示字符 $\\textit{ch}$ 之前已经出现过，此时两个 $\\textit{ch}$ 之间的子字符串长度为 $i - \\textit{firstIndex}[\\textit{ch}] - 1$，同时更新 $\\textit{maxLength}$。\n+ 返回最大的长度 $\\textit{maxLength}$ 即可。\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\n        ans = -1\n        firstIndex = {}\n        for i, c in enumerate(s):\n            if c not in firstIndex:\n                firstIndex[c] = i\n            else:\n                ans = max(ans, i - firstIndex[c] - 1)\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxLengthBetweenEqualCharacters(string s) {\n        vector<int> firstIndex(26, -1);\n        int maxLength = -1;\n        for (int i = 0; i < s.size(); i++) {\n            if (firstIndex[s[i] - 'a'] < 0) {\n                firstIndex[s[i] - 'a'] = i;\n            } else {\n                maxLength = max(maxLength, i - firstIndex[s[i] - 'a'] - 1);\n            }\n        }\n        return maxLength;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxLengthBetweenEqualCharacters(String s) {\n        int[] firstIndex = new int[26];\n        Arrays.fill(firstIndex, -1);\n        int maxLength = -1;\n        for (int i = 0; i < s.length(); i++) {\n            if (firstIndex[s.charAt(i) - 'a'] < 0) {\n                firstIndex[s.charAt(i) - 'a'] = i;\n            } else {\n                maxLength = Math.max(maxLength, i - firstIndex[s.charAt(i) - 'a'] - 1);\n            }\n        }\n        return maxLength;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MaxLengthBetweenEqualCharacters(string s) {\n        int[] firstIndex = new int[26];\n        Array.Fill(firstIndex, -1);\n        int maxLength = -1;\n        for (int i = 0; i < s.Length; i++) {\n            if (firstIndex[s[i] - 'a'] < 0) {\n                firstIndex[s[i] - 'a'] = i;\n            } else {\n                maxLength = Math.Max(maxLength, i - firstIndex[s[i] - 'a'] - 1);\n            }\n        }\n        return maxLength;\n    }\n}\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n\nint maxLengthBetweenEqualCharacters(char * s){\n    int maxLength = -1;\n    int firstIndex[26];\n    int len = strlen(s);\n    memset(firstIndex, -1, sizeof(firstIndex));\n    for (int i = 0; i < len; i++) {\n        if (firstIndex[s[i] - 'a'] < 0) {\n            firstIndex[s[i] - 'a'] = i;\n        } else {\n            maxLength = MAX(maxLength, i - firstIndex[s[i] - 'a'] - 1);\n        }\n    }\n    return maxLength;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxLengthBetweenEqualCharacters = function(s) {\n    const firstIndex = new Array(26).fill(-1);\n    let maxLength = -1;\n    for (let i = 0; i < s.length; i++) {\n        if (firstIndex[s[i].charCodeAt() - 'a'.charCodeAt()] < 0) {\n            firstIndex[s[i].charCodeAt() - 'a'.charCodeAt()] = i;\n        } else {\n            maxLength = Math.max(maxLength, i - firstIndex[s[i].charCodeAt() - 'a'.charCodeAt()] - 1);\n        }\n    }\n    return maxLength;\n};\n```\n\n```go [sol1-Golang]\nfunc maxLengthBetweenEqualCharacters(s string) int {\n    ans := -1\n    firstIndex := [26]int{}\n    for i := range firstIndex {\n        firstIndex[i] = -1\n    }\n    for i, c := range s {\n        c -= 'a'\n        if firstIndex[c] < 0 {\n            firstIndex[c] = i\n        } else {\n            ans = max(ans, i-firstIndex[c]-1)\n        }\n    }\n    return ans\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 表示字符串的长度。我们只需遍历一遍字符串即可。\n\n- 空间复杂度：$O(|\\Sigma|)$，其中 $\\Sigma$ 是字符集，在本题中字符集为所有小写字母，$|\\Sigma|=26$。"
}