{
	"titleSlug": "pizza-with-3n-slices",
	"slug": "3n-kuai-pi-sa-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/pizza-with-3n-slices/solution/3n-kuai-pi-sa-by-leetcode-solution/",
	"content": "#### 问题转化\n\n本题可以转化成如下问题：\n\n> 给一个长度为 $3n$ 的环状序列，你可以在其中选择 $n$ 个数，并且任意两个数不能相邻，求这 $n$ 个数的最大值。\n\n为什么可以这样转化呢？我们只需要证明，对于任意一种在长度为 $3n$ 的环状序列上选择 $n$ 个不相邻数的方法，都等价于一种题目中挑选披萨的方法。我们使用数学归纳法，证明如下：\n\n- 当 $n=1$ 时，我们在 $3$ 个数中任选 $1$ 个，由于这是一个环状序列，因此选取其中的任意一个数，剩余的两个数都会在选取的数的两侧，即如果有 $3$ 块披萨，我们可以选取其中的任意一块；\n\n- 当 $n \\geq 2$ 时，一定存在一个数 $x$，使得 $x$ 的某一侧有连续两个数没有被选择（思考一下为什么？）。不失一般性，我们设 $x$ 的左侧有连续两个数没有被选择，并且 $x$ 的右侧至少有一个数没有没选择（否则 $x$ 和其右侧的数就相邻了），即：\n\n    $$\n    \\cdots, ?, \\empty, \\empty, x, \\empty, ?, \\cdots\n    $$\n\n    其中 $\\empty$ 表示这个数没有被选择，$?$ 表示这个数选择的情况未知（即我们不需要考虑，它可能被选择，也可能没有被选择）。我们删去 $x$ 以及左右两侧的数，得到：\n\n    $$\n    \\cdots, ?, \\empty, ?, \\cdots\n    $$\n\n    将长度为 $3n$ 的环状序列变成了长度为 $3(n-1)$ 的环状序列，并且该环状序列中有 $n-1$ 个数被选取，且任意两个被选取的数不相邻。对应到披萨上，相当于我们挑选了数 $x$ 对应未知的披萨，而 Alice 和 Bob 挑选了相邻的两块披萨。这样我们将问题的规模从 $n$ 减小至 $n-1$，通过数学归纳法得证。\n\n因此，我们需要设计算法，在长度为 $3n$ 的环状序列中选择 $n$ 个不相邻的数，使得这 $n$ 个数的和最大。\n\n#### 方法一：动态规划\n\n动态规划的解决方法和 [213. 打家劫舍 II](https://leetcode-cn.com/problems/pizza-with-3n-slices/) 较为相似。\n\n我们首先考虑如果该序列不是环状的应该如何解决，即给定的是长度为 $3n$ 的普通序列。我们可以用 $dp[i][j]$ 表示在前 $i$ 个数中选择了 $j$ 个不相邻的数的最大和，那么 $dp[i][j]$ 可以从两个位置转移而来：\n\n- 如果我们选择了第 $i$ 个数，那么第 $i - 1$ 个数不能被选择，相当于需要在前 $i - 2$ 个数中选择 $j - 1$ 个，即：\n\n    $$\n    dp[i][j] = dp[i - 2][j - 1] + \\textit{slices}[i]\n    $$\n\n- 如果我们没有选择第 $i$ 个数，那么需要在前 $i - 1$ 个数中选择 $j$ 个，即：\n\n    $$\n    dp[i][j] = dp[i - 1][j]\n    $$\n\n取两者的最大值即为状态转移方程：\n\n$$\ndp[i][j] = \\max(dp[i - 2][j - 1] + \\textit{slices}[i], dp[i - 1][j])\n$$\n\n那么如果该序列是环状序列的话，我们应该如何修改呢？我们可以发现，环状序列相较于普通序列，相当于添加了一个限制：普通序列中的第一个和最后一个数不能同时选。这样以来，我们只需要对普通序列进行两遍动态即可得到答案，第一遍动态规划中我们删去普通序列中的第一个数，表示我们不会选第一个数；第二遍动态规划中我们删去普通序列中的最后一个数，表示我们不会选最后一个数。将这两遍动态规划得到的结果去较大值，即为在环状序列上的答案。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int calculate(const vector<int>& slices) {\n        int n = slices.size();\n        int choose = (n + 1) / 3;\n        vector<vector<int>> dp(n + 1, vector<int>(choose + 1));\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 1; j <= choose; ++j) {\n                dp[i][j] = max(dp[i - 1][j], (i - 2 >= 0 ? dp[i - 2][j - 1] : 0) + slices[i - 1]);\n            }\n        }\n        return dp[n][choose];\n    }\n\n    int maxSizeSlices(vector<int>& slices) {\n        vector<int> v1(slices.begin() + 1, slices.end());\n        vector<int> v2(slices.begin(), slices.end() - 1);\n        int ans1 = calculate(v1);\n        int ans2 = calculate(v2);\n        return max(ans1, ans2);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxSizeSlices(int[] slices) {\n        int[] slices1 = new int[slices.length - 1];\n        System.arraycopy(slices, 1, slices1, 0, slices.length - 1);\n        int[] slices2 = new int[slices.length - 1];\n        System.arraycopy(slices, 0, slices2, 0, slices.length - 1);\n        int ans1 = calculate(slices1);\n        int ans2 = calculate(slices2);\n        return Math.max(ans1, ans2);\n    }\n\n    public int calculate(int[] slices) {\n        int n = slices.length;\n        int choose = (n + 1) / 3;\n        int[][] dp = new int[n + 1][choose + 1];\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 1; j <= choose; ++j) {\n                dp[i][j] = Math.max(dp[i - 1][j], (i - 2 >= 0 ? dp[i - 2][j - 1] : 0) + slices[i - 1]);\n            }\n        }\n        return dp[n][choose];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        def calculate(s):\n            n = len(s)\n            choose = (n + 1) // 3\n            dp = [[0] * (choose + 1) for _ in range(n + 1)]\n            for i in range(1, n + 1):\n                for j in range(1, choose + 1):\n                    dp[i][j] = max(dp[i - 1][j], (dp[i - 2][j - 1] if i - 2 >= 0 else 0) + s[i - 1])\n            return dp[n][choose]\n\n        ans1 = calculate(slices[1:])\n        ans2 = calculate(slices[:-1])\n        return max(ans1, ans2)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N^2)$，其中 $N$ 是数组 $\\textit{slices}$ 的长度。\n\n- 空间复杂度：$O(N^2)$，即存储动态规划计算的状态需要使用的空间。在状态转移方程中，$dp[i][..]$ 只与 $dp[i-1][..]$ 和 $dp[i-2][..]$ 有关，$dp[..][j]$ 只与 $dp[..][j-1]$ 有关，因此我们可以：\n\n    - 用三个一维数组分别存储 $dp[i][..]$，$dp[i-1][..]$ 和 $dp[i-2][..]$，并在每次 $i$ 值增加时适当地交换它们；\n\n    - 用两个一维数组分别存储 $dp[..][j-1]$ 和 $dp[..][j]$，将计算动态规划的二重循环改为 $j$ 在外层而 $i$ 在内层，并在每次 $j$ 值增加时适当地交换它们。\n\n    这两种方法都可以将空间复杂度降低至 $O(N)$。\n\n#### 方法二：贪心算法\n\n**说明**\n\n本方法已经超过了面试难度，属于竞赛中的技巧，其证明与图论中「最大匹配」和「最大流」中的增广路经类似。因此这篇题解中不会给出证明，仅会给出方法和代码，并加以例子说明。\n\n**算法**\n\n我们考虑一种简单（但不正确）的贪心方法：每次选择环状序列中最大的那个数。在选择后，由于相邻的数都不能选择，我们就把相邻的数都删除，再开始下一次的选择。例如当序列为\n\n```\n[8, 9, 8, 6, 1, 1]\n```\n\n时，我们第一次会选择 `9` 并删除两个相邻的 `8`，序列变为\n\n```\n[6, 1, 1]\n```\n\n第二次会选择 `6` 并删除两个相邻的 `1`（需要时刻提醒自己，这是环状序列）。\n\n贪心的结果正确吗？我们选择的两个数和为 `9 + 6 = 15`，而如果选择两个 `8` 可以得到更大的和 `16`。我们的贪心法没法取到 `16` 的原因在于，在第一次选择 `9` 的时候，就已经讲两个 `8` 删除了。那么我们是否可以修改我们的贪心方法，使得我们可以：\n\n- 选择当前环状序列中最大的数；\n\n- 在必要的时候反悔选择，重新选择其相邻的两个数。\n\n呢？答案是可以的，我们只需要每次选择了最大的数之后，将这个数的值修改成其与相邻的两个数的差值即可。具体地，假设我们在序列 $\\cdots, x, y, z, \\cdots$ 中选取了 $y$，那么我们在删去 $x$ 和 $z$ 的同时，将 $y$ 的值改为 $y' = x + z - y$。这样以来，我们就可以进行反悔操作了：如果我们选取了这个新的 $y'$ 值，那么与之前选取的 $y$ 值相加，即为：\n\n$$\ny + y' = y + (x + z - y) = x + z\n$$\n\n恰好就是其相邻的两个数之和。对于序列\n\n```\n[8, 9, 8, 6, 1, 1]\n```\n\n我们在选择 `9` 之后，删除两个相邻的 `8` 并将 `9` 修改为 `8 + 8 - 9 = 7`，得到新的序列\n\n```\n[7, 6, 1, 1]\n```\n\n第二次就会选择 `7` 而不是 `6` 了，这样就得到了正确的答案。\n\n以上就是正确的贪心方法了，那么我们该如何实现它呢？我们可以考虑使用双向链表 + 优先队列，其中双向链表用来实时维护这个环状序列，而优先队列用来找出序列中的最大值，并且需要定位至其在双向链表中的位置，这样才能进行后续的删除和修改操作。同时，在删除了相邻的数之后，由于优先队列中对应的数无法被删除（除非读者亲自手写一个支持删除操作的堆来实现优先队列），因此我们还需要一种数据结构（数组、哈希表等均可），记录每个一开始在双向链表中的数是否已经被删除。\n\n具体的实现方法见下面的代码。我们用数组实现了双向链表，其中数组 `linkL` 和 `linkR` 分别存储了每个节点在双向链表中的左侧和右侧相邻的节点，数组 `valid` 存储了每个一开始在双向链表中的数是否已经被删除。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxSizeSlices(vector<int>& slices) {\n        int n = slices.size();\n        // 使用数组模拟双向链表\n        vector<int> linkL(n);\n        vector<int> linkR(n);\n        for (int i = 0; i < n; ++i) {\n            linkL[i] = (i == 0 ? n - 1 : i - 1);\n            linkR[i] = (i == n - 1 ? 0 : i + 1);\n        }\n        // 将初始的元素放入优先队列中\n        vector<int> valid(n, 1);\n        priority_queue<pair<int, int>> q;\n        for (int i = 0; i < n; ++i) {\n            q.emplace(slices[i], i);\n        }\n        \n        int ans = 0;\n        for (int i = 0; i < n / 3; ++i) {\n            // 从优先队列中取出元素时要判断其是否已被删除\n            while (!valid[q.top().second]) {\n                q.pop();\n            }\n            int pos = q.top().second;\n            q.pop();\n            ans += slices[pos];\n            // 更新当前位置的值\n            slices[pos] = slices[linkL[pos]] + slices[linkR[pos]] - slices[pos];\n            q.emplace(slices[pos], pos);\n            // 删去左右两侧的值\n            valid[linkL[pos]] = valid[linkR[pos]] = 0;\n            // 修改双向链表\n            linkR[linkL[linkL[pos]]] = pos;\n            linkL[linkR[linkR[pos]]] = pos;\n            linkL[pos] = linkL[linkL[pos]];\n            linkR[pos] = linkR[linkR[pos]];\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int maxSizeSlices(int[] slices) {\n        int n = slices.length;\n        // 使用数组模拟双向链表\n        int[] linkL = new int[n];\n        int[] linkR = new int[n];\n        for (int i = 0; i < n; ++i) {\n            linkL[i] = i == 0 ? n - 1 : i - 1;\n            linkR[i] = i == n - 1 ? 0 : i + 1;\n        }\n        // 将初始的元素放入优先队列中\n        boolean[] valid = new boolean[n];\n        Arrays.fill(valid, true);\n        PriorityQueue<int[]> queue = new PriorityQueue<int[]>(new Comparator<int[]>() {\n            public int compare(int[] array1, int[] array2) {\n                if (array1[0] != array2[0]) {\n                    return array2[0] - array1[0];\n                } else {\n                    return array2[1] - array1[1];\n                }\n            }\n        });\n        for (int i = 0; i < n; ++i) {\n            queue.offer(new int[]{slices[i], i});\n        }\n        \n        int ans = 0;\n        for (int i = 0; i < n / 3; ++i) {\n            // 从优先队列中取出元素时要判断其是否已被删除\n            while (!valid[queue.peek()[1]]) {\n                queue.poll();\n            }\n            int pos = queue.poll()[1];\n            ans += slices[pos];\n            // 更新当前位置的值\n            slices[pos] = slices[linkL[pos]] + slices[linkR[pos]] - slices[pos];\n            queue.offer(new int[]{slices[pos], pos});\n            // 删去左右两侧的值\n            valid[linkL[pos]] = valid[linkR[pos]] = false;\n            // 修改双向链表\n            linkR[linkL[linkL[pos]]] = pos;\n            linkL[linkR[linkR[pos]]] = pos;\n            linkL[pos] = linkL[linkL[pos]];\n            linkR[pos] = linkR[linkR[pos]];\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        n = len(slices)\n        # 使用数组模拟双向链表\n        linkL, linkR = [0] * n, [0] * n\n        for i in range(n):\n            linkL[i] = (n - 1 if i == 0 else i - 1)\n            linkR[i] = (0 if i == n - 1 else i + 1)\n        # 将初始的元素放入优先队列中\n        valid = [True] * n\n        q = [(-slices[i], i) for i in range(n)]\n        heapq.heapify(q)\n\n        ans = 0\n        for i in range(n // 3):\n            while True:\n                pos = heapq.heappop(q)[1]\n                if valid[pos]:\n                    break\n            ans += slices[pos]\n            # 更新当前位置的值\n            slices[pos] = slices[linkL[pos]] + slices[linkR[pos]] - slices[pos]\n            heapq.heappush(q, (-slices[pos], pos))\n            # 删去左右两侧的值\n            valid[linkL[pos]] = valid[linkR[pos]] = 0\n            # 修改双向链表\n            linkR[linkL[linkL[pos]]] = pos\n            linkL[linkR[linkR[pos]]] = pos\n            linkL[pos] = linkL[linkL[pos]]\n            linkR[pos] = linkR[linkR[pos]]\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N \\log N)$，其中 $N$ 是数组 $\\textit{slices}$ 的长度。我们需要进行 $N/3$ 次贪心操作，取出 $N/3$ 个最大值，每次对优先队列的操作的时间复杂度均为 $O(\\log N)$，因此总时间复杂度为 $O(N \\log N)$。\n\n- 空间复杂度：$O(N)$。"
}