{
	"titleSlug": "ugly-number-iii",
	"slug": "by-masx200-hsst",
	"url": "https://leetcode-cn.com/problems/ugly-number-iii/solution/by-masx200-hsst/",
	"content": "### 解题思路\n二分查找+大整数\nhttps://leetcode.cn/problems/ugly-number-iii/solution/js-er-fen-qu-ji-he-bing-ji-zhu-yi-da-shu-by-yleave/\n### 代码\n\n```typescript\nfunction nthUglyNumber(n: number, a: number, b: number, c: number): number {\n    return Number(nthUglyBigInt(BigInt(n), BigInt(a), BigInt(b), BigInt(c)))\n};\nfunction nthUglyBigInt(n: bigint, a: bigint, b: bigint, c: bigint): bigint {\n\n    // 先将数值转换为 BigInt 类型\n    a = BigInt(a), b = BigInt(b), c = BigInt(c), n = BigInt(n);\n\n    // BigInt 不能使用 Math 函数判断，所以自己写一个\n    // 求最小公倍数\n\n    // 检查是否是丑数\n    const check = (val: bigint) => {\n        return val % a === 0n || val % b === 0n || val % c === 0n;\n    };\n\n    let r = n * min(a, b, c);\n    let l = 0n;\n    let a_b = lcm(a, b);\n    let a_c = lcm(a, c);\n    let b_c = lcm(b, c);\n    let a_b_c = lcm(a_b, c);\n\n    // 二分查找丑数\n    while (l < r) {\n        let mid = l + (r - l) / 2n;\n        let count = mid / a + mid / b + mid / c - mid / a_b - mid / b_c - mid / a_c + mid / a_b_c;\n\n        if (count === n) {\n            // 当 count 等于 n 时还需要再判断是否为丑数，因为对于BigInt的除法来说， 4 / 2 和 5 / 2 的结果是相等的\n            if (check(mid)) {\n                return mid;\n            } else {\n                r = mid - 1n;\n            }\n        } if (count < n) {\n            l = mid + 1n;\n        } else {\n            r = mid - 1n;\n        }\n    }\n\n    return check(l) ? l : -1n;\n};\n\n// 求最大公约数\nconst lcm = (a: bigint, b: bigint) => {\n    return a * b / gcd(a, b);\n};\nconst min = (a: bigint, b: bigint, c: bigint) => {\n    let m = a;\n    if (m > b) {\n        m = b;\n    }\n    if (m > c) {\n        m = c;\n    }\n\n    return m;\n};\nconst gcd = (a: bigint, b: bigint): bigint => {\n    if (b === 0n) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n};\n```"
}