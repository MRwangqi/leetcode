{
	"titleSlug": "decode-xored-permutation",
	"slug": "jie-ma-yi-huo-hou-de-pai-lie-by-leetcode-9gw4",
	"url": "https://leetcode-cn.com/problems/decode-xored-permutation/solution/jie-ma-yi-huo-hou-de-pai-lie-by-leetcode-9gw4/",
	"content": "#### 方法一：利用异或运算解码\n\n这道题规定了数组 $\\textit{perm}$ 是前 $n$ 个正整数的排列，其中 $n$ 是**奇数**，只有充分利用给定的条件，才能得到答案。\n\n为了得到原始数组 $\\textit{perm}$，应首先得到数组 $\\textit{perm}$ 的第一个元素（即下标为 $0$ 的元素），这也是最容易得到的。如果能得到数组 $\\textit{perm}$ 的全部元素的异或运算结果，以及数组 $\\textit{perm}$ 除了 $\\textit{perm}[0]$ 以外的全部元素的异或运算结果，即可得到 $\\textit{perm}[0]$ 的值。\n\n由于数组 $\\textit{perm}$ 是前 $n$ 个正整数的排列，因此数组 $\\textit{perm}$ 的全部元素的异或运算结果即为从 $1$ 到 $n$ 的全部正整数的异或运算结果。用 $\\textit{total}$ 表示数组 $\\textit{perm}$ 的全部元素的异或运算结果，则有\n\n$$\n\\begin{aligned}\n\\textit{total} &= 1 \\oplus 2 \\oplus \\ldots \\oplus n \\\\\n&= \\textit{perm}[0] \\oplus \\textit{perm}[1] \\oplus \\ldots \\oplus \\textit{perm}[n-1]\n\\end{aligned}\n$$\n\n其中 $\\oplus$ 是异或运算符。\n\n如何得到数组 $\\textit{perm}$ 除了 $\\textit{perm}[0]$ 以外的全部元素的异或运算结果？由于 $n$ 是奇数，除了 $\\textit{perm}[0]$ 以外，数组 $\\textit{perm}$ 还有 $n-1$ 个其他元素，$n-1$ 是偶数，又由于数组 $\\textit{encoded}$ 的每个元素都是数组 $\\textit{perm}$ 的两个元素异或运算的结果，因此数组 $\\textit{encoded}$ 中存在 $\\frac{n-1}{2}$ 个元素，这些元素的异或运算的结果为数组 $\\textit{perm}$ 除了 $\\textit{perm}[0]$ 以外的全部元素的异或运算结果。\n\n具体而言，数组 $\\textit{encoded}$ 的所有下标为奇数的元素的异或运算结果即为数组 $\\textit{perm}$ 除了 $\\textit{perm}[0]$ 以外的全部元素的异或运算结果。用 $\\textit{odd}$ 表示数组 $\\textit{encoded}$ 的所有下标为奇数的元素的异或运算结果，则有\n\n$$\n\\begin{aligned}\n\\textit{odd} &= \\textit{encoded}[1] \\oplus \\textit{encoded}[3] \\oplus \\ldots \\oplus \\textit{encoded}[n-2] \\\\\n&= \\textit{perm}[1] \\oplus \\textit{perm}[2] \\oplus \\ldots \\oplus \\textit{perm}[n]\n\\end{aligned}\n$$\n\n根据 $\\textit{total}$ 和 $\\textit{odd}$ 的值，即可计算得到 $\\textit{perm}[0]$ 的值：\n\n$$\n\\begin{aligned}\n\\textit{perm}[0] &= (\\textit{perm}[0] \\oplus \\ldots \\oplus \\textit{perm}[n]) \\oplus (\\textit{perm}[1] \\oplus \\ldots \\oplus \\textit{perm}[n]) \\\\\n&= \\textit{total} \\oplus \\textit{odd}\n\\end{aligned}\n$$\n\n当 $1 \\le i<n$ 时，有 $\\textit{encoded}[i-1]=\\textit{perm}[i-1] \\oplus \\textit{perm}[i]$。在等号两边同时异或 $\\textit{perm}[i-1]$，即可得到 $\\textit{perm}[i]=\\textit{perm}[i-1] \\oplus \\textit{encoded}[i-1]$。计算过程见「[1720. 解码异或后的数组的官方题解](https://leetcode-cn.com/problems/decode-xored-array/solution/jie-ma-yi-huo-hou-de-shu-zu-by-leetcode-yp0mg/)」。\n\n由于 $\\textit{perm}[0]$ 已知，因此对 $i$ 从 $1$ 到 $n-1$ 依次计算 $\\textit{perm}[i]$ 的值，即可得到原始数组 $\\textit{perm}$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] decode(int[] encoded) {\n        int n = encoded.length + 1;\n        int total = 0;\n        for (int i = 1; i <= n; i++) {\n            total ^= i;\n        }\n        int odd = 0;\n        for (int i = 1; i < n - 1; i += 2) {\n            odd ^= encoded[i];\n        }\n        int[] perm = new int[n];\n        perm[0] = total ^ odd;\n        for (int i = 0; i < n - 1; i++) {\n            perm[i + 1] = perm[i] ^ encoded[i];\n        }\n        return perm;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] Decode(int[] encoded) {\n        int n = encoded.Length + 1;\n        int total = 0;\n        for (int i = 1; i <= n; i++) {\n            total ^= i;\n        }\n        int odd = 0;\n        for (int i = 1; i < n - 1; i += 2) {\n            odd ^= encoded[i];\n        }\n        int[] perm = new int[n];\n        perm[0] = total ^ odd;\n        for (int i = 0; i < n - 1; i++) {\n            perm[i + 1] = perm[i] ^ encoded[i];\n        }\n        return perm;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar decode = function(encoded) {\n    const n = encoded.length + 1;\n    let total = 0;\n    for (let i = 1; i <= n; i++) {\n        total ^= i;\n    }\n    let odd = 0;\n    for (let i = 1; i < n - 1; i += 2) {\n        odd ^= encoded[i];\n    }\n    const perm = new Array(n).fill(0);\n    perm[0] = total ^ odd;\n    for (let i = 0; i < n - 1; i++) {\n        perm[i + 1] = perm[i] ^ encoded[i];\n    }\n    return perm;\n};\n```\n\n```go [sol1-Golang]\nfunc decode(encoded []int) []int {\n    n := len(encoded)\n    total := 0\n    for i := 1; i <= n+1; i++ {\n        total ^= i\n    }\n    odd := 0\n    for i := 1; i < n; i += 2 {\n        odd ^= encoded[i]\n    }\n    perm := make([]int, n+1)\n    perm[0] = total ^ odd\n    for i, v := range encoded {\n        perm[i+1] = perm[i] ^ v\n    }\n    return perm\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> decode(vector<int>& encoded) {\n        int n = encoded.size() + 1;\n        int total = 0;\n        for (int i = 1; i <= n; i++) {\n            total ^= i;\n        }\n        int odd = 0;\n        for (int i = 1; i < n - 1; i += 2) {\n            odd ^= encoded[i];\n        }\n        vector<int> perm(n);\n        perm[0] = total ^ odd;\n        for (int i = 0; i < n - 1; i++) {\n            perm[i + 1] = perm[i] ^ encoded[i];\n        }\n        return perm;\n    }\n};\n```\n\n```C [sol1-C]\nint* decode(int* encoded, int encodedSize, int* returnSize) {\n    int n = encodedSize + 1;\n    int total = 0;\n    for (int i = 1; i <= n; i++) {\n        total ^= i;\n    }\n    int odd = 0;\n    for (int i = 1; i < n - 1; i += 2) {\n        odd ^= encoded[i];\n    }\n    int* perm = malloc(sizeof(int) * n);\n    *returnSize = n;\n    perm[0] = total ^ odd;\n    for (int i = 0; i < n - 1; i++) {\n        perm[i + 1] = perm[i] ^ encoded[i];\n    }\n    return perm;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def decode(self, encoded: List[int]) -> List[int]:\n        n = len(encoded) + 1\n        total = reduce(xor, range(1, n + 1))\n        odd = 0\n        for i in range(1, n - 1, 2):\n            odd ^= encoded[i]\n        \n        perm = [total ^ odd]\n        for i in range(n - 1):\n            perm.append(perm[-1] ^ encoded[i])\n        \n        return perm\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是原始数组 $\\textit{perm}$ 的长度。计算 $\\textit{total}$ 和 $\\textit{odd}$ 各需要遍历长度为 $n-1$ 的数组 $\\textit{encoded}$ 一次，计算原数组 $\\textit{perm}$ 的每个元素值也需要遍历长度为 $n-1$ 的数组 $\\textit{encoded}$ 一次。\n\n- 空间复杂度：$O(1)$。注意空间复杂度不考虑返回值。"
}