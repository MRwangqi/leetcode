{
	"titleSlug": "k-closest-points-to-origin",
	"slug": "zui-jie-jin-yuan-dian-de-k-ge-dian-by-leetcode-sol",
	"url": "https://leetcode-cn.com/problems/k-closest-points-to-origin/solution/zui-jie-jin-yuan-dian-de-k-ge-dian-by-leetcode-sol/",
	"content": "#### 前言\n\n当我们计算出每个点到原点的欧几里得距离的平方后，本题和「[剑指 Offer 40. 最小的k个数](https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/)」是完全一样的题。\n\n为什么是欧几里得距离的「平方」？这是因为欧几里得距离并不一定是个整数，在进行计算和比较时可能会引进误差；但它的平方一定是个整数，这样我们就无需考虑误差了。\n\n#### 方法一：排序\n\n**思路和算法**\n\n将每个点到原点的欧几里得距离的平方从小到大排序后，取出前 $k$ 个即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {\n        sort(points.begin(), points.end(), [](const vector<int>& u, const vector<int>& v) {\n            return u[0] * u[0] + u[1] * u[1] < v[0] * v[0] + v[1] * v[1];\n        });\n        return {points.begin(), points.begin() + k};\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[][] kClosest(int[][] points, int k) {\n        Arrays.sort(points, new Comparator<int[]>() {\n            public int compare(int[] point1, int[] point2) {\n                return (point1[0] * point1[0] + point1[1] * point1[1]) - (point2[0] * point2[0] + point2[1] * point2[1]);\n            }\n        });\n        return Arrays.copyOfRange(points, 0, k);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        points.sort(key=lambda x: (x[0] ** 2 + x[1] ** 2))\n        return points[:k]\n```\n\n```Golang [sol1-Golang]\nfunc kClosest(points [][]int, k int) [][]int {\n    sort.Slice(points, func(i, j int) bool {\n        p, q := points[i], points[j]\n        return p[0]*p[0]+p[1]*p[1] < q[0]*q[0]+q[1]*q[1]\n    })\n    return points[:k]\n}\n```\n\n```C [sol1-C]\nint cmp(const void* _a, const void* _b) {\n    int *a = *(int**)_a, *b = *(int**)_b;\n    return a[0] * a[0] + a[1] * a[1] - b[0] * b[0] - b[1] * b[1];\n}\n\nint** kClosest(int** points, int pointsSize, int* pointsColSize, int k, int* returnSize, int** returnColumnSizes) {\n    qsort(points, pointsSize, sizeof(int*), cmp);\n    *returnSize = k;\n    *returnColumnSizes = malloc(sizeof(int) * k);\n    int** ret = malloc(sizeof(int*) * k);\n    for (int i = 0; i < k; i++) {\n        (*returnColumnSizes)[i] = 2;\n        ret[i] = malloc(sizeof(int) * 2);\n        ret[i][0] = points[i][0], ret[i][1] = points[i][1];\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log n)$，其中 $n$ 是数组 $\\textit{points}$ 的长度。算法的时间复杂度即排序的时间复杂度。\n\n- 空间复杂度：$O(\\log n)$，排序所需额外的空间复杂度为 $O(\\log n)$。\n\n#### 方法二：堆\n\n**思路和算法**\n\n我们可以使用一个大根堆实时维护前 $k$ 个最小的距离平方。\n\n首先我们将前 $k$ 个点的编号（为了方便最后直接得到答案）以及对应的距离平方放入大根堆中，随后从第 $k+1$ 个点开始遍历：如果当前点的距离平方比堆顶的点的距离平方要小，就把堆顶的点弹出，再插入当前的点。当遍历完成后，所有在大根堆中的点就是前 $k$ 个距离最小的点。\n\n不同的语言提供的堆的默认情况不一定相同。在 C++ 语言中，堆（即优先队列）为大根堆，但在 Python 语言中，堆为小根堆，因此我们需要在小根堆中存储（以及比较）距离平方的相反数。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {\n        priority_queue<pair<int, int>> q;\n        for (int i = 0; i < k; ++i) {\n            q.emplace(points[i][0] * points[i][0] + points[i][1] * points[i][1], i);\n        }\n        int n = points.size();\n        for (int i = k; i < n; ++i) {\n            int dist = points[i][0] * points[i][0] + points[i][1] * points[i][1];\n            if (dist < q.top().first) {\n                q.pop();\n                q.emplace(dist, i);\n            }\n        }\n        vector<vector<int>> ans;\n        while (!q.empty()) {\n            ans.push_back(points[q.top().second]);\n            q.pop();\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[][] kClosest(int[][] points, int k) {\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>() {\n            public int compare(int[] array1, int[] array2) {\n                return array2[0] - array1[0];\n            }\n        });\n        for (int i = 0; i < k; ++i) {\n            pq.offer(new int[]{points[i][0] * points[i][0] + points[i][1] * points[i][1], i});\n        }\n        int n = points.length;\n        for (int i = k; i < n; ++i) {\n            int dist = points[i][0] * points[i][0] + points[i][1] * points[i][1];\n            if (dist < pq.peek()[0]) {\n                pq.poll();\n                pq.offer(new int[]{dist, i});\n            }\n        }\n        int[][] ans = new int[k][2];\n        for (int i = 0; i < k; ++i) {\n            ans[i] = points[pq.poll()[1]];\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        q = [(-x ** 2 - y ** 2, i) for i, (x, y) in enumerate(points[:k])]\n        heapq.heapify(q)\n        \n        n = len(points)\n        for i in range(k, n):\n            x, y = points[i]\n            dist = -x ** 2 - y ** 2\n            heapq.heappushpop(q, (dist, i))\n        \n        ans = [points[identity] for (_, identity) in q]\n        return ans\n```\n\n```Golang [sol2-Golang]\ntype pair struct {\n    dist  int\n    point []int\n}\ntype hp []pair\n\nfunc (h hp) Len() int            { return len(h) }\nfunc (h hp) Less(i, j int) bool  { return h[i].dist > h[j].dist }\nfunc (h hp) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(v interface{}) { *h = append(*h, v.(pair)) }\nfunc (h *hp) Pop() interface{}   { a := *h; v := a[len(a)-1]; *h = a[:len(a)-1]; return v }\n\nfunc kClosest(points [][]int, k int) (ans [][]int) {\n    h := make(hp, k)\n    for i, p := range points[:k] {\n        h[i] = pair{p[0]*p[0] + p[1]*p[1], p}\n    }\n    heap.Init(&h) // O(k) 初始化堆\n    for _, p := range points[k:] {\n        if dist := p[0]*p[0] + p[1]*p[1]; dist < h[0].dist {\n            h[0] = pair{dist, p}\n            heap.Fix(&h, 0) // 效率比 pop 后 push 要快\n        }\n    }\n    for _, p := range h {\n        ans = append(ans, p.point)\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log k)$，其中 $n$ 是数组 $\\textit{points}$ 的长度。由于大根堆维护的是前 $k$ 个距离最小的点，因此弹出和插入操作的单次时间复杂度均为 $O(\\log k)$。在最坏情况下，数组里 $n$ 个点都会插入，因此时间复杂度为 $O(n\\log k)$。\n\n- 空间复杂度：$O(k)$，因为大根堆中最多有 $k$ 个点。\n\n#### 方法三：快速选择（快速排序的思想）\n\n**思路和算法**\n\n我们也可以借鉴快速排序的思想。\n\n快速排序中的划分操作每次执行完后，都能将数组分成两个部分，其中小于等于分界值 $\\textit{pivot}$ 的元素都会被放到左侧部分，而大于 $\\textit{pivot}$ 的元素都都会被放到右侧部分。与快速排序不同的是，在本题中我们可以根据 $k$ 与 $\\textit{pivot}$ 下标的位置关系，只处理划分结果的某一部分（而不是像快速排序一样需要处理两个部分）。\n\n我们定义函数 `random_select(left, right, k)` 表示划分数组 $\\textit{points}$ 的 $[\\textit{left},\\textit{right}]$ 区间，并且需要找到其中第 $k$ 个距离最小的点。在一次划分操作完成后，设 $\\textit{pivot}$ 的下标为 $i$，即区间 $[\\textit{left}, i-1]$ 中的点的距离都小于等于 $\\textit{pivot}$，而区间 $[i+1,\\textit{right}]$ 的点的距离都大于 $\\textit{pivot}$。此时会有三种情况：\n\n- 如果 $k = i-\\textit{left}+1$，那么说明 $\\textit{pivot}$ 就是第 $k$ 个距离最小的点，我们可以结束整个过程；\n\n- 如果 $k < i-\\textit{left}+1$，那么说明第 $k$ 个距离最小的点在 $\\textit{pivot}$ 左侧，因此递归调用 `random_select(left, i - 1, k)`；\n\n- 如果 $k > i-\\textit{left}+1$，那么说明第 $k$ 个距离最小的点在 $\\textit{pivot}$ 右侧，因此递归调用 `random_select(i + 1, right, k - (i - left + 1))`。\n\n在整个过程结束之后，第 $k$ 个距离最小的点恰好就在数组 $\\textit{points}$ 中的第 $k$ 个位置，并且其左侧的所有点的距离都小于它。此时，我们就找到了前 $k$ 个距离最小的点。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\nprivate:\n    mt19937 gen{random_device{}()};\n\npublic:\n    void random_select(vector<vector<int>>& points, int left, int right, int k) {\n        int pivot_id = uniform_int_distribution<int>{left, right}(gen);\n        int pivot = points[pivot_id][0] * points[pivot_id][0] + points[pivot_id][1] * points[pivot_id][1];\n        swap(points[right], points[pivot_id]);\n        int i = left - 1;\n        for (int j = left; j < right; ++j) {\n            int dist = points[j][0] * points[j][0] + points[j][1] * points[j][1];\n            if (dist <= pivot) {\n                ++i;\n                swap(points[i], points[j]);\n            }\n        }\n        ++i;\n        swap(points[i], points[right]);\n        // [left, i-1] 都小于等于 pivot, [i+1, right] 都大于 pivot\n        if (k < i - left + 1) {\n            random_select(points, left, i - 1, k);\n        }\n        else if (k > i - left + 1) {\n            random_select(points, i + 1, right, k - (i - left + 1));\n        }\n    }\n\n    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {\n        int n = points.size();\n        random_select(points, 0, n - 1, k);\n        return {points.begin(), points.begin() + k};\n    }\n};\n```\n\n```C++ [sol3-C++api]\nclass Solution {\npublic:\n    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {\n        nth_element(points.begin(), points.begin() + k - 1, points.end(), [](const vector<int>& u, const vector<int>& v) {\n            return u[0] * u[0] + u[1] * u[1] < v[0] * v[0] + v[1] * v[1];\n        });\n        return {points.begin(), points.begin() + k};\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    Random rand = new Random();\n\n    public int[][] kClosest(int[][] points, int k) {\n        int n = points.length;\n        random_select(points, 0, n - 1, k);\n        return Arrays.copyOfRange(points, 0, k);\n    }\n\n    public void random_select(int[][] points, int left, int right, int k) {\n        int pivotId = left + rand.nextInt(right - left + 1);\n        int pivot = points[pivotId][0] * points[pivotId][0] + points[pivotId][1] * points[pivotId][1];\n        swap(points, right, pivotId);\n        int i = left - 1;\n        for (int j = left; j < right; ++j) {\n            int dist = points[j][0] * points[j][0] + points[j][1] * points[j][1];\n            if (dist <= pivot) {\n                ++i;\n                swap(points, i, j);\n            }\n        }\n        ++i;\n        swap(points, i, right);\n        // [left, i-1] 都小于等于 pivot, [i+1, right] 都大于 pivot\n        if (k < i - left + 1) {\n            random_select(points, left, i - 1, k);\n        } else if (k > i - left + 1) {\n            random_select(points, i + 1, right, k - (i - left + 1));\n        }\n    }\n\n    public void swap(int[][] points, int index1, int index2) {\n        int[] temp = points[index1];\n        points[index1] = points[index2];\n        points[index2] = temp;\n    }\n}\n```\n\n```Python [sol3-Python]\nclass Solution:\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        def random_select(left: int, right: int, k: int):\n            pivot_id = random.randint(left, right)\n            pivot = points[pivot_id][0] ** 2 + points[pivot_id][1] ** 2\n            points[right], points[pivot_id] = points[pivot_id], points[right]\n            i = left - 1\n            for j in range(left, right):\n                if points[j][0] ** 2 + points[j][1] ** 2 <= pivot:\n                    i += 1\n                    points[i], points[j] = points[j], points[i]\n            i += 1\n            points[i], points[right] = points[right], points[i]\n            # [left, i-1] 都小于等于 pivot, [i+1, right] 都大于 pivot\n            if k < i - left + 1:\n                random_select(left, i - 1, k)\n            elif k > i - left + 1:\n                random_select(i + 1, right, k - (i - left + 1))\n\n        n = len(points)\n        random_select(0, n - 1, k)\n        return points[:k]\n```\n\n```Golang [sol3-Golang]\nfunc less(p, q []int) bool {\n    return p[0]*p[0]+p[1]*p[1] < q[0]*q[0]+q[1]*q[1]\n}\n\nfunc kClosest(points [][]int, k int) (ans [][]int) {\n    rand.Shuffle(len(points), func(i, j int) {\n        points[i], points[j] = points[j], points[i]\n    })\n\n    var quickSelect func(left, right int)\n    quickSelect = func(left, right int) {\n        if left == right {\n            return\n        }\n        pivot := points[right] // 取当前区间 [left,right] 最右侧元素作为切分参照\n        lessCount := left\n        for i := left; i < right; i++ {\n            if less(points[i], pivot) {\n                points[i], points[lessCount] = points[lessCount], points[i]\n                lessCount++\n            }\n        }\n        // 循环结束后，有 lessCount 个元素比 pivot 小\n        // 把 pivot 交换到 points[lessCount] 的位置\n        // 交换之后，points[lessCount] 左侧的元素均小于 pivot，points[lessCount] 右侧的元素均不小于 pivot\n        points[right], points[lessCount] = points[lessCount], points[right]\n        if lessCount+1 == k {\n            return\n        } else if lessCount+1 < k {\n            quickSelect(lessCount+1, right)\n        } else {\n            quickSelect(left, lessCount-1)\n        }\n    }\n    quickSelect(0, len(points)-1)\n    return points[:k]\n}\n```\n\n```C [sol3-C]\nvoid swap(int** a, int** b) {\n    int* t = *a;\n    *a = *b, *b = t;\n}\n\nvoid random_select(int** points, int left, int right, int k) {\n    int pivot_id = rand() % (right - left + 1) + left;\n    int pivot = points[pivot_id][0] * points[pivot_id][0] + points[pivot_id][1] * points[pivot_id][1];\n    swap(points[right], points[pivot_id]);\n    int i = left - 1;\n    for (int j = left; j < right; ++j) {\n        int dist = points[j][0] * points[j][0] + points[j][1] * points[j][1];\n        if (dist <= pivot) {\n            ++i;\n            swap(&points[i], &points[j]);\n        }\n    }\n    ++i;\n    swap(&points[i], &points[right]);\n    // [left, i-1] 都小于等于 pivot, [i+1, right] 都大于 pivot\n    if (k < i - left + 1) {\n        random_select(points, left, i - 1, k);\n    } else if (k > i - left + 1) {\n        random_select(points, i + 1, right, k - (i - left + 1));\n    }\n}\n\nint** kClosest(int** points, int pointsSize, int* pointsColSize, int k, int* returnSize, int** returnColumnSizes) {\n    srand(time(0));\n    random_select(points, 0, pointsSize - 1, k);\n    *returnSize = k;\n    *returnColumnSizes = malloc(sizeof(int) * k);\n    int** ret = malloc(sizeof(int*) * k);\n    for (int i = 0; i < k; i++) {\n        (*returnColumnSizes)[i] = 2;\n        ret[i] = malloc(sizeof(int) * 2);\n        ret[i][0] = points[i][0], ret[i][1] = points[i][1];\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：期望为 $O(n)$，其中 $n$ 是数组 $\\textit{points}$ 的长度。由于证明过程很繁琐，所以不在这里展开讲。具体证明可以参考《算法导论》第 9 章第 2 小节。\n\n    最坏情况下，时间复杂度为 $O(n^2)$。具体地，每次的划分点都是最大值或最小值，一共需要划分 $n-1$ 次，而一次划分需要线性的时间复杂度，所以最坏情况下时间复杂度为 $O(n^2)$。\n\n- 空间复杂度：期望为 $O(\\log n)$，即为递归调用的期望深度。\n\n    最坏情况下，空间复杂度为 $O(n)$，此时需要划分 $n-1$ 次，对应递归的深度为 $n-1$ 层，所以最坏情况下时间复杂度为 $O(n)$。\n    \n    然而注意到代码中的递归都是「尾递归」，因此如果编译器支持尾递归优化，那么空间复杂度总为 $O(1)$。即使不支持尾递归优化，我们也可以很方便地将上面的代码改成循环迭代的写法。"
}