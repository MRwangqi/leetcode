{
	"titleSlug": "YaVDxD",
	"slug": "jia-jian-de-mu-biao-zhi-by-leetcode-solu-be5t",
	"url": "https://leetcode-cn.com/problems/YaVDxD/solution/jia-jian-de-mu-biao-zhi-by-leetcode-solu-be5t/",
	"content": "#### 方法一：回溯\n\n数组 $\\textit{nums}$ 的每个元素都可以添加符号 $\\texttt{+}$ 或 $\\texttt{-}$，因此每个元素有 $2$ 种添加符号的方法，$n$ 个数共有 $2^n$ 种添加符号的方法，对应 $2^n$ 种不同的表达式。当 $n$ 个元素都添加符号之后，即得到一种表达式，如果表达式的结果等于目标数 $\\textit{target}$，则该表达式即为符合要求的表达式。\n\n可以使用回溯的方法遍历所有的表达式，回溯过程中维护一个计数器 $\\textit{count}$，当遇到一种表达式的结果等于目标数 $\\textit{target}$ 时，将 $\\textit{count}$ 的值加 $1$。遍历完所有的表达式之后，即可得到结果等于目标数 $\\textit{target}$ 的表达式的数目。\n\n```Java [sol1-Java]\nclass Solution {\n    int count = 0;\n\n    public int findTargetSumWays(int[] nums, int target) {\n        backtrack(nums, target, 0, 0);\n        return count;\n    }\n\n    public void backtrack(int[] nums, int target, int index, int sum) {\n        if (index == nums.length) {\n            if (sum == target) {\n                count++;\n            }\n        } else {\n            backtrack(nums, target, index + 1, sum + nums[index]);\n            backtrack(nums, target, index + 1, sum - nums[index]);\n        }\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    int count = 0;\n\n    public int FindTargetSumWays(int[] nums, int target) {\n        Backtrack(nums, target, 0, 0);\n        return count;\n    }\n\n    public void Backtrack(int[] nums, int target, int index, int sum) {\n        if (index == nums.Length) {\n            if (sum == target) {\n                count++;\n            }\n        } else {\n            Backtrack(nums, target, index + 1, sum + nums[index]);\n            Backtrack(nums, target, index + 1, sum - nums[index]);\n        }\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findTargetSumWays = function(nums, target) {\n    let count = 0;\n    const backtrack = (nums, target, index, sum) => {\n        if (index === nums.length) {\n            if (sum === target) {\n                count++;\n            }\n        } else {\n            backtrack(nums, target, index + 1, sum + nums[index]);\n            backtrack(nums, target, index + 1, sum - nums[index]);\n        }\n    }\n    \n    backtrack(nums, target, 0, 0);\n    return count;\n};\n```\n\n```go [sol1-Golang]\nfunc findTargetSumWays(nums []int, target int) (count int) {\n    var backtrack func(int, int)\n    backtrack = func(index, sum int) {\n        if index == len(nums) {\n            if sum == target {\n                count++\n            }\n            return\n        }\n        backtrack(index+1, sum+nums[index])\n        backtrack(index+1, sum-nums[index])\n    }\n    backtrack(0, 0)\n    return\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int count = 0;\n\n    int findTargetSumWays(vector<int>& nums, int target) {\n        backtrack(nums, target, 0, 0);\n        return count;\n    }\n\n    void backtrack(vector<int>& nums, int target, int index, int sum) {\n        if (index == nums.size()) {\n            if (sum == target) {\n                count++;\n            }\n        } else {\n            backtrack(nums, target, index + 1, sum + nums[index]);\n            backtrack(nums, target, index + 1, sum - nums[index]);\n        }\n    }\n};\n```\n\n```C [sol1-C]\nint count;\n\nint findTargetSumWays(int* nums, int numsSize, int target) {\n    count = 0;\n    backtrack(nums, numsSize, target, 0, 0);\n    return count;\n}\n\nvoid backtrack(int* nums, int numSize, int target, int index, int sum) {\n    if (index == numSize) {\n        if (sum == target) {\n            count++;\n        }\n    } else {\n        backtrack(nums, numSize, target, index + 1, sum + nums[index]);\n        backtrack(nums, numSize, target, index + 1, sum - nums[index]);\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(2^n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。回溯需要遍历所有不同的表达式，共有 $2^n$ 种不同的表达式，每种表达式计算结果需要 $O(1)$ 的时间，因此总时间复杂度是 $O(2^n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。空间复杂度主要取决于递归调用的栈空间，栈的深度不超过 $n$。\n\n#### 方法二：动态规划\n\n记数组的元素和为 $\\textit{sum}$，添加 $\\texttt{-}$ 号的元素之和为 $\\textit{neg}$，则其余添加 $\\texttt{+}$ 的元素之和为 $\\textit{sum}-\\textit{neg}$，得到的表达式的结果为 \n\n$$\n(\\textit{sum}-\\textit{neg})-\\textit{neg}=\\textit{sum}-2\\cdot\\textit{neg}=\\textit{target}\n$$\n\n即 \n\n$$\n\\textit{neg}=\\dfrac{\\textit{sum}-\\textit{target}}{2}\n$$\n\n由于数组 $\\textit{nums}$ 中的元素都是非负整数，$\\textit{neg}$ 也必须是非负整数，所以上式成立的前提是 $\\textit{sum}-\\textit{target}$ 是**非负偶数**。若不符合该条件可直接返回 $0$。\n\n若上式成立，问题转化成在数组 $\\textit{nums}$ 中选取若干元素，使得这些元素之和等于 $\\textit{neg}$，计算选取元素的方案数。我们可以使用动态规划的方法求解。\n\n定义二维数组 $\\textit{dp}$，其中 $\\textit{dp}[i][j]$ 表示在数组 $\\textit{nums}$ 的前 $i$ 个数中选取元素，使得这些元素之和等于 $j$ 的方案数。假设数组 $\\textit{nums}$ 的长度为 $n$，则最终答案为 $\\textit{dp}[n][\\textit{neg}]$。\n\n当没有任何元素可以选取时，元素和只能是 $0$，对应的方案数是 $1$，因此动态规划的边界条件是：\n\n$$\n\\textit{dp}[0][j]=\\begin{cases}\n1, & j=0 \\\\\n0, & j \\ge 1\n\\end{cases}\n$$\n\n当 $1 \\le i \\le n$ 时，对于数组 $\\textit{nums}$ 中的第 $i$ 个元素 $\\textit{num}$（$i$ 的计数从 $1$ 开始），遍历 $0 \\le j \\le \\textit{neg}$，计算 $\\textit{dp}[i][j]$ 的值：\n\n- 如果 $j < \\textit{num}$，则不能选 $\\textit{num}$，此时有 $\\textit{dp}[i][j] = \\textit{dp}[i - 1][j]$；\n\n- 如果 $j \\ge \\textit{num}$，则如果不选 $\\textit{num}$，方案数是 $\\textit{dp}[i - 1][j]$，如果选 $\\textit{num}$，方案数是 $\\textit{dp}[i - 1][j - \\textit{num}]$，此时有 $\\textit{dp}[i][j] = \\textit{dp}[i - 1][j] + \\textit{dp}[i - 1][j - \\textit{num}]$。\n\n因此状态转移方程如下：\n\n$$\n\\textit{dp}[i][j]=\\begin{cases}\n\\textit{dp}[i - 1][j], & j<\\textit{nums}[i] \\\\\n\\textit{dp}[i - 1][j] + \\textit{dp}[i - 1][j - \\textit{nums}[i]], & j \\ge \\textit{nums}[i]\n\\end{cases}\n$$\n\n最终得到 $\\textit{dp}[n][\\textit{neg}]$ 的值即为答案。\n\n由此可以得到空间复杂度为 $O(n \\times \\textit{neg})$ 的实现。\n\n```Java [sol2-Java]\nclass Solution {\n    public int findTargetSumWays(int[] nums, int target) {\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        int diff = sum - target;\n        if (diff < 0 || diff % 2 != 0) {\n            return 0;\n        }\n        int n = nums.length, neg = diff / 2;\n        int[][] dp = new int[n + 1][neg + 1];\n        dp[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            int num = nums[i - 1];\n            for (int j = 0; j <= neg; j++) {\n                dp[i][j] = dp[i - 1][j];\n                if (j >= num) {\n                    dp[i][j] += dp[i - 1][j - num];\n                }\n            }\n        }\n        return dp[n][neg];\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int FindTargetSumWays(int[] nums, int target) {\n        int sum = 0;\n        foreach (int num in nums) {\n            sum += num;\n        }\n        int diff = sum - target;\n        if (diff < 0 || diff % 2 != 0) {\n            return 0;\n        }\n        int n = nums.Length, neg = diff / 2;\n        int[,] dp = new int[n + 1, neg + 1];\n        dp[0, 0] = 1;\n        for (int i = 1; i <= n; i++) {\n            int num = nums[i - 1];\n            for (int j = 0; j <= neg; j++) {\n                dp[i, j] = dp[i - 1, j];\n                if (j >= num) {\n                    dp[i, j] += dp[i - 1, j - num];\n                }\n            }\n        }\n        return dp[n, neg];\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findTargetSumWays = function(nums, target) {\n    let sum = 0;\n    for (const num of nums) {\n        sum += num;\n    }\n    const diff = sum - target;\n    if (diff < 0 || diff % 2 !== 0) {\n        return 0;\n    }\n    const n = nums.length, neg = diff / 2;\n    const dp = new Array(n + 1).fill(0).map(() => new Array(neg + 1).fill(0));\n    dp[0][0] = 1;\n    for (let i = 1; i <= n; i++) {\n        const num = nums[i - 1];\n        for (let j = 0; j <= neg; j++) {\n            dp[i][j] = dp[i - 1][j];\n            if (j >= num) {\n                dp[i][j] += dp[i - 1][j - num];\n            }\n        }\n    }\n    return dp[n][neg];\n};\n```\n\n```go [sol2-Golang]\nfunc findTargetSumWays(nums []int, target int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    diff := sum - target\n    if diff < 0 || diff%2 == 1 {\n        return 0\n    }\n    n, neg := len(nums), diff/2\n    dp := make([][]int, n+1)\n    for i := range dp {\n        dp[i] = make([]int, neg+1)\n    }\n    dp[0][0] = 1\n    for i, num := range nums {\n        for j := 0; j <= neg; j++ {\n            dp[i+1][j] = dp[i][j]\n            if j >= num {\n                dp[i+1][j] += dp[i][j-num]\n            }\n        }\n    }\n    return dp[n][neg]\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        int sum = 0;\n        for (int& num : nums) {\n            sum += num;\n        }\n        int diff = sum - target;\n        if (diff < 0 || diff % 2 != 0) {\n            return 0;\n        }\n        int n = nums.size(), neg = diff / 2;\n        vector<vector<int>> dp(n + 1, vector<int>(neg + 1));\n        dp[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            int num = nums[i - 1];\n            for (int j = 0; j <= neg; j++) {\n                dp[i][j] = dp[i - 1][j];\n                if (j >= num) {\n                    dp[i][j] += dp[i - 1][j - num];\n                }\n            }\n        }\n        return dp[n][neg];\n    }\n};\n```\n\n```C [sol2-C]\nint findTargetSumWays(int* nums, int numsSize, int target) {\n    int sum = 0;\n    for (int i = 0; i < numsSize; i++) {\n        sum += nums[i];\n    }\n    int diff = sum - target;\n    if (diff < 0 || diff % 2 != 0) {\n        return 0;\n    }\n    int n = numsSize, neg = diff / 2;\n    int dp[n + 1][neg + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 1;\n    for (int i = 1; i <= n; i++) {\n        int num = nums[i - 1];\n        for (int j = 0; j <= neg; j++) {\n            dp[i][j] = dp[i - 1][j];\n            if (j >= num) {\n                dp[i][j] += dp[i - 1][j - num];\n            }\n        }\n    }\n    return dp[n][neg];\n}\n```\n\n由于 $\\textit{dp}$ 的每一行的计算只和上一行有关，因此可以使用滚动数组的方式，去掉 $\\textit{dp}$ 的第一个维度，将空间复杂度优化到 $O(\\textit{neg})$。\n\n实现时，内层循环需采用倒序遍历的方式，这种方式保证转移来的是 $\\textit{dp}[i-1][]$ 中的元素值。\n\n```Java [sol3-Java]\nclass Solution {\n    public int findTargetSumWays(int[] nums, int target) {\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        int diff = sum - target;\n        if (diff < 0 || diff % 2 != 0) {\n            return 0;\n        }\n        int neg = diff / 2;\n        int[] dp = new int[neg + 1];\n        dp[0] = 1;\n        for (int num : nums) {\n            for (int j = neg; j >= num; j--) {\n                dp[j] += dp[j - num];\n            }\n        }\n        return dp[neg];\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public int FindTargetSumWays(int[] nums, int target) {\n        int sum = 0;\n        foreach (int num in nums) {\n            sum += num;\n        }\n        int diff = sum - target;\n        if (diff < 0 || diff % 2 != 0) {\n            return 0;\n        }\n        int neg = diff / 2;\n        int[] dp = new int[neg + 1];\n        dp[0] = 1;\n        foreach (int num in nums) {\n            for (int j = neg; j >= num; j--) {\n                dp[j] += dp[j - num];\n            }\n        }\n        return dp[neg];\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar findTargetSumWays = function(nums, target) {\n    let sum = 0;\n    for (const num of nums) {\n        sum += num;\n    }\n    const diff = sum - target;\n    if (diff < 0 || diff % 2 !== 0) {\n        return 0;\n    }\n    const neg = Math.floor(diff / 2);\n    const dp = new Array(neg + 1).fill(0);\n    dp[0] = 1;\n    for (const num of nums) {\n        for (let j = neg; j >= num; j--) {\n            dp[j] += dp[j - num];\n        }\n    }\n    return dp[neg];\n};\n```\n\n```go [sol3-Golang]\nfunc findTargetSumWays(nums []int, target int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    diff := sum - target\n    if diff < 0 || diff%2 == 1 {\n        return 0\n    }\n    neg := diff / 2\n    dp := make([]int, neg+1)\n    dp[0] = 1\n    for _, num := range nums {\n        for j := neg; j >= num; j-- {\n            dp[j] += dp[j-num]\n        }\n    }\n    return dp[neg]\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        int sum = 0;\n        for (int& num : nums) {\n            sum += num;\n        }\n        int diff = sum - target;\n        if (diff < 0 || diff % 2 != 0) {\n            return 0;\n        }\n        int neg = diff / 2;\n        vector<int> dp(neg + 1);\n        dp[0] = 1;\n        for (int& num : nums) {\n            for (int j = neg; j >= num; j--) {\n                dp[j] += dp[j - num];\n            }\n        }\n        return dp[neg];\n    }\n};\n```\n\n```C [sol3-C]\nint findTargetSumWays(int* nums, int numsSize, int target) {\n    int sum = 0;\n    for (int i = 0; i < numsSize; i++) {\n        sum += nums[i];\n    }\n    int diff = sum - target;\n    if (diff < 0 || diff % 2 != 0) {\n        return 0;\n    }\n    int neg = diff / 2;\n    int dp[neg + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 1;\n    for (int i = 0; i < numsSize; i++) {\n        int num = nums[i];\n        for (int j = neg; j >= num; j--) {\n            dp[j] += dp[j - num];\n        }\n    }\n    return dp[neg];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times (\\textit{sum}-\\textit{target}))$，其中 $n$ 是数组 $\\textit{nums}$ 的长度，$\\textit{sum}$ 是数组 $\\textit{nums}$ 的元素和，$\\textit{target}$ 是目标数。动态规划有 $(n+1) \\times (\\dfrac{\\textit{sum}-\\textit{target}}{2}+1)$ 个状态，需要计算每个状态的值。\n\n- 空间复杂度：$O(\\textit{sum}-\\textit{target})$，其中 $\\textit{sum}$ 是数组 $\\textit{nums}$ 的元素和，$\\textit{target}$ 是目标数。使用空间优化的实现，需要创建长度为 $\\dfrac{\\textit{sum}-\\textit{target}}{2}+1$ 的数组 $\\textit{dp}$。"
}