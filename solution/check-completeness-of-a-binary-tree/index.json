{
	"titleSlug": "check-completeness-of-a-binary-tree",
	"slug": "er-cha-shu-de-wan-quan-xing-jian-yan-by-leetcode",
	"url": "https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree/solution/er-cha-shu-de-wan-quan-xing-jian-yan-by-leetcode/",
	"content": "#### 方法 1：广度优先搜索\n\n**想法**\n\n这个问题可以简化成两个小问题：用 `(depth, position)` 元组表示每个节点的”位置“；确定如何定义所有节点都是在最左边的。\n\n假如我们在深度为 3 的行有 4 个节点，位置为 0，1，2，3；那么就有 8 个深度为 4 的新节点位置在 0，1，2，3，4，5，6，7；所以我们可以找到规律：对于一个节点，它的左孩子为：`(depth, position) -> (depth + 1, position * 2)`，右孩子为 `(depth, position) -> (depth + 1, position * 2 + 1)`。所以，对于深度为 d 的行恰好含有 $2^{d-1}$ 个节点，所有节点都是靠左边排列的当他们的位置编号是 `0, 1, ...` 且没有间隙。\n\n一个更简单的表示深度和位置的方法是：用 `1` 表示根节点，对于任意一个节点 `v`，它的左孩子为 `2*v` 右孩子为 `2*v + 1`。这就是我们用的规则，在这个规则下，一颗二叉树是完全二叉树当且仅当节点编号依次为 `1, 2, 3, ...` 且没有间隙。\n\n**算法**\n\n对于根节点，我们定义其编号为 `1`。然后，对于每个节点 `v`，我们将其左节点编号为 `2 * v`，将其右节点编号为 `2 * v + 1`。\n\n我们可以发现，树中所有节点的编号按照广度优先搜索顺序正好是升序。（也可以使用深度优先搜索，之后对序列排序）。\n\n然后，我们检测编号序列是否为无间隔的 `1, 2, 3, …`，事实上，我们只需要检查最后一个编号是否正确，因为最后一个编号的值最大。\n\n```Java []\nclass Solution {\n    public boolean isCompleteTree(TreeNode root) {\n        List<ANode> nodes = new ArrayList();\n        nodes.add(new ANode(root, 1));\n        int i = 0;\n        while (i < nodes.size()) {\n            ANode anode = nodes.get(i++);\n            if (anode.node != null) {\n                nodes.add(new ANode(anode.node.left, anode.code * 2));\n                nodes.add(new ANode(anode.node.right, anode.code * 2 + 1));\n            }\n        }\n\n        return nodes.get(i-1).code == nodes.size();\n    }\n}\n\nclass ANode {  // Annotated Node\n    TreeNode node;\n    int code;\n    ANode(TreeNode node, int code) {\n        this.node = node;\n        this.code = code;\n    }\n}\n```\n\n```Python []\nclass Solution(object):\n    def isCompleteTree(self, root):\n        nodes = [(root, 1)]\n        i = 0\n        while i < len(nodes):\n            node, v = nodes[i]\n            i += 1\n            if node:\n                nodes.append((node.left, 2*v))\n                nodes.append((node.right, 2*v+1))\n\n        return  nodes[-1][1] == len(nodes)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是树节点个数。\n* 空间复杂度：$O(N)$。"
}