{
	"titleSlug": "time-based-key-value-store",
	"slug": "ji-yu-shi-jian-de-jian-zhi-cun-chu-by-le-t98o",
	"url": "https://leetcode-cn.com/problems/time-based-key-value-store/solution/ji-yu-shi-jian-de-jian-zhi-cun-chu-by-le-t98o/",
	"content": "#### 方法一：哈希表 + 二分查找\n\n为实现 $\\texttt{get}$ 操作，我们需要用一个哈希表存储 $\\texttt{set}$ 操作传入的数据。具体地，哈希表的键为字符串 $\\textit{key}$，值为一个二元组列表，二元组中存储的是时间戳 $\\textit{timestamp}$ 和值 $\\textit{value}$。\n\n由于 $\\texttt{set}$ 操作中的时间戳都是严格递增的，因此二元组列表中保存的时间戳也是严格递增的，这样我们可以根据 $\\texttt{get}$ 操作中的 $\\textit{key}$ 在哈希表中找到对应的二元组列表 $\\textit{pairs}$，然后根据 $\\textit{timestamp}$ 在 $\\textit{pairs}$ 中二分查找。我们需要找到最大的不超过 $\\textit{timestamp}$ 的时间戳，对此，我们可以二分找到第一个超过 $\\textit{timestamp}$ 的二元组下标 $i$，若 $i>0$ 则说明目标二元组存在，即 $\\textit{pairs}[i-1]$，否则二元组不存在，返回空字符串。\n\n```C++ [sol1-C++]\nclass TimeMap {\n    unordered_map<string, vector<pair<int, string>>> m;\n\npublic:\n    TimeMap() {}\n\n    void set(string key, string value, int timestamp) {\n        m[key].emplace_back(timestamp, value);\n    }\n\n    string get(string key, int timestamp) {\n        auto &pairs = m[key];\n        // 使用一个大于所有 value 的字符串，以确保在 pairs 中含有 timestamp 的情况下也返回大于 timestamp 的位置\n        pair<int, string> p = {timestamp, string({127})};\n        auto i = upper_bound(pairs.begin(), pairs.end(), p);\n        if (i != pairs.begin()) {\n            return (i - 1)->second;\n        }\n        return \"\";\n    }\n};\n```\n\n```Java [sol1-Java]\nclass TimeMap {\n    class Pair implements Comparable<Pair> {\n        int timestamp;\n        String value;\n\n        public Pair(int timestamp, String value) {\n            this.timestamp = timestamp;\n            this.value = value;\n        }\n\n        public int hashCode() {\n            return timestamp + value.hashCode();\n        }\n\n        public boolean equals(Object obj) {\n            if (obj instanceof Pair) {\n                Pair pair2 = (Pair) obj;\n                return this.timestamp == pair2.timestamp && this.value.equals(pair2.value);\n            }\n            return false;\n        }\n\n        public int compareTo(Pair pair2) {\n            if (this.timestamp != pair2.timestamp) {\n                return this.timestamp - pair2.timestamp;\n            } else {\n                return this.value.compareTo(pair2.value);\n            }\n        }\n    }\n\n    Map<String, List<Pair>> map;\n\n    public TimeMap() {\n        map = new HashMap<String, List<Pair>>();\n    }\n    \n    public void set(String key, String value, int timestamp) {\n        List<Pair> pairs = map.getOrDefault(key, new ArrayList<Pair>());\n        pairs.add(new Pair(timestamp, value));\n        map.put(key, pairs);\n    }\n    \n    public String get(String key, int timestamp) {\n        List<Pair> pairs = map.getOrDefault(key, new ArrayList<Pair>());\n        // 使用一个大于所有 value 的字符串，以确保在 pairs 中含有 timestamp 的情况下也返回大于 timestamp 的位置\n        Pair pair = new Pair(timestamp, String.valueOf((char) 127));\n        int i = binarySearch(pairs, pair);\n        if (i > 0) {\n            return pairs.get(i - 1).value;\n        }\n        return \"\";\n    }\n\n    private int binarySearch(List<Pair> pairs, Pair target) {\n        int low = 0, high = pairs.size() - 1;\n        if (high < 0 || pairs.get(high).compareTo(target) <= 0) {\n            return high + 1;\n        }\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            Pair pair = pairs.get(mid);\n            if (pair.compareTo(target) <= 0) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class TimeMap {\n    Dictionary<string, IList<Tuple<int, string>>> dictionary;\n\n    public TimeMap() {\n        dictionary = new Dictionary<string, IList<Tuple<int, string>>>();\n    }\n    \n    public void Set(string key, string value, int timestamp) {\n        if (dictionary.ContainsKey(key)) {\n            dictionary[key].Add(new Tuple<int, string>(timestamp, value));\n        } else {\n            IList<Tuple<int, string>> tuples = new List<Tuple<int, string>>();\n            tuples.Add(new Tuple<int, string>(timestamp, value));\n            dictionary.Add(key, tuples);\n        }\n    }\n    \n    public string Get(string key, int timestamp) {\n        IList<Tuple<int, string>> tuples = dictionary.ContainsKey(key) ? dictionary[key] : new List<Tuple<int, string>>();\n        // 使用一个大于所有 value 的字符串，以确保在 pairs 中含有 timestamp 的情况下也返回大于 timestamp 的位置\n        Tuple<int, string> tuple = new Tuple<int, string>(timestamp, ((char) 127).ToString());\n        int i = BinarySearch(tuples, tuple);\n        if (i > 0) {\n            return tuples[i - 1].Item2;\n        }\n        return \"\";\n    }\n\n    private int BinarySearch(IList<Tuple<int, string>> tuples, Tuple<int, string> target) {\n        int low = 0, high = tuples.Count - 1;\n        if (high < 0 || Compare(tuples[high], target) <= 0) {\n            return high + 1;\n        }\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            Tuple<int, string> tuple = tuples[mid];\n            if (Compare(tuple, target) <= 0) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n\n    private int Compare(Tuple<int, string> tuple1, Tuple<int, string> tuple2) {\n        if (tuple1.Item1 != tuple2.Item1) {\n            return tuple1.Item1 - tuple2.Item1;\n        } else {\n            return string.CompareOrdinal(tuple1.Item2, tuple2.Item2);\n        }\n    }\n}\n```\n\n```go [sol1-Golang]\ntype pair struct {\n    timestamp int\n    value     string\n}\n\ntype TimeMap struct {\n    m map[string][]pair\n}\n\nfunc Constructor() TimeMap {\n    return TimeMap{map[string][]pair{}}\n}\n\nfunc (m *TimeMap) Set(key string, value string, timestamp int) {\n    m.m[key] = append(m.m[key], pair{timestamp, value})\n}\n\nfunc (m *TimeMap) Get(key string, timestamp int) string {\n    pairs := m.m[key]\n    i := sort.Search(len(pairs), func(i int) bool { return pairs[i].timestamp > timestamp })\n    if i > 0 {\n        return pairs[i-1].value\n    }\n    return \"\"\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar TimeMap = function() {\n    this.map = new Map();\n};\n\nTimeMap.prototype.set = function(key, value, timestamp) {\n    if (this.map.has(key)) {\n        this.map.get(key).push([value, timestamp]);\n    } else {\n        this.map.set(key, [[value, timestamp]]);\n    }\n};\n\nTimeMap.prototype.get = function(key, timestamp) {\n    let pairs = this.map.get(key)\n    if (pairs) {\n        let low = 0, high = pairs.length - 1;\n        while (low <= high) {\n            let mid = Math.floor((high - low) / 2) + low;\n            if (pairs[mid][1] > timestamp) {\n                high = mid - 1;\n            } else if (pairs[mid][1] < timestamp) {\n                low = mid + 1;\n            } else {\n                return pairs[mid][0];\n            }\n        }\n        if (high >= 0) {\n            return pairs[high][0];\n        }\n        return \"\";\n    }\n    return \"\";\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：\n  - 初始化 $\\texttt{TimeMap}$ 和 $\\texttt{set}$ 操作均为 $O(1)$；\n  - $\\texttt{get}$ 操作为 $O(\\log n)$，其中 $n$ 是 $\\texttt{set}$ 操作的次数。最坏情况下 $\\texttt{set}$ 操作插入的 $\\textit{key}$ 均相同，这种情况下 $\\texttt{get}$ 中二分查找的次数为 $O(\\log n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是 $\\texttt{set}$ 操作的次数。我们需要使用哈希表保存每一次$\\texttt{set}$ 操作的信息。"
}