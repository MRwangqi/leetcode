{
	"titleSlug": "er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof",
	"slug": "er-cha-sou-suo-shu-de-zui-jin-gong-gong-0wpw1",
	"url": "https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/solution/er-cha-sou-suo-shu-de-zui-jin-gong-gong-0wpw1/",
	"content": "#### 方法一：两次遍历\n\n**思路与算法**\n\n注意到题目中给出的是一棵「二叉搜索树」，因此我们可以快速地找出树中的某个节点以及从根节点到该节点的路径，例如我们需要找到节点 $p$：\n\n- 我们从根节点开始遍历；\n\n- 如果当前节点就是 $p$，那么成功地找到了节点；\n\n- 如果当前节点的值大于 $p$ 的值，说明 $p$ 应该在当前节点的左子树，因此将当前节点移动到它的左子节点；\n\n- 如果当前节点的值小于 $p$ 的值，说明 $p$ 应该在当前节点的右子树，因此将当前节点移动到它的右子节点。\n\n对于节点 $q$ 同理。在寻找节点的过程中，我们可以顺便记录经过的节点，这样就得到了从根节点到被寻找节点的路径。\n\n当我们分别得到了从根节点到 $p$ 和 $q$ 的路径之后，我们就可以很方便地找到它们的最近公共祖先了。显然，$p$ 和 $q$ 的最近公共祖先就是从根节点到它们路径上的「分岔点」，也就是最后一个相同的节点。因此，如果我们设从根节点到 $p$ 的路径为数组 $\\textit{path\\_p}$，从根节点到 $q$ 的路径为数组 $\\textit{path\\_q}$，那么只要找出最大的编号 $i$，其满足\n\n$$\n\\textit{path\\_p}[i] = \\textit{path\\_q}[i]\n$$\n\n那么对应的节点就是「分岔点」，即 $p$ 和 $q$ 的最近公共祖先就是 $\\textit{path\\_p}[i]$（或 $\\textit{path\\_q}[i]$）。\n\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<TreeNode*> getPath(TreeNode* root, TreeNode* target) {\n        vector<TreeNode*> path;\n        TreeNode* node = root;\n        while (node != target) {\n            path.push_back(node);\n            if (target->val < node->val) {\n                node = node->left;\n            }\n            else {\n                node = node->right;\n            }\n        }\n        path.push_back(node);\n        return path;\n    }\n\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        vector<TreeNode*> path_p = getPath(root, p);\n        vector<TreeNode*> path_q = getPath(root, q);\n        TreeNode* ancestor;\n        for (int i = 0; i < path_p.size() && i < path_q.size(); ++i) {\n            if (path_p[i] == path_q[i]) {\n                ancestor = path_p[i];\n            }\n            else {\n                break;\n            }\n        }\n        return ancestor;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        List<TreeNode> path_p = getPath(root, p);\n        List<TreeNode> path_q = getPath(root, q);\n        TreeNode ancestor = null;\n        for (int i = 0; i < path_p.size() && i < path_q.size(); ++i) {\n            if (path_p.get(i) == path_q.get(i)) {\n                ancestor = path_p.get(i);\n            } else {\n                break;\n            }\n        }\n        return ancestor;\n    }\n\n    public List<TreeNode> getPath(TreeNode root, TreeNode target) {\n        List<TreeNode> path = new ArrayList<TreeNode>();\n        TreeNode node = root;\n        while (node != target) {\n            path.add(node);\n            if (target.val < node.val) {\n                node = node.left;\n            } else {\n                node = node.right;\n            }\n        }\n        path.add(node);\n        return path;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n        def getPath(root: TreeNode, target: TreeNode) -> List[TreeNode]:\n            path = list()\n            node = root\n            while node != target:\n                path.append(node)\n                if target.val < node.val:\n                    node = node.left\n                else:\n                    node = node.right\n            path.append(node)\n            return path\n        \n        path_p = getPath(root, p)\n        path_q = getPath(root, q)\n        ancestor = None\n        for u, v in zip(path_p, path_q):\n            if u == v:\n                ancestor = u\n            else:\n                break\n        \n        return ancestor\n```\n\n```Golang [sol1-Golang]\nfunc getPath(root, target *TreeNode) (path []*TreeNode) {\n    node := root\n    for node != target {\n        path = append(path, node)\n        if target.Val < node.Val {\n            node = node.Left\n        } else {\n            node = node.Right\n        }\n    }\n    path = append(path, node)\n    return\n}\n\nfunc lowestCommonAncestor(root, p, q *TreeNode) (ancestor *TreeNode) {\n    pathP := getPath(root, p)\n    pathQ := getPath(root, q)\n    for i := 0; i < len(pathP) && i < len(pathQ) && pathP[i] == pathQ[i]; i++ {\n        ancestor = pathP[i]\n    }\n    return\n}\n```\n\n```C [sol1-C]\nstruct TreeNode** getPath(struct TreeNode* root, struct TreeNode* target, int* num) {\n    struct TreeNode** path = malloc(sizeof(struct TreeNode*) * 2001);\n    struct TreeNode* node = root;\n    while (node != target) {\n        path[(*num)++] = node;\n        if (target->val < node->val) {\n            node = node->left;\n        } else {\n            node = node->right;\n        }\n    }\n    path[(*num)++] = node;\n    return path;\n}\n\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    int num_p = 0, num_q = 0;\n    struct TreeNode** path_p = getPath(root, p, &num_p);\n    struct TreeNode** path_q = getPath(root, q, &num_q);\n    struct TreeNode* ancestor;\n    for (int i = 0; i < num_p && i < num_q; ++i) {\n        if (path_p[i] == path_q[i]) {\n            ancestor = path_p[i];\n        } else {\n            break;\n        }\n    }\n    return ancestor;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是给定的二叉搜索树中的节点个数。上述代码需要的时间与节点 $p$ 和 $q$ 在树中的深度线性相关，而在最坏的情况下，树呈现链式结构，$p$ 和 $q$ 一个是树的唯一叶子结点，一个是该叶子结点的父节点，此时时间复杂度为 $\\Theta(n)$。\n\n- 空间复杂度：$O(n)$，我们需要存储根节点到 $p$ 和 $q$ 的路径。和上面的分析方法相同，在最坏的情况下，路径的长度为 $\\Theta(n)$，因此需要 $\\Theta(n)$ 的空间。\n\n#### 方法二：一次遍历\n\n**思路与算法**\n\n在方法一中，我们对从根节点开始，通过遍历找出到达节点 $p$ 和 $q$ 的路径，一共需要两次遍历。我们也可以考虑将这两个节点放在一起遍历。\n\n整体的遍历过程与方法一中的类似：\n\n- 我们从根节点开始遍历；\n\n- 如果当前节点的值大于 $p$ 和 $q$ 的值，说明 $p$ 和 $q$ 应该在当前节点的左子树，因此将当前节点移动到它的左子节点；\n\n- 如果当前节点的值小于 $p$ 和 $q$ 的值，说明 $p$ 和 $q$ 应该在当前节点的右子树，因此将当前节点移动到它的右子节点；\n\n- 如果当前节点的值不满足上述两条要求，那么说明当前节点就是「分岔点」。此时，$p$ 和 $q$ 要么在当前节点的不同的子树中，要么其中一个就是当前节点。\n\n可以发现，如果我们将这两个节点放在一起遍历，我们就省去了存储路径需要的空间。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/jianzhi_68_I/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/jianzhi_68_I/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/jianzhi_68_I/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/jianzhi_68_I/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/jianzhi_68_I/5.png)>\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        TreeNode* ancestor = root;\n        while (true) {\n            if (p->val < ancestor->val && q->val < ancestor->val) {\n                ancestor = ancestor->left;\n            }\n            else if (p->val > ancestor->val && q->val > ancestor->val) {\n                ancestor = ancestor->right;\n            }\n            else {\n                break;\n            }\n        }\n        return ancestor;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        TreeNode ancestor = root;\n        while (true) {\n            if (p.val < ancestor.val && q.val < ancestor.val) {\n                ancestor = ancestor.left;\n            } else if (p.val > ancestor.val && q.val > ancestor.val) {\n                ancestor = ancestor.right;\n            } else {\n                break;\n            }\n        }\n        return ancestor;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n        ancestor = root\n        while True:\n            if p.val < ancestor.val and q.val < ancestor.val:\n                ancestor = ancestor.left\n            elif p.val > ancestor.val and q.val > ancestor.val:\n                ancestor = ancestor.right\n            else:\n                break\n        return ancestor\n```\n\n```Golang [sol2-Golang]\nfunc lowestCommonAncestor(root, p, q *TreeNode) (ancestor *TreeNode) {\n    ancestor = root\n    for {\n        if p.Val < ancestor.Val && q.Val < ancestor.Val {\n            ancestor = ancestor.Left\n        } else if p.Val > ancestor.Val && q.Val > ancestor.Val {\n            ancestor = ancestor.Right\n        } else {\n            return\n        }\n    }\n}\n```\n\n```C [sol2-C]\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    struct TreeNode* ancestor = root;\n    while (true) {\n        if (p->val < ancestor->val && q->val < ancestor->val) {\n            ancestor = ancestor->left;\n        } else if (p->val > ancestor->val && q->val > ancestor->val) {\n            ancestor = ancestor->right;\n        } else {\n            break;\n        }\n    }\n    return ancestor;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是给定的二叉搜索树中的节点个数。分析思路与方法一相同。\n\n- 空间复杂度：$O(1)$。"
}