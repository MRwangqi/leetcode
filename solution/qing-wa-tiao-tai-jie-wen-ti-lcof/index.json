{
	"titleSlug": "qing-wa-tiao-tai-jie-wen-ti-lcof",
	"slug": "mian-shi-ti-10-ii-qing-wa-tiao-tai-jie-wen-ti-dong",
	"url": "https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/solution/mian-shi-ti-10-ii-qing-wa-tiao-tai-jie-wen-ti-dong/",
	"content": "#### 解题思路：\r\n\r\n> 此类求 *多少种可能性* 的题目一般都有 **递推性质** ，即 $f(n)$ 和 $f(n-1)$…$f(1)$ 之间是有联系的。\r\n\r\n- 设跳上 $n$ 级台阶有 $f(n)$ 种跳法。在所有跳法中，青蛙的最后一步只有两种情况： **跳上 $1$ 级或 $2$ 级台阶**。\r\n  1. **当为 $1$ 级台阶：** 剩 $n-1$ 个台阶，此情况共有 $f(n-1)$ 种跳法；\r\n  2. **当为 $2$ 级台阶：** 剩 $n-2$ 个台阶，此情况共有 $f(n-2)$ 种跳法。\r\n- $f(n)$ 为以上两种情况之和，即 $f(n)=f(n-1)+f(n-2)$ ，以上递推性质为斐波那契数列。本题可转化为 **求斐波那契数列第 $n$ 项的值** ，与 [面试题10- I. 斐波那契数列](https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/mian-shi-ti-10-i-fei-bo-na-qi-shu-lie-dong-tai-gui/) 等价，唯一的不同在于起始数字不同。\r\n  - 青蛙跳台阶问题： $f(0)=1$ ,  $f(1)=1$ , $f(2)=2$ ；\r\n  - 斐波那契数列问题： $f(0)=0$ , $f(1)=1$ , $f(2)=1$ 。\r\n\r\n![Picture13.png](https://pic.leetcode-cn.com/108249e4d62d429f9cd6cab5bbd6afca581ee61c7d762a4c8ea0c62e08e10762-Picture13.png){:width=500}{:align=center}\r\n\r\n> 斐波那契数列的定义是 $f(n + 1) = f(n) + f(n - 1)$ ，生成第 $n$ 项的做法有以下几种：\r\n> 1. **递归法：**\r\n>    - **原理：** 把 $f(n)$ 问题的计算拆分成 $f(n-1)$ 和 $f(n-2)$ 两个子问题的计算，并递归，以 $f(0)$ 和 $f(1)$ 为终止条件。\r\n>    - **缺点：** 大量重复的递归计算，例如 $f(n)$ 和 $f(n - 1)$ 两者向下递归都需要计算 $f(n - 2)$ 的值。\r\n> 2. **记忆化递归法：**\r\n>    - **原理：** 在递归法的基础上，新建一个长度为 $n$ 的数组，用于在递归时存储 $f(0)$ 至 $f(n)$ 的数字值，重复遇到某数字时则直接从数组取用，避免了重复的递归计算。\r\n>    - **缺点：** 记忆化存储的数组需要使用 $O(N)$ 的额外空间。\r\n> 3. **动态规划：**\r\n>    - **原理：** 以斐波那契数列性质 $f(n + 1) = f(n) + f(n - 1)$ 为转移方程。\r\n>    - 从计算效率、空间复杂度上看，动态规划是本题的最佳解法。\r\n\r\n**动态规划解析：**\r\n\r\n- **状态定义：** 设 $dp$ 为一维数组，其中 $dp[i]$ 的值代表 `斐波那契数列第 $i$ 个数字` 。\r\n- **转移方程：** $dp[i + 1] = dp[i] + dp[i - 1]$ ，即对应数列定义 $f(n + 1) = f(n) + f(n - 1)$ ；\r\n- **初始状态：** $dp[0] = 1$, $dp[1] = 1$ ，即初始化前两个数字；\r\n- **返回值：** $dp[n]$ ，即斐波那契数列的第 $n$ 个数字。\r\n\r\n**空间复杂度优化：**\r\n\r\n> 若新建长度为 $n$ 的 $dp$ 列表，则空间复杂度为 $O(N)$ 。\r\n- 由于 $dp$ 列表第 $i$ 项只与第 $i-1$ 和第 $i-2$ 项有关，因此只需要初始化三个整形变量 `sum`, `a`, `b` ，利用辅助变量 $sum$ 使 $a, b$ 两数字交替前进即可 *（具体实现见代码）* 。\r\n- 因为节省了 $dp$ 列表空间，因此空间复杂度降至 $O(1)$ 。\r\n\r\n**循环求余法：**\r\n\r\n> **大数越界：** 随着 $n$ 增大, $f(n)$ 会超过 `Int32` 甚至 `Int64` 的取值范围，导致最终的返回值错误。 \r\n- **求余运算规则：** 设正整数 $x, y, p$ ，求余符号为 $\\odot$ ，则有 $(x + y) \\odot p = (x \\odot p + y \\odot p) \\odot p$ 。\r\n- **解析：** 根据以上规则，可推出 $f(n) \\odot p = [f(n-1) \\odot p + f(n-2) \\odot p] \\odot p$ ，从而可以在循环过程中每次计算 $sum = a + b \\odot 1000000007$ ，此操作与最终返回前取余等价。\r\n\r\n> 图解基于 Java 代码绘制，Python 由于语言特性可以省去 $sum$ 辅助变量和大数越界处理。\r\n\r\n<![Picture1.png](https://pic.leetcode-cn.com/5c501325b45664eefb2b0d5684021c51f779bdfc086a88db20c45cf1b253157c-Picture1.png),![Picture2.png](https://pic.leetcode-cn.com/6fd938c42d0c908e26f67f24356d0f43232bf0968095ab821424c22bf147d4de-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/e086288b303a4a35ceb70d4a7c261240b8ea9e7d723cd67fbabc5c83652f55a9-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/88a9d374dc761d71fca59d72a1a95ab5ed0d930132949c342f03a530691ac732-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/69dc8361de8e5972f7c6793c3ff85ff330e0f840343188d1dd86019cf0e4aeed-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/e7b90df55ee84cc2b56b0077bc0b4ca8a35b41c0aaaf741297b9ff8db50c7ab2-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/6f72c363f1266a873a5e699f9d88a6616a27c7b128181670127e5b1a6b7e3d7f-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/efef57c67d256bfca03cad7b1fea4a3e202a71066c739dd932ff7f5452f31e75-Picture8.png),![Picture9.png](https://pic.leetcode-cn.com/48b3839e229b7a1c04f26ddbe43fd9064e1b1b7cdce4ff67ceb4cfc7fcad2086-Picture9.png),![Picture10.png](https://pic.leetcode-cn.com/27814f78882c3624242e065455eb75275d636c2e7bc2cb9af3e1ac9e1105bc95-Picture10.png),![Picture11.png](https://pic.leetcode-cn.com/326d2503cf6a48c1c280979baf3ff485663987e387660731b943a2ad12ec5403-Picture11.png),![Picture12.png](https://pic.leetcode-cn.com/72d9e26de6ead19f8cb44c235c74c6aec44bfb7934e4abc566808916f9cc63c7-Picture12.png)>\r\n\r\n**复杂度分析：**\r\n\r\n- **时间复杂度 $O(N)$ ：** 计算 $f(n)$ 需循环 $n$ 次，每轮循环内计算操作使用 $O(1)$ 。\r\n- **空间复杂度 $O(1)$ ：** 几个标志变量使用常数大小的额外空间。\r\n\r\n#### 代码：\r\n\r\n> 由于 Python 中整形数字的大小限制 *取决计算机的内存* （可理解为无限大），因此可不考虑大数越界问题。\r\n\r\n```python []\r\nclass Solution:\r\n    def numWays(self, n: int) -> int:\r\n        a, b = 1, 1\r\n        for _ in range(n):\r\n            a, b = b, a + b\r\n        return a % 1000000007\r\n```\r\n\r\n```java []\r\nclass Solution {\r\n    public int numWays(int n) {\r\n        int a = 1, b = 1, sum;\r\n        for(int i = 0; i < n; i++){\r\n            sum = (a + b) % 1000000007;\r\n            a = b;\r\n            b = sum;\r\n        }\r\n        return a;\r\n    }\r\n}\r\n```"
}