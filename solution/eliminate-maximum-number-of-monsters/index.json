{
	"titleSlug": "eliminate-maximum-number-of-monsters",
	"slug": "xiao-mie-guai-wu-de-zui-da-shu-liang-by-0ou2p",
	"url": "https://leetcode-cn.com/problems/eliminate-maximum-number-of-monsters/solution/xiao-mie-guai-wu-de-zui-da-shu-liang-by-0ou2p/",
	"content": "#### 方法一：排序 + 贪心\n\n**提示 $1$**\n\n首先，我们需要在每一分钟的开始都消灭一只怪物。\n\n其次，对于每个怪物都存在到达城市前的**最晚**可被消灭时间，在该时刻或之前消灭该怪物就不会因为它导致输掉游戏。为了使得消灭怪物最多，我们需要优先消灭对应时间较早的怪物。\n\n**思路与算法**\n\n根据 **提示 $1$**，我们需要计算出每个怪物到达城市前的最晚可被消灭时间。\n\n我们用 $\\textit{time}$ 数组记录每个怪物的最晚可被消灭时间。对于第 $i$ 个怪物，最晚可被消灭时间满足 \n\n$$\n\\textit{time}[i] = \\left\\lfloor\\frac{\\textit{dist}[i] - 1}{\\textit{speed}[i]}\\right\\rfloor.\n$$\n\n根据 **提示 $1$**，我们应该将 $\\textit{time}$ 数组升序排序，排序后的数组即为最优的消灭顺序，同时数组元素的下标即为我们**计划**消灭该怪物的时间。\n\n我们遍历该数组的元素来模拟消灭怪物的过程，当遍历到下标 $i$ 时，如果 $\\textit{time}[i] < i$，这意味着我们计划消灭该怪物的时间晚于该怪物最晚可被消灭时间，亦即该怪物会导致我们输掉游戏，此时我们已经消灭的怪物数量为 $i$，我们返回它作为答案。而如果所有怪物均不会导致我们输掉游戏，这意味着我们可以消灭全部怪物，此时我们应返回 $n$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int eliminateMaximum(vector<int>& dist, vector<int>& speed) {\n        int n = dist.size();\n        vector<int> time;   // 每个怪物的最晚可被消灭时间\n        for (int i = 0; i < n; ++i){\n            time.push_back((dist[i] - 1) / speed[i]);\n        }\n        sort(time.begin(), time.end());\n        for (int i = 0; i < n; ++i){\n            if (time[i] < i){\n                // 无法消灭该怪物，返回消灭的怪物数量\n                return i;\n            }\n        }\n        // 成功消灭全部怪物\n        return n;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:\n        n = len(dist)\n        # 每个怪物的最晚可被消灭时间\n        time = [(dist[i] - 1) // speed[i] for i in range(n)]\n        time.sort()\n        for i in range(n):\n            if time[i] < i:\n                # 无法消灭该怪物，返回消灭的怪物数量\n                return i\n        # 成功消灭全部怪物\n        return n\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log n)$，其中 $n$ 为怪物的数量。计算与遍历 $\\textit{time}$ 数组的时间复杂度为 $O(n)$，而排序的时间复杂度为 $O(n\\log n)$。\n\n- 空间复杂度：$O(n)$，即为 $\\textit{time}$ 数组的空间开销。"
}