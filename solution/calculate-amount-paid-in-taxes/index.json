{
	"titleSlug": "calculate-amount-paid-in-taxes",
	"slug": "by-royroy-2-75nl",
	"url": "https://leetcode-cn.com/problems/calculate-amount-paid-in-taxes/solution/by-royroy-2-75nl/",
	"content": "**calcByStep** -- 阶梯计算\r\n**calcByFast** -- 速算扣除数，这个在税率不变，大量查询的情况下应该比阶梯计算要优\r\n\r\n```\r\nclass Solution {\r\npublic:\r\n    double calcByStep(vector<vector<int>>& brackets, int income) {\r\n        double tex = 0;\r\n\r\n        int last = 0;\r\n        for (auto i:brackets) {\r\n            tex += (min(income, i.at(0)) - last) * (double)i.at(1) / 100;\r\n            if (income <= i.at(0)) {\r\n                break;\r\n            }\r\n            last = i.at(0);\r\n        }\r\n\r\n        return tex;\r\n    }\r\n    double calcByFast(vector<vector<int>>& brackets, int income) {\r\n        vector<double> fast;\r\n        fast.emplace_back(0);\r\n        for (auto i = brackets.begin(); next(i) != brackets.end(); ++i) {\r\n            auto &ii = *i;\r\n            if (income <= ii.at(0)) {\r\n                return income * (double)ii.at(1) / 100 - fast.at(fast.size() - 1);\r\n            }\r\n            fast.emplace_back(fast.at(fast.size() - 1) + ii.at(0) * (double)((*next(i)).at(1) - ii.at(1)) / 100);\r\n        }\r\n\r\n        return income * (double)brackets.at(brackets.size() - 1).at(1) / 100 - fast.at(fast.size() - 1);\r\n    }\r\n    double calculateTax(vector<vector<int>>& brackets, int income) {\r\n        // return calcByStep(brackets, income);\r\n        return calcByFast(brackets, income);\r\n    }\r\n};\r\n```\r\n"
}