{
	"titleSlug": "closed-number-lcci",
	"slug": "javabao-mu-ji-zhu-shi-jian-dan-yi-dong-w-zpir",
	"url": "https://leetcode-cn.com/problems/closed-number-lcci/solution/javabao-mu-ji-zhu-shi-jian-dan-yi-dong-w-zpir/",
	"content": "### 解题思路\n找到稍微大的数：\n找到第一个01变成10\n- 最简单情况 ...00000111 从低位到高位，找到第一个01变成10   0000 0111->0000 1011即可\n- 复杂情况   ...0011 1000 找到第一个01变成10以后，把低位的1右移 0011 1000->01011000->0100 0011第三个数是稍微大的，符合题意\n\n找到稍微小的数：\n找到第一个10变成01\n- 最简单情况 ...1110 0000 从低位到高位，找到第一个10变成01 1110 0000->1101 0000即可\n- 复杂情况   ...1110 0011 找到第一个10变成01以后，把低位的1右移 1110 0011->1110 0011->1101 0011->1101 1100 第三个数符合题意\n\n### 代码\n\n```java\nclass Solution {\n    public int[] findClosedNumbers(int num) {\n       if(num==Integer.MAX_VALUE){\n           return new int[]{-1,-1};\n       }\n       int[] ans=new int[2];\n       ans[0]=getBig(num);\n       ans[1]=getSmall(num);\n       return ans;\n    }\n\n\n\n//找到第一个01变成10\n//最简单情况 ...00000111 从低位到高位，找到第一个01变成10\n//复杂情况   ...00111000 找到第一个01变成10以后，把低位的1右移\n    public int getBig(int num){\n        int cnt=0;\n        //去掉低位开始的0\n        if((num&(1<<cnt))==0){\n            while(cnt<31&&(num&(1<<cnt))==0){\n                cnt++;\n            }\n        }\n        //此时cnt为从低位往高位数第一个1的位置\n        int c1=cnt;\n       \n        while(cnt<31&&(num&(1<<cnt))>0){\n                cnt++;\n        } \n\n        if(cnt==31){\n            return -1;\n        }\n  \n        num+=(1<<cnt);//    ...00111000 \n        cnt--;\n        num-=(1<<cnt);//变为   01011000\n        \n        cnt--;\n        //cnt指向要右移的第一个1\n        int count=0;\n        //c1大于0才需要右移动\n        while(c1>0&&cnt>0&&( num&(1<<cnt) )>0){  \n            num-=(1<<cnt);\n            count++;\n            cnt--;\n        }\n        //把右边清0\n        while(count>0){\n            //count代表几个1      如0000 0011\n            count--;\n            num+=(1<<count);\n            \n        }\n\n        return num;\n\n\n    }\n\n//找到第一个10变成01\n//最简单情况 ...1110000 从低位到高位，找到第一个10变成01\n//复杂情况   ...110011 找到第一个10变成01以后，把低位的1右移\n    public int getSmall(int num){\n        int cnt=0;\n        //去掉开始的1\n        if((num&(1<<cnt))>0){\n            while(cnt<31&& (num & (1<<cnt))>0){\n                cnt++;\n            }\n        }\n        //此时cnt为从低位到高位第一个0的位置\n        int c0=cnt;\n       \n\n        while(cnt<31&&(num&(1<<cnt))==0){\n                cnt++;\n        } \n\n        if(cnt==31){\n            return -1;\n        }\n\n        \n        //1000111\n        //c0就是右边1的个数，要左移\n        //0100111左移动1位，2=cnt-index\n        num-=(1<<cnt);\n        cnt--;\n        num+=(1<<(cnt));//1000111-》0100111\n\n        int cha=cnt-c0;//cnt指向从低位到高位第一个一串0后面的1 cha=\"差\"是要左移的位数\n        while(cnt-c0>0){\n            cnt--;\n            num+=(1<<cnt);\n        }\n        //把最右边清0\n        while(cha>0){\n            cha--;\n            num-=(1<<cha);\n            \n        }\n\n        return num;\n\n    }\n}\n```"
}