{
	"titleSlug": "super-washing-machines",
	"slug": "chao-ji-xi-yi-ji-by-leetcode-solution-yhej",
	"url": "https://leetcode-cn.com/problems/super-washing-machines/solution/chao-ji-xi-yi-ji-by-leetcode-solution-yhej/",
	"content": "#### 方法一：贪心\n\n设所有洗衣机内的衣服个数之和为 $\\textit{tot}$，要使最终所有洗衣机内的衣服个数相同，那么 $\\textit{tot}$ 必须是 $n$ 的倍数，否则我们直接返回 $-1$。\n\n记 $\\textit{avg}=\\dfrac{\\textit{tot}}{n}$，定义 $\\textit{machines}[i]'=\\textit{machines}[i]-\\textit{avg}$，若 $\\textit{machines}[i]'$ 为正则说明需要移出 $\\textit{machines}[i]'$ 件衣服，为负则说明需要移入 $-\\textit{machines}[i]'$ 件衣服。\n\n将前 $i$ 台洗衣机看成一组，记作 $A$，其余洗衣机看成另一组，记作 $B$。设 $\\textit{sum}[i]=\\sum_{j=0}^i \\textit{machines}[j]'$，若 $\\textit{sum}[i]$ 为正则说明需要从 $A$ 向 $B$ 移入 $\\textit{sum}[i]$ 件衣服，为负则说明需要从 $B$ 向 $A$ 移入 $-\\textit{sum}[i]$ 件衣服。\n\n我们分两种情况来考虑操作步数：\n\n1. $A$ 与 $B$ 两组之间的衣服，最多需要 $\\max_{i=0}^{n-1}|\\textit{sum}[i]|$ 次衣服移动；\n2. 组内的某一台洗衣机内的衣服数量过多，需要向左右两侧移出衣服，这最多需要 $\\max_{i=0}^{n-1}\\textit{machines}[i]'$ 次衣服移动。\n\n取两者的最大值即为答案。\n\n```Python [sol1-Python3]\nclass Solution:\n    def findMinMoves(self, machines: List[int]) -> int:\n        tot = sum(machines)\n        n = len(machines)\n        if tot % n:\n            return -1\n        avg = tot // n\n        ans, s = 0, 0\n        for num in machines:\n            num -= avg\n            s += num\n            ans = max(ans, abs(s), num)\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findMinMoves(vector<int> &machines) {\n        int tot = accumulate(machines.begin(), machines.end(), 0);\n        int n = machines.size();\n        if (tot % n) {\n            return -1;\n        }\n        int avg = tot / n;\n        int ans = 0, sum = 0;\n        for (int num: machines) {\n            num -= avg;\n            sum += num;\n            ans = max(ans, max(abs(sum), num));\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findMinMoves(int[] machines) {\n        int tot = Arrays.stream(machines).sum();\n        int n = machines.length;\n        if (tot % n != 0) {\n            return -1;\n        }\n        int avg = tot / n;\n        int ans = 0, sum = 0;\n        for (int num : machines) {\n            num -= avg;\n            sum += num;\n            ans = Math.max(ans, Math.max(Math.abs(sum), num));\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int FindMinMoves(int[] machines) {\n        int tot = machines.Sum();\n        int n = machines.Length;\n        if (tot % n != 0) {\n            return -1;\n        }\n        int avg = tot / n;\n        int ans = 0, sum = 0;\n        foreach (int num in machines) {\n            int tmp = num - avg;\n            sum += tmp;\n            ans = Math.Max(ans, Math.Max(Math.Abs(sum), tmp));\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc findMinMoves(machines []int) (ans int) {\n    tot := 0\n    for _, v := range machines {\n        tot += v\n    }\n    n := len(machines)\n    if tot%n > 0 {\n        return -1\n    }\n    avg := tot / n\n    sum := 0\n    for _, num := range machines {\n        num -= avg\n        sum += num\n        ans = max(ans, max(abs(sum), num))\n    }\n    return\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findMinMoves = function(machines) {\n    const tot = eval(machines.join('+'));\n    const n = machines.length;\n    if (tot % n !== 0) {\n        return -1;\n    }\n    let avg = Math.floor(tot / n);\n    let ans = 0, sum = 0;\n    for (let num of machines) {\n        num -= avg;\n        sum += num;\n        ans = Math.max(ans, Math.max(Math.abs(sum), num));\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{machines}$ 的长度。\n\n- 空间复杂度：$O(1)$。只需要常数的空间存放若干变量。"
}