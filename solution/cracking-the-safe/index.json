{
	"titleSlug": "cracking-the-safe",
	"slug": "po-jie-bao-xian-xiang-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/cracking-the-safe/solution/po-jie-bao-xian-xiang-by-leetcode-solution/",
	"content": "#### 前言\n\n本题和 [332. 重新安排行程](https://leetcode-cn.com/problems/reconstruct-itinerary/) 类似，是力扣平台上为数不多的求解欧拉回路 / 欧拉通路的题目。读者可以配合着进行练习。\n\n#### 方法一：$\\text{Hierholzer}$ 算法\n\n$\\text{Hierholzer}$ 算法可以在一个欧拉图中找出欧拉回路。\n\n具体地，我们将所有的 $n-1$ 位数作为节点，共有 $k^{n-1}$ 个节点，每个节点有 $k$ 条入边和出边。如果当前节点对应的数为 $a_1 a_2 \\cdots a_{n-1}$，那么它的第 $x$ 条出边就连向数 $a_2 \\cdots a_{n-1} x$ 对应的节点。这样我们从一个节点顺着第 $x$ 条边走到另一个节点，就相当于输入了数字 $x$。\n\n在某个节点对应的数的末尾放上它的某条出边的编号，就形成了一个 $n$ 位数，并且每个节点都能用这样的方式形成 $k$ 个 $n$ 位数。\n\n> 例如 $k=4$，$n=3$ 时，节点分别为 $00, 01, 02, \\cdots, 32, 33$，每个节点的出边的编号分别为 $0, 1, 2, 3$，那么 $00$ 和它的出边形成了 $000, 001, 002, 003$ 这 $4$ 个 $3$ 位数，$32$ 和它的出边形成了 $320, 321, 322, 323$ 这 $4$ 个 $3$ 位数。\n\n这样共计有 $k^{n-1} \\times k = k^n$ 个 $n$ 位数，恰好就是所有可能的密码。\n\n由于这个图的每个节点都有 $k$ 条入边和出边，因此它一定存在一个欧拉回路，即可以从任意一个节点开始，一次性不重复地走完所有的边且回到该节点。因此，我们可以用 $\\text{Hierholzer}$ 算法找出这条欧拉回路：\n\n设起始节点对应的数为 $u$，欧拉回路中每条边的编号为 $x_1, x_2, x_3, \\cdots$，那么最终的字符串即为\n\n$$\nu ~ x_1 ~ x_2 ~ x_3 \\cdots\n$$\n\n$\\text{Hierholzer}$ 算法如下：\n\n- 我们从节点 $u$ 开始，**任意地**经过还未经过的边，直到我们「无路可走」。此时我们一定回到了节点 $u$，这是因为所有节点的入度和出度都相等。\n\n- 回到节点 $u$ 之后，我们得到了一条从 $u$ 开始到 $u$ 结束的回路，这条回路上仍然有些节点有未经过的出边。我么从某个这样的节点 $v$ 开始，继续得到一条从 $v$ 开始到 $v$ 结束的回路，再嵌入之前的回路中，即\n\n$$\nu \\to \\cdots \\to v \\to \\cdots \\to u\n$$\n\n变为\n\n$$\nu \\to \\cdots \\to v \\to \\cdots \\to v \\to \\cdots \\to u\n$$\n\n以此类推，直到没有节点有未经过的出边，此时我们就找到了一条欧拉回路。\n\n实际的代码编写具有一定的技巧性。\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    unordered_set<int> seen;\n    string ans;\n    int highest;\n    int k;\n\npublic:\n    void dfs(int node) {\n        for (int x = 0; x < k; ++x) {\n            int nei = node * 10 + x;\n            if (!seen.count(nei)) {\n                seen.insert(nei);\n                dfs(nei % highest);\n                ans += (x + '0');\n            }\n        }\n    }\n\n    string crackSafe(int n, int k) {\n        highest = pow(10, n - 1);\n        this->k = k;\n        dfs(0);\n        ans += string(n - 1, '0');\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    Set<Integer> seen = new HashSet<Integer>();\n    StringBuffer ans = new StringBuffer();\n    int highest;\n    int k;\n\n    public String crackSafe(int n, int k) {\n        highest = (int) Math.pow(10, n - 1);\n        this.k = k;\n        dfs(0);\n        for (int i = 1; i < n; i++) {\n            ans.append('0');\n        }\n        return ans.toString();\n    }\n\n    public void dfs(int node) {\n        for (int x = 0; x < k; ++x) {\n            int nei = node * 10 + x;\n            if (!seen.contains(nei)) {\n                seen.add(nei);\n                dfs(nei % highest);\n                ans.append(x);\n            }\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def crackSafe(self, n: int, k: int) -> str:\n        seen = set()\n        ans = list()\n        highest = 10 ** (n - 1)\n\n        def dfs(node: int):\n            for x in range(k):\n                nei = node * 10 + x\n                if nei not in seen:\n                    seen.add(nei)\n                    dfs(nei % highest)\n                    ans.append(str(x))\n\n        dfs(0)\n        return \"\".join(ans) + \"0\" * (n - 1)\n```\n\n```C [sol1-C]\n#define N 10000\nint visited[N];\nchar str[N];\nint len, k_rec;\nint highest;\n\nvoid dfs(int node) {\n    for (int x = 0; x < k_rec; ++x) {\n        int nei = node * 10 + x;\n        if (!visited[nei]) {\n            visited[nei] = 1;\n            dfs(nei % highest);\n            str[len++] = x + '0';\n        }\n    }\n}\n\nchar *crackSafe(int n, int k) {\n    memset(visited, 0, sizeof(visited));\n    memset(str, 0, sizeof(str));\n    k_rec = k, len = 0;\n    visited[0] = true;\n    highest = pow(10, n - 1);\n    dfs(0);\n    for (int i = 0; i < n; i++) {\n        str[len++] = '0';\n    }\n    return str;\n}\n```\n\n```golang [sol1-Golang]\nfunc crackSafe(n int, k int) string {\n    seen := map[int]bool{}\n    ans := \"\"\n    highest := int(math.Pow(10, float64(n - 1)))\n    \n    var dfs func(int)\n    dfs = func(node int) {\n        for x := 0; x < k; x++ {\n            nei := node * 10 + x\n            if !seen[nei] {\n                seen[nei] = true\n                dfs(nei % highest)\n                ans += strconv.Itoa(x)\n            }\n        }\n    }\n    dfs(0)\n    for i := 1; i < n; i++ {\n        ans += \"0\"\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times k^n)$。\n\n- 空间复杂度：$O(n \\times k^n)$。"
}