{
	"titleSlug": "two-sum-ii-input-array-is-sorted",
	"slug": "yi-zhang-tu-gao-su-ni-on-de-shuang-zhi-zhen-jie-fa",
	"url": "https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/solution/yi-zhang-tu-gao-su-ni-on-de-shuang-zhi-zhen-jie-fa/",
	"content": "#### 解题思路：\n很多人做这个题目想不到正确的 $O(n)$ 解法，即使看了答案理解了，下次再做的时候还是会忘记。要想真正理解这道题，就要明白解法背后的道理。这样不仅可以记住这道题，还能举一反三解决类似的题目。\n\n很多题解只给出了双指针解法的代码，但没有说明解法的正确性。为什么双指针往中间移动时，不会漏掉某些情况呢？要解答这个问题，我们要从**缩减搜索空间**的角度思考这个解法。下面我将以文字和图片两种方式进行讲解。\n\n首先放上参考答案：\n\n```C++ []\nvector<int> twoSum(vector<int>& numbers, int target) {\n    int i = 0;\n    int j = numbers.size()-1;\n    while (i < j) {\n        int sum = numbers[i] + numbers[j];\n        if (sum < target) {\n            i++;\n        } else if (sum > target) {\n            j--;\n        } else {\n            return vector<int>{i+1, j+1};\n        }\n    }\n    return vector<int>{-1, -1};\n}\n```\n\n```Java []\npublic int[] twoSum(int[] numbers, int target) {\n    int i = 0;\n    int j = numbers.length - 1;\n    while (i < j) {\n        int sum = numbers[i] + numbers[j];\n        if (sum < target) {\n            i++;\n        } else if (sum > target) {\n            j--;\n        } else {\n            return new int[]{i+1, j+1};\n        }\n    }\n    return new int[]{-1, -1};\n}\n```\n\n需要注意的是，虽然本题叫做 Two Sum II，但解法和 Two Sum 完全不同。\n\n#### 图解双指针解法的原理\n\n在这道题中，我们要寻找的是符合条件的一对下标 $(i, j)$，它们需要满足的约束条件是：\n\n+ $i$、$j$ 都是合法的下标，即 $0 \\le i < n, 0 \\le j < n$\n+ $i < j$（题目要求）\n\n而我们希望从中找到满足 `A[i] + A[j] == target` 的下标 $(i, j)$。以 $n = 8$ 为例，这时候全部的搜索空间是：\n\n![下标 i, j 的搜索空间](https://pic.leetcode-cn.com/6ee3750f6036a7a6249197e5b640bfc0564153ca1a61c1e35aad51f3a8f9dc5e.jpg){:width=400}\n{:align=center}\n\n由于 $i$、$j$ 的约束条件的限制，搜索空间是白色的倒三角部分。可以看到，搜索空间的大小是 $O(n^2)$ 数量级的。如果用暴力解法求解，一次只检查一个单元格，那么时间复杂度一定是 $O(n^2)$。要想得到 $O(n)$ 的解法，我们就需要能够一次排除多个单元格。那么我们来看看，本题的双指针解法是如何削减搜索空间的：\n\n一开始，我们检查右上方单元格 $(0, 7)$，即计算 `A[0] + A[7]` ，与 `target` 进行比较。如果不相等的话，则要么大于 `target`，要么小于 `target`。\n\n![检查单元格 0, 7](https://pic.leetcode-cn.com/11af3da798c61eb69691db9ac28c74383b4c5f9586c39689e0529b423c669221.jpg){:width=400}\n{:align=center}\n\n假设此时 `A[0] + A[7]` 小于 `target`。这时候，我们应该去找**和更大的两个数**。由于 `A[7]` 已经是最大的数了，其他的数跟 `A[0]` 相加，和只会更小。也就是说 `A[0] + A[6]` 、`A[0] + A[5]`、……、`A[0] + A[1]` 也都小于 `target`，这些都是不合要求的解，可以一次排除。这相当于 $i=0$ 的情况全部被排除。对应用双指针解法的代码，就是 `i++`，对应于搜索空间，就是削减了一行的搜索空间，如下图所示。\n\n![排除 i = 0 的全部解](https://pic.leetcode-cn.com/50d93bb2d2ce3e2985460586d4350e8205543965d9689632a20f5650dde3cb95.jpg){:width=400}\n{:align=center}\n\n排除掉了搜索空间中的一行之后，我们再看剩余的搜索空间，仍然是倒三角形状。我们检查右上方的单元格 $(1, 7)$，计算 `A[1] + A[7]` 与 `target` 进行比较。\n\n![检查单元格 1, 7](https://pic.leetcode-cn.com/43cd9bb40aceb37a12c9ed4fe04e2df905a3f2be7e28cbd15465bbe3a8034915.jpg){:width=400}\n{:align=center}\n\n假设此时 `A[0] + A[7]` 大于 `target`。这时候，我们应该去找**和更小的两个数**。由于 `A[1]` 已经是当前搜索空间最小的数了，其他的数跟 `A[7]` 相加的话，和只会更大。也就是说 `A[1] + A[7]` 、`A[2] + A[7]`、……、`A[6] + A[7]` 也都大于 `target`，这些都是不合要求的解，可以一次排除。这相当于 $j=0$ 的情况全部被排除。对应用双指针解法的代码，就是 `j++`，对应于搜索空间，就是削减了一列的搜索空间，如下图所示。\n\n![排除 j = 7 的全部解](https://pic.leetcode-cn.com/3e305bd710d6f2c3730bd3050f49439f9e63b19eee24066f6642c393df6fdafb.jpg){:width=400}\n{:align=center}\n\n可以看到，无论 `A[i] + A[j]` 的结果是大了还是小了，我们都可以排除掉一行或者一列的搜索空间。经过 $n$ 步以后，就能排除所有的搜索空间，检查完所有的可能性。搜索空间的减小过程如下面动图所示：\n\n![搜索空间的减小过程（动图）](https://pic.leetcode-cn.com/9ebb3ff74f0706c3c350b7fb91fea343e54750eb5b6ae6a4a3493421a019922a.gif){:width=400}\n{:align=center}\n\n实际上还有几道题也是用到了这样的**缩减搜索空间**的思想：\n\n+ [11. Container With Most Water](https://leetcode-cn.com/problems/container-with-most-water/)\n+ [240. Search a 2D Matrix II](https://leetcode-cn.com/problems/search-a-2d-matrix-ii/)\n\n"
}