{
	"titleSlug": "excel-sheet-column-title",
	"slug": "excelbiao-lie-ming-cheng-by-leetcode-sol-hgj4",
	"url": "https://leetcode-cn.com/problems/excel-sheet-column-title/solution/excelbiao-lie-ming-cheng-by-leetcode-sol-hgj4/",
	"content": "#### 方法一：数学\n\n在考虑如何将列序号转换成列名称之前，先考虑相反的问题，即如何将列名称转换成列序号。读者可以参考「[171. Excel表列序号的官方题解](https://leetcode-cn.com/problems/excel-sheet-column-number/solution/excelbiao-lie-xu-hao-by-leetcode-solutio-r29l/)」。\n\n引用该题解的结论，如果列名称的长度为 $n$，每一位对应的序号为 $[a_{n-1}, a_{n-2}, \\ldots, a_0]$，其中对于任意 $0 \\le i < n$ 都有 $1 \\le a_i \\le 26$，则列名称对应的列序号为：\n\n$$\n\\textit{number} = \\sum_{i=0}^{n-1} a_i \\times 26^i\n$$\n\n将列序号转换成列名称，则是在已知 $\\textit{number}$ 的情况下，解出 $a_0$ 到 $a_{n-1}$ 的值。\n\n分离出 $a_0$ 项，提出其余项的公因数 $26$，上式可以改写为：\n\n$$\n\\textit{number} = a_0 + 26 \\times \\sum_{i=1}^{n-1} a_i \\times 26^{i-1}\n$$\n\n将等式两边同时减 $1$，得：\n\n$$\n\\textit{number} - 1 = (a_0 - 1) + 26 \\times \\Big(\\sum_{i=1}^{n-1} a_i \\times 26^{i-1}\\Big)\n$$\n\n由于 $0 \\le a_0 - 1 \\le 25$，由上式可知，$a_0 - 1$ 是 $\\textit{number} - 1$ 除以 $26$ 的余数。\n\n这样我们就得到了 $a_0$ 的值。\n\n在得到 $a_0$ 的值之后，令 $\\textit{number}' = \\dfrac{\\textit{number} - a_0}{26}$，则有：\n\n$$\n\\textit{number}' = \\sum_{i=1}^{n-1} a_i \\times 26^{i-1} = a_1 + 26 \\times \\sum_{i=2}^{n-1} a_i \\times 26^{i-2}\n$$\n\n于是使用同样的方法，可以得到 $a_1$ 的值。\n\n上述过程是一个循环的过程，直至 $\\textit{number}'=0$ 时停止。此时我们就得到了 $a_0$ 到 $a_{n-1}$ 的值。拼接这些值对应的字母，即得到了答案。\n\n代码实现时，由于我们计算列名称的顺序是从右往左，因此需要将拼接后的结果反转。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string convertToTitle(int columnNumber) {\n        string ans;\n        while (columnNumber > 0) {\n            int a0 = (columnNumber - 1) % 26 + 1;\n            ans += a0 - 1 + 'A';\n            columnNumber = (columnNumber - a0) / 26;\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String convertToTitle(int columnNumber) {\n        StringBuffer sb = new StringBuffer();\n        while (columnNumber > 0) {\n            int a0 = (columnNumber - 1) % 26 + 1;\n            sb.append((char)(a0 - 1 + 'A'));\n            columnNumber = (columnNumber - a0) / 26;\n        }\n        return sb.reverse().toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string ConvertToTitle(int columnNumber) {\n        StringBuilder sb = new StringBuilder();\n        while (columnNumber > 0) {\n            int a0 = (columnNumber - 1) % 26 + 1;\n            sb.Append((char)(a0 - 1 + 'A'));\n            columnNumber = (columnNumber - a0) / 26;\n        }\n        StringBuilder columnTitle = new StringBuilder();\n        for (int i = sb.Length - 1; i >= 0; i--) {\n            columnTitle.Append(sb[i]);\n        }\n        return columnTitle.ToString();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar convertToTitle = function(columnNumber) {\n    let ans = [];\n    while (columnNumber > 0) {\n        const a0 = (columnNumber - 1) % 26 + 1;\n        ans.push(String.fromCharCode(a0 - 1 + 'A'.charCodeAt()));\n        columnNumber = Math.floor((columnNumber - a0) / 26);\n    }\n    ans.reverse();\n    return ans.join('');\n};\n```\n\n```go [sol1-Golang]\nfunc convertToTitle(columnNumber int) string {\n    ans := []byte{}\n    for columnNumber > 0 {\n        a0 := (columnNumber-1)%26 + 1\n        ans = append(ans, 'A'+byte(a0-1))\n        columnNumber = (columnNumber - a0) / 26\n    }\n    for i, n := 0, len(ans); i < n/2; i++ {\n        ans[i], ans[n-1-i] = ans[n-1-i], ans[i]\n    }\n    return string(ans)\n}\n```\n\n```C [sol1-C]\nvoid reverse(char* str, int strSize) {\n    int left = 0, right = strSize - 1;\n    while (left < right) {\n        char tmp = str[left];\n        str[left] = str[right], str[right] = tmp;\n        left++;\n        right--;\n    }\n}\n\nchar* convertToTitle(int columnNumber) {\n    char* ans = malloc(sizeof(char) * 8);\n    int ansSize = 0;\n    while (columnNumber > 0) {\n        int a0 = (columnNumber - 1) % 26 + 1;\n        ans[ansSize++] = a0 - 1 + 'A';\n        columnNumber = (columnNumber - a0) / 26;\n    }\n    ans[ansSize] = '\\0';\n    reverse(ans, ansSize);\n    return ans;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def convertToTitle(self, columnNumber: int) -> str:\n        ans = list()\n        while columnNumber > 0:\n            a0 = (columnNumber - 1) % 26 + 1\n            ans.append(chr(a0 - 1 + ord(\"A\")))\n            columnNumber = (columnNumber - a0) // 26\n        return \"\".join(ans[::-1])\n```\n\n对于整数 $n$，若 $n$ 能被 $26$ 整除，则有：\n\n$$\n\\dfrac{n}{26} = \\Big\\lfloor \\dfrac{n+r}{26} \\Big\\rfloor\n$$\n\n其中 $0\\le r \\le 25$。\n\n因此有：\n\n$$\n\\begin{aligned}\n\\textit{number}' &= \\dfrac{\\textit{number} - a_0}{26}\\\\\n&= \\Big\\lfloor \\dfrac{(\\textit{number}-a_0)+(a_0-1)}{26} \\Big\\rfloor\\\\\n&= \\Big\\lfloor \\dfrac{\\textit{number}-1}{26} \\Big\\rfloor\n\\end{aligned}\n$$\n\n这里我们用到了 $0 \\le a_0 - 1 \\le 25$ 这一性质。\n\n据此，我们得到另外一种简洁的写法：\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    string convertToTitle(int columnNumber) {\n        string ans;\n        while (columnNumber > 0) {\n            --columnNumber;\n            ans += columnNumber % 26 + 'A';\n            columnNumber /= 26;\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public String convertToTitle(int columnNumber) {\n        StringBuffer sb = new StringBuffer();\n        while (columnNumber != 0) {\n            columnNumber--;\n            sb.append((char)(columnNumber % 26 + 'A'));\n            columnNumber /= 26;\n        }\n        return sb.reverse().toString();\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public string ConvertToTitle(int columnNumber) {\n        StringBuilder sb = new StringBuilder();\n        while (columnNumber != 0) {\n            columnNumber--;\n            sb.Append((char)(columnNumber % 26 + 'A'));\n            columnNumber /= 26;\n        }\n        StringBuilder columnTitle = new StringBuilder();\n        for (int i = sb.Length - 1; i >= 0; i--) {\n            columnTitle.Append(sb[i]);\n        }\n        return columnTitle.ToString();\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar convertToTitle = function(columnNumber) {\n    const sb = [];\n    while (columnNumber !== 0) {\n        columnNumber--;\n        sb.push(String.fromCharCode(columnNumber % 26 + 'A'.charCodeAt()));\n        columnNumber = Math.floor(columnNumber / 26);\n    }\n    return sb.reverse().join('');\n};\n```\n\n```go [sol2-Golang]\nfunc convertToTitle(columnNumber int) string {\n    ans := []byte{}\n    for columnNumber > 0 {\n        columnNumber--\n        ans = append(ans, 'A'+byte(columnNumber%26))\n        columnNumber /= 26\n    }\n    for i, n := 0, len(ans); i < n/2; i++ {\n        ans[i], ans[n-1-i] = ans[n-1-i], ans[i]\n    }\n    return string(ans)\n}\n```\n\n```C [sol2-C]\nvoid reverse(char* str, int strSize) {\n    int left = 0, right = strSize - 1;\n    while (left < right) {\n        char tmp = str[left];\n        str[left] = str[right], str[right] = tmp;\n        left++;\n        right--;\n    }\n}\n\nchar* convertToTitle(int columnNumber) {\n    char* ans = malloc(sizeof(char) * 8);\n    int ansSize = 0;\n\n    while (columnNumber > 0) {\n        --columnNumber;\n        ans[ansSize++] = columnNumber % 26 + 'A';\n        columnNumber /= 26;\n    }\n    ans[ansSize] = '\\0';\n    reverse(ans, ansSize);\n    return ans;\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def convertToTitle(self, columnNumber: int) -> str:\n        ans = list()\n        while columnNumber > 0:\n            columnNumber -= 1\n            ans.append(chr(columnNumber % 26 + ord(\"A\")))\n            columnNumber //= 26\n        return \"\".join(ans[::-1])\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log_{26} \\textit{columnNumber})$。时间复杂度即为将 $\\textit{columnNumber}$ 转换成 $26$ 进制的位数。\n\n- 空间复杂度：$O(1)$。返回值不计入空间复杂度。注意，在某些语言（比如 Java、C#、JavaScript）中字符串是不可变的，因此我们需要额外的 $O(\\log_{26} \\textit{columnNumber})$ 的空间来存储返回值的中间结果。但是我们忽略这一复杂度分析，因为这依赖于语言的细节。"
}