{
	"titleSlug": "decoded-string-at-index",
	"slug": "suo-yin-chu-de-jie-ma-zi-fu-chuan-by-leetcode",
	"url": "https://leetcode-cn.com/problems/decoded-string-at-index/solution/suo-yin-chu-de-jie-ma-zi-fu-chuan-by-leetcode/",
	"content": "#### 方法：逆向工作法\n\n**思路**\n\n如果我们有一个像 `appleappleappleappleappleapple` 这样的解码字符串和一个像 `K=24` 这样的索引，那么如果 `K=4`，答案是相同的。\n\n一般来说，当解码的字符串等于某个长度为 `size` 的单词重复某些次数（例如 `apple` 与 `size=5` 组合重复6次）时，索引 `K` 的答案与索引 `K % size` 的答案相同。\n\n我们可以通过逆向工作，跟踪解码字符串的大小来使用这种洞察力。每当解码的字符串等于某些单词 `word` 重复 `d` 次时，我们就可以将 `k` 减少到 `K % (Word.Length)`。\n\n**算法**\n\n首先，找出解码字符串的长度。之后，我们将逆向工作，跟踪 `size`：解析符号 `S[0], S[1], ..., S[i]` 后解码字符串的长度。\n\n如果我们看到一个数字 `S [i]`，则表示在解析 `S [0]，S [1]，...，S [i-1]` 之后解码字符串的大小将是 `size / Integer(S[i])`。 否则，将是 `size - 1`。\n\n```cpp [2ooN4yc4-C++]\nclass Solution {\npublic:\n    string decodeAtIndex(string S, int K) {\n        long size = 0;\n        int N = S.size();\n\n        // Find size = length of decoded string\n        for (int i = 0; i < N; ++i) {\n            if (isdigit(S[i]))\n                size *= S[i] - '0';\n            else\n                size++;\n        }\n\n        for (int i = N-1; i >=0; --i) {\n            K %= size;\n            if (K == 0 && isalpha(S[i]))\n                return (string) \"\" + S[i];\n\n            if (isdigit(S[i]))\n                size /= S[i] - '0';\n            else\n                size--;\n        }\n        return \"\";\n    }\n};\n```\n```java [2ooN4yc4-Java]\nclass Solution {\n    public String decodeAtIndex(String S, int K) {\n        long size = 0;\n        int N = S.length();\n\n        // Find size = length of decoded string\n        for (int i = 0; i < N; ++i) {\n            char c = S.charAt(i);\n            if (Character.isDigit(c))\n                size *= c - '0';\n            else\n                size++;\n        }\n\n        for (int i = N-1; i >= 0; --i) {\n            char c = S.charAt(i);\n            K %= size;\n            if (K == 0 && Character.isLetter(c))\n                return Character.toString(c);\n\n            if (Character.isDigit(c))\n                size /= c - '0';\n            else\n                size--;\n        }\n\n        throw null;\n    }\n}\n```\n```python [2ooN4yc4-Python]\nclass Solution(object):\n    def decodeAtIndex(self, S, K):\n        size = 0\n        # Find size = length of decoded string\n        for c in S:\n            if c.isdigit():\n                size *= int(c)\n            else:\n                size += 1\n\n        for c in reversed(S):\n            K %= size\n            if K == 0 and c.isalpha():\n                return c\n\n            if c.isdigit():\n                size /= int(c)\n            else:\n                size -= 1\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 `S` 的长度。\n* 空间复杂度：$O(1)$。"
}