{
	"titleSlug": "bus-routes",
	"slug": "gong-jiao-lu-xian-by-leetcode-solution-yifz",
	"url": "https://leetcode-cn.com/problems/bus-routes/solution/gong-jiao-lu-xian-by-leetcode-solution-yifz/",
	"content": "#### 方法一：优化建图 + 广度优先搜索\n\n**思路及算法**\n\n由于求解的目标是最少乘坐的公交车数量，对于同一辆公交车，乘客可以在其路线中的任意车站间无代价地移动，于是我们可以把公交路线当作点。如果两条公交路线有相同车站，则可以在这两条路线间换乘公交车，那么这两条公交路线之间可视作有一条长度为 $1$ 的边。这样建出的图包含的点数即为公交路线的数量，记作 $n$。\n\n完成了建图后，我们需要先明确新的图的起点和终点，然后使用广度优先搜索，计算出的起点和终点的最短路径，从而得到最少换乘次数。\n\n注意到原本的起点车站和终点车站可能同时位于多条公交路线上，因此在新图上可能有多个起点和终点。对于这种情况，我们初始可以同时入队多个点，并在广度优先搜索结束后检查到各个终点的最短路径，取其最小值才是最少换乘次数。\n\n实际建图时，我们有以下两种方案：\n\n- 方案一：我们直接枚举左右两端点，检查两点对应的两公交路线是否有公共车站。利用哈希表，我们可以将单次比较的时间复杂度优化到均摊 $O(n)$。\n- 方案二：我们遍历所有公交路线，记录每一个车站属于哪些公交路线。然后我们遍历每一个车站，如果有多条公交路线经过该点，则在这些公交路线之间连边。\n\n本题中我们采用方案二，据此还可以直接得到起点和终点在新图中对应的点。\n\n实际代码中，我们使用哈希映射来实时维护「车站所属公交路线列表」。假设当前枚举到公交路线 $i$ 中的车站 $\\textit{site}$，此时哈希映射中已记录若干条公交路线经过车站 $\\textit{site}$，我们只需要让点 $i$ 与这些点公交路线对应的点相连即可。完成了连线后，我们再将公交路线 $i$ 加入到「车站 $\\textit{site}$ 所属公交路线列表」中。\n\n特别地，起点和终点相同时，我们可以直接返回 $0$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numBusesToDestination(vector<vector<int>>& routes, int source, int target) {\n        if (source == target) {\n            return 0;\n        }\n\n        int n = routes.size();\n        vector<vector<int>> edge(n, vector<int>(n));\n        unordered_map<int, vector<int>> rec;\n        for (int i = 0; i < n; i++) {\n            for (int site : routes[i]) {\n                for (int j : rec[site]) {\n                    edge[i][j] = edge[j][i] = true;\n                }\n                rec[site].push_back(i);\n            }\n        }\n\n        vector<int> dis(n, -1);\n        queue<int> que;\n        for (int bus : rec[source]) {\n            dis[bus] = 1;\n            que.push(bus);\n        }\n        while (!que.empty()) {\n            int x = que.front();\n            que.pop();\n            for (int y = 0; y < n; y++) {\n                if (edge[x][y] && dis[y] == -1) {\n                    dis[y] = dis[x] + 1;\n                    que.push(y);\n                }\n            }\n        }\n\n        int ret = INT_MAX;\n        for (int bus : rec[target]) {\n            if (dis[bus] != -1) {\n                ret = min(ret, dis[bus]);\n            }\n        }\n        return ret == INT_MAX ? -1 : ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int numBusesToDestination(int[][] routes, int source, int target) {\n        if (source == target) {\n            return 0;\n        }\n\n        int n = routes.length;\n        boolean[][] edge = new boolean[n][n];\n        Map<Integer, List<Integer>> rec = new HashMap<Integer, List<Integer>>();\n        for (int i = 0; i < n; i++) {\n            for (int site : routes[i]) {\n                List<Integer> list = rec.getOrDefault(site, new ArrayList<Integer>());\n                for (int j : list) {\n                    edge[i][j] = edge[j][i] = true;\n                }\n                list.add(i);\n                rec.put(site, list);\n            }\n        }\n\n        int[] dis = new int[n];\n        Arrays.fill(dis, -1);\n        Queue<Integer> que = new LinkedList<Integer>();\n        for (int bus : rec.getOrDefault(source, new ArrayList<Integer>())) {\n            dis[bus] = 1;\n            que.offer(bus);\n        }\n        while (!que.isEmpty()) {\n            int x = que.poll();\n            for (int y = 0; y < n; y++) {\n                if (edge[x][y] && dis[y] == -1) {\n                    dis[y] = dis[x] + 1;\n                    que.offer(y);\n                }\n            }\n        }\n\n        int ret = Integer.MAX_VALUE;\n        for (int bus : rec.getOrDefault(target, new ArrayList<Integer>())) {\n            if (dis[bus] != -1) {\n                ret = Math.min(ret, dis[bus]);\n            }\n        }\n        return ret == Integer.MAX_VALUE ? -1 : ret;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int NumBusesToDestination(int[][] routes, int source, int target) {\n        if (source == target) {\n            return 0;\n        }\n\n        int n = routes.Length;\n        bool[,] edge = new bool[n, n];\n        Dictionary<int, IList<int>> rec = new Dictionary<int, IList<int>>();\n        for (int i = 0; i < n; i++) {\n            foreach (int site in routes[i]) {\n                IList<int> list = new List<int>();\n                if (rec.ContainsKey(site)) {\n                    list = rec[site];\n                    foreach (int j in list) {\n                        edge[i, j] = edge[j, i] = true;\n                    }\n                    rec[site].Add(i);\n                } else {\n                    list.Add(i);\n                    rec.Add(site, list);\n                }\n            }\n        }\n\n        int[] dis = new int[n];\n        Array.Fill(dis, -1);\n        Queue<int> que = new Queue<int>();\n        if (rec.ContainsKey(source)) {\n            foreach (int bus in rec[source]) {\n                dis[bus] = 1;\n                que.Enqueue(bus);\n            }\n        }\n        while (que.Count > 0) {\n            int x = que.Dequeue();\n            for (int y = 0; y < n; y++) {\n                if (edge[x, y] && dis[y] == -1) {\n                    dis[y] = dis[x] + 1;\n                    que.Enqueue(y);\n                }\n            }\n        }\n\n        int ret = int.MaxValue;\n        if (rec.ContainsKey(target)) {\n            foreach (int bus in rec[target]) {\n                if (dis[bus] != -1) {\n                    ret = Math.Min(ret, dis[bus]);\n                }\n            }\n        }\n        return ret == int.MaxValue ? -1 : ret;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar numBusesToDestination = function(routes, source, target) {\n    if (source === target) {\n        return 0;\n    }\n\n    const n = routes.length;\n    const edge = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    const rec = new Map();\n    for (let i = 0; i < n; i++) {\n        for (const site of routes[i]) {\n            const list = (rec.get(site) || []);\n            for (const j of list) {\n                edge[i][j] = edge[j][i] = true;\n            }\n            list.push(i);\n            rec.set(site, list);\n        }\n    }\n\n    const dis = new Array(n).fill(-1);\n    const que = [];\n    for (const bus of (rec.get(source) || [])) {\n        dis[bus] = 1;\n        que.push(bus);\n    }\n    while (que.length) {\n        const x = que.shift();\n        for (let y = 0; y < n; y++) {\n            if (edge[x][y] && dis[y] === -1) {\n                dis[y] = dis[x] + 1;\n                que.push(y);\n            }\n        }\n    }\n\n    let ret = Number.MAX_VALUE;\n    for (const bus of (rec.get(target) || [])) {\n        if (dis[bus] !== -1) {\n            ret = Math.min(ret, dis[bus]);\n        }\n    }\n    return ret === Number.MAX_VALUE ? -1 : ret;\n};\n```\n\n```go [sol1-Golang]\nfunc numBusesToDestination(routes [][]int, source, target int) int {\n    if source == target {\n        return 0\n    }\n\n    n := len(routes)\n    edge := make([][]bool, n)\n    for i := range edge {\n        edge[i] = make([]bool, n)\n    }\n    rec := map[int][]int{}\n    for i, route := range routes {\n        for _, site := range route {\n            for _, j := range rec[site] {\n                edge[i][j] = true\n                edge[j][i] = true\n            }\n            rec[site] = append(rec[site], i)\n        }\n    }\n\n    dis := make([]int, n)\n    for i := range dis {\n        dis[i] = -1\n    }\n    q := []int{}\n    for _, bus := range rec[source] {\n        dis[bus] = 1\n        q = append(q, bus)\n    }\n    for len(q) > 0 {\n        x := q[0]\n        q = q[1:]\n        for y, b := range edge[x] {\n            if b && dis[y] == -1 {\n                dis[y] = dis[x] + 1\n                q = append(q, y)\n            }\n        }\n    }\n\n    ans := math.MaxInt32\n    for _, bus := range rec[target] {\n        if dis[bus] != -1 && dis[bus] < ans {\n            ans = dis[bus]\n        }\n    }\n    if ans < math.MaxInt32 {\n        return ans\n    }\n    return -1\n}\n```\n\n```C [sol1-C]\nstruct Vector {\n    int* arr;\n    int capacity;\n    int size;\n};\n\nvoid init(struct Vector* vec) {\n    vec->arr = malloc(sizeof(int));\n    vec->capacity = 1;\n    vec->size = 0;\n}\n\nvoid push_back(struct Vector* vec, int val) {\n    if (vec->size == vec->capacity) {\n        vec->capacity <<= 1;\n        vec->arr = realloc(vec->arr, sizeof(int) * vec->capacity);\n    }\n    vec->arr[vec->size++] = val;\n}\n\nint numBusesToDestination(int** routes, int routesSize, int* routesColSize, int source, int target) {\n    if (source == target) {\n        return 0;\n    }\n\n    int n = routesSize;\n    int edge[n][n];\n    memset(edge, 0, sizeof(edge));\n    struct Vector rec[100001];\n    for (int i = 0; i < 100001; i++) {\n        init(&rec[i]);\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < routesColSize[i]; j++) {\n            int site = routes[i][j];\n            for (int k = 0; k < rec[site].size; k++) {\n                edge[i][rec[site].arr[k]] = edge[rec[site].arr[k]][i] = true;\n            }\n            push_back(&rec[site], i);\n        }\n    }\n    int dis[n];\n    memset(dis, -1, sizeof(dis));\n    int que[n];\n    int left = 0, right = 0;\n\n    for (int i = 0; i < rec[source].size; i++) {\n        dis[rec[source].arr[i]] = 1;\n        que[right++] = rec[source].arr[i];\n    }\n    while (left < right) {\n        int x = que[left++];\n        for (int y = 0; y < n; y++) {\n            if (edge[x][y] && dis[y] == -1) {\n                dis[y] = dis[x] + 1;\n                que[right++] = y;\n            }\n        }\n    }\n\n    int ret = INT_MAX;\n\n    for (int i = 0; i < rec[target].size; i++) {\n        if (dis[rec[target].arr[i]] != -1) {\n            ret = fmin(ret, dis[rec[target].arr[i]]);\n        }\n    }\n    return ret == INT_MAX ? -1 : ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nm+n^2)$，其中 $n$ 是公交路线的数量，$m$ 是车站的总数量。建图时最坏的情况是，所有的公交路线都经过相同的车站，而本题中限制了所有公交路线的车站总数。因此最坏的情况为，每条公交路都经过相同的 $O(\\frac{m}{n})$ 个车站，建图的时间复杂度为 $O(\\frac{m}{n}) \\times O(n) \\times O(n) = O(nm)$。同时广度优先搜索的时间复杂度为 $O(n^2)$，因此总时间复杂度为 $O(nm+n^2)$。\n\n- 空间复杂度：$O(n^2+m)$，其中 $n$ 是公交路线的数量，$m$ 是车站的总数量。记录「经过任意车站的公交路线的列表」的空间复杂度为 $O(m)$，使用邻接矩阵存图的空间复杂度为 $O(n^2)$。"
}