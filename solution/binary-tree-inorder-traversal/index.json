{
	"titleSlug": "binary-tree-inorder-traversal",
	"slug": "yan-se-biao-ji-fa-yi-chong-tong-yong-qie-jian-ming",
	"url": "https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/yan-se-biao-ji-fa-yi-chong-tong-yong-qie-jian-ming/",
	"content": "官方题解中介绍了三种方法来完成树的中序遍历，包括：\r\n\r\n- 递归\r\n- 借助栈的迭代方法\r\n- 莫里斯遍历\r\n\r\n在树的深度优先遍历中（包括前序、中序、后序遍历），递归方法最为直观易懂，但考虑到效率，我们通常不推荐使用递归。\r\n\r\n栈迭代方法虽然提高了效率，但其嵌套循环却非常烧脑，不易理解，容易造成“**一看就懂，一写就废**”的窘况。而且对于不同的遍历顺序（前序、中序、后序），循环结构差异很大，更增加了记忆负担。\r\n\r\n因此，我在这里介绍一种“颜色标记法”（瞎起的名字……），**兼具栈迭代方法的高效，又像递归方法一样简洁易懂，更重要的是，这种方法对于前序、中序、后序遍历，能够写出完全一致的代码**。\r\n\r\n其核心思想如下：\r\n\r\n- 使用颜色标记节点的状态，新节点为白色，已访问的节点为灰色。\r\n- 如果遇到的节点为白色，则将其标记为灰色，然后将其右子节点、自身、左子节点依次入栈。\r\n- 如果遇到的节点为灰色，则将节点的值输出。\r\n\r\n使用这种方法实现的中序遍历如下：\r\n\r\n```python\r\nclass Solution:\r\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\r\n        WHITE, GRAY = 0, 1\r\n        res = []\r\n        stack = [(WHITE, root)]\r\n        while stack:\r\n            color, node = stack.pop()\r\n            if node is None: continue\r\n            if color == WHITE:\r\n                stack.append((WHITE, node.right))\r\n                stack.append((GRAY, node))\r\n                stack.append((WHITE, node.left))\r\n            else:\r\n                res.append(node.val)\r\n        return res\r\n```\r\n\r\n如要实现前序、后序遍历，只需要调整左右子节点的入栈顺序即可。"
}