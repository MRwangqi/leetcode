{
	"titleSlug": "maximum-compatibility-score-sum",
	"slug": "zui-da-jian-rong-xing-ping-fen-he-by-lee-be2l",
	"url": "https://leetcode-cn.com/problems/maximum-compatibility-score-sum/solution/zui-da-jian-rong-xing-ping-fen-he-by-lee-be2l/",
	"content": "#### 方法一：枚举排列\n\n**思路与算法**\n\n由于每一名学生恰好被分配一名老师，并且老师和学生的人数均为 $m$，因此我们可以枚举所有 $0, 1, \\cdots, m-1$ 组成的排列。\n\n对于当前的排列 $p_0, p_1, \\cdots, p_{m-1}$，我们给第 $i$ 名学生分配第 $p_i$ 名老师，再统计兼容性评分和即可。\n\n枚举所有排列的方法有很多种，例如可以参考[「31. 下一个排列」的官方题解](https://leetcode-cn.com/problems/next-permutation/solution/xia-yi-ge-pai-lie-by-leetcode-solution/)，从 $0, 1, \\cdots, m-1$ 开始，每次生成下一个排列，直到 $m-1, \\cdots, 1, 0$ 为止。\n\n此外，在统计兼容性评分和之前，我们可以预处理出每一名学生 $i$ 与老师 $j$ 的兼容性评分，存储在 $g[i][j]$ 中。这样一来，对于当前的排列 $p_0, p_1, \\cdots, p_{m-1}$，我们只需要对所有的 $g[i][p_i]$ 进行累加，就可以在 $O(m)$ 的时间内快速得到兼容性评分和。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxCompatibilitySum(vector<vector<int>>& students, vector<vector<int>>& mentors) {\n        int m = students.size();\n        int n = students[0].size();\n        vector<vector<int>> g(m, vector<int>(m));\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < m; ++j) {\n                for (int k = 0; k < n; ++k) {\n                    g[i][j] += (students[i][k] == mentors[j][k]);\n                }\n            }\n        }\n\n        vector<int> p(m);\n        iota(p.begin(), p.end(), 0);\n        int ans = 0;\n        do {\n            int cur = 0;\n            for (int i = 0; i < m; ++i) {\n                cur += g[i][p[i]];\n            }\n            ans = max(ans, cur);\n        } while (next_permutation(p.begin(), p.end()));\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Helper:\n    @staticmethod\n    def nextPermutation(nums: List[int]) -> bool:\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i < 0:\n            return False\n\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[i] >= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        \n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        \n        return True\n\nclass Solution:\n    def maxCompatibilitySum(self, students: List[List[int]], mentors: List[List[int]]) -> int:\n        m, n = len(students), len(students[0])\n        g = [[0] * m for _ in range(m)]\n        for i in range(m):\n            for j in range(m):\n                for k in range(n):\n                    g[i][j] += int(students[i][k] == mentors[j][k])\n\n        p = list(range(m))\n        ans = 0\n\n        while True:\n            cur = sum(g[i][p[i]] for i in range(m))\n            ans = max(ans, cur)\n            if not Helper.nextPermutation(p):\n                break\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m^2n + m \\cdot m!)$。\n\n    - 我们需要 $O(m^2n)$ 的时间预处理所有的 $g[i][j]$。\n\n    - 排列的总数为 $m!$，对于每个排列，我们需要 $O(m)$ 的时间计算兼容性评分和。\n\n- 空间复杂度：$O(m^2)$。\n\n    - 我们需要 $O(m^2)$ 的空间存储所有的 $g[i][j]$。\n\n    - 我们需要 $O(m)$ 的空间存储当前的排列，其在渐近意义下小于 $O(m^2)$，可以忽略。\n\n#### 方法二：状态压缩动态规划\n\n**思路与算法**\n\n我们按照编号顺序给每一名学生分配老师。\n\n我们可以用一个长度为 $m$ 的二进制数 $\\textit{mask}$ 表示每一名老师是否被分配了学生。如果 $\\textit{mask}$ 的第 $i$ 位为 $1$，那么第 $i$ 位老师被分配到了学生，否则就没有被分配到学生。\n\n这样一来，我们就可以用状态压缩动态规划解决本题了。记 $f[\\textit{mask}]$ 表示当老师被分配学生的状态为 $\\textit{mask}$ 时，最大的兼容性评分和。由于我们规定了按照编号顺序给每一名学生分配老师，那么 $\\textit{mask}$ 中包含 $c$ 个 $1$，就说明我们分配的学生编号为 $0, 1, \\cdots, c-1$。\n\n因此，在进行状态转移时，我们可以枚举编号为 $c-1$ 的学生被分配的是哪一名老师，这样就可以得到状态转移方程：\n\n$$\nf[\\textit{mask}] = \\max_{\\textit{mask} ~的第 ~i~ 位为 ~1~} \\big\\{ f[\\textit{mask} \\backslash i] + g[c-1][i] \\big\\}\n$$\n\n其中 $\\textit{mask} \\backslash i$ 表示将 $\\textit{mask}$ 的第 $i$ 位从 $1$ 变成 $0$，$g$ 的定义与方法一中的相同。\n\n最终的答案即为 $f[2^m-1]$。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxCompatibilitySum(vector<vector<int>>& students, vector<vector<int>>& mentors) {\n        int m = students.size();\n        int n = students[0].size();\n        vector<vector<int>> g(m, vector<int>(m));\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < m; ++j) {\n                for (int k = 0; k < n; ++k) {\n                    g[i][j] += (students[i][k] == mentors[j][k]);\n                }\n            }\n        }\n\n        vector<int> f(1 << m);\n        for (int mask = 1; mask < (1 << m); ++mask) {\n            int c = __builtin_popcount(mask);\n            for (int i = 0; i < m; ++i) {\n                // 判断 mask 的第 i 位是否为 1\n                if (mask & (1 << i)) {\n                    f[mask] = max(f[mask], f[mask ^ (1 << i)] + g[c - 1][i]);\n                }\n            }\n        }\n        return f[(1 << m) - 1];\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def maxCompatibilitySum(self, students: List[List[int]], mentors: List[List[int]]) -> int:\n        m, n = len(students), len(students[0])\n        g = [[0] * m for _ in range(m)]\n        for i in range(m):\n            for j in range(m):\n                for k in range(n):\n                    g[i][j] += int(students[i][k] == mentors[j][k])\n\n        f = [0] * (1 << m)\n        for mask in range(1, 1 << m):\n            c = bin(mask).count(\"1\")\n            for i in range(m):\n                # 判断 mask 的第 i 位是否为 1\n                if mask & (1 << i):\n                    f[mask] = max(f[mask], f[mask ^ (1 << i)] + g[c - 1][i])\n        \n        return f[(1 << m) - 1]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m^2n + m \\cdot 2^m)$。\n\n    - 我们需要 $O(m^2n)$ 的时间预处理所有的 $g[i][j]$。\n\n    - 状态的总数为 $2^m$，对于每个状态，我们需要 $O(m)$ 的时间进行转移。\n\n- 空间复杂度：$O(2^m)$。\n\n    - 我们需要 $O(m^2)$ 的空间存储所有的 $g[i][j]$，其在渐进意义下小于 $O(2^m)$，可以忽略。\n\n    - 我们需要 $O(2^m)$ 的空间存储所有的状态。"
}