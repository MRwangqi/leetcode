{
	"titleSlug": "power-of-two",
	"slug": "2de-mi-by-leetcode-solution-rny3",
	"url": "https://leetcode-cn.com/problems/power-of-two/solution/2de-mi-by-leetcode-solution-rny3/",
	"content": "#### 方法一：二进制表示\n\n**思路与算法**\n\n一个数 $n$ 是 $2$ 的幂，当且仅当 $n$ 是正整数，并且 $n$ 的二进制表示中仅包含 $1$ 个 $1$。\n\n因此我们可以考虑使用位运算，将 $n$ 的二进制表示中最低位的那个 $1$ 提取出来，再判断剩余的数值是否为 $0$ 即可。下面介绍两种常见的与「二进制表示中最低位」相关的位运算技巧。\n\n第一个技巧是\n\n$$\n\\texttt{n \\& (n - 1)}\n$$\n\n其中 $\\texttt{\\&}$ 表示按位与运算。该位运算技巧可以直接将 $n$ 二进制表示的最低位 $1$ 移除，它的原理如下：\n\n> 假设 $n$ 的二进制表示为 $(a 10\\cdots 0)_2$，其中 $a$ 表示若干个高位，$1$ 表示最低位的那个 $1$，$0\\cdots 0$ 表示后面的若干个 $0$，那么 $n-1$ 的二进制表示为：\n>\n> $$\n> (a 01\\cdots1)_2\n> $$\n>\n> 我们将 $(a 10\\cdots 0)_2$ 与 $(a 01\\cdots1)_2$ 进行按位与运算，高位 $a$ 不变，在这之后的所有位都会变为 $0$，这样我们就将最低位的那个 $1$ 移除了。\n\n因此，如果 $n$ 是正整数并且 $\\texttt{n \\& (n - 1) = 0}$，那么 $n$ 就是 $2$ 的幂。\n\n第二个技巧是\n\n$$\n\\texttt{n \\& (-n)}\n$$\n\n其中 $-n$ 是 $n$ 的相反数，是一个负数。该位运算技巧可以直接获取 $n$ 二进制表示的最低位的 $1$。\n\n由于负数是按照补码规则在计算机中存储的，$-n$ 的二进制表示为 $n$ 的二进制表示的每一位取反再加上 $1$，因此它的原理如下：\n\n> 假设 $n$ 的二进制表示为 $(a 10\\cdots 0)_2$，其中 $a$ 表示若干个高位，$1$ 表示最低位的那个 $1$，$0\\cdots 0$ 表示后面的若干个 $0$，那么 $-n$ 的二进制表示为：\n>\n> $$\n> (\\bar{a} 01\\cdots1)_2 + (1)_2 = (\\bar{a} 10\\cdots0)_2\n> $$\n>\n> 其中 $\\bar{a}$ 表示将 $a$ 每一位取反。我们将 $(a 10\\cdots 0)_2$ 与 $(\\bar{a} 10\\cdots0)_2$ 进行按位与运算，高位全部变为 $0$，最低位的 $1$ 以及之后的所有 $0$ 不变，这样我们就获取了 $n$ 二进制表示的最低位的 $1$。\n\n因此，如果 $n$ 是正整数并且 $\\texttt{n \\& (-n) = n}$，那么 $n$ 就是 $2$ 的幂。\n\n**代码**\n\n下面分别给出两种位运算技巧对应的代码。\n**在一些语言中，位运算的优先级较低，需要注意运算顺序**。\n\n```C++ [sol11-C++]\nclass Solution {\npublic:\n    bool isPowerOfTwo(int n) {\n        return n > 0 && (n & (n - 1)) == 0;\n    }\n};\n```\n\n```Java [sol11-Java]\nclass Solution {\n    public boolean isPowerOfTwo(int n) {\n        return n > 0 && (n & (n - 1)) == 0;\n    }\n}\n```\n\n```C# [sol11-C#]\npublic class Solution {\n    public bool IsPowerOfTwo(int n) {\n        return n > 0 && (n & (n - 1)) == 0;\n    }\n}\n```\n\n```Python [sol11-Python3]\nclass Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        return n > 0 and (n & (n - 1)) == 0\n```\n\n```JavaScript [sol11-JavaScript]\nvar isPowerOfTwo = function(n) {\n    return n > 0 && (n & (n - 1)) === 0;\n};\n```\n\n```go [sol11-Golang]\nfunc isPowerOfTwo(n int) bool {\n    return n > 0 && n&(n-1) == 0\n}\n```\n\n```C [sol11-C]\nbool isPowerOfTwo(int n) {\n    return n > 0 && (n & (n - 1)) == 0;\n}\n```\n\n```C++ [sol12-C++]\nclass Solution {\npublic:\n    bool isPowerOfTwo(int n) {\n        return n > 0 && (n & -n) == n;\n    }\n};\n```\n\n```Java [sol12-Java]\nclass Solution {\n    public boolean isPowerOfTwo(int n) {\n        return n > 0 && (n & -n) == n;\n    }\n}\n```\n\n```C# [sol12-C#]\npublic class Solution {\n    public bool IsPowerOfTwo(int n) {\n        return n > 0 && (n & -n) == n;\n    }\n}\n```\n\n```Python [sol12-Python3]\nclass Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        return n > 0 and (n & -n) == n\n```\n\n```JavaScript [sol12-JavaScript]\nvar isPowerOfTwo = function(n) {\n    return n > 0 && (n & -n) === n;\n};\n```\n\n```go [sol12-Golang]\nfunc isPowerOfTwo(n int) bool {\n    return n > 0 && n&-n == n\n}\n```\n\n```C [sol12-C]\nbool isPowerOfTwo(int n) {\n    return n > 0 && (n & -n) == n;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：判断是否为最大 $2$ 的幂的约数\n\n**思路与算法**\n\n除了使用二进制表示判断之外，还有一种较为取巧的做法。\n\n在题目给定的 $32$ 位有符号整数的范围内，最大的 $2$ 的幂为 $2^{30} = 1073741824$。我们只需要判断 $n$ 是否是 $2^{30}$ 的约数即可。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    static constexpr int BIG = 1 << 30;\n\npublic:\n    bool isPowerOfTwo(int n) {\n        return n > 0 && BIG % n == 0;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    static final int BIG = 1 << 30;\n\n    public boolean isPowerOfTwo(int n) {\n        return n > 0 && BIG % n == 0;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    const int BIG = 1 << 30;\n\n    public bool IsPowerOfTwo(int n) {\n        return n > 0 && BIG % n == 0;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n\n    BIG = 2**30\n\n    def isPowerOfTwo(self, n: int) -> bool:\n        return n > 0 and Solution.BIG % n == 0\n```\n\n```JavaScript [sol2-JavaScript]\nvar isPowerOfTwo = function(n) {\n    const BIG = 1 << 30;\n    return n > 0 && BIG % n === 0;\n};\n```\n\n```go [sol2-Golang]\nfunc isPowerOfTwo(n int) bool {\n    const big = 1 << 30\n    return n > 0 && big%n == 0\n}\n```\n\n```C [sol2-C]\nconst int BIG = 1 << 30;\n\nbool isPowerOfTwo(int n) {\n    return n > 0 && BIG % n == 0;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。\n\n- 空间复杂度：$O(1)$。\n\n---\n## ✨扣友帮帮团 - 互动答疑\n\n[![讨论.jpg](https://pic.leetcode-cn.com/1621178600-MKHFrl-%E8%AE%A8%E8%AE%BA.jpg){:width=260px}](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/)\n\n\n即日起 - 5 月 30 日，点击 [这里](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/) 前往「[扣友帮帮团](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/)」活动页，把你遇到的问题大胆地提出来，让扣友为你解答～\n\n### 🎁 奖励规则\n被采纳数量排名 1～3 名：「力扣极客套装」 *1 并将获得「力扣神秘应援团」内测资格\n被采纳数量排名 4～10 名：「力扣鼠标垫」 *1 并将获得「力扣神秘应援团」内测资格\n「诲人不倦」：活动期间「解惑者」只要有 1 个回答被采纳，即可获得 20 LeetCoins 奖励！\n「求知若渴」：活动期间「求知者」在活动页发起一次符合要求的疑问帖并至少采纳一次「解惑者」的回答，即可获得 20 LeetCoins 奖励！\n\n活动详情猛戳链接了解更多：[🐞 你有 BUG 我来帮 - 力扣互动答疑季](https://leetcode-cn.com/circle/discuss/xtliW6/)"
}