{
	"titleSlug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
	"slug": "-by-wa-pian-d-w3wy",
	"url": "https://leetcode-cn.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/solution/-by-wa-pian-d-w3wy/",
	"content": "### 解题思路\n\n暴力宽搜\n\n每一个点，用distanceThreshold能走多少个点。\n\n\n### 代码\n\n```java\nclass Solution {\n\tpublic int findTheCity(int n, int[][] edges, int distanceThreshold) {\n\t\tint[][] weight = new int[n][n];\n\t\tList<Integer>[] indexs = new ArrayList[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tindexs[i] = new ArrayList<>();\n\t\t}\n\t\tint[] mins = new int[n];\n\t\tArrays.fill(mins, Integer.MAX_VALUE);\n\t\tfor (int i = 0; i < edges.length; i++) {\n\t\t\tint[] e = edges[i];\n\t\t\tint f = e[0], t = e[1], w = e[2];\n\t\t\tmins[f] = Math.min(mins[f], w);\n\t\t\tmins[t] = Math.min(mins[t], w);\n\t\t\tweight[f][t] = w;\n\t\t\tweight[t][f] = w;\n\t\t\tindexs[f].add(t);\n\t\t\tindexs[t].add(f);\n\t\t}\n\t\tint ans = 0, num = n;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (mins[i] > distanceThreshold) {\n\t\t\t\tans = i;\n\t\t\t\tnum = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (num == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tQueue<int[]> queue = new LinkedList<>();\n\t\t\tInteger[] been = new Integer[n];\n\t\t\tbeen[i] = distanceThreshold;\n\t\t\tqueue.add(new int[] { i, distanceThreshold });\n\t\t\tint cnt = 0;\n\t\t\twhile (!queue.isEmpty()) {\n\t\t\t\tint[] cur = queue.poll();\n\t\t\t\tint f = cur[0], rest = cur[1];\n\t\t\t\tList<Integer> next = indexs[f];\n\t\t\t\tfor (int t : next) {\n\t\t\t\t\tif (weight[f][t] <= rest && (been[t] == null || rest - weight[f][t] > been[t])) {\n\t\t\t\t\t\tif (been[t] == null) {\n\t\t\t\t\t\t\tcnt++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbeen[t] = rest - weight[f][t];\n\t\t\t\t\t\tqueue.add(new int[] { t, rest - weight[f][t] });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cnt < num) {\n\t\t\t\tnum = cnt;\n\t\t\t\tans = i;\n\t\t\t} else if (cnt == num) {\n\t\t\t\tans = i;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n```"
}