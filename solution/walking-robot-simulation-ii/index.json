{
	"titleSlug": "walking-robot-simulation-ii",
	"slug": "mo-ni-xing-zou-ji-qi-ren-ii-by-leetcode-lhf24",
	"url": "https://leetcode-cn.com/problems/walking-robot-simulation-ii/solution/mo-ni-xing-zou-ji-qi-ren-ii-by-leetcode-lhf24/",
	"content": "#### 方法一：模拟\n\n**思路与算法**\n\n根据题目描述，我们可以发现：机器人总是会在网格的「最外圈」进行循环移动。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/5911/5911.png){:width=\"40%\"}\n\n因此，我们可以将机器人移动的循环节（位置以及移动方向）预处理出来，存储在数组中，并用一个指针 $\\textit{idx}$ 指向数组中的某个位置，表示当前机器人的位置以及移动方向。\n\n预处理可以分为四个步骤完成。如上图所示，不同颜色的网格表示机器人在对应网格上的不同方向，因此我们可以使用四个循环分别枚举每一种颜色对应的网格的位置，把它们加入预处理的数组即可。\n\n对于题目要求实现的三个接口，我们可以依次实现：\n\n- $\\texttt{void move(int num)}$：我们可以将 $\\textit{idx}$ 的值增加 $\\textit{num}$。由于机器人的移动路径是循环的，我们需要将增加后的值对循环的长度取模。\n\n- $\\texttt{int[] getPos()}$：我们根据 $\\textit{idx}$ 返回预处理数组中的位置即可。\n\n- $\\texttt{String getDir()}$：我们根据 $\\textit{idx}$ 返回预处理数组中的朝向即可。\n\n**细节**\n\n需要注意的是。当机器人回到原点时，它的朝向为「南」，但机器人初始在原点时的朝向为「东」。因此我们可以将预处理数组中原点的朝向改为「南」，并使用一个布尔变量记录机器人是否移动过：\n\n- 如果机器人未移动过，我们总是返回「东」朝向；\n\n- 如果机器人移动过，我们根据 $\\textit{idx}$ 返回预处理数组中的朝向。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Robot {\nprivate:\n    bool moved = false;\n    int idx = 0;\n    vector<pair<int, int>> pos;\n    vector<int> dir;\n    unordered_map<int, string> to_dir = {\n        {0, \"East\"},\n        {1, \"North\"},\n        {2, \"West\"},\n        {3, \"South\"}\n    };\n    \npublic:\n    Robot(int width, int height) {\n        for (int i = 0; i < width; ++i) {\n            pos.emplace_back(i, 0);\n            dir.emplace_back(0);\n        }\n        for (int i = 1; i < height; ++i) {\n            pos.emplace_back(width - 1, i);\n            dir.emplace_back(1);\n        }\n        for (int i = width - 2; i >= 0; --i) {\n            pos.emplace_back(i, height - 1);\n            dir.emplace_back(2);\n        }\n        for (int i = height - 2; i > 0; --i) {\n            pos.emplace_back(0, i);\n            dir.emplace_back(3);\n        }\n        dir[0] = 3;\n    }\n    \n    void move(int num) {\n        moved = true;\n        idx = (idx + num) % pos.size();\n    }\n    \n    vector<int> getPos() {\n        return {pos[idx].first, pos[idx].second};\n    }\n    \n    string getDir() {\n        if (!moved) {\n            return \"East\";\n        }\n        return to_dir[dir[idx]];\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Robot:\n\n    TO_DIR = {\n        0: \"East\",\n        1: \"North\",\n        2: \"West\",\n        3: \"South\",\n    }\n\n    def __init__(self, width: int, height: int):\n        self.moved = False\n        self.idx = 0\n        self.pos = list()\n        self.dirs = list()\n\n        pos_, dirs_ = self.pos, self.dirs\n\n        for i in range(width):\n            pos_.append((i, 0))\n            dirs_.append(0)\n        for i in range(1, height):\n            pos_.append((width - 1, i))\n            dirs_.append(1)\n        for i in range(width - 2, -1, -1):\n            pos_.append((i, height - 1))\n            dirs_.append(2)\n        for i in range(height - 2, 0, -1):\n            pos_.append((0, i))\n            dirs_.append(3)\n\n        dirs_[0] = 3\n\n    def move(self, num: int) -> None:\n        self.moved = True\n        self.idx = (self.idx + num) % len(self.pos)\n\n    def getPos(self) -> List[int]:\n        return list(self.pos[self.idx])\n\n    def getDir(self) -> str:\n        if not self.moved:\n            return \"East\"\n        return Robot.TO_DIR[self.dirs[self.idx]]\n```\n\n**复杂度分析**\n\n- 时间复杂度：预处理的时间复杂度为 $O(\\textit{width} + \\textit{height})$，所有查询接口的时间复杂度均为 $O(1)$。\n\n- 空间复杂度：$O(\\textit{width} + \\textit{height})$，即为存储预处理数组需要的空间。"
}