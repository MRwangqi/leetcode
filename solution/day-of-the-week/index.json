{
	"titleSlug": "day-of-the-week",
	"slug": "yi-zhou-zhong-de-di-ji-tian-by-leetcode-w43iw",
	"url": "https://leetcode-cn.com/problems/day-of-the-week/solution/yi-zhou-zhong-de-di-ji-tian-by-leetcode-w43iw/",
	"content": "#### 方法一：模拟\n\n**思路及解法**\n\n题目规定输入的日期一定是在 $1971$ 到 $2100$ 年之间的有效日期，即在 $1971$ 年 $1$ 月 $1$ 日，到 $2100$ 年 $12$ 月 $31$ 日之间。通过查询日历可知，$1970$ 年 $12$ 月 $31$ 日是星期四，我们只需要算出输入的日期距离 $1970$ 年 $12$ 月 $31$ 日有几天，再加上 $3$ 后对 $7$ 求余，即可得到输入日期是一周中的第几天。\n\n求输入的日期距离 $1970$ 年 $12$ 月 $31$ 日的天数，可以分为三部分分别计算后求和：\n\n（1）输入年份之前的年份的天数贡献；\n（2）输入年份中，输入月份之前的月份的天数贡献；\n（3）输入月份中的天数贡献。\n\n例如，如果输入是 $2100$ 年 $12$ 月 $31$ 日，即可分为三部分分别计算后求和：\n\n（1）$1971$ 年 $1$ 月 $1$ 到 $2099$ 年 $12$ 月 $31$ 日之间所有的天数；\n（2）$2100$ 年 $1$ 月 $1$ 日到 $2100$ 年 $11$ 月 $31$ 日之间所有的天数；\n（3）$2100$ 年 $12$ 月 $1$ 日到 $2100$ 年 $12$ 月 $31$ 日之间所有的天数。\n\n其中（1）和（2）部分的计算需要考虑到闰年的影响。当年份是 $400$ 的倍数或者是 $4$ 的倍数且不是 $100$ 的倍数时，该年会在二月份多出一天。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:\n        week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n        monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30]\n        days = 0\n        # 输入年份之前的年份的天数贡献\n        days += 365 * (year - 1971) + (year - 1969) // 4\n        # 输入年份中，输入月份之前的月份的天数贡献\n        days += sum(monthDays[:month-1])\n        if (year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)) and month >= 3:\n            days += 1\n        # 输入月份中的天数贡献\n        days += day\n\n        return week[(days + 3) % 7]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string dayOfTheWeek(int day, int month, int year) {\n        vector<string> week = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"};\n        vector<int> monthDays = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30};\n        /* 输入年份之前的年份的天数贡献 */\n        int days = 365 * (year - 1971) + (year - 1969) / 4;\n        /* 输入年份中，输入月份之前的月份的天数贡献 */\n        for (int i = 0; i < month - 1; ++i) {\n            days += monthDays[i];\n        }\n        if ((year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) && month >= 3) {\n            days += 1;\n        }\n        /* 输入月份中的天数贡献 */\n        days += day;\n        return week[(days + 3) % 7];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String dayOfTheWeek(int day, int month, int year) {\n        String[] week = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"};\n        int[] monthDays = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30};\n        /* 输入年份之前的年份的天数贡献 */\n        int days = 365 * (year - 1971) + (year - 1969) / 4;\n        /* 输入年份中，输入月份之前的月份的天数贡献 */\n        for (int i = 0; i < month - 1; ++i) {\n            days += monthDays[i];\n        }\n        if ((year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) && month >= 3) {\n            days += 1;\n        }\n        /* 输入月份中的天数贡献 */\n        days += day;\n        return week[(days + 3) % 7];\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string DayOfTheWeek(int day, int month, int year) {\n        string[] week = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"};\n        int[] monthDays = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30};\n        /* 输入年份之前的年份的天数贡献 */\n        int days = 365 * (year - 1971) + (year - 1969) / 4;\n        /* 输入年份中，输入月份之前的月份的天数贡献 */\n        for (int i = 0; i < month - 1; ++i) {\n            days += monthDays[i];\n        }\n        if ((year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) && month >= 3) {\n            days += 1;\n        }\n        /* 输入月份中的天数贡献 */\n        days += day;\n        return week[(days + 3) % 7];\n    }\n}\n```\n\n```C [sol1-C]\nchar * dayOfTheWeek(int day, int month, int year){\n    char * week[7] = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"};\n    int monthDays[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30};\n    /* 输入年份之前的年份的天数贡献 */\n    int days = 365 * (year - 1971) + (year - 1969) / 4;\n    /* 输入年份中，输入月份之前的月份的天数贡献 */\n    for (int i = 0; i < month - 1; ++i) {\n        days += monthDays[i];\n    }\n    if ((year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) && month >= 3) {\n        days += 1;\n    }\n    /* 输入月份中的天数贡献 */\n    days += day;\n    return week[(days + 3) % 7];\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar dayOfTheWeek = function(day, month, year) {\n    const week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    const monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30];\n    /* 输入年份之前的年份的天数贡献 */\n    let days = 365 * (year - 1971) + Math.floor((year - 1969) / 4);\n    /* 输入年份中，输入月份之前的月份的天数贡献 */\n    for (let i = 0; i < month - 1; ++i) {\n        days += monthDays[i];\n    }\n    if ((year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)) && month >= 3) {\n        days += 1;\n    }\n    /* 输入月份中的天数贡献 */\n    days += day;\n    return week[(days + 3) % 7];\n};\n```\n\n```go [sol1-Golang]\nvar week = []string{\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"}\nvar monthDays = []int{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30}\n\nfunc dayOfTheWeek(day, month, year int) string {\n    days := 0\n    // 输入年份之前的年份的天数贡献\n    days += 365*(year-1971) + (year-1969)/4\n    // 输入年份中，输入月份之前的月份的天数贡献\n    for _, d := range monthDays[:month-1] {\n        days += d\n    }\n    if month >= 3 && (year%400 == 0 || year%4 == 0 && year%100 != 0) {\n        days++\n    }\n    // 输入月份中的天数贡献\n    days += day\n    return week[(days+3)%7]\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(C)$，其中 $C$ 为一年中的月份数 $12$。仅需常量时间的数学计算。\n\n- 空间复杂度：$O(C)$，其中 $C$ 为一年中的月份数 $12$。仅需常量空间的数组。"
}