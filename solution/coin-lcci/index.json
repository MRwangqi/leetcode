{
	"titleSlug": "coin-lcci",
	"slug": "ying-bi-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/coin-lcci/solution/ying-bi-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n**思路**\n\n首先考虑一个朴素的方法，我们用 $f(i, v)$ 来表示前 $i$ 种面值的硬币构成面值为 $v$ 的方案数量，用 $c_i$ 来表示第 $i$ 种面值的硬币的面值。\n\n我们可以从 $f(i - 1, v - 0 \\times c_i),f(i - 1, v - 1 \\times c_i), f(i - 1, v - 2 \\times c_i) \\cdots f(i - 1, v - k \\times c_i)$ 转移得到，它们表示第 $i$ 个面值的硬币选 $0, 1, 2 \\cdots k$ 个的时候，构成面值为 $v$ 的方案数量，其中 $k$ 为满足 $v - k \\times c_i \\geq 0$ 的最大整数。于是我们可以推导出这样的动态规划转移方程：\n\n$$\n    f(i, v) = \\sum_{j = 0}^{k} f(i - 1, v - j \\times c_i) \\, , \\,k = \\lfloor \\frac{v}{c_i} \\rfloor \n$$\n\n**这个方程表示什么意思呢？** 这个方程表示前 $i$ 种硬币，构成面值 $v$ 的方案数量由前 $i - 1$ 种面值构成的一些面值的方案数量决定。我们可以考虑 $c_i$ 取多少个，$c_i$ 可以取 $0$ 个、$1$ 个、$2$ 个......最大可以取 $\\lfloor \\frac{v}{c_i} \\rfloor$ 个，那么前 $i$ 种硬币，构成面值 $v$ 的方案数量就是如下项的累加：前 $i - 1$ 种硬币构成面值 $v$ 的方案数量（表示不取 $c_i$），前 $i - 1$ 种硬币构成面值 $v - c_i$ 的方案数量（表示取 $1$ 个 $c_i$），前 $i - 1$ 种硬币构成面值 $v - 2 \\times c_i$ 的方案数量（表示取 $2$ 个 $c_i$），前 $i - 1$ 种硬币构成面值 $v - \\lfloor \\frac{v}{c_i} \\rfloor \\times c_i$ 的方案数量（表示取 $\\lfloor \\frac{v}{c_i} \\rfloor$ 个 $c_i$）。\n\n**举个例子。** 假设这里 $c = \\{1, 5, 10, 25\\}$，在 $i = 4$ 的时候，$c_i = 25$（假设下标从 $1$ 开始），如果我们要求前 $4$ 种面值构成 $90$ 的方案数量，可以这么写：\n\n$$ f(4, 90) = f(3, 90) + f(3, 90 - 25) + f(3, 90 - 2 \\times 25) + f(3, 90 - 3 \\times 25)$$\n\n这里最多取 $3$ 个 $25$，所以等式右边一共有四项，分别代表取 $0$、$1$、$2$、$3$ 个 $25$，即从前 $3$ 种面值构成 $90$、$90 - 25$、$90 - 2 \\times 25$、$90 - 3 \\times 25$ 四个状态中进行选择。\n\n在实现这样一个转移方程的时候，$i$ 的取值有 $4$ 种，$v$ 的取值有 $n + 1$ 种，所以状态总数是 $4(n + 1)$，我们需要用到 $O(4 \\times (n + 1))$ 的空间代价来存取状态。对于每一个状态，我们需要在区间 $[0, k]$ 枚举 $j$，所以计算单个状态的时间代价是 $O(\\lfloor \\frac{v}{c_i} \\rfloor)$，所以总的时间代价是 $O(4 \\times (n + 1) \\times \\lfloor \\frac{v}{c_i} \\rfloor)$。于是我们就可以用三重循环来实现这个朴素的转移方程。\n\n**考虑优化方法。**\n\n**第一步考虑优化时间复杂度。** 我们可以把求和式展开书写：\n$$\nf(i, v) = f(i - 1, v) + \\color{red}{ f(i - 1, v - c_i) + f(i - 1, v - 2 c_i) \\cdots f(i - 1, v - k c_i) }\n$$\n\n共 $k + 1$ 项，其中 $k = \\lfloor \\frac{v}{c_i} \\rfloor$。那么我们可以得到使用 $v - c_i$ 替换 $v$，得到：\n\n$$\nf(i, v - c_i) = \\color{red}{ f(i - 1, v - c_i) + f(i - 1, v - 2 c_i) + f(i - 1, v - 3 c_i) \\cdots f(i - 1, v - k c_i) }\n$$\n\n共 $k$ 项。注意到上面两个方程中标成红色的 $k$ 项是完全相同的，于是我们可以用下面式子的左半部分 $f(i, v - c_i)$ 等价替换上面式子红色的 $k$ 项，得到化简后的转移方程：\n\n$$ f(i, v) = f(i - 1, v) + f(i, v - c_i) $$\n\n这样我们就可以把原来的三重循环变成两重循环，求解每个状态的时间代价是 $O(1)$，总的时间代价为 $O(4 \\times (n + 1))$。\n\n**第二步考虑优化空间复杂度。** 朴素实现的时候我们需要一个 $4 \\times (n + 1)$ 的二维数组。观察方程 $f(i, v) = f(i - 1, c_i) + f(i, v - c_i)$，更新二维数组的第 $i$ 行只和第 $i - 1$ 相关，我们不关心 $[0, i - 2]$ 行——于是我们可以用「滚动数组」思想来优化这个过程。实现的方法有两种。\n\n+ 用两个一维数组来实现转移：通过 $i$ 和 $i - 1$ 的奇偶性相反来实现，即当求到第 $i$ 行那一轮的时候，把第 $({i \\bmod 2}) {\\rm \\, xor \\,} 1$ 行当作是 $i - 1$ 行，这样就只需要两行，循环利用。\n\n+ 用一个一维数组来实现转移：我们用数组 $F[0 \\cdots n]$ 表示，我们在第 $i$ 轮计算之前 $i - 1$ 轮的答案保存在 $F$ 数组中，$F[v]$ 保存的是 $i - 1$ 轮 $f(i - 1, v)$ 的值，在第 $i$ 轮计算结束后，它将保存 $f(i, v)$ 的值。假设第二维从小到大更新，因为 $f(i, v)$ 只和 $f(i, v - c_i)$ 和 $f(i - 1, v)$ 相关，在计算 $f(i, v)$ 但是还没有更新 $F[v]$ 值的时候，$F[v]$ 保存的是上一轮的答案 $f(i - 1, v)$，而 $F[0 \\cdots v - 1]$ 中保存的是 $f(i, v'), v' \\in [0, v - 1]$ 的值，$f(i, v - c_i)$ 包含在其中，所以这么做是可行的。**代码中给出了这种方法的实现，如果这里看不懂可以结合代码。**\n\n这样一来，空间代价就可以从 $O(4 \\times (n + 1))$ 变成 $O(2 \\times (n  + 1))$ 或者 $O(n + 1)$。\n\n**其实这个问题是两个非常经典的问题的组合，其一是「完全背包问题」，其二是「背包方案数问题」，如果读者感兴趣的话可以自行阅读《背包九讲》。掌握了这些常见的背包问题的模型，你对动态规划的理解将更进一步。**\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int mod = 1000000007;\n    static constexpr int coins[4] = {25, 10, 5, 1};\n\npublic:\n    int waysToChange(int n) {\n        vector<int> f(n + 1);\n        f[0] = 1;\n        for (int c = 0; c < 4; ++c) {\n            int coin = coins[c];\n            for (int i = coin; i <= n; ++i) {\n                f[i] = (f[i] + f[i - coin]) % mod;\n            }\n        }\n        return f[n];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    static final int MOD = 1000000007;\n    int[] coins = {25, 10, 5, 1};\n\n    public int waysToChange(int n) {\n        int[] f = new int[n + 1];\n        f[0] = 1;\n        for (int c = 0; c < 4; ++c) {\n            int coin = coins[c];\n            for (int i = coin; i <= n; ++i) {\n                f[i] = (f[i] + f[i - coin]) % MOD;\n            }\n        }\n        return f[n];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def waysToChange(self, n: int) -> int:\n        mod = 10**9 + 7\n        coins = [25, 10, 5, 1]\n\n        f = [1] + [0] * n\n        for coin in coins:\n            for i in range(coin, n + 1):\n                f[i] += f[i - coin]\n        return f[n] % mod\n```\n\n```Golang [sol1-Golang]\nfunc waysToChange(n int) int {\n    dp := make([]int, n + 1)\n    dp[0] = 1\n    coins := []int{1, 5, 10, 25}\n    for i := 0; i < 4; i++ {\n        for j := 1; j <= n; j++ {\n            if j - coins[i] >= 0 {\n                dp[j] += dp[j - coins[i]]\n            }\n        }\n    }\n    return dp[n] % 1000000007\n}\n```\n\n**复杂度**\n\n+ 时间复杂度：上文分析过，方程化简之后的渐进时间复杂度为 $O(4 \\times (n + 1)) = O(n)$。\n+ 空间复杂度：使用滚动数组思想优化后，只需要使用一个长度为 $n + 1$ 的一维数组，故渐进空间复杂度为 $O(n)$。\n\n#### 方法二：数学\n\n**思路**\n\n对于给定的 $n$，我们先枚举 $25$ 分的硬币的个数 $i$，那么剩下的部分我们记为 $r = n - 25 \\times i$，$r$ 可以表示成：\n\n$$ r = 10 \\times a + 5 \\times b + c $$\n\n这里 $a$ 能取的最大值 $a_{0} = \\lfloor \\frac{r}{10} \\rfloor$，当 $a = a_0$ 时限定 $c < 5$ 可以得到这种情况下 $b$ 的最大值 $b_0$，那么令 $c_0 = r - 10 \\times a_0 - 5 \\times b_0$。\n\n考虑选择 $i$ 个 $25$ 分硬币的时候的情况，假设我们选择 $x$ 个 $10$ 分硬币，那么还剩下的金额我们可以表示成：\n\n$$\n    10 \\times (a_0 - x) + 5 \\times b_0 + c_0\n$$\n\n考虑把 $10 \\times (a_0 - x)$ 这一项全部用 $5$ 分硬币来替代，即上面的式子可以化成 $5 (2 a_0 - 2 x + b_0) + c_0$，那么 $5$ 分硬币可以选择的范围是 $[0, 2a_0 -  2x + b_0]$，剩下的用 $1$ 分硬币补齐。也就是说对于 $25$ 分取 $i$ 个，$10$ 分取 $x$ 个的时候方案总数为 $2 a_0 - 2 x + b_0 + 1$，根据等差数列求和的方法，对 $x$ 求和：\n\n$$\n\\sum_{x = 0}^{a_0} (2 a_0 - 2 x + b_0 + 1) = (a_0 + 1)(a_0 + b_0 + 1) \n$$\n\n我们就可以得到 $25$ 分取 $i$ 个的时候的方案总数，枚举 $i$ 并累加即可得到最终的答案。\n\n\n**代码**\n\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    static constexpr int mod = 1000000007;\n\npublic:\n    int waysToChange(int n) {\n        int ans = 0;\n        for (int i = 0; i * 25 <= n; ++i) {\n            int rest = n - i * 25;\n            int a = rest / 10;\n            int b = rest % 10 / 5;\n            ans = (ans + (long long)(a + 1) * (a + b + 1) % mod) % mod;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    static final int MOD = 1000000007;\n\n    public int waysToChange(int n) {\n        int ans = 0;\n        for (int i = 0; i * 25 <= n; ++i) {\n            int rest = n - i * 25;\n            int a = rest / 10;\n            int b = rest % 10 / 5;\n            ans = (ans + (int) ((long) (a + 1) * (a + b + 1) % MOD)) % MOD;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def waysToChange(self, n: int) -> int:\n        mod = 10**9 + 7\n\n        ans = 0\n        for i in range(n // 25 + 1):\n            rest = n - i * 25\n            a, b = rest // 10, rest % 10 // 5\n            ans += (a + 1) * (a + b + 1)\n        return ans % mod\n```\n\n```Golang [sol2-Golang]\nfunc waysToChange(n int) int {\n    ans := 0\n    mod := 1000000007\n    for i := 0; i * 25 <= n; i++ {\n        rest := n - i * 25\n        a, b := rest/10, rest%10/5\n        ans = (ans + (a + 1) * (a + b + 1) % mod) % mod\n    }\n    return ans\n}\n```\n\n\n**复杂度**\n\n- 时间复杂度：这里只使用了一重循环，循环的次数为 $\\lfloor \\frac{n}{25} \\rfloor$，所以渐进时间复杂度为 $O(\\lfloor \\frac{n}{25} \\rfloor) = O(n)$。\n- 空间复杂度：没有使用辅助数组，只用了常数个临时变量（与问题规模 $n$ 无关），故渐进空间复杂度为 $O(1)$。"
}