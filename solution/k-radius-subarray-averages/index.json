{
	"titleSlug": "k-radius-subarray-averages",
	"slug": "ban-jing-wei-k-de-zi-shu-zu-ping-jun-zhi-jqo8",
	"url": "https://leetcode-cn.com/problems/k-radius-subarray-averages/solution/ban-jing-wei-k-de-zi-shu-zu-ping-jun-zhi-jqo8/",
	"content": "#### 方法一：一次遍历\n\n**思路与算法**\n\n根据题目描述，只有当中心位置 $i \\in [k, n-k-1]$ 时，整个长度为 $2k+1$ 的子区间才会完整地落在数组 $\\textit{nums}$ 内部。当 $i < k$ 或者 $i \\geq n-k$ 时，对应的平均值为 $-1$。\n\n因此如果 $k \\geq n-k-1$ 即 $2k+1 \\geq n$，答案数组中所有的元素均为 $-1$。否则，我们首先计算出数组 $\\textit{nums}$ 的前 $2k+1$ 个元素的和，放在答案数组的 $\\textit{ans}[k]$ 中。由于：\n\n$$\n\\left\\{\n\\begin{aligned}\n& \\textit{ans}[i - 1] && = \\textit{nums}[i - k - 1] + \\textit{nums}[i - k] + \\cdots + \\textit{nums}[i + k - 1] \\\\\n& \\textit{ans}[i] && = \\textit{nums}[i - k] + \\cdots + \\textit{nums}[i + k - 1] + \\textit{nums}[i + k]\n\\end{aligned}\n\\right.\n$$\n\n因此随后只需要通过递推式：\n\n$$\n\\textit{ans}[i] = \\textit{ans}[i - 1] + \\textit{nums}[i + k] - \\textit{nums}[i - k - 1]\n$$\n\n即可得到所有中心位置 $i \\in [k, n-k-1]$ 且长度为 $2k+1$ 的子数组的和。最后将每一个和除以 $2k+1$ 即可得到平均数。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> getAverages(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> ans(n, -1);\n        if (k * 2 + 1 <= n) {\n            long long sum = accumulate(nums.begin(), nums.begin() + k * 2 + 1, 0LL);\n            for (int i = k; i + k < n; ++i) {\n                if (i != k) {\n                    sum += nums[i + k] - nums[i - k - 1];\n                }\n                ans[i] = sum / (k * 2 + 1);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        ans = [-1] * n\n        if k * 2 + 1 <= n:\n            total = sum(nums[:k * 2 + 1])\n            for i in range(k, n - k):\n                if i != k:\n                    total += nums[i + k] - nums[i - k - 1]\n                ans[i] = total // (k * 2 + 1)\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。\n\n- 空间复杂度：$O(1)$，这里不计算返回值数组 $\\textit{ans}$ 需要的空间。"
}