{
	"titleSlug": "maximum-ice-cream-bars",
	"slug": "xue-gao-de-zui-da-shu-liang-by-leetcode-ia3m7",
	"url": "https://leetcode-cn.com/problems/maximum-ice-cream-bars/solution/xue-gao-de-zui-da-shu-liang-by-leetcode-ia3m7/",
	"content": "#### 方法一：排序 + 贪心\n\n在给定硬币数量 $\\textit{coins}$ 的情况下，要买到最多的雪糕，应该买最便宜的雪糕，理由如下。\n\n> 假设购买最便宜的雪糕，在总价格不超过 $\\textit{coins}$ 的情况下最多可以购买 $k$ 支雪糕。如果将 $k$ 支最便宜的雪糕中的任意一支雪糕替换成另一支雪糕，则替换后的雪糕的价格大于或等于替换前的雪糕的价格，因此替换后的总价格大于或等于替换前的总价格，允许购买的雪糕数量不可能超过 $k$。因此可以买到的雪糕的最大数量为 $k$。\n\n由此可以得到贪心的解法：对数组 $\\textit{costs}$ 排序，然后按照从小到大的顺序遍历数组元素，对于每个元素，如果该元素不超过剩余的硬币数，则将硬币数减去该元素值，表示购买了这支雪糕，当遇到一个元素超过剩余的硬币数时，结束遍历，此时购买的雪糕数量即为可以购买雪糕的最大数量。\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxIceCream(int[] costs, int coins) {\n        Arrays.sort(costs);\n        int count = 0;\n        int n = costs.length;\n        for (int i = 0; i < n; i++) {\n            int cost = costs[i];\n            if (coins >= cost) {\n                coins -= cost;\n                count++;\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MaxIceCream(int[] costs, int coins) {\n        Array.Sort(costs);\n        int count = 0;\n        int n = costs.Length;\n        for (int i = 0; i < n; i++) {\n            int cost = costs[i];\n            if (coins >= cost) {\n                coins -= cost;\n                count++;\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxIceCream(vector<int>& costs, int coins) {\n        sort(costs.begin(), costs.end());\n        int count = 0;\n        int n = costs.size();\n        for (int i = 0; i < n; i++) {\n            int cost = costs[i];\n            if (coins >= cost) {\n                coins -= cost;\n                count++;\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n};\n```\n\n```C [sol1-C]\nint cmp(int *a, int *b) {\n    return *a - *b;\n}\n\nint maxIceCream(int *costs, int costsSize, int coins) {\n    qsort(costs, costsSize, sizeof(int), cmp);\n    int count = 0;\n    int n = costsSize;\n    for (int i = 0; i < n; i++) {\n        int cost = costs[i];\n        if (coins >= cost) {\n            coins -= cost;\n            count++;\n        } else {\n            break;\n        }\n    }\n    return count;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxIceCream = function(costs, coins) {\n    costs.sort((a, b) => a - b);\n    let count = 0;\n    const n = costs.length;\n    for (let i = 0; i < n; i++) {\n        const cost = costs[i];\n        if (coins >= cost) {\n            coins -= cost;\n            count++;\n        } else {\n            break;\n        }\n    }\n    return count;\n};\n```\n\n```go [sol1-Golang]\nfunc maxIceCream(costs []int, coins int) (ans int) {\n    sort.Ints(costs)\n    for _, c := range costs {\n        if coins < c {\n            break\n        }\n        coins -= c\n        ans++\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{costs}$ 的长度。对数组排序的时间复杂度是 $O(n \\log n)$，遍历数组的时间复杂度是 $O(n)$，因此总时间复杂度是 $O(n \\log n)$。\n\n- 空间复杂度：$O(\\log n)$，其中 $n$ 是数组 $\\textit{costs}$ 的长度。空间复杂度主要取决于排序使用的额外空间。\n\n#### 方法二：计数排序 + 贪心\n\n由于数组 $\\textit{costs}$ 中的元素不会超过 $10^5$，因此可以使用计数排序，将时间复杂度降低到线性。\n\n使用数组 $\\textit{freq}$ 记录数组 $\\textit{costs}$ 中的每个元素出现的次数，其中 $\\textit{freq}[i]$ 表示元素 $i$ 在数组 $\\textit{costs}$ 中出现的次数。仍然使用贪心的思想，买最便宜的雪糕，因此按照下标从小到大的顺序遍历数组 $\\textit{freq}$，对于每个下标，如果该下标不超过剩余的硬币数，则根据下标值和该下标处的元素值计算价格为该下标的雪糕的可以购买的最大数量，然后将硬币数减去购买当前雪糕的花费，当遇到一个下标超过剩余的硬币数时，结束遍历，此时购买的雪糕数量即为可以购买雪糕的最大数量。\n\n```Java [sol2-Java]\nclass Solution {\n    public int maxIceCream(int[] costs, int coins) {\n        int[] freq = new int[100001];\n        for (int cost : costs) {\n            freq[cost]++;\n        }\n        int count = 0;\n        for (int i = 1; i <= 100000; i++) {\n            if (coins >= i) {\n                int curCount = Math.min(freq[i], coins / i);\n                count += curCount;\n                coins -= i * curCount;\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int MaxIceCream(int[] costs, int coins) {\n        int[] freq = new int[100001];\n        foreach (int cost in costs) {\n            freq[cost]++;\n        }\n        int count = 0;\n        for (int i = 1; i <= 100000; i++) {\n            if (coins >= i) {\n                int curCount = Math.Min(freq[i], coins / i);\n                count += curCount;\n                coins -= i * curCount;\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxIceCream(vector<int>& costs, int coins) {\n        vector<int> freq(100001);\n        for (int& cost : costs) {\n            freq[cost]++;\n        }\n        int count = 0;\n        for (int i = 1; i <= 100000; i++) {\n            if (coins >= i) {\n                int curCount = min(freq[i], coins / i);\n                count += curCount;\n                coins -= i * curCount;\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n};\n```\n\n```C [sol2-C]\nint maxIceCream(int *costs, int costsSize, int coins) {\n    int freq[100001];\n    memset(freq, 0, sizeof(freq));\n    for (int i = 0; i < costsSize; i++) {\n        freq[costs[i]]++;\n    }\n    int count = 0;\n    for (int i = 1; i <= 100000; i++) {\n        if (coins >= i) {\n            int curCount = fmin(freq[i], coins / i);\n            count += curCount;\n            coins -= i * curCount;\n        } else {\n            break;\n        }\n    }\n    return count;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxIceCream = function(costs, coins) {\n    const freq = new Array(100001).fill(0);\n    for (const cost of costs) {\n        freq[cost]++;\n    }\n    let count = 0;\n    for (let i = 1; i <= 100000; i++) {\n        if (coins >= i) {\n            const curCount = Math.min(freq[i], Math.floor(coins / i));\n            count += curCount;\n            coins -= i * curCount;\n        } else {\n            break;\n        }\n    }\n    return count;\n};\n```\n\n```go [sol2-Golang]\nfunc maxIceCream(costs []int, coins int) (ans int) {\n    const mx int = 1e5\n    freq := [mx + 1]int{}\n    for _, c := range costs {\n        freq[c]++\n    }\n    for i := 1; i <= mx && coins >= i; i++ {\n        c := min(freq[i], coins/i)\n        ans += c\n        coins -= i * c\n    }\n    return\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + C)$，其中 $n$ 是数组 $\\textit{costs}$ 的长度，$C$ 是数组 $\\textit{costs}$ 中的元素的最大可能值，这道题中 $C=10^5$。\n\n- 空间复杂度：$O(C)$，其中 $C$ 是数组 $\\textit{costs}$ 中的元素的最大可能值，这道题中 $C=10^5$。需要使用 $O(C)$ 的空间记录数组 $\\textit{costs}$ 中的每个元素的次数。"
}