{
	"titleSlug": "cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof",
	"slug": "cong-shang-dao-xia-da-yin-er-cha-shu-ii-fzejw",
	"url": "https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/solution/cong-shang-dao-xia-da-yin-er-cha-shu-ii-fzejw/",
	"content": "#### 方法一：广度优先搜索\n\n**思路和算法**\n\n我们可以用广度优先搜索解决这个问题。\n\n我们可以想到最朴素的方法是用一个二元组 `(node, level)` 来表示状态，它表示某个节点和它所在的层数，每个新进队列的节点的 `level` 值都是父亲节点的 `level` 值加一。最后根据每个点的 `level` 对点进行分类，分类的时候我们可以利用哈希表，维护一个以 `level` 为键，对应节点值组成的数组为值，广度优先搜索结束以后按键 `level` 从小到大取出所有值，组成答案返回即可。\n\n考虑如何优化空间开销：如何不用哈希映射，并且只用一个变量 `node` 表示状态，实现这个功能呢？\n\n我们可以用一种巧妙的方法修改广度优先搜索：\n\n+ 首先根元素入队\n+ 当队列不为空的时候\n    + 求当前队列的长度 $s_i$\n    + 依次从队列中取 $s_i$ 个元素进行拓展，然后进入下一次迭代\n\n它和普通广度优先搜索的区别在于，普通广度优先搜索每次只取一个元素拓展，而这里每次取 $s_i$ 个元素。在上述过程中的第 $i$ 次迭代就得到了二叉树的第 $i$ 层的 $s_i$ 个元素。\n\n为什么这么做是对的呢？我们观察这个算法，可以归纳出这样的[循环不变式](https://baike.baidu.com/item/循环不变式)：第 $i$ 次迭代前，队列中的所有元素就是第 $i$ 层的所有元素，并且按照从左向右的顺序排列。证明它的三条性质（你也可以把它理解成数学归纳法）：\n\n+ **初始化**：$i = 1$ 的时候，队列里面只有 `root`，是唯一的层数为 $1$ 的元素，因为只有一个元素，所以也显然满足「从左向右排列」；\n+ **保持**：如果 $i = k$ 时性质成立，即第 $k$ 轮中出队 $s_k$ 的元素是第 $k$ 层的所有元素，并且顺序从左到右。因为对树进行广度优先搜索的时候由低 $k$ 层的点拓展出的点一定也只能是 $k + 1$ 层的点，并且 $k + 1$ 层的点只能由第 $k$ 层的点拓展到，所以由这 $s_k$ 个点能拓展到下一层所有的 $s_{k+1}$ 个点。又因为队列的先进先出（FIFO）特性，既然第 $k$ 层的点的出队顺序是从左向右，那么第 $k + 1$ 层也一定是从左向右。**至此，我们已经可以通过数学归纳法证明循环不变式的正确性。**\n+ **终止**：因为该循环不变式是正确的，所以按照这个方法迭代之后每次迭代得到的也就是当前层的层次遍历结果。**至此，我们证明了算法是正确的。**\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector <vector <int>> ret;\n        if (!root) {\n            return ret;\n        }\n\n        queue <TreeNode*> q;\n        q.push(root);\n        while (!q.empty()) {\n            int currentLevelSize = q.size();\n            ret.push_back(vector <int> ());\n            for (int i = 1; i <= currentLevelSize; ++i) {\n                auto node = q.front(); q.pop();\n                ret.back().push_back(node->val);\n                if (node->left) q.push(node->left);\n                if (node->right) q.push(node->right);\n            }\n        }\n        \n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> ret = new ArrayList<List<Integer>>();\n        if (root == null) {\n            return ret;\n        }\n\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            List<Integer> level = new ArrayList<Integer>();\n            int currentLevelSize = queue.size();\n            for (int i = 1; i <= currentLevelSize; ++i) {\n                TreeNode node = queue.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n            }\n            ret.add(level);\n        }\n        \n        return ret;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar levelOrder = function(root) {\n    const ret = [];\n    if (!root) {\n        return ret;\n    }\n\n    const q = [];\n    q.push(root);\n    while (q.length !== 0) {\n        const currentLevelSize = q.length;\n        ret.push([]);\n        for (let i = 1; i <= currentLevelSize; ++i) {\n            const node = q.shift();\n            ret[ret.length - 1].push(node.val);\n            if (node.left) q.push(node.left);\n            if (node.right) q.push(node.right);\n        }\n    }\n        \n    return ret;\n};\n```\n\n```golang [sol1-Golang]\nfunc levelOrder(root *TreeNode) [][]int {\n    ret := [][]int{}\n    if root == nil {\n        return ret\n    }\n    q := []*TreeNode{root}\n    for i := 0; len(q) > 0; i++ {\n        ret = append(ret, []int{})\n        p := []*TreeNode{}\n        for j := 0; j < len(q); j++ {\n            node := q[j]\n            ret[i] = append(ret[i], node.Val)\n            if node.Left != nil {\n                p = append(p, node.Left)\n            }\n            if node.Right != nil {\n                p = append(p, node.Right)\n            }\n        }\n        q = p\n    }\n    return ret\n}\n```\n\n**复杂度分析**\n\n记树上所有节点的个数为 $n$。\n\n+ 时间复杂度：每个点进队出队各一次，故渐进时间复杂度为 $O(n)$。\n+ 空间复杂度：队列中元素的个数不超过 $n$ 个，故渐进空间复杂度为 $O(n)$。"
}