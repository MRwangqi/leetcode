{
	"titleSlug": "maximum-score-words-formed-by-letters",
	"slug": "5258-by-ikaruga",
	"url": "https://leetcode-cn.com/problems/maximum-score-words-formed-by-letters/solution/5258-by-ikaruga/",
	"content": "#### 解题思路：\r\n1. 提供的字母集合，每个字母只能用一次\r\n2. 提供的单词集合，每个单词也只能用一次\r\n3. 单词集合的大小，`1 <= words[i].length <= 15`\r\n4. 枚举 words 子集总共 `2^15` 种情况\r\n5. 对每一种情况统计使用了哪些字母\r\n   1. 如果字母超出范围了，就不符合要求\r\n   2. 否则按照字母表计算得分\r\n   3. 记录最大得分\r\n\r\n#### 位压缩：\r\n1. 对于单词集合中每一个词，都可以选择，用/不用\r\n    > 所以就可以用位 `0/1` 来表示\r\n2. 单词集合中每个单词都表示出来，总和就是 $2^N$ 种\r\n    > 可以用 `1 << N` 来表示\r\n3. 当遍历到其中一个组合时，其数字的二进制位表示的就是各个单词的使用状态\r\n    > 比如 5，二进制 101，代表第 0 个和第 2 个单词使用，第 1 个单词不使用\r\n4. 检查时，对于第 `i` 个单词，使用 `1 << i`，得到二进制除了第 `i` 位（顺序是从右至左）其余全 0 的数字\r\n    > 比如第 2 个单词，`1 << 2` 之后得到 4（二进制 100）\r\n5. 再与状态位进行&操作，得到是否使用\r\n    > 4（二进制100）与刚才的 5（二进制101）&操作，得到 true\r\n\r\n#### 代码：\r\n```C++ [-C++]\r\n// 将第（bit）种组合情况，所使用的单词中的字母数量统计出来\r\nvector<int> group(vector<string>& words, int bit)\r\n{\r\n    vector<int> g(26, 0);\r\n    for (int i = 0; i < words.size(); i++)\r\n    {\r\n        if (!(bit & (1 << i))) continue;\r\n        for (auto c : words[i])\r\n        {\r\n            g[c - 'a']++;\r\n        }\r\n    }\r\n    return g;\r\n}\r\n\r\n// 根据规则计算得分\r\nint calcScore(vector<int>& group, vector<int>& lettercnt, vector<int>& score)\r\n{\r\n    int s = 0;\r\n    for (int j = 0; j < 26; j++)\r\n    {\r\n        if (lettercnt[j] < group[j]) return 0;\r\n        s += group[j] * score[j];\r\n    }\r\n    return s;\r\n}\r\n\r\nint maxScoreWords(vector<string>& words, vector<char>& letters, vector<int>& score)\r\n{\r\n    // 统计给出的字母的数量\r\n    vector<int> lettercnt(26, 0);\r\n    for (auto c : letters)\r\n    {\r\n        lettercnt[c - 'a']++;\r\n    }\r\n    \r\n    int ans = 0;\r\n    for (int i = 0; i < (1 << words.size()); i++)\r\n    {\r\n        auto g = group(words, i);\r\n        ans = max(ans, calcScore(g, lettercnt, score));\r\n    }\r\n    return ans;\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n感谢您的观看，希望对您有帮助，欢迎热烈的交流！"
}