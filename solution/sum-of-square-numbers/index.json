{
	"titleSlug": "sum-of-square-numbers",
	"slug": "ping-fang-shu-zhi-he-by-leetcode-solutio-8ydl",
	"url": "https://leetcode-cn.com/problems/sum-of-square-numbers/solution/ping-fang-shu-zhi-he-by-leetcode-solutio-8ydl/",
	"content": "#### 前言\n\n对于给定的非负整数 $c$，需要判断是否存在整数 $a$ 和 $b$，使得 $a^2 + b^2 = c$。可以枚举 $a$ 和 $b$ 所有可能的情况，时间复杂度为 $O(c^2)$。但是暴力枚举有一些情况是没有必要的。例如：当 $c = 20$ 时，当 $a = 1$ 的时候，枚举 $b$ 的时候，只需要枚举到 $b = 5$ 就可以结束了，这是因为 $1^2 + 5^2 = 25 > 20$。当 $b > 5$ 时，一定有 $1^2 + b^2 > 20$。\n\n注意到这一点，可以使用  $\\texttt{sqrt}$ 函数或者双指针降低时间复杂度。\n\n#### 方法一：使用 $\\texttt{sqrt}$ 函数\n\n在枚举 $a$ 的同时，使用 $\\texttt{sqrt}$ 函数找出 $b$。注意：本题 $c$ 的取值范围在 $[0,2^{31} - 1]$，因此在计算的过程中可能会发生 $\\texttt{int}$ 型溢出的情况，需要使用 $\\texttt{long}$ 型避免溢出。\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean judgeSquareSum(int c) {\n        for (long a = 0; a * a <= c; a++) {\n            double b = Math.sqrt(c - a * a);\n            if (b == (int) b) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar judgeSquareSum = function(c) {\n    for (let a = 0; a * a <= c; a++) {\n        const b = Math.sqrt(c - a * a);\n        if (b === parseInt(b)) {\n            return true;\n        }\n    }\n    return false;\n};\n```\n\n```go [sol1-Golang]\nfunc judgeSquareSum(c int) bool {\n    for a := 0; a*a <= c; a++ {\n        rt := math.Sqrt(float64(c - a*a))\n        if rt == math.Floor(rt) {\n            return true\n        }\n    }\n    return false\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool judgeSquareSum(int c) {\n        for (long a = 0; a * a <= c; a++) {\n            double b = sqrt(c - a * a);\n            if (b == (int)b) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n```\n\n```C [sol1-C]\nbool judgeSquareSum(int c) {\n    for (long a = 0; a * a <= c; a++) {\n        double b = sqrt(c - a * a);\n        if (b == (int)b) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\sqrt{c})$。枚举 $a$ 的时间复杂度为 $O(\\sqrt{c})$，对于每个 $a$ 的值，可在 $O(1)$ 的时间内寻找 $b$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：双指针\n\n不失一般性，可以假设 $a \\le b$。初始时 $a = 0$，$b = \\sqrt{c}$，进行如下操作：\n\n- 如果 $a^2 + b^2 = c$，我们找到了题目要求的一个解，返回 $\\text{true}$；\n- 如果 $a^2 + b^2 < c$，此时需要将 $a$ 的值加 $1$，继续查找；\n- 如果 $a^2 + b^2 > c$，此时需要将 $b$ 的值减 $1$，继续查找。\n\n当 $a = b$ 时，结束查找，此时如果仍然没有找到整数 $a$ 和 $b$ 满足 $a^2 + b^2 = c$，则说明不存在题目要求的解，返回 $\\text{false}$。\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean judgeSquareSum(int c) {\n        long left = 0;\n        long right = (long) Math.sqrt(c);\n        while (left <= right) {\n            long sum = left * left + right * right;\n            if (sum == c) {\n                return true;\n            } else if (sum > c) {\n                right--;\n            } else {\n                left++;\n            }\n        }\n        return false;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar judgeSquareSum = function(c) {\n    let left = 0;\n    let right = Math.floor(Math.sqrt(c));\n    while (left <= right) {\n        const sum = left * left + right * right;\n        if (sum === c) {\n            return true;\n        } else if (sum > c) {\n            right--;\n        } else {\n            left++;\n        }\n    }\n    return false;\n};\n```\n\n```go [sol2-Golang]\nfunc judgeSquareSum(c int) bool {\n    left, right := 0, int(math.Sqrt(float64(c)))\n    for left <= right {\n        sum := left*left + right*right\n        if sum == c {\n            return true\n        } else if sum > c {\n            right--\n        } else {\n            left++\n        }\n    }\n    return false\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool judgeSquareSum(int c) {\n        long left = 0;\n        long right = (int)sqrt(c);\n        while (left <= right) {\n            long sum = left * left + right * right;\n            if (sum == c) {\n                return true;\n            } else if (sum > c) {\n                right--;\n            } else {\n                left++;\n            }\n        }\n        return false;\n    }\n};\n```\n\n```C [sol2-C]\nbool judgeSquareSum(int c) {\n    long left = 0;\n    long right = (int)sqrt(c);\n    while (left <= right) {\n        long sum = left * left + right * right;\n        if (sum == c) {\n            return true;\n        } else if (sum > c) {\n            right--;\n        } else {\n            left++;\n        }\n    }\n    return false;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\sqrt{c})$。最坏情况下 $a$ 和 $b$ 一共枚举了 $0$ 到 $\\sqrt{c}$ 里的所有整数。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法三：数学\n\n费马平方和定理告诉我们：\n\n> 一个非负整数 $c$ 如果能够表示为两个整数的平方和，当且仅当 $c$ 的所有形如 $4k + 3$ 的**质因子**的幂均为偶数。\n\n证明请见 [这里](http://wstein.org/edu/124/lectures/lecture21/lecture21/node2.html)。\n\n因此我们需要对 $c$ 进行**质因数分解**，再判断**所有**形如 $4k + 3$ 的质因子的幂是否均为偶数即可。\n\n```Java [sol3-Java]\nclass Solution {\n    public boolean judgeSquareSum(int c) {\n        for (int base = 2; base * base <= c; base++) {\n            // 如果不是因子，枚举下一个\n            if (c % base != 0) {\n                continue;\n            }\n\n            // 计算 base 的幂\n            int exp = 0;\n            while (c % base == 0) {\n                c /= base;\n                exp++;\n            }\n\n            // 根据 Sum of two squares theorem 验证\n            if (base % 4 == 3 && exp % 2 != 0) {\n                return false;\n            }\n        }\n\n      \t// 例如 11 这样的用例，由于上面的 for 循环里 base * base <= c ，base == 11 的时候不会进入循环体\n      \t// 因此在退出循环以后需要再做一次判断\n        return c % 4 != 3;\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar judgeSquareSum = function(c) {\n    for (let base = 2; base * base <= c; base++) {\n        // 如果不是因子，枚举下一个\n        if (c % base !== 0) {\n            continue;\n        }\n\n        // 计算 base 的幂\n        let exp = 0;\n        while (c % base == 0) {\n            c /= base;\n            exp++;\n        }\n\n        // 根据 Sum of two squares theorem 验证\n        if (base % 4 === 3 && exp % 2 !== 0) {\n            return false;\n        }\n    }\n\n    // 例如 11 这样的用例，由于上面的 for 循环里 base * base <= c ，base == 11 的时候不会进入循环体\n    // 因此在退出循环以后需要再做一次判断\n    return c % 4 !== 3;\n};\n```\n\n```go [sol3-Golang]\nfunc judgeSquareSum(c int) bool {\n    for base := 2; base*base <= c; base++ {\n        // 如果不是因子，枚举下一个\n        if c%base > 0 {\n            continue\n        }\n\n        // 计算 base 的幂\n        exp := 0\n        for ; c%base == 0; c /= base {\n            exp++\n        }\n\n        // 根据 Sum of two squares theorem 验证\n        if base%4 == 3 && exp%2 != 0 {\n            return false\n        }\n    }\n\n    // 例如 11 这样的用例，由于上面的 for 循环里 base * base <= c ，base == 11 的时候不会进入循环体\n    // 因此在退出循环以后需要再做一次判断\n    return c%4 != 3\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    bool judgeSquareSum(int c) {\n        for (int base = 2; base * base <= c; base++) {\n            // 如果不是因子，枚举下一个\n            if (c % base != 0) {\n                continue;\n            }\n\n            // 计算 base 的幂\n            int exp = 0;\n            while (c % base == 0) {\n                c /= base;\n                exp++;\n            }\n\n            // 根据 Sum of two squares theorem 验证\n            if (base % 4 == 3 && exp % 2 != 0) {\n                return false;\n            }\n        }\n\n        // 例如 11 这样的用例，由于上面的 for 循环里 base * base <= c ，base == 11 的时候不会进入循环体\n        // 因此在退出循环以后需要再做一次判断\n        return c % 4 != 3;\n    }\n};\n```\n\n```C [sol3-C]\nbool judgeSquareSum(int c) {\n    for (int base = 2; base * base <= c; base++) {\n        // 如果不是因子，枚举下一个\n        if (c % base != 0) {\n            continue;\n        }\n\n        // 计算 base 的幂\n        int exp = 0;\n        while (c % base == 0) {\n            c /= base;\n            exp++;\n        }\n\n        // 根据 Sum of two squares theorem 验证\n        if (base % 4 == 3 && exp % 2 != 0) {\n            return false;\n        }\n    }\n\n    // 例如 11 这样的用例，由于上面的 for 循环里 base * base <= c ，base == 11 的时候不会进入循环体\n    // 因此在退出循环以后需要再做一次判断\n    return c % 4 != 3;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\sqrt{c})$。\n\n* 空间复杂度：$O(1)$。\n\n---\n# [📚 好读书？读好书！让时间更有价值| 世界读书日](https://leetcode-cn.com/circle/discuss/12QtuI/)\n4 月 22 日至 4 月 28 日，进入「[学习](https://leetcode-cn.com/leetbook/)」，完成页面右上角的「让时间更有价值」限时阅读任务，可获得「2021 读书日纪念勋章」。更多活动详情戳上方标题了解更多👆\n#### 今日学习任务：\n- 了解构造函数引用\n[完成阅读 1.3 构造函数引用与讨论](https://leetcode-cn.com/leetbook/read/modern-java-recipes/9i21ds/)\n- 了解并行流\n[完成阅读 9.1 ~ 9.2（含讨论）](https://leetcode-cn.com/leetbook/read/modern-java-recipes/9zjzzh/)"
}