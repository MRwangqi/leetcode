{
	"titleSlug": "product-of-the-last-k-numbers",
	"slug": "zui-hou-k-ge-shu-de-cheng-ji-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/product-of-the-last-k-numbers/solution/zui-hou-k-ge-shu-de-cheng-ji-by-leetcode-solution/",
	"content": "#### 方法一：\n\n\n如果没有 $0$ 的话，直接考虑维护一个前缀积 $pre[i]$ 表示前 $i$ 个数的乘积即可，答案就是 $\\frac{pre[n]}{pre[n-k]}$，其中 $n$ 表示当前 $pre$ 数组的长度。那么如何处理 $0$ 呢？可以注意到如果出现 $0$ 的话，那么 $0$ 之前的数对答案都是没有用的了，所以我们可以遇到 $0$ 的时候直接清空 $pre$ 数组，那么询问的时候我们要求的是末尾 $k$ 个数的乘积，如果这时候我们 $pre$ 数组的长度小于 $k$，说明末尾 $k$ 个数里肯定有 $0$，直接输出 $0$ 即可，否则输出 $\\frac{pre[n]}{pre[n-k]}$，简言之：\n$$\ngetProduct(k)=\\left\\{\\begin{matrix}\n0, n< k\\\\ \n\\frac{pre[n]}{pre[n-k]},n\\geq k\n\\end{matrix}\\right.\n$$\n，其中$n=pre.length()$。\n\n```C++ []\nclass ProductOfNumbers {\npublic:\n    #define N 40010\n    int len,pre[N];\n    ProductOfNumbers() {\n        pre[0]=1;\n        len=0;\n    }\n    \n    void add(int num) {\n        if (!num) len=0;\n        else{\n            pre[++len]=num;\n            pre[len]*=pre[len-1];\n        }\n    }\n    \n    int getProduct(int k) {\n        if (len<k) return 0;\n        return pre[len]/pre[len-k];\n    }\n};\n\n/**\n * Your ProductOfNumbers object will be instantiated and called as such:\n * ProductOfNumbers* obj = new ProductOfNumbers();\n * obj->add(num);\n * int param_2 = obj->getProduct(k);\n */\n```\n\n\n\n**复杂度分析**\n\n- **时间复杂度：**$add$ 和 $getProduct$ 复杂度均为 $O(1)$。\n- **空间复杂度**：$O(n)$，需要额外提供一个辅助数组。\n\n#### 方法二：\n\n\n注意到题目说了一句话：**题目数据保证：任何时候，任一连续数字序列的乘积都在 32-bit 整数范围内，不会溢出**，这其实告诉了我们如果只乘大于 $1$ 的数话，数字序列长度最多不会超过 $32$，因为大于 $1$ 最小的数 $2$ 的连着 $32$ 个乘起来已经达到题目乘积的上界，所以我们只需要忽略 $0$ 和 $1$，在查询的时候暴力乘复杂度就能得到保证。\n\n\n\n开三个数组：\n\n- $vec[i]$：存加入的数字 $vec[i]$\n- $cnt[i]$：前 $i$ 数里 $0$ 的个数和，即 $0$ 个数的前缀和\n- $pre[i]$：$[0..i-1]$ 最后一个非 $0$ 和非 $1$ 的位置\n\n对于 $add$ 操作：主要是 $cnt$ 和 $pre$ 数组怎么更新，由于 $cnt$ 存的是 $0$ 个数的前缀和，所以可以得到\n$$\ncnt[n]=cnt[n-1]+(num==0)\n$$\n对于 $pre$ 数组，由定义也很容易得到转移式：\n$$\npre[n]=\\left\\{\\begin{matrix}\npre[n-1], vec[n-1]<=1\\\\ \nn-1,vec[n-1]>1\n\\end{matrix}\\right.\n$$\n更新都是 $O(1)$ 的。\n\n对于 $getProduct$ 操作：先通过 $cnt$ 数组差分得到末尾 $k$ 个数里 $0$ 的个数，如果大于 $0$ 直接返回 $0$ 即可，否则就根据 $pre[i]$ 从最后一个位置开始不断往前跳然后计算答案，直到跳过 $k$ 个数结束，根据前面的性质分析我们会知道这个过程最多跳 $32$ 次。\n\n\n\n```C++ []\nclass ProductOfNumbers {\npublic:\n    vector<int>vec,zero,pre;\n    int n;\n    ProductOfNumbers() {\n        vec.clear();\n        zero.clear();\n        pre.clear();\n        n=0;\n    }\n    \n    void add(int num) {\n        n++;\n        vec.push_back(num);\n        pre.push_back(-1);\n        if (n>1){\n            if (vec[n-2]!=1 && vec[n-2]!=0) pre[n-1]=n-2;\n            else pre[n-1]=pre[n-2];\n        }\n        zero.push_back(num==0?1:0);\n        if (n>1) zero[n-1]+=zero[n-2];\n    }\n    \n    int getProduct(int k) {\n        int tot=zero[n-1];\n        if (n-k>=1) tot-=zero[n-1-k];\n        if (tot>0) return 0;\n        int ans=1;\n        for (int i=n-1;i>=n-k;){\n            ans*=vec[i];\n            i=pre[i];\n        }\n        return ans;\n    }\n};\n```\n\n\n\n**复杂度分析**\n\n- **时间复杂度：**$add$ 操作复杂度为 $O(1)$ 和 $getProduct$ 操作复杂度最坏情况为 $O(log_2S)$，$S$ 为值域的上界。\n- **空间复杂度**：$O(n)$，需要额外提供三个辅助数组。"
}