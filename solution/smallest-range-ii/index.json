{
	"titleSlug": "smallest-range-ii",
	"slug": "zui-xiao-chai-zhi-ii-by-leetcode",
	"url": "https://leetcode-cn.com/problems/smallest-range-ii/solution/zui-xiao-chai-zhi-ii-by-leetcode/",
	"content": "#### 方法 1：线性扫描\n\n**想法**\n\n如  **最小差值 I** 问题的解决方法，较小的 `A[i]` 将增加，较大的 `A[i]` 将变小。\n\n**算法**\n\n我们可以对上述想法形式化表述：如果 `A[i] < A[j]`，我们不必考虑当 `A[i]` 增大时 `A[j]` 会减小。这是因为区间 `(A[i] + K, A[j] - K)` 是 `(A[i] - K, A[j] + K)` 的子集（这里，当 `a > b` 时 `(a, b)` 表示 `(b, a)` ）。\n\n这意味着对于 `(up, down)` 的选择一定不会差于 `(down, up)`。我们可以证明其中一个区间是另一个的子集，通过证明 `A[i] + K` 和 `A[j] - K` 是在 `A[i] - K` 和 `A[j] + K` 之间。\n\n对于有序的 `A`，设 `A[i]` 是最大的需要增长的 `i`，那么 `A[0] + K, A[i] + K, A[i+1] - K, A[A.length - 1] - K` 就是计算结果的唯一值。\n\n\n```Java []\nclass Solution {\n    public int smallestRangeII(int[] A, int K) {\n        int N = A.length;\n        Arrays.sort(A);\n        int ans = A[N-1] - A[0];\n\n        for (int i = 0; i < A.length - 1; ++i) {\n            int a = A[i], b = A[i+1];\n            int high = Math.max(A[N-1] - K, a + K);\n            int low = Math.min(A[0] + K, b - K);\n            ans = Math.min(ans, high - low);\n        }\n        return ans;\n    }\n}\n```\n\n```Python []\nclass Solution(object):\n    def smallestRangeII(self, A, K):\n        A.sort()\n        mi, ma = A[0], A[-1]\n        ans = ma - mi\n        for i in xrange(len(A) - 1):\n            a, b = A[i], A[i+1]\n            ans = min(ans, max(ma-K, a+K) - min(mi+K, b-K))\n        return ans\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log N)$，其中 $N$ 是 `A` 的长度。\n* 空间复杂度：$O(1)$，额外空间就是自带排序算法的空间。"
}