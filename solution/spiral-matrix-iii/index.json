{
	"titleSlug": "spiral-matrix-iii",
	"slug": "luo-xuan-ju-zhen-iii-by-leetcode",
	"url": "https://leetcode-cn.com/problems/spiral-matrix-iii/solution/luo-xuan-ju-zhen-iii-by-leetcode/",
	"content": "#### 方法：螺旋形行走\n\n**思路**\n\n我们可以从开始的正方形开始，以螺旋形的形状行走，而忽略我们是否呆在网格中。最终，我们一定已经到达了网格的每一个角落。\n\n**算法**\n\n检查我们在每个方向的行走长度，我们发现如下模式：`1，1，2，2，3，3，4，4，...` 即我们先向东走 1 单位，然后向南走 1 单位，再向西走 2 单位，再向北走 2 单位，再向东走 3 单位，等等。因为我们的行走方式是自相似的，所以这种模式会以我们期望的方式重复。\n\n之后，算法很简单：按照我们访问的顺序执行遍历并记录网格的位置。有关更多细节，请阅读内联注释。\n\n```java [ZbnuoMgN-Java]\nclass Solution {\n    public int[][] spiralMatrixIII(int R, int C, int r0, int c0) {\n        int[] dr = new int[]{0, 1, 0, -1};\n        int[] dc = new int[]{1, 0, -1, 0};\n\n        int[][] ans = new int[R*C][2];\n        int t = 0;\n\n        ans[t++] = new int[]{r0, c0};\n        if (R * C == 1) return ans;\n\n        for (int k = 1; k < 2*(R+C); k += 2)\n            for (int i = 0; i < 4; ++i) {  // i: direction index\n                int dk = k + (i / 2);  // number of steps in this direction\n                for (int j = 0; j < dk; ++j) {  // for each step in this direction...\n                    // step in the i-th direction\n                    r0 += dr[i];\n                    c0 += dc[i];\n                    if (0 <= r0 && r0 < R && 0 <= c0 && c0 < C) {\n                        ans[t++] = new int[]{r0, c0};\n                        if (t == R * C) return ans;\n                    }\n                }\n            }\n\n        throw null;\n    }\n}\n```\n```python [ZbnuoMgN-Python]\nclass Solution(object):\n    def spiralMatrixIII(self, R, C, r0, c0):\n        ans = [(r0, c0)]\n        if R * C == 1: return ans\n\n        # For walk length k = 1, 3, 5 ...\n        for k in xrange(1, 2*(R+C), 2):\n\n            # For direction (dr, dc) = east, south, west, north;\n            # and walk length dk...\n            for dr, dc, dk in ((0, 1, k), (1, 0, k), (0, -1, k+1), (-1, 0, k+1)):\n\n                # For each of dk units in the current direction ...\n                for _ in xrange(dk):\n                    # Step in that direction\n                    r0 += dr\n                    c0 += dc\n\n                    # If on the grid ...\n                    if 0 <= r0 < R and 0 <= c0 < C:\n                        ans.append((r0, c0))\n                        if len(ans) == R * C:\n                            return ans\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O((\\max(R, C))^2)$，潜在地，我们的行走需要螺旋式行进，直到我们向一个方向移动 $R$，向另一个方向移动 $C$，以便到达网格的每个单元格。\n\n* 空间复杂度：$O(R * C)$，答案用去的空间。"
}