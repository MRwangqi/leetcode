{
	"titleSlug": "range-sum-query-immutable",
	"slug": "qu-yu-he-jian-suo-shu-zu-bu-ke-bian-by-l-px41",
	"url": "https://leetcode-cn.com/problems/range-sum-query-immutable/solution/qu-yu-he-jian-suo-shu-zu-bu-ke-bian-by-l-px41/",
	"content": "#### 方法一：前缀和\n\n最朴素的想法是存储数组 $\\textit{nums}$ 的值，每次调用 $\\text{sumRange}$ 时，通过循环的方法计算数组 $\\textit{nums}$ 从下标 $i$ 到下标 $j$ 范围内的元素和，需要计算 $j-i+1$ 个元素的和。由于每次检索的时间和检索的下标范围有关，因此检索的时间复杂度较高，如果检索次数较多，则会超出时间限制。\n\n由于会进行多次检索，即多次调用 $\\text{sumRange}$，因此为了降低检索的总时间，应该降低 $\\text{sumRange}$ 的时间复杂度，最理想的情况是时间复杂度 $O(1)$。为了将检索的时间复杂度降到 $O(1)$，需要在初始化的时候进行预处理。\n\n注意到当 $i \\le j$ 时，$\\text{sumRange}(i,j)$ 可以写成如下形式：\n\n$$\n\\begin{aligned}\n&\\quad \\ \\text{sumRange}(i,j) \\\\\n&=\\sum\\limits_{k=i}^j \\textit{nums}[k] \\\\\n&= \\sum\\limits_{k=0}^j \\textit{nums}[k] - \\sum\\limits_{k=0}^{i-1} \\textit{nums}[k]\n\\end{aligned}\n$$\n\n由此可知，要计算 $\\text{sumRange}(i,j)$，则需要计算数组 $\\textit{nums}$ 在下标 $j$ 和下标 $i-1$ 的前缀和，然后计算两个前缀和的差。\n\n如果可以在初始化的时候计算出数组 $\\textit{nums}$ 在每个下标处的前缀和，即可满足每次调用 $\\text{sumRange}$ 的时间复杂度都是 $O(1)$。\n\n具体实现方面，假设数组 $\\textit{nums}$ 的长度为 $n$，创建长度为 $n+1$ 的前缀和数组 $\\textit{sums}$，对于 $0 \\le i<n$ 都有 $\\textit{sums}[i+1]=\\textit{sums}[i]+\\textit{nums}[i]$，则当 $0<i \\le n$ 时，$\\textit{sums}[i]$ 表示数组 $\\textit{nums}$ 从下标 $0$ 到下标 $i-1$ 的前缀和。\n\n将前缀和数组 $\\textit{sums}$ 的长度设为 $n+1$ 的目的是为了方便计算 $\\text{sumRange}(i,j)$，不需要对 $i=0$ 的情况特殊处理。此时有：\n\n$$\\text{sumRange}(i,j)=\\textit{sums}[j+1]-\\textit{sums}[i]$$\n\n```Java [sol1-Java]\nclass NumArray {\n    int[] sums;\n\n    public NumArray(int[] nums) {\n        int n = nums.length;\n        sums = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            sums[i + 1] = sums[i] + nums[i];\n        }\n    }\n    \n    public int sumRange(int i, int j) {\n        return sums[j + 1] - sums[i];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar NumArray = function(nums) {\n    const n = nums.length;\n    this.sums = new Array(n + 1).fill(0);\n    for (let i = 0; i < n; i++) {\n        this.sums[i + 1] = this.sums[i] + nums[i];\n    }\n};\n\nNumArray.prototype.sumRange = function(i, j) {\n    return this.sums[j + 1] - this.sums[i];\n};\n```\n\n```go [sol1-Golang]\ntype NumArray struct {\n    sums []int\n}\n\nfunc Constructor(nums []int) NumArray {\n    sums := make([]int, len(nums)+1)\n    for i, v := range nums {\n        sums[i+1] = sums[i] + v\n    }\n    return NumArray{sums}\n}\n\nfunc (na *NumArray) SumRange(i, j int) int {\n    return na.sums[j+1] - na.sums[i]\n}\n```\n\n```Python [sol1-Python3]\nclass NumArray:\n\n    def __init__(self, nums: List[int]):\n        self.sums = [0]\n        _sums = self.sums\n\n        for num in nums:\n            _sums.append(_sums[-1] + num)\n\n    def sumRange(self, i: int, j: int) -> int:\n        _sums = self.sums\n        return _sums[j + 1] - _sums[i]\n```\n\n```C++ [sol1-C++]\nclass NumArray {\npublic:\n    vector<int> sums;\n\n    NumArray(vector<int>& nums) {\n        int n = nums.size();\n        sums.resize(n + 1);\n        for (int i = 0; i < n; i++) {\n            sums[i + 1] = sums[i] + nums[i];\n        }\n    }\n\n    int sumRange(int i, int j) {\n        return sums[j + 1] - sums[i];\n    }\n};\n```\n\n```C [sol1-C]\ntypedef struct {\n    int* sums;\n} NumArray;\n\nNumArray* numArrayCreate(int* nums, int numsSize) {\n    NumArray* ret = malloc(sizeof(NumArray));\n    ret->sums = malloc(sizeof(int) * (numsSize + 1));\n    ret->sums[0] = 0;\n    for (int i = 0; i < numsSize; i++) {\n        ret->sums[i + 1] = ret->sums[i] + nums[i];\n    }\n    return ret;\n}\n\nint numArraySumRange(NumArray* obj, int i, int j) {\n    return obj->sums[j + 1] - obj->sums[i];\n}\n\nvoid numArrayFree(NumArray* obj) {\n    free(obj->sums);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：初始化 $O(n)$，每次检索 $O(1)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n  初始化需要遍历数组 $\\textit{nums}$ 计算前缀和，时间复杂度是 $O(n)$。\n  每次检索只需要得到两个下标处的前缀和，然后计算差值，时间复杂度是 $O(1)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。需要创建一个长度为 $n+1$ 的前缀和数组。"
}