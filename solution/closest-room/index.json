{
	"titleSlug": "closest-room",
	"slug": "zui-jin-de-fang-jian-by-leetcode-solutio-9ylf",
	"url": "https://leetcode-cn.com/problems/closest-room/solution/zui-jin-de-fang-jian-by-leetcode-solutio-9ylf/",
	"content": "#### 方法一：离线算法\n\n**提示 $1$**\n\n如果我们可以将给定的房间和询问重新排序，那么是否可以使得问题更加容易解决？\n\n**提示 $2$**\n\n我们可以将房间以及询问都看成一个「事件」，如果我们将这些「事件」按照大小（房间的 $\\textit{size}$ 或者询问的 $\\textit{minSize}$）进行降序排序，那么：\n\n- 如果我们遇到一个表示房间的「事件」，那么可以将该房间的 $\\textit{roomId}$ 加入某一「数据结构」中；\n- 如果我们遇到一个表示询问的「事件」，那么需要在「数据结构」中寻找与 $\\textit{preferred}$ 最接近的 $\\textit{roomId}$。\n\n**提示 $3$**\n\n你能想出一种合适的「数据结构」吗？\n\n**思路与算法**\n\n我们使用「有序集合」作为提示中的「数据结构」。\n\n根据提示 $2$，我们将每一个房间以及询问对应一个「事件」，放入数组中进行降序排序。随后我们遍历这些「事件」：\n\n- 如果我们遇到一个表示房间的「事件」，那么将该该房间的 $\\textit{roomId}$ 加入「有序集合」中；\n- 如果我们遇到一个表示询问的「事件」，那么答案即为「有序集合」中与询问的 $\\textit{preferred}$ 最接近的那个 $\\textit{roomId}$。在大部分语言的「有序集合」的 API 中，提供了例如「在有序集合中查找最小的大于等于 $x$ 的元素」或者「在有序集合中查找最小的严格大于 $x$ 的元素」，我们可以利用这些 API 找出「有序集合」中与 $\\textit{preferred}$ 最接近的两个元素，其中一个小于 $\\textit{preferred}$，另一个大于等于 $\\textit{preferred}$。通过比较这两个元素，我们即可得到该询问对应的答案。\n\n**细节**\n\n如果不同类型的「事件」的位置相同，那么我们应当按照先处理表示房间的「事件」，再处理表示询问的「事件」，这是因为房间的 $\\textit{size}$ 只要大于等于询问的 $\\textit{minSize}$ 就是满足要求的。\n\n**代码**\n\n```C++ [sol1-C++]\nstruct Event {\n    // 事件的类型，0 表示房间，1 表示询问\n    int type;\n    // 房间的 size 或者询问的 minSize\n    int size;\n    // 房间的 roomId 或者询问的 preferred\n    int id;\n    // 房间在数组 room 中的原始编号或者询问在数组 queries 中的原始编号\n    int origin;\n    \n    Event(int _type, int _size, int _id, int _origin): type(_type), size(_size), id(_id), origin(_origin) {}\n    \n    // 自定义比较函数，按照事件的 size 降序排序\n    // 如果 size 相同，优先考虑房间\n    bool operator< (const Event& that) const {\n        return size > that.size || (size == that.size && type < that.type);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> closestRoom(vector<vector<int>>& rooms, vector<vector<int>>& queries) {\n        int m = rooms.size();\n        int n = queries.size();\n        \n        vector<Event> events;\n        for (int i = 0; i < m; ++i) {\n            // 房间事件\n            events.emplace_back(0, rooms[i][1], rooms[i][0], i);\n        }\n        for (int i = 0; i < n; ++i) {\n            // 询问事件\n            events.emplace_back(1, queries[i][1], queries[i][0], i);\n        }\n\n        sort(events.begin(), events.end());\n        \n        vector<int> ans(n, -1);\n        // 存储房间 roomId 的有序集合\n        set<int> valid;\n        for (const auto& event: events) {\n            if (event.type == 0) {\n                // 房间事件，将 roomId 加入有序集合\n                valid.insert(event.id);\n            }\n            else {\n                // 询问事件\n                int dist = INT_MAX;\n                // 查找最小的大于等于 preferred 的元素\n                auto it = valid.lower_bound(event.id);\n                if (it != valid.end() && *it - event.id < dist) {\n                    dist = *it - event.id;\n                    ans[event.origin] = *it;\n                }\n                if (it != valid.begin()) {\n                    // 查找最大的严格小于 preferred 的元素\n                    it = prev(it);\n                    if (event.id - *it <= dist) {\n                        dist = event.id - *it;\n                        ans[event.origin] = *it;\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Event:\n    \"\"\"\n    op: 事件的类型，0 表示房间，1 表示询问\n    size: 房间的 size 或者询问的 minSize\n    idx: 房间的 roomId 或者询问的 preferred\n    origin: 房间在数组 room 中的原始编号或者询问在数组 queries 中的原始编号\n    \"\"\"\n    def __init__(self, op: int, size: int, idx: int, origin: int):\n        self.op = op\n        self.size = size\n        self.idx = idx\n        self.origin = origin\n\n    \"\"\"\n    自定义比较函数，按照事件的 size 降序排序\n    如果 size 相同，优先考虑房间\n    \"\"\"\n    def __lt__(self, other: \"Event\") -> bool:\n        return self.size > other.size or (self.size == other.size and self.op < other.op)\n\nclass Solution:\n    def closestRoom(self, rooms: List[List[int]], queries: List[List[int]]) -> List[int]:\n        n = len(queries)\n\n        events = list()\n        for i, (roomId, size) in enumerate(rooms):\n            # 房间事件\n            events.append(Event(0, size, roomId, i))\n\n        for i, (minSize, preferred) in enumerate(queries):\n            # 询问事件\n            events.append(Event(1, preferred, minSize, i))\n\n        events.sort()\n\n        ans = [-1] * n\n        # 存储房间 roomId 的有序集合\n        # 需要导入 sortedcontainers 库\n        valid = sortedcontainers.SortedList()\n        for event in events:\n            if event.op == 0:\n                # 房间事件，将 roomId 加入有序集合\n                valid.add(event.idx)\n            else:\n                # 询问事件\n                dist = float(\"inf\")\n                # 查找最小的大于等于 preferred 的元素\n                x = valid.bisect_left(event.idx)\n                if x != len(valid) and valid[x] - event.idx < dist:\n                    dist = valid[x] - event.idx\n                    ans[event.origin] = valid[x]\n                if x != 0:\n                    # 查找最大的严格小于 preferred 的元素\n                    x -= 1\n                    if event.idx - valid[x] <= dist:\n                        dist = event.idx - valid[x]\n                        ans[event.origin] = valid[x]\n            \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O((n+q) \\log (n+q))$，其中 $n$ 是数组 $\\textit{rooms}$ 的长度，$q$ 是数组 $\\textit{queries}$ 的长度。「事件」的数量为 $n+q = O(n+q)$，因此需要 $O((n+q) \\log (n+q))$ 的时间进行排序。在这之后，我们需要 $O(n+q)$ 的时间对事件进行遍历，而对有序集合进行操作的单次时间复杂度为 $O(\\log n)$，总时间复杂度为 $O((n+q) \\log n)$，在渐进意义下小于前者，可以忽略。\n\n- 空间复杂度：$O(n+q)$。我们需要 $O(n+q)$ 的空间存储「事件」，以及 $O(n)$ 的空间分配给有序集合，因此总空间复杂度为 $O(n+q)$。"
}