{
	"titleSlug": "D0F0SV",
	"slug": "pai-lie-de-shu-mu-by-leetcode-solution-og7w",
	"url": "https://leetcode-cn.com/problems/D0F0SV/solution/pai-lie-de-shu-mu-by-leetcode-solution-og7w/",
	"content": "#### 方法一：动态规划\n\n这道题中，给定数组 $\\textit{nums}$ 和目标值 $\\textit{target}$，要求计算从 $\\textit{nums}$ 中选取若干个元素，使得它们的和等于 $\\textit{target}$ 的方案数。其中，$\\textit{nums}$ 的每个元素可以选取多次，且需要考虑选取元素的顺序。由于需要考虑选取元素的顺序，因此这道题需要计算的是选取元素的**排列**数。\n\n可以通过动态规划的方法计算可能的方案数。用 $\\textit{dp}[x]$ 表示选取的元素之和等于 $x$ 的方案数，目标是求 $\\textit{dp}[\\textit{target}]$。\n\n动态规划的边界是 $\\textit{dp}[0]=1$。只有当不选取任何元素时，元素之和才为 $0$，因此只有 $1$ 种方案。\n\n当 $1 \\le i \\le \\textit{target}$ 时，如果存在一种排列，其中的元素之和等于 $i$，则该排列的最后一个元素一定是数组 $\\textit{nums}$ 中的一个元素。假设该排列的最后一个元素是 $\\textit{num}$，则一定有 $\\textit{num} \\le i$，对于元素之和等于 $i - \\textit{num}$ 的每一种排列，在最后添加 $\\textit{num}$ 之后即可得到一个元素之和等于 $i$ 的排列，因此在计算 $\\textit{dp}[i]$ 时，应该计算所有的 $\\textit{dp}[i-\\textit{num}]$ 之和。\n\n由此可以得到动态规划的做法：\n\n- 初始化 $\\textit{dp}[0]=1$；\n\n- 遍历 $i$ 从 $1$ 到 $\\textit{target}$，对于每个 $i$，进行如下操作：\n\n   - 遍历数组 $\\textit{nums}$ 中的每个元素 $\\textit{num}$，当 $\\textit{num} \\le i$ 时，将 $\\textit{dp}[i - \\textit{num}]$ 的值加到 $\\textit{dp}[i]$。\n\n- 最终得到 $\\textit{dp}[\\textit{target}]$ 的值即为答案。\n\n上述做法是否考虑到选取元素的顺序？答案是肯定的。因为外层循环是遍历从 $1$ 到 $\\textit{target}$ 的值，内层循环是遍历数组 $\\textit{nums}$ 的值，在计算 $\\textit{dp}[i]$ 的值时，$\\textit{nums}$ 中的每个小于等于 $i$ 的元素都可能作为元素之和等于 $i$ 的排列的最后一个元素。例如，$1$ 和 $3$ 都在数组 $\\textit{nums}$ 中，计算 $\\textit{dp}[4]$ 的时候，排列的最后一个元素可以是 $1$ 也可以是 $3$，因此 $\\textit{dp}[1]$ 和 $\\textit{dp}[3]$ 都会被考虑到，即不同的顺序都会被考虑到。\n\n```Java [sol1-Java]\nclass Solution {\n    public int combinationSum4(int[] nums, int target) {\n        int[] dp = new int[target + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= target; i++) {\n            for (int num : nums) {\n                if (num <= i) {\n                    dp[i] += dp[i - num];\n                }\n            }\n        }\n        return dp[target];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar combinationSum4 = function(nums, target) {\n    const dp = new Array(target + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= target; i++) {\n        for (const num of nums) {\n            if (num <= i) {\n                dp[i] += dp[i - num];\n            }\n        }\n    }\n    return dp[target];\n};\n```\n\n```go [sol1-Golang]\nfunc combinationSum4(nums []int, target int) int {\n    dp := make([]int, target+1)\n    dp[0] = 1\n    for i := 1; i <= target; i++ {\n        for _, num := range nums {\n            if num <= i {\n                dp[i] += dp[i-num]\n            }\n        }\n    }\n    return dp[target]\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def combinationSum4(self, nums: List[int], target: int) -> int:\n        dp = [1] + [0] * target\n        for i in range(1, target + 1):\n            for num in nums:\n                if num <= i:\n                    dp[i] += dp[i - num]\n        \n        return dp[target]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int combinationSum4(vector<int>& nums, int target) {\n        vector<int> dp(target + 1);\n        dp[0] = 1;\n        for (int i = 1; i <= target; i++) {\n            for (int& num : nums) {\n                if (num <= i && dp[i - num] < INT_MAX - dp[i]) {\n                    dp[i] += dp[i - num];\n                }\n            }\n        }\n        return dp[target];\n    }\n};\n```\n\n```C [sol1-C]\nint combinationSum4(int* nums, int numsSize, int target) {\n    int dp[target + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 1;\n    for (int i = 1; i <= target; i++) {\n        for (int j = 0; j < numsSize; j++) {\n            if (nums[j] <= i && dp[i - nums[j]] < INT_MAX - dp[i]) {\n                dp[i] += dp[i - nums[j]];\n            }\n        }\n    }\n    return dp[target];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\textit{target} \\times n)$，其中 $\\textit{target}$ 是目标值，$n$ 是数组 $\\textit{nums}$ 的长度。需要计算长度为 $\\textit{target}+1$ 的数组 $\\textit{dp}$ 的每个元素的值，对于每个元素，需要遍历数组 $\\textit{nums}$ 之后计算元素值。\n\n- 空间复杂度：$O(\\textit{target})$。需要创建长度为 $\\textit{target}+1$ 的数组 $\\textit{dp}$。\n\n#### 进阶问题\n\n如果给定的数组中含有负数，则会导致出现无限长度的排列。\n\n例如，假设数组 $\\textit{nums}$ 中含有正整数 $a$ 和负整数 $-b$（其中 $a>0,b>0,-b<0$），则有 $a \\times b + (-b) \\times a=0$，对于任意一个元素之和等于 $\\textit{target}$ 的排列，在该排列的后面添加 $b$ 个 $a$ 和 $a$ 个 $-b$ 之后，得到的新排列的元素之和仍然等于 $\\textit{target}$，而且还可以在新排列的后面继续 $b$ 个 $a$ 和 $a$ 个 $-b$。因此只要存在元素之和等于 $\\textit{target}$ 的排列，就能构造出无限长度的排列。\n\n如果允许负数出现，则必须限制排列的最大长度，避免出现无限长度的排列，才能计算排列数。"
}