{
	"titleSlug": "roman-to-integer",
	"slug": "yong-shi-9993nei-cun-9873jian-dan-jie-fa-by-donesp",
	"url": "https://leetcode-cn.com/problems/roman-to-integer/solution/yong-shi-9993nei-cun-9873jian-dan-jie-fa-by-donesp/",
	"content": "\n> 执行用时 :4 ms, 在所有 java 提交中击败了99.93% 的用户  \n> 内存消耗 :36.1 MB, 在所有 java 提交中击败了98.73%的用户  \n\n按照题目的描述，可以总结如下规则：\n\n1. 罗马数字由 `I,V,X,L,C,D,M` 构成；\n2. 当小值在大值的左边，则减小值，如 `IV=5-1=4`；\n3. 当小值在大值的右边，则加小值，如 `VI=5+1=6`；\n4. 由上可知，右值永远为正，因此最后一位必然为正。\n\n一言蔽之，**把一个小值放在大值的左边，就是做减法，否则为加法**。\n\n![Screen Shot 2020-02-17 at 21.14.47.png](https://pic.leetcode-cn.com/9d092fd44be4a809487a326dd6e9adcdddb1b27b6f5ec02ce60651745ff43528-Screen%20Shot%202020-02-17%20at%2021.14.47.png)\n\n\n在代码实现上，可以往后看多一位，对比当前位与后一位的大小关系，从而确定当前位是加还是减法。当没有下一位时，做加法即可。\n\n也可保留当前位的值，当遍历到下一位的时，对比保留值与遍历位的大小关系，再确定保留值为加还是减。最后一位做加法即可。\n\n```Java []\nimport java.util.*;\n\nclass Solution {\n    public int romanToInt(String s) {\n        int sum = 0;\n        int preNum = getValue(s.charAt(0));\n        for(int i = 1;i < s.length(); i ++) {\n            int num = getValue(s.charAt(i));\n            if(preNum < num) {\n                sum -= preNum;\n            } else {\n                sum += preNum;\n            }\n            preNum = num;\n        }\n        sum += preNum;\n        return sum;\n    }\n    \n    private int getValue(char ch) {\n        switch(ch) {\n            case 'I': return 1;\n            case 'V': return 5;\n            case 'X': return 10;\n            case 'L': return 50;\n            case 'C': return 100;\n            case 'D': return 500;\n            case 'M': return 1000;\n            default: return 0;\n        }\n    }\n}\n```"
}