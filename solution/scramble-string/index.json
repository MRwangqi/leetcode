{
	"titleSlug": "scramble-string",
	"slug": "rao-luan-zi-fu-chuan-by-leetcode-solutio-8r9t",
	"url": "https://leetcode-cn.com/problems/scramble-string/solution/rao-luan-zi-fu-chuan-by-leetcode-solutio-8r9t/",
	"content": "#### 方法一：动态规划\n\n**思路与算法**\n\n显然「扰乱字符串」的关系是具有对称性的，即如果 $s_1$ 是 $s_2$ 的扰乱字符串，那么 $s_2$ 也是 $s_1$ 的扰乱字符串。为了叙述方便，我们称这种情况下，$s_1$ 和 $s_2$ 是「和谐」的。\n\n那么如何判断 $s_1$ 和 $s_2$ 是否「和谐」呢？我们首先可以想到几个简单的判断方法：\n\n- 如果 $s_1 = s_2$，那么它们是「和谐」的；\n\n- 如果 $s_1$ 和 $s_2$ 的长度不同，那么它们一定不是「和谐」的；\n\n- 如果 $s_1$ 中某个字符 $c$ 出现了 $x_1$ 次，而 $c$ 在 $s_2$ 中出现了 $x_2$ 次，且 $x_1 \\neq x_2$，那么它们一定不是「和谐」的。这是因为任意操作都不会改变一个字符串中的字符种类以及数量。\n\n那么对于剩下的情况，我们该如何判断呢？我们可以从 $s_1$ 的分割方法入手。假设 $s_1$ 作为根节点时被分割成了 $l(s_1)$ 以及 $r(s_1)$ 两个子串，那么：\n\n- 如果 $l(s_1)$ 和 $r(s_1)$ 没有被交换，那么 $s_2$ 需要存在一种分割方法 $s_2 = l(s_2) + r(s_2)$，使得 $l(s_1)$ 和 $l(s_2)$ 是「和谐」的，并且 $r(s_1)$ 和 $r(s_2)$ 也是「和谐」的；\n\n- 如果 $l(s_1)$ 和 $r(s_1)$ 被交换了，那么 $s_2$ 需要存在一种分割方法 $s_2 = l(s_2) + r(s_2)$，使得 $l(s_1)$ 和 $r(s_2)$ 是「和谐」的，并且 $r(s_1)$ 和 $l(s_2)$ 也是「和谐」的。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/87/1.png)\n\n这样一来，我们就把原本需要解决的问题划分成了两个本质相同，但规模更小的子问题，因此可以考虑使用动态规划解决。\n\n设 $f(s_1, s_2)$ 表示 $s_1$ 和 $s_2$ 是否「和谐」，那么我们可以写出状态转移方程：\n\n$$\nf(s_1, s_2) =\n\\begin{cases}\n\\text{True}, & \\quad s_1=s_2 \\\\\n\\text{False}, & \\quad 存在某个字符~c，它在~s_1~和~s_2~中的出现次数不同 \\\\\n\\end{cases}\n$$\n\n因为题目保证给定的原始字符串的长度相同，因此我们只需要判断上面的两种情况。如果 $s_1$ 和 $s_2$ 不符合这两种情况，那么我们需要枚举分割点。\n\n设 $s_1$ 和 $s_2$ 的长度为 $n$，我们用 $s_1(x, y)$ 表示从 $s_1$ 从第 $x$ 个字符（从 $0$ 开始编号）开始，长度为 $y$ 的子串。由于分割出的两个字符串不能为空串，那么其中一个字符串就是 $s_1(0, i)$，另一个字符串是 $s_1(i, n-i)$。\n\n- 对于 $l(s_1)$ 和 $r(s_1)$ 没有被交换的情况，$s_2$ 同样需要被分为 $s_2(0, i)$ 以及 $s_2(i, n-i)$，否则长度不同的字符串是不可能「和谐」的。因此我们可以写出状态转移方程：\n\n    $$\n    f(s_1, s_2) = \\bigvee_{i=1}^{n-1} \\big( f(s_1(0, i), s_2(0, i)) \\wedge f(s_1(i, n-i), s_2(i, n-i)) \\big)\n    $$\n\n    其中 $\\wedge$ 表示与运算，即 $s_1$ 和 $s_2$ 分割出的两对字符串都要是「和谐」的；$\\vee$ 表示或运算，即只要有一种满足要求的分割方法，$s_1$ 和 $s_2$ 就是和谐的。\n\n- 对于 $l(s_1)$ 和 $r(s_1)$ 被交换的情况，$s_2$ 需要被分为 $s_2(0, n-i)$ 以及 $s_2(n-i, i)$，这样对应的长度才会相同。因此我们可以写出状态转移方程：\n\n    $$\n    f(s_1, s_2) = \\bigvee_{i=1}^{n-1} \\big( f(s_1(0, i), s_2(n-i, i)) \\wedge f(s_1(i, n-i), s_2(0, n-i)) \\big)\n    $$\n\n我们将上面两种状态转移方程用 $\\vee$ 或运算拼在一起，即可得到最终的状态转移方程。\n\n**细节**\n\n细节部分比较长，希望读者仔细阅读，否则写出来的代码可能会较为复杂，或者使用较多不必要的空间。\n\n1. 在进行状态转移时，我们需要**先计算出较短的字符串对应的 $f$ 值**，再去转移计算出较长的字符串对应的 $f$ 值，这是因为我们需要**保证在计算 $f(s_1, s_2)$ 时，所有它们的子串对应的状态都需要被计算过**。因此，如果我们使用常规的动态规划方法编写代码，可能会受到计算顺序的困扰，使得代码冗长。\n\n    而我们可以考虑使用「记忆化搜索」自顶向下地进行动态规划，这样我们只需要用题目中给定的两个原始字符串开始，递归地计算所有的 $f$ 值，而无需考虑计算顺序。\n\n2. 由于我们使用记忆化搜索，因此我们需要把 $s_1$ 和 $s_2$ 作为参数传入记忆化搜索使用的递归函数。这样一来，在递归传递参数的过程中，会使用到大量字符串的切片、拷贝等操作，使得时空复杂度不那么优。本题中，由于给定原始字符串的长度不超过 $30$，因此不会产生太大的影响，但我们还是要尽可能对代码进行优化。\n\n    一种通用的优化方法是，我们将状态变更为 $f(i_1, i_2, \\textit{length})$，表示第一个字符串是原始字符串从第 $i_1$ 个字符开始，长度为 $\\textit{length}$ 的子串，第二个字符串是原始字符串从第 $i_2$ 个字符开始，长度为 $\\textit{length}$ 的子串。可以发现，我们只是改变了表达 $s_1$ 和 $s_2$ 的方式，但此时我们只需要在递归时传递三个整数类型的变量，省去了字符串的操作；\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    // 记忆化搜索存储状态的数组\n    // -1 表示 false，1 表示 true，0 表示未计算\n    int memo[30][30][31];\n    string s1, s2;\n\npublic:\n    bool checkIfSimilar(int i1, int i2, int length) {\n        unordered_map<int, int> freq;\n        for (int i = i1; i < i1 + length; ++i) {\n            ++freq[s1[i]];\n        }\n        for (int i = i2; i < i2 + length; ++i) {\n            --freq[s2[i]];\n        }\n        if (any_of(freq.begin(), freq.end(), [](const auto& entry) {return entry.second != 0;})) {\n            return false;\n        }\n        return true;\n    }\n\n    // 第一个字符串从 i1 开始，第二个字符串从 i2 开始，子串的长度为 length，是否和谐\n    bool dfs(int i1, int i2, int length) {\n        if (memo[i1][i2][length]) {\n            return memo[i1][i2][length] == 1;\n        }\n\n        // 判断两个子串是否相等\n        if (s1.substr(i1, length) == s2.substr(i2, length)) {\n            memo[i1][i2][length] = 1;\n            return true;\n        }\n\n        // 判断是否存在字符 c 在两个子串中出现的次数不同\n        if (!checkIfSimilar(i1, i2, length)) {\n            memo[i1][i2][length] = -1;\n            return false;\n        }\n        \n        // 枚举分割位置\n        for (int i = 1; i < length; ++i) {\n            // 不交换的情况\n            if (dfs(i1, i2, i) && dfs(i1 + i, i2 + i, length - i)) {\n                memo[i1][i2][length] = 1;\n                return true;\n            }\n            // 交换的情况\n            if (dfs(i1, i2 + length - i, i) && dfs(i1 + i, i2, length - i)) {\n                memo[i1][i2][length] = 1;\n                return true;\n            }\n        }\n\n        memo[i1][i2][length] = -1;\n        return false;\n    }\n\n    bool isScramble(string s1, string s2) {\n        memset(memo, 0, sizeof(memo));\n        this->s1 = s1;\n        this->s2 = s2;\n        return dfs(0, 0, s1.size());\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    // 记忆化搜索存储状态的数组\n    // -1 表示 false，1 表示 true，0 表示未计算\n    int[][][] memo;\n    String s1, s2;\n\n    public boolean isScramble(String s1, String s2) {\n        int length = s1.length();\n        this.memo = new int[length][length][length + 1];\n        this.s1 = s1;\n        this.s2 = s2;\n        return dfs(0, 0, length);\n    }\n\n    // 第一个字符串从 i1 开始，第二个字符串从 i2 开始，子串的长度为 length，是否和谐\n    public boolean dfs(int i1, int i2, int length) {\n        if (memo[i1][i2][length] != 0) {\n            return memo[i1][i2][length] == 1;\n        }\n\n        // 判断两个子串是否相等\n        if (s1.substring(i1, i1 + length).equals(s2.substring(i2, i2 + length))) {\n            memo[i1][i2][length] = 1;\n            return true;\n        }\n\n        // 判断是否存在字符 c 在两个子串中出现的次数不同\n        if (!checkIfSimilar(i1, i2, length)) {\n            memo[i1][i2][length] = -1;\n            return false;\n        }\n        \n        // 枚举分割位置\n        for (int i = 1; i < length; ++i) {\n            // 不交换的情况\n            if (dfs(i1, i2, i) && dfs(i1 + i, i2 + i, length - i)) {\n                memo[i1][i2][length] = 1;\n                return true;\n            }\n            // 交换的情况\n            if (dfs(i1, i2 + length - i, i) && dfs(i1 + i, i2, length - i)) {\n                memo[i1][i2][length] = 1;\n                return true;\n            }\n        }\n\n        memo[i1][i2][length] = -1;\n        return false;\n    }\n\n    public boolean checkIfSimilar(int i1, int i2, int length) {\n        Map<Character, Integer> freq = new HashMap<Character, Integer>();\n        for (int i = i1; i < i1 + length; ++i) {\n            char c = s1.charAt(i);\n            freq.put(c, freq.getOrDefault(c, 0) + 1);\n        }\n        for (int i = i2; i < i2 + length; ++i) {\n            char c = s2.charAt(i);\n            freq.put(c, freq.getOrDefault(c, 0) - 1);\n        }\n        for (Map.Entry<Character, Integer> entry : freq.entrySet()) {\n            int value = entry.getValue();\n            if (value != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        @cache\n        def dfs(i1: int, i2: int, length: int) -> bool:\n            \"\"\"\n            第一个字符串从 i1 开始，第二个字符串从 i2 开始，子串的长度为 length，是否和谐\n            \"\"\"\n\n            # 判断两个子串是否相等\n            if s1[i1:i1+length] == s2[i2:i2+length]:\n                return True\n            \n            # 判断是否存在字符 c 在两个子串中出现的次数不同\n            if Counter(s1[i1:i1+length]) != Counter(s2[i2:i2+length]):\n                return False\n            \n            # 枚举分割位置\n            for i in range(1, length):\n                # 不交换的情况\n                if dfs(i1, i2, i) and dfs(i1 + i, i2 + i, length - i):\n                    return True\n                # 交换的情况\n                if dfs(i1, i2 + length - i, i) and dfs(i1 + i, i2, length - i):\n                    return True\n        \n            return False\n\n        ans = dfs(0, 0, len(s1))\n        dfs.cache_clear()\n        return ans\n```\n\n```go [sol1-Golang]\nfunc isScramble(s1, s2 string) bool {\n    n := len(s1)\n    dp := make([][][]int8, n)\n    for i := range dp {\n        dp[i] = make([][]int8, n)\n        for j := range dp[i] {\n            dp[i][j] = make([]int8, n+1)\n            for k := range dp[i][j] {\n                dp[i][j][k] = -1\n            }\n        }\n    }\n\n    // 第一个字符串从 i1 开始，第二个字符串从 i2 开始，子串的长度为 length\n    // 和谐返回 1，不和谐返回 0\n    var dfs func(i1, i2, length int) int8\n    dfs = func(i1, i2, length int) (res int8) {\n        d := &dp[i1][i2][length]\n        if *d != -1 {\n            return *d\n        }\n        defer func() { *d = res }()\n\n        // 判断两个子串是否相等\n        x, y := s1[i1:i1+length], s2[i2:i2+length]\n        if x == y {\n            return 1\n        }\n\n        // 判断是否存在字符 c 在两个子串中出现的次数不同\n        freq := [26]int{}\n        for i, ch := range x {\n            freq[ch-'a']++\n            freq[y[i]-'a']--\n        }\n        for _, f := range freq[:] {\n            if f != 0 {\n                return 0\n            }\n        }\n\n        // 枚举分割位置\n        for i := 1; i < length; i++ {\n            // 不交换的情况\n            if dfs(i1, i2, i) == 1 && dfs(i1+i, i2+i, length-i) == 1 {\n                return 1\n            }\n            // 交换的情况\n            if dfs(i1, i2+length-i, i) == 1 && dfs(i1+i, i2, length-i) == 1 {\n                return 1\n            }\n        }\n\n        return 0\n    }\n    return dfs(0, 0, n) == 1\n}\n```\n\n```C [sol1-C]\nstruct HashTable {\n    int key;\n    int val;\n    UT_hash_handle hh;\n};\n\nvoid modifyHashTable(struct HashTable** hashTable, int x, int inc) {\n    struct HashTable* tmp;\n    HASH_FIND_INT(*hashTable, &x, tmp);\n    if (tmp == NULL) {\n        tmp = malloc(sizeof(struct HashTable));\n        tmp->key = x;\n        tmp->val = inc;\n        HASH_ADD_INT(*hashTable, key, tmp);\n    } else {\n        tmp->val += inc;\n    }\n}\n\nbool checkHashTable(struct HashTable** hashTable) {\n    struct HashTable *iter, *tmp;\n    HASH_ITER(hh, *hashTable, iter, tmp) {\n        if (iter->val) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid freeHashTable(struct HashTable** hashTable) {\n    struct HashTable *iter, *tmp;\n    HASH_ITER(hh, *hashTable, iter, tmp) {\n        HASH_DEL(*hashTable, iter);\n        free(iter);\n    }\n}\n\nbool equals(char* s1, char* s2, int i1, int i2, int len) {\n    for (int i = 0; i < len; i++) {\n        if (s1[i + i1] != s2[i + i2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// 记忆化搜索存储状态的数组\n// -1 表示 false，1 表示 true，0 表示未计算\nint memo[30][30][31];\n\n// 第一个字符串从 i1 开始，第二个字符串从 i2 开始，子串的长度为 length，是否和谐\nbool dfs(char* s1, char* s2, int i1, int i2, int length) {\n    if (memo[i1][i2][length]) {\n        return memo[i1][i2][length] == 1;\n    }\n\n    // 判断两个子串是否相等\n    if (equals(s1, s2, i1, i2, length)) {\n        memo[i1][i2][length] = 1;\n        return true;\n    }\n\n    // 判断是否存在字符 c 在两个子串中出现的次数不同\n    struct HashTable* hashTable = NULL;\n\n    for (int i = i1; i < i1 + length; ++i) {\n        modifyHashTable(&hashTable, s1[i], 1);\n    }\n    for (int i = i2; i < i2 + length; ++i) {\n        modifyHashTable(&hashTable, s2[i], -1);\n    }\n    if (!checkHashTable(&hashTable)) {\n        memo[i1][i2][length] = -1;\n        return false;\n    }\n    freeHashTable(&hashTable);\n\n    // 枚举分割位置\n    for (int i = 1; i < length; ++i) {\n        // 不交换的情况\n        if (dfs(s1, s2, i1, i2, i) && dfs(s1, s2, i1 + i, i2 + i, length - i)) {\n            memo[i1][i2][length] = 1;\n            return true;\n        }\n        // 交换的情况\n        if (dfs(s1, s2, i1, i2 + length - i, i) && dfs(s1, s2, i1 + i, i2, length - i)) {\n            memo[i1][i2][length] = 1;\n            return true;\n        }\n    }\n\n    memo[i1][i2][length] = -1;\n    return false;\n}\n\nbool isScramble(char* s1, char* s2) {\n    memset(memo, 0, sizeof(memo));\n    return dfs(s1, s2, 0, 0, strlen(s1));\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar isScramble = function(s1, s2) {\n    const length = s1.length;\n    memo = new Array(length).fill(0).map(() => new Array(length).fill(0).map(() => new Array(length + 1).fill(0)));\n    return dfs(0, 0, length, s1, s2, memo);\n};\n\nconst dfs = function(i1, i2, length, s1, s2, memo) {\n    if (memo[i1][i2][length] !== 0) {\n        return memo[i1][i2][length] === 1;\n    }\n\n    // 判断两个子串是否相等\n    if (s1.slice(i1, i1 + length) === s2.slice(i2, i2 + length)) {\n        memo[i1][i2][length] = 1;\n        return true;\n    }\n\n    // 判断是否存在字符 c 在两个子串中出现的次数不同\n    if (!checkIfSimilar(i1, i2, length, s1, s2)) {\n        memo[i1][i2][length] = -1;\n        return false;\n    }\n\n    // 枚举分割位置\n    for (let i = 1; i < length; ++i) {\n        // 不交换的情况\n        if (dfs(i1, i2, i, s1, s2, memo) && dfs(i1 + i, i2 + i, length - i, s1, s2, memo)) {\n            memo[i1][i2][length] = 1;\n            return true;\n        }\n        // 交换的情况\n        if (dfs(i1, i2 + length - i, i, s1, s2, memo) && dfs(i1 + i, i2, length - i, s1, s2, memo)) {\n            memo[i1][i2][length] = 1;\n            return true;\n        }\n    }\n\n    memo[i1][i2][length] = -1;\n    return false;\n}\n\nconst checkIfSimilar = function(i1, i2, length, s1, s2) {\n    const freq = new Map();\n    for (let i = i1; i < i1 + length; ++i) {\n        const c = s1[i];\n        freq.set(c, (freq.get(c) || 0) + 1);\n    }\n    for (let i = i2; i < i2 + length; ++i) {\n        const c = s2[i];\n        freq.set(c, (freq.get(c) || 0) - 1);\n    }\n    for (const value of freq.values()) {\n        if (value !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^4)$，其中 $n$ 是给定的原始字符串的长度。动态规划中的状态 $f(i_1, i_2, \\textit{length})$ 有 $3$ 个维度，对于每一个状态，我们需要 $O(n)$ 枚举分割位置，因此总时间复杂度为 $O(n^4)$。\n\n- 空间复杂度：$O(n^3)$，即为存储所有动态规划状态需要的空间。"
}