{
	"titleSlug": "check-balance-lcci",
	"slug": "jian-cha-ping-heng-xing-by-leetcode-solu-c5yo",
	"url": "https://leetcode-cn.com/problems/check-balance-lcci/solution/jian-cha-ping-heng-xing-by-leetcode-solu-c5yo/",
	"content": "#### 前言\n\n这道题中的平衡二叉树的定义是：二叉树的每个节点的左右子树的高度差的绝对值不超过 $1$，则二叉树是平衡二叉树。根据定义，一棵二叉树是平衡二叉树，当且仅当其所有子树也都是平衡二叉树，因此可以使用递归的方式判断二叉树是不是平衡二叉树，递归的顺序可以是自顶向下或者自底向上。\n\n#### 方法一：自顶向下的递归\n\n定义函数 $\\texttt{height}$，用于计算二叉树中的任意一个节点 $p$ 的高度：\n\n$$\n\\texttt{height}(p) = \n\\begin{cases}\n0 & p \\text{ 是空节点}\\\\\n\\max(\\texttt{height}(p.left), \\texttt{height}(p.right))+1 & p \\text{ 是非空节点}\n\\end{cases}\n$$\n\n有了计算节点高度的函数，即可判断二叉树是否平衡。具体做法类似于二叉树的前序遍历，即对于当前遍历到的节点，首先计算左右子树的高度，如果左右子树的高度差是否不超过 $1$，再分别递归地遍历左右子节点，并判断左子树和右子树是否平衡。这是一个自顶向下的递归的过程。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_1.png),![fig2](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_2.png),![fig3](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_3.png),![fig4](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_4.png),![fig5](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_5.png),![fig6](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_6.png),![fig7](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_7.png),![fig8](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_8.png),![fig9](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_9.png),![fig10](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_10.png),![fig11](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_11.png),![fig12](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_12.png),![fig13](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_13.png),![fig14](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_14.png),![fig15](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_15.png),![fig16](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_16.png),![fig17](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_17.png),![fig18](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_18.png),![fig19](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_19.png),![fig20](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_20.png),![fig21](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_21.png),![fig22](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_22.png),![fig23](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_23.png),![fig24](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_24.png),![fig25](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_25.png),![fig26](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_26.png),![fig27](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_27.png),![fig28](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_28.png),![fig29](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_29.png),![fig30](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_30.png),![fig31](https://assets.leetcode-cn.com/solution-static/jindian_04.04/1_31.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        if (root == null) {\n            return true;\n        } else {\n            return Math.abs(height(root.left) - height(root.right)) <= 1 && isBalanced(root.left) && isBalanced(root.right);\n        }\n    }\n\n    public int height(TreeNode root) {\n        if (root == null) {\n            return 0;\n        } else {\n            return Math.max(height(root.left), height(root.right)) + 1;\n        }\n    }\n}\n```\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int height(TreeNode* root) {\n        if (root == NULL) {\n            return 0;\n        } else {\n            return max(height(root->left), height(root->right)) + 1;\n        }\n    }\n\n    bool isBalanced(TreeNode* root) {\n        if (root == NULL) {\n            return true;\n        } else {\n            return abs(height(root->left) - height(root->right)) <= 1 && isBalanced(root->left) && isBalanced(root->right);\n        }\n    }\n};\n```\n```Python [sol1-Python3]\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        def height(root: TreeNode) -> int:\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n\n        if not root:\n            return True\n        return abs(height(root.left) - height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)\n```\n\n```C [sol1-C]\nint height(struct TreeNode* root) {\n    if (root == NULL) {\n        return 0;\n    } else {\n        return fmax(height(root->left), height(root->right)) + 1;\n    }\n}\n\nbool isBalanced(struct TreeNode* root) {\n    if (root == NULL) {\n        return true;\n    } else {\n        return fabs(height(root->left) - height(root->right)) <= 1 && isBalanced(root->left) && isBalanced(root->right);\n    }\n}\n```\n\n```golang [sol1-Golang]\nfunc isBalanced(root *TreeNode) bool {\n    if root == nil {\n        return true\n    }\n    return abs(height(root.Left) - height(root.Right)) <= 1 && isBalanced(root.Left) && isBalanced(root.Right)\n}\n\nfunc height(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    return max(height(root.Left), height(root.Right)) + 1\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -1 * x\n    }\n    return x\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n ^ 2)$，其中 $n$ 是二叉树中的节点个数。\n  最坏情况下，二叉树是满二叉树，需要遍历二叉树中的所有节点，时间复杂度是 $O(n)$。\n  对于节点 $p$，如果它的高度是 $d$，则 $\\texttt{height}(p)$ 最多会被调用 $d$ 次（即遍历到它的每一个祖先节点时）。对于平均的情况，一棵树的高度 $h$ 满足 $O(h)=O(\\log n)$，因为 $d \\leq h$，所以总时间复杂度为 $O(n \\log n)$。对于最坏的情况，二叉树形成链式结构，高度为 $O(n)$，此时总时间复杂度为 $O(n^2)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 $n$。\n\n#### 方法二：自底向上的递归\n\n方法一由于是自顶向下递归，因此对于同一个节点，函数 $\\texttt{height}$ 会被重复调用，导致时间复杂度较高。如果使用自底向上的做法，则对于每个节点，函数 $\\texttt{height}$ 只会被调用一次。\n\n自底向上递归的做法类似于后序遍历，对于当前遍历到的节点，先递归地判断其左右子树是否平衡，再判断以当前节点为根的子树是否平衡。如果一棵子树是平衡的，则返回其高度（高度一定是非负整数），否则返回 $-1$。如果存在一棵子树不平衡，则整个二叉树一定不平衡。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_1.png),![fig2](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_2.png),![fig3](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_3.png),![fig4](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_4.png),![fig5](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_5.png),![fig6](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_6.png),![fig7](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_7.png),![fig8](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_8.png),![fig9](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_9.png),![fig10](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_10.png),![fig11](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_11.png),![fig12](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_12.png),![fig13](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_13.png),![fig14](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_14.png),![fig15](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_15.png),![fig16](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_16.png),![fig17](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_17.png),![fig18](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_18.png),![fig19](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_19.png),![fig20](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_20.png),![fig21](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_21.png),![fig22](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_22.png),![fig23](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_23.png),![fig24](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_24.png),![fig25](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_25.png),![fig26](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_26.png),![fig27](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_27.png),![fig28](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_28.png),![fig29](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_29.png),![fig30](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_30.png),![fig31](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_31.png),![fig32](https://assets.leetcode-cn.com/solution-static/jindian_04.04/2_32.png)>\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        return height(root) >= 0;\n    }\n\n    public int height(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int leftHeight = height(root.left);\n        int rightHeight = height(root.right);\n        if (leftHeight == -1 || rightHeight == -1 || Math.abs(leftHeight - rightHeight) > 1) {\n            return -1;\n        } else {\n            return Math.max(leftHeight, rightHeight) + 1;\n        }\n    }\n}\n```\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int height(TreeNode* root) {\n        if (root == NULL) {\n            return 0;\n        }\n        int leftHeight = height(root->left);\n        int rightHeight = height(root->right);\n        if (leftHeight == -1 || rightHeight == -1 || abs(leftHeight - rightHeight) > 1) {\n            return -1;\n        } else {\n            return max(leftHeight, rightHeight) + 1;\n        }\n    }\n\n    bool isBalanced(TreeNode* root) {\n        return height(root) >= 0;\n    }\n};\n```\n```Python [sol2-Python3]\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        def height(root: TreeNode) -> int:\n            if not root:\n                return 0\n            leftHeight = height(root.left)\n            rightHeight = height(root.right)\n            if leftHeight == -1 or rightHeight == -1 or abs(leftHeight - rightHeight) > 1:\n                return -1\n            else:\n                return max(leftHeight, rightHeight) + 1\n\n        return height(root) >= 0\n```\n\n```C [sol2-C]\nint height(struct TreeNode* root) {\n    if (root == NULL) {\n        return 0;\n    }\n    int leftHeight = height(root->left);\n    int rightHeight = height(root->right);\n    if (leftHeight == -1 || rightHeight == -1 || fabs(leftHeight - rightHeight) > 1) {\n        return -1;\n    } else {\n        return fmax(leftHeight, rightHeight) + 1;\n    }\n}\n\nbool isBalanced(struct TreeNode* root) {\n    return height(root) >= 0;\n}\n```\n\n```golang [sol2-Golang]\nfunc isBalanced(root *TreeNode) bool {\n    return height(root) >= 0\n}\n\nfunc height(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    leftHeight := height(root.Left)\n    rightHeight := height(root.Right)\n    if leftHeight == -1 || rightHeight == -1 || abs(leftHeight - rightHeight) > 1 {\n        return -1\n    }\n    return max(leftHeight, rightHeight) + 1\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -1 * x\n    }\n    return x\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树中的节点个数。使用自底向上的递归，每个节点的计算高度和判断是否平衡都只需要处理一次，最坏情况下需要遍历二叉树中的所有节点，因此时间复杂度是 $O(n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 $n$。"
}