{
	"titleSlug": "buddy-strings",
	"slug": "qin-mi-zi-fu-chuan-by-leetcode-solution-yyis",
	"url": "https://leetcode-cn.com/problems/buddy-strings/solution/qin-mi-zi-fu-chuan-by-leetcode-solution-yyis/",
	"content": "#### 方法一：枚举\n\n**思路与算法**\n\n设两个字符串分别为 $s$ 和 $\\textit{goal}$，其中 $s[i]$ 表示 $s$ 的第 $i$ 个字符，其中 $\\textit{goal}[i]$ 表示 $\\textit{goal}$ 的第 $i$ 个字符。如果 $s[i] = \\textit{goal}[i]$，我们就说 $i$ 是匹配的，否则称 $i$ 是不匹配的。亲密字符串定义为：需要交换 $s$ 中的第 $i$ 个字符 $s[i]$ 与 $\\textit{s}$ 中第 $j$ 个字符且满足 $i \\neq j$，交换后 $s$ 与 $\\textit{goal}$ 相等。亲密字符串的两个字符串需要交换一次索引不相等的两个字符后相等。\n\n如果满足交换 $s[i]$ 和 $s[j]$ 后两个字符串相等，那么需要满足以下几个条件使得 $s$ 和 $\\textit{goal}$ 为亲密字符串：\n- 字符串 $s$ 的长度与字符串 $\\textit{goal}$ 的长度相等；\n- 存在 $i \\neq j$ 且满足 $s[i] = \\textit{goal}[j]$ 以及 $s[j] = \\textit{goal}[i]$，实际在 $s[i], s[j], \\textit{goal}[i], \\textit{goal}[j]$ 这四个自由变量中，只存在两种情况：\n  1. 满足 $s[i] = s[j]$：则此时必然满足 $s[i] = s[j] = \\textit{goal}[i] = \\textit{goal}[j]$，字符串 $s$ 与 $\\textit{goal}$ 相等，我们应当能够在 $s$ 中找到两个不同的索引 $i,j$，且满足 $s[i] = s[j]$，如果能够找到两个索引不同但值相等的字符则满足 $s$ 与 $\\textit{goal}$ 为亲密字符串；否则不为亲密字符串。\n  2. 满足 $s[i] \\neq s[j]$：满足 $s[i] = \\textit{goal}[j], s[j] = \\textit{goal}[i], s[i] \\neq s[j]$ 的情况下，两个字符串 $s$ 与 $\\textit{goal}$ 除了索引 $i,j$ 以外的字符都是匹配的。\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean buddyStrings(String s, String goal) {\n        if (s.length() != goal.length()) {\n            return false;\n        }\n        \n        if (s.equals(goal)) {\n            int[] count = new int[26];\n            for (int i = 0; i < s.length(); i++) {\n                count[s.charAt(i) - 'a']++;\n                if (count[s.charAt(i) - 'a'] > 1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            int first = -1, second = -1;\n            for (int i = 0; i < goal.length(); i++) {\n                if (s.charAt(i) != goal.charAt(i)) {\n                    if (first == -1)\n                        first = i;\n                    else if (second == -1)\n                        second = i;\n                    else\n                        return false;\n                }\n            }\n\n            return (second != -1 && s.charAt(first) == goal.charAt(second) &&\n                    s.charAt(second) == goal.charAt(first));\n        }\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool buddyStrings(string s, string goal) {\n        if (s.size() != goal.size()) {\n            return false;\n        }\n        \n        if (s == goal) {\n            vector<int> count(26);\n            for (int i = 0; i < s.size(); i++) {\n                count[s[i] - 'a']++;\n                if (count[s[i] - 'a'] > 1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            int first = -1, second = -1;\n            for (int i = 0; i < s.size(); i++) {\n                if (s[i] != goal[i]) {\n                    if (first == -1)\n                        first = i;\n                    else if (second == -1)\n                        second = i;\n                    else\n                        return false;\n                }\n            }\n\n            return (second != -1 && s[first] == goal[second] && s[second] == goal[first]);\n        }\n    }\n};\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool BuddyStrings(string s, string goal) {\n        if (s.Length != goal.Length) {\n            return false;\n        }\n        \n        if (s.Equals(goal)) {\n            int[] count = new int[26];\n            for (int i = 0; i < s.Length; i++) {\n                count[s[i] - 'a']++;\n                if (count[s[i] - 'a'] > 1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            int first = -1, second = -1;\n            for (int i = 0; i < goal.Length; i++) {\n                if (s[i] != goal[i]) {\n                    if (first == -1)\n                        first = i;\n                    else if (second == -1)\n                        second = i;\n                    else\n                        return false;\n                }\n            }\n\n            return (second != -1 && s[first] == goal[second] && s[second] == goal[first]);\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def buddyStrings(self, s: str, goal: str) -> bool:\n        if len(s) != len(goal):\n            return False\n        if s == goal:\n            if len(set(s)) < len(goal): \n                return True\n            else:\n                return False\n        diff = [(a, b) for a, b in zip(s, goal) if a != b]\n        return len(diff) == 2 and diff[0][0] == diff[1][1] and diff[0][1] == diff[1][0]\n```\n\n```go [sol1-Golang]\nfunc buddyStrings(s, goal string) bool {\n    if len(s) != len(goal) {\n        return false\n    }\n\n    if s == goal {\n        seen := [26]bool{}\n        for _, ch := range s {\n            if seen[ch-'a'] {\n                return true\n            }\n            seen[ch-'a'] = true\n        }\n        return false\n    }\n\n    first, second := -1, -1\n    for i := range s {\n        if s[i] != goal[i] {\n            if first == -1 {\n                first = i\n            } else if second == -1 {\n                second = i\n            } else {\n                return false\n            }\n        }\n    }\n    return second != -1 && s[first] == goal[second] && s[second] == goal[first]\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar buddyStrings = function(s, goal) {\n    if (s.length != goal.length) {\n        return false;\n    }\n    \n    if (s === goal) {\n        const count = new Array(26).fill(0);\n        for (let i = 0; i < s.length; i++) {\n            count[s[i].charCodeAt() - 'a'.charCodeAt()]++;\n            if (count[s[i].charCodeAt() - 'a'.charCodeAt()] > 1) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        let first = -1, second = -1;\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] !== goal[i]) {\n                if (first === -1)\n                    first = i;\n                else if (second === -1)\n                    second = i;\n                else\n                    return false;\n            }\n        }\n\n        return (second !== -1 && s[first] === goal[second] && s[second] === goal[first]);\n    }\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为字符串的长度。我们至多遍历字符串两遍。\n\n- 空间复杂度：$O(C)$。需要常数个空间保存字符串的字符统计次数，我们统计所有小写字母的个数，因此 $C = 26$。"
}