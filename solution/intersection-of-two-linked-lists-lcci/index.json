{
	"titleSlug": "intersection-of-two-linked-lists-lcci",
	"slug": "lian-biao-xiang-jiao-by-leetcode-solutio-2kne",
	"url": "https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/solution/lian-biao-xiang-jiao-by-leetcode-solutio-2kne/",
	"content": "#### 方法一：哈希集合\n\n**思路和算法**\n\n判断两个链表是否相交，可以使用哈希集合存储链表节点。\n\n首先遍历链表 $\\textit{headA}$，并将链表 $\\textit{headA}$ 中的每个节点加入哈希集合中。然后遍历链表 $\\textit{headB}$，对于遍历到的每个节点，判断该节点是否在哈希集合中：\n\n- 如果当前节点不在哈希集合中，则继续遍历下一个节点；\n\n- 如果当前节点在哈希集合中，则后面的节点都在哈希集合中，即从当前节点开始的所有节点都在两个链表的相交部分，因此在链表 $\\textit{headB}$ 中遍历到的第一个在哈希集合中的节点就是两个链表相交的节点，返回该节点。\n\n如果链表 $\\textit{headB}$ 中的所有节点都不在哈希集合中，则两个链表不相交，返回 $\\text{null}$。\n\n**代码**\n\n```Java [sol1-Java]\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        Set<ListNode> visited = new HashSet<ListNode>();\n        ListNode temp = headA;\n        while (temp != null) {\n            visited.add(temp);\n            temp = temp.next;\n        }\n        temp = headB;\n        while (temp != null) {\n            if (visited.contains(temp)) {\n                return temp;\n            }\n            temp = temp.next;\n        }\n        return null;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {\n        ISet<ListNode> visited = new HashSet<ListNode>();\n        ListNode temp = headA;\n        while (temp != null) {\n            visited.Add(temp);\n            temp = temp.next;\n        }\n        temp = headB;\n        while (temp != null) {\n            if (visited.Contains(temp)) {\n                return temp;\n            }\n            temp = temp.next;\n        }\n        return null;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar getIntersectionNode = function(headA, headB) {\n    const visited = new Set();\n    let temp = headA;\n    while (temp !== null) {\n        visited.add(temp);\n        temp = temp.next;\n    }\n    temp = headB;\n    while (temp !== null) {\n        if (visited.has(temp)) {\n            return temp;\n        }\n        temp = temp.next;\n    }\n    return null;\n};\n```\n\n```go [sol1-Golang]\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode {\n    vis := map[*ListNode]bool{}\n    for tmp := headA; tmp != nil; tmp = tmp.Next {\n        vis[tmp] = true\n    }\n    for tmp := headB; tmp != nil; tmp = tmp.Next {\n        if vis[tmp] {\n            return tmp\n        }\n    }\n    return nil\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        unordered_set<ListNode *> visited;\n        ListNode *temp = headA;\n        while (temp != nullptr) {\n            visited.insert(temp);\n            temp = temp->next;\n        }\n        temp = headB;\n        while (temp != nullptr) {\n            if (visited.count(temp)) {\n                return temp;\n            }\n            temp = temp->next;\n        }\n        return nullptr;\n    }\n};\n```\n\n```C [sol1-C]\nstruct HashTable {\n    struct ListNode *key;\n    UT_hash_handle hh;\n};\n\nstruct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\n    struct HashTable *hashTable = NULL;\n    struct ListNode *temp = headA;\n    while (temp != NULL) {\n        struct HashTable *tmp;\n        HASH_FIND(hh, hashTable, &temp, sizeof(struct HashTable *), tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct HashTable));\n            tmp->key = temp;\n            HASH_ADD(hh, hashTable, key, sizeof(struct HashTable *), tmp);\n        }\n        temp = temp->next;\n    }\n    temp = headB;\n    while (temp != NULL) {\n        struct HashTable *tmp;\n        HASH_FIND(hh, hashTable, &temp, sizeof(struct HashTable *), tmp);\n        if (tmp != NULL) {\n            return temp;\n        }\n        temp = temp->next;\n    }\n    return NULL;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m+n)$，其中 $m$ 和 $n$ 是分别是链表 $\\textit{headA}$ 和 $\\textit{headB}$ 的长度。需要遍历两个链表各一次。\n\n- 空间复杂度：$O(m)$，其中 $m$ 是链表 $\\textit{headA}$ 的长度。需要使用哈希集合存储链表 $\\textit{headA}$ 中的全部节点。\n\n#### 方法二：双指针\n\n**思路和算法**\n\n使用双指针的方法，可以将空间复杂度降至 $O(1)$。\n\n只有当链表 $\\textit{headA}$ 和 $\\textit{headB}$ 都不为空时，两个链表才可能相交。因此首先判断链表 $\\textit{headA}$ 和 $\\textit{headB}$ 是否为空，如果其中至少有一个链表为空，则两个链表一定不相交，返回 $\\text{null}$。\n\n当链表 $\\textit{headA}$ 和 $\\textit{headB}$ 都不为空时，创建两个指针 $\\textit{pA}$ 和 $\\textit{pB}$，初始时分别指向两个链表的头节点 $\\textit{headA}$ 和 $\\textit{headB}$，然后将两个指针依次遍历两个链表的每个节点。具体做法如下：\n\n- 每步操作需要同时更新指针 $\\textit{pA}$ 和 $\\textit{pB}$。\n\n- 如果指针 $\\textit{pA}$ 不为空，则将指针 $\\textit{pA}$ 移到下一个节点；如果指针 $\\textit{pB}$ 不为空，则将指针 $\\textit{pB}$ 移到下一个节点。\n\n- 如果指针 $\\textit{pA}$ 为空，则将指针 $\\textit{pA}$ 移到链表 $\\textit{headB}$ 的头节点；如果指针 $\\textit{pB}$ 为空，则将指针 $\\textit{pB}$ 移到链表 $\\textit{headA}$ 的头节点。\n\n- 当指针 $\\textit{pA}$ 和 $\\textit{pB}$ 指向同一个节点或者都为空时，返回它们指向的节点或者 $\\text{null}$。\n\n**证明**\n\n下面提供双指针方法的正确性证明。考虑两种情况，第一种情况是两个链表相交，第二种情况是两个链表不相交。\n\n情况一：两个链表相交\n\n链表 $\\textit{headA}$ 和 $\\textit{headB}$ 的长度分别是 $m$ 和 $n$。假设链表 $\\textit{headA}$ 的不相交部分有 $a$ 个节点，链表 $\\textit{headB}$ 的不相交部分有 $b$ 个节点，两个链表相交的部分有 $c$ 个节点，则有 $a+c=m$，$b+c=n$。\n\n- 如果 $a=b$，则两个指针会同时到达两个链表相交的节点，此时返回相交的节点；\n\n- 如果 $a \\ne b$，则指针 $\\textit{pA}$ 会遍历完链表 $\\textit{headA}$，指针 $\\textit{pB}$ 会遍历完链表 $\\textit{headB}$，两个指针不会同时到达链表的尾节点，然后指针 $\\textit{pA}$ 移到链表 $\\textit{headB}$ 的头节点，指针 $\\textit{pB}$ 移到链表 $\\textit{headA}$ 的头节点，然后两个指针继续移动，在指针 $\\textit{pA}$ 移动了 $a+c+b$ 次、指针 $\\textit{pB}$ 移动了 $b+c+a$ 次之后，两个指针会同时到达两个链表相交的节点，该节点也是两个指针第一次同时指向的节点，此时返回相交的节点。\n\n情况二：两个链表不相交\n\n链表 $\\textit{headA}$ 和 $\\textit{headB}$ 的长度分别是 $m$ 和 $n$。考虑当 $m=n$ 和 $m \\ne n$ 时，两个指针分别会如何移动：\n\n- 如果 $m=n$，则两个指针会同时到达两个链表的尾节点，然后同时变成空值 $\\text{null}$，此时返回 $\\text{null}$；\n\n- 如果 $m \\ne n$，则由于两个链表没有公共节点，两个指针也不会同时到达两个链表的尾节点，因此两个指针都会遍历完两个链表，在指针 $\\textit{pA}$ 移动了 $m+n$ 次、指针 $\\textit{pB}$ 移动了 $n+m$ 次之后，两个指针会同时变成空值 $\\text{null}$，此时返回 $\\text{null}$。\n\n**代码**\n\n```Java [sol2-Java]\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        if (headA == null || headB == null) {\n            return null;\n        }\n        ListNode pA = headA, pB = headB;\n        while (pA != pB) {\n            pA = pA == null ? headB : pA.next;\n            pB = pB == null ? headA : pB.next;\n        }\n        return pA;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {\n        if (headA == null || headB == null) {\n            return null;\n        }\n        ListNode pA = headA, pB = headB;\n        while (pA != pB) {\n            pA = pA == null ? headB : pA.next;\n            pB = pB == null ? headA : pB.next;\n        }\n        return pA;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar getIntersectionNode = function(headA, headB) {\n    if (headA === null || headB === null) {\n        return null;\n    }\n    let pA = headA, pB = headB;\n    while (pA !== pB) {\n        pA = pA === null ? headB : pA.next;\n        pB = pB === null ? headA : pB.next;\n    }\n    return pA;\n};\n```\n\n```go [sol2-Golang]\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode {\n    if headA == nil || headB == nil {\n        return nil\n    }\n    pa, pb := headA, headB\n    for pa != pb {\n        if pa == nil {\n            pa = headB\n        } else {\n            pa = pa.Next\n        }\n        if pb == nil {\n            pb = headA\n        } else {\n            pb = pb.Next\n        }\n    }\n    return pa\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if (headA == nullptr || headB == nullptr) {\n            return nullptr;\n        }\n        ListNode *pA = headA, *pB = headB;\n        while (pA != pB) {\n            pA = pA == nullptr ? headB : pA->next;\n            pB = pB == nullptr ? headA : pB->next;\n        }\n        return pA;\n    }\n};\n```\n\n```C [sol2-C]\nstruct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\n    if (headA == NULL || headB == NULL) {\n        return NULL;\n    }\n    struct ListNode *pA = headA, *pB = headB;\n    while (pA != pB) {\n        pA = pA == NULL ? headB : pA->next;\n        pB = pB == NULL ? headA : pB->next;\n    }\n    return pA;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m+n)$，其中 $m$ 和 $n$ 是分别是链表 $\\textit{headA}$ 和 $\\textit{headB}$ 的长度。两个指针同时遍历两个链表，每个指针遍历两个链表各一次。\n\n- 空间复杂度：$O(1)$。"
}