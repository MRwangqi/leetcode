{
	"titleSlug": "increasing-decreasing-string",
	"slug": "shang-sheng-xia-jiang-zi-fu-chuan-by-leetcode-solu",
	"url": "https://leetcode-cn.com/problems/increasing-decreasing-string/solution/shang-sheng-xia-jiang-zi-fu-chuan-by-leetcode-solu/",
	"content": "#### 方法一：桶计数\n\n**思路及解法**\n\n仔细分析步骤，我们发现：\n\n1. 每个字符被选择且仅被选择一次；\n\n2. 每一轮会在字符串末尾加入一个先升后降的字符串，且该串的上升部分和下降部分都会尽可能长。\n\n于是我们重复若干轮下述操作，直到每一个字符都被选择过，这样就可以构造出这个字符串：\n\n1. 先从未被选择的字符中提取出最长的上升字符串，将其加入答案。\n\n2. 然后从未被选择的字符中提取出最长的下降字符串，将其加入答案。\n\n注意到在构造时我们只关注字符本身，而不关注字符在原字符串中的位置。因此我们可以直接创建一个大小为 $26$ 的桶，记录每种字符的数量。每次提取最长的上升或下降字符串时，我们直接顺序或逆序遍历这个桶。\n\n具体地，在遍历桶的过程中，如果当前桶的计数值不为零，那么将当前桶对应的字符加入到答案中，并将当前桶的计数值减一即可。我们重复这一过程，直到答案字符串的长度与传入的字符串的长度相等。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string sortString(string s) {\n        vector<int> num(26);\n        for (char &ch : s) {\n            num[ch - 'a']++;\n        }\n\n        string ret;\n        while (ret.length() < s.length()) {\n            for (int i = 0; i < 26; i++) {\n                if (num[i]) {\n                    ret.push_back(i + 'a');\n                    num[i]--;\n                }\n            }\n            for (int i = 25; i >= 0; i--) {\n                if (num[i]) {\n                    ret.push_back(i + 'a');\n                    num[i]--;\n                }\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String sortString(String s) {\n        int[] num = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            num[s.charAt(i) - 'a']++;\n        }\n\n        StringBuffer ret = new StringBuffer();\n        while (ret.length() < s.length()) {\n            for (int i = 0; i < 26; i++) {\n                if (num[i] > 0) {\n                    ret.append((char) (i + 'a'));\n                    num[i]--;\n                }\n            }\n            for (int i = 25; i >= 0; i--) {\n                if (num[i] > 0) {\n                    ret.append((char) (i + 'a'));\n                    num[i]--;\n                }\n            }\n        }\n        return ret.toString();\n    }\n}\n```\n\n```js [sol1-JavaScript]\nvar sortString = function(s) {\n    const num = new Array(26).fill(0);\n    for (let ch of s) {\n        num[ch.charCodeAt() - 'a'.charCodeAt()]++;\n    }\n\n    let ret = '';\n    while (ret.length < s.length) {\n        for (let i = 0; i < 26; i++) {\n            if (num[i]) {\n                ret += String.fromCharCode(i + 'a'.charCodeAt());\n                num[i]--;\n            }\n        }\n        for (let i = 25; i >= 0; i--) {\n            if (num[i]) {\n                ret += String.fromCharCode(i + 'a'.charCodeAt());\n                num[i]--;\n            }\n        }\n    }\n    return ret;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sortString(self, s: str) -> str:\n        num = [0] * 26\n        for ch in s:\n            num[ord(ch) - ord('a')] += 1\n        \n        ret = list()\n        while len(ret) < len(s):\n            for i in range(26):\n                if num[i]:\n                    ret.append(chr(i + ord('a')))\n                    num[i] -= 1\n            for i in range(25, -1, -1):\n                if num[i]:\n                    ret.append(chr(i + ord('a')))\n                    num[i] -= 1\n\n        return \"\".join(ret)\n```\n\n```Golang [sol1-Golang]\nfunc sortString(s string) string {\n    cnt := ['z' + 1]int{}\n    for _, ch := range s {\n        cnt[ch]++\n    }\n    n := len(s)\n    ans := make([]byte, 0, n)\n    for len(ans) < n {\n        for i := byte('a'); i <= 'z'; i++ {\n            if cnt[i] > 0 {\n                ans = append(ans, i)\n                cnt[i]--\n            }\n        }\n        for i := byte('z'); i >= 'a'; i-- {\n            if cnt[i] > 0 {\n                ans = append(ans, i)\n                cnt[i]--\n            }\n        }\n    }\n    return string(ans)\n}\n```\n\n```C [sol1-C]\nchar* sortString(char* s) {\n    int num[26];\n    memset(num, 0, sizeof(num));\n    int n = strlen(s);\n    for (int i = 0; i < n; i++) {\n        num[s[i] - 'a']++;\n    }\n\n    char* ret = malloc(sizeof(char) * (n + 1));\n    int retSize = 0;\n    while (retSize < n) {\n        for (int i = 0; i < 26; i++) {\n            if (num[i]) {\n                ret[retSize++] = i + 'a';\n                num[i]--;\n            }\n        }\n        for (int i = 25; i >= 0; i--) {\n            if (num[i]) {\n                ret[retSize++] = i + 'a';\n                num[i]--;\n            }\n        }\n    }\n    ret[retSize] = 0;\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(|\\Sigma|\\times|s|)$，其中 $\\Sigma$ 为字符集，$s$ 为传入的字符串，在这道题中，字符集为全部小写字母，$|\\Sigma|=26$。最坏情况下字符串中所有字符都相同，那么对于每一个字符，我们需要遍历一次整个桶。\n\n- 空间复杂度：$O(|\\Sigma|)$，其中 $\\Sigma$ 为字符集。我们需要和 $|\\Sigma|$ 等大的桶来记录每一类字符的数量。"
}