{
	"titleSlug": "count-hills-and-valleys-in-an-array",
	"slug": "tong-ji-shu-zu-zhong-feng-he-gu-de-shu-l-ca7e",
	"url": "https://leetcode-cn.com/problems/count-hills-and-valleys-in-an-array/solution/tong-ji-shu-zu-zhong-feng-he-gu-de-shu-l-ca7e/",
	"content": "#### 方法一：逐个判断\n\n**思路与算法**\n\n我们可以遍历数组 $\\textit{nums}$ 判断并统计峰和谷的数量。具体地，我们判断除了数组首尾元素（首尾元素一定不可能是峰或谷）以外的每个下标 $i$ 是否为峰与谷的一部分。我们用 $\\textit{res}$ 来维护这一数量。为了防止重复遍历，我们只判断每个可能的峰或谷的**第一个下标**，即当 $\\textit{nums}[i] = \\textit{nums}[i-1]$ 时，我们跳过该下标。\n\n对于每个需要判断的下标 $i$，我们用整数 $\\textit{left}$ 与 $\\textit{right}$ 来表示它左右是否存在不相等邻居以及最近的不相等邻居与该元素的大小关系：其中 $1$ 代表邻居大于该元素，$-1$ 代表邻居小于该元素，$0$ 代表未找到或不存在该方向的不相等邻居。$\\textit{left}$ 与 $\\textit{right}$ 的初值均为 $0$。为了计算 $\\textit{left}$ 的状态值，我们从下标 $i - 1$ 开始向左遍历，直至找到第一个不等于 $$\\textit{nums}[i]$ 的元素（此时还需要按要求更新状态值）或到达数组开头。类似地，我们从下标 $i + 1$ 开始向右遍历计算 $\\textit{right}$ 的值。\n\n最终，下标 $i$ 为峰或谷的一部分**当且仅当** $\\textit{left} = \\textit{right}$ 且 $\\textit{left} \\not= 0$。如果满足这两个条件，则我们将 $\\textit{res}$ 加上 $1$。当遍历完成数组后，$\\textit{res}$ 即为数组峰与谷的数量，我们返回它作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countHillValley(vector<int>& nums) {\n        int res = 0;   // 峰与谷的数量\n        int n = nums.size();\n        for (int i = 1; i < n - 1; ++i) {\n            if (nums[i] == nums[i-1]) {\n                // 去重\n                continue;\n            }\n            int left = 0;   // 左边可能的不相等邻居对应状态\n            for (int j = i - 1; j >= 0; --j) {\n                if (nums[j] > nums[i]) {\n                    left = 1;\n                    break;\n                } else if (nums[j] < nums[i]) {\n                    left = -1;\n                    break;\n                }\n            }\n            int right = 0;   // 右边可能的不相等邻居对应状态\n            for (int j = i + 1; j < n; ++j) {\n                if (nums[j] > nums[i]) {\n                    right = 1;\n                    break;\n                } else if (nums[j] < nums[i]) {\n                    right = -1;\n                    break;\n                }\n            }\n            if (left == right && left != 0) {\n                // 此时下标 i 为峰或谷的一部分\n                ++res;\n            }\n        }\n        return res;   \n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def countHillValley(self, nums: List[int]) -> int:\n        res = 0   # 峰与谷的数量\n        n = len(nums)\n        for i in range(1, n - 1):\n            if nums[i] == nums[i-1]:\n                # 去重\n                continue\n            left = 0   # 左边可能的不相等邻居对应状态\n            for j in range(i - 1, -1, -1):\n                if nums[j] > nums[i]:\n                    left = 1\n                    break\n                elif nums[j] < nums[i]:\n                    left = -1\n                    break\n            right = 0   # 右边可能的不相等邻居对应状态\n            for j in range(i + 1, n):\n                if nums[j] > nums[i]:\n                    right = 1\n                    break\n                elif nums[j] < nums[i]:\n                    right = -1\n                    break\n            if left == right and left != 0:\n                # 此时下标 i 为峰或谷的一部分\n                res += 1\n        return res\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 为 $\\textit{nums}$ 的长度。对于每个元素，判断是否为峰或者谷的时间复杂度为 $O(n)$。\n\n- 空间复杂度：$O(1)$。"
}