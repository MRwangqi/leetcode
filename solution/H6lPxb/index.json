{
	"titleSlug": "H6lPxb",
	"slug": "xiang-si-de-zi-fu-chuan-by-leetcode-solu-1bg1",
	"url": "https://leetcode-cn.com/problems/H6lPxb/solution/xiang-si-de-zi-fu-chuan-by-leetcode-solu-1bg1/",
	"content": "#### 方法一：并查集\n\n**思路及解法**\n\n我们把每一个字符串看作点，字符串之间是否相似看作边，那么可以发现本题询问的是给定的图中有多少连通分量。于是可以想到使用并查集维护节点间的连通性。\n\n我们枚举给定序列中的任意一对字符串，检查其是否具有相似性，如果相似，那么我们就将这对字符串相连。\n\n在实际代码中，我们可以首先判断当前这对字符串是否已经连通，如果没有连通，我们再检查它们是否具有相似性，可以优化一定的时间复杂度的常数。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> f;\n\n    int find(int x) {\n        return f[x] == x ? x : f[x] = find(f[x]);\n    }\n\n    bool check(const string &a, const string &b, int len) {\n        int num = 0;\n        for (int i = 0; i < len; i++) {\n            if (a[i] != b[i]) {\n                num++;\n                if (num > 2) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    int numSimilarGroups(vector<string> &strs) {\n        int n = strs.size();\n        int m = strs[0].length();\n        f.resize(n);\n        for (int i = 0; i < n; i++) {\n            f[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int fi = find(i), fj = find(j);\n                if (fi == fj) {\n                    continue;\n                }\n                if (check(strs[i], strs[j], m)) {\n                    f[fi] = fj;\n                }\n            }\n        }\n        int ret = 0;\n        for (int i = 0; i < n; i++) {\n            if (f[i] == i) {\n                ret++;\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int[] f;\n\n    public int numSimilarGroups(String[] strs) {\n        int n = strs.length;\n        int m = strs[0].length();\n        f = new int[n];\n        for (int i = 0; i < n; i++) {\n            f[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int fi = find(i), fj = find(j);\n                if (fi == fj) {\n                    continue;\n                }\n                if (check(strs[i], strs[j], m)) {\n                    f[fi] = fj;\n                }\n            }\n        }\n        int ret = 0;\n        for (int i = 0; i < n; i++) {\n            if (f[i] == i) {\n                ret++;\n            }\n        }\n        return ret;\n    }\n\n    public int find(int x) {\n        return f[x] == x ? x : (f[x] = find(f[x]));\n    }\n\n    public boolean check(String a, String b, int len) {\n        int num = 0;\n        for (int i = 0; i < len; i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                num++;\n                if (num > 2) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar numSimilarGroups = function(strs) {\n    const n = strs.length;\n    const m = strs[0].length;\n    const f = new Array(n).fill(0).map((element, index) => index);\n\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            const fi = find(i), fj = find(j);\n            if (fi === fj) {\n                continue;\n            }\n            if (check(strs[i], strs[j], m)) {\n                f[fi] = fj;\n            }\n        }\n    }\n    let ret = 0;\n    for (let i = 0; i < n; i++) {\n        if (f[i] === i) {\n            ret++;\n        }\n    }\n    return ret;\n\n    function find(x) {\n        return f[x] === x ? x : (f[x] = find(f[x]));\n    }\n\n    function check(a, b, len) {\n        let num = 0;\n        for (let i = 0; i < len; i++) {\n            if (a[i] !== b[i]) {\n                num++;\n                if (num > 2) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numSimilarGroups(self, strs: List[str]) -> int:\n        n = len(strs)\n        f = list(range(n))\n\n        def find(x: int) -> int:\n            if f[x] == x:\n                return x\n            f[x] = find(f[x])\n            return f[x]\n        \n        def check(a: str, b: str) -> bool:\n            num = 0\n            for ac, bc in zip(a, b):\n                if ac != bc:\n                    num += 1\n                    if num > 2:\n                        return False\n            return True\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                fi, fj = find(i), find(j)\n                if fi == fj:\n                    continue\n                if check(strs[i], strs[j]):\n                    f[fi] = fj\n        \n        ret = sum(1 for i in range(n) if f[i] == i)\n        return ret\n```\n\n```go [sol1-Golang]\ntype unionFind struct {\n    parent, size []int\n    setCount     int // 当前连通分量数目\n}\n\nfunc newUnionFind(n int) *unionFind {\n    parent := make([]int, n)\n    size := make([]int, n)\n    for i := range parent {\n        parent[i] = i\n        size[i] = 1\n    }\n    return &unionFind{parent, size, n}\n}\n\nfunc (uf *unionFind) find(x int) int {\n    if uf.parent[x] != x {\n        uf.parent[x] = uf.find(uf.parent[x])\n    }\n    return uf.parent[x]\n}\n\nfunc (uf *unionFind) union(x, y int) {\n    fx, fy := uf.find(x), uf.find(y)\n    if fx == fy {\n        return\n    }\n    if uf.size[fx] < uf.size[fy] {\n        fx, fy = fy, fx\n    }\n    uf.size[fx] += uf.size[fy]\n    uf.parent[fy] = fx\n    uf.setCount--\n}\n\nfunc (uf *unionFind) inSameSet(x, y int) bool {\n    return uf.find(x) == uf.find(y)\n}\n\nfunc isSimilar(s, t string) bool {\n    diff := 0\n    for i := range s {\n        if s[i] != t[i] {\n            diff++\n            if diff > 2 {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc numSimilarGroups(strs []string) int {\n    n := len(strs)\n    uf := newUnionFind(n)\n    for i, s := range strs {\n        for j := i + 1; j < n; j++ {\n            if !uf.inSameSet(i, j) && isSimilar(s, strs[j]) {\n                uf.union(i, j)\n            }\n        }\n    }\n    return uf.setCount\n}\n```\n\n```C [sol1-C]\nint find(int *f, int x) {\n    return f[x] == x ? x : (f[x] = find(f, f[x]));\n}\n\nbool check(char *a, char *b, int len) {\n    int num = 0;\n    for (int i = 0; i < len; i++) {\n        if (a[i] != b[i]) {\n            num++;\n            if (num > 2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nint numSimilarGroups(char **strs, int strsSize) {\n    int n = strsSize;\n    int m = strlen(strs[0]);\n    int f[n];\n    for (int i = 0; i < n; i++) {\n        f[i] = i;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            int fi = find(f, i), fj = find(f, j);\n            if (fi == fj) {\n                continue;\n            }\n            if (check(strs[i], strs[j], m)) {\n                f[fi] = fj;\n            }\n        }\n    }\n    int ret = 0;\n    for (int i = 0; i < n; i++) {\n        if (f[i] == i) {\n            ret++;\n        }\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2m + n \\log n))$，其中 $n$ 是字符串的数量。我们需要 $O(n^2)$ 地枚举任意一对字符串之间的关系，对于任意一对字符串，我们需要 $O(m)$ 的时间检查字符串是否相同。在最坏情况下我们需要对并查集执行 $O(n)$ 次合并，合并的均摊时间复杂度 $O(\\log n)$。综上，总的时间复杂度为 $O(n^2m + n \\log n))$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是字符串的数量。并查集需要 $O(n)$ 的空间。"
}