{
	"titleSlug": "defanging-an-ip-address",
	"slug": "ip-di-zhi-wu-xiao-hua-by-leetcode-soluti-7q15",
	"url": "https://leetcode-cn.com/problems/defanging-an-ip-address/solution/ip-di-zhi-wu-xiao-hua-by-leetcode-soluti-7q15/",
	"content": "#### 方法一：直接遍历\n\n**思路与算法**\n\n按照题目要求，依次将字符串 $\\textit{address}$ 中 $\\texttt{`.'}$ 替换为 $\\texttt{\"[.]\"}$ 即可。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def defangIPaddr(self, address: str) -> str:\n        return address.replace('.', '[.]')\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String defangIPaddr(String address) {\n        return address.replace(\".\", \"[.]\");\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string defangIPaddr(string address) {\n        string ans;\n        for (auto & c : address) {\n            if (c == '.') {\n                ans.append(\"[.]\");\n            } else {\n                ans.push_back(c);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string DefangIPaddr(string address) {\n        return address.Replace(\".\", \"[.]\");\n    }\n}\n```\n\n```C [sol1-C]\nchar * defangIPaddr(char * address) {\n    int len = strlen(address);\n    int pos = 0;\n    char * res = (char *)malloc(sizeof(char) * (len + 7));\n    for (int i = 0; i < len; i++) {\n        if (address[i] == '.') {\n            pos += sprintf(res + pos, \"%s\", \"[.]\");\n        } else {\n            res[pos++] = address[i];\n        }\n    }\n    res[pos] = '\\0';\n    return res;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar defangIPaddr = function(address) {\n    return address.replaceAll('\\.', '[.]');\n};\n```\n\n```go [sol1-Golang]\nfunc defangIPaddr(address string) string {\n    return strings.ReplaceAll(address, \".\", \"[.]\")\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 为字符串 $s$ 的长度。需要遍历一遍字符串即可。\n\n+ 空间复杂度：$O(1)$。除返回值外，不需要额外的存储空间。"
}