{
	"titleSlug": "gray-code",
	"slug": "ge-lei-bian-ma-by-leetcode-solution-cqi7",
	"url": "https://leetcode-cn.com/problems/gray-code/solution/ge-lei-bian-ma-by-leetcode-solution-cqi7/",
	"content": "#### 前言\n\n关于格雷编码的知识，读者可以查阅百度百科「[格雷码](https://baike.baidu.com/item/%E6%A0%BC%E9%9B%B7%E7%A0%81)」。\n\n#### 方法一：对称生成\n\n**思路与算法**\n\n假设我们已经获取到 $n-1$ 位的格雷码序列 $G_{n-1}$，我们只需要将 $G_{n-1}$ 对称翻转，记作 $G_{n-1}^T$。$G_{n-1}$ 的首元素和 $G_{n-1}^T$ 的尾元素都是相同的，反之亦然。如果我们给 $G_{n-1}^T$ 的每个元素都加上 $2^{n-1}$，记作 $(G_{n-1}^T)'$，则 $G_{n-1}$ 的首元素和 $(G_{n-1}^T)'$ 的尾元素只有一位不相同，反之亦然。因此 $G_{n-1}$ 和 $(G_{n-1}^T)'$ 拼接的序列 $G_n=[G_{n-1},~(G_{n-1}^T)']$ 满足 $n$ 位的格雷码的定义。初始值 $G_0 = [0]$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> grayCode(int n) {\n        vector<int> ret;\n        ret.reserve(1 << n);\n        ret.push_back(0);\n        for (int i = 1; i <= n; i++) {\n            int m = ret.size();\n            for (int j = m - 1; j >= 0; j--) {\n                ret.push_back(ret[j] | (1 << (i - 1)));\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> grayCode(int n) {\n        List<Integer> ret = new ArrayList<Integer>();\n        ret.add(0);\n        for (int i = 1; i <= n; i++) {\n            int m = ret.size();\n            for (int j = m - 1; j >= 0; j--) {\n                ret.add(ret.get(j) | (1 << (i - 1)));\n            }\n        }\n        return ret;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<int> GrayCode(int n) {\n        IList<int> ret = new List<int>();\n        ret.Add(0);\n        for (int i = 1; i <= n; i++) {\n            int m = ret.Count;\n            for (int j = m - 1; j >= 0; j--) {\n                ret.Add(ret[j] | (1 << (i - 1)));\n            }\n        }\n        return ret;\n    }\n}\n```\n\n```C [sol1-C]\nint* grayCode(int n, int* returnSize) {\n    int *ret = (int *)malloc((1 << n) * sizeof(int));\n    ret[0] = 0;\n    int ret_size = 1;\n    for (int i = 1; i <= n; i++) {\n        for (int j = ret_size - 1; j >= 0; j--) {\n            ret[2 * ret_size - 1 - j] = ret[j] | (1 << (i - 1));\n        }\n        ret_size <<= 1;\n    }\n    *returnSize = ret_size;\n    return ret;\n}\n```\n\n```go [sol1-Golang]\nfunc grayCode(n int) []int {\n    ans := make([]int, 1, 1<<n)\n    for i := 1; i <= n; i++ {\n        for j := len(ans) - 1; j >= 0; j-- {\n            ans = append(ans, ans[j]|1<<(i-1))\n        }\n    }\n    return ans\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def grayCode(self, n: int) -> List[int]:\n        ans = [0]\n        for i in range(1, n + 1):\n            for j in range(len(ans) - 1, -1, -1):\n                ans.append(ans[j] | (1 << (i - 1)))\n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar grayCode = function(n) {\n    const ret = [0];\n    for (let i = 1; i <= n; i++) {\n        const m = ret.length;\n        for (let j = m - 1; j >= 0; j--) {\n            ret.push(ret[j] | (1 << (i - 1)));\n        }\n    }\n    return ret;\n};\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(2^n)$，其中 $n$ 为格雷码序列的位数。递推过程的时间复杂度为 $O(\\sum_{i=1}^n 2^{i-1})=O(2^n)$。\n\n+ 空间复杂度：$O(1)$。注意返回值不计入空间复杂度。\n\n#### 方法二：二进制数转格雷码\n\n**思路与算法**\n\n如果我们有一个二进制数序列，我们也可以将它直接转换成格雷码序列。假设 $n$ 位二进制数为 $b$，对应的格雷码为 $g$，转换规则如下：\n\n$$g(i) = b(i+1) \\oplus b(i),~~~~0 \\le i \\lt n$$\n\n其中 $\\oplus$ 是按位异或运算，$g(i)$ 和 $b(i)$ 分别表示 $g$ 和 $b$ 的第 $i$ 位，且 $b(n)=0$。\n\n上述转换规则的证明如下：\n\n> 考虑 $n$ 位二进制数 $b_i$ 和对应的转换码 $g_i$，并且 $b_{i+1} = b_i + 1$ 也是 $n$ 位二进制数。$b_{i+1}$ 与 $b_i$ 的区别在于 $b_{i+1}$ 将 $b_i$ 二进制下末位连接的 $1$ 全部变成 $0$，然后将最低位的 $0$ 变成 $1$。假设变化涉及到的二进制位数为 $k$ 位，则按照上述转换规则， $g_{i+1}$ 与 $g_i$ 只有在第 $k - 1$ 位不相同，其他位都相同。因此转换得到的码相邻的数只有一位不同，而转换码第一个整数和最后一个整数分别由二进制数 $0$ 和 $2^n-1$ 转换而来，也只有一位不同。因为二进制数的取值范围为 $[0,~2^n)$，且上述转换规则为一对一映射，因此得到的转换码也是互不相同的，且取值范围也在 $[0,~2^n)$，得证。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> grayCode(int n) {\n        vector<int> ret(1 << n);\n        for (int i = 0; i < ret.size(); i++) {\n            ret[i] = (i >> 1) ^ i;\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Integer> grayCode(int n) {\n        List<Integer> ret = new ArrayList<Integer>();\n        for (int i = 0; i < 1 << n; i++) {\n            ret.add((i >> 1) ^ i);\n        }\n        return ret;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public IList<int> GrayCode(int n) {\n        IList<int> ret = new List<int>();\n        for (int i = 0; i < 1 << n; i++) {\n            ret.Add((i >> 1) ^ i);\n        }\n        return ret;\n    }\n}\n```\n\n```C [sol2-C]\nint* grayCode(int n, int* returnSize) {\n    int ret_size = 1 << n;\n    int *ret = (int *)malloc(ret_size * sizeof(int));\n    for (int i = 0; i < ret_size; i++) {\n        ret[i] = (i >> 1) ^ i;\n    }\n    *returnSize = ret_size;\n    return ret;\n}\n```\n\n```go [sol2-Golang]\nfunc grayCode(n int) []int {\n    ans := make([]int, 1<<n)\n    for i := range ans {\n        ans[i] = i>>1 ^ i\n    }\n    return ans\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def grayCode(self, n: int) -> List[int]:\n        ans = [0] * (1 << n)\n        for i in range(1 << n):\n            ans[i] = (i >> 1) ^ i\n        return ans\n```\n\n```JavaScript [sol2-JavaScript]\nvar grayCode = function(n) {\n    const ret = [];\n    for (let i = 0; i < 1 << n; i++) {\n        ret.push((i >> 1) ^ i);\n    }\n    return ret;\n};\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(2^n)$，其中 $n$ 为格雷码序列的位数。每个整数转换为格雷码的时间复杂度为 $O(1)$，总共有 $2^n$ 个转换。\n\n+ 空间复杂度：$O(1)$。注意返回值不计入空间复杂度。"
}