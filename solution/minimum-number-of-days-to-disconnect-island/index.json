{
	"titleSlug": "minimum-number-of-days-to-disconnect-island",
	"slug": "shi-lu-di-fen-chi-de-zui-shao-tian-shu-by-leetcode",
	"url": "https://leetcode-cn.com/problems/minimum-number-of-days-to-disconnect-island/solution/shi-lu-di-fen-chi-de-zui-shao-tian-shu-by-leetcode/",
	"content": "#### 方法一：分类讨论\n\n**思路与算法**\n\n仔细思考我们会发现最终的答案不可能超过 $2$。因为对于 $n\\times m$ 的岛屿（$n,m \\ge 2$），我们总是可以将某个角落相邻的**两个**陆地单元变成水单元，从而使这个角落的陆地单元与原岛屿分离。而对于 $1\\times n$ 类型的岛屿，我们也可以选择一个中间的陆地单元变成水单元使得陆地分离。因此最终的答案只可能是 $0,1,2$。\n\n那么我们只要依次检查 $0$ 或 $1$ 的答案是否存在即可。$0$ 的情况对应于一开始的二维网格已经是陆地分离的状态，而对于$1$ 的情况，我们只要枚举每一个存在的陆地单元，将其修改为水单元，再去看是否为陆地分离的状态即可。如果都不能变为陆地分离的状态，那么答案即为 $2$。\n\n那么最后要解决的即为「如何判断二维网格是否为陆地分离的状态」。根据其定义，我们可以知道只要统计全部为 $1$ 的四连通块数量是否大于 $1$ 即可，统计连通块数量可以通过深度优先搜索来处理，这里不再赘述。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\n    int dx[4] = {0, 1, 0, -1};\n    int dy[4] = {1, 0, -1, 0};\npublic:\n    void dfs(int x, int y, vector<vector<int>>& grid, int n, int m) {\n        grid[x][y] = 2;\n        for (int i = 0; i < 4; ++i) {\n            int tx = dx[i] + x;\n            int ty = dy[i] + y;\n            if (tx < 0 || tx >= n || ty < 0 || ty >= m || grid[tx][ty] != 1) {\n                continue;\n            }\n            dfs(tx, ty, grid, n, m);\n        }\n    }\n    int count(vector<vector<int>>& grid, int n, int m) {\n        int cnt = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j] == 1) {\n                    cnt++;\n                    dfs(i, j, grid, n, m);\n                }\n            }\n        }\n        // 还原\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j] == 2) {\n                    grid[i][j] = 1;\n                }\n            }\n        }\n        return cnt;\n    }\n    int minDays(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        // 岛屿数量不为 1，陆地已经分离\n        if (count(grid, n, m) != 1) {\n            return 0;\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j]) {\n                    grid[i][j] = 0;\n                    if (count(grid, n, m) != 1) {\n                        // 更改一个陆地单元为水单元后陆地分离\n                        return 1;\n                    }\n                    grid[i][j] = 1;\n                }\n            }\n        }\n        return 2;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int[] dx = {0, 1, 0, -1};\n    int[] dy = {1, 0, -1, 0};\n\n    public int minDays(int[][] grid) {\n        int n = grid.length, m = grid[0].length;\n        // 岛屿数量不为 1，陆地已经分离\n        if (count(grid, n, m) != 1) {\n            return 0;\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j] != 0) {\n                    grid[i][j] = 0;\n                    if (count(grid, n, m) != 1) {\n                        // 更改一个陆地单元为水单元后陆地分离\n                        return 1;\n                    }\n                    grid[i][j] = 1;\n                }\n            }\n        }\n        return 2;\n    }\n\n    public int count(int[][] grid, int n, int m) {\n        int cnt = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j] == 1) {\n                    cnt++;\n                    dfs(i, j, grid, n, m);\n                }\n            }\n        }\n        // 还原\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j] == 2) {\n                    grid[i][j] = 1;\n                }\n            }\n        }\n        return cnt;\n    }\n\n    public void dfs(int x, int y, int[][] grid, int n, int m) {\n        grid[x][y] = 2;\n        for (int i = 0; i < 4; ++i) {\n            int tx = dx[i] + x;\n            int ty = dy[i] + y;\n            if (tx < 0 || tx >= n || ty < 0 || ty >= m || grid[tx][ty] != 1) {\n                continue;\n            }\n            dfs(tx, ty, grid, n, m);\n        }\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst dx = [0, 1, 0, -1];\nconst dy = [1, 0, -1 ,0];\n\nconst dfs = (x, y, grid, n, m) => {\n    grid[x][y] = 2;\n    for (let i = 0; i < 4; ++i) {\n        const tx = dx[i] + x;\n        const ty = dy[i] + y;\n        if (tx < 0 || tx >= n || ty < 0 || ty >= m || grid[tx][ty] != 1) {\n            continue;\n        }\n        dfs(tx, ty, grid, n, m);\n    }\n}\n\nconst count = (grid, n, m) => {\n    let cnt = 0;\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < m; ++j) {\n            if (grid[i][j] == 1) {\n                cnt++;\n                dfs(i, j, grid, n, m);\n            }\n        }\n    }\n    // 还原\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < m; ++j) {\n            if (grid[i][j] == 2) {\n                grid[i][j] = 1;\n            }\n        }\n    }\n    return cnt;\n}\nvar minDays = function(grid) {\n    const n = grid.length, m = grid[0].length;\n    // 岛屿数量不为 1，陆地已经分离\n    if (count(grid, n, m) != 1) {\n        return 0;\n    }\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < m; ++j) {\n            if (grid[i][j]) {\n                grid[i][j] = 0;\n                if (count(grid, n, m) != 1) {\n                    // 更改一个陆地单元为水单元后陆地分离\n                    return 1;\n                }\n                grid[i][j] = 1;\n            }\n        }\n    }\n    return 2;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minDays(self, grid: List[List[int]]) -> int:\n        def dfs(x: int, y: int):\n            grid[x][y] = 2\n            for tx, ty in [(x, y + 1), (x + 1, y), (x, y - 1), (x - 1, y)]:\n                if 0 <= tx < n and 0 <= ty < m and grid[tx][ty] == 1:\n                    dfs(tx, ty)\n        \n        def count():\n            cnt = 0\n            for i in range(n):\n                for j in range(m):\n                    if grid[i][j] == 1:\n                        cnt += 1\n                        dfs(i, j)\n            # 还原\n            for i in range(n):\n                for j in range(m):\n                    if grid[i][j] == 2:\n                        grid[i][j] = 1\n            return cnt\n        \n        n, m = len(grid), len(grid[0])\n        \n        # 岛屿数量不为 1，陆地已经分离\n        if count() != 1:\n            return 0\n        \n        for i in range(n):\n            for j in range(m):\n                if grid[i][j]:\n                    grid[i][j] = 0\n                    if count() != 1:\n                        # 更改一个陆地单元为水单元后陆地分离\n                        return 1\n                    grid[i][j] = 1\n        \n        return 2\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2m^2)$，其中 $n$ 为网格高度，$m$ 为网格宽度。时间复杂度瓶颈在于枚举更改一个陆地单元为水单元，统计当前有多少岛屿，这里每次枚举需要 $O(nm)$ 的时间复杂度，统计当前有多少岛屿需要 $O(nm)$ 的时间复杂度，因此总时间复杂度为 $O(n^2m^2)$。\n\n- 空间复杂度：$O(nm)$。在深度优先搜索统计有多少岛屿的时候，递归的栈空间最深可达到 $O(nm)$，即整个二维网格全都是陆地单元的情况，因此空间复杂度为 $O(nm)$。\n\n#### 结语\n\n如果我们将每一块陆地看成无向图中的一个节点，每一组相邻的陆地之间连接一条无向边，那么得到的图 $G$：\n\n- 如果图 $G$ 中没有节点，那么答案为 $0$；\n\n- 如果连通分量个数大于 $1$，那么说明陆地已经分离，答案为 $0$；\n\n- 如果连通分量个数为 $1$：\n\n    - 如果图 $G$ 中仅有一个节点，那么答案为 $1$；\n\n    - 如果图 $G$ 中存在[割点](https://baike.baidu.com/item/%E5%89%B2%E7%82%B9)，那么将割点对应的陆地变成水，就可以使得陆地分离，答案为 $1$；\n\n    - 如果图 $G$ 中不存在割点，那么答案为 $2$。\n\n求解无向图的割点可以用 Tarjan 算法，但由于其明显超出了面试难度，在笔试中也几乎不可能出现，因此本题解中不给出该算法本身的讲解，仅给出参考代码。读者如果对 Tarjan 算法感兴趣，可以查阅资料自行学习。\n\n下面代码的时间复杂度和空间复杂度均为 $O(mn)$，即为 Tarjan 算法求解包含不超过 $mn$ 个节点以及 $4mn$ 条边的无向图的割点的时间复杂度。\n\n```C++ [sol2-C++]\nclass TarjanSCC {\nprivate:\n    const vector<vector<int>>& edges;\n    vector<int> low, dfn, fa;\n    int timestamp = -1;\n    int n;\n    \nprivate:\n    // Tarjan 算法求解割点模板\n    void getCuttingVertex(int u, int parent, vector<int>& ans) {\n        low[u] = dfn[u] = ++timestamp;\n        fa[u] = parent;\n        int child = 0;\n        bool iscv = false;\n        for (int v: edges[u]) {\n            if (dfn[v] == -1) {\n                ++child;\n                getCuttingVertex(v, u, ans);\n                low[u] = min(low[u], low[v]);\n                if (!iscv && parent != -1 && low[v] >= dfn[u]) {\n                    ans.push_back(u);\n                    iscv = true;\n                }\n            }\n            else if (v != fa[u]) {\n                low[u] = min(low[u], dfn[v]);\n            }\n        }\n        if (!iscv && parent == -1 && child >= 2) {\n            ans.push_back(u);\n        }\n    }\n\npublic:\n    TarjanSCC(const vector<vector<int>>& _edges): edges(_edges), n(_edges.size()) {}\n\n    int check() {\n        low.assign(n, -1);\n        dfn.assign(n, -1);\n        fa.assign(n, -1);\n        timestamp = -1;\n        \n        // cutting vertices 存储割点\n        vector<int> cvs;\n        // connected components count 存储连通分量个数\n        int cccnt = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dfn[i] == -1) {\n                ++cccnt;\n                getCuttingVertex(i, -1, cvs);\n            }\n        }\n        // 如果连通分量个数大于 1，答案为 0\n        if (cccnt > 1) {\n            return 0;\n        }\n        // 如果存在割点，答案为 1\n        if (!cvs.empty()) {\n            return 1;\n        }\n        return 2;\n    }\n};\n\nclass Solution {\nprivate:\n    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\npublic:\n    int minDays(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        \n        // 节点重标号\n        int landCount = 0;\n        unordered_map<int, int> relabel;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] == 1) {\n                    relabel[i * n + j] = landCount;\n                    ++landCount;\n                }\n            }\n        }\n        if (!landCount) {\n            return 0;\n        }\n        if (landCount == 1) {\n            return 1;\n        }\n\n        // 添加图中的边\n        vector<vector<int>> edges(landCount);\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] == 1) {\n                    for (int d = 0; d < 4; ++d) {\n                        int ni = i + dirs[d][0];\n                        int nj = j + dirs[d][1];\n                        if (ni >= 0 && ni < m && nj >= 0 && nj < n && grid[ni][nj] == 1) {\n                            edges[relabel[i * n + j]].push_back(relabel[ni * n + nj]);\n                        }\n                    }\n                }\n            }\n        }\n\n        auto scc = TarjanSCC(edges);\n        return scc.check();\n    }\n};\n```"
}