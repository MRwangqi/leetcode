{
	"titleSlug": "score-after-flipping-matrix",
	"slug": "fan-zhuan-ju-zhen-hou-de-de-fen-by-leetc-cxma",
	"url": "https://leetcode-cn.com/problems/score-after-flipping-matrix/solution/fan-zhuan-ju-zhen-hou-de-de-fen-by-leetc-cxma/",
	"content": "#### 方法一：贪心\n\n根据题意，能够知道一个重要的事实：给定一个翻转方案，则它们之间任意交换顺序后，得到的结果保持不变。因此，我们总可以先考虑所有的行翻转，再考虑所有的列翻转。\n\n不难发现一点：为了得到最高的分数，矩阵的每一行的最左边的数都必须为 $1$。为了做到这一点，我们可以翻转那些最左边的数不为 $1$ 的那些行，而其他的行则保持不动。\n\n当将每一行的最左边的数都变为 $1$ 之后，就只能进行列翻转了。为了使得总得分最大，我们要让每个列中 $1$ 的数目尽可能多。因此，我们扫描除了最左边的列以外的每一列，如果该列 $0$ 的数目多于 $1$ 的数目，就翻转该列，其他的列则保持不变。\n\n实际编写代码时，我们无需修改原矩阵，而是可以计算每一列对总分数的「贡献」，从而直接计算出最高的分数。假设矩阵共有 $m$ 行 $n$ 列，计算方法如下：\n\n- 对于最左边的列而言，由于最优情况下，它们的取值都为 $1$，因此每个元素对分数的贡献都为 $2^{n-1}$，总贡献为 $m \\times 2^{n-1}$。\n\n- 对于第 $j$ 列（$j>0$，此处规定最左边的列是第 $0$ 列）而言，我们统计这一列 $0,1$ 的数量，令其中的最大值为 $k$，则 $k$ 是列翻转后的 $1$ 的数量，该列的总贡献为 $k \\times 2^{n-j-1}$。需要注意的是，在统计 $0,1$ 的数量的时候，**要考虑最初进行的行反转**。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int matrixScore(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        int ret = m * (1 << (n - 1));\n\n        for (int j = 1; j < n; j++) {\n            int nOnes = 0;\n            for (int i = 0; i < m; i++) {\n                if (grid[i][0] == 1) {\n                    nOnes += grid[i][j];\n                } else {\n                    nOnes += (1 - grid[i][j]); // 如果这一行进行了行反转，则该元素的实际取值为 1 - grid[i][j]\n                }\n            }\n            int k = max(nOnes, m - nOnes);\n            ret += k * (1 << (n - j - 1));\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int matrixScore(int[][] grid) {\n        int m = grid.length, n = grid[0].length;\n        int ret = m * (1 << (n - 1));\n\n        for (int j = 1; j < n; j++) {\n            int nOnes = 0;\n            for (int i = 0; i < m; i++) {\n                if (grid[i][0] == 1) {\n                    nOnes += grid[i][j];\n                } else {\n                    nOnes += (1 - grid[i][j]); // 如果这一行进行了行反转，则该元素的实际取值为 1 - grid[i][j]\n                }\n            }\n            int k = Math.max(nOnes, m - nOnes);\n            ret += k * (1 << (n - j - 1));\n        }\n        return ret;\n    }\n}\n```\n\n```Golang [sol1-Golang]\nfunc matrixScore(grid [][]int) int {\n    m, n := len(grid), len(grid[0])\n    ans := 1 << (n - 1) * m\n    for j := 1; j < n; j++ {\n        ones := 0\n        for _, row := range grid {\n            if row[j] == row[0] {\n                ones++\n            }\n        }\n        if ones < m-ones {\n            ones = m - ones\n        }\n        ans += 1 << (n - 1 - j) * ones\n    }\n    return ans\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar matrixScore = function(grid) {\n    const m = grid.length, n = grid[0].length;\n    let ret = m * (1 << (n - 1));\n\n    for (let j = 1; j < n; j++) {\n        let nOnes = 0;\n        for (let i = 0; i < m; i++) {\n            if (grid[i][0] === 1) {\n                nOnes += grid[i][j];\n            } else {\n                nOnes += (1 - grid[i][j]); // 如果这一行进行了行反转，则该元素的实际取值为 1 - grid[i][j]\n            }\n        }\n        const k = Math.max(nOnes, m - nOnes);\n        ret += k * (1 << (n - j - 1));\n    }\n    return ret;\n};\n```\n\n```C [sol1-C]\nint matrixScore(int** grid, int gridSize, int* gridColSize) {\n    int m = gridSize, n = gridColSize[0];\n    int ret = m * (1 << (n - 1));\n\n    for (int j = 1; j < n; j++) {\n        int nOnes = 0;\n        for (int i = 0; i < m; i++) {\n            if (grid[i][0] == 1) {\n                nOnes += grid[i][j];\n            } else {\n                nOnes += (1 - grid[i][j]);  // 如果这一行进行了行反转，则该元素的实际取值为 1 - grid[i][j]\n            }\n        }\n        int k = fmax(nOnes, m - nOnes);\n        ret += k * (1 << (n - j - 1));\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 为矩阵行数，$n$ 为矩阵列数。\n\n- 空间复杂度：$O(1)$。"
}