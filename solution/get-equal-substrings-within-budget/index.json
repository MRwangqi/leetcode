{
	"titleSlug": "get-equal-substrings-within-budget",
	"slug": "jin-ke-neng-shi-zi-fu-chuan-xiang-deng-b-higz",
	"url": "https://leetcode-cn.com/problems/get-equal-substrings-within-budget/solution/jin-ke-neng-shi-zi-fu-chuan-xiang-deng-b-higz/",
	"content": "#### 前言\n\n假定字符串 $s$ 和 $t$ 的长度均为 $n$，对于任意 $0 \\le i<n$，将 $s[i]$ 变成 $t[i]$ 的开销是 $\\Big| s[i]-t[i] \\Big|$，因此可以创建一个长度为 $n$ 的数组 $\\textit{diff}$，其中 $\\textit{diff}[i]=\\Big|s[i]-t[i] \\Big|$。\n\n创建数组 $\\textit{diff}$ 之后，问题转化成计算数组 $\\textit{diff}$ 的元素和不超过 $\\textit{maxCost}$ 的最长子数组的长度。有两种方法可以解决，第一种方法是前缀和 + 二分查找，第二种方法是滑动窗口。\n\n#### 方法一：前缀和 + 二分查找\n\n首先计算数组 $\\textit{diff}$ 的前缀和，创建长度为 $n+1$ 的数组 $\\textit{accDiff}$，其中 $\\textit{accDiff}[0]=0$，对于 $0 \\le i< n$，有 $\\textit{accDiff}[i+1]=\\textit{accDiff}[i]+\\textit{diff}[i]$。\n\n即当 $1 \\le i \\le n$ 时，$\\textit{accDiff}[i]$ 为 $\\textit{diff}$ 从下标 $0$ 到下标 $i-1$ 的元素和：\n\n$$\n\\textit{accDiff}[i]=\\sum\\limits_{j=0}^{i-1} \\textit{diff}[j]\n$$\n\n当 $\\textit{diff}$ 的子数组以下标 $j$ 结尾时，需要找到最小的下标 $k$（$k \\le j$），使得 $\\textit{diff}$ 从下标 $k$ 到 $j$ 的元素和不超过 $\\textit{maxCost}$，此时子数组的长度是 $j-k+1$。由于已经计算出前缀和数组 $\\textit{accDiff}$，因此可以通过 $\\textit{accDiff}$ 得到 $\\textit{diff}$ 从下标 $k$ 到 $j$ 的元素和：\n\n$$\n\\begin{aligned}\n&\\quad \\ \\sum\\limits_{i=k}^j \\textit{diff}[k] \\\\\n&= \\sum\\limits_{i=0}^j \\textit{diff}[i] - \\sum\\limits_{i=0}^{k-1} \\textit{diff}[i] \\\\\n&= \\textit{accDiff}[j+1] - \\textit{accDiff}[k]\n\\end{aligned}\n$$\n\n因此，找到最小的下标 $k$（$k \\le j$），使得 $\\textit{diff}$ 从下标 $k$ 到 $j$ 的元素和不超过 $\\textit{maxCost}$，等价于找到最小的下标 $k$（$k \\le j$），使得 $\\textit{accDiff}[j+1] - \\textit{accDiff}[k] \\le \\textit{maxCost}$。\n\n由于 $\\textit{diff}$ 的的每个元素都是非负的，因此 $\\textit{accDiff}$ 是递增的，对于每个下标 $j$，可以通过在 $\\textit{accDiff}$ 内进行二分查找的方法找到符合要求的最小的下标 $k$。\n\n以下是具体实现方面的细节。\n\n- 不需要计算数组 $\\textit{diff}$ 的元素值，而是可以根据字符串 $s$ 和 $t$ 的对应位置字符直接计算 $\\textit{accDiff}$ 的元素值。\n\n- 对于下标范围 $[1,n]$ 内的每个 $i$，通过二分查找的方式，在下标范围 $[0,i]$ 内找到最小的下标 $\\textit{start}$，使得 $\\textit{accDiff}[\\textit{start}] \\ge \\textit{accDiff}[i]-\\textit{maxCost}$，此时对应的 $\\textit{diff}$ 的子数组的下标范围是从 $\\textit{start}$ 到 $i-1$，子数组的长度是 $i-\\textit{start}$。\n\n- 遍历下标范围 $[1,n]$ 内的每个 $i$ 之后，即可得到符合要求的最长子数组的长度，即字符串可以转化的最大长度。\n\n```Java [sol1-Java]\nclass Solution {\n    public int equalSubstring(String s, String t, int maxCost) {\n        int n = s.length();\n        int[] accDiff = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            accDiff[i + 1] = accDiff[i] + Math.abs(s.charAt(i) - t.charAt(i));\n        }\n        int maxLength = 0;\n        for (int i = 1; i <= n; i++) {\n            int start = binarySearch(accDiff, i, accDiff[i] - maxCost);\n            maxLength = Math.max(maxLength, i - start);\n        }\n        return maxLength;\n    }\n\n    public int binarySearch(int[] accDiff, int endIndex, int target) {\n        int low = 0, high = endIndex;\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (accDiff[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar equalSubstring = function(s, t, maxCost) {\n    const n = s.length;\n    const accDiff = new Array(n + 1).fill(0);\n    for (let i = 0; i < n; i++) {\n        accDiff[i + 1] = accDiff[i] + Math.abs(s[i].charCodeAt() - t[i].charCodeAt());\n    }\n    let maxLength = 0;\n    for (let i = 1; i <= n; i++) {\n        const start = binarySearch(accDiff, i, accDiff[i] - maxCost);\n        maxLength = Math.max(maxLength, i - start);\n    }\n    return maxLength;\n};\n\nconst binarySearch = (accDiff, endIndex, target) => {\n    let low = 0, high = endIndex;\n    while (low < high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        if (accDiff[mid] < target) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int binarySearch(const vector<int>& accDiff, int endIndex, int target) {\n        int low = 0, high = endIndex;\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (accDiff[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n\n    int equalSubstring(string s, string t, int maxCost) {\n        int n = s.length();\n        vector<int> accDiff(n + 1, 0);\n        for (int i = 0; i < n; i++) {\n            accDiff[i + 1] = accDiff[i] + abs(s[i] - t[i]);\n        }\n        int maxLength = 0;\n        for (int i = 1; i <= n; i++) {\n            int start = binarySearch(accDiff, i, accDiff[i] - maxCost);\n            maxLength = max(maxLength, i - start);\n        }\n        return maxLength;\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc equalSubstring(s string, t string, maxCost int) (maxLen int) {\n    n := len(s)\n    accDiff := make([]int, n+1)\n    for i, ch := range s {\n        accDiff[i+1] = accDiff[i] + abs(int(ch)-int(t[i]))\n    }\n    for i := 1; i <= n; i++ {\n        start := sort.SearchInts(accDiff[:i], accDiff[i]-maxCost)\n        maxLen = max(maxLen, i-start)\n    }\n    return\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:\n        n = len(s)\n        accDiff = [0] + list(accumulate(abs(ord(sc) - ord(tc)) for sc, tc in zip(s, t)))\n        maxLength = 0\n\n        for i in range(1, n + 1):\n            start = bisect.bisect_left(accDiff, accDiff[i] - maxCost)\n            maxLength = max(maxLength, i - start)\n        \n        return maxLength\n```\n\n```C [sol1-C]\nint binarySearch(int* accDiff, int endIndex, int target) {\n    int low = 0, high = endIndex;\n    while (low < high) {\n        int mid = (high - low) / 2 + low;\n        if (accDiff[mid] < target) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\nint equalSubstring(char* s, char* t, int maxCost) {\n    int n = strlen(s);\n    int accDiff[n + 1];\n    memset(accDiff, 0, sizeof(accDiff));\n    for (int i = 0; i < n; i++) {\n        accDiff[i + 1] = accDiff[i] + fabs(s[i] - t[i]);\n    }\n    int maxLength = 0;\n    for (int i = 1; i <= n; i++) {\n        int start = binarySearch(accDiff, i, accDiff[i] - maxCost);\n        maxLength = fmax(maxLength, i - start);\n    }\n    return maxLength;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是字符串的长度。\n  计算前缀和数组 $\\textit{accDiff}$ 的时间复杂度是 $O(n)$。\n  需要进行 $n$ 次二分查找，每次二分查找的时间复杂度是 $O(\\log n)$，二分查找共需要 $O(n \\log n)$ 的时间。\n  因此总时间复杂度是 $O(n \\log n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是字符串的长度。需要创建长度为 $n+1$ 的前缀和数组 $\\textit{accDiff}$。\n\n#### 方法二：滑动窗口\n\n由于 $\\textit{diff}$ 的的每个元素都是非负的，因此可以用滑动窗口的方法得到符合要求的最长子数组的长度。\n\n滑动窗口的思想是，维护两个指针 $\\textit{start}$ 和 $\\textit{end}$ 表示数组 $\\textit{diff}$ 的子数组的开始下标和结束下标，满足子数组的元素和不超过 $\\textit{maxCost}$，子数组的长度是 $\\textit{end}-\\textit{start}+1$。初始时，$\\textit{start}$ 和 $\\textit{end}$ 的值都是 $0$。\n\n另外还要维护子数组的元素和 $\\textit{sum}$，初始值为 $0$。在移动两个指针的过程中，更新 $\\textit{sum}$ 的值，判断子数组的元素和是否大于 $\\textit{maxCost}$，并决定应该如何移动指针。\n\n为了得到符合要求的最长子数组的长度，应遵循以下两点原则：\n\n- 当 $\\textit{start}$ 的值固定时，$\\textit{end}$ 的值应尽可能大；\n\n- 当 $\\textit{end}$ 的值固定时，$\\textit{start}$ 的值应尽可能小。\n\n基于上述原则，滑动窗口的做法如下：\n\n- 将 $\\textit{diff}[\\textit{end}]$ 的值加到 $\\textit{sum}$；\n\n- 如果 $\\textit{sum} \\le \\textit{maxCost}$，则子数组的元素和不超过 $\\textit{maxCost}$，使用当前子数组的长度 $\\textit{end}-\\textit{start}+1$ 更新最大子数组的长度；\n\n- 如果 $\\textit{sum}>\\textit{maxCost}$，则子数组的元素和大于 $\\textit{maxCost}$，需要向右移动指针 $\\textit{start}$ 并同时更新 $\\textit{sum}$ 的值，直到 $\\textit{sum} \\le \\textit{maxCost}$，此时子数组的元素和不超过 $\\textit{maxCost}$，使用子数组的长度 $\\textit{end}-\\textit{start}+1$ 更新最大子数组的长度；\n\n- 将指针 $\\textit{end}$ 右移一位，重复上述步骤，直到 $\\textit{end}$ 超出数组下标范围。\n\n遍历结束之后，即可得到符合要求的最长子数组的长度，即字符串可以转化的最大长度。\n\n```Java [sol2-Java]\nclass Solution {\n    public int equalSubstring(String s, String t, int maxCost) {\n        int n = s.length();\n        int[] diff = new int[n];\n        for (int i = 0; i < n; i++) {\n            diff[i] = Math.abs(s.charAt(i) - t.charAt(i));\n        }\n        int maxLength = 0;\n        int start = 0, end = 0;\n        int sum = 0;\n        while (end < n) {\n            sum += diff[end];\n            while (sum > maxCost) {\n                sum -= diff[start];\n                start++;\n            }\n            maxLength = Math.max(maxLength, end - start + 1);\n            end++;\n        }\n        return maxLength;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar equalSubstring = function(s, t, maxCost) {\n    const n = s.length;\n    const diff = new Array(n).fill(0);\n    for (let i = 0; i < n; i++) {\n        diff[i] = Math.abs(s[i].charCodeAt() - t[i].charCodeAt());\n    }\n    let maxLength = 0;\n    let start = 0, end = 0;\n    let sum = 0;\n    while (end < n) {\n        sum += diff[end];\n        while (sum > maxCost) {\n            sum -= diff[start];\n            start++;\n        }\n        maxLength = Math.max(maxLength, end - start + 1);\n        end++;\n    }\n    return maxLength;\n};\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int equalSubstring(string s, string t, int maxCost) {\n        int n = s.length();\n        vector<int> diff(n, 0);\n        for (int i = 0; i < n; i++) {\n            diff[i] = abs(s[i] - t[i]);\n        }\n        int maxLength = 0;\n        int start = 0, end = 0;\n        int sum = 0;\n        while (end < n) {\n            sum += diff[end];\n            while (sum > maxCost) {\n                sum -= diff[start];\n                start++;\n            }\n            maxLength = max(maxLength, end - start + 1);\n            end++;\n        }\n        return maxLength;\n    }\n};\n```\n\n```go [sol2-Golang]\nfunc equalSubstring(s string, t string, maxCost int) (maxLen int) {\n    n := len(s)\n    diff := make([]int, n)\n    for i, ch := range s {\n        diff[i] = abs(int(ch) - int(t[i]))\n    }\n    sum, start := 0, 0\n    for end, d := range diff {\n        sum += d\n        for sum > maxCost {\n            sum -= diff[start]\n            start++\n        }\n        maxLen = max(maxLen, end-start+1)\n    }\n    return\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:\n        n = len(s)\n        diff = [abs(ord(sc) - ord(tc)) for sc, tc in zip(s, t)]\n        maxLength = start = end = 0\n        total = 0\n\n        while end < n:\n            total += diff[end]\n            while total > maxCost:\n                total -= diff[start]\n                start += 1\n            maxLength = max(maxLength, end - start + 1)\n            end += 1\n        \n        return maxLength\n```\n\n```C [sol2-C]\nint equalSubstring(char* s, char* t, int maxCost) {\n    int n = strlen(s);\n    int diff[n];\n    memset(diff, 0, sizeof(diff));\n    for (int i = 0; i < n; i++) {\n        diff[i] = fabs(s[i] - t[i]);\n    }\n    int maxLength = 0;\n    int start = 0, end = 0;\n    int sum = 0;\n    while (end < n) {\n        sum += diff[end];\n        while (sum > maxCost) {\n            sum -= diff[start];\n            start++;\n        }\n        maxLength = fmax(maxLength, end - start + 1);\n        end++;\n    }\n    return maxLength;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串的长度。\n  计算数组 $\\textit{diff}$ 的时间复杂度是 $O(n)$。\n  遍历数组的过程中，两个指针的移动次数都不会超过 $n$ 次。\n  因此总时间复杂度是 $O(n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是字符串的长度。需要创建长度为 $n$ 的数组 $\\textit{diff}$。"
}