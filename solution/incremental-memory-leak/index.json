{
	"titleSlug": "incremental-memory-leak",
	"slug": "zeng-chang-de-nei-cun-xie-lu-by-leetcode-qqjd",
	"url": "https://leetcode-cn.com/problems/incremental-memory-leak/solution/zeng-chang-de-nei-cun-xie-lu-by-leetcode-qqjd/",
	"content": "#### 方法一：模拟\n\n**提示 $1$**\n\n模拟程序消耗内存的过程。\n\n**思路与算法**\n\n我们用 $t$ 表示当前时刻，同时也是当前时刻程序会额外消耗内存的位数。为了模拟分配内存的过程，在 $t$ 时刻，我们首先判断是否有内存条可以满足当前的额外内存需求。此时有两种情况：\n\n- 如果不存在，那么程序将意外退出，同时按要求返回对应的值组成的数组；\n\n- 如果存在，我们按照要求寻找剩余内存较多的内存条（相同时则选择内存条 $1$），并将对应的 $\\textit{memory}_1$ 或 $\\textit{memory}_2$ 减去 $t$。\n\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> memLeak(int memory1, int memory2) {\n        int t = 1;\n        while (t <= max(memory1, memory2)){   // 是否可分配\n            if (memory1 < memory2){   // 分配给 2\n                memory2 -= t;\n            }\n            else {   // 分配给 1\n                memory1 -= t;\n            }\n            ++t;\n        }\n        return {t, memory1, memory2};\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def memLeak(self, memory1: int, memory2: int) -> List[int]:\n        t = 1\n        while t <= max(memory1, memory2):   # 是否可分配\n            if memory1 < memory2:   # 分配给 2\n                memory2 -= t\n            else:   # 分配给 1\n                memory1 -= t\n            t += 1\n        return [t, memory1, memory2]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\sqrt{\\textit{memory}_1 + \\textit{memory}_2})$。\n\n    假设 $t$ 为意外退出的时刻，那么两个内存条一定可以容纳 $t - 1$ 时刻及以前消耗的内存。因此我们有：\n\n    $$\n    \\sum_{i = 1}^{t-1} i = \\frac{t(t - 1)}{2} \\le \\textit{memory}_1 + \\textit{memory}_2.\n    $$\n\n    亦即循环最多会进行 $O(\\sqrt{\\textit{memory}_1 + \\textit{memory}_2})$ 次，而每次执行循环的时间复杂度为 $O(1)$。\n\n- 空间复杂度：$O(1)$。"
}