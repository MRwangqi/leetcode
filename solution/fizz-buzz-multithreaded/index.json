{
	"titleSlug": "fizz-buzz-multithreaded",
	"slug": "by-zhouzihong-kld6",
	"url": "https://leetcode-cn.com/problems/fizz-buzz-multithreaded/solution/by-zhouzihong-kld6/",
	"content": "### 解题思路\n原子操作，num_用atomic<int>，pa之前不满足num_%就循环，pb pc pd也是，避免死锁，pa之前不满足num_>n就循环，需要||num_>n\n\n### 代码\n\n```cpp\nclass FizzBuzz {\n    int n_;\n    atomic<int> num_=1;\npublic:\n    FizzBuzz(int n) {\n        n_ = n;\n    }\n    void fizz(function<void()> pa) {\n        while(1){\n            while(!(num_>n_||num_%3==0&&num_%5!=0))this_thread::yield();\n            if(num_>n_)break;\n            pa();\n            num_++;\n            if(num_>n_)break;\n        }\n    }\n    void buzz(function<void()> pb) {\n        while(1){\n            while(!(num_>n_||num_%3!=0&&num_%5==0))this_thread::yield();\n            if(num_>n_)break;\n            pb();\n            num_++;\n            if(num_>n_)break;\n        }\n    }\n\tvoid fizzbuzz(function<void()> pc) {\n        while(1){\n            while(!(num_>n_||num_%3==0&&num_%5==0))this_thread::yield();\n            if(num_>n_)break;\n            pc();\n            num_++;\n            if(num_>n_)break;\n        }\n    }\n    void number(function<void(int)> pd) {\n        while(1){\n            while(!(num_>n_||num_%3!=0&&num_%5!=0))this_thread::yield();\n            if(num_>n_)break;\n            pd(num_);\n            num_++;\n            if(num_>n_)break;\n        }\n    }\n};\n```"
}