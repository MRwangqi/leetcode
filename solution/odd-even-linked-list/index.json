{
	"titleSlug": "odd-even-linked-list",
	"slug": "qi-ou-lian-biao-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/odd-even-linked-list/solution/qi-ou-lian-biao-by-leetcode-solution/",
	"content": "#### 方法一：分离节点后合并\n\n如果链表为空，则直接返回链表。\n\n对于原始链表，每个节点都是奇数节点或偶数节点。头节点是奇数节点，头节点的后一个节点是偶数节点，相邻节点的奇偶性不同。因此可以将奇数节点和偶数节点分离成奇数链表和偶数链表，然后将偶数链表连接在奇数链表之后，合并后的链表即为结果链表。\n\n原始链表的头节点 `head` 也是奇数链表的头节点以及结果链表的头节点，`head` 的后一个节点是偶数链表的头节点。令 `evenHead = head.next`，则 `evenHead` 是偶数链表的头节点。\n\n维护两个指针 `odd` 和 `even` 分别指向奇数节点和偶数节点，初始时 `odd = head`，`even = evenHead`。通过迭代的方式将奇数节点和偶数节点分离成两个链表，每一步首先更新奇数节点，然后更新偶数节点。\n\n- 更新奇数节点时，奇数节点的后一个节点需要指向偶数节点的后一个节点，因此令 `odd.next = even.next`，然后令 `odd = odd.next`，此时 `odd` 变成 `even` 的后一个节点。\n\n- 更新偶数节点时，偶数节点的后一个节点需要指向奇数节点的后一个节点，因此令 `even.next = odd.next`，然后令 `even = even.next`，此时 `even` 变成 `odd` 的后一个节点。\n\n在上述操作之后，即完成了对一个奇数节点和一个偶数节点的分离。重复上述操作，直到全部节点分离完毕。全部节点分离完毕的条件是 `even` 为空节点或者 `even.next` 为空节点，此时 `odd` 指向最后一个奇数节点（即奇数链表的最后一个节点）。\n\n最后令 `odd.next = evenHead`，将偶数链表连接在奇数链表之后，即完成了奇数链表和偶数链表的合并，结果链表的头节点仍然是 `head`。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/328/1.png)\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        ListNode evenHead = head.next;\n        ListNode odd = head, even = evenHead;\n        while (even != null && even.next != null) {\n            odd.next = even.next;\n            odd = odd.next;\n            even.next = odd.next;\n            even = even.next;\n        }\n        odd.next = evenHead;\n        return head;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar oddEvenList = function(head) {\n    if (head === null) {\n        return head;\n    }\n    let evenHead = head.next;\n    let odd = head, even = evenHead;\n    while (even !== null && even.next !== null) {\n        odd.next = even.next;\n        odd = odd.next;\n        even.next = odd.next;\n        even = even.next;\n    }\n    odd.next = evenHead;\n    return head;\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* oddEvenList(ListNode* head) {\n        if (head == nullptr) {\n            return head;\n        }\n        ListNode* evenHead = head->next;\n        ListNode* odd = head;\n        ListNode* even = evenHead;\n        while (even != nullptr && even->next != nullptr) {\n            odd->next = even->next;\n            odd = odd->next;\n            even->next = odd->next;\n            even = even->next;\n        }\n        odd->next = evenHead;\n        return head;\n    }\n};\n```\n\n```Golang [sol1-Golang]\nfunc oddEvenList(head *ListNode) *ListNode {\n    if head == nil {\n        return head\n    }\n    evenHead := head.Next\n    odd := head\n    even := evenHead\n    for even != nil && even.Next != nil {\n        odd.Next = even.Next\n        odd = odd.Next\n        even.Next = odd.Next\n        even = even.Next\n    }\n    odd.Next = evenHead\n    return head\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def oddEvenList(self, head: ListNode) -> ListNode:\n        if not head:\n            return head\n        \n        evenHead = head.next\n        odd, even = head, evenHead\n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = odd.next\n            even = even.next\n        odd.next = evenHead\n        return head\n```\n\n```C [sol1-C]\nstruct ListNode* oddEvenList(struct ListNode* head) {\n    if (head == NULL) {\n        return head;\n    }\n    struct ListNode* evenHead = head->next;\n    struct ListNode* odd = head;\n    struct ListNode* even = evenHead;\n    while (even != NULL && even->next != NULL) {\n        odd->next = even->next;\n        odd = odd->next;\n        even->next = odd->next;\n        even = even->next;\n    }\n    odd->next = evenHead;\n    return head;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的节点数。需要遍历链表中的每个节点，并更新指针。\n\n- 空间复杂度：$O(1)$。只需要维护有限的指针。"
}