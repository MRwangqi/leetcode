{
	"titleSlug": "wiggle-sort-ii",
	"slug": "bai-dong-pai-xu-ii-by-leetcode-solution-no0s",
	"url": "https://leetcode-cn.com/problems/wiggle-sort-ii/solution/bai-dong-pai-xu-ii-by-leetcode-solution-no0s/",
	"content": "#### 方法一：排序\n\n**思路与算法**\n\n此题为「[280. 摆动排序](https://leetcode.cn/problems/wiggle-sort/)」的扩展题目，不同之处在于本题要求排序后的相邻的元素有严格的大小关系，满足 $\\textit{nums}[0] < \\textit{nums}[1] > \\textit{nums}[2] < \\textit{nums}[3] \\cdots$。首先想到的解法即为排序，然后找到满足相邻的严格大小的关系。需要观察一下什么样的数组才能满足题目的要求，可以完成最终的摆动排序。假设数组中元素的数目为 $n$，则此时我们可以得到结论数组中相同元素的数目最多不超过  $\\left\\lfloor \\dfrac{n + 1}{2} \\right\\rfloor$，我们可以用反证法来证明。当相同的元素的数目大于 $\\left\\lfloor \\dfrac{n + 1}{2} \\right\\rfloor$，此时无论如何摆放都会有相同的元素相邻，必然导致摆动排序无法完成。将数组按照从小到大进行排序后，令 $x = \\left\\lfloor \\dfrac{n + 1}{2} \\right\\rfloor$，此时根据前面的推论可以推测 $\\textit{nums}[i] \\neq \\textit{nums}[i+x]$，则一定满足 $\\textit{nums}[i] < \\textit{nums}[i+x]$，因此我们可以得到：\n\n$$\n\\textit{nums}[0] < \\textit{nums}[x],\\textit{nums}[1] < \\textit{nums}[x+1], \\cdots,\\textit{nums}[i] < \\textit{nums}[i+x]\n$$\n\n此时我们可以利用上述关系完成数组的摆动排列。我们分两种情况来讨论：\n\n+ 当 $n$ 为偶数时：因为 $\\textit{nums}[i] < \\textit{nums}[i+x]$，所以一定满足 $\\textit{nums}[i] < \\textit{nums}[i+x], \\textit{nums}[i-1] < \\textit{nums}[i+x]$，因此我们将 $\\textit{nums}[i+x]$ 插入到 $\\textit{nums}[i]$ 与 $\\textit{nums}[i-1]$ 之间，比如我们可以按照以下顺序进行插入：\n\n    $$\n    \\textit{nums}[x], \\textit{nums}[0], \\textit{nums}[x + 1], \\textit{nums}[1],\\cdots, \\textit{nums}[n-2-x],\\textit{nums}[n-1],\\textit{nums}[n-1-x]\n    $$\n\n    然后将上述序列进行反转：\n\n    $$\n    \\textit{nums}[n-1-x], \\textit{nums}[n-1], \\textit{nums}[n-2-x], \\cdots, \\textit{nums}[1], \\textit{nums}[x + 1], \\textit{nums}[0], \\textit{nums}[x]\n    $$\n\n    即可得到合法的摆动排序。比如序列当前序列为 $[0,1,2,3,4,5]$，我们可以得到序列 $[3,0,4,1,5,2]$，然后将其反转即为 $[2,5,1,4,0,3]$。\n\n+ 当 $n$ 为奇数时：此时情况稍微复杂一些，此时我们需要证明当满足 $i > 0$ 时，$nums[i] < nums[i+x-1]$。此时我们可以用反证法来证明。假设存在 $i$ 且满足 $i > 0$，且满足 $\\textit{nums}[i] = \\textit{nums}[i+x-1]$ 时，则此时按照排序的规则可知 $\\textit{nums}[i] = \\textit{nums}[i+1] = \\textit{nums}[i+2] = \\cdots = \\textit{nums}[i+x-1]$，此时数组中一共有 $x$ 个相同的元素。由于这 $x$ 个元素不能互相相邻，按照摆动排序的规则，这 $x$ 个相同的元素只能放在数组的偶数位的索引中（数组索引以 $0$ 为起始），只能放置在 $0,2,4,\\cdots,n-1$ 位置上，否则就会出现相邻元素相等，而此时由于 $\\textit{nums}[0]$ 最小，因此它只能放置在偶数位的索引上，而数组中的偶数位的索引最多只有 $x$ 个，这就必然会导致矛盾，$\\textit{nums}[0]$ 无法摆放。因此，当满足 $i > 0$ 时，$nums[i] \\neq nums[i+x-1]$，也即 $\\textit{nums}[i] < \\textit{nums}[i+x-1]$。根据上述的结论我们可以得到 $\\textit{nums}[i] < \\textit{nums}[i+x]，\\textit{nums}[i+1] < \\textit{nums}[i+x]$。因此我们将 $\\textit{nums}[i+x]$ 插入到 $\\textit{nums}[i]$ 与 $\\textit{nums}[i+1]$ 之间，比如我们可以按照以下顺序进行插入：\n\n    $$\n    \\textit{nums}[0], \\textit{nums}[x], \\textit{nums}[1],\\cdots, \\textit{nums}[n-1-x],\\textit{nums}[n-1],\\textit{nums}[n-x]\n    $$\n\n    比如序列当前序列为 $[0,1,2,3,4]$，我们可以返回序列 $[0,3,1,4,2]$。同理我们将上述序列进行反转后，该序列仍然为符合要求的摆动排序。\n\n按照上述规则返回插入的序列即可。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        n = len(nums)\n        arr = sorted(nums)\n        x = (n + 1) // 2\n        j, k = x - 1, n - 1\n        for i in range(0, n, 2):\n            nums[i] = arr[j]\n            if i + 1 < n:\n                nums[i + 1] = arr[k]\n            j -= 1\n            k -= 1\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public void wiggleSort(int[] nums) {\n        int[] arr = nums.clone();\n        Arrays.sort(arr);\n        int n = nums.length;\n        int x = (n + 1) / 2;\n        for (int i = 0, j = x - 1, k = n - 1; i < n; i += 2, j--, k--) {\n            nums[i] = arr[j];\n            if (i + 1 < n) {\n                nums[i + 1] = arr[k];\n            }\n        }\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void wiggleSort(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> arr = nums;\n        sort(arr.begin(), arr.end());\n        int x = (n + 1) / 2;\n        for (int i = 0, j = x - 1, k = n - 1; i < n; i += 2, j--, k--) {\n            nums[i] = arr[j];\n            if (i + 1 < n) {\n                nums[i + 1] = arr[k];\n            }\n        }\n    }\n};\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public void WiggleSort(int[] nums) {\n        int n = nums.Length;\n        int[] arr = new int[n];\n        Array.Copy(nums, arr, n);\n        Array.Sort(arr);\n        int x = (n + 1) / 2;\n        for (int i = 0, j = x - 1, k = n - 1; i < n; i += 2, j--, k--) {\n            nums[i] = arr[j];\n            if (i + 1 < n) {\n                nums[i + 1] = arr[k];\n            }\n        }\n    }\n}\n```\n\n```C [sol1-C]\nstatic int cmp(const void *pa, const void *pb) {\n    return *(int *)pa - *(int *)pb;\n}\n\nvoid wiggleSort(int* nums, int numsSize) {\n    int * arr = (int *)malloc(sizeof(int) * numsSize);\n    memcpy(arr, nums, sizeof(int) * numsSize);\n    qsort(arr, numsSize, sizeof(int), cmp);\n    int x = (numsSize + 1) / 2;\n    for (int i = 0, j = x - 1, k = numsSize - 1; i < numsSize; i += 2, j--, k--) {\n        nums[i] = arr[j];\n        if (i + 1 < numsSize) {\n            nums[i + 1] = arr[k];\n        }\n    }\n    free(arr);\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar wiggleSort = function(nums) {\n    const arr = nums.slice();\n    arr.sort((a, b) => a - b);\n    const n = nums.length;\n    const x = Math.floor((n + 1) / 2);\n    for (let i = 0, j = x - 1, k = n - 1; i < n; i += 2, j--, k--) {\n        nums[i] = arr[j];\n        if (i + 1 < n) {\n            nums[i + 1] = arr[k];\n        }\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc wiggleSort(nums []int) {\n    n := len(nums)\n    arr := append([]int{}, nums...)\n    sort.Ints(arr)\n    x := (n + 1) / 2\n    for i, j, k := 0, x-1, n-1; i < n; i += 2 {\n        nums[i] = arr[j]\n        if i+1 < n {\n            nums[i+1] = arr[k]\n        }\n        j--\n        k--\n    }\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n\\log n)$，其中 $n$ 为数组的长度。数组排序的时间复杂度为 $O(n\\log n)$，遍历数组的时间复杂度为 $O(n)$，总的时间复杂度为 $O(n \\log n)$。\n\n+ 空间复杂度：$O(n)$，其中 $n$ 为数组的长度。需要对原数组进行拷贝一次，需要的空间为 $O(n)$。\n\n#### 方法二：三向切分\n\n**思路与算法**\n\n此解法思考难度较大，需要仔细思考。设数组的长度为 $n$，令 $x = \\left\\lfloor \\dfrac{n + 1}{2} \\right\\rfloor$， 设数组中间的位置为 $\\textit{mid} = x - 1$。据解法一的证明可以知道数组中 $\\textit{nums}[\\textit{mid}]$ 的个数最多不超过 $x$ 个，此时我们可以利用快速筛选法求出排序后的数组中 $\\textit{nums}[\\textit{mid}]$，然后我们利用快排的 $\\texttt{partition}$ 方法将将原数组分为三部分：严格小于 $\\textit{nums}[\\textit{mid}]$ 的部分，等于 $\\textit{nums}[\\textit{mid}]$ 的部分，严格大于 $\\textit{nums}[\\textit{mid}]$ 的部分。假设划分后的数组如下：\n\n$$\n\\textit{nums}[0],\\cdots, \\textit{nums}[i] \\cdots, \\textit{nums}[\\textit{mid}],  \\cdots, \\textit{nums}[i],\\cdots, \\textit{nums}[n-1]\n$$\n\n其中数组中 $\\textit{nums}[0 \\cdots i-1]$ 严格小于 $\\textit{nums}[\\textit{mid}]$，$\\textit{nums}[i \\cdots j]$ 等于 $\\textit{nums}[\\textit{mid}]$，$\\textit{nums}[j+1 \\cdots n-1]$ 严格大于 $\\textit{nums}[\\textit{mid}]$，此时按照方法一的推论可以知道 $j - i + 1 \\le x$。当满足 $0 \\le k < i$ 时，$\\textit{nums}[k] < \\textit{nums}[\\textit{mid}]$；当满足 $i \\le k \\le j$ 时，$\\textit{nums}[k] = \\textit{nums}[\\textit{mid}]$；当满足 $j < k \\le n - 1$ 时，$\\textit{nums}[\\textit{mid}] < \\textit{nums}[k]$。此时，我们分为两种情况来讨论：\n\n+ 当 $n$ 为偶数时：此时我们还是按照方法一的顺序进行摆放，我们将 $\\textit{nums}[i+x]$ 插入到 $\\textit{nums}[i-1]$ 与 $\\textit{nums}[i]$ 之间，按照以下顺序进行插入：\n\n    $$\n    \\textit{nums}[\\textit{mid} + 1], \\textit{nums}[0], \\textit{nums}[\\textit{mid} + 2], \\textit{nums}[1],\\cdots, \\textit{nums}[\\textit{mid}-1],\\textit{nums}[n-1],\\textit{nums}[\\textit{mid}]\n    $$\n\n    此时我们只需要证明只需要 $\\textit{nums}[k] < \\textit{nums}[k+x], \\textit{nums}[k-1] < \\textit{nums}[k+x]$ 即可，证明如下：\n\n    + 当满足 $k \\in [j-x + 1,mid]$ 时，此时 $(k + x) \\in [j + 1, n-1]$，根据前面的推论可以知道 $\\textit{nums}[k] \\le \\textit{nums}[\\textit{mid}] < \\textit{nums}[k+x]$，上述结论成立。\n\n    + 当满足 $k \\in [0,j-x]$ 时，此时 $(k + x) \\in [x, j]$，此时 $\\textit{mid} < (k+x) \\le j$，因此 $\\textit{nums}[k+x] = \\textit{nums}[\\textit{mid}]$，假设存在 $k$ 满足 $\\textit{nums}[k] = \\textit{nums}[k+x]$，则一定满足 $\\textit{nums}[k] = \\textit{nums}[\\textit{mid}]$，则此时可以推出 $\\textit{nums}[\\textit{mid}]$ 必然出现了 $x+1$ 次，此时与之前的结论矛盾，无法构成摆动排序，因此此时 $\\textit{nums}[k] < \\textit{nums}[k+x]$ 必然成立。\n\n    综上所述可知，当前序列满足如下大小关系：\n\n    $$\n    \\textit{nums}[\\textit{mid} + 1] > \\textit{nums}[0] < \\textit{nums}[\\textit{mid} + 2] > \\textit{nums}[1] \\cdots \\textit{nums}[\\textit{mid}-1] < \\textit{nums}[n-1] > \\textit{nums}[\\textit{mid}]\n    $$\n\n    将其反转后即为合法的摆动排序：\n\n    $$\n    \\textit{nums}[\\textit{mid}] < \\textit{nums}[n-1] > \\textit{nums}[\\textit{mid}-1] \\cdots \\textit{nums}[1] < \\textit{nums}[\\textit{mid} + 2] > \\textit{nums}[0] < \\textit{nums}[\\textit{mid} + 1]\n    $$\n\n+ 当 $n$ 为奇数时：我们同样按照方法一进行摆放，将 $\\textit{nums}[i+x]$ 插入到 $\\textit{nums}[i]$ 与 $\\textit{nums}[i+1]$ 之间：\n\n    $$\n    \\textit{nums}[0], \\textit{nums}[\\textit{mid} + 1], \\textit{nums}[1],\\cdots, \\textit{nums}[\\textit{mid} - 1],\\textit{nums}[n-1],\\textit{nums}[\\textit{mid}]\n    $$\n\n    此时只需证明 $\\textit{nums}[k] < \\textit{nums}[k+x]，\\textit{nums}[k+1] < \\textit{nums}[k+x]$ 即可，$\\textit{nums}[k] < \\textit{nums}[k+x]$ 的证明方法与上述相同，此时只需证明 $\\textit{nums}[k+1] < \\textit{nums}[k+x]$ 即可。\n\n    + 当满足 $k \\in [j-x + 1, \\textit{mid}-1]$ 时，此时 $(k + x) \\in [j + 1, n-1]$，根据前面的推论可以知道 $\\textit{nums}[k] \\le \\textit{nums}[\\textit{mid}] < \\textit{nums}[k+x]$，而此时 $k + 1 \\le \\textit{mid}$，此时一定满足 $\\textit{nums}[k+1] \\le \\textit{nums}[\\textit{mid}] < \\textit{nums}[k+x]$。\n\n    + 当满足 $k \\in [0,j-x]$ 时，此时 $(k + x) \\in [x, j]$，此时 $\\textit{nums}[k+x] = \\textit{nums}[\\textit{mid}]$，假设存在 $k$ 满足 $nums[k+1] = \\textit{nums}[\\textit{mid}] = \\textit{nums}[k+x]$，则此时可以推出 $\\textit{nums}[\\textit{mid}]$ 必然出现了 $x$ 次，而此时我们知道 $\\textit{nums}[0] < \\textit{nums}[\\textit{mid}]$ 且 $\\textit{nums}[\\textit{mid}]$ 只能出现在数组的偶数位上，相同的 $x$ 个元素只能同时放置在偶数位上否则必然会出现相邻元素相等的问题，此时 $\\textit{nums}[0]$ 无法成功放置，因此 $\\textit{nums}[k+1] < \\textit{nums}[k+x]$ 必然成立。\n\n    此时综上可知当前的序列一定满足如下大小关系：\n\n    $$\n    \\textit{nums}[0] < \\textit{nums}[\\textit{mid} + 1] > \\textit{nums}[1] \\cdots \\textit{nums}[\\textit{mid}-1] < \\textit{nums}[n-1] > \\textit{nums}[\\textit{mid}]\n    $$\n\n    将其反转后即为合法的摆动排序：\n\n    $$\n    \\textit{nums}[\\textit{mid}] < \\textit{nums}[n-1] > \\textit{nums}[\\textit{mid}-1] \\cdots\n    \\textit{nums}[1] < \\textit{nums}[\\textit{mid} + 1] > \\textit{nums}[0]\n    $$\n\n综上所述，我们将数组进行 $\\texttt{partition}$ 操作后，此时数组被分成了三部分，依次为小于 $\\textit{nums}[\\textit{mid}]$ 的部分，等于 $\\textit{nums}[\\textit{mid}]$ 的部分，大于 $\\textit{nums}[\\textit{mid}]$ 的部分。然后按照方法一排序方式进行返回即可。\n+ 如何找到数组中排序为第 $k$ 小的值需要一些技巧，可以参考「[215. 数组中的第K个最大元素](https://leetcode.cn/problems/kth-largest-element-in-an-array/)」中的快速排序的选择方法，该算法可以在 $O(n)$ 的时间复杂度内完成筛选。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Helper:\n    @staticmethod\n    def quickSelect(arr: List, l: int, r: int, index: int) -> int:\n        q = Helper.randomPartition(arr, l, r)\n        if q == index:\n            return arr[q]\n        if q < index:\n            return Helper.quickSelect(arr, q + 1, r, index)\n        return Helper.quickSelect(arr, l, q - 1, index)\n\n    @staticmethod\n    def randomPartition(nums: List, l: int, r: int) -> int:\n        i = randint(l, r)\n        nums[r], nums[i] = nums[i], nums[r]\n        return Helper.partition(nums, l, r)\n\n    @staticmethod\n    def partition(nums: List, l: int, r: int) -> int:\n        pivot = nums[r]\n        i = l - 1\n        for j in range(l, r):\n            if nums[j] < pivot:\n                i += 1\n                nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1], nums[r] = nums[r], nums[i + 1]\n        return i + 1\n\nclass Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        n = len(nums)\n        x = (n + 1) // 2\n        seed(datetime.datetime.now())\n        target = Helper.quickSelect(nums, 0, n - 1, x - 1)\n        k, i, j = 0, 0, n - 1\n        while k <= j:\n            if nums[k] > target:\n                while j > k and nums[j] > target:\n                    j -= 1\n                nums[k], nums[j] = nums[j], nums[k]\n                j -= 1\n            if nums[k] < target:\n                nums[k], nums[i] = nums[i], nums[k]\n                i += 1\n            k += 1\n        arr = nums.copy()\n        j, k = x - 1, n - 1\n        for i in range(0, n, 2):\n            nums[i] = arr[j]\n            if i + 1 < n:\n                nums[i + 1] = arr[k]\n            j -= 1\n            k -= 1\n```\n\n```Java [sol2-Java]\nclass Solution {\n    Random random = new Random();\n\n    public void wiggleSort(int[] nums) {\n        int n = nums.length;\n        int x = (n + 1) / 2;\n        int mid = x - 1;\n        int target = findKthLargest(nums, n - mid);\n        for (int k = 0, i = 0, j = n - 1; k <= j; k++) {\n            if (nums[k] > target) {\n                while (j > k && nums[j] > target) {\n                    j--;\n                }\n                swap(nums, k, j--);\n            }\n            if (nums[k] < target) {\n                swap(nums, k, i++);\n            }\n        }\n        int[] arr = nums.clone();\n        for (int i = 0, j = x - 1, k = n - 1; i < n; i += 2, j--, k--) {\n            nums[i] = arr[j];\n            if (i + 1 < n) {\n                nums[i + 1] = arr[k];\n            }\n        }\n    }\n\n    public int findKthLargest(int[] nums, int k) {\n        return quickSelect(nums, 0, nums.length - 1, nums.length - k);\n    }\n\n    public int quickSelect(int[] a, int l, int r, int index) {\n        int q = randomPartition(a, l, r);\n        if (q == index) {\n            return a[q];\n        } else {\n            return q < index ? quickSelect(a, q + 1, r, index) : quickSelect(a, l, q - 1, index);\n        }\n    }\n\n    public int randomPartition(int[] a, int l, int r) {\n        int i = random.nextInt(r - l + 1) + l;\n        swap(a, i, r);\n        return partition(a, l, r);\n    }\n\n    public int partition(int[] a, int l, int r) {\n        int x = a[r], i = l - 1;\n        for (int j = l; j < r; ++j) {\n            if (a[j] <= x) {\n                swap(a, ++i, j);\n            }\n        }\n        swap(a, i + 1, r);\n        return i + 1;\n    }\n\n    public void swap(int[] a, int i, int j) {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    void wiggleSort(vector<int>& nums) {\n        int n = nums.size();\n        int x = (n + 1) / 2;\n        int mid = x - 1;\n        nth_element(nums.begin(), nums.begin() + mid, nums.end());\n        for (int k = 0, i = 0, j = n - 1; k <= j; k++) {\n            if (nums[k] > nums[mid]) {\n                while (j > k && nums[j] > nums[mid]) {\n                    j--;\n                }\n                swap(nums[k], nums[j--]);\n            }\n            if (nums[k] < nums[mid]) {\n                swap(nums[k], nums[i++]);\n            }\n        }\n        vector<int> arr = nums;\n        for (int i = 0, j = x - 1, k = n - 1; i < n; i += 2, j--, k--) {\n            nums[i] = arr[j];\n            if (i + 1 < n) {\n                nums[i + 1] = arr[k];\n            }\n        }\n    }\n};\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    Random random = new Random();\n\n    public void WiggleSort(int[] nums) {\n        int n = nums.Length;\n        int x = (n + 1) / 2;\n        int mid = x - 1;\n        int target = FindKthLargest(nums, n - mid);\n        for (int k = 0, i = 0, j = n - 1; k <= j; k++) {\n            if (nums[k] > target) {\n                while (j > k && nums[j] > target) {\n                    j--;\n                }\n                Swap(nums, k, j--);\n            }\n            if (nums[k] < target) {\n                Swap(nums, k, i++);\n            }\n        }\n        int[] arr = new int[n];\n        Array.Copy(nums, arr, n);\n        for (int i = 0, j = x - 1, k = n - 1; i < n; i += 2, j--, k--) {\n            nums[i] = arr[j];\n            if (i + 1 < n) {\n                nums[i + 1] = arr[k];\n            }\n        }\n    }\n\n    public int FindKthLargest(int[] nums, int k) {\n        return QuickSelect(nums, 0, nums.Length - 1, nums.Length - k);\n    }\n\n    public int QuickSelect(int[] a, int l, int r, int index) {\n        int q = RandomPartition(a, l, r);\n        if (q == index) {\n            return a[q];\n        } else {\n            return q < index ? QuickSelect(a, q + 1, r, index) : QuickSelect(a, l, q - 1, index);\n        }\n    }\n\n    public int RandomPartition(int[] a, int l, int r) {\n        int i = random.Next(r - l + 1) + l;\n        Swap(a, i, r);\n        return Partition(a, l, r);\n    }\n\n    public int Partition(int[] a, int l, int r) {\n        int x = a[r], i = l - 1;\n        for (int j = l; j < r; ++j) {\n            if (a[j] <= x) {\n                Swap(a, ++i, j);\n            }\n        }\n        Swap(a, i + 1, r);\n        return i + 1;\n    }\n\n    public void Swap(int[] a, int i, int j) {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n```\n\n```C [sol2-C]\nstatic inline void swap(int* a, int* b) {\n    int t = *a;\n    *a = *b;\n    *b = t;\n}\n\nstatic inline int partition(int* a, int l, int r) {\n    int x = a[r], i = l - 1;\n    for (int j = l; j < r; ++j) {\n        if (a[j] <= x) {\n            swap(&a[++i], &a[j]);\n        }\n    }\n    swap(&a[i + 1], &a[r]);\n    return i + 1;\n}\n\nstatic inline int randomPartition(int* a, int l, int r) {\n    int i = rand() % (r - l + 1) + l;\n    swap(&a[i], &a[r]);\n    return partition(a, l, r);\n}\n\nstatic int quickSelect(int* a, int l, int r, int index) {\n    int q = randomPartition(a, l, r);\n    if (q == index) {\n        return a[q];\n    } else {\n        return q < index ? quickSelect(a, q + 1, r, index)\n                         : quickSelect(a, l, q - 1, index);\n    }\n}\n\nstatic int findKthLargest(int* nums, int numsSize, int k) {\n    srand(time(0));\n    return quickSelect(nums, 0, numsSize - 1, numsSize - k);\n}\n\nvoid wiggleSort(int* nums, int numsSize) {\n    int x = (numsSize + 1) / 2;\n    int mid = x - 1;\n    int target = findKthLargest(nums, numsSize, numsSize - mid);\n    for (int k = 0, i = 0, j = numsSize - 1; k <= j; k++) {\n        if (nums[k] > target) {\n            while (j > k && nums[j] > target) {\n                j--;\n            }\n            swap(&nums[k], &nums[j--]);\n        }\n        if (nums[k] < target) {\n            swap(&nums[k], &nums[i++]);\n        }\n    }\n    int *arr = (int *)malloc(sizeof(int) * numsSize);\n    memcpy(arr, nums, sizeof(int) * numsSize);\n    for (int i = 0, j = x - 1, k = numsSize - 1; i < numsSize; i += 2, j--, k--) {\n        nums[i] = arr[j];\n        if (i + 1 < numsSize) {\n            nums[i + 1] = arr[k];\n        }\n    }\n    free(arr);\n}\n```\n\n```go [sol2-Golang]\nfunc wiggleSort(nums []int) {\n    n := len(nums)\n    x := (n + 1) / 2\n    rand.Seed(time.Now().UnixNano())\n    target := quickSelect(nums, 0, n-1, x-1)\n    for k, i, j := 0, 0, n-1; k <= j; k++ {\n        if nums[k] > target {\n            for j > k && nums[j] > target {\n                j--\n            }\n            nums[k], nums[j] = nums[j], nums[k]\n            j--\n        }\n        if nums[k] < target {\n            nums[k], nums[i] = nums[i], nums[k]\n            i++\n        }\n    }\n    arr := append([]int{}, nums...)\n    for i, j, k := 0, x-1, n-1; i < n; i += 2 {\n        nums[i] = arr[j]\n        if i+1 < n {\n            nums[i+1] = arr[k]\n        }\n        j--\n        k--\n    }\n}\n\nfunc quickSelect(a []int, l, r, index int) int {\n    q := randomPartition(a, l, r)\n    if q == index {\n        return a[q]\n    }\n    if q < index {\n        return quickSelect(a, q+1, r, index)\n    }\n    return quickSelect(a, l, q-1, index)\n}\n\nfunc randomPartition(a []int, l, r int) int {\n    i := rand.Intn(r-l+1) + l\n    a[i], a[r] = a[r], a[i]\n    return partition(a, l, r)\n}\n\nfunc partition(a []int, l, r int) int {\n    pivot := a[r]\n    i := l - 1\n    for j := l; j < r; j++ {\n        if a[j] < pivot {\n            i++\n            a[i], a[j] = a[j], a[i]\n        }\n    }\n    a[i+1], a[r] = a[r], a[i+1]\n    return i + 1\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。找到数组中排序为 $k$ 的数需要的时间复杂度为 $O(n)$，对数组进行三向切分需要的时间复杂度为 $O(n)$，对数组进行摆放的时间的复杂度为 $O(n)$，总的时间复杂度为 $O(n)$。\n\n+ 空间复杂度：$O(n)$，其中 $n$ 为数组的长度。需要对原数组进行拷贝一次，需要的空间为 $O(n)$。\n\n#### 方法三：索引转换\n\n**思路与算法**\n\n此解法为方法一或者方法二的基础上的优化。假设当前数组进行 $\\texttt{partition}$ 后的顺序为：\n\n$$\n\\textit{nums}[0],\\cdots, \\textit{nums}[i] \\cdots, \\textit{nums}[\\textit{mid}],  \\cdots, \\textit{nums}[i],\\cdots, \\textit{nums}[n-1]\n$$\n\n设数组长度 $n$ ，令 $x = \\left\\lfloor \\dfrac{n+1}{2} \\right\\rfloor$，我们分为两种情况来讨论：\n\n+ 当 $n$ 为偶数时，此时我们已知摆动排序后的顺序为：\n\n    $$\n    \\textit{nums}[\\textit{mid}] < \\textit{nums}[n-1] > \\textit{nums}[\\textit{mid}-1] \\cdots \\textit{nums}[1] < \\textit{nums}[\\textit{mid} + 2] > \\textit{nums}[0] < \\textit{nums}[\\textit{mid} + 1]\n    $$\n\n    我们可以观察到原数组的元素索引 $[0,1,2,\\cdots, n-1]$ 在新数组中的索引分别为：\n\n    $$\n    n-2, n-4,\\cdots,0,n-1,n-3,\\cdots,1\n    $$\n\n    根据观察我们可以发现，如下转换关系：\n\n    + 当原数组的索引 $i < x$ 时：其在新数组中对应的索引为 $n - 2 \\times (i + 1)$。\n\n    + 当 $i \\ge x$ 时：其在新数组中对应的索引为 $n - 2 \\times (i - x) - 1 = n - 2 \\times i + 2 \\times x - 1 = n - 2 \\times (i + 1) + n + 1$。\n\n    + 我们可以将上述式子进行合并可以得到：对于原数组的第 $i$ 个元素，在新数组中对应的元素索引为 $(n - 2 \\times (i + 1) + n + 1) \\bmod (n+1) = (2 \\times n - 2 \\times i - 1) \\bmod (n+1)$。\n\n+ 当 $n$ 为奇数时，此时我们已知摆动排序后的顺序为：\n\n    $$\n    \\textit{nums}[\\textit{mid}] < \\textit{nums}[n-1] > \\textit{nums}[\\textit{mid}-1] \\cdots \\textit{nums}[1] < \\textit{nums}[\\textit{mid} + 1] > \\textit{nums}[0]\n    $$\n\n    我们可以观察到原数组的元素索引 $[0,1,2,\\cdots, n-1]$ 在新数组中的索引分别为：\n\n    $$\n    n-1, n-3,\\cdots,0,n-2,n-4,\\cdots,1\n    $$\n\n    根据观察我们可以发现如下转换关系：\n\n    + 当原数组的索引 $i < x$ 时：其在新数组中对应的索引为 $n - 1 - 2 \\times i$。\n\n    + 当 $i \\ge x$ 时：其在新数组中对应的索引为 $n - 2 \\times (i - x) - 2 = n - 2 \\times i + 2 \\times x - 2 = n - 1 - 2 \\times i + n$。\n\n    + 我们可以将上述式子进行合并可以得到：对于原数组的第 $i$ 个元素，在新数组中对应的元素索引为 $(n - 1 - 2 \\times i + n) \\bmod n = (2 \\times n - 2 \\times i - 1) \\bmod n$。\n\n综上我们可以对上述进行合并，当 $n$ 为偶数时，$(2 \\times n - 2 \\times i - 1)$ 需要对 $n + 1$ 进行取模，我们可以将索引 $i$ 的转换进行合并为 $(2 \\times n - 2 \\times i - 1) \\bmod (n|1)$，此时我们直接对摆动排序后的数组进行 $\\texttt{partition}$ 操作即可，我们按照 $\\texttt{partition}$ 后的数组顺序进行遍历，然后依次进行比较交换即可，这样就避免了再次将数组进行拷贝复制。\n\n**代码**\n\n```Python [sol3-Python3]\nclass Helper:\n    @staticmethod\n    def quickSelect(arr: List, l: int, r: int, index: int) -> int:\n        q = Helper.randomPartition(arr, l, r)\n        if q == index:\n            return arr[q]\n        if q < index:\n            return Helper.quickSelect(arr, q + 1, r, index)\n        return Helper.quickSelect(arr, l, q - 1, index)\n\n    @staticmethod\n    def randomPartition(nums: List, l: int, r: int) -> int:\n        i = randint(l, r)\n        nums[r], nums[i] = nums[i], nums[r]\n        return Helper.partition(nums, l, r)\n\n    @staticmethod\n    def partition(nums: List, l: int, r: int) -> int:\n        pivot = nums[r]\n        i = l - 1\n        for j in range(l, r):\n            if nums[j] < pivot:\n                i += 1\n                nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1], nums[r] = nums[r], nums[i + 1]\n        return i + 1\n\nclass Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        n = len(nums)\n        x = (n + 1) // 2\n        seed(datetime.datetime.now())\n        target = Helper.quickSelect(nums, 0, n - 1, x - 1)\n\n        transAddress = lambda i: (2 * n - 2 * i - 1) % (n | 1)\n        k, i, j = 0, 0, n - 1\n        while k <= j:\n            tk = transAddress(k)\n            if nums[tk] > target:\n                while j > k and nums[transAddress(j)] > target:\n                    j -= 1\n                tj = transAddress(j)\n                nums[tk], nums[tj] = nums[tj], nums[tk]\n                j -= 1\n            if nums[tk] < target:\n                ti = transAddress(i)\n                nums[tk], nums[ti] = nums[ti], nums[tk]\n                i += 1\n            k += 1\n```\n\n```Java [sol3-Java]\nclass Solution {\n    Random random = new Random();\n\n    public void wiggleSort(int[] nums) {\n        int n = nums.length;\n        int x = (n + 1) / 2;\n        int mid = x - 1;\n        int target = findKthLargest(nums, n - mid);\n        for (int k = 0, i = 0, j = n - 1; k <= j; k++) {\n            if (nums[transAddress(k, n)] > target) {\n                while (j > k && nums[transAddress(j, n)] > target) {\n                    j--;\n                }\n                swap(nums, transAddress(k, n), transAddress(j--, n));\n            }\n            if (nums[transAddress(k, n)] < target) {\n                swap(nums, transAddress(k, n), transAddress(i++, n));\n            }\n        }\n    }\n\n    public int transAddress(int i, int n) {\n        return (2 * n - 2 * i - 1) % (n | 1);\n    }\n\n    public int findKthLargest(int[] nums, int k) {\n        return quickSelect(nums, 0, nums.length - 1, nums.length - k);\n    }\n\n    public int quickSelect(int[] a, int l, int r, int index) {\n        int q = randomPartition(a, l, r);\n        if (q == index) {\n            return a[q];\n        } else {\n            return q < index ? quickSelect(a, q + 1, r, index) : quickSelect(a, l, q - 1, index);\n        }\n    }\n\n    public int randomPartition(int[] a, int l, int r) {\n        int i = random.nextInt(r - l + 1) + l;\n        swap(a, i, r);\n        return partition(a, l, r);\n    }\n\n    public int partition(int[] a, int l, int r) {\n        int x = a[r], i = l - 1;\n        for (int j = l; j < r; ++j) {\n            if (a[j] <= x) {\n                swap(a, ++i, j);\n            }\n        }\n        swap(a, i + 1, r);\n        return i + 1;\n    }\n\n    public void swap(int[] a, int i, int j) {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    inline int transAddress(int i, int n) {\n        return (2 * n - 2 * i - 1) % (n | 1);\n    }\n\n    void wiggleSort(vector<int>& nums) {\n        int n = nums.size();\n        int x = (n + 1) / 2;\n        int mid = x - 1;\n        nth_element(nums.begin(), nums.begin() + mid, nums.end());\n        int target = nums[mid];\n        for (int k = 0, i = 0, j = n - 1; k <= j; k++) {\n            if (nums[transAddress(k, n)] > target) {\n                while (j > k && nums[transAddress(j, n)] > target) {\n                    j--;\n                }\n                swap(nums[transAddress(k, n)], nums[transAddress(j--, n)]);\n            }\n            if (nums[transAddress(k, n)] < target) {\n                swap(nums[transAddress(k, n)], nums[transAddress(i++, n)]);\n            }\n        }\n    }\n};\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    Random random = new Random();\n\n    public void WiggleSort(int[] nums) {\n        int n = nums.Length;\n        int x = (n + 1) / 2;\n        int mid = x - 1;\n        int target = FindKthLargest(nums, n - mid);\n        for (int k = 0, i = 0, j = n - 1; k <= j; k++) {\n            if (nums[TransAddress(k, n)] > target) {\n                while (j > k && nums[TransAddress(j, n)] > target) {\n                    j--;\n                }\n                Swap(nums, TransAddress(k, n), TransAddress(j--, n));\n            }\n            if (nums[TransAddress(k, n)] < target) {\n                Swap(nums, TransAddress(k, n), TransAddress(i++, n));\n            }\n        }\n    }\n\n    public int TransAddress(int i, int n) {\n        return (2 * n - 2 * i - 1) % (n | 1);\n    }\n\n    public int FindKthLargest(int[] nums, int k) {\n        return QuickSelect(nums, 0, nums.Length - 1, nums.Length - k);\n    }\n\n    public int QuickSelect(int[] a, int l, int r, int index) {\n        int q = randomPartition(a, l, r);\n        if (q == index) {\n            return a[q];\n        } else {\n            return q < index ? QuickSelect(a, q + 1, r, index) : QuickSelect(a, l, q - 1, index);\n        }\n    }\n\n    public int randomPartition(int[] a, int l, int r) {\n        int i = random.Next(r - l + 1) + l;\n        Swap(a, i, r);\n        return Partition(a, l, r);\n    }\n\n    public int Partition(int[] a, int l, int r) {\n        int x = a[r], i = l - 1;\n        for (int j = l; j < r; ++j) {\n            if (a[j] <= x) {\n                Swap(a, ++i, j);\n            }\n        }\n        Swap(a, i + 1, r);\n        return i + 1;\n    }\n\n    public void Swap(int[] a, int i, int j) {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n```\n\n```C [sol3-C]\nstatic inline void swap(int* a, int* b) {\n    int t = *a;\n    *a = *b;\n    *b = t;\n}\n\nstatic inline int partition(int* a, int l, int r) {\n    int x = a[r], i = l - 1;\n    for (int j = l; j < r; ++j) {\n        if (a[j] <= x) {\n            swap(&a[++i], &a[j]);\n        }\n    }\n    swap(&a[i + 1], &a[r]);\n    return i + 1;\n}\n\nstatic inline int randomPartition(int* a, int l, int r) {\n    int i = rand() % (r - l + 1) + l;\n    swap(&a[i], &a[r]);\n    return partition(a, l, r);\n}\n\nstatic int quickSelect(int* a, int l, int r, int index) {\n    int q = randomPartition(a, l, r);\n    if (q == index) {\n        return a[q];\n    } else {\n        return q < index ? quickSelect(a, q + 1, r, index)\n                         : quickSelect(a, l, q - 1, index);\n    }\n}\n\nstatic int findKthLargest(int* nums, int numsSize, int k) {\n    srand(time(0));\n    return quickSelect(nums, 0, numsSize - 1, numsSize - k);\n}\n\nstatic inline int transAddress(int i, int n) {\n    return (2 * n - 2 * i - 1) % (n | 1);\n}\n\nvoid wiggleSort(int* nums, int numsSize) {\n    int x = (numsSize + 1) / 2;\n    int mid = x - 1;\n    int target = findKthLargest(nums, numsSize, numsSize - mid);\n    for (int k = 0, i = 0, j = numsSize - 1; k <= j; k++) {\n        if (nums[transAddress(k, numsSize)] > target) {\n            while (j > k && nums[transAddress(j, numsSize)] > target) {\n                j--;\n            }\n            swap(&nums[transAddress(k, numsSize)], &nums[transAddress(j--, numsSize)]);\n        }\n        if (nums[transAddress(k, numsSize)] < target) {\n            swap(&nums[transAddress(k, numsSize)], &nums[transAddress(i++, numsSize)]);\n        }\n    }\n}\n```\n\n```go [sol3-Golang]\nfunc wiggleSort(nums []int) {\n    n := len(nums)\n    x := (n + 1) / 2\n    rand.Seed(time.Now().UnixNano())\n    target := quickSelect(nums, 0, n-1, x-1)\n\n    transAddress := func(i int) int { return (2*n - 2*i - 1) % (n | 1) }\n    for k, i, j := 0, 0, n-1; k <= j; k++ {\n        tk := transAddress(k)\n        if nums[tk] > target {\n            for j > k && nums[transAddress(j)] > target {\n                j--\n            }\n            tj := transAddress(j)\n            nums[tk], nums[tj] = nums[tj], nums[tk]\n            j--\n        }\n        if nums[tk] < target {\n            ti := transAddress(i)\n            nums[tk], nums[ti] = nums[ti], nums[tk]\n            i++\n        }\n    }\n}\n\nfunc quickSelect(a []int, l, r, index int) int {\n    q := randomPartition(a, l, r)\n    if q == index {\n        return a[q]\n    }\n    if q < index {\n        return quickSelect(a, q+1, r, index)\n    }\n    return quickSelect(a, l, q-1, index)\n}\n\nfunc randomPartition(a []int, l, r int) int {\n    i := rand.Intn(r-l+1) + l\n    a[i], a[r] = a[r], a[i]\n    return partition(a, l, r)\n}\n\nfunc partition(a []int, l, r int) int {\n    pivot := a[r]\n    i := l - 1\n    for j := l; j < r; j++ {\n        if a[j] < pivot {\n            i++\n            a[i], a[j] = a[j], a[i]\n        }\n    }\n    a[i+1], a[r] = a[r], a[i+1]\n    return i + 1\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。找到数组中排序为 $k$ 的数需要的时间复杂度为 $O(n)$，对数组进行三向切分需要的时间复杂度为 $O(n)$，总的时间复杂度为 $O(n)$。\n\n+ 空间复杂度：$O(\\log n)$。查找第 $k$ 大的元素时需要使用递归，此时递归使用栈空间的空间代价的期望为 $O(\\log n)$。\n\n#### 方法四：递归优化\n\n**思路与算法**\n\n我们可以在方法三的基础上对查找数组中排序为第 $k$ 大元素的函数进行优化，用非递归实现查找第 $k$ 大的元素，进一步优化空间复杂度。\n\n```Python [sol4-Python3]\ndef quickSelect(a: List[int], k: int) -> int:\n    seed(datetime.datetime.now())\n    shuffle(a)\n    l, r = 0, len(a) - 1\n    while l < r:\n        pivot = a[l]\n        i, j = l, r + 1\n        while True:\n            i += 1\n            while i < r and a[i] < pivot:\n                i += 1\n            j -= 1\n            while j > l and a[j] > pivot:\n                j -= 1\n            if i >= j:\n                break\n            a[i], a[j] = a[j], a[i]\n        a[l], a[j] = a[j], pivot\n        if j == k:\n            break\n        if j < k:\n            l = j + 1\n        else:\n            r = j - 1\n    return a[k]\n\nclass Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        n = len(nums)\n        x = (n + 1) // 2\n        target = quickSelect(nums, x - 1)\n\n        transAddress = lambda i: (2 * n - 2 * i - 1) % (n | 1)\n        k, i, j = 0, 0, n - 1\n        while k <= j:\n            tk = transAddress(k)\n            if nums[tk] > target:\n                while j > k and nums[transAddress(j)] > target:\n                    j -= 1\n                tj = transAddress(j)\n                nums[tk], nums[tj] = nums[tj], nums[tk]\n                j -= 1\n            if nums[tk] < target:\n                ti = transAddress(i)\n                nums[tk], nums[ti] = nums[ti], nums[tk]\n                i += 1\n            k += 1\n```\n\n```Java [sol4-Java]\nclass Solution {\n    Random random = new Random();\n\n    public void wiggleSort(int[] nums) {\n        int n = nums.length;\n        int x = (n + 1) / 2;\n        int mid = x - 1;\n        int target = findKthLargest(nums, n - mid);\n        for (int k = 0, i = 0, j = n - 1; k <= j; k++) {\n            if (nums[transAddress(k, n)] > target) {\n                while (j > k && nums[transAddress(j, n)] > target) {\n                    j--;\n                }\n                swap(nums, transAddress(k, n), transAddress(j--, n));\n            }\n            if (nums[transAddress(k, n)] < target) {\n                swap(nums, transAddress(k, n), transAddress(i++, n));\n            }\n        }\n    }\n\n    public int findKthLargest(int[] nums, int k) {\n        int left = 0, right = nums.length - 1;\n        while (left <= right) {\n            int pivot = random.nextInt(right - left + 1) + left;\n            int newPivot = partitionAroundPivot(left, right, pivot, nums);\n            if (newPivot == k - 1) {\n                return nums[newPivot];\n            } else if (newPivot > k - 1) {\n                right = newPivot - 1;\n            } else { \n                left = newPivot + 1;\n            }\n        }\n        return nums[k - 1];\n    }\n\n    public int transAddress(int i, int n) {\n        return (2 * n - 2 * i - 1) % (n | 1);\n    }\n\n    public int partitionAroundPivot(int left, int right, int pivot, int[] nums) {\n        int pivotValue = nums[pivot];\n        int newPivot = left;\n        swap(nums, pivot, right);\n        for (int i = left; i < right; ++i) {\n            if (nums[i] > pivotValue) {\n                swap(nums, i, newPivot++);\n            }\n        }\n        swap(nums, right, newPivot);\n        return newPivot;\n    }\n\n    public void swap(int[] a, int i, int j) {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n```\n\n```C++ [sol4-C++]\nclass Solution {\npublic:\n    int partitionAroundPivot(int left, int right, int pivot, vector<int> &nums) {\n        int pivotValue = nums[pivot];\n        int newPivot = left;\n        swap(nums[pivot], nums[right]);\n        for (int i = left; i < right; ++i) {\n            if (nums[i] > pivotValue) {\n                swap(nums[i], nums[newPivot++]);\n            }\n        }\n        swap(nums[right], nums[newPivot]);\n        return newPivot;\n    }\n\n    int findKthLargest(vector<int> &nums, int k) {\n        int left = 0, right = nums.size() - 1;\n        default_random_engine gen((random_device())());\n        while (left <= right) {\n            uniform_int_distribution<int> dis(left, right);\n            int pivot = dis(gen);\n            int newPivot = partitionAroundPivot(left, right, pivot, nums);\n            if (newPivot == k - 1) {\n                return nums[newPivot];\n            } else if (newPivot > k - 1) {\n                right = newPivot - 1;\n            } else { \n                left = newPivot + 1;\n            }\n        }\n        return nums[k - 1];\n    }\n\n    inline int transAddress(int i, int n) {\n        return (2 * n - 2 * i - 1) % (n | 1);\n    }\n\n    void wiggleSort(vector<int>& nums) {\n        int n = nums.size();\n        int x = (n + 1) / 2;\n        int mid = x - 1;\n        int target = findKthLargest(nums, n - mid);\n        for (int k = 0, i = 0, j = n - 1; k <= j; k++) {\n            if (nums[transAddress(k, n)] > target) {\n                while (j > k && nums[transAddress(j, n)] > target) {\n                    j--;\n                }\n                swap(nums[transAddress(k, n)], nums[transAddress(j--, n)]);\n            }\n            if (nums[transAddress(k, n)] < target) {\n                swap(nums[transAddress(k, n)], nums[transAddress(i++, n)]);\n            }\n        }\n    }\n};\n```\n\n```C# [sol4-C#]\npublic class Solution {\n    Random random = new Random();\n\n    public void WiggleSort(int[] nums) {\n        int n = nums.Length;\n        int x = (n + 1) / 2;\n        int mid = x - 1;\n        int target = FindKthLargest(nums, n - mid);\n        for (int k = 0, i = 0, j = n - 1; k <= j; k++) {\n            if (nums[TransAddress(k, n)] > target) {\n                while (j > k && nums[TransAddress(j, n)] > target) {\n                    j--;\n                }\n                Swap(nums, TransAddress(k, n), TransAddress(j--, n));\n            }\n            if (nums[TransAddress(k, n)] < target) {\n                Swap(nums, TransAddress(k, n), TransAddress(i++, n));\n            }\n        }\n    }\n\n    public int FindKthLargest(int[] nums, int k) {\n        int left = 0, right = nums.Length - 1;\n        while (left <= right) {\n            int pivot = random.Next(right - left + 1) + left;\n            int newPivot = PartitionAroundPivot(left, right, pivot, nums);\n            if (newPivot == k - 1) {\n                return nums[newPivot];\n            } else if (newPivot > k - 1) {\n                right = newPivot - 1;\n            } else { \n                left = newPivot + 1;\n            }\n        }\n        return nums[k - 1];\n    }\n\n    public int TransAddress(int i, int n) {\n        return (2 * n - 2 * i - 1) % (n | 1);\n    }\n\n    public int PartitionAroundPivot(int left, int right, int pivot, int[] nums) {\n        int pivotValue = nums[pivot];\n        int newPivot = left;\n        Swap(nums, pivot, right);\n        for (int i = left; i < right; ++i) {\n            if (nums[i] > pivotValue) {\n                Swap(nums, i, newPivot++);\n            }\n        }\n        Swap(nums, right, newPivot);\n        return newPivot;\n    }\n\n    public void Swap(int[] a, int i, int j) {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n```\n\n```C [sol4-C]\nstatic inline void swap(int *a, int *b) {\n    int c = *a;\n    *a = *b;\n    *b = c;\n}\n\nstatic inline int partitionAroundPivot(int left, int right, int pivot, int *nums) {\n    int pivotValue = nums[pivot];\n    int newPivot = left;\n    swap(&nums[pivot], &nums[right]);\n    for (int i = left; i < right; ++i) {\n        if (nums[i] > pivotValue) {\n            swap(&nums[i], &nums[newPivot++]);\n        }\n    }\n    swap(&nums[right], &nums[newPivot]);\n    return newPivot;\n}\n\nstatic int findKthLargest(int* nums, int numsSize, int k) {\n    int left = 0, right = numsSize - 1;\n    srand(time(0));\n    while (left <= right) {\n        int pivot = rand() % (right - left + 1) + left;\n        int newPivot = partitionAroundPivot(left, right, pivot, nums);\n        if (newPivot == k - 1) {\n            return nums[newPivot];\n        } else if (newPivot > k - 1) {\n            right = newPivot - 1;\n        } else { \n            left = newPivot + 1;\n        }\n    }\n    return nums[k - 1];\n}\n\nstatic inline int transAddress(int i, int n) {\n    return (2 * n - 2 * i - 1) % (n | 1);\n}\n\nvoid wiggleSort(int* nums, int numsSize) {\n    int x = (numsSize + 1) / 2;\n    int mid = x - 1;\n    int target = findKthLargest(nums, numsSize, numsSize - mid);\n    for (int k = 0, i = 0, j = numsSize - 1; k <= j; k++) {\n        if (nums[transAddress(k, numsSize)] > target) {\n            while (j > k && nums[transAddress(j, numsSize)] > target) {\n                j--;\n            }\n            swap(&nums[transAddress(k, numsSize)], &nums[transAddress(j--, numsSize)]);\n        }\n        if (nums[transAddress(k, numsSize)] < target) {\n            swap(&nums[transAddress(k, numsSize)], &nums[transAddress(i++, numsSize)]);\n        }\n    }\n}\n```\n\n```go [sol4-Golang]\nfunc wiggleSort(nums []int) {\n    n := len(nums)\n    x := (n + 1) / 2\n    target := quickSelect(nums, x-1)\n\n    transAddress := func(i int) int { return (2*n - 2*i - 1) % (n | 1) }\n    for k, i, j := 0, 0, n-1; k <= j; k++ {\n        tk := transAddress(k)\n        if nums[tk] > target {\n            for j > k && nums[transAddress(j)] > target {\n                j--\n            }\n            tj := transAddress(j)\n            nums[tk], nums[tj] = nums[tj], nums[tk]\n            j--\n        }\n        if nums[tk] < target {\n            ti := transAddress(i)\n            nums[tk], nums[ti] = nums[ti], nums[tk]\n            i++\n        }\n    }\n}\n\nfunc quickSelect(a []int, k int) int {\n    rand.Seed(time.Now().UnixNano())\n    rand.Shuffle(len(a), func(i, j int) { a[i], a[j] = a[j], a[i] })\n    for l, r := 0, len(a)-1; l < r; {\n        pivot := a[l]\n        i, j := l, r+1\n        for {\n            for i++; i < r && a[i] < pivot; i++ {\n            }\n            for j--; j > l && a[j] > pivot; j-- {\n            }\n            if i >= j {\n                break\n            }\n            a[i], a[j] = a[j], a[i]\n        }\n        a[l], a[j] = a[j], pivot\n        if j == k {\n            break\n        } else if j < k {\n            l = j + 1\n        } else {\n            r = j - 1\n        }\n    }\n    return a[k]\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。找到数组中排序为 $k$ 的数需要的时间复杂度为 $O(n)$，对数组进行三向切分需要的时间复杂度为 $O(n)$，总的时间复杂度为 $O(n)$。\n\n+ 空间复杂度：$O(1)$。"
}