{
	"titleSlug": "aseY1I",
	"slug": "dan-ci-chang-du-de-zui-da-cheng-ji-by-le-l5mu",
	"url": "https://leetcode-cn.com/problems/aseY1I/solution/dan-ci-chang-du-de-zui-da-cheng-ji-by-le-l5mu/",
	"content": "#### 方法一：位运算\n\n为了得到单词长度的最大乘积，朴素的做法是，遍历字符串数组 $\\textit{words}$ 中的每一对单词，判断这一对单词是否有公共字母，如果没有公共字母，则用这一对单词的长度乘积更新单词长度的最大乘积。\n\n用 $n$ 表示数组 $\\textit{words}$ 的长度，用 $l_i$ 表示单词 $\\textit{words}[i]$ 的长度，其中 $0 \\le i < n$，则上述做法需要遍历字符串数组 $\\textit{words}$ 中的每一对单词，对于下标为 $i$ 和 $j$ 的单词，其中 $i < j$，需要 $O(l_i \\times l_j)$ 的时间判断是否有公共字母和计算长度乘积。因此上述做法的时间复杂度是 $O(\\sum_{0 \\le i < j < n} l_i \\times l_j)$，该时间复杂度高于 $O(n^2)$。\n\n如果可以将判断两个单词是否有公共字母的时间复杂度降低到 $O(1)$，则可以将总时间复杂度降低到 $O(n^2)$。可以使用位运算预处理每个单词，通过位运算操作判断两个单词是否有公共字母。由于单词只包含小写字母，共有 $26$ 个小写字母，因此可以使用位掩码的最低 $26$ 位分别表示每个字母是否在这个单词中出现。将 $\\text{a}$ 到 $\\text{z}$ 分别记为第 $0$ 个字母到第 $25$ 个字母，则位掩码的从低到高的第 $i$ 位是 $1$ 当且仅当第 $i$ 个字母在这个单词中，其中 $0 \\le i \\le 25$。\n\n用数组 $\\textit{masks}$ 记录每个单词的位掩码表示。计算数组 $\\textit{masks}$ 之后，判断第 $i$ 个单词和第 $j$ 个单词是否有公共字母可以通过判断 $\\textit{masks}[i]~\\&~\\textit{masks}[j]$ 是否等于 $0$ 实现，当且仅当 $\\textit{masks}[i]~\\&~\\textit{masks}[j] = 0$ 时第 $i$ 个单词和第 $j$ 个单词没有公共字母，此时使用这两个单词的长度乘积更新单词长度的最大乘积。\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxProduct(String[] words) {\n        int length = words.length;\n        int[] masks = new int[length];\n        for (int i = 0; i < length; i++) {\n            String word = words[i];\n            int wordLength = word.length();\n            for (int j = 0; j < wordLength; j++) {\n                masks[i] |= 1 << (word.charAt(j) - 'a');\n            }\n        }\n        int maxProd = 0;\n        for (int i = 0; i < length; i++) {\n            for (int j = i + 1; j < length; j++) {\n                if ((masks[i] & masks[j]) == 0) {\n                    maxProd = Math.max(maxProd, words[i].length() * words[j].length());\n                }\n            }\n        }\n        return maxProd;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MaxProduct(string[] words) {\n        int length = words.Length;\n        int[] masks = new int[length];\n        for (int i = 0; i < length; i++) {\n            String word = words[i];\n            int wordLength = word.Length;\n            for (int j = 0; j < wordLength; j++) {\n                masks[i] |= 1 << (word[j] - 'a');\n            }\n        }\n        int maxProd = 0;\n        for (int i = 0; i < length; i++) {\n            for (int j = i + 1; j < length; j++) {\n                if ((masks[i] & masks[j]) == 0) {\n                    maxProd = Math.Max(maxProd, words[i].Length * words[j].Length);\n                }\n            }\n        }\n        return maxProd;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxProduct(vector<string>& words) {\n        int length = words.size();\n        vector<int> masks(length);\n        for (int i = 0; i < length; i++) {\n            string word = words[i];\n            int wordLength = word.size();\n            for (int j = 0; j < wordLength; j++) {\n                masks[i] |= 1 << (word[j] - 'a');\n            }\n        }\n        int maxProd = 0;\n        for (int i = 0; i < length; i++) {\n            for (int j = i + 1; j < length; j++) {\n                if ((masks[i] & masks[j]) == 0) {\n                    maxProd = max(maxProd, int(words[i].size() * words[j].size()));\n                }\n            }\n        }\n        return maxProd;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxProduct = function(words) {\n    const length = words.length;\n    const masks = new Array(length).fill(0);\n    for (let i = 0; i < length; i++) {\n        const word = words[i];\n        const wordLength = word.length;\n        for (let j = 0; j < wordLength; j++) {\n            masks[i] |= 1 << (word[j].charCodeAt() - 'a'.charCodeAt());\n        }\n    }\n    let maxProd = 0;\n    for (let i = 0; i < length; i++) {\n        for (let j = i + 1; j < length; j++) {\n            if ((masks[i] & masks[j]) === 0) {\n                maxProd = Math.max(maxProd, words[i].length * words[j].length);\n            }\n        }\n    }\n    return maxProd;\n};\n```\n\n```go [sol1-Golang]\nfunc maxProduct(words []string) (ans int) {\n    masks := make([]int, len(words))\n    for i, word := range words {\n        for _, ch := range word {\n            masks[i] |= 1 << (ch - 'a')\n        }\n    }\n\n    for i, x := range masks {\n        for j, y := range masks[:i] {\n            if x&y == 0 && len(words[i])*len(words[j]) > ans {\n                ans = len(words[i]) * len(words[j])\n            }\n        }\n    }\n    return\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        masks = [reduce(lambda a, b: a | (1 << (ord(b) - ord('a'))), word, 0) for word in words]\n        return max((len(x[1]) * len(y[1]) for x, y in product(zip(masks, words), repeat=2) if x[0] & y[0] == 0), default=0)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(L + n^2)$，其中 $L$ 是数组 $\\textit{words}$ 中的全部单词长度之和，$n$ 是数组 $\\textit{words}$ 的长度。预处理每个单词的位掩码需要遍历全部单词的全部字母，时间复杂度是 $O(L)$，然后需要使用两重循环遍历位掩码数组 $\\textit{masks}$ 计算单词长度的最大乘积，时间复杂度是 $O(n^2)$，因此总时间复杂度是 $O(L + n^2)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{words}$ 的长度。需要创建长度为 $n$ 的位掩码数组 $\\textit{masks}$。\n\n#### 方法二：位运算优化\n\n方法一需要对数组 $\\textit{words}$ 中的每个单词计算位掩码，如果数组 $\\textit{words}$ 中存在由相同的字母组成的不同单词，则会造成不必要的重复计算。例如单词 $\\text{meet}$ 和 $\\text{met}$ 包含的字母相同，只是字母的出现次数和单词长度不同，因此这两个单词的位掩码表示也相同。由于判断两个单词是否有公共字母是通过判断两个单词的位掩码的按位与运算实现，因此在位掩码相同的情况下，单词的长度不会影响是否有公共字母，当两个位掩码的按位与运算等于 $0$ 时，为了得到单词长度的最大乘积，这两个位掩码对应的单词长度应该尽可能大。根据上述分析可知，如果有多个单词的位掩码相同，则只需要记录该位掩码对应的最大单词长度即可。\n\n可以使用哈希表记录每个位掩码对应的最大单词长度，然后遍历哈希表中的每一对位掩码，如果这一对位掩码的按位与运算等于 $0$，则用这一对位掩码对应的长度乘积更新单词长度的最大乘积。\n\n由于每个单词的位掩码都不等于 $0$，任何一个不等于 $0$ 的数和自身做按位与运算的结果一定不等于 $0$，因此当一对位掩码的按位与运算等于 $0$ 时，这两个位掩码一定是不同的，对应的单词也一定是不同的。\n\n```Java [sol2-Java]\nclass Solution {\n    public int maxProduct(String[] words) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        int length = words.length;\n        for (int i = 0; i < length; i++) {\n            int mask = 0;\n            String word = words[i];\n            int wordLength = word.length();\n            for (int j = 0; j < wordLength; j++) {\n                mask |= 1 << (word.charAt(j) - 'a');\n            }\n            if (wordLength > map.getOrDefault(mask, 0)) {\n                map.put(mask, wordLength);\n            }\n        }\n        int maxProd = 0;\n        Set<Integer> maskSet = map.keySet();\n        for (int mask1 : maskSet) {\n            int wordLength1 = map.get(mask1);\n            for (int mask2 : maskSet) {\n                if ((mask1 & mask2) == 0) {\n                    int wordLength2 = map.get(mask2);\n                    maxProd = Math.max(maxProd, wordLength1 * wordLength2);\n                }\n            }\n        }\n        return maxProd;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int MaxProduct(string[] words) {\n        Dictionary<int, int> dictionary = new Dictionary<int, int>();\n        int length = words.Length;\n        for (int i = 0; i < length; i++) {\n            int mask = 0;\n            String word = words[i];\n            int wordLength = word.Length;\n            for (int j = 0; j < wordLength; j++) {\n                mask |= 1 << (word[j] - 'a');\n            }\n            if (dictionary.ContainsKey(mask)) {\n                if (wordLength > dictionary[mask]) {\n                    dictionary[mask] = wordLength;\n                }\n            } else {\n                dictionary.Add(mask, wordLength);\n            }\n        }\n        int maxProd = 0;\n        foreach (int mask1 in dictionary.Keys) {\n            int wordLength1 = dictionary[mask1];\n            foreach (int mask2 in dictionary.Keys) {\n                if ((mask1 & mask2) == 0) {\n                    int wordLength2 = dictionary[mask2];\n                    maxProd = Math.Max(maxProd, wordLength1 * wordLength2);\n                }\n            }\n        }\n        return maxProd;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxProduct(vector<string>& words) {\n        unordered_map<int,int> map;\n        int length = words.size();\n        for (int i = 0; i < length; i++) {\n            int mask = 0;\n            string word = words[i];\n            int wordLength = word.size();\n            for (int j = 0; j < wordLength; j++) {\n                mask |= 1 << (word[j] - 'a');\n            }\n            if(map.count(mask)) {\n                if (wordLength > map[mask]) {\n                    map[mask] = wordLength;\n                }\n            } else {\n                map[mask] = wordLength;\n            }\n            \n        }\n        int maxProd = 0;\n        for (auto [mask1, _] : map) {\n            int wordLength1 = map[mask1];\n            for (auto [mask2, _] : map) {\n                if ((mask1 & mask2) == 0) {\n                    int wordLength2 = map[mask2];\n                    maxProd = max(maxProd, wordLength1 * wordLength2);\n                }\n            }\n        }\n        return maxProd;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar maxProduct = function(words) {\n    const map = new Map();\n    const length = words.length;\n    for (let i = 0; i < length; i++) {\n        let mask = 0;\n        const word = words[i];\n        const wordLength = word.length;\n        for (let j = 0; j < wordLength; j++) {\n            mask |= 1 << (word[j].charCodeAt() - 'a'.charCodeAt());\n        }\n        if (wordLength > (map.get(mask) || 0)) {\n            map.set(mask, wordLength);\n        }\n    }\n    let maxProd = 0;\n    const maskSet = Array.from(map.keys());\n    for (const mask1 of maskSet) {\n        const wordLength1 = map.get(mask1);\n        for (const mask2 of maskSet) {\n            if ((mask1 & mask2) === 0) {\n                const wordLength2 = map.get(mask2);\n                maxProd = Math.max(maxProd, wordLength1 * wordLength2);\n            }\n        }\n    }\n    return maxProd;\n};\n```\n\n```go [sol2-Golang]\nfunc maxProduct(words []string) (ans int) {\n    masks := map[int]int{}\n    for _, word := range words {\n        mask := 0\n        for _, ch := range word {\n            mask |= 1 << (ch - 'a')\n        }\n        if len(word) > masks[mask] {\n            masks[mask] = len(word)\n        }\n    }\n\n    for x, lenX := range masks {\n        for y, lenY := range masks {\n            if x&y == 0 && lenX*lenY > ans {\n                ans = lenX * lenY\n            }\n        }\n    }\n    return\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        masks = defaultdict(int)\n        for word in words:\n            mask = reduce(lambda a, b: a | (1 << (ord(b) - ord('a'))), word, 0)\n            masks[mask] = max(masks[mask], len(word))\n        return max((masks[x] * masks[y] for x, y in product(masks, repeat=2) if x & y == 0), default=0)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(L + n^2)$，其中 $L$ 是数组 $\\textit{words}$ 中的全部单词长度之和，$n$ 是数组 $\\textit{words}$ 的长度。预处理每个单词的位掩码并将位掩码对应的最大单词长度存入哈希表需要遍历全部单词的全部字母，时间复杂度是 $O(L)$，然后需要使用两重循环遍历哈希表计算单词长度的最大乘积，时间复杂度是 $O(n^2)$，因此总时间复杂度是 $O(L + n^2)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{words}$ 的长度。需要创建哈希表记录每个位掩码对应的最大单词长度，哈希表中的记录数量不会超过 $n$。"
}