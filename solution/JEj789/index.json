{
	"titleSlug": "JEj789",
	"slug": "fen-shua-fang-zi-by-leetcode-solution-q0kh",
	"url": "https://leetcode-cn.com/problems/JEj789/solution/fen-shua-fang-zi-by-leetcode-solution-q0kh/",
	"content": "#### 方法一：动态规划\n\n每个房子可以被粉刷成三种颜色中的一种，需要计算在满足相邻房子的颜色不同的情况下粉刷所有房子的最小花费成本。由于当已知粉刷前 $i$ 个房子的最小花费成本时，根据粉刷第 $i + 1$ 号房子的花费成本可以计算粉刷前 $i + 1$ 个房子的最小花费成本，因此可以使用动态规划计算最小花费成本。\n\n由于每个房子可以被粉刷成三种颜色中的一种，因此需要分别考虑粉刷成三种颜色时的最小花费成本。\n\n用 $\\textit{dp}[i][j]$ 表示粉刷第 $0$ 号房子到第 $i$ 号房子且第 $i$ 号房子被粉刷成第 $j$ 种颜色时的最小花费成本。由于一共有 $n$ 个房子和 $3$ 种颜色，因此 $0 \\le i < n$，$0 \\le j < 3$。\n\n当只有第 $0$ 号房子被粉刷时，对于每一种颜色，总花费成本即为将第 $0$ 号房子粉刷成该颜色的花费成本，因此边界条件是：对于任意 $0 \\le j < 3$，$\\textit{dp}[0][j] = \\textit{costs}[0][j]$。\n\n对于 $1 \\le i < n$，第 $i$ 号房子和第 $i - 1$ 号房子的颜色必须不同，因此当第 $i$ 号房子被粉刷成某一种颜色时，第 $i - 1$ 号房子只能被粉刷成另外两种颜色之一。当第 $i$ 号房子分别被粉刷成三种颜色时，粉刷第 $0$ 号房子到第 $i$ 号房子的最小花费成本计算如下：\n\n$$\n\\begin{aligned}\n\\textit{dp}[i][0] &= \\min(\\textit{dp}[i - 1][1], \\textit{dp}[i - 1][2]) + \\textit{costs}[i][0] \\\\\n\\textit{dp}[i][1] &= \\min(\\textit{dp}[i - 1][0], \\textit{dp}[i - 1][2]) + \\textit{costs}[i][1] \\\\\n\\textit{dp}[i][2] &= \\min(\\textit{dp}[i - 1][0], \\textit{dp}[i - 1][1]) + \\textit{costs}[i][2]\n\\end{aligned}\n$$\n\n三种颜色的情况可以合并为一个状态转移方程，对于 $1 \\le i < n$ 和 $0 \\le j < 3$，状态转移方程如下：\n\n$$\n\\textit{dp}[i][j] = \\min(\\textit{dp}[i - 1][(j + 1) \\bmod 3], \\textit{dp}[i - 1][(j + 2) \\bmod 3]) + \\textit{costs}[i][j]\n$$\n\n计算结束时，$\\textit{dp}[n - 1]$ 中的最小值即为粉刷所有房子的最小花费成本。\n\n当 $i \\ge 1$ 时，由于 $\\textit{dp}[i]$ 的计算只和 $\\textit{dp}[i - 1]$ 有关，因此可以使用滚动数组优化空间，将空间复杂度降低到 $O(1)$。\n\n```Python [sol1-Python3]\nclass Solution:\n    def minCost(self, costs: List[List[int]]) -> int:\n        dp = costs[0]\n        for i in range(1, len(costs)):\n            dp = [min(dp[j - 1], dp[j - 2]) + c for j, c in enumerate(costs[i])]\n        return min(dp)\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minCost(int[][] costs) {\n        int n = costs.length;\n        int[] dp = new int[3];\n        for (int j = 0; j < 3; j++) {\n            dp[j] = costs[0][j];\n        }\n        for (int i = 1; i < n; i++) {\n            int[] dpNew = new int[3];\n            for (int j = 0; j < 3; j++) {\n                dpNew[j] = Math.min(dp[(j + 1) % 3], dp[(j + 2) % 3]) + costs[i][j];\n            }\n            dp = dpNew;\n        }\n        return Arrays.stream(dp).min().getAsInt();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MinCost(int[][] costs) {\n        int n = costs.Length;\n        int[] dp = new int[3];\n        for (int j = 0; j < 3; j++) {\n            dp[j] = costs[0][j];\n        }\n        for (int i = 1; i < n; i++) {\n            int[] dpNew = new int[3];\n            for (int j = 0; j < 3; j++) {\n                dpNew[j] = Math.Min(dp[(j + 1) % 3], dp[(j + 2) % 3]) + costs[i][j];\n            }\n            dp = dpNew;\n        }\n        return Math.Min(Math.Min(dp[0], dp[1]), dp[2]);\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minCost(vector<vector<int>>& costs) {\n        int n = costs.size();\n        vector<int> dp(3);\n        for (int j = 0; j < 3; j++) {\n            dp[j] = costs[0][j];\n        }\n        for (int i = 1; i < n; i++) {\n            vector<int> dpNew(3);\n            for (int j = 0; j < 3; j++) {\n                dpNew[j] = min(dp[(j + 1) % 3], dp[(j + 2) % 3]) + costs[i][j];\n            }\n            dp = dpNew;\n        }\n        return *min_element(dp.begin(), dp.end());\n    }   \n};\n```\n\n```C [sol1-C]\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nint minCost(int** costs, int costsSize, int* costsColSize) {\n    int dp[3];\n    for (int j = 0; j < 3; j++) {\n        dp[j] = costs[0][j];\n    }\n    for (int i = 1; i < costsSize; i++) {\n        int dpNew[3];\n        for (int j = 0; j < 3; j++) {\n            dpNew[j] = MIN(dp[(j + 1) % 3], dp[(j + 2) % 3]) + costs[i][j];\n        }\n        memcpy(dp, dpNew, sizeof(dpNew));\n    }\n    int res = INT_MAX;\n    for (int i = 0; i < 3; i++) {\n        res = MIN(res, dp[i]);\n    }\n    return res;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minCost = function(costs) {\n    const n = costs.length;\n    let dp = new Array(3).fill(0);\n    for (let j = 0; j < 3; j++) {\n        dp[j] = costs[0][j];\n    }\n    for (let i = 1; i < n; i++) {\n        const dpNew = new Array(3).fill(0);\n        for (let j = 0; j < 3; j++) {\n            dpNew[j] = Math.min(dp[(j + 1) % 3], dp[(j + 2) % 3]) + costs[i][j];\n        }\n        dp = dpNew;\n    }\n    return parseInt(_.min(dp));\n};\n```\n\n```go [sol1-Golang]\nfunc minCost(costs [][]int) int {\n    dp := costs[0]\n    for _, cost := range costs[1:] {\n        dpNew := make([]int, 3)\n        for j, c := range cost {\n            dpNew[j] = min(dp[(j+1)%3], dp[(j+2)%3]) + c\n        }\n        dp = dpNew\n    }\n    return min(min(dp[0], dp[1]), dp[2])\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是房子个数。需要遍历全部房子一次，由于颜色数量固定是三种，因此对于每个房子计算粉刷房子的最小花费成本的时间是 $O(1)$，总时间复杂度是 $O(n)$。\n\n- 空间复杂度：$O(1)$。使用空间优化的方法，只需要维护一个长度为 $3$ 的数组，空间复杂度是 $O(1)$。"
}