{
	"titleSlug": "minimum-moves-to-equal-array-elements",
	"slug": "zui-xiao-cao-zuo-ci-shu-shi-shu-zu-yuan-3meg3",
	"url": "https://leetcode-cn.com/problems/minimum-moves-to-equal-array-elements/solution/zui-xiao-cao-zuo-ci-shu-shi-shu-zu-yuan-3meg3/",
	"content": "#### 方法一：数学\n\n**思路和算法**\n\n因为只需要找出让数组所有元素相等的最小操作次数，所以我们不需要考虑数组中各个元素的绝对大小，即不需要真正算出数组中所有元素相等时的元素值，只需要考虑数组中元素相对大小的变化即可。\n\n因此，每次操作既可以理解为使 $n-1$ 个元素增加 $1$，也可以理解使 $1$ 个元素减少 $1$。显然，后者更利于我们的计算。\n\n于是，要计算让数组中所有元素相等的操作数，我们只需要计算将数组中所有元素都减少到数组中元素最小值所需的操作数，即计算\n$$\n\\sum_{i=0}^{n-1} \\textit{nums}[i] - min(\\textit{nums}) * n\n$$\n其中 $n$ 为数组 $\\textit{nums}$ 的长度，$\\textit{min}(\\textit{nums})$为数组 $\\textit{nums}$ 中元素的最小值。\n\n在实现中，为避免溢出，我们可以逐个累加每个元素与数组中元素最小值的差，即计算\n$$\n\\sum_{i=0}^{n-1} (\\textit{nums}[i] - \\textit{min}(\\textit{nums}))\n$$\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def minMoves(self, nums: List[int]) -> int:\n        min_num = min(nums)\n        res = 0\n        for num in nums:\n            res += num - min_num\n        return res\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minMoves(int[] nums) {\n        int minNum = Arrays.stream(nums).min().getAsInt();\n        int res = 0;\n        for (int num : nums) {\n            res += num - minNum;\n        }\n        return res;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MinMoves(int[] nums) {\n        int minNum = nums.Min();\n        int res = 0;\n        foreach (int num in nums) {\n            res += num - minNum;\n        }\n        return res;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minMoves(vector<int>& nums) {\n        int minNum = *min_element(nums.begin(),nums.end());\n        int res = 0;\n        for (int num : nums) {\n            res += num - minNum;\n        }\n        return res;\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc minMoves(nums []int) (ans int) {\n    min := nums[0]\n    for _, num := range nums[1:] {\n        if num < min {\n            min = num\n        }\n    }\n    for _, num := range nums {\n        ans += num - min\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minMoves = function(nums) {\n    const minNum = Math.min(...nums);\n    let res = 0;\n    for (const num of nums) {\n        res += num - minNum;\n    }\n    return res;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组中的元素数量。我们需要一次遍历求出最小值，一次遍历计算操作次数。\n\n- 空间复杂度：$O(1)$。"
}