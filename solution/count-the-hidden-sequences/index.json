{
	"titleSlug": "count-the-hidden-sequences",
	"slug": "tong-ji-yin-cang-shu-zu-shu-mu-by-leetco-t5su",
	"url": "https://leetcode-cn.com/problems/count-the-hidden-sequences/solution/tong-ji-yin-cang-shu-zu-shu-mu-by-leetco-t5su/",
	"content": "#### 方法一：确定隐藏数组上下界的差值\n\n**思路与算法**\n\n记最终的数组为 $a_0, a_1, \\cdots, a_n$。我们可以发现，如果数组 $a$ 满足要求，那么：\n\n$$\na_0 + k, a_1 + k, \\cdots, a_n + k\n$$\n\n也一定满足要求。这里的「要求」指的是相邻元素的差值对应着给定的数组 $\\textit{differences}$。\n\n因此我们就可以任意指定 $a_0$，为了方便不妨直接令 $a_0 = 0$，我们就可以还原出数组 $a_0, a_1, \\cdots, a_n$ 了。如果我们继续考虑数组元素都在 $[\\textit{lower}, \\textit{upper}]$ 范围内的要求，不妨记数组中最小的元素为 $a_i$，最大的元素为 $a_j$，显然需要满足：\n\n$$\n\\textit{lower} \\leq a_i \\leq a_j \\leq \\textit{upper}\n$$\n\n那么 $a_i$ 的取值下界即为 $\\textit{lower}$，上界为 $\\textit{upper} - (a_j - a_i)$，即需要保证最大值 $a_j$ 不能超过 $\\textit{upper}$。这里的 $a_j - a_i$ 实际上与 $a_i, a_j$ 本身的值无关，它就等于：\n\n$$\n\\sum_{k=i}^{j-1} \\textit{differences}[k]\n$$\n\n因此符合要求的隐藏数组的数目即为 $\\textit{upper} - (a_j - a_i) - \\textit{lower} + 1$，整理可得：\n\n$$\n(\\textit{upper} - \\textit{lower}) - (a_j - a_i) + 1\n$$\n\n实际上就是规定的数组元素的区间长度，减去数组元素最大值与最小值的差值，再加上 $1$。我们可以将其看成是一个长度为 $a_j - a_i$ 的小窗口在长度为 $\\textit{upper} - \\textit{lower}$ 的大窗口中滑动时，能够放置的位置数量。\n\n**细节**\n\n在还原数组 $a$ 的过程中，我们无需记录整个数组，而是只需要记录最大值和最小值即可。如果某一时刻最大值与最小值的差值大于 $\\textit{upper} - \\textit{lower}$，我们可以直接返回 $0$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numberOfArrays(vector<int>& differences, int lower, int upper) {\n        int x = 0, y = 0, cur = 0;\n        for (int d: differences) {\n            cur += d;\n            x = min(x, cur);\n            y = max(y, cur);\n            if (y - x > upper - lower) {\n                return 0;\n            }\n        }\n        return (upper - lower) - (y - x) + 1;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -> int:\n        x = y = cur = 0\n        for d in differences:\n            cur += d\n            x = min(x, cur)\n            y = max(y, cur)\n            if y - x > upper - lower:\n                return 0\n        return (upper - lower) - (y - x) + 1\n```\n\n```Golang [sol1-Golang]\nfunc numberOfArrays(differences []int, lower int, upper int) int {\n\tvar x, y, cur int\n\tfor _, d := range differences {\n\t\tcur += d\n\t\tx, y = min(x, cur), max(y, cur)\n\t\tif y-x > upper-lower {\n\t\t\treturn 0\n\t\t}\n\t}\n\treturn (upper - lower) - (y - x) + 1\n}\n\nfunc min(x, y int) int {\n\tif x > y {\n\t\treturn y\n\t}\n\treturn x\n}\n\nfunc max(x, y int) int {\n\tif x > y {\n\t\treturn x\n\t}\n\treturn y\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。\n\n- 空间复杂度：$O(1)$。"
}