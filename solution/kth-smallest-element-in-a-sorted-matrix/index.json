{
	"titleSlug": "kth-smallest-element-in-a-sorted-matrix",
	"slug": "you-xu-ju-zhen-zhong-di-kxiao-de-yuan-su-by-leetco",
	"url": "https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/solution/you-xu-ju-zhen-zhong-di-kxiao-de-yuan-su-by-leetco/",
	"content": "#### 方法一：直接排序\n\n**思路及算法**\n\n最直接的做法是将这个二维数组转成一维数组，并对该一维数组进行排序。最后这个一维数组中的第 $k$ 个数即为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int kthSmallest(vector<vector<int>>& matrix, int k) {\n        vector<int> rec;\n        for (auto& row : matrix) {\n            for (int it : row) {\n                rec.push_back(it);\n            }\n        }\n        sort(rec.begin(), rec.end());\n        return rec[k - 1];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int kthSmallest(int[][] matrix, int k) {\n        int rows = matrix.length, columns = matrix[0].length;\n        int[] sorted = new int[rows * columns];\n        int index = 0;\n        for (int[] row : matrix) {\n            for (int num : row) {\n                sorted[index++] = num;\n            }\n        }\n        Arrays.sort(sorted);\n        return sorted[k - 1];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        rec = sorted(sum(matrix, []))\n        return rec[k - 1]\n```\n\n```golang [sol1-Golang]\nfunc kthSmallest(matrix [][]int, k int) int {\n    rows, columns := len(matrix), len(matrix[0])\n    sorted := make([]int, rows * columns)\n    index := 0\n    for _, row := range matrix {\n        for _, num := range row {\n            sorted[index] = num\n            index++\n        }\n    }\n    sort.Ints(sorted)\n    return sorted[k-1]\n}\n```\n\n```C [sol1-C]\nint cmp(const void *a, const void *b) { return (*(int *)a - *(int *)b); }\n\nint kthSmallest(int **matrix, int matrixSize, int *matrixColSize, int k) {\n    int *rec = (int *)malloc(matrixSize * matrixSize * sizeof(int));\n\n    int num = 0;\n    for (int i = 0; i < matrixSize; i++) {\n        for (int j = 0; j < matrixColSize[i]; j++) {\n            rec[num++] = matrix[i][j];\n        }\n    }\n    qsort(rec, num, sizeof(int), cmp);\n\n    return rec[k - 1];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2\\log{n})$，对 $n^2$ 个数排序。\n\n- 空间复杂度：$O(n^2)$，一维数组需要存储这 $n^2$ 个数。\n\n#### 方法二：归并排序\n\n**思路及算法**\n\n由题目给出的性质可知，这个矩阵的每一行均为一个有序数组。问题即转化为从这 $n$ 个有序数组中找第 $k$ 大的数，可以想到利用归并排序的做法，归并到第 $k$ 个数即可停止。\n\n一般归并排序是两个数组归并，而本题是 $n$ 个数组归并，所以需要用小根堆维护，以优化时间复杂度。\n\n具体如何归并，可以参考力扣 [23. 合并K个排序链表](https://leetcode-cn.com/problems/merge-k-sorted-lists/)。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int kthSmallest(vector<vector<int>>& matrix, int k) {\n        struct point {\n            int val, x, y;\n            point(int val, int x, int y) : val(val), x(x), y(y) {}\n            bool operator> (const point& a) const { return this->val > a.val; }\n        };\n        priority_queue<point, vector<point>, greater<point>> que;\n        int n = matrix.size();\n        for (int i = 0; i < n; i++) {\n            que.emplace(matrix[i][0], i, 0);\n        }\n        for (int i = 0; i < k - 1; i++) {\n            point now = que.top();\n            que.pop();\n            if (now.y != n - 1) {\n                que.emplace(matrix[now.x][now.y + 1], now.x, now.y + 1);\n            }\n        }\n        return que.top().val;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int kthSmallest(int[][] matrix, int k) {\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return a[0] - b[0];\n            }\n        });\n        int n = matrix.length;\n        for (int i = 0; i < n; i++) {\n            pq.offer(new int[]{matrix[i][0], i, 0});\n        }\n        for (int i = 0; i < k - 1; i++) {\n            int[] now = pq.poll();\n            if (now[2] != n - 1) {\n                pq.offer(new int[]{matrix[now[1]][now[2] + 1], now[1], now[2] + 1});\n            }\n        }\n        return pq.poll()[0];\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        n = len(matrix)\n        pq = [(matrix[i][0], i, 0) for i in range(n)]\n        heapq.heapify(pq)\n\n        ret = 0\n        for i in range(k - 1):\n            num, x, y = heapq.heappop(pq)\n            if y != n - 1:\n                heapq.heappush(pq, (matrix[x][y + 1], x, y + 1))\n        \n        return heapq.heappop(pq)[0]\n```\n\n```golang [sol2-Golang]\nfunc kthSmallest(matrix [][]int, k int) int {\n    h := &IHeap{}\n    for i := 0; i < len(matrix); i++ {\n        heap.Push(h, [3]int{matrix[i][0], i, 0})\n    }\n\n    for i := 0; i < k - 1; i++ {\n        now := heap.Pop(h).([3]int)\n        if now[2] != len(matrix) - 1 {\n            heap.Push(h, [3]int{matrix[now[1]][now[2]+1], now[1], now[2]+1})\n        }\n    }\n    return heap.Pop(h).([3]int)[0]\n}\n\ntype IHeap [][3]int\n\nfunc (h IHeap) Len() int           { return len(h) }\nfunc (h IHeap) Less(i, j int) bool { return h[i][0] < h[j][0] }\nfunc (h IHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\n\nfunc (h *IHeap) Push(x interface{}) {\n\t*h = append(*h, x.([3]int))\n}\n\nfunc (h *IHeap) Pop() interface{} {\n\told := *h\n\tn := len(old)\n\tx := old[n-1]\n\t*h = old[0 : n-1]\n\treturn x\n}\n```\n\n```C [sol2-C]\ntypedef struct point {\n    int val, x, y;\n} point;\n\nbool cmp(point a, point b) { return a.val >= b.val; }\n\nvoid swap(point* a, point* b) {\n    point t = *a;\n    *a = *b, *b = t;\n}\n\nvoid push(point heap[], int* size, point* p) {\n    heap[++(*size)] = *p;\n    int s = (*size);\n    while (s > 1) {\n        if (cmp(heap[s], heap[s >> 1])) {\n            break;\n        }\n        swap(&heap[s], &heap[s >> 1]);\n        s >>= 1;\n    }\n}\n\nvoid pop(point heap[], int* size) {\n    heap[1] = heap[(*size)--];\n    int p = 1, s = 2;\n    while (s <= (*size)) {\n        if (s < (*size) && !cmp(heap[s + 1], heap[s])) {\n            s++;\n        }\n        if (cmp(heap[s], heap[p])) {\n            break;\n        }\n        swap(&heap[s], &heap[p]);\n        p = s, s = p << 1;\n    }\n}\n\nint kthSmallest(int** matrix, int matrixSize, int* matrixColSize, int k) {\n    point heap[matrixSize + 1];\n    int size = 0;\n    for (int i = 0; i < matrixSize; i++) {\n        point p = {matrix[i][0], i, 0};\n        push(heap, &size, &p);\n    }\n    for (int i = 0; i < k - 1; i++) {\n        point now = heap[1];\n        pop(heap, &size);\n        if (now.y != matrixSize - 1) {\n            point p = {matrix[now.x][now.y + 1], now.x, now.y + 1};\n            push(heap, &size, &p);\n        }\n    }\n    return heap[1].val;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(k\\log{n})$，归并 $k$ 次，每次堆中插入和弹出的操作时间复杂度均为 $\\log{n}$。\n\n- 空间复杂度：$O(n)$，堆的大小始终为 $n$。\n\n> 需要注意的是，$k$ 在最坏情况下是 $n^2$，因此该解法最坏时间复杂度为 $O(n^2\\log{n})$。\n\n#### 方法三：二分查找\n\n**思路及算法**\n\n由题目给出的性质可知，这个矩阵内的元素是从左上到右下递增的（假设矩阵左上角为 $matrix[0][0]$）。以下图为例：\n\n![fig1](https://assets.leetcode-cn.com/solution-static/378/378_fig1.png){:width=\"80%\"}\n\n我们知道整个二维数组中 $matrix[0][0]$ 为最小值，$matrix[n - 1][n - 1]$ 为最大值，现在我们将其分别记作 $l$ 和 $r$。\n\n可以发现一个性质：任取一个数 $mid$ 满足 $l\\leq mid \\leq r$，那么矩阵中不大于 $mid$ 的数，肯定全部分布在矩阵的左上角。\n\n例如下图，取 $mid=8$：\n\n![fig2](https://assets.leetcode-cn.com/solution-static/378/378_fig2.png){:width=\"80%\"}\n\n我们可以看到，矩阵中大于 $mid$ 的数就和不大于 $mid$ 的数分别形成了两个板块，沿着一条锯齿线将这个矩形分开。其中左上角板块的大小即为矩阵中不大于 $mid$ 的数的数量。\n\n读者也可以自己取一些 $mid$ 值，通过画图以加深理解。\n\n我们只要沿着这条锯齿线走一遍即可计算出这两个板块的大小，也自然就统计出了这个矩阵中不大于 $mid$ 的数的个数了。\n\n走法演示如下，依然取 $mid=8$：\n\n![fig3](https://assets.leetcode-cn.com/solution-static/378/378_fig3.png){:width=\"80%\"}\n\n可以这样描述走法：\n\n-   初始位置在 $matrix[n - 1][0]$（即左下角）；\n\n-   设当前位置为 $matrix[i][j]$。若 $matrix[i][j] \\leq mid$，则将当前所在列的不大于 $mid$ 的数的数量（即 $i + 1$）累加到答案中，并向右移动，否则向上移动；\n\n-   不断移动直到走出格子为止。\n\n我们发现这样的走法时间复杂度为 $O(n)$，即我们可以线性计算对于任意一个 $mid$，矩阵中有多少数不大于它。这满足了二分查找的性质。\n\n不妨假设答案为 $x$，那么可以知道 $l\\leq x\\leq r$，这样就确定了二分查找的上下界。\n\n每次对于「猜测」的答案 $mid$，计算矩阵中有多少数不大于 $mid$ ：\n\n- 如果数量不少于 $k$，那么说明最终答案 $x$ 不大于 $mid$；\n- 如果数量少于 $k$，那么说明最终答案 $x$ 大于 $mid$。\n\n这样我们就可以计算出最终的结果 $x$ 了。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    bool check(vector<vector<int>>& matrix, int mid, int k, int n) {\n        int i = n - 1;\n        int j = 0;\n        int num = 0;\n        while (i >= 0 && j < n) {\n            if (matrix[i][j] <= mid) {\n                num += i + 1;\n                j++;\n            } else {\n                i--;\n            }\n        }\n        return num >= k;\n    }\n\n    int kthSmallest(vector<vector<int>>& matrix, int k) {\n        int n = matrix.size();\n        int left = matrix[0][0];\n        int right = matrix[n - 1][n - 1];\n        while (left < right) {\n            int mid = left + ((right - left) >> 1);\n            if (check(matrix, mid, k, n)) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int kthSmallest(int[][] matrix, int k) {\n        int n = matrix.length;\n        int left = matrix[0][0];\n        int right = matrix[n - 1][n - 1];\n        while (left < right) {\n            int mid = left + ((right - left) >> 1);\n            if (check(matrix, mid, k, n)) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n\n    public boolean check(int[][] matrix, int mid, int k, int n) {\n        int i = n - 1;\n        int j = 0;\n        int num = 0;\n        while (i >= 0 && j < n) {\n            if (matrix[i][j] <= mid) {\n                num += i + 1;\n                j++;\n            } else {\n                i--;\n            }\n        }\n        return num >= k;\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        n = len(matrix)\n\n        def check(mid):\n            i, j = n - 1, 0\n            num = 0\n            while i >= 0 and j < n:\n                if matrix[i][j] <= mid:\n                    num += i + 1\n                    j += 1\n                else:\n                    i -= 1\n            return num >= k\n\n        left, right = matrix[0][0], matrix[-1][-1]\n        while left < right:\n            mid = (left + right) // 2\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        \n        return left\n```\n\n```golang [sol3-Golang]\nfunc kthSmallest(matrix [][]int, k int) int {\n    n := len(matrix)\n    left, right := matrix[0][0], matrix[n-1][n-1]\n    for left < right {\n        mid := left + (right - left) / 2\n        if check(matrix, mid, k, n) {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\nfunc check(matrix [][]int, mid, k, n int) bool {\n    i, j := n - 1, 0\n    num := 0\n    for i >= 0 && j < n {\n        if matrix[i][j] <= mid {\n            num += i + 1\n            j++\n        } else {\n            i--\n        }\n    }\n    return num >= k\n}\n```\n\n```C [sol3-C]\nbool check(int **matrix, int mid, int k, int n) {\n    int i = n - 1;\n    int j = 0;\n    int num = 0;\n    while (i >= 0 && j < n) {\n        if (matrix[i][j] <= mid) {\n            num += i + 1;\n            j++;\n        } else {\n            i--;\n        }\n    }\n    return num >= k;\n}\n\nint kthSmallest(int **matrix, int matrixSize, int *matrixColSize, int k) {\n    int left = matrix[0][0];\n    int right = matrix[matrixSize - 1][matrixSize - 1];\n    while (left < right) {\n        int mid = left + ((right - left) >> 1);\n        if (check(matrix, mid, k, matrixSize)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log(r-l))$，二分查找进行次数为 $O(\\log(r-l))$，每次操作时间复杂度为 $O(n)$。\n\n- 空间复杂度：$O(1)$。\n\n#### 写在最后\n\n上述三种解法，第一种没有利用矩阵的性质，所以时间复杂度最差；第二种解法只利用了一部分性质（每一行是一个有序数列，而忽视了列之间的关系）；第三种解法则利用了全部性质，所以时间复杂度最佳。\n\n这也启示我们要认真把握题目中的条件与性质，更有利于我们解题。"
}