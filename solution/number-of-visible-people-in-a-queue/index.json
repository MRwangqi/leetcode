{
	"titleSlug": "number-of-visible-people-in-a-queue",
	"slug": "dui-lie-zhong-ke-yi-kan-dao-de-ren-shu-b-k442",
	"url": "https://leetcode-cn.com/problems/number-of-visible-people-in-a-queue/solution/dui-lie-zhong-ke-yi-kan-dao-de-ren-shu-b-k442/",
	"content": "#### 方法一：逆序遍历 + 单调栈\n\n**提示 $1$**\n\n$i$ 能够看到 $j$ 的条件即为 $i$ 和 $j$ 都高于 $i+1, i+2, \\cdots, j-1$。\n\n**提示 $2$**\n\n假设 $j_1$ 在 $j_2$ 的左侧，并且前者不比后者矮，即 $j_1 < j_2$ 且 $\\textit{heights}[j_1] > \\textit{heights}[j_2]$，那么对于所有的在 $j_1$ 左侧的 $i$（即 $i < j_1$），他们一定都无法看到 $j_2$。\n\n**提示 $2$ 解释**\n\n因为 $j_2$ 不高于 $j_1$，所以 $i$ 无法看到 $j_2$。\n\n**提示 $3$**\n\n对于任意的 $i$，他能够看到的所有人，按照位置顺序的高度是单调递增的。即如果 $i$ 能够看到 $j_1, j_2, \\cdots, j_x$ 并且 $j_1 < j_2 < \\cdots < j_x$，那么一定有：\n\n$$\n\\textit{heights}[j_1] < \\textit{heights}[j_2] < \\cdots < \\textit{heights}[j_x]\n$$\n\n**提示 $3$ 解释**\n\n使用反证法。如果存在 $k$ 使得 $\\textit{heights}[j_k] > \\textit{heights}[j_{k+1}]$，那么根据提示 $2$，$i$ 无法看到 $j_{k+1}$，此时就产生了矛盾。\n\n**思路与算法**\n\n根据提示 $2$ 和 $3$，我们可以使用一个单调递减的栈，从栈底到栈顶逆序地存储当前**可能**可以被看见的人的下标。同时，这些下标的 $\\textit{heights}$ 值也是单调递减的。\n\n我们逆序遍历这 $n$ 个人的下标，如果当前遍历到了第 $i$ 个人，那么我们需要在栈中选出第 $i$ 个人可以看到的那些人。设栈顶的下标为 $j$，则：\n\n- 如果栈为空，说明第 $i$ 个人是遍历到的所有人中最高的那个人，我们退出比较环节；\n    \n- 如果 $\\textit{height}[i] > \\textit{height}[j]$，说明 $i$ 能够看到 $j$，并且根据提示 $2$，$i$ 左侧的所有人都无法看到 $j$，因此我们将 $j$ 出栈，并继续将 $i$ 与新的栈顶元素进行比较；\n\n- 如果 $\\textit{height}[i] < \\textit{height}[j]$，说明 $i$ 能够看到 $j$，但是根据提示 $2$，$i$ 无法看到 $j$ 右侧的所有人，因此我们退出比较环节。\n\n在比较结束后，栈要么为空，要么其栈顶下标 $j$ 满足 $\\textit{height}[i] < \\textit{height}[j]$。我们将 $i$ 入栈，就可以保持其单调性。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> canSeePersonsCount(vector<int>& heights) {\n        int n = heights.size();\n        vector<int> ans(n);\n        stack<int> s;\n        for (int i = n - 1; i >= 0; --i) {\n            while (!s.empty()) {\n                ++ans[i];\n                if (heights[i] > heights[s.top()]) {\n                    s.pop();\n                }\n                else {\n                    break;\n                }\n            }\n            s.push(i);\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def canSeePersonsCount(self, heights: List[int]) -> List[int]:\n        n = len(heights)\n        ans = [0] * n\n        s = list()\n\n        for i in range(n - 1, -1, -1):\n            while s:\n                ans[i] += 1\n                if heights[i] > heights[s[-1]]:\n                    s.pop()\n                else:\n                    break\n            s.append(i)\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。每个下标会恰好入栈一次，并且最多出栈一次。\n\n- 空间复杂度：$O(n)$，即为单调栈需要使用的空间。"
}