{
	"titleSlug": "find-triangular-sum-of-an-array",
	"slug": "shu-zu-de-san-jiao-he-by-leetcode-soluti-qpc8",
	"url": "https://leetcode-cn.com/problems/find-triangular-sum-of-an-array/solution/shu-zu-de-san-jiao-he-by-leetcode-soluti-qpc8/",
	"content": "#### 方法一：模拟\n\n**思路与算法**\n\n我们只需要按照题目中的操作进行模拟即可。\n\n记数组 $\\textit{nums}$ 的长度为 $n$。我们进行 $n-1$ 次循环，第 $i~(0 \\leq i < n)$ 次循环得到 $(\\textit{nums}[i] + \\textit{nums}[i+1]) \\bmod 10$ 的值，并将其放去一个新的数组 $\\textit{new\\_nums}$ 中。当循环结束后，我们再用 $\\textit{new\\_nums}$ 覆盖 $\\textit{nums}$。\n\n当 $n=1$ 时，操作结束，我们返回 $\\textit{nums}[0]$ 即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int triangularSum(vector<int>& nums) {\n        while (nums.size() > 1) {\n            vector<int> new_nums;\n            for (int i = 0; i < nums.size() - 1; ++i) {\n                new_nums.push_back((nums[i] + nums[i + 1]) % 10);\n            }\n            nums = move(new_nums);\n        }\n        return nums[0];\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def triangularSum(self, nums: List[int]) -> int:\n        while len(nums) > 1:\n            new_nums = list()\n            for i in range(len(nums) - 1):\n                new_nums.append((nums[i] + nums[i + 1]) % 10)\n            nums = new_nums\n        return nums[0]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$。\n\n- 空间复杂度：$O(n)$，即数组 $\\textit{new\\_nums}$ 需要使用的空间。"
}