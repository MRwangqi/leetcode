{
	"titleSlug": "minimum-numbers-of-function-calls-to-make-target-array",
	"slug": "de-dao-mu-biao-shu-zu-de-zui-shao-han-shu-diao-y-2",
	"url": "https://leetcode-cn.com/problems/minimum-numbers-of-function-calls-to-make-target-array/solution/de-dao-mu-biao-shu-zu-de-zui-shao-han-shu-diao-y-2/",
	"content": "#### 方法一：贪心\n\n本题给定了两种操作：\n\n1. 让序列中某个数加 $1$；\n\n2. 让序列中所有数全体乘以 $2$。\n\n询问你需要操作多少次，才能得到目标数组。\n\n我们可以采用逆向思维，从目标数组转化为初始数组，支持两种操作：\n\n1. 让序列中某个数减 $1$；\n\n2. 让序列中所有数全体除以 $2$（要求序列中所有数均为偶数）。\n\n询问你最少需要多少步才能让给定的数组中的全部元素变为 $0$。\n\n我们贪心地考虑每一个数，显然我们应当尽可能多的执行第二种操作。因此我们只需要每次将序列中所有的奇数减 $1$，使其变为偶数，然后让整个偶数序列全体除以 $2$，直到所有数变为 $0$ 为止。\n\n对于任意一个数，我们从二进制的角度考虑：\n\n1. 如果它是奇数，那么它将被执行第一种操作。它的二进制表示中的末尾的 $1$ 将会变成 $0$；\n\n2. 如果它是偶数，那么它将被执行第二种操作。它的二进制表示将会整体右移一位。\n\n我们注意到对于任意一个数，它被执行第一种操作的次数等于它的二进制表示中的 $1$ 的数量。我们只需要统计序列中所有数的二进制表示中 $1$ 的数量之和，即可统计出第一种操作的数量。而第二种操作是全体数共同执行的，它的执行次数取决于序列中所有数的二进制表示的最高位数。我们只需要记录序列中最大值的二进制表示的位数，即可算出第二种操作的数量。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n        int ret = 0, maxn = 0;\n        for (auto num : nums) {\n            maxn = max(maxn, num);\n            while (num) {\n                if (num & 1) {\n                    ret++;\n                }\n                num >>= 1;\n            }\n        }\n        if (maxn) {\n            while (maxn) {\n                ret++;\n                maxn >>= 1;\n            }\n            ret--;\n        }\n        return ret;\n    }\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n        int ret = 0, maxn = 0;\n        for (auto num : nums) {\n            maxn = max(maxn, num);\n            ret += __builtin_popcount(num);\n        }\n        if (maxn > 0) {\n            ret += 31 - __builtin_clz(maxn);\n        }\n        return ret;\n    }\n};\n```\n\n```C [sol1-C]\nint minOperations(int* nums, int numsSize) {\n    int ret = 0, maxn = 0;\n    for (int i = 0; i < numsSize; i++) {\n        maxn = fmax(maxn, nums[i]);\n        while (nums[i]) {\n            if (nums[i] & 1) {\n                ret++;\n            }\n            nums[i] >>= 1;\n        }\n    }\n    if (maxn) {\n        while (maxn) {\n            ret++;\n            maxn >>= 1;\n        }\n        ret--;\n    }\n    return ret;\n}\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minOperations(int[] nums) {\n        int ret = 0, maxn = 0;\n        for (int num : nums) {\n            maxn = Math.max(maxn, num);\n            while (num != 0) {\n                if ((num & 1) != 0) {\n                    ret++;\n                }\n                num >>= 1;\n            }\n        }\n        if (maxn != 0) {\n            while (maxn != 0) {\n                ret++;\n                maxn >>= 1;\n            }\n            ret--;\n        }\n        return ret;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minOperations(self, nums: List[int]) -> int:\n        maxn = max(nums)\n        ret = 0\n        for num in nums:\n            while num > 0:\n                if num & 1:\n                    ret += 1\n                num >>= 1\n        if maxn > 0:\n            while maxn > 0:\n                ret += 1\n                maxn >>= 1\n            ret -= 1\n        \n        return ret\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times m)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度，$m$ 是数组中元素的二进制表示的最大位数，本题中这些元素均为 $32$ 位有符号整型数，因此 $m<32$。\n\n- 空间复杂度：$O(1)$。"
}