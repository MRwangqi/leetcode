{
	"titleSlug": "xu-lie-hua-er-cha-shu-lcof",
	"slug": "xu-lie-hua-er-cha-shu-by-leetcode-soluti-4duq",
	"url": "https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/solution/xu-lie-hua-er-cha-shu-by-leetcode-soluti-4duq/",
	"content": "#### 方法一：深度优先搜索\n\n**思路和算法**\n\n二叉树的序列化本质上是对其值进行编码，更重要的是对其结构进行编码。可以遍历树来完成上述任务。众所周知，我们一般有两个策略：广度优先搜索和深度优先搜索。\n\n+ 广度优先搜索可以按照层次的顺序从上到下遍历所有的节点\n+ 深度优先搜索可以从一个根开始，一直延伸到某个叶，然后回到根，到达另一个分支。根据根节点、左节点和右节点之间的相对顺序，可以进一步将深度优先搜索策略区分为：\n  + 先序遍历\n  + 中序遍历\n  + 后序遍历\n\n这里，我们选择先序遍历的编码方式，我们可以通过这样一个例子简单理解：\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_37/1.PNG),![fig2](https://assets.leetcode-cn.com/solution-static/jianzhi_37/2.PNG),![fig3](https://assets.leetcode-cn.com/solution-static/jianzhi_37/3.PNG),![fig4](https://assets.leetcode-cn.com/solution-static/jianzhi_37/4.PNG),![fig5](https://assets.leetcode-cn.com/solution-static/jianzhi_37/5.PNG),![fig6](https://assets.leetcode-cn.com/solution-static/jianzhi_37/6.PNG),![fig7](https://assets.leetcode-cn.com/solution-static/jianzhi_37/7.PNG),![fig8](https://assets.leetcode-cn.com/solution-static/jianzhi_37/8.PNG),![fig9](https://assets.leetcode-cn.com/solution-static/jianzhi_37/9.PNG),![fig10](https://assets.leetcode-cn.com/solution-static/jianzhi_37/10.PNG),![fig11](https://assets.leetcode-cn.com/solution-static/jianzhi_37/11.PNG),![fig12](https://assets.leetcode-cn.com/solution-static/jianzhi_37/12.PNG)>\n\n我们从根节点 `1` 开始，序列化字符串是 `1,`。然后我们跳到根节点 `2` 的左子树，序列化字符串变成 `1,2,`。现在从节点 `2` 开始，我们访问它的左节点 `3`（`1,2,3,None,None,`）和右节点 `4` \n\n(`1,2,3,None,None,4,None,None`)。`None,None,` 是用来标记缺少左、右子节点，这就是我们在序列化期间保存树结构的方式。最后，我们回到根节点 `1` 并访问它的右子树，它恰好是叶节点 `5`。最后，序列化字符串是 `1,2,3,None,None,4,None,None,5,None,None,`。\n\n即我们可以先序遍历这颗二叉树，遇到空子树的时候序列化成 `None`，否则继续递归序列化。那么我们如何反序列化呢？首先我们需要根据 `,` 把原先的序列分割开来得到先序遍历的元素列表，然后从左向右遍历这个序列：\n\n+ 如果当前的元素为 `None`，则当前为空树\n+ 否则先解析这棵树的左子树，再解析它的右子树\n\n具体请参考下面的代码。\n\n**代码**\n\n```Java [sol1-Java]\npublic class Codec {\n    public String serialize(TreeNode root) {\n        return rserialize(root, \"\");\n    }\n  \n    public TreeNode deserialize(String data) {\n        String[] dataArray = data.split(\",\");\n        List<String> dataList = new LinkedList<String>(Arrays.asList(dataArray));\n        return rdeserialize(dataList);\n    }\n\n    public String rserialize(TreeNode root, String str) {\n        if (root == null) {\n            str += \"None,\";\n        } else {\n            str += str.valueOf(root.val) + \",\";\n            str = rserialize(root.left, str);\n            str = rserialize(root.right, str);\n        }\n        return str;\n    }\n  \n    public TreeNode rdeserialize(List<String> dataList) {\n        if (dataList.get(0).equals(\"None\")) {\n            dataList.remove(0);\n            return null;\n        }\n  \n        TreeNode root = new TreeNode(Integer.valueOf(dataList.get(0)));\n        dataList.remove(0);\n        root.left = rdeserialize(dataList);\n        root.right = rdeserialize(dataList);\n    \n        return root;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Codec {\n    public string serialize(TreeNode root) {\n        return rserialize(root, \"\");\n    }\n\n    public TreeNode deserialize(string data) {\n        string[] dataArray = data.Split(\",\");\n        LinkedList<string> dataList = new LinkedList<string>(dataArray.ToList());\n        return rdeserialize(dataList);\n    }\n\n    public string rserialize(TreeNode root, string str) {\n        if (root == null) {\n            str += \"None,\";\n        } else {\n            str += root.val.ToString() + \",\";\n            str = rserialize(root.left, str);\n            str = rserialize(root.right, str);\n        }\n        return str;\n    }\n  \n    public TreeNode rdeserialize(LinkedList<string> dataList) {\n        if (dataList.First.Value.Equals(\"None\")) {\n            dataList.RemoveFirst();\n            return null;\n        }\n  \n        TreeNode root = new TreeNode(int.Parse(dataList.First.Value));\n        dataList.RemoveFirst();\n        root.left = rdeserialize(dataList);\n        root.right = rdeserialize(dataList);\n    \n        return root;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Codec {\npublic:\n    void rserialize(TreeNode* root, string& str) {\n        if (root == nullptr) {\n            str += \"None,\";\n        } else {\n            str += to_string(root->val) + \",\";\n            rserialize(root->left, str);\n            rserialize(root->right, str);\n        }\n    }\n\n    string serialize(TreeNode* root) {\n        string ret;\n        rserialize(root, ret);\n        return ret;\n    }\n\n    TreeNode* rdeserialize(list<string>& dataArray) {\n        if (dataArray.front() == \"None\") {\n            dataArray.erase(dataArray.begin());\n            return nullptr;\n        }\n\n        TreeNode* root = new TreeNode(stoi(dataArray.front()));\n        dataArray.erase(dataArray.begin());\n        root->left = rdeserialize(dataArray);\n        root->right = rdeserialize(dataArray);\n        return root;\n    }\n\n    TreeNode* deserialize(string data) {\n        list<string> dataArray;\n        string str;\n        for (auto& ch : data) {\n            if (ch == ',') {\n                dataArray.push_back(str);\n                str.clear();\n            } else {\n                str.push_back(ch);\n            }\n        }\n        if (!str.empty()) {\n            dataArray.push_back(str);\n            str.clear();\n        }\n        return rdeserialize(dataArray);\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar serialize = function(root) {\n    return rserialize(root, '');\n};\n\nvar deserialize = function(data) {\n    const dataArray = data.split(\",\");\n    return rdeserialize(dataArray);\n};\n\nconst rserialize = (root, str) => {\n    if (root === null) {\n        str += \"None,\";\n    } else {\n        str += root.val + '' + \",\";\n        str = rserialize(root.left, str);\n        str = rserialize(root.right, str);\n    }\n    return str;\n}\n\nconst rdeserialize = (dataList) => {\n    if (dataList[0] === \"None\") {\n        dataList.shift();\n        return null;\n    }\n\n    const root = new TreeNode(parseInt(dataList[0]));\n    dataList.shift();\n    root.left = rdeserialize(dataList);\n    root.right = rdeserialize(dataList);\n\n    return root;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：在序列化和反序列化函数中，我们只访问每个节点一次，因此时间复杂度为 $O(n)$，其中 $n$ 是节点数，即树的大小。\n- 空间复杂度：在序列化和反序列化函数中，我们递归会使用栈空间，故渐进空间复杂度为 $O(n)$。\n\n#### 方法二：括号表示编码 + 递归下降解码\n\n**思路和算法**\n\n我们也可以这样表示一颗二叉树：\n\n+ 如果当前的树为空，则表示为 `X`\n+ 如果当前的树不为空，则表示为 `(<LEFT_SUB_TREE>)CUR_NUM(RIGHT_SUB_TREE)`，其中：\n  + `<LEFT_SUB_TREE>` 是左子树序列化之后的结果\n  + `<RIGHT_SUB_TREE>` 是右子树序列化之后的结果\n  + `CUR_NUM` 是当前节点的值\n\n根据这样的定义，我们很好写出序列化的过程，后序遍历这颗二叉树即可，那如何反序列化呢？根据定义，我们可以推导出这样的巴科斯范式（BNF）：\n\n```\nT -> (T) num (T) | X\n```\n\n它的意义是：用 `T` 代表一棵树序列化之后的结果，`|` 表示 `T` 的构成为 `(T) num (T)` 或者 `X`，`|` 左边是对 `T` 的递归定义，右边规定了递归终止的边界条件。\n\n因为：\n\n+ `T` 的定义中，序列中的第一个字符要么是 `X`，要么是 `(`，所以这个定义是不含左递归的\n+ 当我们开始解析一个字符串的时候，如果开头是 `X`，我们就知道这一定是解析一个「空树」的结构，如果开头是 `(`，我们就知道需要解析 `(T) num (T)` 的结构，因此这里两种开头和两种解析方法一一对应，可以确定这是一个无二义性的文法\n+ 我们只需要通过开头的第一个字母是 `X` 还是 `(` 来判断使用哪一种解析方法\n\n所以这个文法是 LL(1) 型文法，**如果你不知道什么是 LL(1) 型文法也没有关系，你只需要知道它定义了一种递归的方法来反序列化，也保证了这个方法的正确性——我们可以设计一个递归函数：**\n\n+ 这个递归函数传入两个参数，带解析的字符串和当前当解析的位置 `ptr`，`ptr` 之前的位置是已经解析的，`ptr` 和 `ptr` 后面的字符串是待解析的\n+ 如果当前位置为 `X` 说明解析到了一棵空树，直接返回\n+ 否则当前位置一定是 `(`，对括号内部按照 `(T) num (T)` 的模式解析\n\n具体请参考下面的代码。\n\n**代码**\n\n```Java [sol2-Java]\npublic class Codec {\n    public String serialize(TreeNode root) {\n        if (root == null) {\n            return \"X\";\n        }\n        String left = \"(\" + serialize(root.left) + \")\";\n        String right = \"(\" + serialize(root.right) + \")\";\n        return left + root.val + right;\n    }\n\n    public TreeNode deserialize(String data) {\n        int[] ptr = {0};\n        return parse(data, ptr);\n    }\n\n    public TreeNode parse(String data, int[] ptr) {\n        if (data.charAt(ptr[0]) == 'X') {\n            ++ptr[0];\n            return null;\n        }\n        TreeNode cur = new TreeNode(0);\n        cur.left = parseSubtree(data, ptr);\n        cur.val = parseInt(data, ptr);\n        cur.right = parseSubtree(data, ptr);\n        return cur;\n    }\n\n    public TreeNode parseSubtree(String data, int[] ptr) {\n        ++ptr[0]; // 跳过左括号\n        TreeNode subtree = parse(data, ptr);\n        ++ptr[0]; // 跳过右括号\n        return subtree;\n    }\n\n    public int parseInt(String data, int[] ptr) {\n        int x = 0, sgn = 1;\n        if (!Character.isDigit(data.charAt(ptr[0]))) {\n            sgn = -1;\n            ++ptr[0];\n        }\n        while (Character.isDigit(data.charAt(ptr[0]))) {\n            x = x * 10 + data.charAt(ptr[0]++) - '0';\n        }\n        return x * sgn;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Codec {\n    public string serialize(TreeNode root) {\n        if (root == null) {\n            return \"X\";\n        }\n        string left = \"(\" + serialize(root.left) + \")\";\n        string right = \"(\" + serialize(root.right) + \")\";\n        return left + root.val + right;\n    }\n\n    public TreeNode deserialize(string data) {\n        int[] ptr = {0};\n        return parse(data, ptr);\n    }\n\n    public TreeNode parse(string data, int[] ptr) {\n        if (data[ptr[0]] == 'X') {\n            ++ptr[0];\n            return null;\n        }\n        TreeNode cur = new TreeNode(0);\n        cur.left = parseSubtree(data, ptr);\n        cur.val = parseInt(data, ptr);\n        cur.right = parseSubtree(data, ptr);\n        return cur;\n    }\n\n    public TreeNode parseSubtree(string data, int[] ptr) {\n        ++ptr[0]; // 跳过左括号\n        TreeNode subtree = parse(data, ptr);\n        ++ptr[0]; // 跳过右括号\n        return subtree;\n    }\n\n    public int parseInt(string data, int[] ptr) {\n        int x = 0, sgn = 1;\n        if (!char.IsDigit(data[ptr[0]])) {\n            sgn = -1;\n            ++ptr[0];\n        }\n        while (char.IsDigit(data[ptr[0]])) {\n            x = x * 10 + data[ptr[0]++] - '0';\n        }\n        return x * sgn;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Codec {\npublic:\n    string serialize(TreeNode* root) {\n        if (!root) {\n            return \"X\";\n        }\n        auto left = \"(\" + serialize(root->left) + \")\";\n        auto right = \"(\" + serialize(root->right) + \")\";\n        return left + to_string(root->val) + right;\n    }\n\n    inline TreeNode* parseSubtree(const string &data, int &ptr) {\n        ++ptr; // 跳过左括号\n        auto subtree = parse(data, ptr);\n        ++ptr; // 跳过右括号\n        return subtree;\n    }\n\n    inline int parseInt(const string &data, int &ptr) {\n        int x = 0, sgn = 1;\n        if (!isdigit(data[ptr])) {\n            sgn = -1;\n            ++ptr;\n        }\n        while (isdigit(data[ptr])) {\n            x = x * 10 + data[ptr++] - '0';\n        }\n        return x * sgn;\n    }\n\n    TreeNode* parse(const string &data, int &ptr) {\n        if (data[ptr] == 'X') {\n            ++ptr;\n            return nullptr;\n        }\n        auto cur = new TreeNode(0);\n        cur->left = parseSubtree(data, ptr);\n        cur->val = parseInt(data, ptr);\n        cur->right = parseSubtree(data, ptr);\n        return cur;\n    }\n\n    TreeNode* deserialize(string data) {\n        int ptr = 0;\n        return parse(data, ptr);\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar serialize = function(root) {\n    if (root == null) {\n        return \"X\";\n    }\n    const left = \"(\" + serialize(root.left) + \")\";\n    const right = \"(\" + serialize(root.right) + \")\";\n    return left + root.val + right;\n};\n\nvar deserialize = function(data) {\n    const ptr = [0];\n    return parse(data, ptr);\n};\n\nconst parse = (data, ptr) => {\n    if (data[ptr[0]] === 'X') {\n        ++ptr[0];\n        return null;\n    }\n    let cur = new TreeNode(0);\n    cur.left = parseSubtree(data, ptr);\n    cur.val = parseInt(data, ptr);\n    cur.right = parseSubtree(data, ptr);\n    return cur;\n}\n\nconst parseSubtree = (data, ptr) => {\n    ++ptr[0]; // 跳过左括号\n    const subtree = parse(data, ptr);\n    ++ptr[0]; // 跳过右括号\n    return subtree;\n}\n\nconst parseInt = (data, ptr) => {\n    let x = 0, sgn = 1;\n    if (isNaN(Number(data[ptr[0]]))) {\n        sgn = -1;\n        ++ptr[0];\n    }\n    while (!isNaN(Number(data[ptr[0]]))) {\n        x = x * 10 + data[ptr[0]++].charCodeAt() - '0'.charCodeAt();\n    }\n    return x * sgn;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：序列化时做了一次遍历，渐进时间复杂度为 $O(n)$。反序列化时，在解析字符串的时候 `ptr` 指针对字符串做了一次顺序遍历，字符串长度为 $O(n)$，故这里的渐进时间复杂度为 $O(n)$。\n- 空间复杂度：考虑递归使用的栈空间的大小，这里栈空间的使用和递归深度有关，递归深度又和二叉树的深度有关，在最差情况下，二叉树退化成一条链，故这里的渐进空间复杂度为 $O(n)$。"
}