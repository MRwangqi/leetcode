{
	"titleSlug": "maximize-distance-to-closest-person",
	"slug": "dao-zui-jin-de-ren-de-zui-da-ju-chi-by-leetcode",
	"url": "https://leetcode-cn.com/problems/maximize-distance-to-closest-person/solution/dao-zui-jin-de-ren-de-zui-da-ju-chi-by-leetcode/",
	"content": "#### 方法一：计算座位到最近的人的最大距离【通过】\n\n**思路**\n\n令 `left[i]` 为座位 `i` 到坐在 `i` 左边的人的最近距离。同理 `right[i]` 为座位 `i` 到坐在 `i` 右边的人的最近距离。那么该座位到最近的人的距离为 `min(left[i], right[i])`。\n\n**算法**\n\n如果 `i` 左边的位置是空的，那么 `left[i] = left[i - 1] + 1`；否则 `left[i] = 0`。`right[i]` 的计算方法类似。\n\n```java [solution1-Java]\nclass Solution {\n    public int maxDistToClosest(int[] seats) {\n        int N = seats.length;\n        int[] left = new int[N], right = new int[N];\n        Arrays.fill(left, N);\n        Arrays.fill(right, N);\n\n        for (int i = 0; i < N; ++i) {\n            if (seats[i] == 1) left[i] = 0;\n            else if (i > 0) left[i] = left[i-1] + 1;\n        }\n\n        for (int i = N-1; i >= 0; --i) {\n            if (seats[i] == 1) right[i] = 0;\n            else if (i < N-1) right[i] = right[i+1] + 1;\n        }\n\n        int ans = 0;\n        for (int i = 0; i < N; ++i)\n            if (seats[i] == 0)\n                ans = Math.max(ans, Math.min(left[i], right[i]));\n        return ans;\n    }\n}\n\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def maxDistToClosest(self, seats):\n        N = len(seats)\n        left, right = [N] * N, [N] * N\n\n        for i in xrange(N):\n            if seats[i] == 1: left[i] = 0\n            elif i > 0: left[i] = left[i-1] + 1\n\n        for i in xrange(N-1, -1, -1):\n            if seats[i] == 1: right[i] = 0\n            elif i < N-1: right[i] = right[i+1] + 1\n\n        return max(min(left[i], right[i])\n                   for i, seat in enumerate(seats) if not seat)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 `seats` 的长度。\n\n* 空间复杂度：$O(N)$，存储 `left` 和 `right` 的空间。\n\n\n#### 方法二：双指针【通过】\n\n**思路**\n\n遍历所有座位 `seats`，找出每个空位左边最近的人和右边最近的人，更新当前空位到最近的人的距离。\n\n**算法**\n\n使用 `prev` 记录 `i` 最左边第一个有人的位置，`future` 记录 `i` 最右边第一个有人的位置。\n\n座位 `i` 到最近的人的距离为 `min(i - prev, future - i)`。另外有一种特殊情况，如果座位 `i` 左边没有人，则认为到左边第一个人的距离是无限大，右边同理。\n\n```java [solution2-Java]\nclass Solution {\n    public int maxDistToClosest(int[] seats) {\n        int N = seats.length;\n        int prev = -1, future = 0;\n        int ans = 0;\n\n        for (int i = 0; i < N; ++i) {\n            if (seats[i] == 1) {\n                prev = i;\n            } else {\n                while (future < N && seats[future] == 0 || future < i)\n                    future++;\n\n                int left = prev == -1 ? N : i - prev;\n                int right = future == N ? N : future - i;\n                ans = Math.max(ans, Math.min(left, right));\n            }\n        }\n\n        return ans;\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution(object):\n    def maxDistToClosest(self, seats):\n        people = (i for i, seat in enumerate(seats) if seat)\n        prev, future = None, next(people)\n\n        ans = 0\n        for i, seat in enumerate(seats):\n            if seat:\n                prev = i\n            else:\n                while future is not None and future < i:\n                    future = next(people, None)\n\n                left = float('inf') if prev is None else i - prev\n                right = float('inf') if future is None else future - i\n                ans = max(ans, min(left, right))\n\n        return ans\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 `seats` 的长度。\n\n* 空间复杂度：$O(1)$。\n\n\n#### 方法三：按零分组【通过】\n\n**思路**\n\n如果两人之间有连续 `K` 个空座位，那么其中存在至少一个座位到两边最近的人的距离为 `(K+1) / 2`。\n\n**算法**\n\n假设两个人之间有 `K` 个空座位，则存在座位到最近的人的距离为 `(K+1) / 2`。\n\n对于边缘的座位，它们的一侧没有人，那么认为它们到该侧最近的人的距离为 `K`。\n\n```java [solution3-Java]\nclass Solution {\n    public int maxDistToClosest(int[] seats) {\n        int N = seats.length;\n        int K = 0; //current longest group of empty seats\n        int ans = 0;\n\n        for (int i = 0; i < N; ++i) {\n            if (seats[i] == 1) {\n                K = 0;\n            } else {\n                K++;\n                ans = Math.max(ans, (K + 1) / 2);\n            }\n        }\n\n        for (int i = 0; i < N; ++i)  if (seats[i] == 1) {\n            ans = Math.max(ans, i);\n            break;\n        }\n\n        for (int i = N-1; i >= 0; --i)  if (seats[i] == 1) {\n            ans = Math.max(ans, N - 1 - i);\n            break;\n        }\n\n        return ans;\n    }\n}\n```\n\n```python [solution3-Python]\nclass Solution(object):\n    def maxDistToClosest(self, seats):\n        ans = 0\n        for seat, group in itertools.groupby(seats):\n            if not seat:\n                K = len(list(group))\n                ans = max(ans, (K+1)/2)\n\n        return max(ans, seats.index(1), seats[::-1].index(1))\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 `seats` 的长度。\n\n* 空间复杂度：$O(1)$。在 Python中 `seats[::-1]` 的空间为 $O(N)$，但它可以被省略。"
}