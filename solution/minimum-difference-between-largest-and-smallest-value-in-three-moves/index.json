{
	"titleSlug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
	"slug": "san-ci-cao-zuo-hou-zui-da-zhi-yu-zui-xiao-zhi-de-2",
	"url": "https://leetcode-cn.com/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves/solution/san-ci-cao-zuo-hou-zui-da-zhi-yu-zui-xiao-zhi-de-2/",
	"content": "#### 前言\n\n当给定的数组长度不超过 $4$ 时，我们总可以让所有的数字相同，所以我们直接考虑长度超过 $4$ 的数组。\n\n我们注意到，每次修改必然是将最大值改小，或者将最小值改大，这样才能让最大值与最小值的差尽可能小。\n\n这样我们只需要找到最大的四个数与最小的四个数即可。当我们删去最小的 $k(0 \\le k \\le 3)$ 个数，还需要删去 $3-k$ 个最大值。枚举这四种情况即可。\n\n#### 方法一：直接排序\n\n**思路及算法**\n\n直接对这个数组排序，即可直接得到其中最大的四个数与最小的四个数。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minDifference(vector<int>& nums) {\n        int n = nums.size();\n        if (n <= 4) {\n            return 0;\n        }\n\n        sort(nums.begin(), nums.end());\n        int ret = 2e9;\n        for (int i = 0; i < 4; i++) {\n            ret = min(ret, nums[n - 4 + i] - nums[i]);\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minDifference(int[] nums) {\n        int n = nums.length;\n        if (n <= 4) {\n            return 0;\n        }\n\n        Arrays.sort(nums);\n        int ret = Integer.MAX_VALUE;\n        for (int i = 0; i < 4; i++) {\n            ret = Math.min(ret, nums[n - 4 + i] - nums[i]);\n        }\n        return ret;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n        \n        n = len(nums)\n        nums.sort()\n        ret = min(nums[n - 4 + i] - nums[i] for i in range(4))\n        return ret\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log{n})$，其中 $n$ 为给定数组的长度。\n- 空间复杂度：$O(1)$。\n\n#### 方法二：贪心\n\n**思路及算法**\n\n直接维护最大的四个数与最小的四个数即可，我们用两个数组分别记录最大值与最小值，不断更新这两个最值数组。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int minDifference(vector<int>& nums) {\n        int n = nums.size();\n        if (n <= 4) {\n            return 0;\n        }\n\n        vector<int> maxn(4, -1e9), minn(4, 1e9);\n        for (int i = 0; i < n; i++) {\n            int add = 0;\n            while (add < 4 && maxn[add] > nums[i]) {\n                add++;\n            }\n            if (add < 4) {\n                for (int j = 3; j > add; j--) {\n                    maxn[j] = maxn[j - 1];\n                }\n                maxn[add] = nums[i];\n            }\n            add = 0;\n            while (add < 4 && minn[add] < nums[i]) {\n                add++;\n            }\n            if (add < 4) {\n                for (int j = 3; j > add; j--) {\n                    minn[j] = minn[j - 1];\n                }\n                minn[add] = nums[i];\n            }\n        }\n        int ret = 2e9;\n        for (int i = 0; i < 4; i++) {\n            ret = min(ret, maxn[i] - minn[3 - i]);\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int minDifference(int[] nums) {\n        int n = nums.length;\n        if (n <= 4) {\n            return 0;\n        }\n\n        int[] maxn = new int[4];\n        int[] minn = new int[4];\n        Arrays.fill(maxn, -1000000000);\n        Arrays.fill(minn, 1000000000);\n        for (int i = 0; i < n; i++) {\n            int add = 0;\n            while (add < 4 && maxn[add] > nums[i]) {\n                add++;\n            }\n            if (add < 4) {\n                for (int j = 3; j > add; j--) {\n                    maxn[j] = maxn[j - 1];\n                }\n                maxn[add] = nums[i];\n            }\n            add = 0;\n            while (add < 4 && minn[add] < nums[i]) {\n                add++;\n            }\n            if (add < 4) {\n                for (int j = 3; j > add; j--) {\n                    minn[j] = minn[j - 1];\n                }\n                minn[add] = nums[i];\n            }\n        }\n        int ret = Integer.MAX_VALUE;\n        for (int i = 0; i < 4; i++) {\n            ret = Math.min(ret, maxn[i] - minn[3 - i]);\n        }\n        return ret;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n\n        n = len(nums)\n        maxn = [-10**9] * 4\n        minn = [10**9] * 4\n\n        for i in range(n):\n            add = 0\n            while add < 4 and maxn[add] > nums[i]:\n                add += 1\n            if add < 4:\n                maxn[add:] = [nums[i]] + maxn[add:-1]\n            \n            add = 0\n            while add < 4 and minn[add] < nums[i]:\n                add += 1\n            if add < 4:\n                minn[add:] = [nums[i]] + minn[add:-1]\n        \n        ret = min(maxn[i] - minn[3 - i] for i in range(4))\n        return ret\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为给定数组的长度。注意本题中只需要维护 $8$ 个数，因此更新最值数组的时间复杂度可以看作 $O(1)$，如果要求维护 $k$ 个数，则可以使用堆优化时间复杂度。\n- 空间复杂度：$O(1)$。"
}