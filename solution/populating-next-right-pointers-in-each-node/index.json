{
	"titleSlug": "populating-next-right-pointers-in-each-node",
	"slug": "tian-chong-mei-ge-jie-dian-de-xia-yi-ge-you-ce-2-4",
	"url": "https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/solution/tian-chong-mei-ge-jie-dian-de-xia-yi-ge-you-ce-2-4/",
	"content": "#### 方法一：层次遍历\n\n**思路与算法**\n\n题目本身希望我们将二叉树的每一层节点都连接起来形成一个链表。因此直观的做法我们可以对二叉树进行层次遍历，在层次遍历的过程中将我们将二叉树每一层的节点拿出来遍历并连接。\n\n层次遍历基于广度优先搜索，它与广度优先搜索的不同之处在于，广度优先搜索每次只会取出一个节点来拓展，而层次遍历会每次将队列中的所有元素都拿出来拓展，这样能保证每次从队列中拿出来遍历的元素都是属于同一层的，因此我们可以在遍历的过程中修改每个节点的 $\\text{next}$ 指针，同时拓展下一层的新队列。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/116/p1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/116/p2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/116/p3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/116/p4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/116/p5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/116/p6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/116/p7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/116/p8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/116/p9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/116/p10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/116/p11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/116/p12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/116/p13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/116/p14.png),![ppt15](https://assets.leetcode-cn.com/solution-static/116/p15.png)>\n\n**代码**\n\n```java [sol1-Java]\nclass Solution {\n    public Node connect(Node root) {\n        if (root == null) {\n            return root;\n        }\n        \n        // 初始化队列同时将第一层节点加入队列中，即根节点\n        Queue<Node> queue = new LinkedList<Node>(); \n        queue.add(root);\n        \n        // 外层的 while 循环迭代的是层数\n        while (!queue.isEmpty()) {\n            \n            // 记录当前队列大小\n            int size = queue.size();\n            \n            // 遍历这一层的所有节点\n            for (int i = 0; i < size; i++) {\n                \n                // 从队首取出元素\n                Node node = queue.poll();\n                \n                // 连接\n                if (i < size - 1) {\n                    node.next = queue.peek();\n                }\n                \n                // 拓展下一层节点\n                if (node.left != null) {\n                    queue.add(node.left);\n                }\n                if (node.right != null) {\n                    queue.add(node.right);\n                }\n            }\n        }\n        \n        // 返回根节点\n        return root;\n    }\n}\n```\n\n```python [sol1-Python3]\nimport collections \n\nclass Solution:\n    def connect(self, root: 'Node') -> 'Node':\n        \n        if not root:\n            return root\n        \n        # 初始化队列同时将第一层节点加入队列中，即根节点\n        Q = collections.deque([root])\n        \n        # 外层的 while 循环迭代的是层数\n        while Q:\n            \n            # 记录当前队列大小\n            size = len(Q)\n            \n            # 遍历这一层的所有节点\n            for i in range(size):\n                \n                # 从队首取出元素\n                node = Q.popleft()\n                \n                # 连接\n                if i < size - 1:\n                    node.next = Q[0]\n                \n                # 拓展下一层节点\n                if node.left:\n                    Q.append(node.left)\n                if node.right:\n                    Q.append(node.right)\n        \n        # 返回根节点\n        return root\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        if (root == nullptr) {\n            return root;\n        }\n        \n        // 初始化队列同时将第一层节点加入队列中，即根节点\n        queue<Node*> Q;\n        Q.push(root);\n        \n        // 外层的 while 循环迭代的是层数\n        while (!Q.empty()) {\n            \n            // 记录当前队列大小\n            int size = Q.size();\n            \n            // 遍历这一层的所有节点\n            for(int i = 0; i < size; i++) {\n                \n                // 从队首取出元素\n                Node* node = Q.front();\n                Q.pop();\n                \n                // 连接\n                if (i < size - 1) {\n                    node->next = Q.front();\n                }\n                \n                // 拓展下一层节点\n                if (node->left != nullptr) {\n                    Q.push(node->left);\n                }\n                if (node->right != nullptr) {\n                    Q.push(node->right);\n                }\n            }\n        }\n        \n        // 返回根节点\n        return root;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar connect = function(root) {\n    if (root === null) {\n        return root;\n    }\n    \n    // 初始化队列同时将第一层节点加入队列中，即根节点\n    const Q = [root]; \n    \n    // 外层的 while 循环迭代的是层数\n    while (Q.length > 0) {\n        \n        // 记录当前队列大小\n        const size = Q.length;\n        \n        // 遍历这一层的所有节点\n        for(let i = 0; i < size; i++) {\n            \n            // 从队首取出元素\n            const node = Q.shift();\n            \n            // 连接\n            if (i < size - 1) {\n                node.next = Q[0];\n            }\n            \n            // 拓展下一层节点\n            if (node.left !== null) {\n                Q.push(node.left);\n            }\n            if (node.right !== null) {\n                Q.push(node.right);\n            }\n        }\n    }\n    \n    // 返回根节点\n    return root;\n};\n```\n\n```Golang [sol1-Golang]\nfunc connect(root *Node) *Node {\n    if root == nil {\n        return root\n    }\n\n    // 初始化队列同时将第一层节点加入队列中，即根节点\n    queue := []*Node{root}\n\n    // 循环迭代的是层数\n    for len(queue) > 0 {\n        tmp := queue\n        queue = nil\n\n        // 遍历这一层的所有节点\n        for i, node := range tmp {\n            // 连接\n            if i+1 < len(tmp) {\n                node.Next = tmp[i+1]\n            }\n\n            // 拓展下一层节点\n            if node.Left != nil {\n                queue = append(queue, node.Left)\n            }\n            if node.Right != nil {\n                queue = append(queue, node.Right)\n            }\n        }\n    }\n\n    // 返回根节点\n    return root\n}\n```\n\n```C [sol1-C]\nstruct Node* connect(struct Node* root) {\n    if (root == NULL) {\n        return root;\n    }\n\n    // 初始化队列同时将第一层节点加入队列中，即根节点\n    struct Node* Q[5000];\n    int left = 0, right = 0;\n    Q[right++] = root;\n\n    // 外层的 while 循环迭代的是层数\n    while (left < right) {\n        // 记录当前队列大小\n        int size = right - left;\n\n        // 遍历这一层的所有节点\n        for (int i = 0; i < size; i++) {\n            // 从队首取出元素\n            struct Node* node = Q[left++];\n\n            // 连接\n            if (i < size - 1) {\n                node->next = Q[left];\n            }\n\n            // 拓展下一层节点\n            if (node->left != NULL) {\n                Q[right++] = node->left;\n            }\n            if (node->right != NULL) {\n                Q[right++] = node->right;\n            }\n        }\n    }\n\n    // 返回根节点\n    return root;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$。每个节点会被访问一次且只会被访问一次，即从队列中弹出，并建立 $\\text{next}$ 指针。\n\n* 空间复杂度：$O(N)$。这是一棵完美二叉树，它的最后一个层级包含 $N/2$ 个节点。广度优先遍历的复杂度取决于一个层级上的最大元素数量。这种情况下空间复杂度为 $O(N)$。\n\n\n#### 方法二：使用已建立的 $\\text{next}$ 指针\n\n**思路**\n\n一棵树中，存在两种类型的 $\\text{next}$ 指针。\n\n1. 第一种情况是连接同一个父节点的两个子节点。它们可以通过同一个节点直接访问到，因此执行下面操作即可完成连接。\n\n    ```\n    node.left.next = node.right\n    ```\n\n    ![fig1](https://assets.leetcode-cn.com/solution-static/116/1.png){:width=480}\n\n2. 第二种情况在不同父亲的子节点之间建立连接，这种情况不能直接连接。\n\n    ![fig2](https://assets.leetcode-cn.com/solution-static/116/2.png){:width=480}\n\n    如果每个节点有指向父节点的指针，可以通过该指针找到 $\\text{next}$ 节点。如果不存在该指针，则按照下面思路建立连接：\n\n> 第 $N$ 层节点之间建立 $\\text{next}$ 指针后，再建立第 $N+1$ 层节点的 $\\text{next}$ 指针。可以通过 $\\text{next}$ 指针访问同一层的所有节点，因此可以使用第 $N$ 层的 $\\text{next}$ 指针，为第 $N+1$ 层节点建立 $\\text{next}$ 指针。\n\n**算法**\n\n1. 从根节点开始，由于第 $0$ 层只有一个节点，所以不需要连接，直接为第 $1$ 层节点建立 $\\text{next}$ 指针即可。该算法中需要注意的一点是，当我们为第 $N$ 层节点建立 $\\text{next}$ 指针时，处于第 $N-1$ 层。当第 $N$ 层节点的 $\\text{next}$ 指针全部建立完成后，移至第 $N$ 层，建立第 $N+1$ 层节点的 $\\text{next}$ 指针。\n\n2. 遍历某一层的节点时，这层节点的 $\\text{next}$ 指针已经建立。因此我们只需要知道这一层的最左节点，就可以按照链表方式遍历，不需要使用队列。\n\n3. 上面思路的伪代码如下：\n\n    ```\n    leftmost = root\n    while (leftmost.left != null) {\n        head = leftmost\n        while (head.next != null) {\n            1) Establish Connection 1\n            2) Establish Connection 2 using next pointers\n            head = head.next\n        }\n        leftmost = leftmost.left\n    }\n   ```\n\n    ![fig3](https://assets.leetcode-cn.com/solution-static/116/3.png){:width=480}\n\n\n4. 两种类型的 $\\text{next}$ 指针。\n   \n    1. 第一种情况两个子节点属于同一个父节点，因此直接通过父节点建立两个子节点的 $\\text{next}$ 指针即可。\n\n        ```\n        node.left.next = node.right\n        ```\n\n    ![fig4](https://assets.leetcode-cn.com/solution-static/116/4.png){:width=480}\n\n\n    2. 第二种情况是连接不同父节点之间子节点的情况。更具体地说，连接的是第一个父节点的右孩子和第二父节点的左孩子。由于已经在父节点这一层建立了 $\\text{next}$ 指针，因此可以直接通过第一个父节点的 $\\text{next}$ 指针找到第二个父节点，然后在它们的孩子之间建立连接。\n\n        ```\n        node.right.next = node.next.left\n        ```\n        \n\n    ![fig5](https://assets.leetcode-cn.com/solution-static/116/5.png){:width=480}\n\n5. 完成当前层的连接后，进入下一层重复操作，直到所有的节点全部连接。进入下一层后需要更新最左节点，然后从新的最左节点开始遍历该层所有节点。因为是完美二叉树，因此最左节点一定是当前层最左节点的左孩子。如果当前最左节点的左孩子不存在，说明已经到达该树的最后一层，完成了所有节点的连接。\n\n    ![fig6](https://assets.leetcode-cn.com/solution-static/116/6.png){:width=480}\n\n**代码**\n\n```java [sol2-Java]\nclass Solution {\n    public Node connect(Node root) {\n        if (root == null) {\n            return root;\n        }\n        \n        // 从根节点开始\n        Node leftmost = root;\n        \n        while (leftmost.left != null) {\n            \n            // 遍历这一层节点组织成的链表，为下一层的节点更新 next 指针\n            Node head = leftmost;\n            \n            while (head != null) {\n                \n                // CONNECTION 1\n                head.left.next = head.right;\n                \n                // CONNECTION 2\n                if (head.next != null) {\n                    head.right.next = head.next.left;\n                }\n                \n                // 指针向后移动\n                head = head.next;\n            }\n            \n            // 去下一层的最左的节点\n            leftmost = leftmost.left;\n        }\n        \n        return root;\n    }\n}\n```\n\n```python [sol2-Python3]\nclass Solution:\n    def connect(self, root: 'Node') -> 'Node':\n        \n        if not root:\n            return root\n        \n        # 从根节点开始\n        leftmost = root\n        \n        while leftmost.left:\n            \n            # 遍历这一层节点组织成的链表，为下一层的节点更新 next 指针\n            head = leftmost\n            while head:\n                \n                # CONNECTION 1\n                head.left.next = head.right\n                \n                # CONNECTION 2\n                if head.next:\n                    head.right.next = head.next.left\n                \n                # 指针向后移动\n                head = head.next\n            \n            # 去下一层的最左的节点\n            leftmost = leftmost.left\n        \n        return root \n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        if (root == nullptr) {\n            return root;\n        }\n        \n        // 从根节点开始\n        Node* leftmost = root;\n        \n        while (leftmost->left != nullptr) {\n            \n            // 遍历这一层节点组织成的链表，为下一层的节点更新 next 指针\n            Node* head = leftmost;\n            \n            while (head != nullptr) {\n                \n                // CONNECTION 1\n                head->left->next = head->right;\n                \n                // CONNECTION 2\n                if (head->next != nullptr) {\n                    head->right->next = head->next->left;\n                }\n                \n                // 指针向后移动\n                head = head->next;\n            }\n            \n            // 去下一层的最左的节点\n            leftmost = leftmost->left;\n        }\n        \n        return root;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar connect = function(root) {\n    if (root === null) {\n        return root;\n    }\n    \n    // 从根节点开始\n    let leftmost = root;\n    \n    while (leftmost.left !== null) {\n        \n        // 遍历这一层节点组织成的链表，为下一层的节点更新 next 指针\n        let head = leftmost;\n        \n        while (head !== null) {\n            \n            // CONNECTION 1\n            head.left.next = head.right;\n            \n            // CONNECTION 2\n            if (head.next != null) {\n                head.right.next = head.next.left;\n            }\n            \n            // 指针向后移动\n            head = head.next;\n        }\n        \n        // 去下一层的最左的节点\n        leftmost = leftmost.left;\n    }\n    \n    return root;\n};\n```\n\n```Golang [sol2-Golang]\nfunc connect(root *Node) *Node {\n    if root == nil {\n        return root\n    }\n\n    // 每次循环从该层的最左侧节点开始\n    for leftmost := root; leftmost.Left != nil; leftmost = leftmost.Left {\n        // 通过 Next 遍历这一层节点，为下一层的节点更新 Next 指针\n        for node := leftmost; node != nil; node = node.Next {\n            // 左节点指向右节点\n            node.Left.Next = node.Right\n\n            // 右节点指向下一个左节点\n            if node.Next != nil {\n                node.Right.Next = node.Next.Left\n            }\n        }\n    }\n\n    // 返回根节点\n    return root\n}\n```\n\n```C [sol2-C]\nstruct Node* connect(struct Node* root) {\n    if (root == NULL) {\n        return root;\n    }\n\n    // 从根节点开始\n    struct Node* leftmost = root;\n\n    while (leftmost->left != NULL) {\n        // 遍历这一层节点组织成的链表，为下一层的节点更新 next 指针\n        struct Node* head = leftmost;\n\n        while (head != NULL) {\n            // CONNECTION 1\n            head->left->next = head->right;\n\n            // CONNECTION 2\n            if (head->next != NULL) {\n                head->right->next = head->next->left;\n            }\n\n            // 指针向后移动\n            head = head->next;\n        }\n\n        // 去下一层的最左的节点\n        leftmost = leftmost->left;\n    }\n\n    return root;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，每个节点只访问一次。 \n\n* 空间复杂度：$O(1)$，不需要存储额外的节点。"
}