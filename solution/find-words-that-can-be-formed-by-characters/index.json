{
	"titleSlug": "find-words-that-can-be-formed-by-characters",
	"slug": "pin-xie-dan-ci-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/find-words-that-can-be-formed-by-characters/solution/pin-xie-dan-ci-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n![1160. 拼写单词 1.mp4](00067219-da0f-4f84-9d10-7a13053bf870)\n\n### 📖 文字题解\n\n#### 方法一：哈希表记数\n\n**思路和算法**\n\n显然，对于一个单词 `word`，只要其中的每个字母的数量都不大于 `chars` 中对应的字母的数量，那么就可以用 `chars` 中的字母拼写出 `word`。所以我们只需要用一个哈希表存储 `chars` 中每个字母的数量，再用一个哈希表存储 `word` 中每个字母的数量，最后将这两个哈希表的键值对逐一进行比较即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countCharacters(vector<string>& words, string chars) {\n        unordered_map<char, int> chars_cnt;\n        for (char c : chars) {\n            ++chars_cnt[c];\n        }\n        int ans = 0;\n        for (string word : words) {\n            unordered_map<char, int> word_cnt;\n            for (char c : word) {\n                ++word_cnt[c];\n            }\n            bool is_ans = true;\n            for (char c : word) {\n                if (chars_cnt[c] < word_cnt[c]) {\n                    is_ans = false;\n                    break;\n                }\n            }\n            if (is_ans) {\n                ans += word.size();\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countCharacters(String[] words, String chars) {\n        Map<Character, Integer> charsCnt = new HashMap<Character, Integer>();\n        int length = chars.length();\n        for (int i = 0; i < length; ++i) {\n            char c = chars.charAt(i);\n            charsCnt.put(c, charsCnt.getOrDefault(c, 0) + 1);\n        }\n        int ans = 0;\n        for (String word : words) {\n            Map<Character, Integer> wordCnt = new HashMap<Character, Integer>();\n            int wordLength = word.length();\n            for (int i = 0; i < wordLength; ++i) {\n                char c = word.charAt(i);\n                wordCnt.put(c, wordCnt.getOrDefault(c, 0) + 1);\n            }\n            boolean isAns = true;\n            for (int i = 0; i < wordLength; ++i) {\n                char c = word.charAt(i);\n                if (charsCnt.getOrDefault(c, 0) < wordCnt.getOrDefault(c, 0)) {\n                    isAns = false;\n                    break;\n                }\n            }\n            if (isAns) {\n                ans += word.length();\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        chars_cnt = collections.Counter(chars)\n        ans = 0\n        for word in words:\n            word_cnt = collections.Counter(word)\n            for c in word_cnt:\n                if chars_cnt[c] < word_cnt[c]:\n                    break\n            else:\n                ans += len(word)\n        return ans\n```\n\n**复杂度分析**\n\n  - 时间复杂度：$O(n)$，其中 $n$ 为所有字符串的长度和。我们需要遍历每个字符串，包括 `chars` 以及数组 `words` 中的每个单词。\n\n  - 空间复杂度：$O(S)$，其中 $S$ 为字符集大小，在本题中 $S$ 的值为 $26$（所有字符串仅包含小写字母）。程序运行过程中，最多同时存在两个哈希表，使用的空间均不超过字符集大小 $S$，因此空间复杂度为 $O(S)$。"
}