{
	"titleSlug": "stock-price-fluctuation",
	"slug": "gu-piao-jie-ge-bo-dong-by-leetcode-solut-rwrb",
	"url": "https://leetcode-cn.com/problems/stock-price-fluctuation/solution/gu-piao-jie-ge-bo-dong-by-leetcode-solut-rwrb/",
	"content": "#### 方法一：哈希表 + 有序集合\n\n这道题要求记录特定时间戳的股票价格、返回最新股票价格以及返回股票的最高和最低价格。\n\n由于同一个时间戳可能出现多次，后面的记录会更正（覆盖）前面的记录，因此可以使用哈希表记录每个时间戳对应的股票价格。对于返回股票最新价格操作，我们可以维护最大的时间戳，用最大的时间戳在哈希表中查找，可以得到最新的股票价格。\n\n对于返回股票的最高和最低价格的操作，我们需要知道当前哈希表中的股票的最高和最低价格。我们可以使用有序集合维护哈希表中的股票价格，有序集合中的最大值和最小值即为当前哈希表中的股票的最高和最低价格。\n\n因此，$\\texttt{StockPrice}$ 类需包含最大时间戳、哈希表和有序集合。初始化时，最大时间戳设为 $0$，哈希表和有序集合设为空。\n\n对于更新操作：\n\n1. 从哈希表中得到时间戳 $\\textit{timestamp}$ 对应的原价格，如果哈希表中没有时间戳 $\\textit{timestamp}$ 对应的原价格，则将原价格记为 $0$（由于实际价格都大于 $0$，因此可以将原价格记为 $0$ 表示哈希表中没有该时间戳）；\n\n2. 将哈希表中的时间戳 $\\textit{timestamp}$ 对应的价格更新为新价格 $\\textit{price}$；\n\n3. 如果原价格大于 $0$，即之前已经有时间戳 $\\textit{timestamp}$ 对应的记录，则将原价格从有序集合中删除；\n\n4. 在有序集合中加入新价格 $\\textit{price}$。\n\n注意，由于可能有重复的股票价格，对于不支持多重有序集合（如 C++ 中的 $\\texttt{multiset}$）的语言，可以额外记录每个股票价格的出现次数，在加入、删除股票价格时，更新有序集合中该股票价格的出现次数。\n\n其余的操作可以直接从哈希表和有序集合中得到结果：\n\n- 对于返回股票最新价格操作，从哈希表中得到最大时间戳对应的股票价格并返回；\n\n- 对于返回股票最高价格操作，从有序集合中得到最大值，即为股票最高价格，将其返回；\n\n- 对于返回股票最低价格操作，从有序集合中得到最小值，即为股票最低价格，将其返回。\n\n```Java [sol1-Java]\nclass StockPrice {\n    int maxTimestamp;\n    HashMap<Integer, Integer> timePriceMap;\n    TreeMap<Integer, Integer> prices;\n\n    public StockPrice() {\n        maxTimestamp = 0;\n        timePriceMap = new HashMap<Integer, Integer>();\n        prices = new TreeMap<Integer, Integer>();\n    }\n    \n    public void update(int timestamp, int price) {\n        maxTimestamp = Math.max(maxTimestamp, timestamp);\n        int prevPrice = timePriceMap.getOrDefault(timestamp, 0);\n        timePriceMap.put(timestamp, price);\n        if (prevPrice > 0) {\n            prices.put(prevPrice, prices.get(prevPrice) - 1);\n            if (prices.get(prevPrice) == 0) {\n                prices.remove(prevPrice);\n            }\n        }\n        prices.put(price, prices.getOrDefault(price, 0) + 1);\n    }\n    \n    public int current() {\n        return timePriceMap.get(maxTimestamp);\n    }\n    \n    public int maximum() {\n        return prices.lastKey();\n    }\n    \n    public int minimum() {\n        return prices.firstKey();\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass StockPrice {\npublic:\n    StockPrice() {\n        this->maxTimestamp = 0;\n    }\n    \n    void update(int timestamp, int price) {\n        maxTimestamp = max(maxTimestamp, timestamp);\n        int prevPrice = timePriceMap.count(timestamp) ? timePriceMap[timestamp] : 0;\n        timePriceMap[timestamp] = price;\n        if (prevPrice > 0) {\n            auto it = prices.find(prevPrice);\n            if (it != prices.end()) {\n                prices.erase(it);\n            }\n        }\n        prices.emplace(price);\n    }\n    \n    int current() {\n        return timePriceMap[maxTimestamp];\n    }\n    \n    int maximum() {\n        return *prices.rbegin();\n    }\n    \n    int minimum() {\n        return *prices.begin();\n    }\nprivate:\n    int maxTimestamp;\n    unordered_map<int, int> timePriceMap;\n    multiset<int> prices;\n};\n```\n\n```Python [sol1-Python3]\nfrom sortedcontainers import SortedList\n\nclass StockPrice:\n    def __init__(self):\n        self.price = SortedList()\n        self.timePriceMap = {}\n        self.maxTimestamp = 0\n\n    def update(self, timestamp: int, price: int) -> None:\n        if timestamp in self.timePriceMap:\n            self.price.discard(self.timePriceMap[timestamp])\n        self.price.add(price)\n        self.timePriceMap[timestamp] = price\n        self.maxTimestamp = max(self.maxTimestamp, timestamp)\n\n    def current(self) -> int:\n        return self.timePriceMap[self.maxTimestamp]\n\n    def maximum(self) -> int:\n        return self.price[-1]\n\n    def minimum(self) -> int:\n        return self.price[0]\n```\n\n```go [sol1-Golang]\ntype StockPrice struct {\n    prices       *redblacktree.Tree\n    timePriceMap map[int]int\n    maxTimestamp int\n}\n\nfunc Constructor() StockPrice {\n    return StockPrice{redblacktree.NewWithIntComparator(), map[int]int{}, 0}\n}\n\nfunc (sp *StockPrice) Update(timestamp, price int) {\n    if prevPrice := sp.timePriceMap[timestamp]; prevPrice > 0 {\n        if times, _ := sp.prices.Get(prevPrice); times.(int) > 1 {\n            sp.prices.Put(prevPrice, times.(int)-1)\n        } else {\n            sp.prices.Remove(prevPrice)\n        }\n    }\n    times := 0\n    if val, ok := sp.prices.Get(price); ok {\n        times = val.(int)\n    }\n    sp.prices.Put(price, times+1)\n    sp.timePriceMap[timestamp] = price\n    if timestamp >= sp.maxTimestamp {\n        sp.maxTimestamp = timestamp\n    }\n}\n\nfunc (sp *StockPrice) Current() int { return sp.timePriceMap[sp.maxTimestamp] }\nfunc (sp *StockPrice) Maximum() int { return sp.prices.Right().Key.(int) }\nfunc (sp *StockPrice) Minimum() int { return sp.prices.Left().Key.(int) }\n```\n\n**复杂度分析**\n\n- 时间复杂度：初始化的时间复杂度是 $O(1)$，更新操作、返回股票最高价格操作和返回股票最低价格操作的时间复杂度是 $O(\\log n)$，返回股票最新价格操作的时间复杂度是 $O(1)$，其中 $n$ 是更新操作的次数。\n  更新操作需要更新最大时间戳、哈希表和有序集合，更新最大时间戳和哈希表需要 $O(1)$ 的时间，更新有序集合需要 $O(\\log n)$ 的时间。\n  返回股票最高价格操作和返回股票最低价格操作分别需要在有序集合中寻找最大值和最小值，需要 $O(\\log n)$ 的时间。\n  返回股票最新价格操作需要在哈希表中得到最大时间戳对应的股票价格，需要 $O(1)$ 的时间。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是更新操作的次数。空间复杂度主要取决于哈希表和有序集合，哈希表和有序集合中存储的元素个数不会超过更新操作的次数。\n\n#### 方法二：哈希表 + 两个优先队列\n\n方法一使用一个有序集合存储每个股票价格的次数，在更新操作中将有序集合中的过期价格删除完毕，在其余操作中直接得到答案并返回。可以换一个思路，删除过期价格不一定要在更新操作中完成，而是可以在返回股票最高价格操作和返回股票最低价格操作中完成，即延迟删除。\n\n为了实现延迟删除，需要维护两个优先队列用于存储股票价格和时间戳，分别基于大根堆和小根堆实现，大根堆的堆顶元素对应股票最高价格，小根堆的堆顶元素对应股票最低价格。以下将基于大根堆实现的优先队列称为最高价格队列，将基于小根堆实现的优先队列称为最低价格队列。\n\n对于更新操作，使用 $\\textit{timestamp}$ 更新最大时间戳，将 $\\textit{timestamp}$ 和 $\\textit{price}$ 存入哈希表，并将 $(\\textit{price}, \\textit{timestamp})$ 分别加入两个优先队列。\n\n对于返回股票最新价格操作，从哈希表中得到最大时间戳对应的股票价格并返回。\n\n对于返回股票最高价格操作，每次从最高价格队列的队首元素中得到价格和时间戳，并从哈希表中得到该时间戳对应的实际价格，如果队首元素中的价格和实际价格不一致，则队首元素为过期价格，将队首元素删除，重复该操作直到队首元素不为过期价格，此时返回队首元素中的价格。\n\n对于返回股票最低价格操作，每次从最低价格队列的队首元素中得到价格和时间戳，并从哈希表中得到该时间戳对应的实际价格，如果队首元素中的价格和实际价格不一致，则队首元素为过期价格，将队首元素删除，重复该操作直到队首元素不为过期价格，此时返回队首元素中的价格。\n\n```Java [sol2-Java]\nclass StockPrice {\n    int maxTimestamp;\n    HashMap<Integer, Integer> timePriceMap;\n    PriorityQueue<int[]> pqMax;\n    PriorityQueue<int[]> pqMin;\n\n    public StockPrice() {\n        maxTimestamp = 0;\n        timePriceMap = new HashMap<Integer, Integer>();\n        pqMax = new PriorityQueue<int[]>((a, b) -> b[0] - a[0]);\n        pqMin = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);\n    }\n    \n    public void update(int timestamp, int price) {\n        maxTimestamp = Math.max(maxTimestamp, timestamp);\n        timePriceMap.put(timestamp, price);\n        pqMax.offer(new int[]{price, timestamp});\n        pqMin.offer(new int[]{price, timestamp});\n    }\n    \n    public int current() {\n        return timePriceMap.get(maxTimestamp);\n    }\n    \n    public int maximum() {\n        while (true) {\n            int[] priceTime = pqMax.peek();\n            int price = priceTime[0], timestamp = priceTime[1];\n            if (timePriceMap.get(timestamp) == price) {\n                return price;\n            }\n            pqMax.poll();\n        }\n    }\n    \n    public int minimum() {\n        while (true) {\n            int[] priceTime = pqMin.peek();\n            int price = priceTime[0], timestamp = priceTime[1];\n            if (timePriceMap.get(timestamp) == price) {\n                return price;\n            }\n            pqMin.poll();\n        }\n    }\n}\n```\n\n```C++ [sol2-C++]\ntypedef pair<int,int> pii;\n\nclass StockPrice {\npublic:\n    StockPrice() {\n        this->maxTimestamp = 0;\n    }\n    \n    void update(int timestamp, int price) {\n        maxTimestamp = max(maxTimestamp, timestamp);\n        timePriceMap[timestamp] = price;\n        pqMax.emplace(price, timestamp);\n        pqMin.emplace(price, timestamp);\n    }\n    \n    int current() {\n        return timePriceMap[maxTimestamp];\n    }\n    \n    int maximum() {\n        while (true) {\n            int price = pqMax.top().first, timestamp = pqMax.top().second;\n            if (timePriceMap[timestamp] == price) {\n                return price;\n            }\n            pqMax.pop();\n        }\n    }\n    \n    int minimum() {\n        while (true) {\n            int price = pqMin.top().first, timestamp = pqMin.top().second;\n            if (timePriceMap[timestamp] == price) {\n                return price;\n            }\n            pqMin.pop();\n        }\n    }\nprivate:\n    int maxTimestamp;\n    unordered_map<int, int> timePriceMap;\n    priority_queue<pii, vector<pii>, less<pii>> pqMax;\n    priority_queue<pii, vector<pii>, greater<pii>> pqMin;\n};\n```\n\n```Python [sol2-Python3]\nclass StockPrice:\n    def __init__(self):\n        self.maxPrice = []\n        self.minPrice = []\n        self.timePriceMap = {}\n        self.maxTimestamp = 0\n\n    def update(self, timestamp: int, price: int) -> None:\n        heappush(self.maxPrice, (-price, timestamp))\n        heappush(self.minPrice, (price, timestamp))\n        self.timePriceMap[timestamp] = price\n        self.maxTimestamp = max(self.maxTimestamp, timestamp)\n\n    def current(self) -> int:\n        return self.timePriceMap[self.maxTimestamp]\n\n    def maximum(self) -> int:\n        while True:\n            price, timestamp = self.maxPrice[0]\n            if -price == self.timePriceMap[timestamp]:\n                return -price\n            heappop(self.maxPrice)\n\n    def minimum(self) -> int:\n        while True:\n            price, timestamp = self.minPrice[0]\n            if price == self.timePriceMap[timestamp]:\n                return price\n            heappop(self.minPrice)\n```\n\n```go [sol2-Golang]\ntype StockPrice struct {\n    maxPrice, minPrice hp\n    timePriceMap       map[int]int\n    maxTimestamp       int\n}\n\nfunc Constructor() StockPrice {\n    return StockPrice{timePriceMap: map[int]int{}}\n}\n\nfunc (sp *StockPrice) Update(timestamp, price int) {\n    heap.Push(&sp.maxPrice, pair{-price, timestamp})\n    heap.Push(&sp.minPrice, pair{price, timestamp})\n    sp.timePriceMap[timestamp] = price\n    if timestamp > sp.maxTimestamp {\n        sp.maxTimestamp = timestamp\n    }\n}\n\nfunc (sp *StockPrice) Current() int {\n    return sp.timePriceMap[sp.maxTimestamp]\n}\n\nfunc (sp *StockPrice) Maximum() int {\n    for {\n        if p := sp.maxPrice[0]; -p.price == sp.timePriceMap[p.timestamp] {\n            return -p.price\n        }\n        heap.Pop(&sp.maxPrice)\n    }\n}\n\nfunc (sp *StockPrice) Minimum() int {\n    for {\n        if p := sp.minPrice[0]; p.price == sp.timePriceMap[p.timestamp] {\n            return p.price\n        }\n        heap.Pop(&sp.minPrice)\n    }\n}\n\ntype pair struct{ price, timestamp int }\ntype hp []pair\nfunc (h hp) Len() int            { return len(h) }\nfunc (h hp) Less(i, j int) bool  { return h[i].price < h[j].price }\nfunc (h hp) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(v interface{}) { *h = append(*h, v.(pair)) }\nfunc (h *hp) Pop() interface{}   { a := *h; v := a[len(a)-1]; *h = a[:len(a)-1]; return v }\n```\n\n**复杂度分析**\n\n- 时间复杂度：初始化的时间复杂度是 $O(1)$，更新操作、返回股票最高价格操作和返回股票最低价格操作的**均摊**时间复杂度是 $O(\\log n)$，返回股票最新价格操作的时间复杂度是 $O(1)$，其中 $n$ 是更新操作的次数。\n  更新操作需要更新最大时间戳、哈希表和两个优先队列，更新最大时间戳和哈希表需要 $O(1)$ 的时间。\n  更新操作、返回股票最高价格操作和返回股票最低价格操作中，每个元素分别在两个优先队列中添加和删除一次，平均需要 $O(\\log n)$ 的时间。\n  返回股票最新价格操作需要在哈希表中得到最大时间戳对应的股票价格，需要 $O(1)$ 的时间。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是更新操作的次数。空间复杂度主要取决于哈希表和优先队列，哈希表和每个优先队列中存储的元素个数不会超过更新操作的次数。"
}