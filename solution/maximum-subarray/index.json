{
	"titleSlug": "maximum-subarray",
	"slug": "dong-tai-gui-hua-fen-zhi-fa-python-dai-ma-java-dai",
	"url": "https://leetcode-cn.com/problems/maximum-subarray/solution/dong-tai-gui-hua-fen-zhi-fa-python-dai-ma-java-dai/",
	"content": "**一句话题解**：\n\n这是一道典型的使用「动态规划」解决的问题，需要我们掌握动态规划问题设计状态的技巧（**无后效性**），并且需要知道如何推导状态转移方程，最后再去优化空间。\n\n---\n\n### 方法一：动态规划\n\n「力扣」第 53 题（最大子序和）是「力扣」第 124 题（二叉树的最大路径和）的线性版本，它们的状态设计思想和状态转移是类似的，希望大家能够通过本题题解进一步体会状态是如何想到的（即子问题的定义需要从哪些方面考虑）。\n\n本题接的重点在「关键 1：理解题意」和「关键 2：如何定义子问题（如何定义状态）」和「最后再谈谈「无后效性」。\n\n**关键 1：理解题意**\n\n题目要我们找出和最大的连续子数组的值是多少，「连续」是关键字，连续很重要，不是子序列。\n\n题目只要求返回结果，不要求得到最大的连续子数组是哪一个。这样的问题通常可以使用「动态规划」解决。\n\n**关键 2：如何定义子问题（如何定义状态）**\n\n**设计状态思路**：把不确定的因素确定下来，进而把子问题定义清楚，把子问题定义得简单。动态规划的思想通过解决了一个一个简单的问题，进而把简单的问题的解组成了复杂的问题的解。\n\n> 友情提示：上面这句话大家姑且这么一看，脑子里有个印象，没有那么绝对。可能不同的人看会有不同的理解。如果我以后讲解的动态规划的设计思想与这里讲解的「设计状态思路」不一样的，我会再和大家说明。如果讲解有误导的地方，还请大家指出。，\n\n我们 **不知道和最大的连续子数组一定会选哪一个数**，那么我们可以求出 **所有** 经过输入数组的某一个数的连续子数组的最大和。\n\n例如，示例 1 输入数组是 `[-2,1,-3,4,-1,2,1,-5,4]` ，我们可以求出以下子问题：\n\n+ 子问题 1：经过 $-2$ 的连续子数组的最大和是多少；\n+ 子问题 2：经过 $1$ 的连续子数组的最大和是多少；\n+ 子问题 3：经过 $-3$ 的连续子数组的最大和是多少；\n+ 子问题 4：经过 $4$ 的连续子数组的最大和是多少；\n+ 子问题 5：经过 $-1$ 的连续子数组的最大和是多少；\n+ 子问题 6：经过 $2$ 的连续子数组的最大和是多少；\n+ 子问题 7：经过 $1$ 的连续子数组的最大和是多少；\n+ 子问题 8：经过 $-5$ 的连续子数组的最大和是多少；\n+ 子问题 9：经过 $4$ 的连续子数组的最大和是多少。\n\n一共 9 个子问题，这些子问题之间的联系并没有那么好看出来，这是因为 **子问题的描述还有不确定的地方**（**这件事情叫做「有后效性」**，我们在本文的最后会讲解什么是「无后效性」）。\n\n例如「子问题 3」：经过 $-3$ 的连续子数组的最大和是多少。\n\n「经过 $-3$ 的连续子数组」我们任意举出几个：\n\n+ `[-2,1,-3,4]` ，$-3$ 是这个连续子数组的第 3 个元素；\n+ `[1,-3,4,-1]` ，$-3$ 是这个连续子数组的第 2 个元素；\n+ ……\n\n我们不确定的是：**$-3$ 是连续子数组的第几个元素**。那么我们就把 $-3$ 定义成连续子数组的最后一个元素。在新的定义下，我们列出子问题如下：\n\n+ 子问题 1：以 $-2$ **结尾的**连续子数组的最大和是多少；\n+ 子问题 2：以 $1$ 结尾的连续子数组的最大和是多少；\n+ 子问题 3：以 $-3$ 结尾的连续子数组的最大和是多少；\n+ 子问题 4：以 $4$ 结尾的连续子数组的最大和是多少；\n+ 子问题 5：以 $-1$ 结尾的连续子数组的最大和是多少；\n+ 子问题 6：以 $2$ 结尾的连续子数组的最大和是多少；\n+ 子问题 7：以 $1$ 结尾的连续子数组的最大和是多少；\n+ 子问题 8：以 $-5$ 结尾的连续子数组的最大和是多少；\n+ 子问题 9：以 $4$ 结尾的连续子数组的最大和是多少。\n\n我们加上了「结尾的」，这些子问题之间就有了联系。我们单独看子问题 1 和子问题 2：\n\n+ 子问题 1：以 $-2$ **结尾的**连续子数组的最大和是多少；\n\n以 $-2$ **结尾的**连续子数组是 `[-2]`，因此最大和就是 $-2$。\n\n+ 子问题 2：以 $1$ 结尾的连续子数组的最大和是多少；\n\n以 $1$ 结尾的连续子数组有 `[-2,1]` 和 `[1]` ，其中 **`[-2,1]` 就是在「子问题 1」的后面加上 1 得到**。$-2 + 1 = -1 < 1$ ，因此「子问题 2」 的答案是 $1$。\n\n大家发现了吗，如果编号为 `i` 的子问题的结果是负数或者 $0$ ，那么编号为 `i + 1` 的子问题就可以把编号为 `i` 的子问题的结果舍弃掉（这里 `i` 为整数，最小值为 `1` ，最大值为 `8`），这是因为：\n\n+ 一个数 `a` 加上负数的结果比 `a` 更小；\n+ 一个数 `a` 加上 $0$ 的结果不会比 `a` 更大；\n+ 而子问题的定义必须以一个数结尾，因此如果子问题 `i` 的结果是负数或者 $0$，那么子问题 `i + 1` 的答案就是以 `nums[i]` 结尾的那个数。\n\n> 因为我们把子问题定义的更清楚，子问题之间的联系就容易观察到。这是我们定义子问题、定义状态的经验。\n\n接下来我们按照编写动态规划题解的步骤，把「状态定义」「状态转移方程」「初始化」「输出」「是否可以空间优化」全都写出来。\n\n\n#### 定义状态（定义子问题）\n\n`dp[i]`：表示以 `nums[i]` **结尾** 的 **连续** 子数组的最大和。\n\n**说明**：「结尾」和「连续」是关键字。\n\n#### 状态转移方程（描述子问题之间的联系）\n\n根据状态的定义，由于 `nums[i]` 一定会被选取，并且以 `nums[i]` 结尾的连续子数组与以 `nums[i - 1]` 结尾的连续子数组只相差一个元素 `nums[i]` 。\n\n假设数组 `nums` 的值全都严格大于 $0$，那么一定有 `dp[i] = dp[i - 1] + nums[i]`。\n\n可是 `dp[i - 1]` 有可能是负数，于是分类讨论：\n\n+ 如果 `dp[i - 1] > 0`，那么可以把 `nums[i]` 直接接在 `dp[i - 1]` 表示的那个数组的后面，得到和更大的连续子数组；\n+ 如果 `dp[i - 1] <= 0`，那么 `nums[i]` 加上前面的数 `dp[i - 1]` 以后值不会变大。于是 `dp[i]` 「另起炉灶」，此时单独的一个 `nums[i]` 的值，就是 `dp[i]`。\n\n以上两种情况的最大值就是 `dp[i]` 的值，写出如下状态转移方程：\n\n$$\ndp[i] =\n\\begin{cases}\ndp[i - 1] + nums[i], & if \\quad dp[i - 1] > 0 \\\\\nnums[i], & if \\quad dp[i - 1] \\le 0\n\\end{cases}\n$$\n\n记为「状态转移方程 1」。\n\n状态转移方程还可以这样写，反正求的是最大值，也不用分类讨论了，就这两种情况，取最大即可，因此还可以写出状态转移方程如下：\n\n$$\ndp[i] = \\max \\{nums[i],\\; dp[i - 1] + nums[i]\\}\n$$\n\n记为「状态转移方程 2」。\n\n> 友情提示：求解动态规划的问题经常要分类讨论，这是因为动态规划的问题本来就有「最优子结构」的特点，即大问题的最优解通常由小问题的最优解得到。因此我们在设计子问题的时候，就需要把求解出所有子问题的结果，进而选出原问题的最优解。\n\n#### 思考初始值\n`dp[0]` 根据定义，只有 1 个数，一定以 `nums[0]` 结尾，因此 `dp[0] = nums[0]`。\n\n#### 思考输出\n**注意**：\n\n+ 这里状态的定义不是题目中的问题的定义，**不能直接将最后一个状态返回回去**；\n+ 这里状态的定义不是题目中的问题的定义，**不能直接将最后一个状态返回回去**；\n\n+ 这里状态的定义不是题目中的问题的定义，**不能直接将最后一个状态返回回去**。\n\n> 重要的事情说三遍，有时候写东西写得多了，怕读者看不到重点，所以会想方设法进行强调，一句话翻来覆去反复说。我以前和一个在新东方当英语老师的朋友交流过，这样的效果最好。大家可以理解为职业病，我们更多是想要照顾到新手朋友们。大佬要是觉得我讲得啰嗦了，还请忽略。\n>\n> 简单的动态规划问题，很有可能问的问题就可以设计成为子问题，复杂的动态规划问题就没有那么容易看出子问题应该如何设计了，这需要一定的解决问题的经验。\n\n这个问题的输出是把所有的 `dp[0]`、`dp[1]`、……、`dp[n - 1]` 都看一遍，取最大值。 同样的情况也适用于「力扣」第 300 题：「最长上升子序列」（以后我们有空，再把这道题拿出来再讲一遍，超级超级重要的一道动态规划问题）。\n\n#### 可以优化空间吗\n\n根据「状态转移方程」，`dp[i]` 的值只和 `dp[i - 1]` 有关，因此可以使用「滚动变量」的方式将代码进行优化。\n\n以下「参考代码 1」给出了不空间优化的代码，「参考代码 2」给出了空间优化的代码。\n\n**参考代码 1**：\n\n```Java []\npublic class Solution {\n\n    public int maxSubArray(int[] nums) {\n        int len = nums.length;\n        // dp[i] 表示：以 nums[i] 结尾的连续子数组的最大和\n        int[] dp = new int[len];\n        dp[0] = nums[0];\n\n        for (int i = 1; i < len; i++) {\n            if (dp[i - 1] > 0) {\n                dp[i] = dp[i - 1] + nums[i];\n            } else {\n                dp[i] = nums[i];\n            }\n        }\n\n        // 也可以在上面遍历的同时求出 res 的最大值，这里我们为了语义清晰分开写，大家可以自行选择\n        int res = dp[0];\n        for (int i = 1; i < len; i++) {\n            res = Math.max(res, dp[i]);\n        }\n        return res;\n    }\n}\n```\n```Python3 []\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        size = len(nums)\n        if size == 0:\n            return 0\n        dp = [0 for _ in range(size)]\n\n        dp[0] = nums[0]\n        for i in range(1, size):\n            if dp[i - 1] >= 0:\n                dp[i] = dp[i - 1] + nums[i]\n            else:\n                dp[i] = nums[i]\n        return max(dp)\n```\n\n**时间复杂度**：$O(N)$ ，这里 $N$ 是输入数组的长度。\n\n**参考代码 2**：\n\n```Java []\npublic class Solution {\n\n    public int maxSubArray(int[] nums) {\n        int pre = 0;\n        int res = nums[0];\n        for (int num : nums) {\n            pre = Math.max(pre + num, num);\n            res = Math.max(res, pre);\n        }\n        return res;\n    }\n}\n```\n```Python3 []\nfrom typing import List\n\n\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        size = len(nums)\n        pre = 0\n        res = nums[0]\n        for i in range(size):\n            pre = max(nums[i], pre + nums[i])\n            res = max(res, pre)\n        return res\n```\n\n**时间复杂度**：$O(N)$ ，这里 $N$ 是输入数组的长度。\n\n> 这里再多说一点，如果是在 online judge 上写代码，我一般都不会写优化空间的代码，这是因为：\n>\n> 1. 一般的问题只要时间复杂度最优就可以；\n> 2. 空间复杂度 online judge 并不在意，只要使用的空间不太离谱，不要一上来就 `int[] dp = new int[Integer.MAX_VALUE]` 就好；\n> 3. 优化空间的代码会丢失可读性，不好理解和向他人阐述。我自己写出来都困难，一般的流程是：先写一版不优化空间的代码，再写优化空间的代码。但是不优化空间的代码都可以通过系统测评了，我为什么还要写优化空间的代码呢？哈哈哈。\n\n#### 最后再谈谈「无后效性」\n\n「无后效性」是我多次提到的一个「动态规划」中非常重要的概念，在我看来，理解这个概念无比重要。很遗憾，《算法导论》上没有讲到「无后效性」。我找了一本在「豆瓣」目前豆瓣上评分为 9.2 的书 《算法竞赛进阶指南》，这本书和《算法导论》《算法 4》和 liuyubobobo 老师的算法课程一样，在我学习算法与数据结构的道路上，都发挥了巨大的作用。\n\n李煜东著《算法竞赛进阶指南》，摘录如下：：\n\n> 为了保证计算子问题能够按照顺序、不重复地进行，动态规划要求已经求解的子问题不受后续阶段的影响。这个条件也被叫做「无后效性」。换言之，动态规划对状态空间的遍历构成一张有向无环图，遍历就是该有向无环图的一个拓扑序。有向无环图中的节点对应问题中的「状态」，图中的边则对应状态之间的「转移」，转移的选取就是动态规划中的「决策」。\n\n**我的解释**：\n\n+ 「有向无环图」「拓扑序」表示了每一个子问题只求解一次，以后求解问题的过程不会修改以前求解的子问题的结果；\n+ 换句话说：如果之前的阶段求解的子问题的结果包含了一些不确定的信息，导致了后面的阶段求解的子问题无法得到，或者很难得到，这叫「有后效性」，我们在当前这个问题第 1 次拆分的子问题就是「有后效性」的（大家可以再翻到上面再看看）；\n+ 解决「有后效性」的办法是固定住需要分类讨论的地方，记录下更多的结果。在代码层面上表现为：\n  + 状态数组增加维度，例如：「力扣」的股票系列问题；\n  + 把状态定义得更细致、准确，例如：前天推送的第 124 题：状态定义只解决路径来自左右子树的其中一个子树。\n\n## 总结\n\n「动态规划」的解法，我们先告诉大家，理解题意非常重要。其次，我们在做「动态规划」的问题的时候，需要经常思考 **为什么想到需要这样定义状态**。\n\n\n---\n\n### 方法二：分治法\n\n分治法的思路是这样的，其实也是分类讨论。\n\n连续子序列的最大和主要由这三部分子区间里元素的最大和得到：\n\n+ 第 1 部分：子区间 `[left, mid]`；\n+ 第 2 部分：子区间 `[mid + 1, right]`；\n+ 第 3 部分：包含子区间 `[mid , mid + 1]` 的子区间，即 `nums[mid]` 与 `nums[mid + 1]` 一定会被选取。\n\n对这三个部分求最大值即可。\n\n**说明**：考虑第 3 部分跨越两个区间的连续子数组的时候，由于 `nums[mid]` 与 `nums[mid + 1]` 一定会被选取，可以从中间向两边扩散，**扩散到底** 选出最大值，具体请见「参考代码 6」。\n\n![image.png](https://pic.leetcode-cn.com/1621840913-dcvfVD-image.png){:style=\"width:500px\"}{:align=center}\n\n\n\n**参考代码 3**：\n\n\n```Java []\npublic class Solution {\n\n    public int maxSubArray(int[] nums) {\n        int len = nums.length;\n        if (len == 0) {\n            return 0;\n        }\n        return maxSubArraySum(nums, 0, len - 1);\n    }\n\n    private int maxCrossingSum(int[] nums, int left, int mid, int right) {\n        // 一定会包含 nums[mid] 这个元素\n        int sum = 0;\n        int leftSum = Integer.MIN_VALUE;\n        // 左半边包含 nums[mid] 元素，最多可以到什么地方\n        // 走到最边界，看看最值是什么\n        // 计算以 mid 结尾的最大的子数组的和\n        for (int i = mid; i >= left; i--) {\n            sum += nums[i];\n            if (sum > leftSum) {\n                leftSum = sum;\n            }\n        }\n        sum = 0;\n        int rightSum = Integer.MIN_VALUE;\n        // 右半边不包含 nums[mid] 元素，最多可以到什么地方\n        // 计算以 mid+1 开始的最大的子数组的和\n        for (int i = mid + 1; i <= right; i++) {\n            sum += nums[i];\n            if (sum > rightSum) {\n                rightSum = sum;\n            }\n        }\n        return leftSum + rightSum;\n    }\n\n    private int maxSubArraySum(int[] nums, int left, int right) {\n        if (left == right) {\n            return nums[left];\n        }\n        int mid = left + (right - left) / 2;\n        return max3(maxSubArraySum(nums, left, mid),\n                maxSubArraySum(nums, mid + 1, right),\n                maxCrossingSum(nums, left, mid, right));\n    }\n\n    private int max3(int num1, int num2, int num3) {\n        return Math.max(num1, Math.max(num2, num3));\n    }\n}\n```\n```Python3 []\nfrom typing import List\n\n\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        size = len(nums)\n        if size == 0:\n            return 0\n        return self.__max_sub_array(nums, 0, size - 1)\n\n    def __max_sub_array(self, nums, left, right):\n        if left == right:\n            return nums[left]\n        mid = (left + right) >> 1\n        return max(self.__max_sub_array(nums, left, mid),\n                   self.__max_sub_array(nums, mid + 1, right),\n                   self.__max_cross_array(nums, left, mid, right))\n\n    def __max_cross_array(self, nums, left, mid, right):\n        # 一定包含 nums[mid] 元素的最大连续子数组的和，\n        # 思路是看看左边\"扩散到底\"，得到一个最大数，右边\"扩散到底\"得到一个最大数\n        # 然后再加上中间数\n        left_sum_max = 0\n        start_left = mid - 1\n        s1 = 0\n        while start_left >= left:\n            s1 += nums[start_left]\n            left_sum_max = max(left_sum_max, s1)\n            start_left -= 1\n\n        right_sum_max = 0\n        start_right = mid + 1\n        s2 = 0\n        while start_right <= right:\n            s2 += nums[start_right]\n            right_sum_max = max(right_sum_max, s2)\n            start_right += 1\n        return left_sum_max + nums[mid] + right_sum_max\n```\n\n**复杂度分析**：\n\n+ 时间复杂度：$O(N \\log N)$，这里递归的深度是对数级别的，每一层需要遍历一遍数组（或者数组的一半、四分之一）；\n+ 空间复杂度：$O(\\log N)$，需要常数个变量用于选取最大值，需要使用的空间取决于递归栈的深度。这里感谢 [@bu-hui-codingde-xiao-cai-ji](/u/bu-hui-codingde-xiao-cai-ji/) 朋友的提醒。\n\n## 参考资料\n\n+ https://www.ge(去掉中文字和括号，加上干扰只是为了防止被和谐)eksforgeeks.org/maximum-subarray-sum-using-divide-and-conquer-algorithm/"
}