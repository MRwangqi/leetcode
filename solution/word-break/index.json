{
	"titleSlug": "word-break",
	"slug": "dan-ci-chai-fen-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/word-break/solution/dan-ci-chai-fen-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n**思路和算法**\n\n我们定义 $\\textit{dp}[i]$ 表示字符串 $s$ 前 $i$ 个字符组成的字符串 $s[0..i-1]$ 是否能被空格拆分成若干个字典中出现的单词。从前往后计算考虑转移方程，每次转移的时候我们需要枚举包含位置 $i-1$ 的最后一个单词，看它是否出现在字典中以及除去这部分的字符串是否合法即可。公式化来说，我们需要枚举 $s[0..i-1]$ 中的分割点 $j$ ，看 $s[0..j-1]$ 组成的字符串 $s_1$（**默认 $j = 0$ 时 $s_1$ 为空串**）和 $s[j..i-1]$ 组成的字符串 $s_2$ 是否都合法，如果两个字符串均合法，那么按照定义 $s_1$ 和 $s_2$ 拼接成的字符串也同样合法。由于计算到 $\\textit{dp}[i]$ 时我们已经计算出了 $\\textit{dp}[0..i-1]$ 的值，因此字符串 $s_1$ 是否合法可以直接由 $dp[j]$ 得知，剩下的我们只需要看 $s_2$ 是否合法即可，因此我们可以得出如下转移方程：  \n$$\n\\textit{dp}[i]=\\textit{dp}[j]\\ \\&\\&\\ \\textit{check}(s[j..i-1])\n$$\n其中 $\\textit{check}(s[j..i-1])$ 表示子串 $s[j..i-1]$ 是否出现在字典中。\n\n对于检查一个字符串是否出现在给定的字符串列表里一般可以考虑哈希表来快速判断，同时也可以做一些简单的剪枝，枚举分割点的时候倒着枚举，如果分割点 $j$ 到 $i$ 的长度已经大于字典列表里最长的单词的长度，那么就结束枚举，但是需要注意的是下面的代码给出的是不带剪枝的写法。\n\n对于边界条件，我们定义 $\\textit{dp}[0]=true$ 表示空串且合法。\n\n有能力的读者也可以考虑怎么结合字典树 $\\text{Trie}$ 来实现，这里不再展开。\n\n```Java [sol1-Java]\npublic class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        Set<String> wordDictSet = new HashSet(wordDict);\n        boolean[] dp = new boolean[s.length() + 1];\n        dp[0] = true;\n        for (int i = 1; i <= s.length(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (dp[j] && wordDictSet.contains(s.substring(j, i))) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        return dp[s.length()];\n    }\n}\n```\n\n```TypeScript [sol1-TypeScript]\nfunction wordBreak(s: string, wordDict: string[]): boolean {\n    const n: number = s.length;\n    const wordDictSet: Set<string> = new Set(wordDict);\n    const dp: Array<boolean> = new Array(n + 1).fill(false);\n    dp[0] = true;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (dp[j] && wordDictSet.has(s.substr(j, i - j))) {\n                dp[i] = true;\n                break;\n            }\n        }\n    }\n    return dp[n];\n};\n```\n\n```golang [sol1-Golang]\nfunc wordBreak(s string, wordDict []string) bool {\n    wordDictSet := make(map[string]bool)\n    for _, w := range wordDict {\n        wordDictSet[w] = true\n    }\n    dp := make([]bool, len(s) + 1)\n    dp[0] = true\n    for i := 1; i <= len(s); i++ {\n        for j := 0; j < i; j++ {\n            if dp[j] && wordDictSet[s[j:i]] {\n                dp[i] = true\n                break\n            }\n        }\n    }\n    return dp[len(s)]\n}\n```\n\n```C [sol1-C]\nunsigned long long Hash(char* s, int l, int r) {\n    unsigned long long value = 0;\n    for (int i = l; i < r; i++) {\n        value = value * 2333ull;\n        value += s[i] - 'a' + 1;\n    }\n    return value;\n}\nbool query(unsigned long long* rec, int len_rec, unsigned long long x) {\n    for (int i = 0; i < len_rec; i++) {\n        if (rec[i] == x) return true;\n    }\n    return false;\n}\nbool wordBreak(char* s, char** wordDict, int wordDictSize) {\n    unsigned long long rec[wordDictSize + 1];\n    for (int i = 0; i < wordDictSize; i++) {\n        rec[i] = Hash(wordDict[i], 0, strlen(wordDict[i]));\n    }\n    int len_s = strlen(s);\n    bool dp[len_s + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = true;\n    for (int i = 1; i <= len_s; i++) {\n        for (int j = 0; j < i; j++) {\n            if (dp[j] && query(rec, wordDictSize, Hash(s, j, i))) {\n                dp[i] = true;\n                break;\n            }\n        }\n    }\n    return dp[len_s];\n}\n```\n\n```csharp [sol1-C#]\npublic class Solution {\n    public bool WordBreak(string s, IList<string> wordDict) {\n        var wordDictSet = new HashSet<string>(wordDict);\n\n        var dp = new bool [s.Length + 1];\n        dp[0] = true;\n        for (int i = 1; i <= s.Length; ++i) \n        {\n            for (int j = 0; j < i; ++j) \n            {\n                if (dp[j] && wordDictSet.Contains(s.Substring(j, i - j))) \n                {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n\n        return dp[s.Length];\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        auto wordDictSet = unordered_set <string> ();\n        for (auto word: wordDict) {\n            wordDictSet.insert(word);\n        }\n\n        auto dp = vector <bool> (s.size() + 1);\n        dp[0] = true;\n        for (int i = 1; i <= s.size(); ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (dp[j] && wordDictSet.find(s.substr(j, i - j)) != wordDictSet.end()) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n\n        return dp[s.size()];\n    }\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n^2)$ ，其中 $n$ 为字符串 $s$ 的长度。我们一共有 $O(n)$ 个状态需要计算，每次计算需要枚举 $O(n)$ 个分割点，哈希表判断一个字符串是否出现在给定的字符串列表需要 $O(1)$ 的时间，因此总时间复杂度为 $O(n^2)$。\n\n* 空间复杂度：$O(n)$ ，其中 $n$ 为字符串 $s$ 的长度。我们需要 $O(n)$ 的空间存放 $\\textit{dp}$ 值以及哈希表亦需要 $O(n)$ 的空间复杂度，因此总空间复杂度为 $O(n)$。"
}