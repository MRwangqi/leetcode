{
	"titleSlug": "coin-change-ii",
	"slug": "ling-qian-dui-huan-ii-by-leetcode-soluti-f7uh",
	"url": "https://leetcode-cn.com/problems/coin-change-ii/solution/ling-qian-dui-huan-ii-by-leetcode-soluti-f7uh/",
	"content": "#### 方法一：动态规划\n\n这道题中，给定总金额 $\\textit{amount}$ 和数组 $\\textit{coins}$，要求计算金额之和等于 $\\textit{amount}$ 的硬币组合数。其中，$\\textit{coins}$ 的每个元素可以选取多次，且不考虑选取元素的顺序，因此这道题需要计算的是选取硬币的**组合**数。\n\n可以通过动态规划的方法计算可能的组合数。用 $\\textit{dp}[x]$ 表示金额之和等于 $x$ 的硬币组合数，目标是求 $\\textit{dp}[\\textit{amount}]$。\n\n动态规划的边界是 $\\textit{dp}[0]=1$。只有当不选取任何硬币时，金额之和才为 $0$，因此只有 $1$ 种硬币组合。\n\n对于面额为 $\\textit{coin}$ 的硬币，当 $\\textit{coin} \\le i \\le \\textit{amount}$ 时，如果存在一种硬币组合的金额之和等于 $i - \\textit{coin}$，则在该硬币组合中增加一个面额为 $\\textit{coin}$ 的硬币，即可得到一种金额之和等于 $i$ 的硬币组合。因此需要遍历 $\\textit{coins}$，对于其中的每一种面额的硬币，更新数组 $\\textit{dp}$ 中的每个大于或等于该面额的元素的值。\n\n由此可以得到动态规划的做法：\n\n- 初始化 $\\textit{dp}[0]=1$；\n\n- 遍历 $\\textit{coins}$，对于其中的每个元素 $\\textit{coin}$，进行如下操作：\n\n   - 遍历 $i$ 从 $\\textit{coin}$ 到 $\\textit{amount}$，将 $\\textit{dp}[i - \\textit{coin}]$ 的值加到 $\\textit{dp}[i]$。\n\n- 最终得到 $\\textit{dp}[\\textit{amount}]$ 的值即为答案。\n\n上述做法不会重复计算不同的排列。因为外层循环是遍历数组 $\\textit{coins}$ 的值，内层循环是遍历不同的金额之和，在计算 $\\textit{dp}[i]$ 的值时，可以确保金额之和等于 $i$ 的硬币面额的顺序，由于顺序确定，因此不会重复计算不同的排列。\n\n例如，$\\textit{coins}=[1,2]$，对于 $\\textit{dp}[3]$ 的计算，一定是先遍历硬币面额 $1$ 后遍历硬币面额 $2$，只会出现以下 $2$ 种组合：\n\n$$\n\\begin{aligned}\n3 &= 1+1+1 \\\\\n3 &= 1+2\n\\end{aligned}\n$$\n\n硬币面额 $2$ 不可能出现在硬币面额 $1$ 之前，即不会重复计算 $3=2+1$ 的情况。\n\n```Java [sol1-Java]\nclass Solution {\n    public int change(int amount, int[] coins) {\n        int[] dp = new int[amount + 1];\n        dp[0] = 1;\n        for (int coin : coins) {\n            for (int i = coin; i <= amount; i++) {\n                dp[i] += dp[i - coin];\n            }\n        }\n        return dp[amount];\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int Change(int amount, int[] coins) {\n        int[] dp = new int[amount + 1];\n        dp[0] = 1;\n        foreach (int coin in coins) {\n            for (int i = coin; i <= amount; i++) {\n                dp[i] += dp[i - coin];\n            }\n        }\n        return dp[amount];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar change = function(amount, coins) {\n    const dp = new Array(amount + 1).fill(0);\n    dp[0] = 1;\n    for (const coin of coins) {\n        for (let i = coin; i <= amount; i++) {\n            dp[i] += dp[i - coin];\n        }\n    }\n    return dp[amount];\n};\n```\n\n```go [sol1-Golang]\nfunc change(amount int, coins []int) int {\n    dp := make([]int, amount+1)\n    dp[0] = 1\n    for _, coin := range coins {\n        for i := coin; i <= amount; i++ {\n            dp[i] += dp[i-coin]\n        }\n    }\n    return dp[amount]\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int change(int amount, vector<int>& coins) {\n        vector<int> dp(amount + 1);\n        dp[0] = 1;\n        for (int& coin : coins) {\n            for (int i = coin; i <= amount; i++) {\n                dp[i] += dp[i - coin];\n            }\n        }\n        return dp[amount];\n    }\n};\n```\n\n```C [sol1-C]\nint change(int amount, int* coins, int coinsSize) {\n    int dp[amount + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0] = 1;\n    for (int i = 0; i < coinsSize; i++) {\n        for (int j = coins[i]; j <= amount; j++) {\n            dp[j] += dp[j - coins[i]];\n        }\n    }\n    return dp[amount];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\textit{amount} \\times n)$，其中 $\\textit{amount}$ 是总金额，$n$ 是数组 $\\textit{coins}$ 的长度。需要使用数组 $\\textit{coins}$ 中的每个元素遍历并更新数组 $\\textit{dp}$ 中的每个元素的值。\n\n- 空间复杂度：$O(\\textit{amount})$，其中 $\\textit{amount}$ 是总金额。需要创建长度为 $\\textit{amount}+1$ 的数组 $\\textit{dp}$。"
}