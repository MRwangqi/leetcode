{
	"titleSlug": "compress-string-lcci",
	"slug": "zi-fu-chuan-ya-suo-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/compress-string-lcci/solution/zi-fu-chuan-ya-suo-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n![01.06.字符串压缩.mp4](3aebab5a-3853-4276-9f3b-1fdbbd48f96d)\n\n### 📖 文字题解\n\n#### 方法一：模拟\n\n**思路**\n\n字符串压缩的方式就是将连续出现的相同字符按照 `字符 + 出现次数` 压缩。如果压缩后的字符串长度变短，则返回压缩后的字符串，否则保留原来的字符串，所以我们模拟这个过程构建字符串即可。\n\n**算法**\n\n我们从左往右遍历字符串，用 $ch$ 记录当前要压缩的字符，$\\textit{cnt}$ 记录 $ch$ 出现的次数，如果当前枚举到的字符 $s[i]$ 等于 $ch$ ，我们就更新 $\\textit{cnt}$ 的计数，即 `cnt = cnt + 1`，否则我们按题目要求将 $ch$ 以及 $\\textit{cnt}$ 更新到答案字符串 $\\textit{ans}$ 里，即 `ans = ans + ch + cnt`，完成对 $ch$ 字符的压缩。随后更新 $ch$ 为 $s[i]$，$cnt$ 为 $1$，表示将压缩的字符更改为 $s[i]$。\n\n在遍历结束之后，我们就得到了压缩后的字符串 $\\textit{ans}$，并将其长度与原串长度进行比较。如果长度没有变短，则返回原串，否则返回压缩后的字符串。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string compressString(string S) {\n        if ((int)S.length() == 0) return S; // 空串处理\n        string ans = \"\";\n        int cnt = 1;\n        char ch = S[0];\n        for (int i = 1; i < (int)S.length(); ++i){\n            if (ch == S[i]) cnt++;\n            else{\n                ans += ch + to_string(cnt); // 注意 cnt 要转为字符串\n                ch = S[i];\n                cnt = 1;\n            }\n        }\n        ans += ch + to_string(cnt);\n        return ans.length() >= S.length() ? S : ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String compressString(String S) {\n        if (S.length() == 0) { // 空串处理\n            return S;\n        }\n        StringBuffer ans = new StringBuffer();\n        int cnt = 1;\n        char ch = S.charAt(0);\n        for (int i = 1; i < S.length(); ++i) {\n            if (ch == S.charAt(i)) {\n                cnt++;\n            } else {\n                ans.append(ch);\n                ans.append(cnt);\n                ch = S.charAt(i);\n                cnt = 1;\n            }\n        }\n        ans.append(ch);\n        ans.append(cnt);\n        return ans.length() >= S.length() ? S : ans.toString();\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def compressString(self, S: str) -> str:\n        if not S:\n            return \"\"\n        ch = S[0]\n        ans = ''\n        cnt = 0\n        for c in S:\n            if c == ch:\n                cnt += 1\n            else:\n                ans += ch + str(cnt)\n                ch = c\n                cnt = 1\n        ans += ch + str(cnt)\n        return ans if len(ans) < len(S) else S\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为字符串的长度，即遍历一次字符串的复杂度。\n\n- 空间复杂度：$O(1)$，只需要常数空间（不包括存储答案 $\\textit{ans}$ 的空间）存储变量。"
}