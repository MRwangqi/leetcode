{
	"titleSlug": "shuffle-an-array",
	"slug": "da-luan-shu-zu-by-leetcode-solution-og5u",
	"url": "https://leetcode-cn.com/problems/shuffle-an-array/solution/da-luan-shu-zu-by-leetcode-solution-og5u/",
	"content": "#### 方法一：暴力\n\n**思路**\n\n首先，我们考虑如何随机打乱一个数组。\n\n不妨设数组 $\\textit{nums}$，其长度为 $n$。我们可以使用如下方法打乱：\n\n* 将数组中所有的数都放到数据结构 $\\textit{waiting}$ 中，并初始化打乱后的数组 $\\textit{shuffle}$；\n* 循环 $n$ 次，在第 $i$ 次循环中（$0 \\le i < n$）：\n  * 在 $\\textit{waiting}$ 中随机抽取一个数 $\\textit{num}$，将其作为打乱后的数组 $\\textit{shuffle}$ 的第 $i$ 个元素；\n  * 从 $\\textit{waiting}$ 中移除 $\\textit{num}$。\n\n对于原数组 $\\textit{nums}$ 中的数 $\\textit{num}$ 来说，被移动到打乱后的数组的第 $i$ 个位置的概率为：\n\n$$\nP(i) = \n\\begin{cases}\n (\\frac{n-1}{n} \\times \\frac{n-2}{n-1} \\cdots \\times \\frac{n-i}{n-i+1}) \\times \\frac{1}{n-i} = \\frac{1}{n}, \\hspace{1em} i > 0 \\\\\n \\frac{1}{n}, \\hspace{1em} i = 0\n\\end{cases}\n$$\n\n因此，对于原数组 $\\textit{nums}$ 中的任意一个数，被移动到打乱后的数组的任意一个位置的概率都是相同的。\n\n**算法**\n\n在算法的实现中，我们考虑以下两个问题：\n\n- 如何实现重设数组到它的初始状态？\n\n  我们使用 $\\textit{nums}$ 来存储当前数组，并用 $\\textit{original}$ 来存储数组的初始状态。在需要重设数组到它的初始状态时，只需要将 $\\textit{original}$ 复制到 $\\textit{nums}$ 并返回即可。\n\n- 如何实现 $\\textit{waiting}$？\n\n  我们要求 $\\textit{waiting}$ 既支持根据随机计算的下标获取元素，又支持根据该下标移除元素。在方法一中，我们使用数组来实现 $\\textit{waiting}$。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        self.original = nums.copy()\n\n    def reset(self) -> List[int]:\n        self.nums = self.original.copy()\n        return self.nums\n\n    def shuffle(self) -> List[int]:\n        shuffled = [0] * len(self.nums)\n        for i in range(len(self.nums)):\n            j = random.randrange(len(self.nums))\n            shuffled[i] = self.nums.pop(j)\n        self.nums = shuffled\n        return self.nums\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int[] nums;\n    int[] original;\n\n    public Solution(int[] nums) {\n        this.nums = nums;\n        this.original = new int[nums.length];\n        System.arraycopy(nums, 0, original, 0, nums.length);\n    }\n    \n    public int[] reset() {\n        System.arraycopy(original, 0, nums, 0, nums.length);\n        return nums;\n    }\n    \n    public int[] shuffle() {\n        int[] shuffled = new int[nums.length];\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < nums.length; ++i) {\n            list.add(nums[i]);\n        }\n        Random random = new Random();\n        for (int i = 0; i < nums.length; ++i) {\n            int j = random.nextInt(list.size());\n            shuffled[i] = list.remove(j);\n        }\n        System.arraycopy(shuffled, 0, nums, 0, nums.length);\n        return nums;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    int[] nums;\n    int[] original;\n\n    public Solution(int[] nums) {\n        this.nums = nums;\n        this.original = new int[nums.Length];\n        Array.Copy(nums, original, nums.Length);\n    }\n    \n    public int[] Reset() {\n        Array.Copy(original, nums, nums.Length);\n        return nums;\n    }\n    \n    public int[] Shuffle() {\n        int[] shuffled = new int[nums.Length];\n        IList<int> list = new List<int>();\n        for (int i = 0; i < nums.Length; ++i) {\n            list.Add(nums[i]);\n        }\n        Random random = new Random();\n        for (int i = 0; i < nums.Length; ++i) {\n            int j = random.Next(list.Count);\n            shuffled[i] = list[j];\n            list.Remove(list[j]);\n        }\n        Array.Copy(shuffled, nums, nums.Length);\n        return nums;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    Solution(vector<int>& nums) {\n        this->nums = nums;\n        this->original.resize(nums.size());\n        copy(nums.begin(), nums.end(), original.begin());\n    }\n    \n    vector<int> reset() {\n        copy(original.begin(), original.end(), nums.begin());\n        return nums;\n    }\n    \n    vector<int> shuffle() {\n        vector<int> shuffled = vector<int>(nums.size());\n        list<int> lst(nums.begin(), nums.end());\n      \n        for (int i = 0; i < nums.size(); ++i) {\n            int j = rand()%(lst.size());\n            auto it = lst.begin();\n            advance(it, j);\n            shuffled[i] = *it;\n            lst.erase(it);\n        }\n        copy(shuffled.begin(), shuffled.end(), nums.begin());\n        return nums;\n    }\nprivate:\n    vector<int> nums;\n    vector<int> original;\n};\n```\n\n```go [sol1-Golang]\ntype Solution struct {\n    nums, original []int\n}\n\nfunc Constructor(nums []int) Solution {\n    return Solution{nums, append([]int(nil), nums...)}\n}\n\nfunc (s *Solution) Reset() []int {\n    copy(s.nums, s.original)\n    return s.nums\n}\n\nfunc (s *Solution) Shuffle() []int {\n    shuffled := make([]int, len(s.nums))\n    for i := range shuffled {\n        j := rand.Intn(len(s.nums))\n        shuffled[i] = s.nums[j]\n        s.nums = append(s.nums[:j], s.nums[j+1:]...)\n    }\n    s.nums = shuffled\n    return s.nums\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar Solution = function(nums) {\n    this.nums = nums;\n    this.original = nums.slice();\n\n};\n\nSolution.prototype.reset = function() {\n    this.nums = this.original.slice();\n    return this.nums;\n};\n\nSolution.prototype.shuffle = function() {\n    const shuffled = new Array(this.nums.length).fill(0);\n    const list = [];\n    this.nums.forEach((num) => list.push(num));\n    for (let i = 0; i < this.nums.length; ++i) {\n        const j = Math.random() * list.length;\n        shuffled[i] = list.splice(j, 1);\n    }\n    this.nums = shuffled.slice();\n    return this.nums;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：\n  - 初始化：$O(n)$，其中 $n$ 为数组中的元素数量。我们需要 $O(n)$ 来初始化 $\\textit{original}$。\n  - $\\texttt{reset}$：$O(n)$。我们需要 $O(n)$ 将 $\\textit{original}$ 复制到 $\\textit{nums}$。\n  - $\\texttt{shuffle}$：$O(n^2)$。我们需要遍历 $n$ 个元素，每个元素需要 $O(n-k)$ 的时间从 $\\textit{nums}$ 中移除第 $k$ 个元素。\n- 空间复杂度：$O(n)$。记录初始状态和临时的乱序数组均需要存储 $n$ 个元素。\n\n#### 方法二：Fisher-Yates 洗牌算法\n\n**思路和算法**\n\n考虑通过调整 $\\textit{waiting}$ 的实现方式以优化方法一。\n\n我们可以在移除 $\\textit{waiting}$ 的第 $k$ 个元素时，将第 $k$ 个元素与数组的最后 $1$ 个元素交换，然后移除交换后数组的最后 $1$ 个元素，这样我们只需要 $O(1)$ 的时间复杂度即可完成移除第 $k$ 个元素的操作。此时，被移除的交换后数组的最后 $1$ 个元素即为我们根据随机下标获取的元素。\n\n在此基础上，我们也可以不移除最后 $1$ 个元素，而直接将其作为乱序后的结果，并更新待乱序数组的长度，从而实现数组的原地乱序。因为我们不再需要从数组中移除元素，所以也可以将第 $k$ 个元素与第 $1$ 个元素交换。\n\n具体地，实现算法如下：\n\n- 设待原地乱序的数组 $\\textit{nums}$。\n- 循环 $n$ 次，在第 $i$ 次循环中（$0 \\le i < n$）：\n  - 在 $[i,n)$ 中随机抽取一个下标 $j$；\n  - 将第 $i$ 个元素与第 $j$ 个元素交换。\n\n其中数组中的 $\\textit{nums}[i \\ .. \\ n-1]$ 的部分为待乱序的数组，其长度为 $n-i$；$\\textit{nums}[0 \\ .. \\ i-1]$ 的部分为乱序后的数组，其长度为 $i$。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        self.original = nums.copy()\n\n    def reset(self) -> List[int]:\n        self.nums = self.original.copy()\n        return self.nums\n\n    def shuffle(self) -> List[int]:\n        for i in range(len(self.nums)):\n            j = random.randrange(i, len(self.nums))\n            self.nums[i], self.nums[j] = self.nums[j], self.nums[i]\n        return self.nums\n```\n\n```Java [sol2-Java]\nclass Solution {\n    int[] nums;\n    int[] original;\n\n    public Solution(int[] nums) {\n        this.nums = nums;\n        this.original = new int[nums.length];\n        System.arraycopy(nums, 0, original, 0, nums.length);\n    }\n    \n    public int[] reset() {\n        System.arraycopy(original, 0, nums, 0, nums.length);\n        return nums;\n    }\n    \n    public int[] shuffle() {\n        Random random = new Random();\n        for (int i = 0; i < nums.length; ++i) {\n            int j = i + random.nextInt(nums.length - i);\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n        }\n        return nums;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    int[] nums;\n    int[] original;\n\n    public Solution(int[] nums) {\n        this.nums = nums;\n        this.original = new int[nums.Length];\n        Array.Copy(nums, original, nums.Length);\n    }\n    \n    public int[] Reset() {\n        Array.Copy(original, nums, nums.Length);\n        return nums;\n    }\n    \n    public int[] Shuffle() {\n        Random random = new Random();\n        for (int i = 0; i < nums.Length; ++i) {\n            int j = random.Next(i, nums.Length);\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n        }\n        return nums;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    Solution(vector<int>& nums) {\n        this->nums = nums;\n        this->original.resize(nums.size());\n        copy(nums.begin(), nums.end(), original.begin());\n    }\n    \n    vector<int> reset() {\n        copy(original.begin(), original.end(), nums.begin());\n        return nums;\n    }\n    \n    vector<int> shuffle() {\n        for (int i = 0; i < nums.size(); ++i) {\n            int j = i + rand() % (nums.size() - i);\n            swap(nums[i], nums[j]);\n        }\n        return nums;\n    }\nprivate:\n    vector<int> nums;\n    vector<int> original;\n};\n```\n\n```go [sol2-Golang]\ntype Solution struct {\n    nums, original []int\n}\n\nfunc Constructor(nums []int) Solution {\n    return Solution{nums, append([]int(nil), nums...)}\n}\n\nfunc (s *Solution) Reset() []int {\n    copy(s.nums, s.original)\n    return s.nums\n}\n\nfunc (s *Solution) Shuffle() []int {\n    n := len(s.nums)\n    for i := range s.nums {\n        j := i + rand.Intn(n-i)\n        s.nums[i], s.nums[j] = s.nums[j], s.nums[i]\n    }\n    return s.nums\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar Solution = function(nums) {\n    this.nums = nums;\n    this.original = this.nums.slice();\n};\n\nSolution.prototype.reset = function() {\n    this.nums = this.original.slice();\n    return this.nums;\n};\n\nSolution.prototype.shuffle = function() {\n    for (let i = 0; i < this.nums.length; ++i) {\n        const j = Math.floor(Math.random() * (this.nums.length - i)) + i;\n        const temp = this.nums[i];\n        this.nums[i] = this.nums[j];\n        this.nums[j] = temp;\n    }\n    return this.nums;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：\n  - 初始化：$O(n)$，其中 $n$ 为数组中的元素数量。我们需要 $O(n)$ 来初始化 $\\textit{original}$。\n  - $\\texttt{reset}$：$O(n)$。我们需要 $O(n)$ 将 $\\textit{original}$ 复制到 $\\textit{nums}$。\n  - $\\texttt{shuffle}$：$O(n)$。我们只需要遍历 $n$ 个元素即可打乱数组。\n\n- 空间复杂度：$O(n)$。记录初始状态需要存储 $n$ 个元素。"
}