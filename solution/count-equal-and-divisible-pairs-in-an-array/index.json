{
	"titleSlug": "count-equal-and-divisible-pairs-in-an-array",
	"slug": "tong-ji-shu-zu-zhong-xiang-deng-qie-ke-y-tc4p",
	"url": "https://leetcode-cn.com/problems/count-equal-and-divisible-pairs-in-an-array/solution/tong-ji-shu-zu-zhong-xiang-deng-qie-ke-y-tc4p/",
	"content": "#### 方法一：遍历数对\n\n**思路与算法**\n\n我们用 $n$ 表示数组 $\\textit{nums}$ 的长度。为了统计符合要求数对数量，我们可以使用两层循环遍历所有满足 $0 \\le i < j < n$ 的数对 $(i, j)$，并逐个检查 $i \\times j \\bmod k$ 是否等于 $0$，且 $\\textit{nums}[i]$ 是否等于 $\\textit{nums}[j]$。\n\n与此同时，我们用 $\\textit{res}$ 统计符合要求的数对数量，如果某个数对 $(i, j)$ 符合要求，则我们将 $\\textit{res}$ 加上 $1$。最终，我们返回 $\\textit{res}$ 作为符合要求的数对个数。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countPairs(vector<int>& nums, int k) {\n        int n = nums.size();\n        int res = 0;   // 符合要求数对个数\n        for (int i = 0; i < n - 1; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if ((i * j) % k == 0 && nums[i] == nums[j]) {\n                    ++res;\n                }\n            }\n        }\n        return res;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        res = 0   # 符合要求数对个数\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if (i * j) % k == 0 and nums[i] == nums[j]:\n                    res += 1\n        return res\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 为 $\\textit{nums}$ 数组的长度。即为遍历数对并统计符合要求个数的时间复杂度。\n\n- 空间复杂度：$O(1)$。"
}