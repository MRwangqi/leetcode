{
	"titleSlug": "sort-items-by-groups-respecting-dependencies",
	"slug": "1203-xiang-mu-guan-li-by-leetcode-t63b",
	"url": "https://leetcode-cn.com/problems/sort-items-by-groups-respecting-dependencies/solution/1203-xiang-mu-guan-li-by-leetcode-t63b/",
	"content": "### 📺 视频讲解 \n\n**视频时间线**：\n\n+ 解读题意：00:10\n+ 拓扑排序简介：03:36\n+ 示例 1 分析：07:50\n+ **编码前的思路分析**：09:59\n+ 参考代码：12:18\n+ 复杂度分析、练习：21:22\n\n**力扣君温馨小贴士**：\n\n+ 觉得视频时间长的扣友，可以在视频右下角的「设置」按钮处选择 1.5 倍速或者 2 倍速观看；\n+ 如果已经充分了解了题意，对「拓扑排序」这个知识点已经非常熟悉的朋友，可以直接观看「编码前的思路分析」（09:59 开始）。\n\n![1203 项目管理.mp4](612f4ca0-a345-4731-9b0b-0233c58da69f)\n\n### 📖 文字解析\n\n这个问题标注为「困难」，但是解决这个问题用到的知识点其实大家都见过。要点和提示如下：\n\n1. 从问题的描述（任务计划安排）和结果要求（有可能不存在，如果有，可能不唯一），可以看出思路是「拓扑排序」；\n2. **读懂题目的意思，这一点非常重要**，弄清楚输入的每一个变量的含义，弄清楚什么叫「无人接手」以及 `group[i] = - 1` 的含义；\n3. 安排任务的第一优先级：组（`group`）相同的项目必须排在一起，第二优先级：项目（`item`）的先后顺序满足拓扑序；\n4. **关键 1**：题目给出的 `item` 和 `beforItem` 可以得到 `item` 须要满足的先后顺序。而每一个 `item` 或者对应一个 `group`，或者不属于任何一个给定的 `group`，**根据 `item` 和 `group` 的函数关系（从 `item` 可以得到唯一的 `group` 编号）：可以得到安排组（`group`）的先后顺序（这一点很关键）**；\n5. **关键 2**：分别对 `group` 和 `item` 执行拓扑排序，从 `item -> group` 的（多对一关系）反向得到 `group -> item` 的一对多关系，由于 `item` 按照拓扑序排列，建立 `group` 到 `item` 的一对多关系以后，每一个 `group` 对应的 `item` 列表是符合拓扑序的；\n6. 从 `group` 的拓扑序，和 `group` 到 `item` 的一对多关系，得到的 `item` 列表就是满足题目意思的一个结果。\n\n---\n\n下面是详解。\n\n### 方法：拓扑排序\n\n#### 1. 如何得到组 `group` 的先后关系\n\n+ 如果不考虑「同一小组的项目，排序后在列表中彼此相邻」。根据 `beforeItems` 可以得到项目 `item` 的拓扑排序结果；\n+ 由数组 `group` 可以得到项目 `item` 对应的组的编号。\n\n由以上两点，可以得到 **组 `group` 的先后关系**。\n\n以示例 1 为例：\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/22/1359_ex1.png)\n\n表格第 2 行（不计算表头）：项目 `6` （组号 `0`）必需在项目 `1` （不属于任何组，暂时记组号为 `2`）的前面，可以得出：组号为 `0` 的所有项目应该位于组号为 `2` 的所有项目的前面。\n\n有可能出现这种情况：前驱项目和当前项目分在一组，这样的数据需要舍弃，例如第 5 行。项目 `3` 、项目 `6` 必需被安排在项目 `4` 的前面，但是它们的组号都为 `0`。\n\n#### 2. 如何让相同组号的项目在一起\n\n由上一步的结果得到「组的先后关系」，进而得到组 **`group` 的拓扑排序结果**。而 **同组的项目也必须满足先后顺序**，因此必需对项目 `item` 也执行一次拓扑排序。\n\n按照项目 `item` 的拓扑排序结果，**依次** 把它们映射到对应的组 `group` 里，这一步需要建立一个映射关系：key 是组编号，value 是同一组的项目按照拓扑排序的结果。\n\n再根据组 `group` 的拓扑排序的结果，以及上一步建立的映射关系，把 `group` 映射到 `item` 列表，就得到了题目要求的 ① 同组项目放在一起 ② 且项目之间还满足拓扑序的拓扑排序结果。\n\n#### 3. 细节：为什么须要给 `group[i] = -1` 的项目赋值为一个新的组号？\n\n根据题意，`group[i] = -1` 表示编号为 `i` 的项目，不属于编号为 `0` 到 `m - 1` 的这 `m` 个组，换句话说，完成这些项目不需要协同合作。\n\n又因为我们需要根据「组」的先后顺序得到「组的拓扑排序的结果」。**为了避免我们设计的算法认为 `group[i] = -1` 的这些项目都在同一组**，因此给 `group[i] = -1` 的这些组一个不同于 `0` 到 `m - 1` 的编号，从 `m` 开始逐个给每个项目编号即可。  \n\n**参考代码**：\n\n```Java []\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Queue;\n\npublic class Solution {\n\n    public int[] sortItems(int n, int m, int[] group, List<List<Integer>> beforeItems) {\n        // 第 1 步：数据预处理，给没有归属于一个组的项目编上组号\n        for (int i = 0; i < group.length; i++) {\n            if (group[i] == -1) {\n                group[i] = m;\n                m++;\n            }\n        }\n\n        // 第 2 步：实例化组和项目的邻接表\n        List<Integer>[] groupAdj = new ArrayList[m];\n        List<Integer>[] itemAdj = new ArrayList[n];\n        for (int i = 0; i < m; i++) {\n            groupAdj[i] = new ArrayList<>();\n        }\n        for (int i = 0; i < n; i++) {\n            itemAdj[i] = new ArrayList<>();\n        }\n\n        // 第 3 步：建图和统计入度数组\n        int[] groupsIndegree = new int[m];\n        int[] itemsIndegree = new int[n];\n\n        int len = group.length;\n        for (int i = 0; i < len; i++) {\n            int currentGroup = group[i];\n            for (int beforeItem : beforeItems.get(i)) {\n                int beforeGroup = group[beforeItem];\n                if (beforeGroup != currentGroup) {\n                    groupAdj[beforeGroup].add(currentGroup);\n                    groupsIndegree[currentGroup]++;\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (Integer item : beforeItems.get(i)) {\n                itemAdj[item].add(i);\n                itemsIndegree[i]++;\n            }\n        }\n\n        // 第 4 步：得到组和项目的拓扑排序结果\n        List<Integer> groupsList = topologicalSort(groupAdj, groupsIndegree, m);\n        if (groupsList.size() == 0) {\n            return new int[0];\n        }\n        List<Integer> itemsList = topologicalSort(itemAdj, itemsIndegree, n);\n        if (itemsList.size() == 0) {\n            return new int[0];\n        }\n\n        // 第 5 步：根据项目的拓扑排序结果，项目到组的多对一关系，建立组到项目的一对多关系\n        // key：组，value：在同一组的项目列表\n        Map<Integer, List<Integer>> groups2Items = new HashMap<>();\n        for (Integer item : itemsList) {\n            groups2Items.computeIfAbsent(group[item], key -> new ArrayList<>()).add(item);\n        }\n\n        // 第 6 步：把组的拓扑排序结果替换成为项目的拓扑排序结果\n        List<Integer> res = new ArrayList<>();\n        for (Integer groupId : groupsList) {\n            List<Integer> items = groups2Items.getOrDefault(groupId, new ArrayList<>());\n            res.addAll(items);\n        }\n        return res.stream().mapToInt(Integer::valueOf).toArray();\n    }\n\n    private List<Integer> topologicalSort(List<Integer>[] adj, int[] inDegree, int n) {\n        List<Integer> res = new ArrayList<>();\n        Queue<Integer> queue = new LinkedList<>();\n        for (int i = 0; i < n; i++) {\n            if (inDegree[i] == 0) {\n                queue.offer(i);\n            }\n        }\n\n        while (!queue.isEmpty()) {\n            Integer front = queue.poll();\n            res.add(front);\n            for (int successor : adj[front]) {\n                inDegree[successor]--;\n                if (inDegree[successor] == 0) {\n                    queue.offer(successor);\n                }\n            }\n        }\n\n        if (res.size() == n) {\n            return res;\n        }\n        return new ArrayList<>();\n    }\n}\n```\n\n\n**复杂度分析**：\n\n**说明**：这里为了表达严谨，时间复杂度和空间复杂度的描述比较理论化。大家未必须要深究。就当前这个问题而言，拓扑排序就是就是在图中进行一次广度优先遍历，时间复杂度为图的顶点数加边数，假设当前问题的图结构的顶点数为 $V$、边数为 $E$，可以简记时间复杂度为 $O(V + E)$。\n\n\n+ 时间复杂度：$O(m + n^2 + E_{group} + E_{item} )$，这里 $n$ 是项目的总数，$m$ 是组的总数（把标记为 $-1$ 的组预处理以后，新的组的总数不会超过 $2m$）；\n  + 对组的数据进行预处理 $O(m)$；\n  + 构建组的邻接表 $O(m)$、项目的邻接表 $O(n^2)$，遍历 `before`，最极端情况下，第 $1$ 个顶点指向所有剩余 $n - 1$ 个顶点，第 $2$ 个顶点指向所有剩余 $n - 2$ 个顶点，……；\n  + 构建组的入度数组 $O(m)$、项目入度数组 $O(n)$；\n  + 执行组的拓扑排序$O(m + E_{group})$、项目的拓扑排序 $O(n + E_{item})$。这里用 $E_{group}$ 表示组的邻接表的边数， $E_{item}$ 表示项目的邻接表的边数；\n  + 构建组到项目的一对多关系 $O(m + n)$；\n  + 输出符合题目要求的结果 $O(m + n)$。\n\n+ 空间复杂度：$O(m + n^2)$；\n\n  + 组的邻接表 $O(m)$、项目的邻接表 $O(n^2)$；\n  + 组的入度数组 $O(m)$、项目入度数组 $O(n)$；\n  + 组到项目的一对多关系 $O(m + n)$；\n  + 符合题目要求的结果 $O(m + n)$。\n\n---\n\n\n### 练习\n\n\n\n1. 「力扣」第 207 题：[课程表](https://leetcode-cn.com/problems/course-schedule)（中等）；\n2. 「力扣」第 210 题：[课程表 II](https://leetcode-cn.com/problems/course-schedule-ii)（中等）；\n3. 「力扣」第 301 题：[最小高度树](https://leetcode-cn.com/problems/minimum-height-trees)（中等）；\n4. 「力扣」第 802 题：[找到最终的安全状态](https://leetcode-cn.com/problems/find-eventual-safe-states)（中等）；\n5. 「力扣」第 630 题：[课程表 III](https://leetcode-cn.com/problems/course-schedule-iii)（困难）；\n6. 「力扣」第 329 题：[矩阵中的最长递增路径](https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix)（困难）；\n7. 「力扣」第 1245 题：[树的直径](https://leetcode-cn.com/problems/tree-diameter)（中等）；\n8. 「力扣」第 444 题：[序列重建](https://leetcode-cn.com/problems/sequence-reconstruction)（中等）；\n9. 「力扣」第 1136 题：[平行课程](https://leetcode-cn.com/problems/parallel-courses)（困难）；\n10. 「力扣」第 269 题：[火星词典](https://leetcode-cn.com/problems/alien-dictionary)（困难）。\n\n\n\n\n\n\n\n"
}