{
	"titleSlug": "delete-characters-to-make-fancy-string",
	"slug": "shan-chu-zi-fu-shi-zi-fu-chuan-bian-hao-12ovq",
	"url": "https://leetcode-cn.com/problems/delete-characters-to-make-fancy-string/solution/shan-chu-zi-fu-shi-zi-fu-chuan-bian-hao-12ovq/",
	"content": "#### 方法一：模拟\n\n**思路与算法**\n\n如果想使得好字符串对应的删除字符数量最少，那么最佳的删除策略是：对于 $s$ 中每一个长度为 $k (k \\ge 3)$ 的连续相同字符子串，删去其中任意 $k - 2$ 个字符。\n\n我们可以用一个新字符串 $\\textit{res}$ 来维护删除最少字符后得到的好字符串，并从左至右遍历字符串 $s$ 模拟删除过程。每当遍历至一个新的字符时，我们检查 $\\textit{res}$ 中的最后两个字符（如有）是否均等于当前字符：\n\n- 如果是，则该字符应被删除，我们不将该字符添加进 $\\textit{res}$；\n\n- 如果不是，则不需要删除该字符，我们应当将该字符添加进 $\\textit{res}$。\n\n当遍历完成 $s$ 后，$\\textit{res}$ 即为删除最少字符后得到的好字符串，我们返回 $\\textit{res}$ 作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string makeFancyString(string s) {\n        string res;   // 删除后的字符串\n        // 遍历 s 模拟删除过程\n        for (char ch : s){\n            int n = res.size();\n            if (n >= 2 && res[n-1] == ch && res[n-2] == ch){\n                // 如果 res 最后两个字符与当前字符均相等，则不添加\n                continue;\n            }\n            // 反之则添加\n            res.push_back(ch);\n        }\n        return res;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def makeFancyString(self, s: str) -> str:\n        res = []   # 删除后的字符串\n        # 遍历 s 模拟删除过程\n        for ch in s:\n            if len(res) >= 2 and res[-1] == res[-2] == ch:\n                # 如果 res 最后两个字符与当前字符均相等，则不添加\n                continue\n            # 反之则添加\n            res.append(ch)\n        return \"\".join(res)\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。\n\n- 空间复杂度：由于不同语言的字符串实现与方法不同，空间复杂度也有所不同。对于 $\\texttt{C++}$ 解法，空间复杂度为 $O(1)$；而对于 $\\texttt{Python}$ 解法，空间复杂度为 $O(n)$。"
}