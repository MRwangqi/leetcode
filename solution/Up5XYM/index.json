{
	"titleSlug": "Up5XYM",
	"slug": "gei-zui-gao-zan-de-ti-jie-jia-liao-zhu-s-jnsr",
	"url": "https://leetcode-cn.com/problems/Up5XYM/solution/gei-zui-gao-zan-de-ti-jie-jia-liao-zhu-s-jnsr/",
	"content": "原作者：[@lucifer1004](/u/lucifer1004/)\r\n原回答：[【DP】为什么每种牌最多留4张？](https://leetcode-cn.com/problems/Up5XYM/solution/dp-wei-shi-yao-mei-chong-pai-zui-duo-liu-mun5/)\r\n\r\n\r\n## 第一步：整理牌序\r\n首先，将 `tiles` 变为 `map<int, int>`。其中，**键**是**点数**, 而**值**是对应的**牌数**，C++中的`map`是按照**键**从小到大排列的。\r\n\r\n![map化.gif](https://pic.leetcode-cn.com/1618282817-WwoZKi-map%E5%8C%96.gif)\r\n\r\n```cpp\r\nmap<int, int> count;\r\nfor (auto tile : tiles)\r\n    count[tile]++;\r\n```\r\n\r\n接下来，我们的指针会跟随**点数** `[tile]` 移动，动规数组也会随着 `[tile]` 更新。\r\n\r\n## 第二步：状态矩阵\r\n\r\n动规的目标毫无疑问：已知之前所有牌面最高得分（记为`dp`），当指针随着**点数**增加时，我们要根据新增加的牌来更新最高得分（记为`dp`）。\r\n\r\n例如，在下面这副牌中，假设现在我们遍历到 `[tile] = 4`，我们需要根据`4`的牌数来更新得分。即\r\n\r\n`dp += 新增得分`\r\n\r\n![幻灯片3.JPG](https://pic.leetcode-cn.com/1618218608-bWRMrf-%E5%B9%BB%E7%81%AF%E7%89%873.JPG)\r\n\r\n新增加的得分有两部分：\r\n\r\n1. `4`和**之前两张牌**组成的**顺子**得分，\r\n2. `4`自己组成的**刻子**得分。\r\n\r\n仔细分析我们发现，有两种不同的情况。  \r\n\r\n- **情况1**\r\n之前组成了两副顺子，留下来 1 张 `[2]` 和 0 张 `[3]`，无法和 `[4]` 一起组成新的顺子。因此，新增加的 `[4]` 只带来了 1 分新得分：[4] 的刻子得分。\r\n\r\n![幻灯片4.JPG](https://pic.leetcode-cn.com/1618218621-MIpywZ-%E5%B9%BB%E7%81%AF%E7%89%874.JPG)\r\n\r\n- **情况2**\r\n之前组成了一副顺子和一副刻子，留下来 2 张 `[2]` 和 1 张 `[3]`，能够 `[4]` 一起组成新的顺子。另外，剩下的 `[4]` 也能组成一副刻子 。因此，新增加的 `[4]` 最多能带来 2 分：一分顺子， 一分刻子。\r\n\r\n![幻灯片5.JPG](https://pic.leetcode-cn.com/1618218632-lHffgA-%E5%B9%BB%E7%81%AF%E7%89%875.JPG)\r\n\r\n\r\n仔细分析这两种情况：我们发现：  \r\n\r\n**影响新增得分的只有`[2]`和`[3]`的剩余牌数，也就是`[tile-2]`和`[tile-1]`的剩余牌数。**  \r\n\r\n因此，我们的`dp`应该是一个二维数组，`dp[cnt_2][cnt_1]` 表示：在预留 `cnt_2` 张 `[tile-2]` 和 `cnt_1` 张 `[tile-1]` 的前提下，`[tile]` 之前的牌能组成的牌组数。\r\n\r\n## 第三步：压缩状态空间\r\n\r\n如果我们把预留数量的所有可能性都列出来，`dp`的大小将有$O(n^2)$。因此，我们考虑**限制预留的牌数**。\r\n\r\n预留的牌仅用于跟下两张牌组成顺子，故应考虑**限制顺子的数量**。如下图所示，当相同顺子的数量大于等于3时，我们可以把**每3副顺子换成3副对应的刻子。**\r\n\r\n![幻灯片19.JPG](https://pic.leetcode-cn.com/1618282857-wNZEqB-%E5%B9%BB%E7%81%AF%E7%89%8719.JPG)\r\n\r\n那么，相同顺子的数量`<=2`副。\r\n\r\n如下图所示，为`[5]`预留的牌，在未来遍历到`[6]`时，可组成顺子`([4], [5], [6])`；在未来遍历到`[7]`时，可组成顺子`([5], [6], [7])`。\r\n\r\n![幻灯片20.JPG](https://pic.leetcode-cn.com/1618221308-pKcOwN-%E5%B9%BB%E7%81%AF%E7%89%8720.JPG)\r\n\r\n每种顺子不超过2副。因此，我们预留的牌，也不超过4张。\r\n\r\n`dp`的空间就压缩到了`dp[0~4][0~4]`，即$O(5^2)$（因为还要考虑一张都不留的情况）。\r\n\r\n## 第三步：状态转移方程\r\n\r\n根据前面的分析，我们知道，每一步的分数由三部分组成：\r\n1. 之前赚的分数；\r\n2. `[tile-2]`、`[tile-1]`和`[tile]`组成的顺子得分；\r\n3. `[tile]`自己组成的刻子得分。\r\n\r\n注意到，我们当前的 `[tile]` 也不要一次性用完，也要考虑留下几张跟后面的牌组成顺子。\r\n\r\n那么，我们应该怎么规划**顺子得分**、**刻子得分**和**预留的牌数**呢？我们通过遍历的方式把所有的可能性罗列出来。\r\n\r\n<![幻灯片6.JPG](https://pic.leetcode-cn.com/1618152980-GgSmAJ-%E5%B9%BB%E7%81%AF%E7%89%876.JPG),![幻灯片7.JPG](https://pic.leetcode-cn.com/1618152984-hzahWG-%E5%B9%BB%E7%81%AF%E7%89%877.JPG),![幻灯片8.JPG](https://pic.leetcode-cn.com/1618152994-RTjckv-%E5%B9%BB%E7%81%AF%E7%89%878.JPG),![幻灯片9.JPG](https://pic.leetcode-cn.com/1618218777-cmUoON-%E5%B9%BB%E7%81%AF%E7%89%879.JPG),![幻灯片10.JPG](https://pic.leetcode-cn.com/1618153000-qgeLPk-%E5%B9%BB%E7%81%AF%E7%89%8710.JPG),![幻灯片11.JPG](https://pic.leetcode-cn.com/1618153005-OLORJJ-%E5%B9%BB%E7%81%AF%E7%89%8711.JPG),![幻灯片12.JPG](https://pic.leetcode-cn.com/1618153007-Ohaosc-%E5%B9%BB%E7%81%AF%E7%89%8712.JPG),![幻灯片13.JPG](https://pic.leetcode-cn.com/1618153010-ESDoVV-%E5%B9%BB%E7%81%AF%E7%89%8713.JPG),![幻灯片14.JPG](https://pic.leetcode-cn.com/1618153013-yidgWq-%E5%B9%BB%E7%81%AF%E7%89%8714.JPG),![幻灯片15.JPG](https://pic.leetcode-cn.com/1618153016-wHpSKe-%E5%B9%BB%E7%81%AF%E7%89%8715.JPG),![幻灯片16.JPG](https://pic.leetcode-cn.com/1618153019-yKCNFz-%E5%B9%BB%E7%81%AF%E7%89%8716.JPG)>\r\n\r\n#### 罗列顺子的所有可能性\r\n\r\n首先，我们把顺子数量从0开始罗列。  \r\n正如前文所述，我们预留了`cnt_2`张`[tile-2]` 和 `cnt_1`张`[tile-1]`，而现在我们有 `cnt`张新增加的`[tile]`牌。  \r\n组成的顺子数量，不能超过 `cnt_2`、`cnt_1`、`cnt` 的任何一个。\r\n\r\n```cpp\r\nfor (int shunzi = 0; shunzi <= min(cnt_2, min(cnt_1, cnt)); ++shunzi) {\r\n    ...\r\n```\r\n\r\n对于下一个点数而言，`[new_tile-2]` 就是当前的 `[tile-1]`，我们用`new_2` 代表预留的 `[new_tile-2]` 的牌数，这个牌数就是`[tile-1]`的牌数减去顺子数量。\r\n\r\n例如，在下面这张图中，下一个点数`[new_tile]`是`5`，`new_1`是预留的`[4]`的数量，`new_2`就是剩下的`[3]`的数量。原来我们有 3 张`[3]`，顺子用掉 2 张，就还剩 1 张。\r\n\r\n![麻将.jpg](https://pic.leetcode-cn.com/1618219605-jlLFoM-%E9%BA%BB%E5%B0%86.jpg)\r\n\r\n```cpp\r\n    int new_2 = cnt_1 - shunzi;\r\n```\r\n\r\n#### 罗列预留牌数的所有可能性\r\n\r\n同样的，我们把当前预留的牌数从0开始罗列。  \r\n对于下一张牌而言，当前的牌面自然是 `[new_tile-1]` 了，所以我们用 `new_1` 代表预留的 `[new_tile-1]` 的牌数，预留的牌数自然不能超过`[tile]`的牌数减去顺子用掉的数量。\r\n\r\n```cpp\r\n    for (int new_1 = 0; new_1 <= cnt - shunzi; ++new_1) {\r\n        ...\r\n```\r\n\r\n那么，自然地，去掉了顺子数量和预留牌数之后，剩下的 `[tile]` 的数量全部组成刻子，它的得分是：`(cnt - shunzi - new_1) / 3`。\r\n\r\n综上所述，新的得分是三者相加，即\r\n```cpp\r\n\r\n        int new_score = dp[cnt_2][cnt_1] + shunzi + (cnt - shunzi - new_1) / 3;\r\n```\r\n\r\n## 第四步：找到最高分\r\n\r\n全部遍历完成后，我们搜索并返回dp的最大值：  \r\n\r\n```cpp\r\nint ans = 0;\r\nfor (int cnt_2 = 0; cnt_2 < 5; ++cnt_2)\r\n    for (int cnt_1 = 0; cnt_1 < 5; ++cnt_1)\r\n        ans = max(ans, dp[cnt_2][cnt_1]);\r\nreturn ans;\r\n```\r\n\r\n\r\n## 最终程序\r\n\r\n本程序改编自@lucifer1004 的解答。更改了变量命名，使之更容易被理解。如有错误请指正。\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    int maxGroupNumber(vector<int>& tiles) {\r\n        map<int, int> count;  // [点数, 对应的牌数]，C++中的map是按照key(点数)从小到大排列的。\r\n        for (auto tile : tiles)\r\n            count[tile]++;\r\n\r\n        // dp[x][y] 表示\r\n        // 在预留x张 [tile-2] 和y张 [tile-1] 的前提下，\r\n        // [tile] 之前的牌能组成的牌组数\r\n        vector<vector<int>> dp(5, vector<int>(5, -1));\r\n        dp[0][0] = 0;\r\n        int prev_tile = 0; // 前一张牌的点数\r\n        for (auto [tile, cnt] : count) { // [tile表示当前点数, cnt表示对应的牌数]\r\n            // 如果上一张牌和这张牌没法连起来\r\n            // 意味着无论之前留几张牌，都无法和tile一起组成顺子，因此，只保留dp[0][0]的情形。\r\n            if (prev_tile != tile - 1) {     \r\n                // dp[0][0] 表示，之前留下的 “tile-2点的牌数” 和 “tile-1点的牌数” 都为0\r\n                int dp00 = dp[0][0];\r\n                // dp[x][y] == -1 表示，之前没有 “留下x张[tile-2]点的和y张[tile-1]点” 的情况\r\n                dp = vector<vector<int>>(5, vector<int>(5, -1));\r\n                dp[0][0] = dp00;\r\n            }\r\n            // 新的dp数组\r\n            vector<vector<int>> new_dp(5, vector<int>(5, -1));\r\n            \r\n            for (int cnt_2 = 0; cnt_2 < 5; ++cnt_2) // [tile-2] 的牌数\r\n                for (int cnt_1 = 0; cnt_1 < 5; ++cnt_1) { // [tile-1] 的牌数\r\n                    // 如果之前没有留下这么多张牌\r\n                    if (dp[cnt_2][cnt_1] < 0)\r\n                        continue;\r\n\r\n                    // 顺子数量不能超过[tile-2]、[tile-1]、[tile]的牌数\r\n                    for (int shunzi = 0; shunzi <= min(cnt_2, min(cnt_1, cnt)); ++shunzi) {\r\n                        int new_2 = cnt_1 - shunzi; // 对于下一个点数 new_tile = tile + 1 而言，\r\n                                                    // [new_tile - 2] 就是当前的 [tile - 1]\r\n                                                    // new_2 代表预留的 [new_tile - 2] 的牌数\r\n                                                    // 也就是当前的 [tile - 1] 的牌数 - 顺子数量\r\n                        // 同理，对于下一个点数 [new_tile] 而言，new_1 代表预留的 [new_tile - 1] 的牌数，\r\n                        // 也就是预留的 [tile] 的数量。\r\n                        // 预留的数量不超过四张，也不超过 ( [tile]的牌数 - 顺子数量 )\r\n                        for (int new_1 = 0; new_1 <= min(4, cnt - shunzi); ++new_1) {\r\n                            // 新的牌组数等于以下三者相加：\r\n                            // 1. dp数组保存的，留下 cnt_2 张 [tile-2] 和 cnt_1 张 [tile-1] 的前提下，tile-1 之前的牌面能凑出来的牌组数\r\n                            // 2. 顺子数量\r\n                            // 3. [tile] 组成的刻子数量 = ( [tile] - 顺子数量 - 留下备用的牌 ) / 3\r\n                            int new_score = dp[cnt_2][cnt_1] + shunzi + (cnt - shunzi - new_1) / 3;\r\n                            new_dp[new_2][new_1] = max(new_dp[new_2][new_1], new_score);\r\n                        }\r\n                    }\r\n                }\r\n            \r\n            // 将new_dp数组赋值给dp数组\r\n            dp = move(new_dp);\r\n            // 将当前tile记录都上一个tile中\r\n            prev_tile = tile;\r\n        }\r\n        \r\n        // 找到并返回dp的最大值\r\n        int ans = 0;\r\n        for (int cnt_2 = 0; cnt_2 < 5; ++cnt_2)\r\n            for (int cnt_1 = 0; cnt_1 < 5; ++cnt_1)\r\n                ans = max(ans, dp[cnt_2][cnt_1]);\r\n        \r\n        return ans;\r\n    }\r\n};\r\n```\r\n\r\n顺带分享一道类似问题：  \r\n\r\n[546. 移除盒子 | 题解](https://leetcode-cn.com/problems/remove-boxes/solution/guan-fang-fang-fa-2ji-yi-hua-sou-suo-dong-hua-tu-j/)"
}