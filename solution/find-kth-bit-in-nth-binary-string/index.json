{
	"titleSlug": "find-kth-bit-in-nth-binary-string",
	"slug": "zhao-chu-di-n-ge-er-jin-zhi-zi-fu-chuan-zhong-de-2",
	"url": "https://leetcode-cn.com/problems/find-kth-bit-in-nth-binary-string/solution/zhao-chu-di-n-ge-er-jin-zhi-zi-fu-chuan-zhong-de-2/",
	"content": "#### 方法一：递归\n\n观察二进制字符串 $S_n$，可以发现，当 $n>1$ 时，$S_n$ 是在 $S_{n-1}$ 的基础上形成的。用 $\\text{len}_n$ 表示 $S_n$ 的长度，则 $S_n$ 的前 $\\text{len}_{n-1}$ 个字符与 $S_{n-1}$ 相同。还可以发现，当 $n>1$ 时，$\\text{len}_n=\\text{len}_{n-1} \\times 2 + 1$，根据 $\\text{len}_1=1$ 可知 $\\text{len}_n=2^n-1$。\n\n由于 $S_1=``0\"$，且对于任意 $n \\ge 1$，$S_n$ 的第 $1$ 位字符也一定是 $`0'$，因此当 $k=1$ 时，直接返回字符 $`0'$。\n\n当 $n>1$ 时，$S_n$ 的长度是 $2^n-1$。$S_n$ 可以分成三个部分，左边 $2^{n-1}-1$ 个字符是 $S_{n-1}$，中间 $1$ 个字符是 $`1'$，右边 $2^{n-1}-1$ 个字符是 $S_{n-1}$ 翻转与反转之后的结果。中间的字符 $`1'$ 是 $S_n$ 的第 $2^{n-1}$ 位字符，因此如果 $k=2^{n-1}$，直接返回字符 $`1'$。\n\n当 $k \\ne 2^{n-1}$ 时，考虑以下两种情况：\n\n- 如果 $k<2^{n-1}$，则第 $k$ 位字符在 $S_n$ 的前半部分，即第 $k$ 位字符在 $S_{n-1}$ 中，因此在 $S_{n-1}$ 中寻找第 $k$ 位字符；\n\n- 如果 $k>2^{n-1}$，则第 $k$ 位字符在 $S_n$ 的后半部分，由于后半部分为前半部分进行翻转与反转之后的结果，因此在前半部分寻找第 $2^n-k$ 位字符，将其反转之后即为 $S_n$ 的第 $k$ 位字符。\n\n上述过程可以通过递归实现。\n\n```Java [sol1-Java]\nclass Solution {\n    public char findKthBit(int n, int k) {\n        if (k == 1) {\n            return '0';\n        }\n        int mid = 1 << (n - 1);\n        if (k == mid) {\n            return '1';\n        } else if (k < mid) {\n            return findKthBit(n - 1, k);\n        } else {\n            k = mid * 2 - k;\n            return invert(findKthBit(n - 1, k));\n        }\n    }\n\n    public char invert(char bit) {\n        return (char) ('0' + '1' - bit);\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst invert = (bit) => bit === '0' ? '1' : '0';\n\nvar findKthBit = function(n, k) {\n    if (k == 1) {\n        return '0';\n    }\n    const mid = 1 << (n - 1);\n    if (k == mid) {\n        return '1';\n    } else if (k < mid) {\n        return findKthBit(n - 1, k);\n    } else {\n        k = mid * 2 - k;\n        return invert(findKthBit(n - 1, k));\n    }\n};\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    char findKthBit(int n, int k) {\n        if (k == 1) {\n            return '0';\n        }\n        int mid = 1 << (n - 1);\n        if (k == mid) {\n            return '1';\n        } else if (k < mid) {\n            return findKthBit(n - 1, k);\n        } else {\n            k = mid * 2 - k;\n            return invert(findKthBit(n - 1, k));\n        }\n    }\n\n    char invert(char bit) {\n        return (char) ('0' + '1' - bit);\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        if k == 1:\n            return \"0\"\n        \n        mid = 1 << (n - 1)\n        if k == mid:\n            return \"1\"\n        elif k < mid:\n            return self.findKthBit(n - 1, k)\n        else:\n            k = mid * 2 - k\n            return \"0\" if self.findKthBit(n - 1, k) == \"1\" else \"1\"\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。字符串 $S_n$ 的长度为 $2^n-1$，每次递归调用可以将查找范围缩小一半，因此时间复杂度为 $O(\\log 2^n)=O(n)$。\n\n- 空间复杂度：$O(n)$。空间复杂度主要取决于递归调用产生的栈空间，递归调用层数不会超过 $n$。"
}