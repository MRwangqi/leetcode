{
	"titleSlug": "4ueAj6",
	"slug": "pai-xu-de-xun-huan-lian-biao-by-leetcode-f566",
	"url": "https://leetcode-cn.com/problems/4ueAj6/solution/pai-xu-de-xun-huan-lian-biao-by-leetcode-f566/",
	"content": "#### 方法一：一次遍历\n\n如果循环链表为空，则插入一个新节点并将新节点的 $\\textit{next}$ 指针指向自身，插入新节点之后得到只有一个节点的循环链表，该循环链表一定是有序的，将插入的新节点作为新的头节点返回。\n\n如果循环链表的头节点的 $\\textit{next}$ 指针指向自身，则循环链表中只有一个节点，在头节点之后插入新节点，将头节点的 $\\textit{next}$ 指针指向新节点，将新节点的 $\\textit{next}$ 指针指向头节点，此时循环链表中有两个节点且一定是有序的，返回头节点。\n\n如果循环链表中的节点数大于 $1$，则需要从头节点开始遍历循环链表，寻找插入新节点的位置，使得插入新节点之后的循环链表仍然保持有序。\n\n用 $\\textit{curr}$ 和 $\\textit{next}$ 分别表示当前节点和下一个节点，初始时 $\\textit{curr}$ 位于 $\\textit{head}$，$\\textit{next}$ 位于 $\\textit{head}$ 的下一个节点，由于链表中的节点数大于 $1$，因此 $\\textit{curr} \\ne \\textit{next}$。遍历过程中，判断值为 $\\textit{insertVal}$ 的新节点是否可以在 $\\textit{curr}$ 和 $\\textit{next}$ 之间插入，如果符合插入要求则在 $\\textit{curr}$ 和 $\\textit{next}$ 之间插入新节点，否则将 $\\textit{curr}$ 和 $\\textit{next}$ 同时向后移动，直到找到插入新节点的位置或者遍历完循环链表中的所有节点。\n\n遍历过程中，如果找到插入新节点的位置，则有以下三种情况：\n\n- $\\textit{curr}.\\textit{val} \\le \\textit{insertVal} \\le \\textit{next}.\\textit{val}$，此时新节点的值介于循环链表中的两个节点值之间，在 $\\textit{curr}$ 和 $\\textit{next}$ 之间插入新节点；\n\n- $\\textit{curr}.\\textit{val} > \\textit{next}.\\textit{val}$ 且 $\\textit{insertVal} > \\textit{curr}.\\textit{val}$，此时 $\\textit{curr}$ 和 $\\textit{next}$ 分别是循环链表中的值最大的节点和值最小的节点，$\\textit{insertVal}$ 大于 $\\textit{curr}$ 的节点值，因此新节点应该在 $\\textit{curr}$ 的后面插入，即在 $\\textit{curr}$ 和 $\\textit{next}$ 之间插入新节点；\n\n- $\\textit{curr}.\\textit{val} > \\textit{next}.\\textit{val}$ 且 $\\textit{insertVal} < \\textit{next}.\\textit{val}$，此时 $\\textit{curr}$ 和 $\\textit{next}$ 分别是循环链表中的值最大的节点和值最小的节点，$\\textit{insertVal}$ 小于 $\\textit{next}$ 的节点值，因此新节点应该在 $\\textit{next}$ 的前面插入，即在 $\\textit{curr}$ 和 $\\textit{next}$ 之间插入新节点。\n\n如果遍历完循环链表中的所有节点之后仍然没有遇到上述三种情况，则循环链表中的所有节点值都相同，因此新节点插入循环链表中的任何位置仍可以使循环链表保持有序，此时仍可在 $\\textit{curr}$ 和 $\\textit{next}$ 之间插入新节点。\n\n在 $\\textit{curr}$ 和 $\\textit{next}$ 之间插入新节点的方法是：用 $\\textit{node}$ 表示值为 $\\textit{insertVal}$ 的新节点，令 $\\textit{curr}.\\textit{next}$ 指向 $\\textit{node}$，令 $\\textit{node}.\\textit{next}$ 指向 $\\textit{next}$，即完成插入新节点的操作。\n\n插入新节点之后，返回循环链表的头节点。\n\n```Python [sol1-Python3]\nclass Solution:\n    def insert(self, head: 'Node', insertVal: int) -> 'Node':\n        node = Node(insertVal)\n        if head is None:\n            node.next = node\n            return node\n        if head.next == head:\n            head.next = node\n            node.next = head\n            return head\n        curr = head\n        next = head.next\n        while next != head:\n            if curr.val <= insertVal <= next.val:\n                break\n            if curr.val > next.val:\n                if insertVal > curr.val or insertVal < next.val:\n                    break\n            curr = curr.next\n            next = next.next\n        curr.next = node\n        node.next = next\n        return head\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public Node insert(Node head, int insertVal) {\n        Node node = new Node(insertVal);\n        if (head == null) {\n            node.next = node;\n            return node;\n        }\n        if (head.next == head) {\n            head.next = node;\n            node.next = head;\n            return head;\n        }\n        Node curr = head, next = head.next;\n        while (next != head) {\n            if (insertVal >= curr.val && insertVal <= next.val) {\n                break;\n            }\n            if (curr.val > next.val) {\n                if (insertVal > curr.val || insertVal < next.val) {\n                    break;\n                }\n            }\n            curr = curr.next;\n            next = next.next;\n        }\n        curr.next = node;\n        node.next = next;\n        return head;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public Node Insert(Node head, int insertVal) {\n        Node node = new Node(insertVal);\n        if (head == null) {\n            node.next = node;\n            return node;\n        }\n        if (head.next == head) {\n            head.next = node;\n            node.next = head;\n            return head;\n        }\n        Node curr = head, next = head.next;\n        while (next != head) {\n            if (insertVal >= curr.val && insertVal <= next.val) {\n                break;\n            }\n            if (curr.val > next.val) {\n                if (insertVal > curr.val || insertVal < next.val) {\n                    break;\n                }\n            }\n            curr = curr.next;\n            next = next.next;\n        }\n        curr.next = node;\n        node.next = next;\n        return head;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    Node* insert(Node* head, int insertVal) {\n        Node *node = new Node(insertVal);\n        if (head == nullptr) {\n            node->next = node;\n            return node;\n        }\n        if (head->next == head) {\n            head->next = node;\n            node->next = head;\n            return head;\n        }\n        Node *curr = head, *next = head->next;\n        while (next != head) {\n            if (insertVal >= curr->val && insertVal <= next->val) {\n                break;\n            }\n            if (curr->val > next->val) {\n                if (insertVal > curr->val || insertVal < next->val) {\n                    break;\n                }\n            }\n            curr = curr->next;\n            next = next->next;\n        }\n        curr->next = node;\n        node->next = next;\n        return head;\n    }\n};\n```\n\n```C [sol1-C]\nstruct Node* insert(struct Node* head, int insertVal) {\n    struct Node *node = (struct Node*)malloc(sizeof(struct Node));\n    node->val = insertVal;\n    node->next = NULL;\n    if (head == NULL) {\n        node->next = node;\n        return node;\n    }\n    if (head->next == head) {\n        head->next = node;\n        node->next = head;\n        return head;\n    }\n    struct Node *curr = head, *next = head->next;\n    while (next != head) {\n        if (insertVal >= curr->val && insertVal <= next->val) {\n            break;\n        }\n        if (curr->val > next->val) {\n            if (insertVal > curr->val || insertVal < next->val) {\n                break;\n            }\n        }\n        curr = curr->next;\n        next = next->next;\n    }\n    curr->next = node;\n    node->next = next;\n    return head;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar insert = function(head, insertVal) {\n    const node = new Node(insertVal);\n    if (!head) {\n        node.next = node;\n        return node;\n    }\n    if (head.next === head) {\n        head.next = node;\n        node.next = head;\n        return head;\n    }\n    let curr = head, next = head.next;\n    while (next !== head) {\n        if (insertVal >= curr.val && insertVal <= next.val) {\n            break;\n        }\n        if (curr.val > next.val) {\n            if (insertVal > curr.val || insertVal < next.val) {\n                break;\n            }\n        }\n        curr = curr.next;\n        next = next.next;\n    }\n    curr.next = node;\n    node.next = next;\n    return head;\n};\n```\n\n```go [sol1-Golang]\nfunc insert(head *Node, insertVal int) *Node {\n    node := &Node{Val: insertVal}\n    if head == nil {\n        node.Next = node\n        return node\n    }\n    if head.Next == head {\n        head.Next = node\n        node.Next = head\n        return head\n    }\n    curr, next := head, head.Next\n    for next != head {\n        if insertVal >= curr.Val && insertVal <= next.Val {\n            break\n        }\n        if curr.Val > next.Val {\n            if insertVal > curr.Val || insertVal < next.Val {\n                break\n            }\n        }\n        curr = curr.Next\n        next = next.Next\n    }\n    curr.Next = node\n    node.Next = next\n    return head\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的节点数。需要遍历链表一次寻找插入节点的位置，插入节点的时间是 $O(1)$。\n\n- 空间复杂度：$O(1)$。"
}