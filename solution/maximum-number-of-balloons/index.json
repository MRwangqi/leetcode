{
	"titleSlug": "maximum-number-of-balloons",
	"slug": "qi-qiu-de-zui-da-shu-liang-by-leetcode-s-nku5",
	"url": "https://leetcode-cn.com/problems/maximum-number-of-balloons/solution/qi-qiu-de-zui-da-shu-liang-by-leetcode-s-nku5/",
	"content": "#### 方法一：统计\n\n**思路**\n\n构成单词 $\\texttt{\"balloon\"}$ 需要 $1$ 个字母 $\\texttt{`b'}$ 、$1$ 个字母 $\\texttt{`a'}$ 、$2$ 个字母 $\\texttt{`l'}$ 、$2$ 个字母 $\\texttt{`o'}$ 、$1$ 个字母 $\\texttt{`n'}$，因此只需要统计字符串中字母 $\\texttt{`a',`b',`l',`o',`n'}$ 的数量即可。其中每个字母 $\\texttt{\"balloon\"}$ 需要两个 $\\texttt{`l',`o'}$，可以将字母 $\\texttt{`l',`o'}$ 的数量除以 $2$，返回字母 $\\texttt{`a',`b',`l',`o',`n'}$ 中数量最小值即为可以构成的单词数量。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxNumberOfBalloons(self, text: str) -> int:\n        cnt = Counter(ch for ch in text if ch in \"balon\")\n        cnt['l'] //= 2\n        cnt['o'] //= 2\n        return min(cnt.values()) if len(cnt) == 5 else 0\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxNumberOfBalloons(string text) {\n        vector<int> cnt(5);\n        for (auto & ch : text) {\n            if (ch == 'b') {\n                cnt[0]++;\n            } else if (ch == 'a') {\n                cnt[1]++;\n            } else if (ch == 'l') {\n                cnt[2]++;\n            } else if (ch == 'o') {\n                cnt[3]++;\n            } else if (ch == 'n') {\n                cnt[4]++;\n            }\n        }\n        cnt[2] /= 2;\n        cnt[3] /= 2;\n        return *min_element(cnt.begin(), cnt.end());\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxNumberOfBalloons(String text) {\n        int[] cnt = new int[5];\n        for (int i = 0; i < text.length(); ++i) {\n            char ch = text.charAt(i);\n            if (ch == 'b') {\n                cnt[0]++;\n            } else if (ch == 'a') {\n                cnt[1]++;\n            } else if (ch == 'l') {\n                cnt[2]++;\n            } else if (ch == 'o') {\n                cnt[3]++;\n            } else if (ch == 'n') {\n                cnt[4]++;\n            }\n        }\n        cnt[2] /= 2;\n        cnt[3] /= 2;\n        return Arrays.stream(cnt).min().getAsInt();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MaxNumberOfBalloons(string text) {\n        int[] cnt = new int[5];\n        foreach (char ch in text) {\n            if (ch == 'b') {\n                cnt[0]++;\n            } else if (ch == 'a') {\n                cnt[1]++;\n            } else if (ch == 'l') {\n                cnt[2]++;\n            } else if (ch == 'o') {\n                cnt[3]++;\n            } else if (ch == 'n') {\n                cnt[4]++;\n            }\n        }\n        cnt[2] /= 2;\n        cnt[3] /= 2;\n        return cnt.Min();\n    }\n}\n```\n\n```C [sol1-C]\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nint maxNumberOfBalloons(char * text) {\n    int cnt[5];\n    int n = strlen(text);\n    memset(cnt, 0, sizeof(int) * 5);\n    for (int i = 0; i < n; i++) {\n        if (text[i] == 'b') {\n            cnt[0]++;\n        } else if (text[i] == 'a') {\n            cnt[1]++;\n        } else if (text[i] == 'l') {\n            cnt[2]++;\n        } else if (text[i] == 'o') {\n            cnt[3]++;\n        } else if (text[i] == 'n') {\n            cnt[4]++;\n        }\n    }\n    cnt[2] /= 2;\n    cnt[3] /= 2;\n    int res = INT_MAX;\n    for (int i = 0; i < 5; i++) {\n        res = MIN(res, cnt[i]);\n    }\n    return res;\n}\n```\n\n```go [sol1-Golang]\nfunc maxNumberOfBalloons(text string) int {\n    cnt := [5]int{}\n    for _, ch := range text {\n        if ch == 'b' {\n            cnt[0]++\n        } else if ch == 'a' {\n            cnt[1]++\n        } else if ch == 'l' {\n            cnt[2]++\n        } else if ch == 'o' {\n            cnt[3]++\n        } else if ch == 'n' {\n            cnt[4]++\n        }\n    }\n    cnt[2] /= 2\n    cnt[3] /= 2\n    ans := cnt[0]\n    for _, v := range cnt[1:] {\n        if v < ans {\n            ans = v\n        }\n    }\n    return ans\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxNumberOfBalloons = function(text) {\n    const cnt = new Array(5).fill(0);\n    for (const ch of text) {\n        if (ch === 'b') {\n            cnt[0]++;\n        } else if (ch === 'a') {\n            cnt[1]++;\n        } else if (ch === 'l') {\n            cnt[2]++;\n        } else if (ch === 'o') {\n            cnt[3]++;\n        } else if (ch === 'n') {\n            cnt[4]++;\n        }\n    }\n    cnt[2] = Math.floor(cnt[2] / 2);\n    cnt[3] = Math.floor(cnt[3] / 2);\n    return _.min(cnt);\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + C)$，其中 $n$ 为字符串的长度，$C$ 表示单词中字符的种类数，在本题中 $C = 5$。需要遍历一遍字符串，并求出单词中字符的最小数目。\n\n- 空间复杂度：$O(C)$，$C$ 表示单词中字符的种类数，在本题中 $C = 5$。需要 $O(C)$ 的空间存储字符的统计数目。"
}