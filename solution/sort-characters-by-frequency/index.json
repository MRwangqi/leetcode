{
	"titleSlug": "sort-characters-by-frequency",
	"slug": "gen-ju-zi-fu-chu-xian-pin-lu-pai-xu-by-l-zmvy",
	"url": "https://leetcode-cn.com/problems/sort-characters-by-frequency/solution/gen-ju-zi-fu-chu-xian-pin-lu-pai-xu-by-l-zmvy/",
	"content": "#### 方法一：按照出现频率排序\n\n题目要求将给定的字符串按照字符出现的频率降序排序，因此需要首先遍历字符串，统计每个字符出现的频率，然后每次得到频率最高的字符，生成排序后的字符串。\n\n可以使用哈希表记录每个字符出现的频率，将字符去重后存入列表，再将列表中的字符按照频率降序排序。\n\n生成排序后的字符串时，遍历列表中的每个字符，则遍历顺序为字符按照频率递减的顺序。对于每个字符，将该字符按照出现频率拼接到排序后的字符串。例如，遍历到字符 $c$，该字符在字符串中出现了 $\\textit{freq}$ 次，则将 $\\textit{freq}$ 个字符 $c$ 拼接到排序后的字符串。\n\n也可以使用优先队列或大根堆存储字符，读者可以自行尝试。\n\n```Java [sol1-Java]\nclass Solution {\n    public String frequencySort(String s) {\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\n        int length = s.length();\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            int frequency = map.getOrDefault(c, 0) + 1;\n            map.put(c, frequency);\n        }\n        List<Character> list = new ArrayList<Character>(map.keySet());\n        Collections.sort(list, (a, b) -> map.get(b) - map.get(a));\n        StringBuffer sb = new StringBuffer();\n        int size = list.size();\n        for (int i = 0; i < size; i++) {\n            char c = list.get(i);\n            int frequency = map.get(c);\n            for (int j = 0; j < frequency; j++) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string FrequencySort(string s) {\n        Dictionary<char, int> dictionary = new Dictionary<char, int>();\n        int length = s.Length;\n        for (int i = 0; i < length; i++) {\n            char c = s[i];\n            if (dictionary.ContainsKey(c)) {\n                dictionary[c]++;\n            } else {\n                dictionary.Add(c, 1);\n            }\n        }\n        List<char> list = new List<char>(dictionary.Keys);\n        list.Sort((a, b) => dictionary[b] - dictionary[a]);\n        StringBuilder sb = new StringBuilder();\n        int size = list.Count;\n        for (int i = 0; i < size; i++) {\n            char c = list[i];\n            int frequency = dictionary[c];\n            for (int j = 0; j < frequency; j++) {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string frequencySort(string s) {\n        unordered_map<char, int> mp;\n        int length = s.length();\n        for (auto &ch : s) {\n            mp[ch]++;\n        }\n        vector<pair<char, int>> vec;\n        for (auto &it : mp) {\n            vec.emplace_back(it);\n        }\n        sort(vec.begin(), vec.end(), [](const pair<char, int> &a, const pair<char, int> &b) {\n            return a.second > b.second;\n        });\n        string ret;\n        for (auto &[ch, num] : vec) {\n            for (int i = 0; i < num; i++) {\n                ret.push_back(ch);\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```C [sol1-C]\n#define HASH_FIND_CHAR(head, findint, out) HASH_FIND(hh, head, findint, sizeof(char), out)\n#define HASH_ADD_CHAR(head, intfield, add) HASH_ADD(hh, head, intfield, sizeof(char), add)\n\nstruct HashTable {\n    char key;\n    int val;\n    UT_hash_handle hh;\n};\n\nint cmp(struct HashTable* a, struct HashTable* b) {\n    return b->val - a->val;\n}\n\nchar* frequencySort(char* s) {\n    struct HashTable* hashTable = NULL;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        struct HashTable* tmp;\n        HASH_FIND_CHAR(hashTable, &s[i], tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct HashTable));\n            tmp->key = s[i], tmp->val = 1;\n            HASH_ADD_CHAR(hashTable, key, tmp);\n        } else {\n            tmp->val++;\n        }\n    }\n    int n = HASH_COUNT(hashTable);\n    HASH_SORT(hashTable, cmp);\n    int retSize = 0;\n    struct HashTable *tmp, *iter;\n    HASH_ITER(hh, hashTable, iter, tmp) {\n        retSize += iter->val;\n    }\n    char* ret = malloc(sizeof(char) * (retSize + 1));\n    retSize = 0;\n    HASH_ITER(hh, hashTable, iter, tmp) {\n        for (int i = 0; i < iter->val; i++) {\n            ret[retSize++] = iter->key;\n        }\n    }\n    ret[retSize] = '\\0';\n    return ret;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar frequencySort = function(s) {\n    const map = new Map();\n    const length = s.length;\n    for (let i = 0; i < length; i++) {\n        const c = s[i];\n        const frequency = (map.get(c) || 0) + 1;\n        map.set(c, frequency);\n    }\n    const list = [...map.keys()];\n    list.sort((a, b) => map.get(b) - map.get(a));\n    const sb = [];\n    const size = list.length;\n    for (let i = 0; i < size; i++) {\n        const c = list[i];\n        const frequency = map.get(c);\n        for (let j = 0; j < frequency; j++) {\n            sb.push(c);\n        }\n    }\n    return sb.join('');\n};\n```\n\n```go [sol1-Golang]\nfunc frequencySort(s string) string {\n    cnt := map[byte]int{}\n    for i := range s {\n        cnt[s[i]]++\n    }\n\n    type pair struct {\n        ch  byte\n        cnt int\n    }\n    pairs := make([]pair, 0, len(cnt))\n    for k, v := range cnt {\n        pairs = append(pairs, pair{k, v})\n    }\n    sort.Slice(pairs, func(i, j int) bool { return pairs[i].cnt > pairs[j].cnt })\n\n    ans := make([]byte, 0, len(s))\n    for _, p := range pairs {\n        ans = append(ans, bytes.Repeat([]byte{p.ch}, p.cnt)...)\n    }\n    return string(ans)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + k \\log k)$，其中 $n$ 是字符串 $s$ 的长度，$k$ 是字符串 $s$ 包含的不同字符的个数，这道题中 $s$ 只包含大写字母、小写字母和数字，因此 $k=26 + 26 + 10 = 62$。\n  遍历字符串统计每个字符出现的频率需要 $O(n)$ 的时间。\n  将字符按照出现频率排序需要 $O(k \\log k)$ 的时间。\n  生成排序后的字符串，需要遍历 $k$ 个不同字符，需要 $O(k)$ 的时间，拼接字符串需要 $O(n)$ 的时间。\n  因此总时间复杂度是 $O(n + k \\log k + k + n)=O(n + k \\log k)$。\n\n- 空间复杂度：$O(n + k)$，其中 $n$ 是字符串 $s$ 的长度，$k$ 是字符串 $s$ 包含的不同字符的个数。空间复杂度主要取决于哈希表、列表和生成的排序后的字符串。\n\n#### 方法二：桶排序\n\n由于每个字符在字符串中出现的频率存在上限，因此可以使用桶排序的思想，根据出现次数生成排序后的字符串。具体做法如下：\n\n1. 遍历字符串，统计每个字符出现的频率，同时记录最高频率 $\\textit{maxFreq}$；\n\n2. 创建桶，存储从 $1$ 到 $\\textit{maxFreq}$ 的每个出现频率的字符；\n\n3. 按照出现频率从大到小的顺序遍历桶，对于每个出现频率，获得对应的字符，然后将每个字符按照出现频率拼接到排序后的字符串。\n\n```Java [sol2-Java]\nclass Solution {\n    public String frequencySort(String s) {\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\n        int maxFreq = 0;\n        int length = s.length();\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            int frequency = map.getOrDefault(c, 0) + 1;\n            map.put(c, frequency);\n            maxFreq = Math.max(maxFreq, frequency);\n        }\n        StringBuffer[] buckets = new StringBuffer[maxFreq + 1];\n        for (int i = 0; i <= maxFreq; i++) {\n            buckets[i] = new StringBuffer();\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            char c = entry.getKey();\n            int frequency = entry.getValue();\n            buckets[frequency].append(c);\n        }\n        StringBuffer sb = new StringBuffer();\n        for (int i = maxFreq; i > 0; i--) {\n            StringBuffer bucket = buckets[i];\n            int size = bucket.length();\n            for (int j = 0; j < size; j++) {\n                for (int k = 0; k < i; k++) {\n                    sb.append(bucket.charAt(j));\n                }\n            }\n        }\n        return sb.toString();\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public string FrequencySort(string s) {\n        Dictionary<char, int> dictionary = new Dictionary<char, int>();\n        int maxFreq = 0;\n        int length = s.Length;\n        for (int i = 0; i < length; i++) {\n            char c = s[i];\n            if (dictionary.ContainsKey(c)) {\n                dictionary[c]++;\n            } else {\n                dictionary.Add(c, 1);\n            }\n            maxFreq = Math.Max(maxFreq, dictionary[c]);\n        }\n        StringBuilder[] buckets = new StringBuilder[maxFreq + 1];\n        for (int i = 0; i <= maxFreq; i++) {\n            buckets[i] = new StringBuilder();\n        }\n        foreach (KeyValuePair<char, int> pair in dictionary) {\n            char c = pair.Key;\n            int frequency = pair.Value;\n            buckets[frequency].Append(c);\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = maxFreq; i > 0; i--) {\n            StringBuilder bucket = buckets[i];\n            int size = bucket.Length;\n            for (int j = 0; j < size; j++) {\n                for (int k = 0; k < i; k++) {\n                    sb.Append(bucket[j]);\n                }\n            }\n        }\n        return sb.ToString();\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    string frequencySort(string s) {\n        unordered_map<char, int> mp;\n        int maxFreq = 0;\n        int length = s.size();\n        for (auto &ch : s) {\n            maxFreq = max(maxFreq, ++mp[ch]);\n        }\n        vector<string> buckets(maxFreq + 1);\n        for (auto &[ch, num] : mp) {\n            buckets[num].push_back(ch);\n        }\n        string ret;\n        for (int i = maxFreq; i > 0; i--) {\n            string &bucket = buckets[i];\n            for (auto &ch : bucket) {\n                for (int k = 0; k < i; k++) {\n                    ret.push_back(ch);\n                }\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```C [sol2-C]\n#define HASH_FIND_CHAR(head, findint, out) HASH_FIND(hh, head, findint, sizeof(char), out)\n#define HASH_ADD_CHAR(head, intfield, add) HASH_ADD(hh, head, intfield, sizeof(char), add)\n\nstruct HashTable {\n    char key;\n    int val;\n    UT_hash_handle hh;\n};\n\nchar* frequencySort(char* s) {\n    struct HashTable* hashTable = NULL;\n    int maxFreq = 0;\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        struct HashTable* tmp;\n        HASH_FIND_CHAR(hashTable, &s[i], tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct HashTable));\n            tmp->key = s[i], tmp->val = 1;\n            HASH_ADD_CHAR(hashTable, key, tmp);\n            maxFreq = fmax(maxFreq, 1);\n        } else {\n            maxFreq = fmax(maxFreq, ++tmp->val);\n        }\n    }\n    char* buckets[maxFreq + 1];\n    int bucketsSize[maxFreq + 1];\n    memset(bucketsSize, 0, sizeof(bucketsSize));\n    int retSize = 0;\n    struct HashTable *tmp, *iter;\n    HASH_ITER(hh, hashTable, iter, tmp) {\n        bucketsSize[iter->val]++;\n        retSize += iter->val;\n    }\n    for (int i = 1; i <= maxFreq; i++) {\n        buckets[i] = malloc(sizeof(char) * bucketsSize[i]);\n    }\n    memset(bucketsSize, 0, sizeof(bucketsSize));\n    HASH_ITER(hh, hashTable, iter, tmp) {\n        buckets[iter->val][bucketsSize[iter->val]++] = iter->key;\n    }\n    char* ret = malloc(sizeof(char) * (retSize + 1));\n    retSize = 0;\n    for (int i = maxFreq; i > 0; i--) {\n        char* bucket = buckets[i];\n        for (int j = 0; j < bucketsSize[i]; j++) {\n            for (int k = 0; k < i; k++) {\n                ret[retSize++] = bucket[j];\n            }\n        }\n    }\n    ret[retSize] = '\\0';\n    return ret;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar frequencySort = function(s) {\n    const mp = new Map();\n    let maxFreq = 0;\n    const length = s.length;\n    for (const ch of s) {\n        const frequency = (mp.get(ch) || 0) + 1;\n        mp.set(ch, frequency);\n        maxFreq = Math.max(maxFreq, frequency);\n    }\n    const buckets = new Array(maxFreq + 1).fill(0).map(() => new Array());\n    for (const [ch, num] of mp.entries()) {\n        buckets[num].push(ch);\n    }\n    const ret = [];\n    for (let i = maxFreq; i > 0; i--) {\n        const bucket = buckets[i];\n        for (const ch of bucket) {\n            for (let k = 0; k < i; k++) {\n                ret.push(ch);\n            }\n        }\n    }\n    return ret.join('');\n};\n```\n\n```go [sol2-Golang]\nfunc frequencySort(s string) string {\n    cnt := map[byte]int{}\n    maxFreq := 0\n    for i := range s {\n        cnt[s[i]]++\n        maxFreq = max(maxFreq, cnt[s[i]])\n    }\n\n    buckets := make([][]byte, maxFreq+1)\n    for ch, c := range cnt {\n        buckets[c] = append(buckets[c], ch)\n    }\n\n    ans := make([]byte, 0, len(s))\n    for i := maxFreq; i > 0; i-- {\n        for _, ch := range buckets[i] {\n            ans = append(ans, bytes.Repeat([]byte{ch}, i)...)\n        }\n    }\n    return string(ans)\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + k)$，其中 $n$ 是字符串 $s$ 的长度，$k$ 是字符串 $s$ 包含的不同字符的个数。\n  遍历字符串统计每个字符出现的频率需要 $O(n)$ 的时间。\n  创建桶并将不同字符加入桶需要 $O(k)$ 的时间。\n  生成排序后的字符串，需要 $O(k)$ 的时间遍历桶，以及 $O(n)$ 的时拼接字符串间。\n  因此总时间复杂度是 $O(n + k)$。\n\n- 空间复杂度：$O(n + k)$，其中 $n$ 是字符串 $s$ 的长度，$k$ 是字符串 $s$ 包含的不同字符的个数。空间复杂度主要取决于桶和生成的排序后的字符串。"
}