{
	"titleSlug": "integer-replacement",
	"slug": "zheng-shu-ti-huan-by-leetcode-solution-swef",
	"url": "https://leetcode-cn.com/problems/integer-replacement/solution/zheng-shu-ti-huan-by-leetcode-solution-swef/",
	"content": "#### 方法一：枚举所有的情况\n\n**思路与算法**\n\n我们可以使用递归的方法枚举所有将 $n$ 变为 $1$ 的替换序列：\n\n- 当 $n$ 为偶数时，我们只有唯一的方法将 $n$ 替换为 $\\dfrac{n}{2}$。\n\n- 当 $n$ 为奇数时，我们可以选择将 $n$ 增加 $1$ 或减少 $1$。由于这两种方法都会将 $n$ 变为偶数，那么下一步一定是除以 $2$，因此这里我们可以看成使用两次操作，将 $n$ 变为 $\\dfrac{n+1}{2}$ 或 $\\dfrac{n-1}{2}$。\n\n**细节**\n\n当 $n = 2^{31}-1$ 时，计算 $n+1$ 会导致溢出，因此我们可以使用整数除法 $\\lfloor \\dfrac{n}{2} \\rfloor + 1$ 和 $\\lfloor \\dfrac{n}{2} \\rfloor$ 分别计算 $\\dfrac{n+1}{2}$ 或 $\\dfrac{n-1}{2}$，其中 $\\lfloor \\cdot \\rfloor$ 表示向下取整。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int integerReplacement(int n) {\n        if (n == 1) {\n            return 0;\n        }\n        if (n % 2 == 0) {\n            return 1 + integerReplacement(n / 2);\n        }\n        return 2 + min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int integerReplacement(int n) {\n        if (n == 1) {\n            return 0;\n        }\n        if (n % 2 == 0) {\n            return 1 + integerReplacement(n / 2);\n        }\n        return 2 + Math.min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int IntegerReplacement(int n) {\n        if (n == 1) {\n            return 0;\n        }\n        if (n % 2 == 0) {\n            return 1 + IntegerReplacement(n / 2);\n        }\n        return 2 + Math.Min(IntegerReplacement(n / 2), IntegerReplacement(n / 2 + 1));\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def integerReplacement(self, n: int) -> int:\n        if n == 1:\n            return 0\n        if n % 2 == 0:\n            return 1 + self.integerReplacement(n // 2)\n        return 2 + min(self.integerReplacement(n // 2), self.integerReplacement(n // 2 + 1))\n```\n\n```go [sol1-Golang]\nfunc integerReplacement(n int) int {\n    if n == 1 {\n        return 0\n    }\n    if n%2 == 0 {\n        return 1 + integerReplacement(n/2)\n    }\n    return 2 + min(integerReplacement(n/2), integerReplacement(n/2+1))\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar integerReplacement = function(n) {\n    if (n === 1) {\n        return 0;\n    }\n    if (n % 2 === 0) {\n        return 1 + integerReplacement(Math.floor(n / 2));\n    }\n    return 2 + Math.min(integerReplacement(Math.floor(n / 2)), integerReplacement(Math.floor(n / 2) + 1));\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\phi ^{\\log n})$，其中 $\\phi = \\dfrac{1+\\sqrt{5}}{2} \\approx 1.618$ 表示黄金分割比。\n\n    时间复杂度的准确证明较为复杂，这里给出一种直观上的叙述，感兴趣的读者可以自行展开思考：\n\n    - 在递归的过程中，递归树的同一层上最小的 $n$ 值和最大的 $n$ 值相差不会超过 $1$，这里可以使用数学归纳法证明。\n\n    - 如果递归树的上一层出现的值为 $x$ 和 $x+1$，它们分别被递归调用了 $p$ 和 $q$ 次，而当前层出现的值为 $y$ 和 $y+1$，那么它们分别会被递归调用：\n\n        - 要么 $p$ 和 $p+q$ 次；\n\n        - 要么 $p+q$ 和 $q$ 次。\n    \n        这类似于斐波那契数列的递推式。\n    \n    因此 $l = O(\\log n)$ 层的递归树中所有 $n$ 值被调用的次数之和为 $O(\\text{fib}(l)) = O(\\text{fib}(\\log n))$，其中 $\\text{fib}(\\cdot)$ 表示斐波那契数列的对应项。由于 $\\text{fib}(l) = O(\\phi^l)$，因此算法的时间复杂度为 $O(\\phi ^{\\log n})$。\n\n- 空间复杂度：$O(\\log n)$。每一次递归都会将 $n$ 减小一半，因此需要 $O(\\log n)$ 的栈空间。\n\n#### 方法二：记忆化搜索\n\n**思路与算法**\n\n我们给方法一的递归加上记忆化，这样递归树的每一层最多只会计算两个 $n$ 值，时间复杂度降低为 $O(\\log n)$。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    unordered_map<int, int> memo;\n\npublic:\n    int integerReplacement(int n) {\n        if (n == 1) {\n            return 0;\n        }\n        if (memo.count(n)) {\n            return memo[n];\n        }\n        if (n % 2 == 0) {\n            return memo[n] = 1 + integerReplacement(n / 2);\n        }\n        return memo[n] = 2 + min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    Map<Integer, Integer> memo = new HashMap<Integer, Integer>();\n\n    public int integerReplacement(int n) {\n        if (n == 1) {\n            return 0;\n        }\n        if (!memo.containsKey(n)) {\n            if (n % 2 == 0) {\n                memo.put(n, 1 + integerReplacement(n / 2));\n            } else {\n                memo.put(n, 2 + Math.min(integerReplacement(n / 2), integerReplacement(n / 2 + 1)));\n            }\n        }\n        return memo.get(n);\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    Dictionary<int, int> memo = new Dictionary<int, int>();\n\n    public int IntegerReplacement(int n) {\n        if (n == 1) {\n            return 0;\n        }\n        if (!memo.ContainsKey(n)) {\n            if (n % 2 == 0) {\n                memo.Add(n, 1 + IntegerReplacement(n / 2));\n            } else {\n                memo.Add(n, 2 + Math.Min(IntegerReplacement(n / 2), IntegerReplacement(n / 2 + 1)));\n            }\n        }\n        return memo[n];\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    @cache\n    def integerReplacement(self, n: int) -> int:\n        if n == 1:\n            return 0\n        if n % 2 == 0:\n            return 1 + self.integerReplacement(n // 2)\n        return 2 + min(self.integerReplacement(n // 2), self.integerReplacement(n // 2 + 1))\n```\n\n```go [sol2-Golang]\nvar memo map[int]int\n\nfunc _integerReplacement(n int) (res int) {\n    if n == 1 {\n        return 0\n    }\n    if res, ok := memo[n]; ok {\n        return res\n    }\n    defer func() { memo[n] = res }()\n    if n%2 == 0 {\n        return 1 + _integerReplacement(n/2)\n    }\n    return 2 + min(_integerReplacement(n/2), _integerReplacement(n/2+1))\n}\n\nfunc integerReplacement(n int) (res int) {\n    memo = map[int]int{}\n    return _integerReplacement(n)\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```\n\n```JavaScript [sol2-JavaScript]\nconst memo = new Map();\nvar integerReplacement = function(n) {\n    if (n === 1) {\n        return 0;\n    }\n    if (!memo.has(n)) {\n        if (n % 2 === 0) {\n            memo.set(n, 1 + integerReplacement(Math.floor(n / 2)));\n        } else {\n            memo.set(n, 2 + Math.min(integerReplacement(Math.floor(n / 2)), integerReplacement(Math.floor(n / 2) + 1)));\n        }\n    }\n    return memo.get(n);\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$。\n\n- 空间复杂度：$O(\\log n)$，记忆化搜索需要的空间与栈空间相同，同样为 $O(\\log n)$。\n\n#### 方法三：贪心\n\n**思路与算法**\n\n实际上，方法一和方法二中的递归枚举中的「最优解」是固定的：\n\n- 当 $n$ 为偶数时，我们只有唯一的方法将 $n$ 替换为 $\\dfrac{n}{2}$；\n\n- 当 $n$ 为奇数时，$n$ 除以 $4$ 的余数要么为 $1$，要么为 $3$。\n\n    - 如果为 $1$，我们可以断定，应该将 $n$ 变成 $\\dfrac{n-1}{2}$。如果我们必须将 $n$ 变成 $\\dfrac{n+1}{2}$ 才能得到最优解，而 $\\dfrac{n+1}{2}$ 是奇数，那么：\n\n        - 如果下一步进行 $-1$ 再除以 $2$，得到 $\\dfrac{n-1}{4}$，那么从 $\\dfrac{n-1}{2}$ 可以除以 $2$ 得到同样的结果；\n\n        - 如果下一步进行 $+1$ 再除以 $2$，得到 $\\dfrac{n+3}{4}$，那么从 $\\dfrac{n-1}{2}$ 可以除以 $2$ 再 $+1$ 得到同样的结果。\n    \n        因此将 $n$ 变成 $\\dfrac{n-1}{2}$ 总是不会劣于 $\\dfrac{n+1}{2}$。\n    \n    - 如果为 $3$，我们可以断定，应该将 $n$ 变成 $\\dfrac{n+1}{2}$。如果我们必须将 $n$ 变成 $\\dfrac{n-1}{2}$ 才能得到最优解，而 $\\dfrac{n-1}{2}$ 是奇数，那么：\n\n        - 如果下一步进行 $-1$ 再除以 $2$，得到 $\\dfrac{n-3}{4}$，那么从 $\\dfrac{n+1}{2}$ 可以除以 $2$ 再 $-1$ 得到同样的结果。\n\n        - 如果下一步进行 $+1$ 再除以 $2$，得到 $\\dfrac{n+1}{4}$，那么从 $\\dfrac{n+1}{2}$ 可以除以 $2$ 得到同样的结果。\n    \n        因此将 $n$ 变成 $\\dfrac{n+1}{2}$ 总是不会劣于 $\\dfrac{n-1}{2}$。但这里还需要考虑一种例外的情况，如果 $\\dfrac{n-1}{2}$ 已经为 $1$，即 $n=3$ 时，后续就无需再进行任何操作，此时将 $n$ 变成 $\\dfrac{n-1}{2}$ 才是最优的。\n\n因此，我们只需要根据上面的分类讨论，求出将 $n$ 变为 $1$ 的操作次数即可。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int integerReplacement(int n) {\n        int ans = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                ++ans;\n                n /= 2;\n            }\n            else if (n % 4 == 1) {\n                ans += 2;\n                n /= 2;\n            }\n            else {\n                if (n == 3) {\n                    ans += 2;\n                    n = 1;\n                }\n                else {\n                    ans += 2;\n                    n = n / 2 + 1;\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int integerReplacement(int n) {\n        int ans = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                ++ans;\n                n /= 2;\n            } else if (n % 4 == 1) {\n                ans += 2;\n                n /= 2;\n            } else {\n                if (n == 3) {\n                    ans += 2;\n                    n = 1;\n                } else {\n                    ans += 2;\n                    n = n / 2 + 1;\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public int IntegerReplacement(int n) {\n        int ans = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                ++ans;\n                n /= 2;\n            } else if (n % 4 == 1) {\n                ans += 2;\n                n /= 2;\n            } else {\n                if (n == 3) {\n                    ans += 2;\n                    n = 1;\n                } else {\n                    ans += 2;\n                    n = n / 2 + 1;\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def integerReplacement(self, n: int) -> int:\n        ans = 0\n        while n != 1:\n            if n % 2 == 0:\n                ans += 1\n                n //= 2\n            elif n % 4 == 1:\n                ans += 2\n                n //= 2\n            else:\n                if n == 3:\n                    ans += 2\n                    n = 1\n                else:\n                    ans += 2\n                    n = n // 2 + 1\n        return ans\n```\n\n```go [sol3-Golang]\nfunc integerReplacement(n int) (ans int) {\n    for n != 1 {\n        switch {\n        case n%2 == 0:\n            ans++\n            n /= 2\n        case n%4 == 1:\n            ans += 2\n            n /= 2\n        case n == 3:\n            ans += 2\n            n = 1\n        default:\n            ans += 2\n            n = n/2 + 1\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar integerReplacement = function(n) {\n    let ans = 0;\n    while (n !== 1) {\n        if (n % 2 === 0) {\n            ++ans;\n            n = Math.floor(n / 2);\n        } else if (n % 4 === 1) {\n            ans += 2;\n            n = Math.floor(n / 2);\n        } else {\n            if (n === 3) {\n                ans += 2;\n                n = 1;\n            } else {\n                ans += 2;\n                n = Math.floor(n / 2) + 1;\n            }\n        }\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$。\n\n- 空间复杂度：$O(1)$。"
}