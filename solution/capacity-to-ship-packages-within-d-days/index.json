{
	"titleSlug": "capacity-to-ship-packages-within-d-days",
	"slug": "zai-d-tian-nei-song-da-bao-guo-de-neng-l-ntml",
	"url": "https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/solution/zai-d-tian-nei-song-da-bao-guo-de-neng-l-ntml/",
	"content": "#### 方法一：二分查找转化为判定问题\n\n**思路与算法**\n\n假设当船的运载能力为 $x$ 时，我们可以在 $\\textit{days}$ 天内运送完所有包裹，那么只要运载能力大于 $x$，我们同样可以在 $\\textit{days}$ 天内运送完所有包裹：我们只需要使用运载能力为 $x$ 时的运送方法即可。\n\n这样一来，我们就得到了一个非常重要的结论：\n\n> 存在一个运载能力的「下限」$x_\\textit{ans}$，使得当 $x \\geq x_\\textit{ans}$ 时，我们可以在 $\\textit{days}$ 天内运送完所有包裹；当 $x < x_\\textit{ans}$ 时，我们无法在 $\\textit{days}$ 天内运送完所有包裹。\n\n同时，$x_\\textit{ans}$ 即为我们需要求出的答案。因此，我们就可以使用二分查找的方法找出 $x_\\textit{ans}$ 的值。\n\n在二分查找的每一步中，我们实际上需要解决一个**判定问题**：给定船的运载能力 $x$，我们是否可以在 $\\textit{days}$ 天内运送完所有包裹呢？这个判定问题可以通过贪心的方法来解决：\n\n> 由于我们必须按照数组 $\\textit{weights}$ 中包裹的顺序进行运送，因此我们从数组 $\\textit{weights}$ 的首元素开始遍历，将连续的包裹都安排在同一天进行运送。当这批包裹的重量大于运载能力 $x$ 时，我们就需要将最后一个包裹拿出来，安排在新的一天，并继续往下遍历。当我们遍历完整个数组后，就得到了最少需要运送的天数。\n\n我们将「最少需要运送的天数」与 $\\textit{days}$ 进行比较，就可以解决这个判定问题。当其小于等于 $\\textit{days}$ 时，我们就忽略二分的右半部分区间；当其大于 $\\textit{days}$ 时，我们就忽略二分的左半部分区间。\n\n**细节**\n\n二分查找的初始左右边界应当如何计算呢？\n\n对于左边界而言，由于我们不能「拆分」一个包裹，因此船的运载能力不能小于所有包裹中最重的那个的重量，即左边界为数组 $\\textit{weights}$ 中元素的最大值。\n\n对于右边界而言，船的运载能力也不会大于所有包裹的重量之和，即右边界为数组 $\\textit{weights}$ 中元素的和。\n\n我们从上述左右边界开始进行二分查找，就可以保证找到最终的答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int shipWithinDays(vector<int>& weights, int days) {\n        // 确定二分查找左右边界\n        int left = *max_element(weights.begin(), weights.end()), right = accumulate(weights.begin(), weights.end(), 0);\n        while (left < right) {\n            int mid = (left + right) / 2;\n            // need 为需要运送的天数\n            // cur 为当前这一天已经运送的包裹重量之和\n            int need = 1, cur = 0;\n            for (int weight: weights) {\n                if (cur + weight > mid) {\n                    ++need;\n                    cur = 0;\n                }\n                cur += weight;\n            }\n            if (need <= days) {\n                right = mid;\n            }\n            else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int shipWithinDays(int[] weights, int days) {\n        // 确定二分查找左右边界\n        int left = Arrays.stream(weights).max().getAsInt(), right = Arrays.stream(weights).sum();\n        while (left < right) {\n            int mid = (left + right) / 2;\n            // need 为需要运送的天数\n            // cur 为当前这一天已经运送的包裹重量之和\n            int need = 1, cur = 0;\n            for (int weight : weights) {\n                if (cur + weight > mid) {\n                    ++need;\n                    cur = 0;\n                }\n                cur += weight;\n            }\n            if (need <= days) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def shipWithinDays(self, weights: List[int], days: int) -> int:\n        # 确定二分查找左右边界\n        left, right = max(weights), sum(weights)\n        while left < right:\n            mid = (left + right) // 2\n            # need 为需要运送的天数\n            # cur 为当前这一天已经运送的包裹重量之和\n            need, cur = 1, 0\n            for weight in weights:\n                if cur + weight > mid:\n                    need += 1\n                    cur = 0\n                cur += weight\n            \n            if need <= days:\n                right = mid\n            else:\n                left = mid + 1\n        \n        return left\n```\n\n```JavaScript [sol1-JavaScript]\nvar shipWithinDays = function(weights, days) {\n    // 确定二分查找左右边界\n    let left = Math.max(...weights), right = weights.reduce((a, b) => a + b);\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n        //  need 为需要运送的天数\n        // cur 为当前这一天已经运送的包裹重量之和\n        let need = 1, cur = 0;\n        for (const weight of weights) {\n            if (cur + weight > mid) {\n                need++;\n                cur = 0;\n            } \n            cur += weight;\n        }\n\n        if (need <= days) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n};\n```\n\n```go [sol1-Golang]\nfunc shipWithinDays(weights []int, days int) int {\n    // 确定二分查找左右边界\n    left, right := 0, 0\n    for _, w := range weights {\n        if w > left {\n            left = w\n        }\n        right += w\n    }\n    return left + sort.Search(right-left, func(x int) bool {\n        x += left\n        day := 1 // 需要运送的天数\n        sum := 0 // 当前这一天已经运送的包裹重量之和\n        for _, w := range weights {\n            if sum+w > x {\n                day++\n                sum = 0\n            }\n            sum += w\n        }\n        return day <= days\n    })\n}\n```\n\n```C [sol1-C]\nint shipWithinDays(int* weights, int weightsSize, int days) {\n    // 确定二分查找左右边界\n    int left = 0, right = 0;\n    for (int i = 0; i < weightsSize; i++) {\n        left = fmax(left, weights[i]);\n        right += weights[i];\n    }\n    while (left < right) {\n        int mid = (left + right) / 2;\n        // need 为需要运送的天数\n        // cur 为当前这一天已经运送的包裹重量之和\n        int need = 1, cur = 0;\n        for (int i = 0; i < weightsSize; i++) {\n            if (cur + weights[i] > mid) {\n                ++need;\n                cur = 0;\n            }\n            cur += weights[i];\n        }\n        if (need <= days) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O\\big(n\\log(\\Sigma w)\\big)$，其中 $n$ 是数组 $\\textit{weights}$ 的长度，$\\Sigma w$ 是数组 $\\textit{weights}$ 中元素的和。二分查找需要执行的次数为 $O(\\log(\\Sigma w))$，每一步中需要对数组 $\\textit{weights}$ 进行依次遍历，时间为 $O(n)$，相乘即可得到总时间复杂度。\n\n- 空间复杂度：$O(1)$。"
}