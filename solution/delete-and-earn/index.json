{
	"titleSlug": "delete-and-earn",
	"slug": "shan-chu-bing-huo-de-dian-shu-by-leetcod-x1pu",
	"url": "https://leetcode-cn.com/problems/delete-and-earn/solution/shan-chu-bing-huo-de-dian-shu-by-leetcod-x1pu/",
	"content": "#### 方法一：动态规划\n\n**思路**\n\n根据题意，在选择了元素 $x$ 后，该元素以及所有等于 $x-1$ 或 $x+1$ 的元素会从数组中删去。若还有多个值为 $x$ 的元素，由于所有等于 $x-1$ 或 $x+1$ 的元素已经被删除，我们可以直接删除 $x$ 并获得其点数。因此若选择了 $x$，所有等于 $x$ 的元素也应一同被选择，以尽可能多地获得点数。\n\n记元素 $x$ 在数组中出现的次数为 $c_x$，我们可以用一个数组 $sum$ 记录数组 $\\textit{nums}$ 中所有相同元素之和，即 $\\textit{sum}[x]=x\\cdot c_x$。若选择了 $x$，则可以获取 $\\textit{sum}[x]$ 的点数，且无法再选择 $x-1$ 和 $x+1$。这与「[198. 打家劫舍](https://leetcode-cn.com/problems/house-robber/)」是一样的，在统计出 $\\textit{sum}$ 数组后，读者可参考「[198. 打家劫舍的官方题解](https://leetcode-cn.com/problems/house-robber/solution/da-jia-jie-she-by-leetcode-solution/)」中的动态规划过程计算出答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    int rob(vector<int> &nums) {\n        int size = nums.size();\n        int first = nums[0], second = max(nums[0], nums[1]);\n        for (int i = 2; i < size; i++) {\n            int temp = second;\n            second = max(first + nums[i], second);\n            first = temp;\n        }\n        return second;\n    }\n\npublic:\n    int deleteAndEarn(vector<int> &nums) {\n        int maxVal = 0;\n        for (int val : nums) {\n            maxVal = max(maxVal, val);\n        }\n        vector<int> sum(maxVal + 1);\n        for (int val : nums) {\n            sum[val] += val;\n        }\n        return rob(sum);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int deleteAndEarn(int[] nums) {\n        int maxVal = 0;\n        for (int val : nums) {\n            maxVal = Math.max(maxVal, val);\n        }\n        int[] sum = new int[maxVal + 1];\n        for (int val : nums) {\n            sum[val] += val;\n        }\n        return rob(sum);\n    }\n\n    public int rob(int[] nums) {\n        int size = nums.length;\n        int first = nums[0], second = Math.max(nums[0], nums[1]);\n        for (int i = 2; i < size; i++) {\n            int temp = second;\n            second = Math.max(first + nums[i], second);\n            first = temp;\n        }\n        return second;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int DeleteAndEarn(int[] nums) {\n        int maxVal = 0;\n        foreach (int val in nums) {\n            maxVal = Math.Max(maxVal, val);\n        }\n        int[] sum = new int[maxVal + 1];\n        foreach (int val in nums) {\n            sum[val] += val;\n        }\n        return Rob(sum);\n    }\n\n    public int Rob(int[] nums) {\n        int size = nums.Length;\n        int first = nums[0], second = Math.Max(nums[0], nums[1]);\n        for (int i = 2; i < size; i++) {\n            int temp = second;\n            second = Math.Max(first + nums[i], second);\n            first = temp;\n        }\n        return second;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc deleteAndEarn(nums []int) int {\n    maxVal := 0\n    for _, val := range nums {\n        maxVal = max(maxVal, val)\n    }\n    sum := make([]int, maxVal+1)\n    for _, val := range nums {\n        sum[val] += val\n    }\n    return rob(sum)\n}\n\nfunc rob(nums []int) int {\n    first, second := nums[0], max(nums[0], nums[1])\n    for i := 2; i < len(nums); i++ {\n        first, second = second, max(first+nums[i], second)\n    }\n    return second\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        maxVal = max(nums)\n        total = [0] * (maxVal + 1)\n        for val in nums:\n            total[val] += val\n        \n        def rob(nums: List[int]) -> int:\n            size = len(nums)\n            first, second = nums[0], max(nums[0], nums[1])\n            for i in range(2, size):\n                first, second = second, max(first + nums[i], second)\n            return second\n        \n        return rob(total)\n```\n\n```C [sol1-C]\nint rob(int *nums, int numsSize) {\n    int first = nums[0], second = fmax(nums[0], nums[1]);\n    for (int i = 2; i < numsSize; i++) {\n        int temp = second;\n        second = fmax(first + nums[i], second);\n        first = temp;\n    }\n    return second;\n}\n\nint deleteAndEarn(int *nums, int numsSize) {\n    int maxVal = 0;\n    for (int i = 0; i < numsSize; i++) {\n        maxVal = fmax(maxVal, nums[i]);\n    }\n    int sum[maxVal + 1];\n    memset(sum, 0, sizeof(sum));\n    for (int i = 0; i < numsSize; i++) {\n        sum[nums[i]] += nums[i];\n    }\n    return rob(sum, maxVal + 1);\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar deleteAndEarn = function(nums) {\n    let maxVal = 0;\n    for (const val of nums) {\n        maxVal = Math.max(maxVal, val);\n    }\n    const sum = new Array(maxVal + 1).fill(0);\n    for (const val of nums) {\n        sum[val] += val;\n    }\n    return rob(sum);\n};\n\nconst rob = (nums) => {\n    const size = nums.length;\n    let first = nums[0], second = Math.max(nums[0], nums[1]);\n    for (let i = 2; i < size; i++) {\n        let temp = second;\n        second = Math.max(first + nums[i], second);\n        first = temp;\n    }\n    return second;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N+M)$，其中 $N$ 是数组 $\\textit{nums}$ 的长度，$M$ 是 $\\textit{nums}$ 中元素的最大值。\n\n- 空间复杂度：$O(M)$。\n\n#### 方法二：排序 + 动态规划\n\n注意到若 $\\textit{nums}$ 中不存在某个元素 $x$，则选择任一小于 $x$ 的元素不会影响到大于 $x$ 的元素的选择。因此我们可以将 $\\textit{nums}$ 排序后，将其划分成若干连续子数组，子数组内任意相邻元素之差不超过 $1$。对每个子数组按照方法一的动态规划过程计算出结果，累加所有结果即为答案。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    int rob(vector<int> &nums) {\n        int size = nums.size();\n        if (size == 1) {\n            return nums[0];\n        }\n        int first = nums[0], second = max(nums[0], nums[1]);\n        for (int i = 2; i < size; i++) {\n            int temp = second;\n            second = max(first + nums[i], second);\n            first = temp;\n        }\n        return second;\n    }\n\npublic:\n    int deleteAndEarn(vector<int> &nums) {\n        int n = nums.size();\n        int ans = 0;\n        sort(nums.begin(), nums.end());\n        vector<int> sum = {nums[0]};\n        for (int i = 1; i < n; ++i) {\n            int val = nums[i];\n            if (val == nums[i - 1]) {\n                sum.back() += val;\n            } else if (val == nums[i - 1] + 1) {\n                sum.push_back(val);\n            } else {\n                ans += rob(sum);\n                sum = {val};\n            }\n        }\n        ans += rob(sum);\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int deleteAndEarn(int[] nums) {\n        int n = nums.length;\n        int ans = 0;\n        Arrays.sort(nums);\n        List<Integer> sum = new ArrayList<Integer>();\n        sum.add(nums[0]);\n        int size = 1;\n        for (int i = 1; i < n; ++i) {\n            int val = nums[i];\n            if (val == nums[i - 1]) {\n                sum.set(size - 1, sum.get(size - 1) + val);\n            } else if (val == nums[i - 1] + 1) {\n                sum.add(val);\n                ++size;\n            } else {\n                ans += rob(sum);\n                sum.clear();\n                sum.add(val);\n                size = 1;\n            }\n        }\n        ans += rob(sum);\n        return ans;\n    }\n\n    public int rob(List<Integer> nums) {\n        int size = nums.size();\n        if (size == 1) {\n            return nums.get(0);\n        }\n        int first = nums.get(0), second = Math.max(nums.get(0), nums.get(1));\n        for (int i = 2; i < size; i++) {\n            int temp = second;\n            second = Math.max(first + nums.get(i), second);\n            first = temp;\n        }\n        return second;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int DeleteAndEarn(int[] nums) {\n        int n = nums.Length;\n        int ans = 0;\n        Array.Sort(nums);\n        IList<int> sum = new List<int>();\n        sum.Add(nums[0]);\n        int size = 1;\n        for (int i = 1; i < n; ++i) {\n            int val = nums[i];\n            if (val == nums[i - 1]) {\n                sum[size - 1] += val;\n            } else if (val == nums[i - 1] + 1) {\n                sum.Add(val);\n                ++size;\n            } else {\n                ans += Rob(sum);\n                sum.Clear();\n                sum.Add(val);\n                size = 1;\n            }\n        }\n        ans += Rob(sum);\n        return ans;\n    }\n\n    public int Rob(IList<int> nums) {\n        int size = nums.Count;\n        if (size == 1) {\n            return nums[0];\n        }\n        int first = nums[0], second = Math.Max(nums[0], nums[1]);\n        for (int i = 2; i < size; i++) {\n            int temp = second;\n            second = Math.Max(first + nums[i], second);\n            first = temp;\n        }\n        return second;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc deleteAndEarn(nums []int) (ans int) {\n    sort.Ints(nums)\n    sum := []int{nums[0]}\n    for i := 1; i < len(nums); i++ {\n        if val := nums[i]; val == nums[i-1] {\n            sum[len(sum)-1] += val\n        } else if val == nums[i-1]+1 {\n            sum = append(sum, val)\n        } else {\n            ans += rob(sum)\n            sum = []int{val}\n        }\n    }\n    ans += rob(sum)\n    return\n}\n\nfunc rob(nums []int) int {\n    if len(nums) == 1 {\n        return nums[0]\n    }\n    first, second := nums[0], max(nums[0], nums[1])\n    for i := 2; i < len(nums); i++ {\n        first, second = second, max(first+nums[i], second)\n    }\n    return second\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        def rob(nums: List[int]) -> int:\n            size = len(nums)\n            if size == 1:\n                return nums[0]\n\n            first, second = nums[0], max(nums[0], nums[1])\n            for i in range(2, size):\n                first, second = second, max(first + nums[i], second)\n            return second\n        \n        n = len(nums)\n        ans = 0\n        nums.sort()\n        total = [nums[0]]\n\n        for i in range(1, n):\n            val = nums[i]\n            if val == nums[i - 1]:\n                total[-1] += val\n            elif val == nums[i - 1] + 1:\n                total.append(val)\n            else:\n                ans += rob(total)\n                total = [val]\n        \n        ans += rob(total)\n        return ans\n```\n\n```C [sol2-C]\nint rob(int *nums, int numsSize) {\n    if (numsSize == 1) {\n        return nums[0];\n    }\n    int first = nums[0], second = fmax(nums[0], nums[1]);\n    for (int i = 2; i < numsSize; i++) {\n        int temp = second;\n        second = fmax(first + nums[i], second);\n        first = temp;\n    }\n    return second;\n}\n\nint cmp(int *a, int *b) {\n    return *a - *b;\n}\n\nint deleteAndEarn(int *nums, int numsSize) {\n    int ans = 0;\n    qsort(nums, numsSize, sizeof(int), cmp);\n    int sum[numsSize], sumSize = 0;\n    sum[sumSize++] = nums[0];\n    for (int i = 1; i < numsSize; ++i) {\n        int val = nums[i];\n        if (val == nums[i - 1]) {\n            sum[sumSize - 1] += val;\n        } else if (val == nums[i - 1] + 1) {\n            sum[sumSize++] = val;\n        } else {\n            ans += rob(sum, sumSize);\n            sumSize = 0;\n            sum[sumSize++] = val;\n        }\n    }\n    ans += rob(sum, sumSize);\n    return ans;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar deleteAndEarn = function(nums) {\n    const rob = (nums) => {\n        const size = nums.length;\n        if (size === 1) {\n            return nums[0];\n        }\n\n        let [first, second] = [nums[0], Math.max(nums[0], nums[1])];\n        for (let i = 2; i < size; i++) {\n            [first, second] = [second, Math.max(first + nums[i], second)];\n        }\n        return second;\n    }\n\n    const n = nums.length;\n    let ans = 0;\n    nums.sort((a, b) => a - b);\n    total = [nums[0]];\n\n    for (let i = 1; i < n; i++) {\n        const val = nums[i];\n        if (val === nums[i - 1]) {\n            total[total.length - 1] += val;\n        } else if (val === nums[i - 1] + 1) {\n            total.push(val);\n        } else {\n            ans += rob(total);\n            total = [val];\n        }\n    }\n    ans += rob(total);\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\log N)$，其中 $N$ 是数组 $\\textit{nums}$ 的长度。对 $\\textit{nums}$ 排序需要花费 $O(N\\log N)$ 的时间，遍历计算需要花费 $O(N)$ 的时间，故总的时间复杂度为 $O(N\\log N)$。\n\n- 空间复杂度：$O(N)$。统计 $\\textit{sum}$ 至多需要花费 $O(N)$ 的空间。"
}