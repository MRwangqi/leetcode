{
	"titleSlug": "cat-and-mouse-ii",
	"slug": "mao-he-lao-shu-ii-by-leetcode-solution-e5io",
	"url": "https://leetcode-cn.com/problems/cat-and-mouse-ii/solution/mao-he-lao-shu-ii-by-leetcode-solution-e5io/",
	"content": "#### 前言\n\n这道题是「[913. 猫和老鼠](https://leetcode.cn/problems/cat-and-mouse)」的进阶，建议读者在阅读本文之前首先阅读「[913. 猫和老鼠的官方题解](https://leetcode.cn/problems/cat-and-mouse/solution/mao-he-lao-shu-by-leetcode-solution-444x)」，了解博弈问题中的必胜状态、必败状态与必和状态的概念，以及最优策略。\n\n博弈问题通常可以使用动态规划求解。由于动态规划的时间复杂度和游戏轮数有关，因此动态规划的时间复杂度较高。本文不具体介绍动态规划的解法，感兴趣的读者可以自行尝试。\n\n博弈问题的另一种解法是拓扑排序。和动态规划相比，拓扑排序的时间复杂度和游戏轮数无关，因此拓扑排序的时间复杂度较低。\n\n#### 方法一：拓扑排序\n\n**概述**\n\n给定的网格包含 $\\textit{rows}$ 行和 $\\textit{cols}$ 列，网格中的单元格总数是 $\\textit{total} = \\textit{rows} \\times \\textit{cols}$。每个单元格对应一个编号，第 $i$ 行第 $j$ 列的单元格编号是 $i \\times \\textit{cols} + j$，其中 $0 \\le i < \\textit{rows}$，$0 \\le j < \\textit{cols}$。\n\n首先遍历网格，得到猫和老鼠初始时所在的单元格以及食物所在的单元格，然后计算获胜方。\n\n**求解简化问题**\n\n这道题规定了移动次数上限为 $1000$，如果在 $1000$ 次移动之内老鼠不能获胜，则猫获胜。可以首先考虑一个简化问题，在没有移动次数上限的情况下计算获胜方。该简化问题可以使用拓扑排序得到结果。\n\n游戏中的状态由老鼠的位置、猫的位置和轮到移动的一方三个因素决定。初始时，只有边界情况的胜负结果已知，其余所有状态的结果都初始化为未知。边界情况为直接确定胜负的情况，包括三种情况：\n\n- 猫和老鼠在同一个单元格，无论在哪个单元格，都是猫获胜；\n\n- 猫和食物在同一个单元格，无论老鼠在哪个单元格，都是猫获胜；\n\n- 老鼠和食物在同一个单元格，只要猫和食物不在同一个单元格，无论猫在哪个单元格，都是老鼠获胜。\n\n从边界情况出发遍历其他情况。对于当前状态，可以得到老鼠所在的单元格、猫所在的单元格和轮到移动的一方，根据当前状态可知上一轮的所有可能状态，其中上一轮的移动方和当前的移动方相反，上一轮的移动方在上一轮状态和当前状态所在的单元格相同或不同（注意可以停留在原地）。假设当前状态是老鼠所在的单元格编号是 $\\textit{mouse}$，猫所在的单元格编号是 $\\textit{cat}$，则根据当前的移动方，可以得到上一轮的所有可能状态：\n\n- 如果当前的移动方是老鼠，则上一轮的移动方是猫，上一轮状态中老鼠所在的单元格编号是 $\\textit{mouse}$，猫所在的单元格编号可能是 $\\textit{cat}$ 或者向四个方向之一跳跃到达的单元格编号，跳跃的距离不超过 $\\textit{catJump}$ 且不能跳过墙及不能跳出网格；\n\n- 如果当前的移动方是猫，则上一轮的移动方是老鼠，上一轮状态中猫所在的单元格编号是 $\\textit{cat}$，老鼠所在的单元格编号可能是 $\\textit{mouse}$ 或者向四个方向之一跳跃到达的单元格编号，跳跃的距离不超过 $\\textit{mouseJump}$ 且不能跳过墙及不能跳出网格。\n\n对于上一轮的每一种可能的状态，如果该状态的结果已知，则不需要重复计算该状态的结果，只有对结果未知的状态，才需要计算该状态的结果。对于上一轮的移动方，只有当可以确定上一轮状态是必胜状态或者必败状态时，才更新上一轮状态的结果。\n\n- 如果上一轮的移动方和当前状态的获胜方相同，由于当前状态为上一轮的移动方的必胜状态，因此上一轮的移动方一定可以移动到当前状态而获胜，上一轮状态为上一轮的移动方的必胜状态。\n\n- 如果上一轮的移动方和当前状态的获胜方不同，则上一轮的移动方需要尝试其他可能的移动，可能有以下三种情况：\n\n   - 如果存在一种移动可以到达上一轮的移动方的必胜状态，则上一轮状态为上一轮的移动方的必胜状态；\n\n   - 如果所有的移动都到达上一轮的移动方的必败状态，则上一轮状态为上一轮的移动方的必败状态；\n\n   - 如果所有的移动都不能到达上一轮的移动方的必胜状态，但是存在一种移动可以到达上一轮的移动方的未知状态，则上一轮状态为上一轮的移动方的未知状态。\n\n其中，对于必败状态与未知状态的判断依据为上一轮的移动方可能的移动是都到达必败状态还是可以到达未知状态。为了实现必败状态与未知状态的判断，需要记录每个状态的度，初始时每个状态的度为当前玩家在当前单元格可以到达的单元格数，由于可以停留在原地，因此初始时每个状态的度为当前玩家在当前单元格可以跳跃到达的单元格数加 $1$。\n\n遍历过程中，从当前状态出发遍历上一轮的所有可能状态，如果上一轮状态的结果未知且上一轮的移动方和当前状态的获胜方不同，则将上一轮状态的度减 $1$。如果上一轮状态的度减少到 $0$，则从上一轮状态出发到达的所有状态都是上一轮的移动方的必败状态，因此上一轮状态也是上一轮的移动方的必败状态。\n\n在确定上一轮状态的结果（必胜或必败）之后，即可从上一轮状态出发，遍历其他的未知状态。当没有更多的状态可以确定胜负结果时，遍历结束，此时即可得到初始状态的结果。\n\n**求解原始问题**\n\n上述解法为简化问题的解法，没有考虑移动次数的上限。由于移动次数的限制只会影响到平局以及老鼠获胜的条件，因此只需要对平局和老鼠获胜的情况考虑移动次数。\n\n平局对应上述解法中的未知状态，表示当猫和老鼠都按照最优策略参与游戏时，双方都无法在有限的移动次数内到达食物所在的单元格，移动次数一定会超过老鼠获胜的上限，因此未知状态对应的结果都是猫获胜。\n\n如果在简化问题中，从初始状态开始游戏的结果是老鼠获胜，即老鼠先到达食物，则在原始问题中，需要计算从初始状态至老鼠到达食物的移动次数，只有当移动次数不超过 $1000$ 时，老鼠才能获胜，否则猫获胜。\n\n为了计算从初始状态至老鼠到达食物的移动次数，在拓扑排序的过程中除了记录每个状态的结果以外，还需要记录从边界情况到达每个状态的移动次数，等价于从每个状态到边界情况的移动次数。每个状态对应的移动次数计算方法如下：\n\n- 边界情况可以直接确定胜负，因此移动次数为 $0$；\n\n- 如果状态 $s_1$ 和状态 $s_2$ 相邻（即状态 $s_2$ 是状态 $s_1$ 的上一轮的状态之一），且状态 $s_1$ 的结果和移动次数已知，记状态 $s_1$ 的移动次数为 $x$，如果可以确定状态 $s_2$ 的结果，则状态 $s_2$ 的移动次数为 $x + 1$。\n\n**证明**\n\n对于上述解法的正确性证明，需要证明两点，一是未知状态的正确性，二是移动次数的正确性。\n\n证明一：未知状态的正确性\n\n遍历结束之后，如果一个状态的结果未知，则该状态满足以下两个条件：\n\n- 从该状态出发，任何移动都无法到达该状态的移动方的必胜状态；\n\n- 从该状态出发，存在一种移动可以到达未知状态。\n\n对于结果未知的状态，如果其实际结果是该状态的移动方必胜，则一定存在一个下一轮状态，为当前状态的移动方的必胜状态，在根据下一轮状态的结果标记当前状态的结果时会将当前状态标记为当前状态的移动方的必胜状态，和结果未知矛盾。\n\n对于结果未知的状态，如果其实际结果是该状态的移动方必败，则所有的下一轮状态都为当前状态的移动方的必败状态，在根据下一轮状态的结果标记当前状态的结果时会将当前状态标记为当前状态的移动方的必败状态，和结果未知矛盾。\n\n因此，对于结果不是任何一方必胜的状态，实际结果一定是未知。根据游戏规则，未知状态表示在该状态下当猫和老鼠都按照最优策略参与游戏时，双方都无法在有限的移动次数内到达食物所在的单元格，移动次数一定会超过老鼠获胜的上限，因此未知状态对应的结果都是猫获胜。\n\n证明二：移动次数的正确性\n\n在考虑移动次数的情况下，每个玩家的最优策略应满足以下三点：\n\n1. 当自己可以到达必胜状态时，应将移动次数最小化；\n\n2. 当自己无法到达必胜状态时，如果可以避免自己到达必败状态，则应到达未知状态；\n\n3. 当无法避免自己到达必败状态时，应将移动次数最大化。\n\n由于拓扑排序的实现方式是广度优先搜索，因此拓扑排序的过程中遍历状态的顺序为移动次数递增的顺序。\n\n边界情况的移动次数为 $0$。从已知状态出发计算未知状态的结果和移动次数，将已知状态记为 $s_1$，未知状态记为 $s_2$，且状态 $s_1$ 和状态 $s_2$ 相邻（即状态 $s_2$ 是状态 $s_1$ 的上一轮的状态之一），记状态 $s_1$ 的移动次数为 $x$，考虑以下两种情况。\n\n- 如果状态 $s_2$ 的移动方和状态 $s_1$ 的获胜方相同，则状态 $s_2$ 的移动方会移动到状态 $s_1$ 从而确保胜利，因此状态 $s_2$ 的移动方必胜，移动次数为 $x + 1$，且该移动次数为状态 $s_2$ 到边界情况的最少移动次数。\n\n   > 假设存在另一个已知状态 $s_3$ 的获胜方和状态 $s_1$ 相同且状态 $s_3$ 的移动次数小于 $x$，则状态 $s_3$ 在状态 $s_1$ 之前被遍历，在遍历到状态 $s_3$ 时就会更新状态 $s_2$ 的结果，和遍历到状态 $s_1$ 时状态 $s_2$ 的结果未知矛盾。因此状态 $s_2$ 的最少移动次数为 $x + 1$。\n\n- 如果状态 $s_2$ 的移动方和状态 $s_1$ 的获胜方不同，则只有当状态 $s_2$ 的所有相邻状态都已知是状态 $s_2$ 的移动方的必败状态时，才能确定状态 $s_2$ 的移动方必败。如果在遍历到状态 $s_1$ 时可以确定状态 $s_2$ 的结果为移动方必败，则在遍历到状态 $s_1$ 之前，状态 $s_2$ 的所有相邻状态都已经遍历过，即状态 $s_1$ 是最后一个遍历到的状态 $s_2$ 的相邻状态，因此在状态 $s_2$ 的所有相邻状态中，状态 $s_1$ 的移动次数最多，状态 $s_2$ 的移动次数是 $x + 1$ 符合必败状态下将移动次数最大化。\n\n**代码**\n\n```Python [sol1-Python3]\nMOUSE_TURN = 0\nCAT_TURN = 1\nUNKNOWN = 0\nMOUSE_WIN = 1\nCAT_WIN = 2\nMAX_MOVES = 1000\nDIRS = ((-1, 0), (1, 0), (0, -1), (0, 1))\n\nclass Solution:\n    def canMouseWin(self, grid: List[str], catJump: int, mouseJump: int) -> bool:\n        rows, cols = len(grid), len(grid[0])\n\n        def getPos(row: int, col: int) -> int:\n            return row * cols + col\n\n        startMouse = startCat = food = 0\n        for i, row in enumerate(grid):\n            for j, ch in enumerate(row):\n                if ch == 'M':\n                    startMouse = getPos(i, j)\n                elif ch == 'C':\n                    startCat = getPos(i, j)\n                elif ch == 'F':\n                    food = getPos(i, j)\n\n        # 计算每个状态的度\n        total = rows * cols\n        degrees = [[[0, 0] for _ in range(total)] for _ in range(total)]\n        for mouse in range(total):\n            mouseRow, mouseCol = divmod(mouse, cols)\n            if grid[mouseRow][mouseCol] == '#':\n                continue\n            for cat in range(total):\n                catRow, catCol = divmod(cat, cols)\n                if grid[catRow][catCol] == '#':\n                    continue\n                degrees[mouse][cat][MOUSE_TURN] += 1\n                degrees[mouse][cat][CAT_TURN] += 1\n                for dx, dy in DIRS:\n                    row, col, jump = mouseRow + dx, mouseCol + dy, 1\n                    while 0 <= row < rows and 0 <= col < cols and grid[row][col] != '#' and jump <= mouseJump:\n                        nextMouse = getPos(row, col)\n                        nextCat = getPos(catRow, catCol)\n                        degrees[nextMouse][nextCat][MOUSE_TURN] += 1\n                        row += dx\n                        col += dy\n                        jump += 1\n                    row, col, jump = catRow + dx, catCol + dy, 1\n                    while 0 <= row < rows and 0 <= col < cols and grid[row][col] != '#' and jump <= catJump:\n                        nextMouse = getPos(mouseRow, mouseCol)\n                        nextCat = getPos(row, col)\n                        degrees[nextMouse][nextCat][CAT_TURN] += 1\n                        row += dx\n                        col += dy\n                        jump += 1\n\n        results = [[[[0, 0], [0, 0]] for _ in range(total)] for _ in range(total)]\n        q = deque()\n\n        # 猫和老鼠在同一个单元格，猫获胜\n        for pos in range(total):\n            row, col = divmod(pos, cols)\n            if grid[row][col] == '#':\n                continue\n            results[pos][pos][MOUSE_TURN][0] = CAT_WIN\n            results[pos][pos][MOUSE_TURN][1] = 0\n            results[pos][pos][CAT_TURN][0] = CAT_WIN\n            results[pos][pos][CAT_TURN][1] = 0\n            q.append((pos, pos, MOUSE_TURN))\n            q.append((pos, pos, CAT_TURN))\n\n        # 猫和食物在同一个单元格，猫获胜\n        for mouse in range(total):\n            mouseRow, mouseCol = divmod(mouse, cols)\n            if grid[mouseRow][mouseCol] == '#' or mouse == food:\n                continue\n            results[mouse][food][MOUSE_TURN][0] = CAT_WIN\n            results[mouse][food][MOUSE_TURN][1] = 0\n            results[mouse][food][CAT_TURN][0] = CAT_WIN\n            results[mouse][food][CAT_TURN][1] = 0\n            q.append((mouse, food, MOUSE_TURN))\n            q.append((mouse, food, CAT_TURN))\n\n        # 老鼠和食物在同一个单元格且猫和食物不在同一个单元格，老鼠获胜\n        for cat in range(total):\n            catRow, catCol = divmod(cat, cols)\n            if grid[catRow][catCol] == '#' or cat == food:\n                continue\n            results[food][cat][MOUSE_TURN][0] = MOUSE_WIN\n            results[food][cat][MOUSE_TURN][1] = 0\n            results[food][cat][CAT_TURN][0] = MOUSE_WIN\n            results[food][cat][CAT_TURN][1] = 0\n            q.append((food, cat, MOUSE_TURN))\n            q.append((food, cat, CAT_TURN))\n\n        def getPrevStates(mouse: int, cat: int, turn: int) -> List[Tuple[int, int, int]]:\n            mouseRow, mouseCol = divmod(mouse, cols)\n            catRow, catCol = divmod(cat, cols)\n            prevTurn = CAT_TURN if turn == MOUSE_TURN else MOUSE_TURN\n            maxJump = mouseJump if prevTurn == MOUSE_TURN else catJump\n            startRow = mouseRow if prevTurn == MOUSE_TURN else catRow\n            startCol = mouseCol if prevTurn == MOUSE_TURN else catCol\n            prevStates = [(mouse, cat, prevTurn)]\n            for dx, dy in DIRS:\n                i, j, jump = startRow + dx, startCol + dy, 1\n                while 0 <= i < rows and 0 <= j < cols and grid[i][j] != '#' and jump <= maxJump:\n                    prevMouseRow = i if prevTurn == MOUSE_TURN else mouseRow\n                    prevMouseCol = j if prevTurn == MOUSE_TURN else mouseCol\n                    prevCatRow = catRow if prevTurn == MOUSE_TURN else i\n                    prevCatCol = catCol if prevTurn == MOUSE_TURN else j\n                    prevMouse = getPos(prevMouseRow, prevMouseCol)\n                    prevCat = getPos(prevCatRow, prevCatCol)\n                    prevStates.append((prevMouse, prevCat, prevTurn))\n                    i += dx\n                    j += dy\n                    jump += 1\n            return prevStates\n\n        # 拓扑排序\n        while q:\n            mouse, cat, turn = q.popleft()\n            result = results[mouse][cat][turn][0]\n            moves = results[mouse][cat][turn][1]\n            for prevMouse, prevCat, prevTurn in getPrevStates(mouse, cat, turn):\n                if results[prevMouse][prevCat][prevTurn][0] == UNKNOWN:\n                    if result == MOUSE_WIN and prevTurn == MOUSE_TURN or result == CAT_WIN and prevTurn == CAT_TURN:\n                        results[prevMouse][prevCat][prevTurn][0] = result\n                        results[prevMouse][prevCat][prevTurn][1] = moves + 1\n                        q.append((prevMouse, prevCat, prevTurn))\n                    else:\n                        degrees[prevMouse][prevCat][prevTurn] -= 1\n                        if degrees[prevMouse][prevCat][prevTurn] == 0:\n                            loseResult = CAT_WIN if prevTurn == MOUSE_TURN else MOUSE_WIN\n                            results[prevMouse][prevCat][prevTurn][0] = loseResult\n                            results[prevMouse][prevCat][prevTurn][1] = moves + 1\n                            q.append((prevMouse, prevCat, prevTurn))\n        return results[startMouse][startCat][MOUSE_TURN][0] == MOUSE_WIN and results[startMouse][startCat][MOUSE_TURN][1] <= MAX_MOVES\n```\n\n```Java [sol1-Java]\nclass Solution {\n    static final int MOUSE_TURN = 0, CAT_TURN = 1;\n    static final int UNKNOWN = 0, MOUSE_WIN = 1, CAT_WIN = 2;\n    static final int MAX_MOVES = 1000;\n    int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    int rows, cols;\n    String[] grid;\n    int catJump, mouseJump;\n    int food;\n    int[][][] degrees;\n    int[][][][] results;\n\n    public boolean canMouseWin(String[] grid, int catJump, int mouseJump) {\n        this.rows = grid.length;\n        this.cols = grid[0].length();\n        this.grid = grid;\n        this.catJump = catJump;\n        this.mouseJump = mouseJump;\n        int startMouse = -1, startCat = -1;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                char c = grid[i].charAt(j);\n                if (c == 'M') {\n                    startMouse = getPos(i, j);\n                } else if (c == 'C') {\n                    startCat = getPos(i, j);\n                } else if (c == 'F') {\n                    food = getPos(i, j);\n                }\n            }\n        }\n        int total = rows * cols;\n        degrees = new int[total][total][2];\n        results = new int[total][total][2][2];\n        Queue<int[]> queue = new ArrayDeque<int[]>();\n        // 计算每个状态的度\n        for (int mouse = 0; mouse < total; mouse++) {\n            int mouseRow = mouse / cols, mouseCol = mouse % cols;\n            if (grid[mouseRow].charAt(mouseCol) == '#') {\n                continue;\n            }\n            for (int cat = 0; cat < total; cat++) {\n                int catRow = cat / cols, catCol = cat % cols;\n                if (grid[catRow].charAt(catCol) == '#') {\n                    continue;\n                }\n                degrees[mouse][cat][MOUSE_TURN]++;\n                degrees[mouse][cat][CAT_TURN]++;\n                for (int[] dir : dirs) {\n                    for (int row = mouseRow + dir[0], col = mouseCol + dir[1], jump = 1; row >= 0 && row < rows && col >= 0 && col < cols && grid[row].charAt(col) != '#' && jump <= mouseJump; row += dir[0], col += dir[1], jump++) {\n                        int nextMouse = getPos(row, col), nextCat = getPos(catRow, catCol);\n                        degrees[nextMouse][nextCat][MOUSE_TURN]++;\n                    }\n                    for (int row = catRow + dir[0], col = catCol + dir[1], jump = 1; row >= 0 && row < rows && col >= 0 && col < cols && grid[row].charAt(col) != '#' && jump <= catJump; row += dir[0], col += dir[1], jump++) {\n                        int nextMouse = getPos(mouseRow, mouseCol), nextCat = getPos(row, col);\n                        degrees[nextMouse][nextCat][CAT_TURN]++;\n                    }\n                }\n            }\n        }\n        // 猫和老鼠在同一个单元格，猫获胜\n        for (int pos = 0; pos < total; pos++) {\n            int row = pos / cols, col = pos % cols;\n            if (grid[row].charAt(col) == '#') {\n                continue;\n            }\n            results[pos][pos][MOUSE_TURN][0] = CAT_WIN;\n            results[pos][pos][MOUSE_TURN][1] = 0;\n            results[pos][pos][CAT_TURN][0] = CAT_WIN;\n            results[pos][pos][CAT_TURN][1] = 0;\n            queue.offer(new int[]{pos, pos, MOUSE_TURN});\n            queue.offer(new int[]{pos, pos, CAT_TURN});\n        }\n        // 猫和食物在同一个单元格，猫获胜\n        for (int mouse = 0; mouse < total; mouse++) {\n            int mouseRow = mouse / cols, mouseCol = mouse % cols;\n            if (grid[mouseRow].charAt(mouseCol) == '#' || mouse == food) {\n                continue;\n            }\n            results[mouse][food][MOUSE_TURN][0] = CAT_WIN;\n            results[mouse][food][MOUSE_TURN][1] = 0;\n            results[mouse][food][CAT_TURN][0] = CAT_WIN;\n            results[mouse][food][CAT_TURN][1] = 0;\n            queue.offer(new int[]{mouse, food, MOUSE_TURN});\n            queue.offer(new int[]{mouse, food, CAT_TURN});\n        }\n        // 老鼠和食物在同一个单元格且猫和食物不在同一个单元格，老鼠获胜\n        for (int cat = 0; cat < total; cat++) {\n            int catRow = cat / cols, catCol = cat % cols;\n            if (grid[catRow].charAt(catCol) == '#' || cat == food) {\n                continue;\n            }\n            results[food][cat][MOUSE_TURN][0] = MOUSE_WIN;\n            results[food][cat][MOUSE_TURN][1] = 0;\n            results[food][cat][CAT_TURN][0] = MOUSE_WIN;\n            results[food][cat][CAT_TURN][1] = 0;\n            queue.offer(new int[]{food, cat, MOUSE_TURN});\n            queue.offer(new int[]{food, cat, CAT_TURN});\n        }\n        // 拓扑排序\n        while (!queue.isEmpty()) {\n            int[] state = queue.poll();\n            int mouse = state[0], cat = state[1], turn = state[2];\n            int result = results[mouse][cat][turn][0];\n            int moves = results[mouse][cat][turn][1];\n            List<int[]> prevStates = getPrevStates(mouse, cat, turn);\n            for (int[] prevState : prevStates) {\n                int prevMouse = prevState[0], prevCat = prevState[1], prevTurn = prevState[2];\n                if (results[prevMouse][prevCat][prevTurn][0] == UNKNOWN) {\n                    boolean canWin = (result == MOUSE_WIN && prevTurn == MOUSE_TURN) || (result == CAT_WIN && prevTurn == CAT_TURN);\n                    if (canWin) {\n                        results[prevMouse][prevCat][prevTurn][0] = result;\n                        results[prevMouse][prevCat][prevTurn][1] = moves + 1;\n                        queue.offer(new int[]{prevMouse, prevCat, prevTurn});\n                    } else {\n                        degrees[prevMouse][prevCat][prevTurn]--;\n                        if (degrees[prevMouse][prevCat][prevTurn] == 0) {\n                            int loseResult = prevTurn == MOUSE_TURN ? CAT_WIN : MOUSE_WIN;\n                            results[prevMouse][prevCat][prevTurn][0] = loseResult;\n                            results[prevMouse][prevCat][prevTurn][1] = moves + 1;\n                            queue.offer(new int[]{prevMouse, prevCat, prevTurn});\n                        }\n                    }\n                }\n            }\n        }\n        return results[startMouse][startCat][MOUSE_TURN][0] == MOUSE_WIN && results[startMouse][startCat][MOUSE_TURN][1] <= MAX_MOVES;\n    }\n\n    public List<int[]> getPrevStates(int mouse, int cat, int turn) {\n        List<int[]> prevStates = new ArrayList<int[]>();\n        int mouseRow = mouse / cols, mouseCol = mouse % cols;\n        int catRow = cat / cols, catCol = cat % cols;\n        int prevTurn = turn == MOUSE_TURN ? CAT_TURN : MOUSE_TURN;\n        int maxJump = prevTurn == MOUSE_TURN ? mouseJump : catJump;\n        int startRow = prevTurn == MOUSE_TURN ? mouseRow : catRow;\n        int startCol = prevTurn == MOUSE_TURN ? mouseCol : catCol;\n        prevStates.add(new int[]{mouse, cat, prevTurn});\n        for (int[] dir : dirs) {\n            for (int i = startRow + dir[0], j = startCol + dir[1], jump = 1; i >= 0 && i < rows && j >= 0 && j < cols && grid[i].charAt(j) != '#' && jump <= maxJump; i += dir[0], j += dir[1], jump++) {\n                int prevMouseRow = prevTurn == MOUSE_TURN ? i : mouseRow;\n                int prevMouseCol = prevTurn == MOUSE_TURN ? j : mouseCol;\n                int prevCatRow = prevTurn == MOUSE_TURN ? catRow : i;\n                int prevCatCol = prevTurn == MOUSE_TURN ? catCol : j;\n                int prevMouse = getPos(prevMouseRow, prevMouseCol);\n                int prevCat = getPos(prevCatRow, prevCatCol);\n                prevStates.add(new int[]{prevMouse, prevCat, prevTurn});\n            }\n        }\n        return prevStates;\n    }\n\n    public int getPos(int row, int col) {\n        return row * cols + col;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    const int MOUSE_TURN = 0, CAT_TURN = 1;\n    const int UNKNOWN = 0, MOUSE_WIN = 1, CAT_WIN = 2;\n    const int MAX_MOVES = 1000;\n    int[][] dirs = {new int[]{-1, 0}, new int[]{1, 0}, new int[]{0, -1}, new int[]{0, 1}};\n    int rows, cols;\n    string[] grid;\n    int catJump, mouseJump;\n    int food;\n    int[,,] degrees;\n    int[,,,] results;\n\n    public bool CanMouseWin(string[] grid, int catJump, int mouseJump) {\n        this.rows = grid.Length;\n        this.cols = grid[0].Length;\n        this.grid = grid;\n        this.catJump = catJump;\n        this.mouseJump = mouseJump;\n        int startMouse = -1, startCat = -1;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                char c = grid[i][j];\n                if (c == 'M') {\n                    startMouse = GetPos(i, j);\n                } else if (c == 'C') {\n                    startCat = GetPos(i, j);\n                } else if (c == 'F') {\n                    food = GetPos(i, j);\n                }\n            }\n        }\n        int total = rows * cols;\n        degrees = new int[total, total, 2];\n        results = new int[total, total, 2, 2];\n        Queue<Tuple<int, int, int>> queue = new Queue<Tuple<int, int, int>>();\n        // 计算每个状态的度\n        for (int mouse = 0; mouse < total; mouse++) {\n            int mouseRow = mouse / cols, mouseCol = mouse % cols;\n            if (grid[mouseRow][mouseCol] == '#') {\n                continue;\n            }\n            for (int cat = 0; cat < total; cat++) {\n                int catRow = cat / cols, catCol = cat % cols;\n                if (grid[catRow][catCol] == '#') {\n                    continue;\n                }\n                degrees[mouse, cat, MOUSE_TURN]++;\n                degrees[mouse, cat, CAT_TURN]++;\n                foreach (int[] dir in dirs) {\n                    for (int row = mouseRow + dir[0], col = mouseCol + dir[1], jump = 1; row >= 0 && row < rows && col >= 0 && col < cols && grid[row][col] != '#' && jump <= mouseJump; row += dir[0], col += dir[1], jump++) {\n                        int nextMouse = GetPos(row, col), nextCat = GetPos(catRow, catCol);\n                        degrees[nextMouse, nextCat, MOUSE_TURN]++;\n                    }\n                    for (int row = catRow + dir[0], col = catCol + dir[1], jump = 1; row >= 0 && row < rows && col >= 0 && col < cols && grid[row][col] != '#' && jump <= catJump; row += dir[0], col += dir[1], jump++) {\n                        int nextMouse = GetPos(mouseRow, mouseCol), nextCat = GetPos(row, col);\n                        degrees[nextMouse, nextCat, CAT_TURN]++;\n                    }\n                }\n            }\n        }\n        // 猫和老鼠在同一个单元格，猫获胜\n        for (int pos = 0; pos < total; pos++) {\n            int row = pos / cols, col = pos % cols;\n            if (grid[row][col] == '#') {\n                continue;\n            }\n            results[pos, pos, MOUSE_TURN, 0] = CAT_WIN;\n            results[pos, pos, MOUSE_TURN, 1] = 0;\n            results[pos, pos, CAT_TURN, 0] = CAT_WIN;\n            results[pos, pos, CAT_TURN, 1] = 0;\n            queue.Enqueue(new Tuple<int, int, int>(pos, pos, MOUSE_TURN));\n            queue.Enqueue(new Tuple<int, int, int>(pos, pos, CAT_TURN));\n        }\n        // 猫和食物在同一个单元格，猫获胜\n        for (int mouse = 0; mouse < total; mouse++) {\n            int mouseRow = mouse / cols, mouseCol = mouse % cols;\n            if (grid[mouseRow][mouseCol] == '#' || mouse == food) {\n                continue;\n            }\n            results[mouse, food, MOUSE_TURN, 0] = CAT_WIN;\n            results[mouse, food, MOUSE_TURN, 1] = 0;\n            results[mouse, food, CAT_TURN, 0] = CAT_WIN;\n            results[mouse, food, CAT_TURN, 1] = 0;\n            queue.Enqueue(new Tuple<int, int, int>(mouse, food, MOUSE_TURN));\n            queue.Enqueue(new Tuple<int, int, int>(mouse, food, CAT_TURN));\n        }\n        // 老鼠和食物在同一个单元格且猫和食物不在同一个单元格，老鼠获胜\n        for (int cat = 0; cat < total; cat++) {\n            int catRow = cat / cols, catCol = cat % cols;\n            if (grid[catRow][catCol] == '#' || cat == food) {\n                continue;\n            }\n            results[food, cat, MOUSE_TURN, 0] = MOUSE_WIN;\n            results[food, cat, MOUSE_TURN, 1] = 0;\n            results[food, cat, CAT_TURN, 0] = MOUSE_WIN;\n            results[food, cat, CAT_TURN, 1] = 0;\n            queue.Enqueue(new Tuple<int, int, int>(food, cat, MOUSE_TURN));\n            queue.Enqueue(new Tuple<int, int, int>(food, cat, CAT_TURN));\n        }\n        // 拓扑排序\n        while (queue.Count > 0) {\n            Tuple<int, int, int> state = queue.Dequeue();\n            int mouse = state.Item1, cat = state.Item2, turn = state.Item3;\n            int result = results[mouse, cat, turn, 0];\n            int moves = results[mouse, cat, turn, 1];\n            IList<Tuple<int, int, int>> prevStates = GetPrevStates(mouse, cat, turn);\n            foreach (Tuple<int, int, int> prevState in prevStates) {\n                int prevMouse = prevState.Item1, prevCat = prevState.Item2, prevTurn = prevState.Item3;\n                if (results[prevMouse, prevCat, prevTurn, 0] == UNKNOWN) {\n                    bool canWin = (result == MOUSE_WIN && prevTurn == MOUSE_TURN) || (result == CAT_WIN && prevTurn == CAT_TURN);\n                    if (canWin) {\n                        results[prevMouse, prevCat, prevTurn, 0] = result;\n                        results[prevMouse, prevCat, prevTurn, 1] = moves + 1;\n                        queue.Enqueue(new Tuple<int, int, int>(prevMouse, prevCat, prevTurn));\n                    } else {\n                        degrees[prevMouse, prevCat, prevTurn]--;\n                        if (degrees[prevMouse, prevCat, prevTurn] == 0) {\n                            int loseResult = prevTurn == MOUSE_TURN ? CAT_WIN : MOUSE_WIN;\n                            results[prevMouse, prevCat, prevTurn, 0] = loseResult;\n                            results[prevMouse, prevCat, prevTurn, 1] = moves + 1;\n                            queue.Enqueue(new Tuple<int, int, int>(prevMouse, prevCat, prevTurn));\n                        }\n                    }\n                }\n            }\n        }\n        return results[startMouse, startCat, MOUSE_TURN, 0] == MOUSE_WIN && results[startMouse, startCat, MOUSE_TURN, 1] <= MAX_MOVES;\n    }\n\n    public IList<Tuple<int, int, int>> GetPrevStates(int mouse, int cat, int turn) {\n        IList<Tuple<int, int, int>> prevStates = new List<Tuple<int, int, int>>();\n        int mouseRow = mouse / cols, mouseCol = mouse % cols;\n        int catRow = cat / cols, catCol = cat % cols;\n        int prevTurn = turn == MOUSE_TURN ? CAT_TURN : MOUSE_TURN;\n        int maxJump = prevTurn == MOUSE_TURN ? mouseJump : catJump;\n        int startRow = prevTurn == MOUSE_TURN ? mouseRow : catRow;\n        int startCol = prevTurn == MOUSE_TURN ? mouseCol : catCol;\n        prevStates.Add(new Tuple<int, int, int>(mouse, cat, prevTurn));\n        foreach (int[] dir in dirs) {\n            for (int i = startRow + dir[0], j = startCol + dir[1], jump = 1; i >= 0 && i < rows && j >= 0 && j < cols && grid[i][j] != '#' && jump <= maxJump; i += dir[0], j += dir[1], jump++) {\n                int prevMouseRow = prevTurn == MOUSE_TURN ? i : mouseRow;\n                int prevMouseCol = prevTurn == MOUSE_TURN ? j : mouseCol;\n                int prevCatRow = prevTurn == MOUSE_TURN ? catRow : i;\n                int prevCatCol = prevTurn == MOUSE_TURN ? catCol : j;\n                int prevMouse = GetPos(prevMouseRow, prevMouseCol);\n                int prevCat = GetPos(prevCatRow, prevCatCol);\n                prevStates.Add(new Tuple<int, int, int>(prevMouse, prevCat, prevTurn));\n            }\n        }\n        return prevStates;\n    }\n\n    public int GetPos(int row, int col) {\n        return row * cols + col;\n    }\n}\n```\n\n```C++ [sol1-C++]\nstatic const int MOUSE_TURN = 0, CAT_TURN = 1;\nstatic const int UNKNOWN = 0, MOUSE_WIN = 1, CAT_WIN = 2;\nstatic const int MAX_MOVES = 1000;\n\nclass Solution {\npublic: \n    vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    int rows, cols;\n    vector<string> grid;\n    int catJump, mouseJump;\n    int food;\n    int degrees[64][64][2];\n    int results[64][64][2][2];\n\n    bool canMouseWin(vector<string> grid, int catJump, int mouseJump) {\n        this->rows = grid.size();\n        this->cols = grid[0].size();\n        this->grid = grid;\n        this->catJump = catJump;\n        this->mouseJump = mouseJump;\n        int startMouse = -1, startCat = -1;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                char c = grid[i][j];\n                if (c == 'M') {\n                    startMouse = getPos(i, j);\n                } else if (c == 'C') {\n                    startCat = getPos(i, j);\n                } else if (c == 'F') {\n                    food = getPos(i, j);\n                }\n            }\n        }\n        int total = rows * cols;\n        memset(degrees, 0, sizeof(degrees));\n        memset(results, 0, sizeof(results));\n        queue<tuple<int, int, int>> qu;\n        // 计算每个状态的度\n        for (int mouse = 0; mouse < total; mouse++) {\n            int mouseRow = mouse / cols, mouseCol = mouse % cols;\n            if (grid[mouseRow][mouseCol] == '#') {\n                continue;\n            }\n            for (int cat = 0; cat < total; cat++) {\n                int catRow = cat / cols, catCol = cat % cols;\n                if (grid[catRow][catCol] == '#') {\n                    continue;\n                }\n                degrees[mouse][cat][MOUSE_TURN]++;\n                degrees[mouse][cat][CAT_TURN]++;\n                for (auto & dir : dirs) {\n                    for (int row = mouseRow + dir[0], col = mouseCol + dir[1], jump = 1; row >= 0 && row < rows && col >= 0 && col < cols && grid[row][col] != '#' && jump <= mouseJump; row += dir[0], col += dir[1], jump++) {\n                        int nextMouse = getPos(row, col), nextCat = getPos(catRow, catCol);\n                        degrees[nextMouse][nextCat][MOUSE_TURN]++;\n                    }\n                    for (int row = catRow + dir[0], col = catCol + dir[1], jump = 1; row >= 0 && row < rows && col >= 0 && col < cols && grid[row][col] != '#' && jump <= catJump; row += dir[0], col += dir[1], jump++) {\n                        int nextMouse = getPos(mouseRow, mouseCol), nextCat = getPos(row, col);\n                        degrees[nextMouse][nextCat][CAT_TURN]++;\n                    }\n                }\n            }\n        }\n        // 猫和老鼠在同一个单元格，猫获胜\n        for (int pos = 0; pos < total; pos++) {\n            int row = pos / cols, col = pos % cols;\n            if (grid[row][col] == '#') {\n                continue;\n            }\n            results[pos][pos][MOUSE_TURN][0] = CAT_WIN;\n            results[pos][pos][MOUSE_TURN][1] = 0;\n            results[pos][pos][CAT_TURN][0] = CAT_WIN;\n            results[pos][pos][CAT_TURN][1] = 0;\n            qu.emplace(pos, pos, MOUSE_TURN);\n            qu.emplace(pos, pos, CAT_TURN);\n        }\n        // 猫和食物在同一个单元格，猫获胜\n        for (int mouse = 0; mouse < total; mouse++) {\n            int mouseRow = mouse / cols, mouseCol = mouse % cols;\n            if (grid[mouseRow][mouseCol] == '#' || mouse == food) {\n                continue;\n            }\n            results[mouse][food][MOUSE_TURN][0] = CAT_WIN;\n            results[mouse][food][MOUSE_TURN][1] = 0;\n            results[mouse][food][CAT_TURN][0] = CAT_WIN;\n            results[mouse][food][CAT_TURN][1] = 0;\n            qu.emplace(mouse, food, MOUSE_TURN);\n            qu.emplace(mouse, food, CAT_TURN);\n        }\n        // 老鼠和食物在同一个单元格且猫和食物不在同一个单元格，老鼠获胜\n        for (int cat = 0; cat < total; cat++) {\n            int catRow = cat / cols, catCol = cat % cols;\n            if (grid[catRow][catCol] == '#' || cat == food) {\n                continue;\n            }\n            results[food][cat][MOUSE_TURN][0] = MOUSE_WIN;\n            results[food][cat][MOUSE_TURN][1] = 0;\n            results[food][cat][CAT_TURN][0] = MOUSE_WIN;\n            results[food][cat][CAT_TURN][1] = 0;\n            qu.emplace(food, cat, MOUSE_TURN);\n            qu.emplace(food, cat, CAT_TURN);\n        }\n        // 拓扑排序\n        while (!qu.empty()) {\n            auto [mouse, cat, turn] = qu.front();\n            qu.pop();\n            int result = results[mouse][cat][turn][0];\n            int moves = results[mouse][cat][turn][1];\n            vector<tuple<int, int, int>> prevStates = getPrevStates(mouse, cat, turn);\n            for (auto [prevMouse, prevCat, prevTurn] : prevStates) {\n                if (results[prevMouse][prevCat][prevTurn][0] == UNKNOWN) {\n                    bool canWin = (result == MOUSE_WIN && prevTurn == MOUSE_TURN) || (result == CAT_WIN && prevTurn == CAT_TURN);\n                    if (canWin) {\n                        results[prevMouse][prevCat][prevTurn][0] = result;\n                        results[prevMouse][prevCat][prevTurn][1] = moves + 1;\n                        qu.emplace(prevMouse, prevCat, prevTurn);\n                    } else {\n                        degrees[prevMouse][prevCat][prevTurn]--;\n                        if (degrees[prevMouse][prevCat][prevTurn] == 0) {\n                            int loseResult = prevTurn == MOUSE_TURN ? CAT_WIN : MOUSE_WIN;\n                            results[prevMouse][prevCat][prevTurn][0] = loseResult;\n                            results[prevMouse][prevCat][prevTurn][1] = moves + 1;\n                            qu.emplace(prevMouse, prevCat, prevTurn);\n                        }\n                    }\n                }\n            }\n        }\n        return results[startMouse][startCat][MOUSE_TURN][0] == MOUSE_WIN && results[startMouse][startCat][MOUSE_TURN][1] <= MAX_MOVES;\n    }\n    \n    vector<tuple<int, int, int>> getPrevStates(int mouse, int cat, int turn) {\n        vector<tuple<int, int, int>> prevStates;\n        int mouseRow = mouse / cols, mouseCol = mouse % cols;\n        int catRow = cat / cols, catCol = cat % cols;\n        int prevTurn = turn == MOUSE_TURN ? CAT_TURN : MOUSE_TURN;\n        int maxJump = prevTurn == MOUSE_TURN ? mouseJump : catJump;\n        int startRow = prevTurn == MOUSE_TURN ? mouseRow : catRow;\n        int startCol = prevTurn == MOUSE_TURN ? mouseCol : catCol;\n        prevStates.emplace_back(mouse, cat, prevTurn);\n        for (auto & dir : dirs) {\n            for (int i = startRow + dir[0], j = startCol + dir[1], jump = 1; i >= 0 && i < rows && j >= 0 && j < cols && grid[i][j] != '#' && jump <= maxJump; i += dir[0], j += dir[1], jump++) {\n                int prevMouseRow = prevTurn == MOUSE_TURN ? i : mouseRow;\n                int prevMouseCol = prevTurn == MOUSE_TURN ? j : mouseCol;\n                int prevCatRow = prevTurn == MOUSE_TURN ? catRow : i;\n                int prevCatCol = prevTurn == MOUSE_TURN ? catCol : j;\n                int prevMouse = getPos(prevMouseRow, prevMouseCol);\n                int prevCat = getPos(prevCatRow, prevCatCol);\n                prevStates.emplace_back(prevMouse, prevCat, prevTurn);\n            }\n        }\n        return prevStates;\n    }\n\n    int getPos(int row, int col) {\n        return row * cols + col;\n    }\n};\n```\n\n```C [sol1-C]\nstatic const int MOUSE_TURN = 0, CAT_TURN = 1;\nstatic const int UNKNOWN = 0, MOUSE_WIN = 1, CAT_WIN = 2;\nstatic const int MAX_MOVES = 1000;\n\n#define MAX_QUEUE_SIZE 10000\n\nint dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\nint g_rows, g_cols;\nchar **g_grid;\nint g_catJump, g_mouseJump;\nint g_food;\nint g_degrees[64][64][2];\nint g_results[64][64][2][2];\n\nint getPos(int row, int col) {\n    return row * g_cols + col;\n}\n\ntypedef struct State {\n    int mouse;\n    int cat;\n    int turn;\n} State;\n\ntypedef struct Node {\n    State currState;\n    struct Node * next;\n} Node;\n\nNode * getPrevStates(int mouse, int cat, int turn) {\n    Node * prevStates = NULL;\n    Node * tail = NULL;\n    int mouseRow = mouse / g_cols, mouseCol = mouse % g_cols;\n    int catRow = cat / g_cols, catCol = cat % g_cols;\n    int prevTurn = turn == MOUSE_TURN ? CAT_TURN : MOUSE_TURN;\n    int maxJump = prevTurn == MOUSE_TURN ? g_mouseJump : g_catJump;\n    int startRow = prevTurn == MOUSE_TURN ? mouseRow : catRow;\n    int startCol = prevTurn == MOUSE_TURN ? mouseCol : catCol;\n    prevStates = (Node *)malloc(sizeof(Node));\n    tail = prevStates;\n    tail->currState.mouse = mouse;\n    tail->currState.cat = cat;\n    tail->currState.turn = prevTurn;\n    tail->next = NULL;\n    for (int k = 0; k < 4; k++) {\n        int *dir = dirs[k];\n        for (int i = startRow + dir[0], j = startCol + dir[1], jump = 1; i >= 0 && i < g_rows && j >= 0 && j < g_cols && g_grid[i][j] != '#' && jump <= maxJump; i += dir[0], j += dir[1], jump++) {\n            int prevMouseRow = prevTurn == MOUSE_TURN ? i : mouseRow;\n            int prevMouseCol = prevTurn == MOUSE_TURN ? j : mouseCol;\n            int prevCatRow = prevTurn == MOUSE_TURN ? catRow : i;\n            int prevCatCol = prevTurn == MOUSE_TURN ? catCol : j;\n            int prevMouse = getPos(prevMouseRow, prevMouseCol);\n            int prevCat = getPos(prevCatRow, prevCatCol);\n            tail->next = (Node *)malloc(sizeof(Node));\n            tail = tail->next;\n            tail->currState.mouse = prevMouse;\n            tail->currState.cat = prevCat;\n            tail->currState.turn = prevTurn;\n            tail->next = NULL;\n        }\n    }\n    return prevStates;\n}\n\nbool canMouseWin(char ** grid, int gridSize, int catJump, int mouseJump){\n    g_rows = gridSize;\n    g_cols = strlen(grid[0]);\n    g_grid = grid;\n    g_catJump = catJump;\n    g_mouseJump = mouseJump;\n    int startMouse = -1, startCat = -1;\n    for (int i = 0; i < g_rows; i++) {\n        for (int j = 0; j < g_cols; j++) {\n            char c = grid[i][j];\n            if (c == 'M') {\n                startMouse = getPos(i, j);\n            } else if (c == 'C') {\n                startCat = getPos(i, j);\n            } else if (c == 'F') {\n                g_food = getPos(i, j);\n            }\n        }\n    }\n    int total = g_rows * g_cols;\n    memset(g_degrees, 0, sizeof(g_degrees));\n    memset(g_results, 0, sizeof(g_results));\n    State * queue = (State *)malloc(sizeof(State) * MAX_QUEUE_SIZE);\n    int head = 0, tail = 0;\n    // 计算每个状态的度\n    for (int mouse = 0; mouse < total; mouse++) {\n        int mouseRow = mouse / g_cols, mouseCol = mouse % g_cols;\n        if (grid[mouseRow][mouseCol] == '#') {\n            continue;\n        }\n        for (int cat = 0; cat < total; cat++) {\n            int catRow = cat / g_cols, catCol = cat % g_cols;\n            if (grid[catRow][catCol] == '#') {\n                continue;\n            }\n            g_degrees[mouse][cat][MOUSE_TURN]++;\n            g_degrees[mouse][cat][CAT_TURN]++;\n            for (int i = 0; i < 4; i++) {\n                int * dir = dirs[i];\n                for (int row = mouseRow + dir[0], col = mouseCol + dir[1], jump = 1; row >= 0 && row < g_rows && col >= 0 && col < g_cols && grid[row][col] != '#' && jump <= mouseJump; row += dir[0], col += dir[1], jump++) {\n                    int nextMouse = getPos(row, col), nextCat = getPos(catRow, catCol);\n                    g_degrees[nextMouse][nextCat][MOUSE_TURN]++;\n                }\n                for (int row = catRow + dir[0], col = catCol + dir[1], jump = 1; row >= 0 && row < g_rows && col >= 0 && col < g_cols && grid[row][col] != '#' && jump <= catJump; row += dir[0], col += dir[1], jump++) {\n                    int nextMouse = getPos(mouseRow, mouseCol), nextCat = getPos(row, col);\n                    g_degrees[nextMouse][nextCat][CAT_TURN]++;\n                }\n            }\n        }\n    }\n    // 猫和老鼠在同一个单元格，猫获胜\n    for (int pos = 0; pos < total; pos++) {\n        int row = pos / g_cols, col = pos % g_cols;\n        if (grid[row][col] == '#') {\n            continue;\n        }\n        g_results[pos][pos][MOUSE_TURN][0] = CAT_WIN;\n        g_results[pos][pos][MOUSE_TURN][1] = 0;\n        g_results[pos][pos][CAT_TURN][0] = CAT_WIN;\n        g_results[pos][pos][CAT_TURN][1] = 0;\n        queue[tail].mouse = pos;\n        queue[tail].cat = pos;\n        queue[tail].turn = MOUSE_TURN;\n        tail++;\n        queue[tail].mouse = pos;\n        queue[tail].cat = pos;\n        queue[tail].turn = CAT_TURN;\n        tail++;\n    }\n    // 猫和食物在同一个单元格，猫获胜\n    for (int mouse = 0; mouse < total; mouse++) {\n        int mouseRow = mouse / g_cols, mouseCol = mouse % g_cols;\n        if (grid[mouseRow][mouseCol] == '#' || mouse == g_food) {\n            continue;\n        }\n        g_results[mouse][g_food][MOUSE_TURN][0] = CAT_WIN;\n        g_results[mouse][g_food][MOUSE_TURN][1] = 0;\n        g_results[mouse][g_food][CAT_TURN][0] = CAT_WIN;\n        g_results[mouse][g_food][CAT_TURN][1] = 0;\n        queue[tail].mouse = mouse;\n        queue[tail].cat = g_food;\n        queue[tail].turn = MOUSE_TURN;\n        tail++;\n        queue[tail].mouse = mouse;\n        queue[tail].cat = g_food;\n        queue[tail].turn = CAT_TURN;\n        tail++;\n    }\n    // 老鼠和食物在同一个单元格且猫和食物不在同一个单元格，老鼠获胜\n    for (int cat = 0; cat < total; cat++) {\n        int catRow = cat / g_cols, catCol = cat % g_cols;\n        if (grid[catRow][catCol] == '#' || cat == g_food) {\n            continue;\n        }\n        g_results[g_food][cat][MOUSE_TURN][0] = MOUSE_WIN;\n        g_results[g_food][cat][MOUSE_TURN][1] = 0;\n        g_results[g_food][cat][CAT_TURN][0] = MOUSE_WIN;\n        g_results[g_food][cat][CAT_TURN][1] = 0;\n        queue[tail].mouse = g_food;\n        queue[tail].cat = cat;\n        queue[tail].turn = MOUSE_TURN;\n        tail++;\n        queue[tail].mouse = g_food;\n        queue[tail].cat = cat;\n        queue[tail].turn = CAT_TURN;\n        tail++;\n    }\n    // 拓扑排序\n    while (head != tail) {\n        int mouse = queue[head].mouse;\n        int cat = queue[head].cat;\n        int turn = queue[head].turn;\n        head++;\n        int result = g_results[mouse][cat][turn][0];\n        int moves = g_results[mouse][cat][turn][1];\n        Node * prevStates = getPrevStates(mouse, cat, turn);\n        for (Node * curr = prevStates; curr; curr = curr->next) {\n            int prevMouse = curr->currState.mouse;\n            int prevCat = curr->currState.cat;\n            int prevTurn = curr->currState.turn;\n            if (g_results[prevMouse][prevCat][prevTurn][0] == UNKNOWN) {\n                bool canWin = (result == MOUSE_WIN && prevTurn == MOUSE_TURN) || (result == CAT_WIN && prevTurn == CAT_TURN);\n                if (canWin) {\n                    g_results[prevMouse][prevCat][prevTurn][0] = result;\n                    g_results[prevMouse][prevCat][prevTurn][1] = moves + 1;\n                    queue[tail].mouse = prevMouse;\n                    queue[tail].cat = prevCat;\n                    queue[tail].turn = prevTurn;\n                    tail++;\n                } else {\n                    g_degrees[prevMouse][prevCat][prevTurn]--;\n                    if (g_degrees[prevMouse][prevCat][prevTurn] == 0) {\n                        int loseResult = prevTurn == MOUSE_TURN ? CAT_WIN : MOUSE_WIN;\n                        g_results[prevMouse][prevCat][prevTurn][0] = loseResult;\n                        g_results[prevMouse][prevCat][prevTurn][1] = moves + 1;\n                        queue[tail].mouse = prevMouse;\n                        queue[tail].cat = prevCat;\n                        queue[tail].turn = prevTurn;\n                        tail++;\n                    }\n                }\n            }\n        }\n    }\n    free(queue);\n    return g_results[startMouse][startCat][MOUSE_TURN][0] == MOUSE_WIN && g_results[startMouse][startCat][MOUSE_TURN][1] <= MAX_MOVES;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst MOUSE_TURN = 0, CAT_TURN = 1;\nconst UNKNOWN = 0, MOUSE_WIN = 1, CAT_WIN = 2;\nconst MAX_MOVES = 1000;\nconst dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];\nvar canMouseWin = function(grid, catJump, mouseJump) {\n    this.rows = grid.length;\n    this.cols = grid[0].length;\n    let startMouse = -1, startCat = -1;\n\n    const getPos = (row, col) => {\n        return row * this.cols + col;\n    };\n\n    const getPrevStates = (mouse, cat, turn) => {\n        const prevStates = [];\n        const mouseRow = Math.floor(mouse / this.cols), mouseCol = mouse % this.cols;\n        const catRow = Math.floor(cat / this.cols), catCol = cat % this.cols;\n        const prevTurn = turn === MOUSE_TURN ? CAT_TURN : MOUSE_TURN;\n        const maxJump = prevTurn === MOUSE_TURN ? mouseJump : catJump;\n        const startRow = prevTurn === MOUSE_TURN ? mouseRow : catRow;\n        const startCol = prevTurn === MOUSE_TURN ? mouseCol : catCol;\n        prevStates.push([mouse, cat, prevTurn]);\n        for (const dir of dirs) {\n            for (let i = startRow + dir[0], j = startCol + dir[1], jump = 1; i >= 0 && i < rows && j >= 0 && j < this.cols && grid[i].charAt(j) !== '#' && jump <= maxJump; i += dir[0], j += dir[1], jump++) {\n                const prevMouseRow = prevTurn === MOUSE_TURN ? i : mouseRow;\n                const prevMouseCol = prevTurn === MOUSE_TURN ? j : mouseCol;\n                const prevCatRow = prevTurn === MOUSE_TURN ? catRow : i;\n                const prevCatCol = prevTurn === MOUSE_TURN ? catCol : j;\n                const prevMouse = getPos(prevMouseRow, prevMouseCol);\n                const prevCat = getPos(prevCatRow, prevCatCol);\n                prevStates.push([prevMouse, prevCat, prevTurn]);\n            }\n        }\n        return prevStates;\n    }\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < this.cols; j++) {\n            const c = grid[i][j];\n            if (c === 'M') {\n                startMouse = getPos(i, j);\n            } else if (c === 'C') {\n                startCat = getPos(i, j);\n            } else if (c === 'F') {\n                food = getPos(i, j);\n            }\n        }\n    }\n    const total = rows * this.cols;\n    const degrees = new Array(total).fill(0).map(() => new Array(total).fill(0).map(() => new Array(2).fill(0)));\n    const results = new Array(total).fill(0).map(() => new Array(total).fill(0).map(() => new Array(2).fill(0).map(() => new Array(2).fill(0))));\n    const queue = [];\n    // 计算每个状态的度\n    for (let mouse = 0; mouse < total; mouse++) {\n        let mouseRow = Math.floor(mouse / this.cols), mouseCol = mouse % this.cols;\n        if (grid[mouseRow][mouseCol] === '#') {\n            continue;\n        }\n        for (let cat = 0; cat < total; cat++) {\n            let catRow = Math.floor(cat / this.cols), catCol = cat % this.cols;\n            if (grid[catRow][catCol] === '#') {\n                continue;\n            }\n            degrees[mouse][cat][MOUSE_TURN]++;\n            degrees[mouse][cat][CAT_TURN]++;\n            for (const dir of dirs) {\n                for (let row = mouseRow + dir[0], col = mouseCol + dir[1], jump = 1; row >= 0 && row < rows && col >= 0 && col < this.cols && grid[row][col] !== '#' && jump <= mouseJump; row += dir[0], col += dir[1], jump++) {\n                    const nextMouse = getPos(row, col), nextCat = getPos(catRow, catCol);\n                    degrees[nextMouse][nextCat][MOUSE_TURN]++;\n                }\n                for (let row = catRow + dir[0], col = catCol + dir[1], jump = 1; row >= 0 && row < rows && col >= 0 && col < this.cols && grid[row][col] !== '#' && jump <= catJump; row += dir[0], col += dir[1], jump++) {\n                    const nextMouse = getPos(mouseRow, mouseCol), nextCat = getPos(row, col);\n                    degrees[nextMouse][nextCat][CAT_TURN]++;\n                }\n            }\n        }\n    }\n    // 猫和老鼠在同一个单元格，猫获胜\n    for (let pos = 0; pos < total; pos++) {\n        const row = Math.floor(pos / this.cols), col = pos % this.cols;\n        if (grid[row][col] === '#') {\n            continue;\n        }\n        results[pos][pos][MOUSE_TURN][0] = CAT_WIN;\n        results[pos][pos][MOUSE_TURN][1] = 0;\n        results[pos][pos][CAT_TURN][0] = CAT_WIN;\n        results[pos][pos][CAT_TURN][1] = 0;\n        queue.push([pos, pos, MOUSE_TURN]);\n        queue.push([pos, pos, CAT_TURN]);\n    }\n    // 猫和食物在同一个单元格，猫获胜\n    for (let mouse = 0; mouse < total; mouse++) {\n        const mouseRow = Math.floor(mouse / this.cols), mouseCol = mouse % this.cols;\n        if (grid[mouseRow][mouseCol] === '#' || mouse === food) {\n            continue;\n        }\n        results[mouse][food][MOUSE_TURN][0] = CAT_WIN;\n        results[mouse][food][MOUSE_TURN][1] = 0;\n        results[mouse][food][CAT_TURN][0] = CAT_WIN;\n        results[mouse][food][CAT_TURN][1] = 0;\n        queue.push([mouse, food, MOUSE_TURN]);\n        queue.push([mouse, food, CAT_TURN]);\n    }\n    // 老鼠和食物在同一个单元格且猫和食物不在同一个单元格，老鼠获胜\n    for (let cat = 0; cat < total; cat++) {\n        const catRow = Math.floor(cat / this.cols), catCol = cat % this.cols;\n        if (grid[catRow][catCol] === '#' || cat === food) {\n            continue;\n        }\n        results[food][cat][MOUSE_TURN][0] = MOUSE_WIN;\n        results[food][cat][MOUSE_TURN][1] = 0;\n        results[food][cat][CAT_TURN][0] = MOUSE_WIN;\n        results[food][cat][CAT_TURN][1] = 0;\n        queue.push([food, cat, MOUSE_TURN]);\n        queue.push([food, cat, CAT_TURN]);\n    }\n    // 拓扑排序\n    while (queue.length) {\n        const state = queue.shift();\n        const mouse = state[0], cat = state[1], turn = state[2];\n        const result = results[mouse][cat][turn][0];\n        const moves = results[mouse][cat][turn][1];\n        const prevStates = getPrevStates(mouse, cat, turn);\n        for (const prevState of prevStates) {\n            const prevMouse = prevState[0], prevCat = prevState[1], prevTurn = prevState[2];\n            if (results[prevMouse][prevCat][prevTurn][0] === UNKNOWN) {\n                const canWin = (result === MOUSE_WIN && prevTurn === MOUSE_TURN) || (result === CAT_WIN && prevTurn === CAT_TURN);\n                if (canWin) {\n                    results[prevMouse][prevCat][prevTurn][0] = result;\n                    results[prevMouse][prevCat][prevTurn][1] = moves + 1;\n                    queue.push([prevMouse, prevCat, prevTurn]);\n                } else {\n                    degrees[prevMouse][prevCat][prevTurn]--;\n                    if (degrees[prevMouse][prevCat][prevTurn] === 0) {\n                        const loseResult = prevTurn === MOUSE_TURN ? CAT_WIN : MOUSE_WIN;\n                        results[prevMouse][prevCat][prevTurn][0] = loseResult;\n                        results[prevMouse][prevCat][prevTurn][1] = moves + 1;\n                        queue.push([prevMouse, prevCat, prevTurn]);\n                    }\n                }\n            }\n        }\n    }\n\n    return results[startMouse][startCat][MOUSE_TURN][0] === MOUSE_WIN && results[startMouse][startCat][MOUSE_TURN][1] <= MAX_MOVES;\n}\n```\n\n```go [sol1-Golang]\nconst (\n    MouseTurn = 0\n    CatTurn   = 1\n    UNKNOWN   = 0\n    MouseWin  = 1\n    CatWin    = 2\n    MaxMoves  = 1000\n)\n\nvar dirs = []struct{ x, y int }{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\nfunc canMouseWin(grid []string, catJump int, mouseJump int) bool {\n    rows, cols := len(grid), len(grid[0])\n    getPos := func(row, col int) int { return row*cols + col }\n    var startMouse, startCat, food int\n    for i, row := range grid {\n        for j, ch := range row {\n            if ch == 'M' {\n                startMouse = getPos(i, j)\n            } else if ch == 'C' {\n                startCat = getPos(i, j)\n            } else if ch == 'F' {\n                food = getPos(i, j)\n            }\n        }\n    }\n\n    // 计算每个状态的度\n    total := rows * cols\n    degrees := [64][64][2]int{}\n    for mouse := 0; mouse < total; mouse++ {\n        mouseRow := mouse / cols\n        mouseCol := mouse % cols\n        if grid[mouseRow][mouseCol] == '#' {\n            continue\n        }\n        for cat := 0; cat < total; cat++ {\n            catRow := cat / cols\n            catCol := cat % cols\n            if grid[catRow][catCol] == '#' {\n                continue\n            }\n            degrees[mouse][cat][MouseTurn]++\n            degrees[mouse][cat][CatTurn]++\n            for _, dir := range dirs {\n                for row, col, jump := mouseRow+dir.x, mouseCol+dir.y, 1; row >= 0 && row < rows && col >= 0 && col < cols && grid[row][col] != '#' && jump <= mouseJump; jump++ {\n                    nextMouse := getPos(row, col)\n                    nextCat := getPos(catRow, catCol)\n                    degrees[nextMouse][nextCat][MouseTurn]++\n                    row += dir.x\n                    col += dir.y\n                }\n                for row, col, jump := catRow+dir.x, catCol+dir.y, 1; row >= 0 && row < rows && col >= 0 && col < cols && grid[row][col] != '#' && jump <= catJump; jump++ {\n                    nextMouse := getPos(mouseRow, mouseCol)\n                    nextCat := getPos(row, col)\n                    degrees[nextMouse][nextCat][CatTurn]++\n                    row += dir.x\n                    col += dir.y\n                }\n            }\n        }\n    }\n\n    results := [64][64][2][2]int{}\n    type state struct{ mouse, cat, turn int }\n    q := []state{}\n\n    // 猫和老鼠在同一个单元格，猫获胜\n    for pos := 0; pos < total; pos++ {\n        row := pos / cols\n        col := pos % cols\n        if grid[row][col] == '#' {\n            continue\n        }\n        results[pos][pos][MouseTurn][0] = CatWin\n        results[pos][pos][MouseTurn][1] = 0\n        results[pos][pos][CatTurn][0] = CatWin\n        results[pos][pos][CatTurn][1] = 0\n        q = append(q, state{pos, pos, MouseTurn}, state{pos, pos, CatTurn})\n    }\n\n    // 猫和食物在同一个单元格，猫获胜\n    for mouse := 0; mouse < total; mouse++ {\n        mouseRow := mouse / cols\n        mouseCol := mouse % cols\n        if grid[mouseRow][mouseCol] == '#' || mouse == food {\n            continue\n        }\n        results[mouse][food][MouseTurn][0] = CatWin\n        results[mouse][food][MouseTurn][1] = 0\n        results[mouse][food][CatTurn][0] = CatWin\n        results[mouse][food][CatTurn][1] = 0\n        q = append(q, state{mouse, food, MouseTurn}, state{mouse, food, CatTurn})\n    }\n\n    // 老鼠和食物在同一个单元格且猫和食物不在同一个单元格，老鼠获胜\n    for cat := 0; cat < total; cat++ {\n        catRow := cat / cols\n        catCol := cat % cols\n        if grid[catRow][catCol] == '#' || cat == food {\n            continue\n        }\n        results[food][cat][MouseTurn][0] = MouseWin\n        results[food][cat][MouseTurn][1] = 0\n        results[food][cat][CatTurn][0] = MouseWin\n        results[food][cat][CatTurn][1] = 0\n        q = append(q, state{food, cat, MouseTurn}, state{food, cat, CatTurn})\n    }\n\n    getPrevStates := func(mouse, cat, turn int) []state {\n        mouseRow := mouse / cols\n        mouseCol := mouse % cols\n        catRow := cat / cols\n        catCol := cat % cols\n        prevTurn := MouseTurn\n        if turn == MouseTurn {\n            prevTurn = CatTurn\n        }\n        maxJump, startRow, startCol := catJump, catRow, catCol\n        if prevTurn == MouseTurn {\n            maxJump, startRow, startCol = mouseJump, mouseRow, mouseCol\n        }\n        prevStates := []state{{mouse, cat, prevTurn}}\n        for _, dir := range dirs {\n            for i, j, jump := startRow+dir.x, startCol+dir.y, 1; i >= 0 && i < rows && j >= 0 && j < cols && grid[i][j] != '#' && jump <= maxJump; jump++ {\n                prevMouseRow := mouseRow\n                prevMouseCol := mouseCol\n                prevCatRow := i\n                prevCatCol := j\n                if prevTurn == MouseTurn {\n                    prevMouseRow = i\n                    prevMouseCol = j\n                    prevCatRow = catRow\n                    prevCatCol = catCol\n                }\n                prevMouse := getPos(prevMouseRow, prevMouseCol)\n                prevCat := getPos(prevCatRow, prevCatCol)\n                prevStates = append(prevStates, state{prevMouse, prevCat, prevTurn})\n                i += dir.x\n                j += dir.y\n            }\n        }\n        return prevStates\n    }\n\n    // 拓扑排序\n    for len(q) > 0 {\n        s := q[0]\n        q = q[1:]\n        mouse, cat, turn := s.mouse, s.cat, s.turn\n        result := results[mouse][cat][turn][0]\n        moves := results[mouse][cat][turn][1]\n        for _, s := range getPrevStates(mouse, cat, turn) {\n            prevMouse, prevCat, prevTurn := s.mouse, s.cat, s.turn\n            if results[prevMouse][prevCat][prevTurn][0] == UNKNOWN {\n                canWin := result == MouseWin && prevTurn == MouseTurn || result == CatWin && prevTurn == CatTurn\n                if canWin {\n                    results[prevMouse][prevCat][prevTurn][0] = result\n                    results[prevMouse][prevCat][prevTurn][1] = moves + 1\n                    q = append(q, state{prevMouse, prevCat, prevTurn})\n                } else {\n                    degrees[prevMouse][prevCat][prevTurn]--\n                    if degrees[prevMouse][prevCat][prevTurn] == 0 {\n                        loseResult := MouseWin\n                        if prevTurn == MouseTurn {\n                            loseResult = CatWin\n                        }\n                        results[prevMouse][prevCat][prevTurn][0] = loseResult\n                        results[prevMouse][prevCat][prevTurn][1] = moves + 1\n                        q = append(q, state{prevMouse, prevCat, prevTurn})\n                    }\n                }\n            }\n        }\n    }\n    return results[startMouse][startCat][MouseTurn][0] == MouseWin && results[startMouse][startCat][MouseTurn][1] <= MaxMoves\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\textit{rows}^2 \\times \\textit{cols}^2 \\times (\\textit{rows} + \\textit{cols}))$，其中 $\\textit{rows}$ 和 $\\textit{cols}$ 分别是网格的行数和列数。状态数是 $O(\\textit{rows}^2 \\times \\textit{cols}^2)$，对于每个状态需要 $O(\\textit{rows} + \\textit{cols})$ 的时间计算状态值，因此总时间复杂度是 $O(\\textit{rows}^2 \\times \\textit{cols}^2 \\times (\\textit{rows} + \\textit{cols}))$。\n\n- 空间复杂度：$O(\\textit{rows}^2 \\times \\textit{cols}^2)$，其中 $\\textit{rows}$ 和 $\\textit{cols}$ 分别是网格的行数和列数。需要记录每个状态的度和结果，状态数是 $O(\\textit{rows}^2 \\times \\textit{cols}^2)$。"
}