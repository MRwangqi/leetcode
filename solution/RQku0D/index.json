{
	"titleSlug": "RQku0D",
	"slug": "zui-duo-shan-chu-yi-ge-zi-fu-de-dao-hui-30b55",
	"url": "https://leetcode-cn.com/problems/RQku0D/solution/zui-duo-shan-chu-yi-ge-zi-fu-de-dao-hui-30b55/",
	"content": "#### 方法一：贪心\n\n考虑最朴素的方法：首先判断原串是否是回文串，如果是，就返回 $\\text{true}$；如果不是，则枚举每一个位置作为被删除的位置，再判断剩下的字符串是否是回文串。这种做法的渐进时间复杂度是 $O(n^2)$ 的，会超出时间限制。\n\n我们换一种想法。首先考虑如果不允许删除字符，如何判断一个字符串是否是回文串。常见的做法是使用双指针。定义左右指针，初始时分别指向字符串的第一个字符和最后一个字符，每次判断左右指针指向的字符是否相同，如果不相同，则不是回文串；如果相同，则将左右指针都往中间移动一位，直到左右指针相遇，则字符串是回文串。\n\n在允许最多删除一个字符的情况下，同样可以使用双指针，通过贪心实现。初始化两个指针 $\\textit{low}$ 和 $\\textit{high}$ 分别指向字符串的第一个字符和最后一个字符。每次判断两个指针指向的字符是否相同，如果相同，则更新指针，将 $\\textit{low}$ 加 $1$，$\\textit{high}$ 减 $1$，然后判断更新后的指针范围内的子串是否是回文字符串。如果两个指针指向的字符不同，则两个字符中必须有一个被删除，此时我们就分成两种情况：即删除左指针对应的字符，留下子串 $s[\\textit{low} + 1 : \\textit{high}]$，或者删除右指针对应的字符，留下子串 $s[\\textit{low} : \\textit{high} - 1]$。当这两个子串中至少有一个是回文串时，就说明原始字符串删除一个字符之后就以成为回文串。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_019/fig1.png)\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean validPalindrome(String s) {\n        int low = 0, high = s.length() - 1;\n        while (low < high) {\n            char c1 = s.charAt(low), c2 = s.charAt(high);\n            if (c1 == c2) {\n                ++low;\n                --high;\n            } else {\n                return validPalindrome(s, low, high - 1) || validPalindrome(s, low + 1, high);\n            }\n        }\n        return true;\n    }\n\n    public boolean validPalindrome(String s, int low, int high) {\n        for (int i = low, j = high; i < j; ++i, --j) {\n            char c1 = s.charAt(i), c2 = s.charAt(j);\n            if (c1 != c2) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```python [sol1-Python3]\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        def checkPalindrome(low, high):\n            i, j = low, high\n            while i < j:\n                if s[i] != s[j]:\n                    return False\n                i += 1\n                j -= 1\n            return True\n\n        low, high = 0, len(s) - 1\n        while low < high:\n            if s[low] == s[high]: \n                low += 1\n                high -= 1\n            else:\n                return checkPalindrome(low + 1, high) or checkPalindrome(low, high - 1)\n        return True\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool checkPalindrome(const string& s, int low, int high) {\n        for (int i = low, j = high; i < j; ++i, --j) {\n            if (s[i] != s[j]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    bool validPalindrome(string s) {\n        int low = 0, high = s.size() - 1;\n        while (low < high) {\n            char c1 = s[low], c2 = s[high];\n            if (c1 == c2) {\n                ++low;\n                --high;\n            } else {\n                return checkPalindrome(s, low, high - 1) || checkPalindrome(s, low + 1, high);\n            }\n        }\n        return true;\n    }\n};\n```\n\n```golang [sol1-Golang]\nfunc validPalindrome(s string) bool {\n    low, high := 0, len(s) - 1\n    for low < high {\n        if s[low] == s[high] {\n            low++\n            high--\n        } else {\n            flag1, flag2 := true, true\n            for i, j := low, high - 1; i < j; i, j = i + 1, j - 1 {\n                if s[i] != s[j] {\n                    flag1 = false\n                    break\n                }\n            }\n            for i, j := low + 1, high; i < j; i, j = i + 1, j - 1 {\n                if s[i] != s[j] {\n                    flag2 = false\n                    break\n                }\n            }\n            return flag1 || flag2\n        }\n    }\n    return true\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 是字符串的长度。判断整个字符串是否是回文字符串的时间复杂度是 $O(n)$，遇到不同字符时，判断两个子串是否是回文字符串的时间复杂度也都是 $O(n)$。\n\n* 空间复杂度：$O(1)$。只需要维护有限的常量空间。"
}