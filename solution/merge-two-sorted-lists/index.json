{
	"titleSlug": "merge-two-sorted-lists",
	"slug": "yi-kan-jiu-hui-yi-xie-jiu-fei-xiang-jie-di-gui-by-",
	"url": "https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/yi-kan-jiu-hui-yi-xie-jiu-fei-xiang-jie-di-gui-by-/",
	"content": "#### 1. 前言\n递归解法总是给人一种“只可意会不可言传”的感觉，代码一看就懂，自己动手一写就呆住了，很难受。究其原因，一是我们练习不够，二是理解不够。\n#### 2. 什么是递归？\n递归的例子在平时生活中很容易见到，比如：\n\n![1.png](https://pic.leetcode-cn.com/86c8ce53d2a91f3d710fdba825333be582a15bd661e9f05a10278bf558fbf1ef-1.png)\n\n开个玩笑😁\n\n什么是递归呢？**函数在运行时调用自己**，这个函数就叫递归函数，调用的过程叫做递归。\n比如定义函数 $f(x)=x+f(x-1)$：\n\n```python []\ndef f(x):\n    return x + f(x-1)\n```\n如果代入 $f(2)$：\n- 返回 $2+f(1)$；\n- 调用 $f(1)$；\n- 返回 $1+f(0)$；\n- 调用 $f(0)$；\n- 返回 $0+f(-1)$\n- ......\n\n这时程序会无休止地运行下去，直到崩溃。\n如果我们加一个判断语句 `x > 0`：\n```python []\ndef f(x):\n    if x > 0:\n        return x + f(x-1)\n    else:  # f(0) = 0\n        return 0\n```\n\n这次计算 $f(2)=2+f(1)=2+1+f(0)=2+1+0=3$。我们从中总结两个规律：\n- 递归函数必须要有**终止条件**，否则会出错；\n- 递归函数先不断调用自身，直到遇到终止条件后进行回溯，最终返回答案。\n\n#### 3. 递归解法\n根据以上规律考虑本题目：\n- 终止条件：当两个链表都为空时，表示我们对链表已合并完成。\n- 如何递归：我们判断 `l1` 和 `l2` 头结点哪个更小，然后较小结点的 `next` 指针指向**其余结点的合并结果。（调用递归）**\n\n\n<![幻灯片1.JPG](https://pic.leetcode-cn.com/668abafb89019020313bfe66f0a4c272967f2ee271cde1c2a8de0bc7b2abc1fe-%E5%B9%BB%E7%81%AF%E7%89%871.JPG),![幻灯片2.JPG](https://pic.leetcode-cn.com/44791a290462582675ea3377dbac43fada52391fb6545f6f9947d6e33feb928c-%E5%B9%BB%E7%81%AF%E7%89%872.JPG),![幻灯片3.JPG](https://pic.leetcode-cn.com/a2376012cffdff9d3469fb3867ff91956da91167786950ff167e66d6eb45397a-%E5%B9%BB%E7%81%AF%E7%89%873.JPG),![幻灯片4.JPG](https://pic.leetcode-cn.com/fe5eca7edea29a76316f7e8529f73a90ae4990fd66fea093c6ee91567788e482-%E5%B9%BB%E7%81%AF%E7%89%874.JPG),![幻灯片5.JPG](https://pic.leetcode-cn.com/e59fd2981f3633cc70a90bd3136e07647ecf89c6f4eefb82159ea54db9772889-%E5%B9%BB%E7%81%AF%E7%89%875.JPG),![幻灯片6.JPG](https://pic.leetcode-cn.com/a09013b986b6b66252276ddbe5e404ce746040b26ab9bc8c195e3fb3e15a05bb-%E5%B9%BB%E7%81%AF%E7%89%876.JPG),![幻灯片7.JPG](https://pic.leetcode-cn.com/e95ec0c841cfa308e5789eb1f9f214f785bc77d99214c01504b303939581eb07-%E5%B9%BB%E7%81%AF%E7%89%877.JPG),![幻灯片8.JPG](https://pic.leetcode-cn.com/c1687ef7811036b7b5e58e4882ed12e243f6a77ddb8077123f013ef094cafd73-%E5%B9%BB%E7%81%AF%E7%89%878.JPG)>\n\n\n#### 代码\n感谢 [@huwt](/u/huwt/) 提供的 c++ 代码！\n```Python []\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        if not l1: return l2  # 终止条件，直到两个链表都空\n        if not l2: return l1\n        if l1.val <= l2.val:  # 递归调用\n            l1.next = self.mergeTwoLists(l1.next,l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1,l2.next)\n            return l2\n```\n```Java []\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        if (l1 == null) {\n            return l2;\n        }\n        else if (l2 == null) {\n            return l1;\n        }\n        else if (l1.val < l2.val) {\n            l1.next = mergeTwoLists(l1.next, l2);\n            return l1;\n        }\n        else {\n            l2.next = mergeTwoLists(l1, l2.next);\n            return l2;\n        }\n\n    }\n}\n```\n\n```C++ []\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (l1 == NULL) {\n            return l2;\n        }\n        if (l2 == NULL) {\n            return l1;\n        }\n        if (l1->val <= l2->val) {\n            l1->next = mergeTwoLists(l1->next, l2);\n            return l1;\n        }\n        l2->next = mergeTwoLists(l1, l2->next);\n        return l2;\n    }\n};\n```\n\n\n**复杂度分析**\n\n如何计算递归的时间复杂度和空间复杂度呢？ 力扣对此进行了 [详细介绍](https://leetcode-cn.com/explore/orignial/card/recursion-i/259/complexity-analysis/1223/) ，其中时间复杂度可以这样计算：\n\n>给出一个递归算法，其时间复杂度 ${\\mathcal{O}(T)}$ 通常是递归调用的数量（记作 ${R}$） 和计算的时间复杂度的乘积（表示为 ${\\mathcal{O}(s)}$）的乘积：${\\mathcal{O}(T) = R * \\mathcal{O}(s)}$ \n\n 时间复杂度：${\\mathcal{O}}(m + n)$。\n\n$m$，$n$ 为 $l_{1}$ 和 $l_{2}$ 的元素个数。递归函数每次去掉一个元素，直到两个链表都为空，因此需要调用 $R=O(m + n)$ 次。而在递归函数中我们只进行了 `next` 指针的赋值操作，复杂度为 $\\mathcal{O}(1)$，故递归的总时间复杂度为 ${\\mathcal{O}(T) = R * \\mathcal{O}(1)}={\\mathcal{O}}(m + n)$ 。\n\n 空间复杂度：${\\mathcal{O}}(m + n)$。**\n\n\n对于递归调用 `self.mergeTwoLists()`，当它遇到终止条件准备回溯时，已经递归调用了 $m+n$ 次，使用了 $m+n$ 个栈帧，故最后的空间复杂度为 ${\\mathcal{O}}(m + n)$。\n\n#### 相关题目\n以下是一些基础但很经典的题目，值得我们好好练习：\n- [344. 反转字符串](https://leetcode-cn.com/problems/reverse-string/)\n- [面试题 08.06. 汉诺塔问题](https://leetcode-cn.com/problems/hanota-lcci/solution/tu-jie-yi-nuo-ta-de-gu-shi-ju-shuo-dang-64ge-pan-z/)\n- [24. 两两交换链表中的节点 ](https://leetcode-cn.com/problems/swap-nodes-in-pairs/)\n- [104. 二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/)\n\n欢迎提供 C++ 代码\n如有问题，欢迎讨论~\n"
}