{
	"titleSlug": "base-7",
	"slug": "qi-jin-zhi-shu-by-leetcode-solution-cl2v",
	"url": "https://leetcode-cn.com/problems/base-7/solution/qi-jin-zhi-shu-by-leetcode-solution-cl2v/",
	"content": "#### 方法一：倒推 + 迭代\n\n**思路**\n\n一个正数的七进制表示 $\\textit{num}_7: \\overline{a_0a_1...a_{n-1}}$（其中 $n$ 为其七进制表示的位数，$a_0$ 为最高位，$a_{n-1}$ 为最低位），其对应的十进制表示为 $\\textit{num}_{10} = \\sum\\limits_{i=0}^{n-1}a_i \\times 7^{n-1-i}$。据此，当我们要计算一个十进制数对应的七进制表示时，可以先计算最低位 $a_{n-1} = \\textit{num}_{10} \\bmod 7$，因为 $\\textit{num}_{10}$ 中对 $7$ 有余的部分仅由 $a_{n-1}$ 贡献。从两边都减去最低位 $a_{n-1}$ 可得，$\\textit{num}_{10} - a_{n-1} = \\sum\\limits_{i=0}^{n-2}a_i \\times 7^{n-1-i}$。两边都除以 $7$，可得 $\\dfrac{\\textit{num}_{10} - a_{n-1}}{7} = \\sum\\limits_{i=0}^{n-2}a_i \\times 7^{n-2-i}$。此时，$\\dfrac{\\textit{num}_{10} - a_{n-1}}{7}$ 中对 $7$ 有余的部分仅由 $a_{n-2}$ 贡献，可得，$a_{n-2} = \\dfrac{\\textit{num}_{10} - a_{n-1}}{7} \\bmod 7$。依此不停迭代，我们可以从最低位到最高位还原出 $\\textit{num}_7$ 的各位数字，直到 $\\textit{num}_{10}$ 归 $0$。\n\n在代码实现上，输入 $\\textit{num}$ 代表我们思路中的十进制表示 $\\textit{num}_{10}$，我们需要将还原出的 $\\textit{num}_7$ 以字符串的形式返回。\n\n当输入为负时，我们可以先取 $\\textit{num}$ 的绝对值来求七进制，最后再添加负号。 \n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def convertToBase7(self, num: int) -> str:\n        if num == 0:\n            return \"0\"\n        negative = num < 0\n        num = abs(num)\n        digits = []\n        while num:\n            digits.append(str(num % 7))\n            num //= 7\n        if negative:\n            digits.append('-')\n        return ''.join(reversed(digits))\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String convertToBase7(int num) {\n        if (num == 0) {\n            return \"0\";\n        }\n        boolean negative = num < 0;\n        num = Math.abs(num);\n        StringBuffer digits = new StringBuffer();\n        while (num > 0) {\n            digits.append(num % 7);\n            num /= 7;\n        }\n        if (negative) {\n            digits.append('-');\n        }\n        return digits.reverse().toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string ConvertToBase7(int num) {\n        if (num == 0) {\n            return \"0\";\n        }\n        bool negative = num < 0;\n        num = Math.Abs(num);\n        StringBuilder sb = new StringBuilder();\n        while (num > 0) {\n            sb.Append(num % 7);\n            num /= 7;\n        }\n        if (negative) {\n            sb.Append('-');\n        }\n        StringBuilder digits = new StringBuilder();\n        for (int i = sb.Length - 1; i >= 0; i--) {\n            digits.Append(sb[i]);\n        }\n        return digits.ToString();\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string convertToBase7(int num) {\n        if (num == 0) {\n            return \"0\";\n        }\n        bool negative = num < 0;\n        num = abs(num);\n        string digits;\n        while (num > 0) {\n            digits.push_back(num % 7 + '0');\n            num /= 7;\n        }\n        if (negative) {\n            digits.push_back('-');\n        }\n        reverse(digits.begin(), digits.end());\n        return digits;\n    }\n};\n```\n\n```C [sol1-C]\nchar * convertToBase7(int num){\n    if (num == 0) {\n        return \"0\";\n    }\n    bool negative = num < 0;\n    num = abs(num);\n    char * digits = (char *)malloc(sizeof(char) * 32);\n    int pos = 0;\n    while (num > 0) {\n        digits[pos++] = num % 7 + '0';\n        num /= 7;\n    }\n    if (negative) {\n        digits[pos++] = '-';\n    }\n    for (int l = 0, r = pos - 1; l < r; l++, r--) {\n        char c = digits[l];\n        digits[l] = digits[r];\n        digits[r] = c;\n    }\n    digits[pos] = '\\0';\n    return digits;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar convertToBase7 = function(num) {\n    if (num === 0) {\n        return \"0\";\n    }\n    let negative = num < 0;\n    num = Math.abs(num);\n    const digits = [];\n    while (num > 0) {\n        digits.push(num % 7);\n        num = Math.floor(num / 7);\n    }\n    if (negative) {\n        digits.push('-');\n    }\n    return digits.reverse().join('');\n};\n```\n\n```go [sol1-Golang]\nfunc convertToBase7(num int) string {\n    if num == 0 {\n        return \"0\"\n    }\n    negative := num < 0\n    if negative {\n        num = -num\n    }\n    s := []byte{}\n    for num > 0 {\n        s = append(s, '0'+byte(num%7))\n        num /= 7\n    }\n    if negative {\n        s = append(s, '-')\n    }\n    for i, n := 0, len(s); i < n/2; i++ {\n        s[i], s[n-1-i] = s[n-1-i], s[i]\n    }\n    return string(s)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log |\\textit{num}|)$，其中 $|\\textit{num}|$ 表示 $\\textit{num}$ 的绝对值。循环中最多做 $O(\\log |\\textit{num}|)$ 次除法。\n\n- 空间复杂度：$O(\\log |\\textit{num}|)$。字符数组的长度最多为 $O(\\log |\\textit{num}|)$。部分语言可以直接修改字符串，空间复杂度为 $O(1)$。"
}