{
	"titleSlug": "longer-contiguous-segments-of-ones-than-zeros",
	"slug": "na-chong-lian-xu-zi-zi-fu-chuan-geng-cha-loxt",
	"url": "https://leetcode-cn.com/problems/longer-contiguous-segments-of-ones-than-zeros/solution/na-chong-lian-xu-zi-zi-fu-chuan-geng-cha-loxt/",
	"content": "#### 方法一：遍历字符串\n\n**思路与算法**\n\n我们可以遍历字符串并维护连续的 $\\texttt{`0'}$ 与 $\\texttt{`1'}$ 子串的最长长度 $\\textit{mx}_0$ 与 $\\textit{mx}_1$。\n\n在遍历字符串的时候，我们维护上一个字符 $\\textit{prev}$ 与当前连续子串的最长长度 $\\textit{cnt}$。\n\n对于每一个字符 $\\textit{ch}$，我们判断它与 $\\textit{prev}$ 是否相等：\n\n- 如果相等，则将 $\\textit{cnt}$ 增加 $1$；\n\n- 如果不相等，则根据 $\\textit{prev}$ 的内容更新对应的 $\\textit{mx}_0$ 与 $\\textit{mx}_1$。\n\n除此以外，在遍历结束后，我们还需要根据字符串结尾的连续子串形式维护对应的 $\\textit{mx}_0$ 与 $\\textit{mx}_1$。\n\n最终，我们比较 $\\textit{mx}_0$ 与 $\\textit{mx}_1$ 的大小并返回答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool checkZeroOnes(string s) {\n        int mx0 = 0;\n        int mx1 = 0;\n        char prev = '#';   // 上个字符\n        int cnt = 0;\n        for (char ch: s){\n            // 当前字符与上个字符相等\n            if (ch == prev){\n                ++cnt;\n            }\n            // 当前字符与上个字符不相等\n            else{\n                if (prev == '0'){\n                    mx0 = max(mx0, cnt);\n                }\n                else if (prev == '1'){\n                    mx1 = max(mx1, cnt);\n                }\n                cnt = 1;\n            }\n            prev = ch;\n        }\n        // 字符串结尾的连续子串\n        if (prev == '0'){\n            mx0 = max(mx0, cnt);\n        }\n        else if (prev == '1'){\n            mx1 = max(mx1, cnt);\n        }\n        return mx1 > mx0;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def checkZeroOnes(self, s: str) -> bool:\n        mx0, mx1 = 0, 0\n        cnt = 0\n        prev = '#'   # 上个字符\n        for ch in s:\n            # 当前字符与上个字符相等\n            if prev == ch:\n                cnt += 1\n            # 当前字符与上个字符不相等\n            else:\n                if prev == '0':\n                    mx0 = max(mx0, cnt)\n                elif prev == '1':\n                    mx1 = max(mx1, cnt)\n                cnt = 1\n            prev = ch\n        # 字符串结尾的连续子串\n        if prev == '0':\n            mx0 = max(mx0, cnt)\n        elif prev == '1':\n            mx1 = max(mx1, cnt)\n        return mx1 > mx0\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为字符串的长度，即为遍历一遍字符串的时间复杂度。\n\n- 空间复杂度：$O(1)$，我们只使用了常数个变量。"
}