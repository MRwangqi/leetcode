{
	"titleSlug": "pacific-atlantic-water-flow",
	"slug": "tai-ping-yang-da-xi-yang-shui-liu-wen-ti-sjk3",
	"url": "https://leetcode-cn.com/problems/pacific-atlantic-water-flow/solution/tai-ping-yang-da-xi-yang-shui-liu-wen-ti-sjk3/",
	"content": "#### 方法一：深度优先搜索\n\n雨水的流动方向是从高到低，每个单元格上的雨水只能流到高度小于等于当前单元格的相邻单元格。从一个单元格开始，通过搜索的方法模拟雨水的流动，则可以判断雨水是否可以从该单元格流向海洋。\n\n如果直接以每个单元格作为起点模拟雨水的流动，则会重复遍历每个单元格，导致时间复杂度过高。为了降低时间复杂度，可以从矩阵的边界开始反向搜索寻找雨水流向边界的单元格，反向搜索时，每次只能移动到高度相同或更大的单元格。\n\n由于矩阵的左边界和上边界是太平洋，矩阵的右边界和下边界是大西洋，因此从矩阵的左边界和上边界开始反向搜索即可找到雨水流向太平洋的单元格，从矩阵的右边界和下边界开始反向搜索即可找到雨水流向大西洋的单元格。\n\n可以使用深度优先搜索实现反向搜索，搜索过程中需要记录每个单元格是否可以从太平洋反向到达以及是否可以从大西洋反向到达。反向搜索结束之后，遍历每个网格，如果一个网格既可以从太平洋反向到达也可以从大西洋反向到达，则该网格满足太平洋和大西洋都可以到达，将该网格添加到答案中。\n\n```Python [sol1-Python3]\nclass Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        m, n = len(heights), len(heights[0])\n\n        def search(starts: List[Tuple[int, int]]) -> Set[Tuple[int, int]]:\n            visited = set()\n            def dfs(x: int, y: int):\n                if (x, y) in visited:\n                    return\n                visited.add((x, y))\n                for nx, ny in ((x, y + 1), (x, y - 1), (x - 1, y), (x + 1, y)):\n                    if 0 <= nx < m and 0 <= ny < n and heights[nx][ny] >= heights[x][y]:\n                        dfs(nx, ny)\n            for x, y in starts:\n                dfs(x, y)\n            return visited\n\n        pacific = [(0, i) for i in range(n)] + [(i, 0) for i in range(1, m)]\n        atlantic = [(m - 1, i) for i in range(n)] + [(i, n - 1) for i in range(m - 1)]\n        return list(map(list, search(pacific) & search(atlantic)))\n```\n\n```Java [sol1-Java]\nclass Solution {\n    static int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    int[][] heights;\n    int m, n;\n\n    public List<List<Integer>> pacificAtlantic(int[][] heights) {\n        this.heights = heights;\n        this.m = heights.length;\n        this.n = heights[0].length;\n        boolean[][] pacific = new boolean[m][n];\n        boolean[][] atlantic = new boolean[m][n];\n        for (int i = 0; i < m; i++) {\n            dfs(i, 0, pacific);\n        }\n        for (int j = 1; j < n; j++) {\n            dfs(0, j, pacific);\n        }\n        for (int i = 0; i < m; i++) {\n            dfs(i, n - 1, atlantic);\n        }\n        for (int j = 0; j < n - 1; j++) {\n            dfs(m - 1, j, atlantic);\n        }\n        List<List<Integer>> result = new ArrayList<List<Integer>>();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (pacific[i][j] && atlantic[i][j]) {\n                    List<Integer> cell = new ArrayList<Integer>();\n                    cell.add(i);\n                    cell.add(j);\n                    result.add(cell);\n                }\n            }\n        }\n        return result;\n    }\n\n    public void dfs(int row, int col, boolean[][] ocean) {\n        if (ocean[row][col]) {\n            return;\n        }\n        ocean[row][col] = true;\n        for (int[] dir : dirs) {\n            int newRow = row + dir[0], newCol = col + dir[1];\n            if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[row][col]) {\n                dfs(newRow, newCol, ocean);\n            }\n        }\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    static int[][] dirs = {new int[]{-1, 0}, new int[]{1, 0}, new int[]{0, -1}, new int[]{0, 1}};\n    int[][] heights;\n    int m, n;\n\n    public IList<IList<int>> PacificAtlantic(int[][] heights) {\n        this.heights = heights;\n        this.m = heights.Length;\n        this.n = heights[0].Length;\n        bool[][] pacific = new bool[m][];\n        bool[][] atlantic = new bool[m][];\n        for (int i = 0; i < m; i++) {\n            pacific[i] = new bool[n];\n            atlantic[i] = new bool[n];\n        }\n        for (int i = 0; i < m; i++) {\n            DFS(i, 0, pacific);\n        }\n        for (int j = 1; j < n; j++) {\n            DFS(0, j, pacific);\n        }\n        for (int i = 0; i < m; i++) {\n            DFS(i, n - 1, atlantic);\n        }\n        for (int j = 0; j < n - 1; j++) {\n            DFS(m - 1, j, atlantic);\n        }\n        IList<IList<int>> result = new List<IList<int>>();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (pacific[i][j] && atlantic[i][j]) {\n                    IList<int> cell = new List<int>();\n                    cell.Add(i);\n                    cell.Add(j);\n                    result.Add(cell);\n                }\n            }\n        }\n        return result;\n    }\n\n    public void DFS(int row, int col, bool[][] ocean) {\n        if (ocean[row][col]) {\n            return;\n        }\n        ocean[row][col] = true;\n        foreach (int[] dir in dirs) {\n            int newRow = row + dir[0], newCol = col + dir[1];\n            if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[row][col]) {\n                DFS(newRow, newCol, ocean);\n            }\n        }\n    }\n}\n```\n\n```C++ [sol1-C++]\nstatic const int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\nclass Solution {\npublic:\n    vector<vector<int>> heights;\n\n    void dfs(int row, int col, vector<vector<bool>> & ocean) {\n        int m = ocean.size();\n        int n = ocean[0].size();\n        if (ocean[row][col]) {\n            return;\n        }\n        ocean[row][col] = true;\n        for (int i = 0; i < 4; i++) {\n            int newRow = row + dirs[i][0], newCol = col + dirs[i][1];\n            if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[row][col]) {\n                dfs(newRow, newCol, ocean);\n            }\n        }\n    }\n\n    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n        this->heights = heights;\n        int m = heights.size();\n        int n = heights[0].size();\n        vector<vector<bool>> pacific(m, vector<bool>(n, false));\n        vector<vector<bool>> atlantic(m, vector<bool>(n, false));\n\n        for (int i = 0; i < m; i++) {\n            dfs(i, 0, pacific);\n        }\n        for (int j = 1; j < n; j++) {\n            dfs(0, j, pacific);\n        }\n        for (int i = 0; i < m; i++) {\n            dfs(i, n - 1, atlantic);\n        }\n        for (int j = 0; j < n - 1; j++) {\n            dfs(m - 1, j, atlantic);\n        }\n        vector<vector<int>> result;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (pacific[i][j] && atlantic[i][j]) {\n                    vector<int> cell;\n                    cell.emplace_back(i);\n                    cell.emplace_back(j);\n                    result.emplace_back(cell);\n                }\n            }\n        }\n        return result;\n    }\n};\n```\n\n```C [sol1-C]\nstatic const int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\nvoid dfs(int row, int col, bool ** ocean, const int ** heights, int m, int n) {\n    if (ocean[row][col]) {\n        return;\n    }\n    ocean[row][col] = true;\n    for (int i = 0; i < 4; i++) {\n        int newRow = row + dirs[i][0], newCol = col + dirs[i][1];\n        if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[row][col]) {\n            dfs(newRow, newCol, ocean, heights, m, n);\n        }\n    }\n}\n\nint** pacificAtlantic(int** heights, int heightsSize, int* heightsColSize, int* returnSize, int** returnColumnSizes){\n        int m = heightsSize;\n        int n = heightsColSize[0];\n        bool ** pacific = (bool **)malloc(sizeof(bool *) * m);\n        bool ** atlantic = (bool **)malloc(sizeof(bool *) * m);\n        for (int i = 0; i < m; i++) {\n            pacific[i] = (bool *)malloc(sizeof(bool) * n);\n            atlantic[i] = (bool *)malloc(sizeof(bool) * n);\n            memset(pacific[i], 0, sizeof(bool) * n);\n            memset(atlantic[i], 0, sizeof(bool) * n);\n        }\n\n        for (int i = 0; i < m; i++) {\n            dfs(i, 0, pacific, heights, m, n);\n        }\n        for (int j = 1; j < n; j++) {\n            dfs(0, j, pacific, heights, m, n);\n        }\n        for (int i = 0; i < m; i++) {\n            dfs(i, n - 1, atlantic, heights, m, n);\n        }\n        for (int j = 0; j < n - 1; j++) {\n            dfs(m - 1, j, atlantic, heights, m, n);\n        }\n        int ** result = (int **)malloc(sizeof(int *) * m * n);\n        *returnColumnSizes = (int *)malloc(sizeof(int) * m * n);\n        int pos = 0;\n        for (int i = 0; i < m * n; i++) {\n            result[i] = (int *)malloc(sizeof(int) * 2);\n            (*returnColumnSizes)[i] = 2;\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (pacific[i][j] && atlantic[i][j]) {\n                    result[pos][0] = i;\n                    result[pos][1] = j;\n                    pos++;\n                }\n            }\n            free(pacific[i]);\n            free(atlantic[i]);\n        }\n        free(pacific);\n        free(atlantic);\n        *returnSize = pos;\n        return result;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];\nvar pacificAtlantic = function(heights) {\n    m = heights.length;\n    n = heights[0].length;\n    const pacific = new Array(m).fill(0).map(() => new Array(n).fill(0));\n    const atlantic = new Array(m).fill(0).map(() => new Array(n).fill(0));\n\n    const dfs = (row, col, ocean) => {\n        if (ocean[row][col]) {\n            return;\n        }\n        ocean[row][col] = true;\n        for (const dir of dirs) {\n            const newRow = row + dir[0], newCol = col + dir[1];\n            if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[row][col]) {\n                dfs(newRow, newCol, ocean);\n            }\n        }\n    };\n\n    for (let i = 0; i < m; i++) {\n        dfs(i, 0, pacific);\n    }\n    for (let j = 1; j < n; j++) {\n        dfs(0, j, pacific);\n    }\n    for (let i = 0; i < m; i++) {\n        dfs(i, n - 1, atlantic);\n    }\n    for (let j = 0; j < n - 1; j++) {\n        dfs(m - 1, j, atlantic);\n    }\n    const result = [];\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (pacific[i][j] && atlantic[i][j]) {\n                const cell = [];\n                cell.push(i);\n                cell.push(j);\n                result.push(cell);\n            }\n        }\n    }\n    return result;\n}\n```\n\n```go [sol1-Golang]\nvar dirs = []struct{ x, y int }{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\nfunc pacificAtlantic(heights [][]int) (ans [][]int) {\n    m, n := len(heights), len(heights[0])\n    pacific := make([][]bool, m)\n    atlantic := make([][]bool, m)\n    for i := range pacific {\n        pacific[i] = make([]bool, n)\n        atlantic[i] = make([]bool, n)\n    }\n\n    var dfs func(int, int, [][]bool)\n    dfs = func(x, y int, ocean [][]bool) {\n        if ocean[x][y] {\n            return\n        }\n        ocean[x][y] = true\n        for _, d := range dirs {\n            if nx, ny := x+d.x, y+d.y; 0 <= nx && nx < m && 0 <= ny && ny < n && heights[nx][ny] >= heights[x][y] {\n                dfs(nx, ny, ocean)\n            }\n        }\n    }\n    for i := 0; i < m; i++ {\n        dfs(i, 0, pacific)\n    }\n    for j := 1; j < n; j++ {\n        dfs(0, j, pacific)\n    }\n    for i := 0; i < m; i++ {\n        dfs(i, n-1, atlantic)\n    }\n    for j := 0; j < n-1; j++ {\n        dfs(m-1, j, atlantic)\n    }\n\n    for i, row := range pacific {\n        for j, ok := range row {\n            if ok && atlantic[i][j] {\n                ans = append(ans, []int{i, j})\n            }\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是矩阵 $\\textit{heights}$ 的行数和列数。深度优先搜索最多遍历每个单元格两次，寻找太平洋和大西洋都可以到达的单元格需要遍历整个矩阵，因此时间复杂度是 $O(mn)$。\n\n- 空间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是矩阵 $\\textit{heights}$ 的行数和列数。深度优先搜索的递归调用层数是 $O(mn)$，记录每个单元格是否可以到达太平洋和大西洋需要 $O(mn)$ 的空间，因此空间复杂度是 $O(mn)$。\n\n#### 方法二：广度优先搜索\n\n反向搜索也可以使用广度优先搜索实现。搜索过程中同样需要记录每个单元格是否可以从太平洋反向到达以及是否可以从大西洋反向到达。反向搜索结束之后，遍历每个网格，如果一个网格既可以从太平洋反向到达也可以从大西洋反向到达，则该网格满足太平洋和大西洋都可以到达，将该网格添加到答案中。\n\n```Python [sol2-Python3]\nclass Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        m, n = len(heights), len(heights[0])\n\n        def bfs(starts: List[Tuple[int, int]]) -> Set[Tuple[int, int]]:\n            q = deque(starts)\n            visited = set(starts)\n            while q:\n                x, y = q.popleft()\n                for nx, ny in ((x, y + 1), (x, y - 1), (x - 1, y), (x + 1, y)):\n                    if 0 <= nx < m and 0 <= ny < n and heights[nx][ny] >= heights[x][y] and (nx, ny) not in visited:\n                        q.append((nx, ny))\n                        visited.add((nx, ny))\n            return visited\n\n        pacific = [(0, i) for i in range(n)] + [(i, 0) for i in range(1, m)]\n        atlantic = [(m - 1, i) for i in range(n)] + [(i, n - 1) for i in range(m - 1)]\n        return list(map(list, bfs(pacific) & bfs(atlantic)))\n```\n\n```Java [sol2-Java]\nclass Solution {\n    static int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    int[][] heights;\n    int m, n;\n\n    public List<List<Integer>> pacificAtlantic(int[][] heights) {\n        this.heights = heights;\n        this.m = heights.length;\n        this.n = heights[0].length;\n        boolean[][] pacific = new boolean[m][n];\n        boolean[][] atlantic = new boolean[m][n];\n        for (int i = 0; i < m; i++) {\n            bfs(i, 0, pacific);\n        }\n        for (int j = 1; j < n; j++) {\n            bfs(0, j, pacific);\n        }\n        for (int i = 0; i < m; i++) {\n            bfs(i, n - 1, atlantic);\n        }\n        for (int j = 0; j < n - 1; j++) {\n            bfs(m - 1, j, atlantic);\n        }\n        List<List<Integer>> result = new ArrayList<List<Integer>>();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (pacific[i][j] && atlantic[i][j]) {\n                    List<Integer> cell = new ArrayList<Integer>();\n                    cell.add(i);\n                    cell.add(j);\n                    result.add(cell);\n                }\n            }\n        }\n        return result;\n    }\n\n    public void bfs(int row, int col, boolean[][] ocean) {\n        if (ocean[row][col]) {\n            return;\n        }\n        ocean[row][col] = true;\n        Queue<int[]> queue = new ArrayDeque<int[]>();\n        queue.offer(new int[]{row, col});\n        while (!queue.isEmpty()) {\n            int[] cell = queue.poll();\n            for (int[] dir : dirs) {\n                int newRow = cell[0] + dir[0], newCol = cell[1] + dir[1];\n                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[cell[0]][cell[1]] && !ocean[newRow][newCol]) {\n                    ocean[newRow][newCol] = true;\n                    queue.offer(new int[]{newRow, newCol});\n                }\n            }\n        }\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    static int[][] dirs = {new int[]{-1, 0}, new int[]{1, 0}, new int[]{0, -1}, new int[]{0, 1}};\n    int[][] heights;\n    int m, n;\n\n    public IList<IList<int>> PacificAtlantic(int[][] heights) {\n        this.heights = heights;\n        this.m = heights.Length;\n        this.n = heights[0].Length;\n        bool[][] pacific = new bool[m][];\n        bool[][] atlantic = new bool[m][];\n        for (int i = 0; i < m; i++) {\n            pacific[i] = new bool[n];\n            atlantic[i] = new bool[n];\n        }\n        for (int i = 0; i < m; i++) {\n            BFS(i, 0, pacific);\n        }\n        for (int j = 1; j < n; j++) {\n            BFS(0, j, pacific);\n        }\n        for (int i = 0; i < m; i++) {\n            BFS(i, n - 1, atlantic);\n        }\n        for (int j = 0; j < n - 1; j++) {\n            BFS(m - 1, j, atlantic);\n        }\n        IList<IList<int>> result = new List<IList<int>>();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (pacific[i][j] && atlantic[i][j]) {\n                    IList<int> cell = new List<int>();\n                    cell.Add(i);\n                    cell.Add(j);\n                    result.Add(cell);\n                }\n            }\n        }\n        return result;\n    }\n\n    public void BFS(int row, int col, bool[][] ocean) {\n        if (ocean[row][col]) {\n            return;\n        }\n        ocean[row][col] = true;\n        Queue<Tuple<int, int>> queue = new Queue<Tuple<int, int>>();\n        queue.Enqueue(new Tuple<int, int>(row, col));\n        while (queue.Count > 0) {\n            Tuple<int, int> cell = queue.Dequeue();\n            foreach (int[] dir in dirs) {\n                int newRow = cell.Item1 + dir[0], newCol = cell.Item2 + dir[1];\n                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[cell.Item1][cell.Item2] && !ocean[newRow][newCol]) {\n                    ocean[newRow][newCol] = true;\n                    queue.Enqueue(new Tuple<int, int>(newRow, newCol));\n                }\n            }\n        }\n    }\n}\n```\n\n```C++ [sol2-C++]\nstatic const int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\nclass Solution {\npublic:\n    vector<vector<int>> heights;\n\n    void bfs(int row, int col, vector<vector<bool>> & ocean) {\n        if (ocean[row][col]) {\n            return;\n        }\n        int m = heights.size();\n        int n = heights[0].size();\n        ocean[row][col] = true;\n        queue<pair<int, int>> qu;\n        qu.emplace(row, col);\n        while (!qu.empty()) {\n            auto [row, col] = qu.front();\n            qu.pop();\n            for (int i = 0; i < 4; i++) {\n                int newRow = row + dirs[i][0], newCol = col + dirs[i][1];\n                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[row][col] && !ocean[newRow][newCol]) {\n                    ocean[newRow][newCol] = true;\n                    qu.emplace(newRow, newCol);\n                }\n            }\n        }\n    }\n\n    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n        this->heights = heights;\n        int m = heights.size();\n        int n = heights[0].size();\n        vector<vector<bool>> pacific(m, vector<bool>(n, false));\n        vector<vector<bool>> atlantic(m, vector<bool>(n, false));\n\n        for (int i = 0; i < m; i++) {\n            bfs(i, 0, pacific);\n        }\n        for (int j = 1; j < n; j++) {\n            bfs(0, j, pacific);\n        }\n        for (int i = 0; i < m; i++) {\n            bfs(i, n - 1, atlantic);\n        }\n        for (int j = 0; j < n - 1; j++) {\n            bfs(m - 1, j, atlantic);\n        }\n        vector<vector<int>> result;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (pacific[i][j] && atlantic[i][j]) {\n                    vector<int> cell;\n                    cell.emplace_back(i);\n                    cell.emplace_back(j);\n                    result.emplace_back(cell);\n                }\n            }\n        }\n        return result;\n    }\n};\n```\n\n```C [sol2-C]\nstatic const int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\nvoid bfs(int row, int col, bool ** ocean, const int ** heights, int m, int n) {\n    if (ocean[row][col]) {\n        return;\n    }\n    ocean[row][col] = true;\n    int * queue = (int *)malloc(sizeof(int) * m * n);\n    int head = 0;\n    int tail = 0;\n    queue[tail++] = row * n + col;\n    while (head != tail) {\n        int row = queue[head] / n;\n        int col = queue[head] % n;\n        head++;\n        for (int i = 0; i < 4; i++) {\n            int newRow = row + dirs[i][0], newCol = col + dirs[i][1];\n            if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[row][col] && !ocean[newRow][newCol]) {\n                ocean[newRow][newCol] = true;\n                queue[tail++] = newRow * n + newCol;\n            }\n        }\n    }\n    free(queue);\n}\n\nint** pacificAtlantic(int** heights, int heightsSize, int* heightsColSize, int* returnSize, int** returnColumnSizes){\n        int m = heightsSize;\n        int n = heightsColSize[0];\n        bool ** pacific = (bool **)malloc(sizeof(bool *) * m);\n        bool ** atlantic = (bool **)malloc(sizeof(bool *) * m);\n        for (int i = 0; i < m; i++) {\n            pacific[i] = (bool *)malloc(sizeof(bool) * n);\n            atlantic[i] = (bool *)malloc(sizeof(bool) * n);\n            memset(pacific[i], 0, sizeof(bool) * n);\n            memset(atlantic[i], 0, sizeof(bool) * n);\n        }\n\n        for (int i = 0; i < m; i++) {\n            bfs(i, 0, pacific, heights, m, n);\n        }\n        for (int j = 1; j < n; j++) {\n            bfs(0, j, pacific, heights, m, n);\n        }\n        for (int i = 0; i < m; i++) {\n            bfs(i, n - 1, atlantic, heights, m, n);\n        }\n        for (int j = 0; j < n - 1; j++) {\n            bfs(m - 1, j, atlantic, heights, m, n);\n        }\n        int ** result = (int **)malloc(sizeof(int *) * m * n);\n        *returnColumnSizes = (int *)malloc(sizeof(int) * m * n);\n        int pos = 0;\n        for (int i = 0; i < m * n; i++) {\n            result[i] = (int *)malloc(sizeof(int) * 2);\n            (*returnColumnSizes)[i] = 2;\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (pacific[i][j] && atlantic[i][j]) {\n                    result[pos][0] = i;\n                    result[pos][1] = j;\n                    pos++;\n                }\n            }\n            free(pacific[i]);\n            free(atlantic[i]);\n        }\n        free(pacific);\n        free(atlantic);\n        *returnSize = pos;\n        return result;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nconst dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];\nvar pacificAtlantic = function(heights) {\n    m = heights.length;\n    n = heights[0].length;\n    const pacific = new Array(m).fill(0).map(() => new Array(n).fill(0));\n    const atlantic = new Array(m).fill(0).map(() => new Array(n).fill(0));\n\n    const bfs = (row, col, ocean) => {\n        if (ocean[row][col]) {\n            return;\n        }\n        ocean[row][col] = true;\n        const queue = [];\n        queue.push([row, col]);\n        while (queue.length) {\n            const cell = queue.shift();\n            for (const dir of dirs) {\n                const newRow = cell[0] + dir[0], newCol = cell[1] + dir[1];\n                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[cell[0]][cell[1]] && !ocean[newRow][newCol]) {\n                    ocean[newRow][newCol] = true;\n                    queue.push([newRow, newCol]);\n                }\n            }\n        }\n    };\n\n    for (let i = 0; i < m; i++) {\n        bfs(i, 0, pacific);\n    }\n    for (let j = 1; j < n; j++) {\n        bfs(0, j, pacific);\n    }\n    for (let i = 0; i < m; i++) {\n        bfs(i, n - 1, atlantic);\n    }\n    for (let j = 0; j < n - 1; j++) {\n        bfs(m - 1, j, atlantic);\n    }\n    const result = [];\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (pacific[i][j] && atlantic[i][j]) {\n                const cell = [];\n                cell.push(i);\n                cell.push(j);\n                result.push(cell);\n            }\n        }\n    }\n    return result;\n}\n```\n\n```go [sol2-Golang]\ntype pair struct{ x, y int }\nvar dirs = []pair{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\nfunc pacificAtlantic(heights [][]int) (ans [][]int) {\n    m, n := len(heights), len(heights[0])\n    pacific := make([][]bool, m)\n    atlantic := make([][]bool, m)\n    for i := range pacific {\n        pacific[i] = make([]bool, n)\n        atlantic[i] = make([]bool, n)\n    }\n\n    bfs := func(x, y int, ocean [][]bool) {\n        if ocean[x][y] {\n            return\n        }\n        ocean[x][y] = true\n        q := []pair{{x, y}}\n        for len(q) > 0 {\n            p := q[0]\n            q = q[1:]\n            for _, d := range dirs {\n                if x, y := p.x+d.x, p.y+d.y; 0 <= x && x < m && 0 <= y && y < n && !ocean[x][y] && heights[x][y] >= heights[p.x][p.y] {\n                    ocean[x][y] = true\n                    q = append(q, pair{x, y})\n                }\n            }\n        }\n    }\n    for i := 0; i < m; i++ {\n        bfs(i, 0, pacific)\n    }\n    for j := 1; j < n; j++ {\n        bfs(0, j, pacific)\n    }\n    for i := 0; i < m; i++ {\n        bfs(i, n-1, atlantic)\n    }\n    for j := 0; j < n-1; j++ {\n        bfs(m-1, j, atlantic)\n    }\n\n    for i, row := range pacific {\n        for j, ok := range row {\n            if ok && atlantic[i][j] {\n                ans = append(ans, []int{i, j})\n            }\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是矩阵 $\\textit{heights}$ 的行数和列数。广度优先搜索最多遍历每个单元格两次，寻找太平洋和大西洋都可以到达的单元格需要遍历整个矩阵，因此时间复杂度是 $O(mn)$。\n\n- 空间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是矩阵 $\\textit{heights}$ 的行数和列数。广度优先搜索的队列空间是 $O(mn)$，记录每个单元格是否可以到达太平洋和大西洋需要 $O(mn)$ 的空间，因此空间复杂度是 $O(mn)$。"
}