{
	"titleSlug": "find-the-longest-valid-obstacle-course-at-each-position",
	"slug": "zhao-chu-dao-mei-ge-wei-zhi-wei-zhi-zui-pb8mu",
	"url": "https://leetcode-cn.com/problems/find-the-longest-valid-obstacle-course-at-each-position/solution/zhao-chu-dao-mei-ge-wei-zhi-wei-zhi-zui-pb8mu/",
	"content": "#### 方法一：动态规划 + 二分查找\n\n**思路与算法**\n\n本题和[「300. 最长递增子序列」](https://leetcode-cn.com/problems/longest-increasing-subsequence/)是几乎一样的题目。\n\n可以发现，我们需要求出的是数组 $\\textit{obstacles}$ 中以每一个下标为结束位置的「最长递增子序列」的长度，其中「递增」表示子序列中相邻两个元素需要满足前者小于等于后者。而 300 题需要求出的是数组中的「最长严格递增子序列」，我们只需要修改比较两个元素的大小关系的逻辑（将「小于等于」改成「小于」，反之亦然），就可以实现这两种问题之间的相互转换。\n\n由于在求解「最长严格递增子序列」的过程中，是需要求出以每一个下标为结束位置的「最长严格递增子序列」的长度的，因此我们可以直接使用[「300. 最长递增子序列」的官方题解](https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/)中方法二的代码。如果读者对该方法不熟悉，可以阅读官方题解或者其它参考资料进行学习，本题解不再赘述。\n\n**代码**\n\n下面的代码直接修改自 [「300. 最长递增子序列」的官方题解](https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/)中方法二的 $\\texttt{Python}$ 代码。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {\n        vector<int> d, ans;\n        for (int ob: obstacles) {\n            // 这里需要改成 >=\n            if (d.empty() || ob >= d.back()) {\n                d.push_back(ob);\n                ans.push_back(d.size());\n            }\n            else {\n                // 将 300 题解中的二分查找改为 API 调用使得代码更加直观\n                // 如果是最长严格递增子序列，这里是 lower_bound\n                // 如果是最长递增子序列，这里是 upper_bound\n                int loc = upper_bound(d.begin(), d.end(), ob) - d.begin();\n                ans.push_back(loc + 1);\n                d[loc] = ob;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:\n        d = list()\n        ans = list()\n        for ob in obstacles:\n            # 这里需要改成 >=\n            if not d or ob >= d[-1]:\n                d.append(ob)\n                ans.append(len(d))\n            else:\n                # 将 300 题解中的二分查找改为 API 调用使得代码更加直观\n                # 如果是最长严格递增子序列，这里是 bisect_left\n                # 如果是最长递增子序列，这里是 bisect_right\n                loc = bisect_right(d, ob)\n                ans.append(loc + 1)\n                d[loc] = ob\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$。\n\n- 空间复杂度：$O(n)$。"
}