{
	"titleSlug": "operations-on-tree",
	"slug": "sui-bian-zuo-by-qian-li-ma-8-8skg",
	"url": "https://leetcode-cn.com/problems/operations-on-tree/solution/sui-bian-zuo-by-qian-li-ma-8-8skg/",
	"content": "### 解题思路\n\n### 代码\n\n```python3\nclass LockingTree:\n\n    def __init__(self, parent: List[int]):\n        n=len(parent)\n        self.locking=[0 for i in range(n)]\n        edges={}\n        for i in range(n):\n            edges[i]=set()\n        for i in range(1,n):\n            edges[parent[i]].add(i)\n        self.locked=set()\n        self.children={}\n        def dfs(root):\n            lst=set()\n            if not edges[root]:\n                self.children[root]=set()\n                return set()\n            else:\n                for i in edges[root]:\n                    lst.add(i)\n                    t=dfs(i)\n                    lst|=t\n                self.children[root]=lst\n                return lst\n        dfs(0)\n        self.parents={}\n        def find_parent(root,cur):\n            if root==0:\n                self.parents[0]=set()\n                for i in edges[root]:\n                    find_parent(i,{0})\n            else:\n                self.parents[root]=cur\n                new=cur.copy()\n                new.add(root)\n                for i in edges[root]:\n                    find_parent(i,new)\n        find_parent(0,set())\n  \n    def lock(self, num: int, user: int) -> bool:\n        if self.locking[num]==0:\n            self.locking[num]=user\n            self.locked.add(num)\n            return True\n        return False\n\n    def unlock(self, num: int, user: int) -> bool:\n        if self.locking[num]==user:\n            self.locking[num]=0\n            self.locked.remove(num)\n            return True\n        return False\n\n    def upgrade(self, num: int, user: int) -> bool:\n        if self.children[num]&self.locked and self.locking[num]==0 and (not self.parents[num]&self.locked):\n            self.locking[num]=user\n            self.locked.add(num)\n            for i in self.children[num]:\n                if self.locking[i]!=0:\n                    self.locking[i]=0\n                    self.locked.remove(i)\n            return True\n        return False\n\n\n# Your LockingTree object will be instantiated and called as such:\n# obj = LockingTree(parent)\n# param_1 = obj.lock(num,user)\n# param_2 = obj.unlock(num,user)\n# param_3 = obj.upgrade(num,user)\n```"
}