{
	"titleSlug": "minesweeper",
	"slug": "sao-lei-you-xi-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/minesweeper/solution/sao-lei-you-xi-by-leetcode-solution/",
	"content": "#### 方法一：深度优先搜索 + 模拟\n\n**思路与算法**\n\n由于题目要求你根据规则来展示执行一次点击操作后游戏面板的变化，所以我们只要明确该扫雷游戏的规则，并用代码模拟出来即可。\n\n那我们着眼于题目的规则，会发现总共分两种情况：\n1. 当前点击的是「未挖出的地雷」，我们将其值改为 $\\text{X}$ 即可。\n2. 当前点击的是「未挖出的空方块」，我们需要统计它周围相邻的方块里地雷的数量 $\\textit{cnt}$（即 $\\text{M}$ 的数量）。如果 $\\textit{cnt}$ 为零，即执行规则 $2$，此时需要将其改为 $\\text{B}$，且**递归地处理**周围的八个**未挖出**的方块，递归终止条件即为规则 $4$，没有更多方块可被揭露的时候。否则执行规则 $3$，将其修改为数字即可。\n\n整体看来，一次点击过程会从一个位置出发，逐渐向外圈扩散，所以这引导我们利用「搜索」的方式来实现。这里以深度优先搜索为例：我们定义递归函数 `dfs(x, y)` 表示当前在 $(x,y)$ 点，执行扫雷规则的情况，我们只要按照上面理出来的情况来进行模拟即可，在 $\\textit{cnt}$ 为零的时候，对当前点相邻的未挖出的方块调用递归函数，否则将其改为数字，结束递归。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int dir_x[8] = {0, 1, 0, -1, 1, 1, -1, -1};\n    int dir_y[8] = {1, 0, -1, 0, 1, -1, 1, -1};\n\n    void dfs(vector<vector<char>>& board, int x, int y) {\n        int cnt = 0;\n        for (int i = 0; i < 8; ++i) {\n            int tx = x + dir_x[i];\n            int ty = y + dir_y[i];\n            if (tx < 0 || tx >= board.size() || ty < 0 || ty >= board[0].size()) {\n                continue;\n            }\n            // 不用判断 M，因为如果有 M 的话游戏已经结束了\n            cnt += board[tx][ty] == 'M';\n        }\n        if (cnt > 0) {\n            // 规则 3\n            board[x][y] = cnt + '0';\n        } else {\n            // 规则 2\n            board[x][y] = 'B';\n            for (int i = 0; i < 8; ++i) {\n                int tx = x + dir_x[i];\n                int ty = y + dir_y[i];\n                // 这里不需要在存在 B 的时候继续扩展，因为 B 之前被点击的时候已经被扩展过了\n                if (tx < 0 || tx >= board.size() || ty < 0 || ty >= board[0].size() || board[tx][ty] != 'E') {\n                    continue;\n                }\n                dfs(board, tx, ty);\n            }\n        }\n    }\n\n    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {\n        int x = click[0], y = click[1];\n        if (board[x][y] == 'M') {\n            // 规则 1\n            board[x][y] = 'X';\n        } else {\n            dfs(board, x, y);\n        }\n        return board;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int[] dirX = {0, 1, 0, -1, 1, 1, -1, -1};\n    int[] dirY = {1, 0, -1, 0, 1, -1, 1, -1};\n\n    public char[][] updateBoard(char[][] board, int[] click) {\n        int x = click[0], y = click[1];\n        if (board[x][y] == 'M') {\n            // 规则 1\n            board[x][y] = 'X';\n        } else{\n            dfs(board, x, y);\n        }\n        return board;\n    }\n\n    public void dfs(char[][] board, int x, int y) {\n        int cnt = 0;\n        for (int i = 0; i < 8; ++i) {\n            int tx = x + dirX[i];\n            int ty = y + dirY[i];\n            if (tx < 0 || tx >= board.length || ty < 0 || ty >= board[0].length) {\n                continue;\n            }\n            // 不用判断 M，因为如果有 M 的话游戏已经结束了\n            if (board[tx][ty] == 'M') {\n                ++cnt;\n            }\n        }\n        if (cnt > 0) {\n            // 规则 3\n            board[x][y] = (char) (cnt + '0');\n        } else {\n            // 规则 2\n            board[x][y] = 'B';\n            for (int i = 0; i < 8; ++i) {\n                int tx = x + dirX[i];\n                int ty = y + dirY[i];\n                // 这里不需要在存在 B 的时候继续扩展，因为 B 之前被点击的时候已经被扩展过了\n                if (tx < 0 || tx >= board.length || ty < 0 || ty >= board[0].length || board[tx][ty] != 'E') {\n                    continue;\n                }\n                dfs(board, tx, ty);\n            }\n        }\n    }\n}\n```\n\n```C [sol1-C]\nconst int dir_x[8] = {0, 1, 0, -1, 1, 1, -1, -1};\nconst int dir_y[8] = {1, 0, -1, 0, 1, -1, 1, -1};\n\nint n, m;\n\nvoid dfs(char** board, int x, int y) {\n    int cnt = 0;\n    for (int i = 0; i < 8; ++i) {\n        int tx = x + dir_x[i];\n        int ty = y + dir_y[i];\n        if (tx < 0 || tx >= n || ty < 0 || ty >= m) {\n            continue;\n        }\n        // 不用判断 M，因为如果有 M 的话游戏已经结束了\n        cnt += board[tx][ty] == 'M';\n    }\n    if (cnt > 0) {\n        // 规则 3\n        board[x][y] = cnt + '0';\n    } else {\n        // 规则 2\n        board[x][y] = 'B';\n        for (int i = 0; i < 8; ++i) {\n            int tx = x + dir_x[i];\n            int ty = y + dir_y[i];\n            // 这里不需要在存在 B 的时候继续扩展，因为 B 之前被点击的时候已经被扩展过了\n            if (tx < 0 || tx >= n || ty < 0 || ty >= m || board[tx][ty] != 'E') {\n                continue;\n            }\n            dfs(board, tx, ty);\n        }\n    }\n}\n\nchar** updateBoard(char** board, int boardSize, int* boardColSize, int* click, int clickSize, int* returnSize, int** returnColumnSizes) {\n    n = boardSize, m = boardColSize[0];\n    int x = click[0], y = click[1];\n    if (board[x][y] == 'M') {\n        // 规则 1\n        board[x][y] = 'X';\n    } else {\n        dfs(board, x, y);\n    }\n    *returnSize = n;\n    **returnColumnSizes = malloc(sizeof(int*) * n);\n    for (int i = 0; i < n; i++) {\n        (*returnColumnSizes)[i] = m;\n    }\n    return board;\n}\n```\n\n```golang [sol1-Golang]\nvar dirX = []int{0, 1, 0, -1, 1, 1, -1, -1}\nvar dirY = []int{1, 0, -1, 0, 1, -1, 1, -1}\n\nfunc updateBoard(board [][]byte, click []int) [][]byte {\n    x, y := click[0], click[1]\n    if board[x][y] == 'M' {\n        board[x][y] = 'X'\n    } else {\n        dfs(board, x, y)\n    }\n    return board\n}\n\nfunc dfs(board [][]byte, x, y int) {\n    cnt := 0\n    for i := 0; i < 8; i++ {\n        tx, ty := x + dirX[i], y + dirY[i]\n        if tx < 0 || tx >= len(board) || ty < 0 || ty >= len(board[0]) {\n            continue\n        }\n        // 不用判断 M，因为如果有 M 的话游戏已经结束了\n        if board[tx][ty] == 'M' {\n            cnt++\n        }\n    }\n    if cnt > 0 {\n        board[x][y] = byte(cnt + '0')\n    } else {\n        board[x][y] = 'B'\n        for i := 0; i < 8; i++ {\n            tx, ty := x + dirX[i], y + dirY[i]\n            // 这里不需要在存在 B 的时候继续扩展，因为 B 之前被点击的时候已经被扩展过了\n            if tx < 0 || tx >= len(board) || ty < 0 || ty >= len(board[0]) || board[tx][ty] != 'E' {\n                continue\n            }\n            dfs(board, tx, ty)\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nm)$，其中 $n$ 和 $m$ 分别代表面板的宽和高。最坏情况下会遍历整个面板。\n- 空间复杂度：$O(nm)$。空间复杂度取决于递归的栈深度，而递归栈深度在最坏情况下有可能遍历整个面板而达到 $O(nm)$。\n\n#### 方法二：广度优先搜索 + 模拟\n\n**思路与算法**\n\n同样地，我们也可以将深度优先搜索改为广度优先搜索来模拟，我们只要在 $\\textit{cnt}$ 为零的时候，将当前点相邻的未挖出的方块加入广度优先搜索的队列里即可，其他情况不加入队列，这里不再赘述。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int dir_x[8] = {0, 1, 0, -1, 1, 1, -1, -1};\n    int dir_y[8] = {1, 0, -1, 0, 1, -1, 1, -1};\n\n    void bfs(vector<vector<char>>& board, int sx, int sy) {\n        queue<pair<int, int>> Q;\n        vector<vector<int>> vis(board.size(), vector<int>(board[0].size(), 0));\n        Q.push({sx, sy});\n        vis[sx][sy] = true;\n        while (!Q.empty()) {\n            auto pos = Q.front();\n            Q.pop();\n            int cnt = 0, x = pos.first, y = pos.second;\n            for (int i = 0; i < 8; ++i) {\n                int tx = x + dir_x[i];\n                int ty = y + dir_y[i];\n                if (tx < 0 || tx >= board.size() || ty < 0 || ty >= board[0].size()) {\n                    continue;\n                }\n                // 不用判断 M，因为如果有 M 的话游戏已经结束了\n                cnt += board[tx][ty] == 'M';\n            }\n            if (cnt > 0) {\n                // 规则 3\n                board[x][y] = cnt + '0';\n            } else {\n                // 规则 2\n                board[x][y] = 'B';\n                for (int i = 0; i < 8; ++i) {\n                    int tx = x + dir_x[i];\n                    int ty = y + dir_y[i];\n                    // 这里不需要在存在 B 的时候继续扩展，因为 B 之前被点击的时候已经被扩展过了\n                    if (tx < 0 || tx >= board.size() || ty < 0 || ty >= board[0].size() || board[tx][ty] != 'E' || vis[tx][ty]) {\n                        continue;\n                    }\n                    Q.push(make_pair(tx, ty));\n                    vis[tx][ty] = true;\n                }\n            }\n        }\n    }\n\n    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {\n        int x = click[0], y = click[1];\n        if (board[x][y] == 'M') {\n            // 规则 1\n            board[x][y] = 'X';\n        } else {\n            bfs(board, x, y);\n        }\n        return board;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    int[] dirX = {0, 1, 0, -1, 1, 1, -1, -1};\n    int[] dirY = {1, 0, -1, 0, 1, -1, 1, -1};\n\n    public char[][] updateBoard(char[][] board, int[] click) {\n        int x = click[0], y = click[1];\n        if (board[x][y] == 'M') {\n            // 规则 1\n            board[x][y] = 'X';\n        } else{\n            bfs(board, x, y);\n        }\n        return board;\n    }\n\n    public void bfs(char[][] board, int sx, int sy) {\n        Queue<int[]> queue = new LinkedList<int[]>();\n        boolean[][] vis = new boolean[board.length][board[0].length];\n        queue.offer(new int[]{sx, sy});\n        vis[sx][sy] = true;\n        while (!queue.isEmpty()) {\n            int[] pos = queue.poll();\n            int cnt = 0, x = pos[0], y = pos[1];\n            for (int i = 0; i < 8; ++i) {\n                int tx = x + dirX[i];\n                int ty = y + dirY[i];\n                if (tx < 0 || tx >= board.length || ty < 0 || ty >= board[0].length) {\n                    continue;\n                }\n                // 不用判断 M，因为如果有 M 的话游戏已经结束了\n                if (board[tx][ty] == 'M') {\n                    ++cnt;\n                }\n            }\n            if (cnt > 0) {\n                // 规则 3\n                board[x][y] = (char) (cnt + '0');\n            } else {\n                // 规则 2\n                board[x][y] = 'B';\n                for (int i = 0; i < 8; ++i) {\n                    int tx = x + dirX[i];\n                    int ty = y + dirY[i];\n                    // 这里不需要在存在 B 的时候继续扩展，因为 B 之前被点击的时候已经被扩展过了\n                    if (tx < 0 || tx >= board.length || ty < 0 || ty >= board[0].length || board[tx][ty] != 'E' || vis[tx][ty]) {\n                        continue;\n                    }\n                    queue.offer(new int[]{tx, ty});\n                    vis[tx][ty] = true;\n                }\n            }\n        }\n    }\n}\n```\n\n```C [sol2-C]\nconst int dir_x[8] = {0, 1, 0, -1, 1, 1, -1, -1};\nconst int dir_y[8] = {1, 0, -1, 0, 1, -1, 1, -1};\n\nint n, m;\n\ntypedef struct {\n    int x, y;\n} pair;\n\nvoid bfs(char** board, int sx, int sy) {\n    bool vis[n][m];\n    memset(vis, 0, sizeof(vis));\n    pair Q[n * m];\n    int l = 0, r = 1;\n    Q[0].x = sx, Q[0].y = sy;\n    vis[sx][sy] = true;\n    while (l < r) {\n        pair pos = Q[l++];\n        int cnt = 0, x = pos.x, y = pos.y;\n        for (int i = 0; i < 8; ++i) {\n            int tx = x + dir_x[i];\n            int ty = y + dir_y[i];\n            if (tx < 0 || tx >= n || ty < 0 || ty >= m) {\n                continue;\n            }\n            // 不用判断 M，因为如果有 M 的话游戏已经结束了\n            cnt += board[tx][ty] == 'M';\n        }\n        if (cnt > 0) {\n            // 规则 3\n            board[x][y] = cnt + '0';\n        } else {\n            // 规则 2\n            board[x][y] = 'B';\n            for (int i = 0; i < 8; ++i) {\n                int tx = x + dir_x[i];\n                int ty = y + dir_y[i];\n                // 这里不需要在存在 B 的时候继续扩展，因为 B 之前被点击的时候已经被扩展过了\n                if (tx < 0 || tx >= n || ty < 0 || ty >= m || board[tx][ty] != 'E' || vis[tx][ty]) {\n                    continue;\n                }\n                Q[r].x = tx, Q[r++].y = ty;\n                vis[tx][ty] = true;\n            }\n        }\n    }\n}\n\nchar** updateBoard(char** board, int boardSize, int* boardColSize, int* click, int clickSize, int* returnSize, int** returnColumnSizes) {\n    n = boardSize, m = boardColSize[0];\n    int x = click[0], y = click[1];\n    if (board[x][y] == 'M') {\n        // 规则 1\n        board[x][y] = 'X';\n    } else {\n        bfs(board, x, y);\n    }\n    *returnSize = n;\n    **returnColumnSizes = malloc(sizeof(int*) * n);\n    for (int i = 0; i < n; i++) {\n        (*returnColumnSizes)[i] = m;\n    }\n    return board;\n}\n```\n\n```golang [sol2-Golang]\nvar dirX = []int{0, 1, 0, -1, 1, 1, -1, -1}\nvar dirY = []int{1, 0, -1, 0, 1, -1, 1, -1}\n\nfunc updateBoard(board [][]byte, click []int) [][]byte {\n    x, y := click[0], click[1]\n    if board[x][y] == 'M' {\n        board[x][y] = 'X'\n    } else {\n        bfs(board, x, y)\n    }\n    return board\n}\n\nfunc bfs(board [][]byte, sx, sy int) {\n    queue := [][]int{}\n    vis := make([][]bool, len(board))\n    for i := 0; i < len(vis); i++ {\n        vis[i] = make([]bool, len(board[0]))\n    }\n    queue = append(queue, []int{sx, sy})\n    vis[sx][sy] = true\n    for i := 0; i < len(queue); i++ {\n        cnt, x, y := 0, queue[i][0], queue[i][1]\n        for i := 0; i < 8; i++ {\n        tx, ty := x + dirX[i], y + dirY[i]\n            if tx < 0 || tx >= len(board) || ty < 0 || ty >= len(board[0]) {\n                continue\n            }\n            // 不用判断 M，因为如果有 M 的话游戏已经结束了\n            if board[tx][ty] == 'M' {\n                cnt++\n            }\n        }\n        if cnt > 0 {\n            board[x][y] = byte(cnt + '0')\n        } else {\n            board[x][y] = 'B'\n            for i := 0; i < 8; i++ {\n                tx, ty := x + dirX[i], y + dirY[i]\n                // 这里不需要在存在 B 的时候继续扩展，因为 B 之前被点击的时候已经被扩展过了\n                if tx < 0 || tx >= len(board) || ty < 0 || ty >= len(board[0]) || board[tx][ty] != 'E' || vis[tx][ty] {\n                    continue\n                }\n                queue = append(queue, []int{tx, ty})\n                vis[tx][ty] = true\n            }\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nm)$，其中 $n$ 和 $m$ 分别代表面板的宽和高。最坏情况下会遍历整个面板。\n- 空间复杂度：$O(nm)$。我们需要 $O(nm)$ 的标记数组来标记当前位置是否已经被加入队列防止重复计算。"
}