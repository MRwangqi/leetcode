{
	"titleSlug": "longest-substring-with-at-least-k-repeating-characters",
	"slug": "jie-ben-ti-bang-zhu-da-jia-li-jie-di-gui-obla",
	"url": "https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/solution/jie-ben-ti-bang-zhu-da-jia-li-jie-di-gui-obla/",
	"content": "各位题友大家好！ 今天是 **[@负雪明烛](/u/fuxuemingzhu/)** 坚持日更的第 **34** 天。今天力扣上的每日一题是「[395. 至少有K个重复字符的最长子串](https://leetcode-cn.com/problems/longest-substring-with-at-least-k-repeating-characters/)」。\n\n# 解题思路\n\n本题要求的一个最长的子字符串的长度，该子字符串中每个字符出现的次数都最少为 $k$。\n\n\n求最长子字符串/区间的这类题一般可以用滑动窗口来做，但是本题滑动窗口的代码不好写，我改用**递归**。也借本题来帮助大家理解递归。\n\n\n- **重点：我们在调用递归函数的时候，把递归函数当做普通函数（黑箱）来调用，即明白该函数的输入输出是什么，而不用管此函数内部在做什么。**\n\n下面是详细讲解。\n\n1. **递归最基本的是记住递归函数的含义（务必牢记函数定义）**：本题的 `longestSubstring(s, k)` 函数表示的就是题意，即求一个最长的子字符串的长度，该子字符串中每个字符出现的次数都最少为 $k$。函数入参 $s$ 是表示源字符串；$k$ 是限制条件，即子字符串中每个字符最少出现的次数；函数返回结果是满足题意的最长子字符串长度。\n\n\n2. **递归的终止条件（能直接写出的最简单 case）**：如果字符串 $s$ 的长度少于 $k$，那么一定不存在满足题意的子字符串，返回 0；\n\n\n3. **调用递归（重点）**：如果一个字符 $c$ 在 $s$ 中出现的次数少于 $k$ 次，那么 $s$ 中所有的包含 $c$ 的子字符串都不能满足题意。所以，应该在 $s$  的所有不包含 $c$ 的子字符串中继续寻找结果：把 $s$ 按照 $c$ 分割（分割后每个子串都不包含 $c$），得到很多子字符串 $t$；**下一步要求 $t$ 作为源字符串的时候，它的最长的满足题意的子字符串长度**（到现在为止，我们把大问题分割为了小问题($s$ → $t$)）。此时我们发现，恰好已经定义了函数 `longestSubstring(s, k)` 就是来解决这个问题的！所以直接把 `longestSubstring(s, k)` 函数拿来用，于是形成了递归。\n\n\n4. **未进入递归时的返回结果**：如果 $s$ 中的每个字符出现的次数都大于 $k$ 次，那么 $s$ 就是我们要求的字符串，直接返回该字符串的长度。\n\n总之，通过上面的分析，我们看出了：**我们不是为了递归而递归**。而是因为我们把大问题拆解成了小问题，恰好有函数可以解决小问题，所以直接用这个函数。由于这个函数正好是本身，所以我们把此现象叫做递归。小问题是原因，递归是结果。而**递归函数到底怎么一层层展开与终止的，不要用大脑去想**，这是计算机干的事。我们只用把递归函数当做一个能解决问题的黑箱就够了，把更多的注意力放在拆解子问题、递归终止条件、递归函数的正确性上来。\n\n希望我说的这些能对你理解递归有所帮助。\n\n# 代码\n\n三种语言的代码如下，Python 是行数最少的。\n\n```Python []\nclass Solution(object):\n    def longestSubstring(self, s, k):\n        if len(s) < k:\n            return 0\n        for c in set(s):\n            if s.count(c) < k:\n                return max(self.longestSubstring(t, k) for t in s.split(c))\n        return len(s)\n```\n\n```C++ []\nclass Solution {\npublic:\n    int longestSubstring(string s, int k) {\n        if (s.size() < k) return 0;\n        unordered_set<char> chars(s.begin(), s.end());\n        unordered_map<char, int> counter;\n        for (char c : s) \n            counter[c] ++;\n        for (char c : chars) {\n            vector<string> t; \n            if (counter[c] < k) {\n                split(s, t, c);\n                int res = 0;\n                for (string tn : t) {\n                    res = max(res, longestSubstring(tn, k));\n                }\n                return res;\n            }\n        }\n        return s.size();\n    }\n    void split(const string& s, vector<string>& sv,const char flag = ' ') {\n    sv.clear();\n    istringstream iss(s);\n    string temp;\n\n    while (getline(iss, temp, flag)) {\n        sv.push_back(temp);\n    }\n}\n};\n```\n\n```Java []\nclass Solution {\n    public int longestSubstring(String s, int k) {\n        if (s.length() < k) return 0;\n        HashMap<Character, Integer> counter = new HashMap();\n        for (int i = 0; i < s.length(); i++) {\n            counter.put(s.charAt(i), counter.getOrDefault(s.charAt(i), 0) + 1);\n        }\n        for (char c : counter.keySet()) {\n            if (counter.get(c) < k) {\n                int res = 0;\n                for (String t : s.split(String.valueOf(c))) {\n                    res = Math.max(res, longestSubstring(t, k));\n                }\n                return res;\n            }\n        }\n        return s.length();\n    }\n}\n```\n\n\n- 时间复杂度：$O(N * 26 * 26)$，因为函数最多执行 26 次，`for`循环遍历一次是26个字符，循环里面对 $s$ 分割时间复杂度是$O(N)$。超过了 84.40% 的提交。\n- 空间复杂度：$O(26 * 26)$，函数执行 26 次，每次开辟 26 个字符的set空间。\n\n# 刷题心得\n\n\n很多同学都被递归绕进去了，其实把递归函数当做普通函数就好了。\n\n\n-----\n\n\nOK，以上就是 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 写的今天题解的全部内容了，如果你觉得有帮助的话，**求赞、求关注、求收藏**。如果有疑问的话，请在下面评论，我会及时解答。\n\n\n祝大家牛年大吉！AC 多多，Offer 多多！我们明天再见！"
}