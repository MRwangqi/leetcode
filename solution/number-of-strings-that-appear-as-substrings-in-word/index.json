{
	"titleSlug": "number-of-strings-that-appear-as-substrings-in-word",
	"slug": "zuo-wei-zi-zi-fu-chuan-chu-xian-zai-dan-wmsp4",
	"url": "https://leetcode-cn.com/problems/number-of-strings-that-appear-as-substrings-in-word/solution/zuo-wei-zi-zi-fu-chuan-chu-xian-zai-dan-wmsp4/",
	"content": "#### 方法一：暴力匹配\n\n**思路与算法**\n\n我们可以让字符串数组 $\\textit{patterns}$ 中的每个字符串 $\\textit{pattern}$ 都与 $\\textit{word}$ 匹配一次，同时统计其中为 $\\textit{word}$ 子串的字符串数目。\n\n我们用函数 $\\textit{check}(\\textit{pattern}, \\textit{word})$ 来判断字符串 $\\textit{pattern}$ 是否是 $\\textit{word}$ 的子串。我们假设 $\\textit{pattern}$ 的长度为 $m$。在该函数中，我们让 $\\textit{pattern}$ 与 $\\textit{word}$ 的每个长度为 $m$ 的子串均匹配一次。\n\n为了减少不必要的匹配，我们每次匹配失败即立刻停止当前子串的匹配，对下一个子串继续匹配。如果当前子串匹配成功，我们返回 $\\texttt{true}$；如果所有子串都匹配失败，则返回 $\\texttt{false}$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numOfStrings(vector<string>& patterns, string word) {\n        auto check = [](const string& pattern, const string& word) -> bool{\n            int m = pattern.size();\n            int n = word.size();\n            for (int i = 0; i + m <= n; ++i){\n                bool flag = true;\n                for (int j = 0; j < m; ++j){\n                    if (word[i + j] != pattern[j]){\n                        flag = false;\n                        break;\n                    }\n                }\n                if (flag){\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        int res = 0;\n        for (const string& pattern : patterns){\n            res += check(pattern, word);\n        }\n        return res;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numOfStrings(self, patterns: List[str], word: str) -> int:\n        def check(pattern: str, word: str) -> bool:\n            m = len(pattern)\n            n = len(word)\n            for i in range(n - m + 1):\n                flag = True\n                for j in range(m):\n                    if word[i + j] != pattern[j]:\n                        flag = False\n                        break\n                if flag:\n                    return True\n            return False\n        \n        res = 0\n        for pattern in patterns:\n            res += check(pattern, word)\n        return res\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times \\sum_i m_i)$，其中 $n$ 为字符串 $\\textit{word}$ 的长度，$m_i$ 为字符串 $\\textit{patterns}[i]$ 的长度。\n  \n  对于 $\\textit{patterns}$ 中的每个字符串 $\\textit{patterns}[i]$，暴力匹配判断是否为 $\\textit{word}$ 子串的时间复杂度为 $O(n \\times m_i)$。\n\n- 空间复杂度：$O(1)$。\n\n\n#### 方法二：$\\text{KMP}$ 算法\n\n**思路与算法**\n\n在方法一中，每一次调用函数 $\\textit{check}(\\textit{pattern}, \\textit{word})$ 进行判断都需要暴力比较 $\\textit{pattern}$ 与 $\\textit{word}$ 中所有长度为 $m$ 的子串，假设 $\\textit{word}$ 的长度为 $n$，则匹配的时间复杂度为 $O(nm)$。\n\n我们可以对函数 $\\textit{check}(\\textit{pattern}, \\textit{word})$ 中暴力比较的过程进行优化。在这里，我们使用 $\\text{KMP}$ 算法对匹配过程进行优化。如果读者不熟悉 $\\text{KMP}$ 算法，可以阅读[「28. 实现 strStr() 的官方题解」](https://leetcode-cn.com/problems/implement-strstr/solution/shi-xian-strstr-by-leetcode-solution-ds6y/) 中的方法二。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numOfStrings(vector<string>& patterns, string word) {\n        auto check = [](const string& pattern, const string& word) -> bool{\n            int m = pattern.size();\n            int n = word.size();\n            // 生成 pattern 的前缀数组\n            vector<int> pi(m);\n            for (int i = 1, j = 0; i < m; i++){\n                while (j > 0 && pattern[i] != pattern[j]){\n                    j = pi[j - 1];\n                }\n                if (pattern[i] == pattern[j]){\n                    ++j;\n                }\n                pi[i] = j;\n            }\n            // 利用前缀数组进行匹配\n            for (int i = 0, j = 0; i < n; i++){\n                while (j > 0 && word[i] != pattern[j]){\n                    j = pi[j - 1];\n                }\n                if (word[i] == pattern[j]){\n                    ++j;\n                }\n                if (j == m){\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        int res = 0;\n        for (const string& pattern : patterns){\n            res += check(pattern, word);\n        }\n        return res;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numOfStrings(self, patterns: List[str], word: str) -> int:\n        def check(pattern: str, word: str) -> bool:\n            m = len(pattern)\n            n = len(word)\n            # 生成 pattern 的前缀数组\n            pi = [0] * m\n            j = 0\n            for i in range(1, m):\n                while j and pattern[i] != pattern[j]:\n                    j = pi[j - 1]\n                if pattern[i] == pattern[j]:\n                    j += 1\n                pi[i] = j\n            # 利用前缀数组进行匹配 \n            j = 0\n            for i in range(n):\n                while j and word[i] != pattern[j]:\n                    j = pi[j - 1]\n                if word[i] == pattern[j]:\n                    j += 1\n                if j == m:\n                    return True\n            return False\n        \n        res = 0\n        for pattern in patterns:\n            res += check(pattern, word)\n        return res\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nk + \\sum_i m_i)$，其中 $n$ 为字符串 $\\textit{word}$ 的长度，$k$ 为数组 $\\textit{patterns}$ 中的元素数目，$m_i$ 为字符串 $\\textit{patterns}[i]$ 的长度。\n  \n  对于 $\\textit{patterns}$ 中的每个字符串 $\\textit{patterns}[i]$，利用 $\\text{KMP}$ 算法判断是否为 $\\textit{word}$ 子串的时间复杂度为 $O(n + m_i)$。\n\n- 空间复杂度：$O(\\max_i(m_i))$，其中 $m_i$ 为字符串 $\\textit{patterns}[i]$ 的长度。即为所有 $\\textit{patterns}[i]$ 的前缀数组的空间开销。"
}