{
	"titleSlug": "number-of-atoms",
	"slug": "yuan-zi-de-shu-liang-by-leetcode-solutio-54lv",
	"url": "https://leetcode-cn.com/problems/number-of-atoms/solution/yuan-zi-de-shu-liang-by-leetcode-solutio-54lv/",
	"content": "#### 方法一：栈 + 哈希表\n\n对于括号序列相关的题目，通用的解法是使用递归或栈。本题中我们将使用栈解决。\n\n从左到右遍历该化学式，并使用哈希表记录当前层遍历到的原子及其数量，因此初始时需将一个空的哈希表压入栈中。对于当前遍历的字符：\n\n- 如果是左括号，将一个空的哈希表压入栈中，进入下一层。\n\n- 如果不是括号，则读取一个原子名称，若后面还有数字，则读取一个数字，否则将该原子后面的数字视作 $1$。然后将原子及数字加入栈顶的哈希表中。\n\n- 如果是右括号，则说明遍历完了当前层，若括号右侧还有数字，则读取该数字 $\\textit{num}$，否则将该数字视作 $1$。然后将栈顶的哈希表弹出，将弹出的哈希表中的原子数量与 $\\textit{num}$ 相乘，加到上一层的原子数量中。\n\n遍历结束后，栈顶的哈希表即为化学式中的原子及其个数。遍历哈希表，取出所有「原子-个数」对加入数组中，对数组按照原子字典序排序，然后遍历数组，按题目要求拼接成答案。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string countOfAtoms(string formula) {\n        int i = 0, n = formula.length();\n\n        auto parseAtom = [&]() -> string {\n            string atom;\n            atom += formula[i++]; // 扫描首字母\n            while (i < n && islower(formula[i])) {\n                atom += formula[i++]; // 扫描首字母后的小写字母\n            }\n            return atom;\n        };\n\n        auto parseNum = [&]() -> int {\n            if (i == n || !isdigit(formula[i])) {\n                return 1; // 不是数字，视作 1\n            }\n            int num = 0;\n            while (i < n && isdigit(formula[i])) {\n                num = num * 10 + int(formula[i++] - '0'); // 扫描数字\n            }\n            return num;\n        };\n\n        stack<unordered_map<string, int>> stk;\n        stk.push({});\n        while (i < n) {\n            char ch = formula[i];\n            if (ch == '(') {\n                i++;\n                stk.push({}); // 将一个空的哈希表压入栈中，准备统计括号内的原子数量\n            } else if (ch == ')') {\n                i++;\n                int num = parseNum(); // 括号右侧数字\n                auto atomNum = stk.top();\n                stk.pop(); // 弹出括号内的原子数量\n                for (auto &[atom, v] : atomNum) {\n                    stk.top()[atom] += v * num; // 将括号内的原子数量乘上 num，加到上一层的原子数量中\n                }\n            } else {\n                string atom = parseAtom();\n                int num = parseNum();\n                stk.top()[atom] += num; // 统计原子数量\n            }\n        }\n\n        auto &atomNum = stk.top();\n        vector<pair<string, int>> pairs;\n        for (auto &[atom, v] : atomNum) {\n            pairs.emplace_back(atom, v);\n        }\n        sort(pairs.begin(), pairs.end());\n\n        string ans;\n        for (auto &p : pairs) {\n            ans += p.first;\n            if (p.second > 1) {\n                ans += to_string(p.second);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int i, n;\n    String formula;\n\n    public String countOfAtoms(String formula) {\n        this.i = 0;\n        this.n = formula.length();\n        this.formula = formula;\n\n        Deque<Map<String, Integer>> stack = new LinkedList<Map<String, Integer>>();\n        stack.push(new HashMap<String, Integer>());\n        while (i < n) {\n            char ch = formula.charAt(i);\n            if (ch == '(') {\n                i++;\n                stack.push(new HashMap<String, Integer>()); // 将一个空的哈希表压入栈中，准备统计括号内的原子数量\n            } else if (ch == ')') {\n                i++;\n                int num = parseNum(); // 括号右侧数字\n                Map<String, Integer> popMap = stack.pop(); // 弹出括号内的原子数量\n                Map<String, Integer> topMap = stack.peek();\n                for (Map.Entry<String, Integer> entry : popMap.entrySet()) {\n                    String atom = entry.getKey();\n                    int v = entry.getValue();\n                    topMap.put(atom, topMap.getOrDefault(atom, 0) + v * num); // 将括号内的原子数量乘上 num，加到上一层的原子数量中\n                }\n            } else {\n                String atom = parseAtom();\n                int num = parseNum();\n                Map<String, Integer> topMap = stack.peek();\n                topMap.put(atom, topMap.getOrDefault(atom, 0) + num); // 统计原子数量\n            }\n        }\n\n        Map<String, Integer> map = stack.pop();\n        TreeMap<String, Integer> treeMap = new TreeMap<String, Integer>(map);\n\n        StringBuffer sb = new StringBuffer();\n        for (Map.Entry<String, Integer> entry : treeMap.entrySet()) {\n            String atom = entry.getKey();\n            int count = entry.getValue();\n            sb.append(atom);\n            if (count > 1) {\n                sb.append(count);\n            }\n        }\n        return sb.toString();\n    }\n\n    public String parseAtom() {\n        StringBuffer sb = new StringBuffer();\n        sb.append(formula.charAt(i++)); // 扫描首字母\n        while (i < n && Character.isLowerCase(formula.charAt(i))) {\n            sb.append(formula.charAt(i++)); // 扫描首字母后的小写字母\n        }\n        return sb.toString();\n    }\n\n    public int parseNum() {\n        if (i == n || !Character.isDigit(formula.charAt(i))) {\n            return 1; // 不是数字，视作 1\n        }\n        int num = 0;\n        while (i < n && Character.isDigit(formula.charAt(i))) {\n            num = num * 10 + formula.charAt(i++) - '0'; // 扫描数字\n        }\n        return num;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    int i, n;\n    string formula;\n\n    public string CountOfAtoms(string formula) {\n        this.i = 0;\n        this.n = formula.Length;\n        this.formula = formula;\n        Stack<Dictionary<string, int>> stack = new Stack<Dictionary<string, int>>();\n        stack.Push(new Dictionary<string, int>());\n        while (i < n) {\n            char ch = formula[i];\n            if (ch == '(') {\n                i++;\n                stack.Push(new Dictionary<string, int>()); // 将一个空的哈希表压入栈中，准备统计括号内的原子数量\n            } else if (ch == ')') {\n                i++;\n                int num = ParseNum(); // 括号右侧数字\n                Dictionary<string, int> popDictionary = stack.Pop(); // 弹出括号内的原子数量\n                Dictionary<string, int> topDictionary = stack.Peek();\n                foreach (KeyValuePair<string, int> pair in popDictionary) {\n                    string atom = pair.Key;\n                    int v = pair.Value;\n                    // 将括号内的原子数量乘上 num，加到上一层的原子数量中\n                    if (topDictionary.ContainsKey(atom)) {\n                        topDictionary[atom] += v * num;\n                    } else {\n                        topDictionary.Add(atom, v * num);\n                    }\n                }\n            } else {\n                string atom = ParseAtom();\n                int num = ParseNum();\n                Dictionary<string, int> topDictionary = stack.Peek();\n                // 统计原子数量\n                if (topDictionary.ContainsKey(atom)) {\n                    topDictionary[atom] += num;\n                } else {\n                    topDictionary.Add(atom, num);\n                }\n            }\n        }\n\n        Dictionary<string, int> dictionary = stack.Pop();\n        List<KeyValuePair<string, int>> pairs = new List<KeyValuePair<string, int>>(dictionary);\n        pairs.Sort((p1, p2) => p1.Key.CompareTo(p2.Key));\n\n        StringBuilder sb = new StringBuilder();\n        foreach (KeyValuePair<string, int> pair in pairs) {\n            string atom = pair.Key;\n            int count = pair.Value;\n            sb.Append(atom);\n            if (count > 1) {\n                sb.Append(count);\n            }\n        }\n        return sb.ToString();\n    }\n\n    public string ParseAtom() {\n        StringBuilder sb = new StringBuilder();\n        sb.Append(formula[i++]); // 扫描首字母\n        while (i < n && char.IsLower(formula[i])) {\n            sb.Append(formula[i++]); // 扫描首字母后的小写字母\n        }\n        return sb.ToString();\n    }\n\n    public int ParseNum() {\n        if (i == n || !char.IsNumber(formula[i])) {\n            return 1; // 不是数字，视作 1\n        }\n        int num = 0;\n        while (i < n && char.IsNumber(formula[i])) {\n            num = num * 10 + formula[i++] - '0'; // 扫描数字\n        }\n        return num;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc countOfAtoms(formula string) string {\n    i, n := 0, len(formula)\n\n    parseAtom := func() string {\n        start := i\n        i++ // 扫描，跳过首字母\n        for i < n && unicode.IsLower(rune(formula[i])) { \n            i++ // 扫描首字母后的小写字母\n        }\n        return formula[start:i]\n    }\n\n    parseNum := func() (num int) {\n        if i == n || !unicode.IsDigit(rune(formula[i])) { \n            return 1 // 不是数字，视作 1\n        }\n        for ; i < n && unicode.IsDigit(rune(formula[i])); i++ { \n            num = num*10 + int(formula[i]-'0') // 扫描数字\n        }\n        return\n    }\n\n    stk := []map[string]int{{}}\n    for i < n {\n        if ch := formula[i]; ch == '(' {\n            i++\n            stk = append(stk, map[string]int{}) // 将一个空的哈希表压入栈中，准备统计括号内的原子数量\n        } else if ch == ')' {\n            i++\n            num := parseNum() // 括号右侧数字\n            atomNum := stk[len(stk)-1]\n            stk = stk[:len(stk)-1] // 弹出括号内的原子数量\n            for atom, v := range atomNum {\n                stk[len(stk)-1][atom] += v * num // 将括号内的原子数量乘上 num，加到上一层的原子数量中\n            }\n        } else {\n            atom := parseAtom()\n            num := parseNum()\n            stk[len(stk)-1][atom] += num // 统计原子数量\n        }\n    }\n\n    atomNum := stk[0]\n    type pair struct {\n        atom string\n        num  int\n    }\n    pairs := make([]pair, 0, len(atomNum))\n    for k, v := range atomNum {\n        pairs = append(pairs, pair{k, v})\n    }\n    sort.Slice(pairs, func(i, j int) bool { return pairs[i].atom < pairs[j].atom })\n\n    ans := []byte{}\n    for _, p := range pairs {\n        ans = append(ans, p.atom...)\n        if p.num > 1 {\n            ans = append(ans, strconv.Itoa(p.num)...)\n        }\n    }\n    return string(ans)\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar countOfAtoms = function(formula) {\n    let i = 0;\n    const n = formula.length;\n\n    const stack = [new Map()];\n    while (i < n) {\n        const ch = formula[i];\n\n        const parseAtom = () => {\n            const sb = [];\n            sb.push(formula[i++]); // 扫描首字母\n            while (i < n && formula[i] >= 'a' && formula[i] <= 'z') {\n                sb.push(formula[i++]); // 扫描首字母后的小写字母\n            }\n            return sb.join('');\n        }\n\n        const parseNum = () => {\n            if (i === n || isNaN(Number(formula[i]))) {\n                return 1; // 不是数字，视作 1\n            }\n            let num = 0;\n            while (i < n && !isNaN(Number(formula[i]))) {\n                num = num * 10 + formula[i++].charCodeAt() - '0'.charCodeAt(); // 扫描数字\n            }\n            return num;\n        }\n\n        if (ch === '(') {\n            i++;\n            stack.unshift(new Map()); // 将一个空的哈希表压入栈中，准备统计括号内的原子数量\n        } else if (ch === ')') {\n            i++;\n            const num = parseNum(); // 括号右侧数字\n            const popMap = stack.shift(); // 弹出括号内的原子数量\n            const topMap = stack[0];\n            for (const [atom, v] of popMap.entries()) {\n                topMap.set(atom, (topMap.get(atom) || 0) + v * num); // 将括号内的原子数量乘上 num，加到上一层的原子数量中\n            }\n        } else {\n            const atom = parseAtom();\n            const num = parseNum();\n            const topMap = stack[0];\n            topMap.set(atom, (topMap.get(atom) || 0) + num); // 统计原子数量\n            \n        }\n    }\n\n    let map = stack.pop();\n    map = Array.from(map);\n    map.sort();\n    const sb = [];\n    for (const [atom, count] of map) {\n        sb.push(atom);\n        if (count > 1) {\n            sb.push(count);\n        }\n    }\n    return sb.join('');\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$。其中 $n$ 是化学式 $\\textit{formula}$ 的长度。\n  最坏情况下栈有 $O(n)$ 层，每次出栈时需要更新 $O(n)$ 个原子的数量，因此遍历化学式的时间复杂度为 $O(n^2)$。\n  遍历结束后排序的时间复杂度为 $O(n\\log n)$。\n  因此总的时间复杂度为 $O(n^2+n\\log n)=O(n^2)$。\n\n- 空间复杂度：$O(n)$。空间复杂度取决于栈中所有哈希表中的元素个数之和，而这不会超过化学式 $\\textit{formula}$ 的长度，因此空间复杂度为 $O(n)$。"
}