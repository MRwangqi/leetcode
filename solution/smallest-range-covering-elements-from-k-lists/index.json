{
	"titleSlug": "smallest-range-covering-elements-from-k-lists",
	"slug": "zui-xiao-qu-jian-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/smallest-range-covering-elements-from-k-lists/solution/zui-xiao-qu-jian-by-leetcode-solution/",
	"content": "#### 方法一：贪心 + 最小堆\n\n给定 $k$ 个列表，需要找到最小区间，使得每个列表都至少有一个数在该区间中。该问题可以转化为，从 $k$ 个列表中各取一个数，使得这 $k$ 个数中的最大值与最小值的差最小。\n\n假设这 $k$ 个数中的最小值是第 $i$ 个列表中的 $x$，对于任意 $j \\ne i$，设第 $j$ 个列表中被选为 $k$ 个数之一的数是 $y$，则为了找到最小区间，$y$ 应该取第 $j$ 个列表中大于等于 $x$ 的最小的数，这是一个贪心的策略。贪心策略的正确性简单证明如下：假设 $z$ 也是第 $j$ 个列表中的数，且 $z>y$，则有 $z-x>y-x$，同时包含 $x$ 和 $z$ 的区间一定不会小于同时包含 $x$ 和 $y$ 的区间。因此，其余 $k-1$ 个列表中应该取大于等于 $x$ 的最小的数。\n\n由于 $k$ 个列表都是升序排列的，因此对每个列表维护一个指针，通过指针得到列表中的元素，指针右移之后指向的元素一定大于或等于之前的元素。\n\n使用最小堆维护 $k$ 个指针指向的元素中的最小值，同时维护堆中元素的最大值。初始时，$k$ 个指针都指向下标 $0$，最大元素即为所有列表的下标 $0$ 位置的元素中的最大值。每次从堆中取出最小值，根据最大值和最小值计算当前区间，如果当前区间小于最小区间则用当前区间更新最小区间，然后将对应列表的指针右移，将新元素加入堆中，并更新堆中元素的最大值。\n\n如果一个列表的指针超出该列表的下标范围，则说明该列表中的所有元素都被遍历过，堆中不会再有该列表中的元素，因此退出循环。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        int rangeLeft = 0, rangeRight = Integer.MAX_VALUE;\n        int minRange = rangeRight - rangeLeft;\n        int max = Integer.MIN_VALUE;\n        int size = nums.size();\n        int[] next = new int[size];\n        PriorityQueue<Integer> priorityQueue = new PriorityQueue<Integer>(new Comparator<Integer>() {\n            public int compare(Integer index1, Integer index2) {\n                return nums.get(index1).get(next[index1]) - nums.get(index2).get(next[index2]);\n            }\n        });\n        for (int i = 0; i < size; i++) {\n            priorityQueue.offer(i);\n            max = Math.max(max, nums.get(i).get(0));\n        }\n        while (true) {\n            int minIndex = priorityQueue.poll();\n            int curRange = max - nums.get(minIndex).get(next[minIndex]);\n            if (curRange < minRange) {\n                minRange = curRange;\n                rangeLeft = nums.get(minIndex).get(next[minIndex]);\n                rangeRight = max;\n            }\n            next[minIndex]++;\n            if (next[minIndex] == nums.get(minIndex).size()) {\n                break;\n            }\n            priorityQueue.offer(minIndex);\n            max = Math.max(max, nums.get(minIndex).get(next[minIndex]));\n        }\n        return new int[]{rangeLeft, rangeRight};\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    vector<int> smallestRange(vector<vector<int>>& nums) {\n        int rangeLeft = 0, rangeRight = INT_MAX;\n        int size = nums.size();\n        vector<int> next(size);\n        \n        auto cmp = [&](const int& u, const int& v) {\n            return nums[u][next[u]] > nums[v][next[v]];\n        };\n        priority_queue<int, vector<int>, decltype(cmp)> pq(cmp);\n        int minValue = 0, maxValue = INT_MIN;\n        for (int i = 0; i < size; ++i) {\n            pq.emplace(i);\n            maxValue = max(maxValue, nums[i][0]);\n        }\n\n        while (true) {\n            int row = pq.top();\n            pq.pop();\n            minValue = nums[row][next[row]];\n            if (maxValue - minValue < rangeRight - rangeLeft) {\n                rangeLeft = minValue;\n                rangeRight = maxValue;\n            }\n            if (next[row] == nums[row].size() - 1) {\n                break;\n            }\n            ++next[row];\n            maxValue = max(maxValue, nums[row][next[row]]);\n            pq.emplace(row);\n        }\n\n        return {rangeLeft, rangeRight};\n    }\n};\n```\n\n```golang [sol1-Golang]\nvar (\n    next []int\n    numsC [][]int\n)\n\nfunc smallestRange(nums [][]int) []int {\n    numsC = nums\n    rangeLeft, rangeRight := 0, math.MaxInt32\n    minRange := rangeRight - rangeLeft\n    max := math.MinInt32\n    size := len(nums)\n    next = make([]int, size)\n    h := &IHeap{}\n    heap.Init(h)\n\n    for i := 0; i < size; i++ {\n        heap.Push(h, i)\n        max = Max(max, nums[i][0])\n    }\n\n    for {\n        minIndex := heap.Pop(h).(int)\n        curRange := max - nums[minIndex][next[minIndex]]\n        if curRange < minRange {\n            minRange = curRange\n            rangeLeft, rangeRight = nums[minIndex][next[minIndex]], max\n        }\n        next[minIndex]++\n        if next[minIndex] == len(nums[minIndex]) {\n            break\n        }\n        heap.Push(h, minIndex)\n        max = Max(max, nums[minIndex][next[minIndex]])\n    }\n    return []int{rangeLeft, rangeRight}\n}\n\ntype IHeap []int\n\nfunc (h IHeap) Len() int           { return len(h) }\nfunc (h IHeap) Less(i, j int) bool { return numsC[h[i]][next[h[i]]] < numsC[h[j]][next[h[j]]] }\nfunc (h IHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\n\nfunc (h *IHeap) Push(x interface{}) {\n    *h = append(*h, x.(int))\n}\n\nfunc (h *IHeap) Pop() interface{} {\n    old := *h\n    n := len(old)\n    x := old[n-1]\n    *h = old[0 : n-1]\n    return x\n}\n\nfunc Max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:\n        rangeLeft, rangeRight = -10**9, 10**9\n        maxValue = max(vec[0] for vec in nums)\n        priorityQueue = [(vec[0], i, 0) for i, vec in enumerate(nums)]\n        heapq.heapify(priorityQueue)\n\n        while True:\n            minValue, row, idx = heapq.heappop(priorityQueue)\n            if maxValue - minValue < rangeRight - rangeLeft:\n                rangeLeft, rangeRight = minValue, maxValue\n            if idx == len(nums[row]) - 1:\n                break\n            maxValue = max(maxValue, nums[row][idx + 1])\n            heapq.heappush(priorityQueue, (nums[row][idx + 1], row, idx + 1))\n        \n        return [rangeLeft, rangeRight]\n```\n\n```C [sol1-C]\n#define maxn 100005\n\nint heap[maxn];\nint heap_count;\nint **rec, *nx;\n\nbool heap_comp(int *first, int *second) {\n    return rec[*first][nx[*first]] < rec[*second][nx[*second]];\n}\n\nvoid swap(int *first, int *second) {\n    int temp = *second;\n    *second = *first;\n    *first = temp;\n    return;\n}\n\nvoid push(int num) {\n    int pos = ++heap_count;\n    heap[pos] = num;\n    while (pos > 1) {\n        if (heap_comp(&heap[pos], &heap[pos >> 1])) {\n            swap(&heap[pos], &heap[pos >> 1]);\n            pos >>= 1;\n        } else\n            break;\n    }\n    return;\n}\n\nvoid pop() {\n    int top_num = 1;\n    int now;\n    swap(&heap[top_num], &heap[heap_count--]);\n    while ((now = (top_num << 1)) <= heap_count) {\n        if (heap_comp(&heap[now + 1], &heap[now]) && now < heap_count) now++;\n        if (heap_comp(&heap[now], &heap[top_num])) {\n            swap(&heap[top_num], &heap[now]);\n            top_num = now;\n        } else\n            break;\n    }\n}\n\nint top() { return heap[1]; }\n\nint *smallestRange(int **nums, int numsSize, int *numsColSize,\n                   int *returnSize) {\n    heap_count = 0;\n    nx = (int *)malloc(sizeof(int) * numsSize);\n    memset(nx, 0, sizeof(int) * numsSize);\n    rec = nums;\n\n    int rangeLeft = 0, rangeRight = 2147483647;\n    int minValue = 0, maxValue = -2147483648;\n    for (int i = 0; i < numsSize; ++i) {\n        push(i);\n        maxValue = fmax(maxValue, nums[i][0]);\n    }\n\n    while (true) {\n        int row = top();\n        pop();\n        minValue = nums[row][nx[row]];\n        if (maxValue - minValue < rangeRight - rangeLeft) {\n            rangeLeft = minValue;\n            rangeRight = maxValue;\n        }\n        if (nx[row] == numsColSize[row] - 1) {\n            break;\n        }\n        ++nx[row];\n        maxValue = fmax(maxValue, nums[row][nx[row]]);\n        push(row);\n    }\n    int *ret = malloc(sizeof(int) * 2);\n    ret[0] = rangeLeft, ret[1] = rangeRight;\n    *returnSize = 2;\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nk \\log k)$，其中 $n$ 是所有列表的平均长度，$k$ 是列表数量。所有的指针移动的总次数最多是 $nk$ 次，每次从堆中取出元素和添加元素都需要更新堆，时间复杂度是 $O(\\log k)$，因此总时间复杂度是 $O(nk \\log k)$。\n\n- 空间复杂度：$O(k)$，其中 $k$ 是列表数量。空间复杂度取决于堆的大小，堆中维护 $k$ 个元素。\n\n#### 方法二：哈希表 + 滑动窗口\n\n**思路**\n\n在讲这个方法之前我们先思考这样一个问题：有一个序列 $A = \\{ a_1, a_2, \\cdots, a_n \\}$ 和一个序列 $B = \\{b_1, b_2, \\cdots, b_m\\}$，请找出一个 $B$ 中的一个最小的区间，使得在这个区间中 $A$ 序列的每个数字至少出现一次，请注意 $A$ 中的元素可能重复，也就是说如果 $A$ 中有 $p$ 个 $u$，那么你选择的这个区间中 $u$ 的个数一定不少于 $p$。没错，这就是我们五月份的一道打卡题：「[76. 最小覆盖子串](https://leetcode-cn.com/problems/minimum-window-substring/)」。官方题解使用了一种滑动窗口的方法，遍历整个 $B$ 序列并用一个哈希表表示当前窗口中的元素：\n\n+ 右边界在每次遍历到新元素的时候右移，同时将拓展到的新元素加入哈希表；\n+ 左边界右移当且仅当当前区间为一个合法的答案区间，即当前窗口内的元素包含 $A$ 中所有的元素，同时将原来左边界指向的元素从哈希表中移除；\n+ 答案更新当且仅当当前窗口内的元素包含 $A$ 中所有的元素。\n\n如果这个地方不理解，可以参考「[76. 最小覆盖子串的官方题解](https://leetcode-cn.com/problems/minimum-window-substring/solution/zui-xiao-fu-gai-zi-chuan-by-leetcode-solution/)」。\n\n回到这道题，我们发现这两道题的相似之处在于都要求我们**找到某个符合条件的最小区间**，我们可以借鉴[「76. 最小覆盖子串」](https://leetcode-cn.com/problems/minimum-window-substring/)的做法：这里序列 $\\{ 0, 1, \\cdots , k - 1 \\}$ 就是上面描述的 $A$ 序列，即 $k$ 个列表，我们需要在一个 $B$ 序列当中找到一个区间，可以覆盖 $A$ 序列。这里的 $B$ 序列是什么？我们可以用一个哈希映射来表示 $B$ 序列—— $B[i]$ 表示 $i$ 在哪些列表当中出现过，这里哈希映射的键是一个整数，表示列表中的某个数值，哈希映射的值是一个数组，这个数组里的元素代表当前的键出现在哪些列表里。也许文字表述比较抽象，大家可以结合下面这个例子来理解。\n\n+ 如果列表集合为：\n    ```\n    0: [-1, 2, 3]\n    1: [1]\n    2: [1, 2]\n    3: [1, 1, 3]\n    ```\n+ 那么可以得到这样一个哈希映射\n    ```\n    -1: [0]\n     1: [1, 2, 3, 3]\n     2: [0, 2]\n     3: [0, 3]\n    ```\n\n我们得到的这个哈希映射就是这里的 $B$ 序列。我们要做的就是在 $B$ 序列上使用两个指针维护一个滑动窗口，并用一个哈希表维护当前窗口中已经包含了哪些列表中的元素，记录它们的索引。遍历 $B$ 序列的每一个元素：\n\n+ 指向窗口右边界的指针右移当且仅当每次遍历到新的元素，并将这个新的元素对应的值数组中的每一个数加入到哈希表中；\n+ 指向窗口左边界的指针右移当且仅当当前区间内的元素包含 $A$ 中所有的元素，同时将原来左边界对应的值数组的元素们从哈希表中移除；\n+ 答案更新当且仅当当前窗口内的元素包含 $A$ 中所有的元素。\n\n大家可以参考代码理解这个过程。\n\n**代码**\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        int size = nums.size();\n        Map<Integer, List<Integer>> indices = new HashMap<Integer, List<Integer>>();\n        int xMin = Integer.MAX_VALUE, xMax = Integer.MIN_VALUE;\n        for (int i = 0; i < size; i++) {\n            for (int x : nums.get(i)) {\n                List<Integer> list = indices.getOrDefault(x, new ArrayList<Integer>());\n                list.add(i);\n                indices.put(x, list);\n                xMin = Math.min(xMin, x);\n                xMax = Math.max(xMax, x);\n            }\n        }\n\n        int[] freq = new int[size];\n        int inside = 0;\n        int left = xMin, right = xMin - 1;\n        int bestLeft = xMin, bestRight = xMax;\n\n        while (right < xMax) {\n            right++;\n            if (indices.containsKey(right)) {\n                for (int x : indices.get(right)) {\n                    freq[x]++;\n                    if (freq[x] == 1) {\n                        inside++;\n                    }\n                }\n                while (inside == size) {\n                    if (right - left < bestRight - bestLeft) {\n                        bestLeft = left;\n                        bestRight = right;\n                    }\n                    if (indices.containsKey(left)) {\n                        for (int x: indices.get(left)) {\n                            freq[x]--;\n                            if (freq[x] == 0) {\n                                inside--;\n                            }\n                        }\n                    }\n                    left++;\n                }\n            }\n        }\n\n        return new int[]{bestLeft, bestRight};\n    }\n}\n```\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    vector<int> smallestRange(vector<vector<int>>& nums) {\n        int n = nums.size();\n        unordered_map<int, vector<int>> indices;\n        int xMin = INT_MAX, xMax = INT_MIN;\n        for (int i = 0; i < n; ++i) {\n            for (const int& x: nums[i]) {\n                indices[x].push_back(i);\n                xMin = min(xMin, x);\n                xMax = max(xMax, x);\n            }\n        }\n\n        vector<int> freq(n);\n        int inside = 0;\n        int left = xMin, right = xMin - 1;\n        int bestLeft = xMin, bestRight = xMax;\n\n        while (right < xMax) {\n            ++right;\n            if (indices.count(right)) {\n                for (const int& x: indices[right]) {\n                    ++freq[x];\n                    if (freq[x] == 1) {\n                        ++inside;\n                    }\n                }\n                while (inside == n) {\n                    if (right - left < bestRight - bestLeft) {\n                        bestLeft = left;\n                        bestRight = right;\n                    }\n                    if (indices.count(left)) {\n                        for (const int& x: indices[left]) {\n                            --freq[x];\n                            if (freq[x] == 0) {\n                                --inside;\n                            }\n                        }\n                    }\n                    ++left;\n                }\n            }\n        }\n\n        return {bestLeft, bestRight};\n    }\n};\n```\n\n```golang [sol2-Golang]\nfunc smallestRange(nums [][]int) []int {\n    size := len(nums)\n    indices := map[int][]int{}\n    xMin, xMax := math.MaxInt32, math.MinInt32\n    for i := 0; i < size; i++ {\n        for _, x := range nums[i] {\n            indices[x] = append(indices[x], i)\n            xMin = min(xMin, x)\n            xMax = max(xMax, x)\n        }\n    }\n    freq := make([]int, size)\n    inside := 0\n    left, right := xMin, xMin - 1\n    bestLeft, bestRight := xMin, xMax\n    for right < xMax {\n        right++\n        if len(indices[right]) > 0 {\n            for _, x := range indices[right] {\n                freq[x]++\n                if freq[x] == 1 {\n                    inside++\n                }\n            }\n            for inside == size {\n                if right - left < bestRight - bestLeft {\n                    bestLeft, bestRight = left, right\n                }\n                for _, x := range indices[left] {\n                    freq[x]--\n                    if freq[x] == 0 {\n                        inside--\n                    }\n                }\n                left++\n            }\n        }\n    }\n    return []int{bestLeft, bestRight}\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n```Python [sol2-Python]\nclass Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:\n        n = len(nums)\n        indices = collections.defaultdict(list)\n        xMin, xMax = 10**9, -10**9\n        for i, vec in enumerate(nums):\n            for x in vec:\n                indices[x].append(i)\n            xMin = min(xMin, *vec)\n            xMax = max(xMax, *vec)\n        \n        freq = [0] * n\n        inside = 0\n        left, right = xMin, xMin - 1\n        bestLeft, bestRight = xMin, xMax\n\n        while right < xMax:\n            right += 1\n            if right in indices:\n                for x in indices[right]:\n                    freq[x] += 1\n                    if freq[x] == 1:\n                        inside += 1\n                while inside == n:\n                    if right - left < bestRight - bestLeft:\n                        bestLeft, bestRight = left, right\n                    if left in indices:\n                        for x in indices[left]:\n                            freq[x] -= 1\n                            if freq[x] == 0:\n                                inside -= 1\n                    left += 1\n\n        return [bestLeft, bestRight]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nk + |V|)$，其中 $n$ 是所有列表的平均长度，$k$ 是列表数量，$|V|$ 是列表中元素的值域，在本题中 $|V| \\leq 2*10^5$。构造哈希映射的时间复杂度为 $O(nk)$，双指针的移动范围为 $|V|$，在此过程中会对哈希映射再进行一次遍历，时间复杂度为 $O(nk)$，因此总时间复杂度为 $O(nk + |V|)$。\n\n- 空间复杂度：$O(nk)$，即为哈希映射使用的空间。哈希映射的「键」的数量由列表中的元素个数 $nk$ 以及值域 $|V|$ 中的较小值决定，「值」为长度不固定的数组，但是它们的长度之和为 $nk$，因此哈希映射使用的空间为 $O(nk)$。在使用双指针时，还需要一个长度为 $n$ 的数组，其对应的空间在渐进意义下小于 $O(nk)$，因此可以忽略。"
}