{
	"titleSlug": "binary-search-tree-iterator",
	"slug": "fu-xue-ming-zhu-dan-diao-zhan-die-dai-la-dkrm",
	"url": "https://leetcode-cn.com/problems/binary-search-tree-iterator/solution/fu-xue-ming-zhu-dan-diao-zhan-die-dai-la-dkrm/",
	"content": "各位题友大家好！ 今天是 **[@负雪明烛](/u/fuxuemingzhu/)** 坚持日更的第 **63** 天。今天力扣上的每日一题是「[173. 二叉搜索树迭代器](https://leetcode-cn.com/problems/binary-search-tree-iterator/)」。\n\n# 解题思路\n\n题目给出的树是：**二叉搜索树（BST）**。二叉搜索树最重要的性质是：**二叉搜索树的中序遍历是有序的**。今天这个题目直接让我们「中序遍历」，我建议题目可以改为：实现二叉搜索树的升序迭代器。\n\n具体到本题，我们可以有两个方法：\n\n- 提前保存全部节点\n- 迭代时计算 `next`  节点\n\n## 方法一：提前保存全部节点\n\n\n这个方法比较简单，提前把 BST 的中序遍历结果保存到一个**队列**里面，当调用 `next()` 方法的时候，就从**队列**头部弹出一个元素。\n\n\n树的中序中序遍历应该是基础知识，我就不讲了。\n\n\n代码如下：\n\n```Python []\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator(object):\n\n    def __init__(self, root):\n        self.queue = collections.deque()\n        self.inOrder(root)\n    \n    def inOrder(self, root):\n        if not root: return\n        self.inOrder(root.left)\n        self.queue.append(root.val)\n        self.inOrder(root.right)\n\n    def next(self):\n        return self.queue.popleft()\n\n\n    def hasNext(self):\n        return len(self.queue) > 0\n```\n\n\n- 时间复杂度：构造函数是 $O(N)$；调用 `next()` 方法的时间复杂度是 $O(1)$。\n- 空间复杂度：$O(N)$，使用了队列保存了所有元素。\n\n\n\n## 方法二：迭代时计算 `next`  节点\n\n\n在前几天的设计迭代器的每日一题中，我说过提前把所有的值遍历并且保存起来的做法并不好，不是面试官想要的。举个场景：想通过 BST 的迭代器，判断 BST 中有没有 数值x。此时哪怕 数值x 是 BST 迭代器的第一个元素，上面的方法也会先把所有的值都遍历出来，时间复杂度到了$O(N)$。\n\n\n所以，设计迭代器的时候，应避免提前把所有的值都遍历出来；最好能设计成遍历过程中求 `next` 节点。那就需要用迭代方法了。\n\n\n- 把**递归**转成**迭代**，基本想法就是用**栈。**\n- 迭代总体思路是：**栈中只保留左节点**。\n\n\n思路必须从递归的访问顺序说起：中序遍历的访问顺序是 `左子树 -> 根节点 -> 右子树` 的顺序，并且对 `左子树` 和 `右子树` 也进行递归。\n\n结合下图，实际访问节点的顺序是：\n1. 从 `根节点12` 开始一路到底遍历到所有左节点，路径保存到栈中；此时栈为 `[12, 6, 5]`。\n2. 弹出栈顶节点，即 `叶子节点5` ；\n2. 下一个栈顶元素是 该叶子节点 的 `根节点6`；\n3. 然后把 `该新的根节点的右子树9` 一路到底遍历其所有左节点；栈为 `[12, 9, 8, 7]`。\n4. 继续运行下去，直到栈为空。\n\n\n\n中序遍历流程如下图所示：\n\n![173.001.jpeg](https://pic.leetcode-cn.com/1616898885-tLjlOD-173.001.jpeg)\n\n### 发现了没有？这就是一个「单调栈」啊！\n\n\n\n根据上面的遍历顺序，我们得出迭代的思路：\n\n- 构造方法：一路到底，把根节点和它的所有左节点放到栈中；\n- 调用 `next()` 方法：弹出栈顶的节点；\n  - 如果它有右子树，则对右子树一路到底，把它和它的所有左节点放到栈中。\n\n\n代码如下：\n\n```Python []\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator(object):\n\n    def __init__(self, root):\n        self.stack = []\n        while root:\n            self.stack.append(root)\n            root = root.left\n\n    def next(self):\n        cur = self.stack.pop()\n        node = cur.right\n        while node:\n            self.stack.append(node)\n            node = node.left\n        return cur.val\n\n    def hasNext(self):\n        return len(self.stack) > 0\n```\n\n\n\n\n- 时间复杂度：均摊复杂度是 $O(1)$，调用 `next()` 方法的时候，如果栈顶元素有右子树，则把所有右边节点即其所有左孩子全部放到了栈中，下次调用 `next()` 的时候，直接访问栈顶就可以了，均摊之后时间复杂度是 $O(1)$。\n- 空间复杂度：$O(h)$，h 为数的高度，因为栈中只保留了左节点，栈中元素最多的时候，就是树的高度。\n\n\n\n\n# 刷题心得\n\n\n- 今天题目的迭代写法来自对递归的理解。把递归弄懂了，才可能写出这种迭代写法。\n- 写完题解的这一刻，我脑子里蹦出来「**单调栈**」！我惊喜地发现，BST 的中序迭代时就是维护了一个**单调递减栈**！两种不同的数据结构，竟然神奇般地融为一体，我感觉很炸裂！\n\n\n参考资料：[【LeetCode】代码模板，刷题必会](https://fuxuemingzhu.blog.csdn.net/article/details/101900729)\n\n\n-----\n\n\nOK，以上就是 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 写的今天题解的全部内容了，如果你觉得有帮助的话，**求赞、求关注、求收藏**。如果有疑问的话，请在下面评论，我会及时解答。\n\n\n**关注我**，你将不会错过我的精彩动画题解、面试题分享、组队刷题活动，进入主页 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 右侧有刷题组织，从此刷题不再孤单。\n\n\n祝大家牛年大吉！AC 多多，Offer 多多！我们明天再见！"
}