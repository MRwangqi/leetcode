{
	"titleSlug": "ZL6zAn",
	"slug": "dao-yu-de-zui-da-mian-ji-by-leetcode-sol-c9ni",
	"url": "https://leetcode-cn.com/problems/ZL6zAn/solution/dao-yu-de-zui-da-mian-ji-by-leetcode-sol-c9ni/",
	"content": "#### 方法一：深度优先搜索\n\n**算法**\n\n- 我们想知道网格中每个连通形状的面积，然后取最大值。\n\n- 如果我们在一个土地上，以 $4$ 个方向探索与之相连的每一个土地（以及与这些土地相连的土地），那么探索过的土地总数将是该连通形状的面积。\n\n- 为了确保每个土地访问不超过一次，我们每次经过一块土地时，将这块土地的值置为 $0$。这样我们就不会多次访问同一土地。\n\n```Python [sol1-Python3]\nclass Solution:\n    def dfs(self, grid, cur_i, cur_j) -> int:\n        if cur_i < 0 or cur_j < 0 or cur_i == len(grid) or cur_j == len(grid[0]) or grid[cur_i][cur_j] != 1:\n            return 0\n        grid[cur_i][cur_j] = 0\n        ans = 1\n        for di, dj in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n            next_i, next_j = cur_i + di, cur_j + dj\n            ans += self.dfs(grid, next_i, next_j)\n        return ans\n\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        ans = 0\n        for i, l in enumerate(grid):\n            for j, n in enumerate(l):\n                ans = max(self.dfs(grid, i, j), ans)\n        return ans\n\n```\n\n```C++ [sol1-C++]\nclass Solution {\n    int dfs(vector<vector<int>>& grid, int cur_i, int cur_j) {\n        if (cur_i < 0 || cur_j < 0 || cur_i == grid.size() || cur_j == grid[0].size() || grid[cur_i][cur_j] != 1) {\n            return 0;\n        }\n        grid[cur_i][cur_j] = 0;\n        int di[4] = {0, 0, 1, -1};\n        int dj[4] = {1, -1, 0, 0};\n        int ans = 1;\n        for (int index = 0; index != 4; ++index) {\n            int next_i = cur_i + di[index], next_j = cur_j + dj[index];\n            ans += dfs(grid, next_i, next_j);\n        }\n        return ans;\n    }\npublic:\n    int maxAreaOfIsland(vector<vector<int>>& grid) {\n        int ans = 0;\n        for (int i = 0; i != grid.size(); ++i) {\n            for (int j = 0; j != grid[0].size(); ++j) {\n                ans = max(ans, dfs(grid, i, j));\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n        int ans = 0;\n        for (int i = 0; i != grid.length; ++i) {\n            for (int j = 0; j != grid[0].length; ++j) {\n                ans = Math.max(ans, dfs(grid, i, j));\n            }\n        }\n        return ans;\n    }\n\n    public int dfs(int[][] grid, int cur_i, int cur_j) {\n        if (cur_i < 0 || cur_j < 0 || cur_i == grid.length || cur_j == grid[0].length || grid[cur_i][cur_j] != 1) {\n            return 0;\n        }\n        grid[cur_i][cur_j] = 0;\n        int[] di = {0, 0, 1, -1};\n        int[] dj = {1, -1, 0, 0};\n        int ans = 1;\n        for (int index = 0; index != 4; ++index) {\n            int next_i = cur_i + di[index], next_j = cur_j + dj[index];\n            ans += dfs(grid, next_i, next_j);\n        }\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(m \\times n)$。其中 $m$ 是给定网格中的行数，$n$ 是列数。我们访问每个网格最多一次。\n\n* 空间复杂度：$O(m \\times n)$，递归的深度最大可能是整个网格的大小，因此最大可能使用 $O(m \\times n)$ 的栈空间。\n\n#### 方法二：深度优先搜索 + 栈\n\n**算法**\n\n我们可以用栈来实现深度优先搜索算法。这种方法本质与方法一相同，唯一的区别是：\n  \n- 方法一通过函数的调用来表示接下来想要遍历哪些土地，让下一层函数来访问这些土地。而方法二把接下来想要遍历的土地放在栈里，然后在取出这些土地的时候访问它们。\n\n- 访问每一片土地时，我们将对围绕它四个方向进行探索，找到还未访问的土地，加入到栈 $\\textit{stack}$ 中；\n\n- 另外，只要栈 $\\textit{stack}$ 不为空，就说明我们还有土地待访问，那么就从栈中取出一个元素并访问。\n\n```Python [sol2-Python3]\nclass Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        ans = 0\n        for i, l in enumerate(grid):\n            for j, n in enumerate(l):\n                cur = 0\n                stack = [(i, j)]\n                while stack:\n                    cur_i, cur_j = stack.pop()\n                    if cur_i < 0 or cur_j < 0 or cur_i == len(grid) or cur_j == len(grid[0]) or grid[cur_i][cur_j] != 1:\n                        continue\n                    cur += 1\n                    grid[cur_i][cur_j] = 0\n                    for di, dj in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                        next_i, next_j = cur_i + di, cur_j + dj\n                        stack.append((next_i, next_j))\n                ans = max(ans, cur)\n        return ans\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxAreaOfIsland(vector<vector<int>>& grid) {\n        int ans = 0;\n        for (int i = 0; i != grid.size(); ++i) {\n            for (int j = 0; j != grid[0].size(); ++j) {\n                int cur = 0;\n                stack<int> stacki;\n                stack<int> stackj;\n                stacki.push(i);\n                stackj.push(j);\n                while (!stacki.empty()) {\n                    int cur_i = stacki.top(), cur_j = stackj.top();\n                    stacki.pop();\n                    stackj.pop();\n                    if (cur_i < 0 || cur_j < 0 || cur_i == grid.size() || cur_j == grid[0].size() || grid[cur_i][cur_j] != 1) {\n                        continue;\n                    }\n                    ++cur;\n                    grid[cur_i][cur_j] = 0;\n                    int di[4] = {0, 0, 1, -1};\n                    int dj[4] = {1, -1, 0, 0};\n                    for (int index = 0; index != 4; ++index) {\n                        int next_i = cur_i + di[index], next_j = cur_j + dj[index];\n                        stacki.push(next_i);\n                        stackj.push(next_j);\n                    }\n                }\n                ans = max(ans, cur);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n        int ans = 0;\n        for (int i = 0; i != grid.length; ++i) {\n            for (int j = 0; j != grid[0].length; ++j) {\n                int cur = 0;\n                Deque<Integer> stacki = new LinkedList<Integer>();\n                Deque<Integer> stackj = new LinkedList<Integer>();\n                stacki.push(i);\n                stackj.push(j);\n                while (!stacki.isEmpty()) {\n                    int cur_i = stacki.pop(), cur_j = stackj.pop();\n                    if (cur_i < 0 || cur_j < 0 || cur_i == grid.length || cur_j == grid[0].length || grid[cur_i][cur_j] != 1) {\n                        continue;\n                    }\n                    ++cur;\n                    grid[cur_i][cur_j] = 0;\n                    int[] di = {0, 0, 1, -1};\n                    int[] dj = {1, -1, 0, 0};\n                    for (int index = 0; index != 4; ++index) {\n                        int next_i = cur_i + di[index], next_j = cur_j + dj[index];\n                        stacki.push(next_i);\n                        stackj.push(next_j);\n                    }\n                }\n                ans = Math.max(ans, cur);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\times n)$。其中 $m$ 是给定网格中的行数，$n$ 是列数。我们访问每个网格最多一次。\n\n- 空间复杂度：$O(m \\times n)$，栈中最多会存放所有的土地，土地的数量最多为 $m \\times n$ 块，因此使用的空间为 $O(m \\times n)$。\n\n#### 方法三：广度优先搜索\n\n**算法**\n\n我们把方法二中的栈改为队列，每次从队首取出土地，并将接下来想要遍历的土地放在队尾，就实现了广度优先搜索算法。\n\n```Python [sol3-Python3]\nclass Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        ans = 0\n        for i, l in enumerate(grid):\n            for j, n in enumerate(l):\n                cur = 0\n                q = collections.deque([(i, j)])\n                while q:\n                    cur_i, cur_j = q.popleft()\n                    if cur_i < 0 or cur_j < 0 or cur_i == len(grid) or cur_j == len(grid[0]) or grid[cur_i][cur_j] != 1:\n                        continue\n                    cur += 1\n                    grid[cur_i][cur_j] = 0\n                    for di, dj in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                        next_i, next_j = cur_i + di, cur_j + dj\n                        q.append((next_i, next_j))\n                ans = max(ans, cur)\n        return ans\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int maxAreaOfIsland(vector<vector<int>>& grid) {\n        int ans = 0;\n        for (int i = 0; i != grid.size(); ++i) {\n            for (int j = 0; j != grid[0].size(); ++j) {\n                int cur = 0;\n                queue<int> queuei;\n                queue<int> queuej;\n                queuei.push(i);\n                queuej.push(j);\n                while (!queuei.empty()) {\n                    int cur_i = queuei.front(), cur_j = queuej.front();\n                    queuei.pop();\n                    queuej.pop();\n                    if (cur_i < 0 || cur_j < 0 || cur_i == grid.size() || cur_j == grid[0].size() || grid[cur_i][cur_j] != 1) {\n                        continue;\n                    }\n                    ++cur;\n                    grid[cur_i][cur_j] = 0;\n                    int di[4] = {0, 0, 1, -1};\n                    int dj[4] = {1, -1, 0, 0};\n                    for (int index = 0; index != 4; ++index) {\n                        int next_i = cur_i + di[index], next_j = cur_j + dj[index];\n                        queuei.push(next_i);\n                        queuej.push(next_j);\n                    }\n                }\n                ans = max(ans, cur);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n        int ans = 0;\n        for (int i = 0; i != grid.length; ++i) {\n            for (int j = 0; j != grid[0].length; ++j) {\n                int cur = 0;\n                Queue<Integer> queuei = new LinkedList<Integer>();\n                Queue<Integer> queuej = new LinkedList<Integer>();\n                queuei.offer(i);\n                queuej.offer(j);\n                while (!queuei.isEmpty()) {\n                    int cur_i = queuei.poll(), cur_j = queuej.poll();\n                    if (cur_i < 0 || cur_j < 0 || cur_i == grid.length || cur_j == grid[0].length || grid[cur_i][cur_j] != 1) {\n                        continue;\n                    }\n                    ++cur;\n                    grid[cur_i][cur_j] = 0;\n                    int[] di = {0, 0, 1, -1};\n                    int[] dj = {1, -1, 0, 0};\n                    for (int index = 0; index != 4; ++index) {\n                        int next_i = cur_i + di[index], next_j = cur_j + dj[index];\n                        queuei.offer(next_i);\n                        queuej.offer(next_j);\n                    }\n                }\n                ans = Math.max(ans, cur);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\times n)$。其中 $m$ 是给定网格中的行数，$n$ 是列数。我们访问每个网格最多一次。\n\n- 空间复杂度：$O(m \\times n)$，队列中最多会存放所有的土地，土地的数量最多为 $m \\times n$ 块，因此使用的空间为 $O(m \\times n)$。"
}