{
	"titleSlug": "three-consecutive-odds",
	"slug": "cun-zai-lian-xu-san-ge-qi-shu-de-shu-zu-by-leetcod",
	"url": "https://leetcode-cn.com/problems/three-consecutive-odds/solution/cun-zai-lian-xu-san-ge-qi-shu-de-shu-zu-by-leetcod/",
	"content": "#### 方法一：枚举\n\n**思路与算法**\n\n枚举所有的连续的三个元素，判断这三个元素是否都是奇数，如果是，则返回 `true`。如果所有的连续的三个元素中，没有一个满足条件，返回 `false`。\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    bool threeConsecutiveOdds(vector<int>& arr) {\n        int n = arr.size();\n        for (int i = 0; i <= n - 3; ++i) {\n            if ((arr[i] & 1) & (arr[i + 1] & 1) & (arr[i + 2] & 1)) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean threeConsecutiveOdds(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i <= n - 3; ++i) {\n            if ((arr[i] & 1) != 0 && (arr[i + 1] & 1) != 0 && (arr[i + 2] & 1) != 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar threeConsecutiveOdds = function(arr) {\n    const n = arr.length;\n    for (let i = 0; i <= n - 3; ++i) {\n        if ((arr[i] & 1) & (arr[i + 1] & 1) & (arr[i + 2] & 1)) {\n            return true;\n        }\n    }\n    return false;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def threeConsecutiveOdds(self, arr: List[int]) -> bool:\n        n = len(arr)\n        return n >= 3 and \\\n            any(arr[i] & 1 and arr[i + 1] & 1 and arr[i + 2] & 1 \\\n                for i in range(n - 2))\n```\n\n**复杂度分析**\n\n记原序列的长度为 $n$。\n\n+ 时间复杂度：$O(n)$。\n+ 空间复杂度：$O(1)$。"
}