{
	"titleSlug": "longest-turbulent-subarray",
	"slug": "yi-zhang-dong-tu-xiang-jie-dong-tai-gui-wrwvn",
	"url": "https://leetcode-cn.com/problems/longest-turbulent-subarray/solution/yi-zhang-dong-tu-xiang-jie-dong-tai-gui-wrwvn/",
	"content": "各位题友大家好，今天是负雪明烛坚持日更的第 **15** 天。今天力扣上的每日一题是第 978 题「最长湍流子数组」。\n\n# 解题思路\n首先我们一定要读懂题意，本题中湍流子数组的意思是：一个增长和降低互相交替的子数组，如果在坐标轴上画出来就是个波浪状数组，`↗ ↘ ↗ ↘`，即这个形状。\n比如，题目给的示例 1 中的最长湍流子数组为 `[4,2,10,7,8]`，他就是增长和降低相互交替的，形状是`↘ ↗ ↘ ↗`。\n\n## 动态规划\n\n今天这个题目最合适的做法是动态规划。下面的解释不难，相信你可以看懂；如果有疑问就在评论区提问，我会及时解答。\n\n动态规划首先需要我们定义状态是什么，然后根据题意，写出状态转移方程。\n\n对于**最长连续子数组**问题，使用动态规划求解时，我们经常定义状态 `dp[i]` 为：以 `i` 位置结尾的最长连续子数组的长度，因为这个状态可以反映 `i` 位置及其前面区间的情况。下一个位置 `i + 1` 可以根据 `dp[i]` 就知道了前面的情况，再根据 `arr[i + 1]` 和 `arr[i]` 的大小关系，能更新状态 `dp[i + 1]`。\n\n对于本题，如果只定一个状态数组是不够的，因为我们只有区分了 `i` 位置是在增长还是在降低，才能判断 `i + 1` 位置是否能续上前面的波浪。所以，我们需要定义两个状态数组，分别表示以 `i` 结尾的在增长和降低的最长湍流子数组长度。\n\n### 状态的定义：\n\n- 定义 `up[i]` 表示以位置 `i` 结尾的，并且 `arr[i - 1] < arr[i]` 的最长湍流子数组长度。\n- 定义 `down[i]` 表示以位置 `i` 结尾的，并且 `arr[i - 1] > arr[i]` 的最长湍流子数组长度。\n\n`up[i]` 和 `down[i]` 初始化都是 1，因为每个数字本身都是一个最小的湍流子数组。\n\n### 状态转移方程：\n\n- `up[i] = down[i - 1] + 1`，当 `arr[i - 1] < arr[i]`；\n- `down[i] = up[i - 1] + 1`，当 `arr[i - 1] > arr[i]`；\n\n解释：湍流子数组的增长和降低是交替的。\n\n文字的解释会显得苍白和啰嗦，大家直接看图吧。\n\n![978.gif](https://pic.leetcode-cn.com/1612746849-AHrNUH-978.gif)\n\n\n根据评论区的大家反馈，特把每个操作过程放在这里，自己点击观看：\n\n<![978_img.001.jpeg](https://pic.leetcode-cn.com/1612756160-LgLljB-978_img.001.jpeg),![978_img.002.jpeg](https://pic.leetcode-cn.com/1612756160-IlWPPi-978_img.002.jpeg),![978_img.003.jpeg](https://pic.leetcode-cn.com/1612756160-UiORRp-978_img.003.jpeg),![978_img.004.jpeg](https://pic.leetcode-cn.com/1612756160-qHNHWd-978_img.004.jpeg),![978_img.005.jpeg](https://pic.leetcode-cn.com/1612756160-TRuVpX-978_img.005.jpeg),![978_img.006.jpeg](https://pic.leetcode-cn.com/1612756160-WWYXaJ-978_img.006.jpeg),![978_img.007.jpeg](https://pic.leetcode-cn.com/1612756160-QYYeFm-978_img.007.jpeg),![978_img.008.jpeg](https://pic.leetcode-cn.com/1612756160-mzghyf-978_img.008.jpeg),![978_img.009.jpeg](https://pic.leetcode-cn.com/1612756160-rPaYgl-978_img.009.jpeg),![978_img.010.jpeg](https://pic.leetcode-cn.com/1612756160-bbxGql-978_img.010.jpeg),![978_img.011.jpeg](https://pic.leetcode-cn.com/1612756160-BruxiK-978_img.011.jpeg),![978_img.012.jpeg](https://pic.leetcode-cn.com/1612756160-EeYlgw-978_img.012.jpeg),![978_img.013.jpeg](https://pic.leetcode-cn.com/1612756160-CZjNuq-978_img.013.jpeg),![978_img.014.jpeg](https://pic.leetcode-cn.com/1612756160-tRjFgr-978_img.014.jpeg),![978_img.015.jpeg](https://pic.leetcode-cn.com/1612756160-ladIOg-978_img.015.jpeg),![978_img.016.jpeg](https://pic.leetcode-cn.com/1612756160-wTpXxq-978_img.016.jpeg),![978_img.017.jpeg](https://pic.leetcode-cn.com/1612756160-jjLhIH-978_img.017.jpeg),![978_img.018.jpeg](https://pic.leetcode-cn.com/1612756160-FOhsbz-978_img.018.jpeg),![978_img.019.jpeg](https://pic.leetcode-cn.com/1612756160-zlfaxo-978_img.019.jpeg),![978_img.020.jpeg](https://pic.leetcode-cn.com/1612756160-GgXSxx-978_img.020.jpeg),![978_img.021.jpeg](https://pic.leetcode-cn.com/1612756160-moHAoE-978_img.021.jpeg),![978_img.022.jpeg](https://pic.leetcode-cn.com/1612756160-tdgzmH-978_img.022.jpeg),![978_img.023.jpeg](https://pic.leetcode-cn.com/1612756160-LzljXB-978_img.023.jpeg)>\n\n\n\n除了动态规划之外，本题还可以用双指针求解。大家可以参考官方题解。\n\n## 代码\n\n使用 Python2 写的代码如下。\n\n\n```python\nclass Solution(object):\n    def maxTurbulenceSize(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        N = len(arr)\n        up = [1] * N\n        down = [1] * N\n        res = 1\n        for i in range(1, N):\n            if arr[i - 1] < arr[i]:\n                up[i] = down[i - 1] + 1\n                down[i] = 1\n            elif arr[i - 1] > arr[i]:\n                up[i] = 1\n                down[i] = up[i - 1] + 1\n            else:\n                up[i] = 1\n                down[i] = 1\n            res = max(res, max(up[i], down[i]))\n        return res\n```\n\n上面的代码可以缩短成下面这样：\n\n```python\nclass Solution(object):\n    def maxTurbulenceSize(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        N = len(arr)\n        up = [1] * N\n        down = [1] * N\n        res = 1\n        for i in range(1, N):\n            if arr[i - 1] < arr[i]:\n                up[i] = down[i - 1] + 1\n            elif arr[i - 1] > arr[i]:\n                down[i] = up[i - 1] + 1\n            res = max(res, max(up[i], down[i]))\n        return res\n```\n\n# 刷题心得\n\n1. 连续最长子数组问题可以用双指针和动态规划求解。\n2. 本题的动态规划解法是个经典解法，学习之后可以运用到其他题目。\n\n\n参考资料：\n1. [最长湍流子数组](https://leetcode-cn.com/problems/longest-turbulent-subarray/solution/zui-chang-tuan-liu-zi-shu-zu-by-leetcode-t4d8/)\n2. [🎦 最长湍流子数组](https://leetcode-cn.com/problems/longest-turbulent-subarray/solution/zui-chang-tuan-liu-zi-shu-zu-by-leetcode-zqoq/)\n3. [花花酱](https://zxi.mytechroad.com/blog/dynamic-programming/leetcode-978-longest-turbulent-subarray/)\n\n\nOK，以上就是 [@负雪明烛](/u/fuxuemingzhu/) 写的今天题解的全部内容了，如果你觉得有帮助的话，**求赞、求关注、求收藏**。我们明天再见！"
}