{
	"titleSlug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
	"slug": "xing-cheng-liang-ge-yi-huo-xiang-deng-sh-jud0",
	"url": "https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/solution/xing-cheng-liang-ge-yi-huo-xiang-deng-sh-jud0/",
	"content": "#### 前言\n\n用 $\\oplus$ 表示按位异或运算。\n\n定义长度为 $n$ 的数组 $\\textit{arr}$ 的异或前缀和\n\n$$\nS_i =\n\\begin{cases} \n0,&i=0\\\\\n\\textit{arr}_0\\oplus\\textit{arr}_1\\oplus\\cdots\\oplus\\textit{arr}_{i-1},&1\\le i\\le n\n\\end{cases}\n$$\n\n由该定义可得\n\n$$\nS_i =\n\\begin{cases} \n0,&i=0\\\\\nS_{i-1}\\oplus\\textit{arr}_{i-1},&1\\le i\\le n\n\\end{cases}\n$$\n\n这是一个关于 $S_i$ 的递推式，根据该递推式我们可以用 $O(n)$ 的时间得到数组 $\\textit{arr}$ 的异或前缀和数组。\n\n对于两个下标不同的异或前缀和 $S_i$ 和 $S_j$，设 $0<i<j$，有\n\n$$\nS_i\\oplus S_j=(\\textit{arr}_0\\oplus\\textit{arr}_1\\oplus\\cdots\\oplus\\textit{arr}_{i-1})\\oplus(\\textit{arr}_0\\oplus\\textit{arr}_1\\oplus\\cdots\\oplus\\textit{arr}_{i-1}\\oplus\\textit{arr}_i\\oplus\\cdots\\oplus\\textit{arr}_{j-1}）\n$$\n\n由于异或运算满足结合律和交换律，且任意数异或自身等于 $0$，上式可化简为\n\n$$\nS_i\\oplus S_j=\\textit{arr}_i\\oplus\\cdots\\oplus\\textit{arr}_{j-1}\n$$\n\n从而，数组 $\\textit{arr}$ 的子区间 $[i,j]$ 的元素异或和为可表示为\n\n$$\nS_i\\oplus S_{j+1}\n$$\n\n因此问题中的 $a$ 和 $b$ 可表示为\n\n$$\n\\begin{aligned}\n&a=S_i\\oplus S_{j}\\\\\n&b=S_j\\oplus S_{k+1}\n\\end{aligned}\n$$\n\n若 $a=b$，则有\n\n$$\nS_i\\oplus S_{j}=S_j\\oplus S_{k+1}\n$$\n\n即\n\n$$\nS_i=S_{k+1}\n$$\n\n#### 方法一：三重循环\n\n计算数组 $\\textit{arr}$ 的异或前缀和 $S$，枚举符合 $0\\le i<j\\le k<n$ 的下标 $i$，$j$ 和 $k$，统计满足等式 $S_i=S_{k+1}$ 的三元组个数。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countTriplets(vector<int> &arr) {\n        int n = arr.size();\n        vector<int> s(n + 1);\n        for (int i = 0; i < n; ++i) {\n            s[i + 1] = s[i] ^ arr[i];\n        }\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                for (int k = j; k < n; ++k) {\n                    if (s[i] == s[k + 1]) {\n                        ++ans;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countTriplets(int[] arr) {\n        int n = arr.length;\n        int[] s = new int[n + 1];\n        for (int i = 0; i < n; ++i) {\n            s[i + 1] = s[i] ^ arr[i];\n        }\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                for (int k = j; k < n; ++k) {\n                    if (s[i] == s[k + 1]) {\n                        ++ans;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int CountTriplets(int[] arr) {\n        int n = arr.Length;\n        int[] s = new int[n + 1];\n        for (int i = 0; i < n; ++i) {\n            s[i + 1] = s[i] ^ arr[i];\n        }\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                for (int k = j; k < n; ++k) {\n                    if (s[i] == s[k + 1]) {\n                        ++ans;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc countTriplets(arr []int) (ans int) {\n    n := len(arr)\n    s := make([]int, n+1)\n    for i, val := range arr {\n        s[i+1] = s[i] ^ val\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j; k < n; k++ {\n                if s[i] == s[k+1] {\n                    ans++\n                }\n            }\n        }\n    }\n    return\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        s = [0]\n        for val in arr:\n            s.append(s[-1] ^ val)\n        \n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    if s[i] == s[k + 1]:\n                        ans += 1\n        \n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar countTriplets = function(arr) {\n    const n = arr.length;\n    const s = [0];\n    for (const num of arr) {\n        s.push(s[s.length - 1] ^ num);\n    }\n\n    let ans = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j; k < n; k++) {\n                if (s[i] === s[k + 1]) {\n                    ans++;\n                }\n            }\n        }\n    }\n\n    return ans;\n};\n```\n\n```C [sol1-C]\nint countTriplets(int* arr, int arrSize) {\n    int n = arrSize;\n    int s[n + 1];\n    s[0] = 0;\n    for (int i = 0; i < n; ++i) {\n        s[i + 1] = s[i] ^ arr[i];\n    }\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            for (int k = j; k < n; ++k) {\n                if (s[i] == s[k + 1]) {\n                    ++ans;\n                }\n            }\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^3)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。\n\n- 空间复杂度：$O(n)$。\n\n#### 方法二：二重循环\n\n当等式 $S_i=S_{k+1}$ 成立时，$[i+1, k]$ 的范围内的任意 $j$ 都是符合要求的，对应的三元组个数为 $k-i$。因此我们只需枚举下标 $i$ 和 $k$。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int countTriplets(vector<int> &arr) {\n        int n = arr.size();\n        vector<int> s(n + 1);\n        for (int i = 0; i < n; ++i) {\n            s[i + 1] = s[i] ^ arr[i];\n        }\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int k = i + 1; k < n; ++k) {\n                if (s[i] == s[k + 1]) {\n                    ans += k - i;\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int countTriplets(int[] arr) {\n        int n = arr.length;\n        int[] s = new int[n + 1];\n        for (int i = 0; i < n; ++i) {\n            s[i + 1] = s[i] ^ arr[i];\n        }\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int k = i + 1; k < n; ++k) {\n                if (s[i] == s[k + 1]) {\n                    ans += k - i;\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int CountTriplets(int[] arr) {\n        int n = arr.Length;\n        int[] s = new int[n + 1];\n        for (int i = 0; i < n; ++i) {\n            s[i + 1] = s[i] ^ arr[i];\n        }\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int k = i + 1; k < n; ++k) {\n                if (s[i] == s[k + 1]) {\n                    ans += k - i;\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc countTriplets(arr []int) (ans int) {\n    n := len(arr)\n    s := make([]int, n+1)\n    for i, val := range arr {\n        s[i+1] = s[i] ^ val\n    }\n    for i := 0; i < n; i++ {\n        for k := i + 1; k < n; k++ {\n            if s[i] == s[k+1] {\n                ans += k - i\n            }\n        }\n    }\n    return\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        s = [0]\n        for val in arr:\n            s.append(s[-1] ^ val)\n        \n        ans = 0\n        for i in range(n):\n            for k in range(i + 1, n):\n                if s[i] == s[k + 1]:\n                    ans += k - i\n        \n        return ans\n```\n\n```JavaScript [sol2-JavaScript]\nvar countTriplets = function(arr) {\n    const n = arr.length;\n    const s = [0];\n    for (const num of arr) {\n        s.push(s[s.length - 1] ^ num);\n    }\n\n    let ans = 0;\n    for (let i = 0; i < n; i++) {\n        for (let k = i + 1; k < n; k++) {\n            if (s[i] === s[k + 1]) {\n                ans += k - i;\n            }\n        }\n    }\n\n    return ans;\n};\n```\n\n```C [sol2-C]\nint countTriplets(int* arr, int arrSize) {\n    int n = arrSize;\n    int s[n + 1];\n    s[0] = 0;\n    for (int i = 0; i < n; ++i) {\n        s[i + 1] = s[i] ^ arr[i];\n    }\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int k = i + 1; k < n; ++k) {\n            if (s[i] == s[k + 1]) {\n                ans += k - i;\n            }\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。\n\n- 空间复杂度：$O(n)$。\n\n#### 方法三：哈希表（一重循环）\n\n对于下标 $k$，若下标 $i=i_1,i_2,\\cdots,i_m$ 时均满足 $S_i=S_{k+1}$，根据方法二，这些二元组 $(i_1,k),(i_2,k),\\cdots,(i_m,k)$ 对答案的贡献之和为\n\n$$\n(k-i_1)+(k-i_2)+\\cdots+(k-i_m)=m\\cdot k-(i_1+i_2+\\cdots+i_m)\n$$\n\n也就是说，当遍历下标 $k$ 时，我们需要知道所有满足 $S_i=S_{k+1}$ 的\n\n- 下标 $i$ 的出现次数 $m$\n- 下标 $i$ 之和\n\n这可以借助两个哈希表来做到，在遍历下标 $k$ 的同时，一个哈希表统计 $S_k$ 的出现次数，另一个哈希表统计值为 $S_k$ 的下标之和。\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int countTriplets(vector<int> &arr) {\n        int n = arr.size();\n        vector<int> s(n + 1);\n        for (int i = 0; i < n; ++i) {\n            s[i + 1] = s[i] ^ arr[i];\n        }\n        unordered_map<int, int> cnt, total;\n        int ans = 0;\n        for (int k = 0; k < n; ++k) {\n            if (cnt.count(s[k + 1])) {\n                ans += cnt[s[k + 1]] * k - total[s[k + 1]];\n            }\n            ++cnt[s[k]];\n            total[s[k]] += k;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int countTriplets(int[] arr) {\n        int n = arr.length;\n        int[] s = new int[n + 1];\n        for (int i = 0; i < n; ++i) {\n            s[i + 1] = s[i] ^ arr[i];\n        }\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        Map<Integer, Integer> total = new HashMap<Integer, Integer>();\n        int ans = 0;\n        for (int k = 0; k < n; ++k) {\n            if (cnt.containsKey(s[k + 1])) {\n                ans += cnt.get(s[k + 1]) * k - total.get(s[k + 1]);\n            }\n            cnt.put(s[k], cnt.getOrDefault(s[k], 0) + 1);\n            total.put(s[k], total.getOrDefault(s[k], 0) + k);\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public int CountTriplets(int[] arr) {\n        int n = arr.Length;\n        int[] s = new int[n + 1];\n        for (int i = 0; i < n; ++i) {\n            s[i + 1] = s[i] ^ arr[i];\n        }\n        Dictionary<int, int> cnt = new Dictionary<int, int>();\n        Dictionary<int, int> total = new Dictionary<int, int>();\n        int ans = 0;\n        for (int k = 0; k < n; ++k) {\n            if (cnt.ContainsKey(s[k + 1])) {\n                ans += cnt[s[k + 1]] * k - total[s[k + 1]];\n            }\n            if (!cnt.ContainsKey(s[k])) {\n                cnt.Add(s[k], 1);\n            } else {\n                ++cnt[s[k]];\n            }\n            if (!total.ContainsKey(s[k])) {\n                total.Add(s[k], k);\n            } else {\n                total[s[k]] += k;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol3-Golang]\nfunc countTriplets(arr []int) (ans int) {\n    n := len(arr)\n    s := make([]int, n+1)\n    for i, v := range arr {\n        s[i+1] = s[i] ^ v\n    }\n    cnt := map[int]int{}\n    total := map[int]int{}\n    for k := 0; k < n; k++ {\n        if m, has := cnt[s[k+1]]; has {\n            ans += m*k - total[s[k+1]]\n        }\n        cnt[s[k]]++\n        total[s[k]] += k\n    }\n    return\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        s = [0]\n        for val in arr:\n            s.append(s[-1] ^ val)\n        \n        cnt, total = Counter(), Counter()\n        ans = 0\n        for k in range(n):\n            if s[k + 1] in cnt:\n                ans += cnt[s[k + 1]] * k - total[s[k + 1]]\n            cnt[s[k]] += 1\n            total[s[k]] += k\n\n        return ans\n```\n\n```JavaScript [sol3-JavaScript]\nvar countTriplets = function(arr) {\n    const n = arr.length;\n    s = [0];\n    for (const num of arr) {\n        s.push(s[s.length - 1] ^ num);\n    }\n\n    const cnt = new Map(), total = new Map();\n    let ans = 0;\n    for (let k = 0; k < n; k++) {\n        if (cnt.has(s[k + 1])) {\n            ans += cnt.get(s[k + 1]) * k - total.get(s[k + 1]);\n        }\n        cnt.set(s[k], (cnt.get(s[k]) || 0) + 1);\n        total.set(s[k], (total.get(s[k]) || 0) + k);\n    }\n\n    return ans;\n};\n```\n\n```C [sol3-C]\nstruct HashTable {\n    int val, key;\n    UT_hash_handle hh;\n};\n\nbool count(struct HashTable* hashTable, int x) {\n    struct HashTable* tmp;\n    HASH_FIND_INT(hashTable, &x, tmp);\n    return tmp != NULL;\n}\n\nint getValue(struct HashTable* hashTable, int x) {\n    struct HashTable* tmp;\n    HASH_FIND_INT(hashTable, &x, tmp);\n    return tmp == NULL ? 0 : tmp->val;\n}\n\nvoid addValue(struct HashTable** hashTable, int x, int y) {\n    struct HashTable* tmp;\n    HASH_FIND_INT(*hashTable, &x, tmp);\n    if (tmp == NULL) {\n        tmp = malloc(sizeof(struct HashTable));\n        tmp->key = x;\n        tmp->val = y;\n        HASH_ADD_INT(*hashTable, key, tmp);\n    } else {\n        tmp->val += y;\n    }\n}\n\nint countTriplets(int* arr, int arrSize) {\n    int n = arrSize;\n    int s[n + 1];\n    s[0] = 0;\n    for (int i = 0; i < n; ++i) {\n        s[i + 1] = s[i] ^ arr[i];\n    }\n    struct HashTable *cnt = NULL, *total = NULL;\n    int ans = 0;\n    for (int k = 0; k < n; ++k) {\n        if (count(cnt, s[k + 1])) {\n            ans += getValue(cnt, s[k + 1]) * k - getValue(total, s[k + 1]);\n        }\n        addValue(&cnt, s[k], 1);\n        addValue(&total, s[k], k);\n    }\n    return ans;\n}\n```\n\n**优化**\n\n我们可以在计算异或前缀和的同时计算答案，从而做到仅遍历 $\\textit{arr}$ 一次就计算出答案。\n\n```C++ [sol4-C++]\nclass Solution {\npublic:\n    int countTriplets(vector<int> &arr) {\n        int n = arr.size();\n        unordered_map<int, int> cnt, total;\n        int ans = 0, s = 0;\n        for (int k = 0; k < n; ++k) {\n            int val = arr[k];\n            if (cnt.count(s ^ val)) {\n                ans += cnt[s ^ val] * k - total[s ^ val];\n            }\n            ++cnt[s];\n            total[s] += k;\n            s ^= val;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol4-Java]\nclass Solution {\n    public int countTriplets(int[] arr) {\n        int n = arr.length;\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        Map<Integer, Integer> total = new HashMap<Integer, Integer>();\n        int ans = 0, s = 0;\n        for (int k = 0; k < n; ++k) {\n            int val = arr[k];\n            if (cnt.containsKey(s ^ val)) {\n                ans += cnt.get(s ^ val) * k - total.get(s ^ val);\n            }\n            cnt.put(s, cnt.getOrDefault(s, 0) + 1);\n            total.put(s, total.getOrDefault(s, 0) + k);\n            s ^= val;\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol4-C#]\npublic class Solution {\n    public int CountTriplets(int[] arr) {\n        int n = arr.Length;\n        Dictionary<int, int> cnt = new Dictionary<int, int>();\n        Dictionary<int, int> total = new Dictionary<int, int>();\n        int ans = 0, s = 0;\n        for (int k = 0; k < n; ++k) {\n            int val = arr[k];\n            if (cnt.ContainsKey(s ^ val)) {\n                ans += cnt[s ^ val] * k - total[s ^ val];\n            }\n            if (!cnt.ContainsKey(s)) {\n                cnt.Add(s, 1);\n            } else {\n                ++cnt[s];\n            }\n            if (!total.ContainsKey(s)) {\n                total.Add(s, k);\n            } else {\n                total[s] += k;\n            }\n            s ^= val;\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol4-Golang]\nfunc countTriplets(arr []int) (ans int) {\n    cnt := map[int]int{}\n    total := map[int]int{}\n    s := 0\n    for k, val := range arr {\n        if m, has := cnt[s^val]; has {\n            ans += m*k - total[s^val]\n        }\n        cnt[s]++\n        total[s] += k\n        s ^= val\n    }\n    return\n}\n```\n\n```Python [sol4-Python3]\nclass Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        cnt, total = Counter(), Counter()\n        ans = s = 0\n\n        for k, val in enumerate(arr):\n            if (t := s ^ val) in cnt:\n                ans += cnt[t] * k - total[t]\n            cnt[s] += 1\n            total[s] += k\n            s = t\n\n        return ans\n```\n\n```JavaScript [sol4-JavaScript]\nvar countTriplets = function(arr) {\n    const cnt = new Map(), total = new Map();\n    let ans = 0, s = 0;\n\n    for (const [k, val] of arr.entries()) {\n        const t = s ^ val;\n        if (cnt.has(t)) {\n            ans += cnt.get(t) * k - total.get(t);\n        }\n        cnt.set(s, (cnt.get(s) || 0) + 1);\n        total.set(s, (total.get(s) || 0) + k);\n        s = t;\n    }\n    return ans;\n};\n```\n\n```C [sol4-C]\nstruct HashTable {\n    int val, key;\n    UT_hash_handle hh;\n};\n\nbool count(struct HashTable* hashTable, int x) {\n    struct HashTable* tmp;\n    HASH_FIND_INT(hashTable, &x, tmp);\n    return tmp != NULL;\n}\n\nint getValue(struct HashTable* hashTable, int x) {\n    struct HashTable* tmp;\n    HASH_FIND_INT(hashTable, &x, tmp);\n    return tmp == NULL ? 0 : tmp->val;\n}\n\nvoid addValue(struct HashTable** hashTable, int x, int y) {\n    struct HashTable* tmp;\n    HASH_FIND_INT(*hashTable, &x, tmp);\n    if (tmp == NULL) {\n        tmp = malloc(sizeof(struct HashTable));\n        tmp->key = x;\n        tmp->val = y;\n        HASH_ADD_INT(*hashTable, key, tmp);\n    } else {\n        tmp->val += y;\n    }\n}\n\nint countTriplets(int* arr, int arrSize) {\n    int n = arrSize;\n    struct HashTable *cnt = NULL, *total = NULL;\n    int ans = 0, s = 0;\n    for (int k = 0; k < n; ++k) {\n        int val = arr[k];\n        if (count(cnt, s ^ val)) {\n            ans += getValue(cnt, s ^ val) * k - getValue(total, s ^ val);\n        }\n        addValue(&cnt, s, 1);\n        addValue(&total, s, k);\n        s ^= val;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。\n\n- 空间复杂度：$O(n)$。我们需要使用 $O(n)$ 的空间存储两个哈希表。\n\n---\n## ✨扣友帮帮团 - 互动答疑\n\n[![讨论.jpg](https://pic.leetcode-cn.com/1621178600-MKHFrl-%E8%AE%A8%E8%AE%BA.jpg){:width=260px}](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/)\n\n\n即日起 - 5 月 30 日，点击 [这里](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/) 前往「[扣友帮帮团](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/)」活动页，把你遇到的问题大胆地提出来，让扣友为你解答～\n\n### 🎁 奖励规则\n被采纳数量排名 1～3 名：「力扣极客套装」 *1 并将获得「力扣神秘应援团」内测资格\n被采纳数量排名 4～10 名：「力扣鼠标垫」 *1 并将获得「力扣神秘应援团」内测资格\n「诲人不倦」：活动期间「解惑者」只要有 1 个回答被采纳，即可获得 20 LeetCoins 奖励！\n「求知若渴」：活动期间「求知者」在活动页发起一次符合要求的疑问帖并至少采纳一次「解惑者」的回答，即可获得 20 LeetCoins 奖励！\n\n活动详情猛戳链接了解更多：[活动｜你有 BUG 我来帮 - 力扣互动答疑季](https://leetcode-cn.com/circle/discuss/xtliW6/)"
}