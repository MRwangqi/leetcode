{
	"titleSlug": "sliding-window-median",
	"slug": "feng-xian-dui-chong-shuang-dui-dui-ding-hq1dt",
	"url": "https://leetcode-cn.com/problems/sliding-window-median/solution/feng-xian-dui-chong-shuang-dui-dui-ding-hq1dt/",
	"content": "### 解题思路\n本题考查动态维护数组的中位数。\n我们思考中位数的性质：如果一个数是中位数，那么在这个数组中，大于中位数的数目和小于中位数的数目，要么相等，要么就相差一。\n因此，我们采用对顶堆的做法，控制所有小于等于中位数的数字放到一个堆中，控制所有比中位数大的数字放到另一个堆中，并且保证两个堆的数目相差小于等于1。这样就可以保证每一次查询中位数的时候，答案一定出于两个堆的堆顶元素之一。\n因此选定数据结构：优先队列。因为优先队列采用的是堆结构，正好符合我们的需求。我们将所有小于等于中位数的元素放到small堆中（是一个大顶堆），将所有大于中位数的元素放到big堆中（是一个小顶堆）。\n\n初始化方法如下：\n- 将前K个元素全部插入到small堆中。从small堆中弹出K/2个元素到big堆中。\n- 这样，当K为奇数，则small堆元素比big堆元素多1；当K为偶数，两个堆元素相等。\n\n取中位数的操作：\n+ 我们的插入操作可以保证每次优先插入到small堆中，因此small堆中的元素个数大于等于big堆的元素个数。\n+ 当K为奇数时候，中位数是元素数量较多的small堆 堆顶元素。\n+ 当K为偶数时候，中位数是small堆和big堆的堆顶元素平均值。\n\n窗口滑动过程中的操作：\n+ 假定在上一次滑动之后，已经有small堆和big堆元素数目相差小于等于1.\n+ 设置当前的滑动时，balance = 0。balance表示因本次窗口滑动导致small堆元素数目与big堆元素个数差值的增量。\n+ 删除窗口左侧的元素。\n+ + 由于堆无法直接删除掉某个指定元素，先欠下这个账，等某次元素出现在堆顶的时候，再删除他。mp记录这个元素欠账的个数。mp[left]++;\n+ + 虽然没有真的在堆数据结构中删除窗口最左侧的元素，但是在我们的心中已经删掉他了。堆两侧的平衡性发生了变化。如果left<=small.top()，就说明删掉的元素在small堆中，我们让balance--;否则，就说明删掉的元素在big堆中，让balance++;\n+ 添加进来窗口右侧的元素。如果right<=small.top()，就应该让这个元素放到samll堆里面，balance++；否则放到big堆里，balance--。\n+ 经过上面的操作，balance要么为0，要么为2，要么为-2。我们需要经过调整使得balance为0。\n+ + 如果balance为0，在这次窗口滑动之前已经是平衡的，这次调整也没有让两堆的数目变化，所以不用调整两边的堆。\n+ + 如果balance为2，就说明small堆的元素比big堆的元素多了两个。从small堆减少一个，big堆里增加一个，就可以让两边相等。big.push(small.top());small.pop();\n+ + 如果balance为-2，就说明big堆的元素比small堆的元素多了两个。从big堆减少一个，small堆里增加一个，就可以让两边相等。small.push(big.top());big.pop();\n+ 调整完了，现在该欠债还钱了。不能让那些早该删除的元素涉及到中位数的运算。\n+ + 分别检查两边的堆顶元素，如果堆顶元素欠着债，则弹出堆顶元素，直到堆顶元素没有欠债为止。有朋友问了：堆顶下面也有欠债的怎么办呢？我们之前说过，取中位数的时候只与堆顶元素有关，至于那些堆顶下面欠着债的，欠着就欠着吧，等他们到堆顶的时候再弹出去就好了。\n+ 最后，添加中位数即可。\n\n2021/2/3 20:50更新：对顶堆长这样：\n![image.png](https://pic.leetcode-cn.com/1612356555-LMizuf-image.png)\n\n![image.png](https://pic.leetcode-cn.com/1612326126-yKlcMq-image.png)\n\n\n### 代码\n\n```cpp\nclass Solution {\npublic:\n    priority_queue<int> small;\n    priority_queue<int, vector<int>, greater<int> > big;\n    unordered_map<int, int> mp;\n    double get(int& k){\n        if(k%2) return small.top();\n        else return ((long long)small.top()+big.top())*0.5;\n    }\n    vector<double> medianSlidingWindow(vector<int>& nums, int k) {\n        for(int i = 0; i < k; i++){small.push(nums[i]);};\n        for(int i = 0; i < k / 2; i++){big.push(small.top()); small.pop();}\n        vector<double> ans{get(k)};\n        for(int i = k; i < nums.size(); i++){\n            int balance = 0;\n            int l = nums[i-k];\n            mp[l]++;\n            if(!small.empty() && l<=small.top()){balance--;}\n            else {balance++;}\n            if(!small.empty() && nums[i] <= small.top()){\n                small.push(nums[i]);\n                balance++;\n            }\n            else{\n                big.push(nums[i]);\n                balance--;\n            }\n            if(balance>0){\n                big.push(small.top());\n                small.pop();\n            }\n            if(balance<0){\n                small.push(big.top());\n                big.pop();\n            }\n            while(!small.empty() && mp[small.top()]>0){\n                mp[small.top()]--;\n                small.pop();\n            }\n            while(!big.empty() && mp[big.top()]>0){\n                mp[big.top()]--;\n                big.pop();\n            }\n            ans.push_back(get(k));\n            \n        }\n        return ans;\n    }\n};\n```"
}