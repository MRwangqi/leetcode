{
	"titleSlug": "richest-customer-wealth",
	"slug": "zui-fu-you-ke-hu-de-zi-chan-zong-liang-b-8p06",
	"url": "https://leetcode-cn.com/problems/richest-customer-wealth/solution/zui-fu-you-ke-hu-de-zi-chan-zong-liang-b-8p06/",
	"content": "#### 方法一：遍历\n\n**思路与算法**\n\n分别计算每位客户在各家银行托管的资产数量之和，返回这些资产总量的最大值。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def maximumWealth(self, accounts: List[List[int]]) -> int:\n        return max(map(sum, accounts))\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maximumWealth(vector<vector<int>>& accounts) {\n        int maxWealth = INT_MIN;\n        for (auto &account : accounts) {\n            maxWealth = max(maxWealth, accumulate(account.begin(), account.end(), 0));\n        }\n        return maxWealth;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maximumWealth(int[][] accounts) {\n        int maxWealth = Integer.MIN_VALUE;\n        for (int[] account : accounts) {\n            maxWealth = Math.max(maxWealth, Arrays.stream(account).sum());\n        }\n        return maxWealth;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MaximumWealth(int[][] accounts) {\n        int maxWealth = int.MinValue;\n        foreach (int[] account in accounts) {\n            maxWealth = Math.Max(maxWealth, account.Sum());\n        }\n        return maxWealth;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc maximumWealth(accounts [][]int) (ans int) {\n    for _, account := range accounts {\n        sum := 0\n        for _, val := range account {\n            sum += val\n        }\n        if sum > ans {\n            ans = sum\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar maximumWealth = function(accounts) {\n    let maxWealth = -Number.MAX_VALUE;\n    for (const account of accounts) {\n        maxWealth = Math.max(maxWealth, account.reduce((a, b) => a + b));\n    }\n    return maxWealth;\n};\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n\nint maximumWealth(int** accounts, int accountsSize, int* accountsColSize){\n    int maxWealth = INT_MIN;\n    for (int i = 0; i < accountsSize; i++) {\n        int sum = 0;\n        for (int j = 0; j < accountsColSize[0]; j++) {\n            sum += accounts[i][j];\n        }\n        maxWealth = MAX(maxWealth, sum);\n    }\n    return maxWealth;\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是网格 $\\textit{accounts}$ 的行数和列数。\n\n+ 空间复杂度：$O(1)$。"
}