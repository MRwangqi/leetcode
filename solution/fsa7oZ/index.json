{
	"titleSlug": "fsa7oZ",
	"slug": "yi-by-jsjohnsonjs-002m",
	"url": "https://leetcode-cn.com/problems/fsa7oZ/solution/yi-by-jsjohnsonjs-002m/",
	"content": "### 解题思路\n咦，我会CV耶\n\n### 代码\n\n```python3\nclass Solution:\n    def gobang(self, pieces: List[List[int]]) -> str:\n        D = [(1, 0), (0, 1), (1, 1), (-1, 1)]\n        board = {(x, y) : c for x, y, c in pieces}\n        def findLines(color):\n            lines = DefaultDict(list)\n            for x, y, c in pieces:\n                if c != color : continue\n                for i, (dx, dy) in enumerate(D):\n                    for k in range(3):\n                        nx, ny = x - dx * k, y - dy * k\n                        head = (nx, ny, i)\n                        if head in lines : continue\n\n                        for _ in range(5):\n                            c = board.get((nx, ny), -1)\n                            if c != color :\n                                if c >= 0 or len(lines[head]) >= 2:\n                                    lines[head].clear()\n                                    break\n                                lines[head].append((nx, ny))\n                            nx, ny = nx + dx, ny + dy\n            \n            res = [[] for _ in range(3)]\n            for v in lines.values():\n                if len(v) : res[len(v)].append(v)\n            return res\n\n        black = findLines(0)\n        if len(black[1]) > 0 : return \"Black\"\n\n        white = findLines(1)\n        positions = set(line[0] for line in white[1])\n        if len(positions) > 1 : return \"White\"\n\n        if len(positions) == 1 :\n            x, y = positions.pop()\n            pieces.append([x, y, 0])\n            board[(x, y)] = 0\n            black = findLines(0)\n\n            positions = set(line[0] for line in black[1])\n            return \"Black\" if len(positions) > 1 else \"None\"\n\n        pairs = set((pair[0], pair[1]) for pair in black[2])\n        positions = set()\n        for p1, p2 in pairs :\n            if p1 in positions or p2 in positions : return \"Black\"\n            positions.add(p1)\n            positions.add(p2)\n        return \"None\"\n```"
}