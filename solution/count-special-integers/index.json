{
	"titleSlug": "count-special-integers",
	"slug": "shu-wei-dp-mo-ban-by-endlesscheng-xtgx",
	"url": "https://leetcode-cn.com/problems/count-special-integers/solution/shu-wei-dp-mo-ban-by-endlesscheng-xtgx/",
	"content": "更新：[周赛精讲](https://www.bilibili.com/video/BV1rS4y1s721) 出炉啦，欢迎一键三连~\r\n本节讲了数位 DP 的通用模板，以及如何使用该模板秒杀相关困难题目。\r\n讲完题目后还讲了一些上分的训练技巧。\r\n\r\n---\r\n\r\n将 $n$ 转换成字符串 $s$，定义 $f(i,\\textit{mask}, \\textit{isLimit},\\textit{isNum})$ 表示构造从左往右第 $i$ 位及其之后数位的合法方案数，其余参数的含义为：\r\n\r\n- $\\textit{mask}$ 表示前面选过的数字集合，换句话说，第 $i$ 位要选的数字不能在 $\\textit{mask}$ 中。\r\n- $\\textit{isLimit}$ 表示当前是否受到了 $n$ 的约束。若为真，则第 $i$ 位填入的数字至多为 $s[i]$，否则可以是 $9$。如果在受到约束的情况下填了 $s[i]$，那么后续填入的数字仍会受到 $n$ 的约束。\r\n- $\\textit{isNum}$ 表示 $i$ 前面的数位是否填了数字。若为假，则当前位可以跳过（不填数字），或者要填入的数字至少为 $1$；若为真，则必须填数字，且要填入的数字可以从 $0$ 开始。\r\n\r\n后面两个参数可适用于其它数位 DP 题目。\r\n\r\n枚举要填入的数字，具体实现逻辑见代码。\r\n\r\n下面代码中 Java/C++/Go 只需要记忆化 $(i,\\textit{mask})$ 这个状态，因为：\r\n\r\n1. 对于一个固定的 $(i,\\textit{mask})$，这个状态受到 $\\textit{isLimit}$ 或 $\\textit{isNum}$ 的约束在整个递归过程中至多会出现一次，没必要记忆化。\r\n2. 另外，如果只记忆化 $(i,\\textit{mask})$，$\\textit{dp}$ 数组的含义就变成**在不受到约束时**的合法方案数，所以要在 `!isLimit && isNum` 成立时才去记忆化。\r\n\r\n#### 附：力扣上的数位 DP 题目\r\n\r\n- [233. 数字 1 的个数](https://leetcode.cn/problems/number-of-digit-one/)（[题解](https://leetcode.cn/problems/number-of-digit-one/solution/by-endlesscheng-h9ua/)）\r\n- [面试题 17.06. 2出现的次数](https://leetcode.cn/problems/number-of-2s-in-range-lcci/)（[题解](https://leetcode.cn/problems/number-of-2s-in-range-lcci/solution/by-endlesscheng-x4mf/)）\r\n- [600. 不含连续1的非负整数](https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/)（[题解](https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/solution/by-endlesscheng-1egu/)）\r\n- [902. 最大为 N 的数字组合](https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/)（[周赛精讲](https://www.bilibili.com/video/BV1rS4y1s721) 中讲了）\r\n- [1012. 至少有 1 位重复的数字](https://leetcode.cn/problems/numbers-with-repeated-digits/)\r\n- [1067. 范围内的数字计数](https://leetcode.cn/problems/digit-count-in-range/)\r\n- [1397. 找到所有好字符串](https://leetcode.cn/problems/find-all-good-strings/)（有难度，需要结合一个知名字符串算法）\r\n\r\n更多的题目见我的算法竞赛模板库中的 [dp.go](https://github.com/EndlessCheng/codeforces-go/blob/master/copypasta/dp.go#L1731)（搜索 `数位`）。\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def countSpecialNumbers(self, n: int) -> int:\r\n        s = str(n)\r\n        @cache\r\n        def f(i: int, mask: int, is_limit: bool, is_num: bool) -> int:\r\n            if i == len(s):\r\n                return int(is_num)\r\n            res = 0\r\n            if not is_num:  # 可以跳过当前数位\r\n                res = f(i + 1, mask, False, False)\r\n            up = int(s[i]) if is_limit else 9\r\n            for d in range(0 if is_num else 1, up + 1):  # 枚举要填入的数字 d\r\n                if mask >> d & 1 == 0:  # d 不在 mask 中\r\n                    res += f(i + 1, mask | (1 << d), is_limit and d == up, True)\r\n            return res\r\n        return f(0, 0, True, False)\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    char s[];\r\n    int dp[][];\r\n\r\n    public int countSpecialNumbers(int n) {\r\n        s = Integer.toString(n).toCharArray();\r\n        var m = s.length;\r\n        dp = new int[m][1 << 10];\r\n        for (var i = 0; i < m; i++) Arrays.fill(dp[i], -1);\r\n        return f(0, 0, true, false);\r\n    }\r\n\r\n    int f(int i, int mask, boolean isLimit, boolean isNum) {\r\n        if (i == s.length) return isNum ? 1 : 0;\r\n        if (!isLimit && isNum && dp[i][mask] >= 0) return dp[i][mask];\r\n        var res = 0;\r\n        if (!isNum) res = f(i + 1, mask, false, false); // 可以跳过当前数位\r\n        for (int d = isNum ? 0 : 1, up = isLimit ? s[i] - '0' : 9; d <= up; ++d) // 枚举要填入的数字 d\r\n            if ((mask >> d & 1) == 0) // d 不在 mask 中\r\n                res += f(i + 1, mask | (1 << d), isLimit && d == up, true);\r\n        if (!isLimit && isNum) dp[i][mask] = res;\r\n        return res;\r\n    }\r\n}\r\n```\r\n\r\n```cpp [sol1-C++]\r\nclass Solution {\r\npublic:\r\n    int countSpecialNumbers(int n) {\r\n        auto s = to_string(n);\r\n        int m = s.length(), dp[m][1 << 10];\r\n        memset(dp, -1, sizeof(dp));\r\n        function<int(int, int, bool, bool)> f = [&](int i, int mask, bool is_limit, bool is_num) -> int {\r\n            if (i == m) return is_num;\r\n            if (!is_limit && is_num && dp[i][mask] >= 0) return dp[i][mask];\r\n            int res = 0;\r\n            if (!is_num) res = f(i + 1, mask, false, false); // 可以跳过当前数位\r\n            for (int d = 1 - is_num, up = is_limit ? s[i] - '0' : 9; d <= up; ++d) // 枚举要填入的数字 d\r\n                if ((mask >> d & 1) == 0) // d 不在 mask 中\r\n                    res += f(i + 1, mask | (1 << d), is_limit && d == up, true);\r\n            if (!is_limit && is_num) dp[i][mask] = res;\r\n            return res;\r\n        };\r\n        return f(0, 0, true, false);\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc countSpecialNumbers(n int) int {\r\n\ts := strconv.Itoa(n)\r\n\tm := len(s)\r\n\tdp := make([][1 << 10]int, m)\r\n\tfor i := range dp {\r\n\t\tfor j := range dp[i] {\r\n\t\t\tdp[i][j] = -1\r\n\t\t}\r\n\t}\r\n\tvar f func(int, int, bool, bool) int\r\n\tf = func(i, mask int, isLimit, isNum bool) (res int) {\r\n\t\tif i == m {\r\n\t\t\tif isNum {\r\n\t\t\t\treturn 1\r\n\t\t\t}\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif !isLimit && isNum {\r\n\t\t\tdv := &dp[i][mask]\r\n\t\t\tif *dv >= 0 {\r\n\t\t\t\treturn *dv\r\n\t\t\t}\r\n\t\t\tdefer func() { *dv = res }()\r\n\t\t}\r\n\t\tif !isNum { // 可以跳过当前数位\r\n\t\t\tres += f(i+1, mask, false, false)\r\n\t\t}\r\n\t\td := 1\r\n\t\tif isNum {\r\n\t\t\td = 0\r\n\t\t}\r\n\t\tup := 9\r\n\t\tif isLimit {\r\n\t\t\tup = int(s[i] - '0')\r\n\t\t}\r\n\t\tfor ; d <= up; d++ { // 枚举要填入的数字 d\r\n\t\t\tif mask>>d&1 == 0 { // d 不在 mask 中\r\n\t\t\t\tres += f(i+1, mask|1<<d, isLimit && d == up, true)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\treturn f(0, 0, true, false)\r\n}\r\n```\r\n"
}