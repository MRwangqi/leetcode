{
	"titleSlug": "max-difference-you-can-get-from-changing-an-integer",
	"slug": "gai-bian-yi-ge-zheng-shu-neng-de-dao-de-0byhw",
	"url": "https://leetcode-cn.com/problems/max-difference-you-can-get-from-changing-an-integer/solution/gai-bian-yi-ge-zheng-shu-neng-de-dao-de-0byhw/",
	"content": "#### 分析\n\n要想使得 $a$ 和 $b$ 的差值尽可能大，我们应该找到从 $\\textit{num}$ 可以得到的最大以及最小的整数分别作为 $a$ 和 $b$。\n\n#### 方法一：枚举\n\n根据题目的描述，我们可以任意选择两个数字 $x$ 和 $y$，并将 $\\textit{num}$ 中的所有 $x$ 替换成 $y$。由于 $x$ 和 $y$ 的取值范围均为 $[0, 9]$，那么我们最多只有 $10 \\times 10 = 100$ 种不同的替换方法。\n\n因此我们可以使用两重循环枚举所有的替换方法。在得到的所有新整数中，找出最大以及最小的赋予 $a$ 和 $b$。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxDiff(int num) {\n        auto change = [&](int x, int y) {\n            string num_s = to_string(num);\n            for (char& digit: num_s) {\n                if (digit - '0' == x) {\n                    digit = '0' + y;\n                }\n            }\n            return num_s;\n        };\n\n        int min_num = num;\n        int max_num = num;\n        for (int x = 0; x < 10; ++x) {\n            for (int y = 0; y < 10; ++y) {\n                string res = change(x, y);\n                // 判断是否有前导零\n                if (res[0] != '0') {\n                    int res_i = stoi(res);\n                    min_num = min(min_num, res_i);\n                    max_num = max(max_num, res_i);\n                }\n            }\n        }\n\n        return max_num - min_num;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxDiff(self, num: int) -> int:\n        def change(x, y):\n            return str(num).replace(str(x), str(y))\n        \n        min_num = max_num = num\n        for x in range(10):\n            for y in range(10):\n                res = change(x, y)\n                # 判断是否有前导零\n                if res[0] != \"0\":\n                    res_i = int(res)\n                    min_num = min(min_num, res_i)\n                    max_num = max(max_num, res_i)\n        \n        return max_num - min_num\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxDiff(int num) {\n        int min_num = num;\n        int max_num = num;\n        for (int x = 0; x < 10; ++x) {\n            for (int y = 0; y < 10; ++y) {\n                String res = change(num, x, y);\n                // 判断是否有前导零\n                if (res.charAt(0) != '0') {\n                    int res_i = Integer.parseInt(res);\n                    min_num = Math.min(min_num, res_i);\n                    max_num = Math.max(max_num, res_i);\n                }\n            }\n        }\n\n        return max_num - min_num;\n    }\n\n    public String change(int num, int x, int y) {\n        StringBuffer num_s = new StringBuffer(String.valueOf(num));\n        int length = num_s.length();\n        for (int i = 0; i < length; i++) {\n            char digit = num_s.charAt(i);\n            if (digit - '0' == x) {\n                num_s.setCharAt(i, (char) ('0' + y));\n            }\n        }\n        return num_s.toString();\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(d^2 \\log (\\textit{num}))$，其中 $d = 10$，表示 $\\textit{num}$ 是一个「十」进制数。我们使用两重循环枚举所有的替换方法，时间复杂度为 $O(d^2)$。对于每一种替换方法，我们将 $\\textit{num}$ 转换成字符串后并进行替换操作，需要的时间与 $\\textit{num}$ 的长度成正比，记为 $O(\\log (\\textit{num}))$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：贪心算法\n\n**思路**\n\n如果我们想要得到最大的整数，最好的办法应该是找到一个高位将它修改为 $9$。同理，如果我们想要得到最小的整数，最好的办法应该是找到一个高位将它修改为 $0$。\n\n**找到最大的数**\n\n要想得到最大的整数，我们从高到低依次枚举 $\\textit{num}$ 中的每一个位置。如果当前枚举到的位置的数字不为 $9$，那么我们该数字全部替换成 $9$，即可得到最大的整数。\n\n**找到最小的数**\n\n要想得到最小的整数，我们从高到低依次枚举 $\\textit{num}$ 中的每一个位置。如果当前枚举到的位置的数字不为 $0$，那么我们将该数字全部替换成 $0$，即可得到最小的整数。\n\n等等，如果我们将数字替换成 $0$，是不是可能会出现「前导零」？举个例子，如果 $\\textit{num} = 123$，我们会将最高位的 $1$ 替换成 $0$，得到 $023$，这样就出现了前导零。因此我们必须要考虑前导零的问题：\n\n- 如果我们枚举的是最高位，那么我们只能将其替换成 $1$，否则就会有前导零了；\n\n- 如果我们枚举的是其它的数位：\n\n    - 如果当前的数字与最高位的数字不相等，那么我们就可以将其替换成 $0$；\n\n    - 如果当前的数字与最高位的数字相等，那么我们直接跳过这个数位，这是因为当我们在枚举最高位时，我们已经处理过这个**数字**了。既然在枚举最高位遇到相同的数字时没有选择替换，那么说明这个数字一定就是 $1$，由于前导零的限制我们也不能将其替换成 $0$，因此就可以直接跳过了。\n\n至此，我们通过贪心找高位的方法得到了最大以及最小的数，这样也就得到了最终的答案。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxDiff(int num) {\n        auto replace = [](string& s, char x, char y) {\n            for (char& digit: s) {\n                if (digit == x) {\n                    digit = y;\n                }\n            }\n        };\n\n        string min_num = to_string(num);\n        string max_num = to_string(num);\n\n        // 找到一个高位替换成 9\n        for (char digit: max_num) {\n            if (digit != '9') {\n                replace(max_num, digit, '9');\n                break;\n            }\n        }\n\n        // 将最高位替换成 1\n        // 或者找到一个与最高位不相等的高位替换成 0\n        for (int i = 0; i < min_num.size(); ++i) {\n            char digit = min_num[i];\n            if (i == 0) {\n                if (digit != '1') {\n                    replace(min_num, digit, '1');\n                    break;\n                }\n            }\n            else {\n                if (digit != '0' && digit != min_num[0]) {\n                    replace(min_num, digit, '0');\n                    break;\n                }\n            }\n        }\n\n        return stoi(max_num) - stoi(min_num);\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def maxDiff(self, num: int) -> int:\n        min_num, max_num = str(num), str(num)\n\n        # 找到一个高位替换成 9\n        for digit in max_num:\n            if digit != \"9\":\n                max_num = max_num.replace(digit, \"9\")\n                break\n\n        # 将最高位替换成 1\n        # 或者找到一个与最高位不相等的高位替换成 0\n        for i, digit in enumerate(min_num):\n            if i == 0:\n                if digit != \"1\":\n                    min_num = min_num.replace(digit, \"1\")\n                    break\n            else:\n                if digit != \"0\" and digit != min_num[0]:\n                    min_num = min_num.replace(digit, \"0\")\n                    break\n\n        return int(max_num) - int(min_num)\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int maxDiff(int num) {\n        StringBuffer min_num = new StringBuffer(String.valueOf(num));\n        StringBuffer max_num = new StringBuffer(String.valueOf(num));\n\n        // 找到一个高位替换成 9\n        int max_length = max_num.length();\n        for (int i = 0; i < max_length; ++i) {\n            char digit = max_num.charAt(i);\n            if (digit != '9') {\n                replace(max_num, digit, '9');\n                break;\n            }\n        }\n\n        // 将最高位替换成 1\n        // 或者找到一个与最高位不相等的高位替换成 0\n        int min_length = min_num.length();\n        for (int i = 0; i < min_length; ++i) {\n            char digit = min_num.charAt(i);\n            if (i == 0) {\n                if (digit != '1') {\n                    replace(min_num, digit, '1');\n                    break;\n                }\n            }\n            else {\n                if (digit != '0' && digit != min_num.charAt(0)) {\n                    replace(min_num, digit, '0');\n                    break;\n                }\n            }\n        }\n\n        return Integer.parseInt(max_num.toString()) - Integer.parseInt(min_num.toString());\n    }\n\n    public void replace(StringBuffer s, char x, char y) {\n        int length = s.length();\n        for (int i = 0; i < length; ++i) {\n            if (s.charAt(i) == x) {\n                s.setCharAt(i, y);\n            }\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log (\\textit{num}))$，我们最多只需要枚举 $\\textit{num}$ 的每个数位一次。\n\n- 空间复杂度：$O(1)$。"
}