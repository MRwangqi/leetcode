{
	"titleSlug": "single-threaded-cpu",
	"slug": "single-threaded-cpu-by-leetcode-solution-suki",
	"url": "https://leetcode-cn.com/problems/single-threaded-cpu/solution/single-threaded-cpu-by-leetcode-solution-suki/",
	"content": "#### 方法一：排序 + 优先队列\n\n**提示 $1$**\n\n我们需要两个数据结构来实现题目描述中的 CPU 操作。\n\n- 第一个数据结构负责按照时间顺序将任务分配给 CPU；\n- 第二个数据结构负责帮助 CPU 在所有任务中选择处理时间最小的那个执行。\n\n你能想出这两个数据结构分别是什么吗？\n\n**思路与算法**\n\n第一个数据结构即为数组。我们将数组 $\\textit{task}$ 中的所有任务按照 $\\textit{enqueueTime}_i$ 升序排序即可。\n\n> 需要注意的是，在排序完成之后，我们就会丢失任务的编号信息。一种可行的解决方案是，我们使用一个长度为 $n$ 的数组存储编号，并直接对编号进行自定义排序，排序的标准即为 $\\textit{enqueueTime}_i$。\n\n第二个数据结构即为优先队列（小根堆）。我们将所有分配给 CPU 的任务放入优先队列中，每次取出处理时间 $\\textit{processingTime}_i$ 最小的任务执行。\n\n**细节**\n\n为了使得上面的两个数据结构能够帮助我们解决本题，我们可以维护一个时间戳变量 $\\textit{timestamp}$，表示当前的时间，它的初始值为 $0$。\n\n我们需要让 CPU 执行所有的 $n$ 个任务，在执行第 $i$ 个任务前：\n\n- 如果 CPU 没有可以执行的任务（即优先队列为空），我们将时间戳直接「快进」到数组中下一个还没有分配给 CPU 的那个任务的 $\\textit{enqueueTime}_i$；\n\n- 在这之后，我们将所有 $\\textit{enqueueTime}_i \\leq \\textit{timestamp}$ 的任务放入优先队列中。我们可以使用一个指针在数组上从前往后进行遍历，保证每个任务只会被加入优先队列恰好一次；\n\n- 最终我们就可以在优先队列中挑选 $\\textit{processingTime}_i$ 最小的那个任务让 CPU 来执行，并且我们需要将 $\\textit{timestamp}$ 增加 $\\textit{processingTime}_i$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    using PII = pair<int, int>;\n    using LL = long long;\n\npublic:\n    vector<int> getOrder(vector<vector<int>>& tasks) {\n        int n = tasks.size();\n        vector<int> indices(n);\n        iota(indices.begin(), indices.end(), 0);\n        sort(indices.begin(), indices.end(), [&](int i, int j) {\n            return tasks[i][0] < tasks[j][0];\n        });\n\n        vector<int> ans;\n        // 优先队列\n        priority_queue<PII, vector<PII>, greater<PII>> q;\n        // 时间戳\n        LL timestamp = 0;\n        // 数组上遍历的指针\n        int ptr = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            // 如果没有可以执行的任务，直接快进\n            if (q.empty()) {\n                timestamp = max(timestamp, (LL)tasks[indices[ptr]][0]);\n            }\n            // 将所有小于等于时间戳的任务放入优先队列\n            while (ptr < n && tasks[indices[ptr]][0] <= timestamp) {\n                q.emplace(tasks[indices[ptr]][1], indices[ptr]);\n                ++ptr;\n            }\n            // 选择处理时间最小的任务\n            auto&& [process, index] = q.top();\n            timestamp += process;\n            ans.push_back(index);\n            q.pop();\n        }\n        \n        return ans;\n    }\n};\n\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n        n = len(tasks)\n        indices = list(range(n))\n        indices.sort(key=lambda x: tasks[x][0])\n\n        ans = list()\n        # 优先队列\n        q = list()\n        # 时间戳\n        timestamp = 0\n        # 数组上遍历的指针\n        ptr = 0\n        \n        for i in range(n):\n            # 如果没有可以执行的任务，直接快进\n            if not q:\n                timestamp = max(timestamp, tasks[indices[ptr]][0])\n            # 将所有小于等于时间戳的任务放入优先队列\n            while ptr < n and tasks[indices[ptr]][0] <= timestamp:\n                heapq.heappush(q, (tasks[indices[ptr]][1], indices[ptr]))\n                ptr += 1\n            # 选择处理时间最小的任务\n            process, index = heapq.heappop(q)\n            timestamp += process\n            ans.append(index)\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$。排序的时间复杂度为 $O(n \\log n)$，优先队列单次操作的时间复杂度为 $O(\\log n)$，操作的次数为 $O(n)$。\n\n- 空间复杂度：$O(n)$，即为存储编号的数组以及优先队列需要使用的空间。"
}