{
	"titleSlug": "M99OJA",
	"slug": "fen-ge-hui-wen-zi-zi-fu-chuan-by-leetcod-0jtr",
	"url": "https://leetcode-cn.com/problems/M99OJA/solution/fen-ge-hui-wen-zi-zi-fu-chuan-by-leetcod-0jtr/",
	"content": "#### 方法一：回溯 + 动态规划预处理\n\n**思路与算法**\n\n由于需要求出字符串 $s$ 的所有分割方案，因此我们考虑使用搜索 + 回溯的方法枚举所有可能的分割方法并进行判断。\n\n假设我们当前搜索到字符串的第 $i$ 个字符，且 $s[0..i-1]$ 位置的所有字符已经被分割成若干个回文串，并且分割结果被放入了答案数组 $\\textit{ans}$ 中，那么我们就需要枚举下一个回文串的右边界 $j$，使得 $s[i..j]$ 是一个回文串。\n\n因此，我们可以从 $i$ 开始，从小到大依次枚举 $j$。对于当前枚举的 $j$ 值，我们使用双指针的方法判断 $s[i..j]$ 是否为回文串：如果 $s[i..j]$ 是回文串，那么就将其加入答案数组 $\\textit{ans}$ 中，并以 $j+1$ 作为新的 $i$ 进行下一层搜索，并在未来的回溯时将 $s[i..j]$ 从 $\\textit{ans}$ 中移除。\n\n如果我们已经搜索完了字符串的最后一个字符，那么就找到了一种满足要求的分割方法。\n\n**细节**\n\n当我们在判断 $s[i..j]$ 是否为回文串时，常规的方法是使用双指针分别指向 $i$ 和 $j$，每次判断两个指针指向的字符是否相同，直到两个指针相遇。然而这种方法会产生重复计算，例如下面这个例子：\n\n> 当 $s = \\texttt{aaba}$ 时，对于前 $2$ 个字符 $\\texttt{aa}$，我们有 $2$ 种分割方法 $[\\texttt{aa}]$ 和 $[\\texttt{a}, \\texttt{a}]$，当我们每一次搜索到字符串的第 $i=2$ 个字符 $\\texttt{b}$ 时，都需要对于每个 $s[i..j]$ 使用双指针判断其是否为回文串，这就产生了重复计算。\n\n因此，我们可以将字符串 $s$ 的每个子串 $s[i..j]$ 是否为回文串预处理出来，使用动态规划即可。设 $f(i, j)$ 表示 $s[i..j]$ 是否为回文串，那么有状态转移方程：\n\n$$\nf(i, j) = \\begin{cases}\n\\texttt{True}, & \\quad i \\geq j \\\\\nf(i+1,j-1) \\wedge (s[i]=s[j]), & \\quad \\text{otherwise}\n\\end{cases}\n$$\n\n其中 $\\wedge$ 表示逻辑与运算，即 $s[i..j]$ 为回文串，当且仅当其为空串（$i>j$），其长度为 $1$（$i=j$），或者首尾字符相同且 $s[i+1..j-1]$ 为回文串。\n\n预处理完成之后，我们只需要 $O(1)$ 的时间就可以判断任意 $s[i..j]$ 是否为回文串了。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    vector<vector<int>> f;\n    vector<vector<string>> ret;\n    vector<string> ans;\n    int n;\n\npublic:\n    void dfs(const string& s, int i) {\n        if (i == n) {\n            ret.push_back(ans);\n            return;\n        }\n        for (int j = i; j < n; ++j) {\n            if (f[i][j]) {\n                ans.push_back(s.substr(i, j - i + 1));\n                dfs(s, j + 1);\n                ans.pop_back();\n            }\n        }\n    }\n\n    vector<vector<string>> partition(string s) {\n        n = s.size();\n        f.assign(n, vector<int>(n, true));\n\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i + 1; j < n; ++j) {\n                f[i][j] = (s[i] == s[j]) && f[i + 1][j - 1];\n            }\n        }\n\n        dfs(s, 0);\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    boolean[][] f;\n    List<List<String>> tmp = new ArrayList<List<String>>();\n    List<String> ans = new ArrayList<String>();\n    int n;\n\n    public String[][] partition(String s) {\n        n = s.length();\n        f = new boolean[n][n];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(f[i], true);\n        }\n\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i + 1; j < n; ++j) {\n                f[i][j] = (s.charAt(i) == s.charAt(j)) && f[i + 1][j - 1];\n            }\n        }\n\n        dfs(s, 0);\n        int rows = tmp.size();\n        String[][] ret = new String[rows][];\n        for (int i = 0; i < rows; ++i) {\n            int cols = tmp.get(i).size();\n            ret[i] = new String[cols];\n            for (int j = 0; j < cols; ++j) {\n                ret[i][j] = tmp.get(i).get(j);\n            }\n        }\n        return ret;\n    }\n\n    public void dfs(String s, int i) {\n        if (i == n) {\n            tmp.add(new ArrayList<String>(ans));\n            return;\n        }\n        for (int j = i; j < n; ++j) {\n            if (f[i][j]) {\n                ans.add(s.substring(i, j + 1));\n                dfs(s, j + 1);\n                ans.remove(ans.size() - 1);\n            }\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        n = len(s)\n        f = [[True] * n for _ in range(n)]\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                f[i][j] = (s[i] == s[j]) and f[i + 1][j - 1]\n\n        ret = list()\n        ans = list()\n\n        def dfs(i: int):\n            if i == n:\n                ret.append(ans[:])\n                return\n            \n            for j in range(i, n):\n                if f[i][j]:\n                    ans.append(s[i:j+1])\n                    dfs(j + 1)\n                    ans.pop()\n\n        dfs(0)\n        return ret\n```\n\n```JavaScript [sol1-JavaScript]\nvar partition = function(s) {\n    const dfs = (i) => {\n        if (i === n) {\n            ret.push(ans.slice());\n            return;\n        }\n        for (let j = i; j < n; ++j) {\n            if (f[i][j]) {\n                ans.push(s.slice(i, j + 1));\n                dfs(j + 1);\n                ans.pop();\n            }\n        }\n    }\n    \n    const n = s.length;\n    const f = new Array(n).fill(0).map(() => new Array(n).fill(true));\n    let ret = [], ans = [];\n    \n    for (let i = n - 1; i >= 0; --i) {\n        for (let j = i + 1; j < n; ++j) {\n            f[i][j] = (s[i] === s[j]) && f[i + 1][j - 1];\n        }\n    }\n    dfs(0);\n    return ret;\n};\n```\n\n```go [sol1-Golang]\nfunc partition(s string) (ans [][]string) {\n    n := len(s)\n    f := make([][]bool, n)\n    for i := range f {\n        f[i] = make([]bool, n)\n        for j := range f[i] {\n            f[i][j] = true\n        }\n    }\n    for i := n - 1; i >= 0; i-- {\n        for j := i + 1; j < n; j++ {\n            f[i][j] = s[i] == s[j] && f[i+1][j-1]\n        }\n    }\n\n    splits := []string{}\n    var dfs func(int)\n    dfs = func(i int) {\n        if i == n {\n            ans = append(ans, append([]string(nil), splits...))\n            return\n        }\n        for j := i; j < n; j++ {\n            if f[i][j] {\n                splits = append(splits, s[i:j+1])\n                dfs(j + 1)\n                splits = splits[:len(splits)-1]\n            }\n        }\n    }\n    dfs(0)\n    return\n}\n```\n\n```C [sol1-C]\nvoid dfs(char* s, int n, int i, int** f, char*** ret, int* retSize, int* retColSize, char** ans, int* ansSize) {\n    if (i == n) {\n        char** tmp = malloc(sizeof(char*) * (*ansSize));\n        for (int j = 0; j < (*ansSize); j++) {\n            int ansColSize = strlen(ans[j]);\n            tmp[j] = malloc(sizeof(char) * (ansColSize + 1));\n            strcpy(tmp[j], ans[j]);\n        }\n        ret[*retSize] = tmp;\n        retColSize[(*retSize)++] = *ansSize;\n        return;\n    }\n    for (int j = i; j < n; ++j) {\n        if (f[i][j]) {\n            char* sub = malloc(sizeof(char) * (j - i + 2));\n            for (int k = i; k <= j; k++) {\n                sub[k - i] = s[k];\n            }\n            sub[j - i + 1] = '\\0';\n            ans[(*ansSize)++] = sub;\n            dfs(s, n, j + 1, f, ret, retSize, retColSize, ans, ansSize);\n            --(*ansSize);\n        }\n    }\n}\n\nchar*** partition(char* s, int* returnSize, int** returnColumnSizes) {\n    int n = strlen(s);\n    int retMaxLen = n * (1 << n);\n    char*** ret = malloc(sizeof(char**) * retMaxLen);\n    *returnSize = 0;\n    *returnColumnSizes = malloc(sizeof(int) * retMaxLen);\n    int* f[n];\n    for (int i = 0; i < n; i++) {\n        f[i] = malloc(sizeof(int) * n);\n        for (int j = 0; j < n; j++) {\n            f[i][j] = 1;\n        }\n    }\n    for (int i = n - 1; i >= 0; --i) {\n        for (int j = i + 1; j < n; ++j) {\n            f[i][j] = (s[i] == s[j]) && f[i + 1][j - 1];\n        }\n    }\n    char* ans[n];\n    int ansSize = 0;\n    dfs(s, n, 0, f, ret, returnSize, *returnColumnSizes, ans, &ansSize);\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\cdot 2^n)$，其中 $n$ 是字符串 $s$ 的长度。在最坏情况下，$s$ 包含 $n$ 个完全相同的字符，因此它的任意一种划分方法都满足要求。而长度为 $n$ 的字符串的划分方案数为 $2^{n-1}=O(2^n)$，每一种划分方法需要 $O(n)$ 的时间求出对应的划分结果并放入答案，因此总时间复杂度为 $O(n \\cdot 2^n)$。尽管动态规划预处理需要 $O(n^2)$ 的时间，但在渐进意义下小于 $O(n \\cdot 2^n)$，因此可以忽略。\n\n- 空间复杂度：$O(n^2)$，这里不计算返回答案占用的空间。数组 $f$ 需要使用的空间为 $O(n^2)$，而在回溯的过程中，我们需要使用 $O(n)$ 的栈空间以及 $O(n)$ 的用来存储当前字符串分割方法的空间。由于 $O(n)$ 在渐进意义下小于 $O(n^2)$，因此空间复杂度为 $O(n^2)$。\n\n#### 方法二：回溯 + 记忆化搜索\n\n**思路与算法**\n\n方法一中的动态规划预处理计算出了任意的 $s[i..j]$ 是否为回文串，我们也可以将这一步改为记忆化搜索。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    vector<vector<int>> f;\n    vector<vector<string>> ret;\n    vector<string> ans;\n    int n;\n\npublic:\n    void dfs(const string& s, int i) {\n        if (i == n) {\n            ret.push_back(ans);\n            return;\n        }\n        for (int j = i; j < n; ++j) {\n            if (isPalindrome(s, i, j) == 1) {\n                ans.push_back(s.substr(i, j - i + 1));\n                dfs(s, j + 1);\n                ans.pop_back();\n            }\n        }\n    }\n\n    // 记忆化搜索中，f[i][j] = 0 表示未搜索，1 表示是回文串，-1 表示不是回文串\n    int isPalindrome(const string& s, int i, int j) {\n        if (f[i][j]) {\n            return f[i][j];\n        }\n        if (i >= j) {\n            return f[i][j] = 1;\n        }\n        return f[i][j] = (s[i] == s[j] ? isPalindrome(s, i + 1, j - 1) : -1);\n    }\n\n    vector<vector<string>> partition(string s) {\n        n = s.size();\n        f.assign(n, vector<int>(n));\n\n        dfs(s, 0);\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    int[][] f;\n    List<List<String>> ret = new ArrayList<List<String>>();\n    List<String> ans = new ArrayList<String>();\n    int n;\n\n    public List<List<String>> partition(String s) {\n        n = s.length();\n        f = new int[n][n];\n\n        dfs(s, 0);\n        return ret;\n    }\n\n    public void dfs(String s, int i) {\n        if (i == n) {\n            ret.add(new ArrayList<String>(ans));\n            return;\n        }\n        for (int j = i; j < n; ++j) {\n            if (isPalindrome(s, i, j) == 1) {\n                ans.add(s.substring(i, j + 1));\n                dfs(s, j + 1);\n                ans.remove(ans.size() - 1);\n            }\n        }\n    }\n\n    // 记忆化搜索中，f[i][j] = 0 表示未搜索，1 表示是回文串，-1 表示不是回文串\n    public int isPalindrome(String s, int i, int j) {\n        if (f[i][j] != 0) {\n            return f[i][j];\n        }\n        if (i >= j) {\n            f[i][j] = 1;\n        } else if (s.charAt(i) == s.charAt(j)) {\n            f[i][j] = isPalindrome(s, i + 1, j - 1);\n        } else {\n            f[i][j] = -1;\n        }\n        return f[i][j];\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        n = len(s)\n\n        ret = list()\n        ans = list()\n\n        @cache\n        def isPalindrome(i: int, j: int) -> int:\n            if i >= j:\n                return 1\n            return isPalindrome(i + 1, j - 1) if s[i] == s[j] else -1\n\n        def dfs(i: int):\n            if i == n:\n                ret.append(ans[:])\n                return\n            \n            for j in range(i, n):\n                if isPalindrome(i, j) == 1:\n                    ans.append(s[i:j+1])\n                    dfs(j + 1)\n                    ans.pop()\n\n        dfs(0)\n        isPalindrome.cache_clear()\n        return ret\n```\n\n```JavaScript [sol2-JavaScript]\nvar partition = function(s) {\n    const dfs = (i) => {\n        if (i === n) {\n            ret.push(ans.slice());\n            return;\n        }\n        for (let j = i; j < n; ++j) {\n            if (isPalindrome(i, j) === 1) {\n                ans.push(s.slice(i, j + 1));\n                dfs(j + 1);\n                ans.pop();\n            }\n        }\n    }\n\n    // 记忆化搜索中，f[i][j] = 0 表示未搜索，1 表示是回文串，-1 表示不是回文串\n    const isPalindrome = (i, j) => {\n        if (f[i][j] !== 0) {\n            return f[i][j];\n        }\n        if (i >= j) {\n            f[i][j] = 1;\n        } else if (s[i] === s[j]) {\n            f[i][j] = isPalindrome(i + 1, j - 1);\n        } else {\n            f[i][j] = -1;\n        }\n        return f[i][j];\n    }\n\n    const n = s.length;\n    const ret = [], ans = [];\n    const f = new Array(n).fill(0).map(() => new Array(n).fill(0));\n\n    dfs(0);\n    return ret;\n};\n```\n\n```go [sol2-Golang]\nfunc partition(s string) (ans [][]string) {\n    n := len(s)\n    f := make([][]int8, n)\n    for i := range f {\n        f[i] = make([]int8, n)\n    }\n\n    // 0 表示尚未搜索，1 表示是回文串，-1 表示不是回文串\n    var isPalindrome func(i, j int) int8\n    isPalindrome = func(i, j int) int8 {\n        if i >= j {\n            return 1\n        }\n        if f[i][j] != 0 {\n            return f[i][j]\n        }\n        f[i][j] = -1\n        if s[i] == s[j] {\n            f[i][j] = isPalindrome(i+1, j-1)\n        }\n        return f[i][j]\n    }\n\n    splits := []string{}\n    var dfs func(int)\n    dfs = func(i int) {\n        if i == n {\n            ans = append(ans, append([]string(nil), splits...))\n            return\n        }\n        for j := i; j < n; j++ {\n            if isPalindrome(i, j) > 0 {\n                splits = append(splits, s[i:j+1])\n                dfs(j + 1)\n                splits = splits[:len(splits)-1]\n            }\n        }\n    }\n    dfs(0)\n    return\n}\n```\n\n```C [sol2-C]\n// 记忆化搜索中，f[i][j] = 0 表示未搜索，1 表示是回文串，-1 表示不是回文串\nint isPalindrome(char* s, int** f, int i, int j) {\n    if (f[i][j]) {\n        return f[i][j];\n    }\n    if (i >= j) {\n        return f[i][j] = 1;\n    }\n    return f[i][j] = (s[i] == s[j] ? isPalindrome(s, f, i + 1, j - 1) : -1);\n}\n\nvoid dfs(char* s, int n, int i, int** f, char*** ret, int* retSize, int* retColSize, char** ans, int* ansSize) {\n    if (i == n) {\n        char** tmp = malloc(sizeof(char*) * (*ansSize));\n        for (int j = 0; j < (*ansSize); j++) {\n            int ansColSize = strlen(ans[j]);\n            tmp[j] = malloc(sizeof(char) * (ansColSize + 1));\n            strcpy(tmp[j], ans[j]);\n        }\n        ret[*retSize] = tmp;\n        retColSize[(*retSize)++] = *ansSize;\n        return;\n    }\n    for (int j = i; j < n; ++j) {\n        if (isPalindrome(s, f, i, j) == 1) {\n            char* sub = malloc(sizeof(char) * (j - i + 2));\n            for (int k = i; k <= j; k++) {\n                sub[k - i] = s[k];\n            }\n            sub[j - i + 1] = '\\0';\n            ans[(*ansSize)++] = sub;\n            dfs(s, n, j + 1, f, ret, retSize, retColSize, ans, ansSize);\n            --(*ansSize);\n        }\n    }\n}\n\nchar*** partition(char* s, int* returnSize, int** returnColumnSizes) {\n    int n = strlen(s);\n    int retMaxLen = n * (1 << n);\n    char*** ret = malloc(sizeof(char**) * retMaxLen);\n    *returnSize = 0;\n    *returnColumnSizes = malloc(sizeof(int) * retMaxLen);\n    int* f[n];\n    for (int i = 0; i < n; i++) {\n        f[i] = malloc(sizeof(int) * n);\n        for (int j = 0; j < n; j++) {\n            f[i][j] = 1;\n        }\n    }\n    for (int i = n - 1; i >= 0; --i) {\n        for (int j = i + 1; j < n; ++j) {\n            f[i][j] = (s[i] == s[j]) && f[i + 1][j - 1];\n        }\n    }\n    char* ans[n];\n    int ansSize = 0;\n    dfs(s, n, 0, f, ret, returnSize, *returnColumnSizes, ans, &ansSize);\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\cdot 2^n)$，其中 $n$ 是字符串 $s$ 的长度，与方法一相同。\n\n- 空间复杂度：$O(n^2)$，与方法一相同。"
}