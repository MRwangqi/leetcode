{
	"titleSlug": "palindrome-partitioning",
	"slug": "hui-su-you-hua-jia-liao-dong-tai-gui-hua-by-liweiw",
	"url": "https://leetcode-cn.com/problems/palindrome-partitioning/solution/hui-su-you-hua-jia-liao-dong-tai-gui-hua-by-liweiw/",
	"content": "**思路分析**：找到所有可能的解，提示我们可以使用「回溯算法」（采用深度优先遍历的方式遍历一棵隐式树结构）。\n\n对回溯算法还不太熟悉的朋友，可以参考：[回溯算法入门级详解 + 练习（持续更新）](https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/)。\n\n\n### 方法一：回溯算法\n\n回溯算法思考的步骤：\n\n1. 画出树型结构，**本题的递归树模型是一棵多叉树**；\n\n> 友情提示：强烈建议大家根据一个具体例子画出树形图。\n\n![image.png](https://pic.leetcode-cn.com/298a80282ac3505fec3710abdc1e656c591cf7acaa3ba976151480729244b649-image.png){:width=500}\n\n2. 编码。\n\n+ 每一个结点表示剩余没有扫描到的字符串，产生分支是截取了剩余字符串的前缀；\n+ 产生前缀字符串的时候，判断前缀字符串是否是回文。\n  + 如果前缀字符串是回文，则可以产生分支和结点；\n  + 如果前缀字符串不是回文，则不产生分支和结点，这一步是剪枝操作。\n+ 在叶子结点是空字符串的时候结算，此时 **从根结点到叶子结点的路径，就是结果集里的一个结果，使用深度优先遍历，记录下所有可能的结果**。\n+ 使用一个路径变量 `path` 搜索，`path` 全局使用一个（注意结算的时候，要生成一个拷贝），因此在递归执行方法结束以后需要回溯，即将递归之前添加进来的元素拿出去；\n+ `path` 的操作只在列表的末端，因此合适的数据结构是栈。\n\n\n\n\n**参考代码 1**：\n\n```Java []\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Deque;\nimport java.util.List;\n\npublic class Solution {\n\n    public List<List<String>> partition(String s) {\n        int len = s.length();\n        List<List<String>> res = new ArrayList<>();\n        if (len == 0) {\n            return res;\n        }\n\n        // Stack 这个类 Java 的文档里推荐写成 Deque<Integer> stack = new ArrayDeque<Integer>();\n        // 注意：只使用 stack 相关的接口\n        Deque<String> stack = new ArrayDeque<>();\n        char[] charArray = s.toCharArray();\n        dfs(charArray, 0, len, stack, res);\n        return res;\n    }\n\n    /**\n     * @param charArray\n     * @param index     起始字符的索引\n     * @param len       字符串 s 的长度，可以设置为全局变量\n     * @param path      记录从根结点到叶子结点的路径\n     * @param res       记录所有的结果\n     */\n    private void dfs(char[] charArray, int index, int len, Deque<String> path, List<List<String>> res) {\n        if (index == len) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n\n        for (int i = index; i < len; i++) {\n            // 因为截取字符串是消耗性能的，因此，采用传子串下标的方式判断一个子串是否是回文子串\n            if (!checkPalindrome(charArray, index, i)) {\n                continue;\n            }\n            path.addLast(new String(charArray, index, i + 1 - index));\n            dfs(charArray, i + 1, len, path, res);\n            path.removeLast();\n        }\n    }\n\n    /**\n     * 这一步的时间复杂度是 O(N)，优化的解法是，先采用动态规划，把回文子串的结果记录在一个表格里\n     *\n     * @param charArray\n     * @param left      子串的左边界，可以取到\n     * @param right     子串的右边界，可以取到\n     * @return\n     */\n    private boolean checkPalindrome(char[] charArray, int left, int right) {\n        while (left < right) {\n            if (charArray[left] != charArray[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n```\n\n\n\n**复杂度分析**：\n\n+ 时间复杂度：$O(N \\cdot  2^N)$；这里 $N$ 为输入字符串的长度，每一个位置可拆分，也可不拆分，尝试是否可以拆分的时间复杂度为 $O(2^N)$，判断每一个子串是否是回文子串，时间复杂度为 $O(N)$；\n+ 空间复杂度：\n  + 如果不计算保存结果的空间，空间复杂度为$O(N)$，递归调用栈的高度为 $N$；\n  + 如果计算保存答案需要空间 $2^N \\times N$，这里 $2^N$ 为保守估计，实际情况不会这么多。空间复杂度为 $O(2^N \\times N)$。\n\n\n验证回文串的时候，每一次都得使用「双指针」的方式验证子串是否是回文子串。利用「力扣」第 5 题：[最长回文子串](https://leetcode-cn.com/problems/longest-palindromic-substring) 的思路，可以先用动态规划把结果算出来，这样就可以以 $O(1)$ 的时间复杂度直接得到一个子串是否是回文。\n\n---\n\n### 方法二：回溯的优化（使用动态规划得到所有子串是否是回文）\n\n\n**参考代码 2**：\n\n```Java []\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Deque;\nimport java.util.List;\n\npublic class Solution {\n\n    public List<List<String>> partition(String s) {\n        int len = s.length();\n        List<List<String>> res = new ArrayList<>();\n        if (len == 0) {\n            return res;\n        }\n\n        char[] charArray = s.toCharArray();\n        // 预处理\n        // 状态：dp[i][j] 表示 s[i][j] 是否是回文\n        boolean[][] dp = new boolean[len][len];\n        // 状态转移方程：在 s[i] == s[j] 的时候，dp[i][j] 参考 dp[i + 1][j - 1]\n        for (int right = 0; right < len; right++) {\n            // 注意：left <= right 取等号表示 1 个字符的时候也需要判断\n            for (int left = 0; left <= right; left++) {\n                if (charArray[left] == charArray[right] && (right - left <= 2 || dp[left + 1][right - 1])) {\n                    dp[left][right] = true;\n                }\n            }\n        }\n\n        Deque<String> stack = new ArrayDeque<>();\n        dfs(s, 0, len, dp, stack, res);\n        return res;\n    }\n\n    private void dfs(String s, int index, int len, boolean[][] dp, Deque<String> path, List<List<String>> res) {\n        if (index == len) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n\n        for (int i = index; i < len; i++) {\n            if (dp[index][i]) {\n                path.addLast(s.substring(index, i + 1));\n                dfs(s, i + 1, len, dp, path, res);\n                path.removeLast();\n            }\n        }\n    }\n}\n```\n\n**复杂度分析**：\n\n+ 时间复杂度：$O(2^N)$；这里 $N$ 为输入字符串的长度，每一个位置可拆分，也可不拆分，尝试是否可以拆分的时间复杂度为 $O(2^N)$，动态规划得到所有子串是否为回文子串的时间复杂度为 $O(N^2)$，所以总的时间复杂度为 $O(N^2 + 2^N) = O(2^N)$；\n+ 空间复杂度：\n  + 如果不计算保存结果的空间，动态规划表格的大小为 $N^2$，递归调用栈的高度为 $N$，空间复杂度为 $O(N^2 + N) = O(N)$。\n  + 如果计算保存答案需要空间 $2^N \\times N$，这里 $2^N$ 为保守估计，实际情况不会这么多。空间复杂度为 $O(2^N \\times N + N^2 + N) = O(2^N \\times N)$。\n\n\n**补充**：\n\n\n事实上，还可以使用中心扩散的方法得到所有子串是否是回文，可以参考 [评论](https://leetcode-cn.com/problems/palindrome-partitioning/solution/hui-su-you-hua-jia-liao-dong-tai-gui-hua-by-liweiw/249294)。"
}