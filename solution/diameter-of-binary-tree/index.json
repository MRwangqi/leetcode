{
	"titleSlug": "diameter-of-binary-tree",
	"slug": "er-cha-shu-de-zhi-jing-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/er-cha-shu-de-zhi-jing-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n\n![543.二叉树大直径.mp4](4b8a128c-41d0-4605-9dc5-fe5f740cc03b)\n\n### 📖 文字题解\n\n#### 方法一：深度优先搜索\n\n首先我们知道一条路径的长度为该路径经过的节点数减一，所以求直径（即求路径长度的最大值）等效于求路径经过节点数的最大值减一。\n\n而任意一条路径均可以被看作由某个节点为起点，从其左儿子和右儿子向下遍历的路径拼接得到。\n\n![543.jpg](https://pic.leetcode-cn.com/f39419c0fd3b3225a643ac4f40a1289c93cb03a6fb07a0be9e763c732a49b47d-543.jpg)\n\n如图我们可以知道路径 `[9, 4, 2, 5, 7, 8]` 可以被看作以 $2$ 为起点，从其左儿子向下遍历的路径 `[2, 4, 9]` 和从其右儿子向下遍历的路径 `[2, 5, 7, 8]` 拼接得到。\n\n假设我们知道对于该节点的左儿子向下遍历经过最多的节点数 $L$ （即以左儿子为根的子树的深度） 和其右儿子向下遍历经过最多的节点数 $R$ （即以右儿子为根的子树的深度），那么以该节点为起点的路径经过节点数的最大值即为 $L+R+1$ 。\n\n我们记节点 $\\textit{node}$ 为起点的路径经过节点数的最大值为 $d_{\\textit{node}}$ ，那么二叉树的直径就是所有节点 $d_{\\textit{node}}$ 的最大值减一。\n\n最后的算法流程为：我们定义一个递归函数 `depth(node)` 计算 $d_{\\textit{node}}$ ，函数返回该节点为根的子树的深度。先递归调用左儿子和右儿子求得它们为根的子树的深度 $L$ 和 $R$ ，则该节点为根的子树的深度即为 \n\n$$max(L,R)+1$$\n\n该节点的 $d_{\\textit{node}}$ 值为\n\n$$L+R+1$$\n\n递归搜索每个节点并设一个全局变量 $ans$ 记录 $d_\\textit{node}$ 的最大值，最后返回 `ans-1` 即为树的直径。\n\n```Python [sol1-Python3]\nclass Solution:\n    def diameterOfBinaryTree(self, root: TreeNode) -> int:\n        self.ans = 1\n        def depth(node):\n            # 访问到空节点了，返回0\n            if not node:\n                return 0\n            # 左儿子为根的子树的深度\n            L = depth(node.left)\n            # 右儿子为根的子树的深度\n            R = depth(node.right)\n            # 计算d_node即L+R+1 并更新ans\n            self.ans = max(self.ans, L + R + 1)\n            # 返回该节点为根的子树的深度\n            return max(L, R) + 1\n\n        depth(root)\n        return self.ans - 1\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int ans;\n    public int diameterOfBinaryTree(TreeNode root) {\n        ans = 1;\n        depth(root);\n        return ans - 1;\n    }\n    public int depth(TreeNode node) {\n        if (node == null) {\n            return 0; // 访问到空节点了，返回0\n        }\n        int L = depth(node.left); // 左儿子为根的子树的深度\n        int R = depth(node.right); // 右儿子为根的子树的深度\n        ans = Math.max(ans, L+R+1); // 计算d_node即L+R+1 并更新ans\n        return Math.max(L, R) + 1; // 返回该节点为根的子树的深度\n    }\n}\n```\n```C++ [sol1-C++]\nclass Solution {\n    int ans;\n    int depth(TreeNode* rt){\n        if (rt == NULL) {\n            return 0; // 访问到空节点了，返回0\n        }\n        int L = depth(rt->left); // 左儿子为根的子树的深度\n        int R = depth(rt->right); // 右儿子为根的子树的深度\n        ans = max(ans, L + R + 1); // 计算d_node即L+R+1 并更新ans\n        return max(L, R) + 1; // 返回该节点为根的子树的深度\n    }\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        ans = 1;\n        depth(root);\n        return ans - 1;\n    }\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 为二叉树的节点数，即遍历一棵二叉树的时间复杂度，每个结点只被访问一次。\n\n* 空间复杂度：$O(Height)$，其中 $Height$ 为二叉树的高度。由于递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，而递归的深度显然为二叉树的高度，并且每次递归调用的函数里又只用了常数个变量，所以所需空间复杂度为 $O(Height)$ 。"
}