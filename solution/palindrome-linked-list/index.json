{
	"titleSlug": "palindrome-linked-list",
	"slug": "hui-wen-lian-biao-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/palindrome-linked-list/solution/hui-wen-lian-biao-by-leetcode-solution/",
	"content": "#### 方法一：将值复制到数组中后用双指针法\n\n**思路**\n\n如果你还不太熟悉链表，下面有关于列表的概要讲述。\n\n有两种常用的列表实现，分别为数组列表和链表。如果我们想在列表中存储值，它们是如何实现的呢？\n- 数组列表底层是使用数组存储值，我们可以通过索引在 $O(1)$ 的时间访问列表任何位置的值，这是由基于内存寻址的方式。\n- 链表存储的是称为节点的对象，每个节点保存一个值和指向下一个节点的指针。访问某个特定索引的节点需要 $O(n)$ 的时间，因为要通过指针获取到下一个位置的节点。\n\n确定数组列表是否回文很简单，我们可以使用双指针法来比较两端的元素，并向中间移动。一个指针从起点向中间移动，另一个指针从终点向中间移动。这需要 $O(n)$ 的时间，因为访问每个元素的时间是 $O(1)$，而有 $n$ 个元素要访问。\n\n然而同样的方法在链表上操作并不简单，因为不论是正向访问还是反向访问都不是 $O(1)$。而将链表的值复制到数组列表中是 $O(n)$，因此最简单的方法就是将链表的值复制到数组列表中，再使用双指针法判断。\n\n**算法**\n\n一共为两个步骤：\n1. 复制链表值到数组列表中。\n2. 使用双指针法判断是否为回文。\n\n第一步，我们需要遍历链表将值复制到数组列表中。我们用 `currentNode` 指向当前节点。每次迭代向数组添加 `currentNode.val`，并更新 `currentNode = currentNode.next`，当 `currentNode = null` 时停止循环。\n\n执行第二步的最佳方法取决于你使用的语言。在 Python 中，很容易构造一个列表的反向副本，也很容易比较两个列表。而在其他语言中，就没有那么简单。因此最好使用双指针法来检查是否为回文。我们在起点放置一个指针，在结尾放置一个指针，每一次迭代判断两个指针指向的元素是否相同，若不同，返回 `false`；相同则将两个指针向内移动，并继续判断，直到两个指针相遇。\n\n在编码的过程中，注意我们比较的是节点值的大小，而不是节点本身。正确的比较方式是：`node_1.val == node_2.val`，而 `node_1 == node_2` 是错误的。\n\n**代码**\n\n```python [sol1-Python3]\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        vals = []\n        current_node = head\n        while current_node is not None:\n            vals.append(current_node.val)\n            current_node = current_node.next\n        return vals == vals[::-1]\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        List<Integer> vals = new ArrayList<Integer>();\n\n        // 将链表的值复制到数组中\n        ListNode currentNode = head;\n        while (currentNode != null) {\n            vals.add(currentNode.val);\n            currentNode = currentNode.next;\n        }\n\n        // 使用双指针判断是否回文\n        int front = 0;\n        int back = vals.size() - 1;\n        while (front < back) {\n            if (!vals.get(front).equals(vals.get(back))) {\n                return false;\n            }\n            front++;\n            back--;\n        }\n        return true;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        vector<int> vals;\n        while (head != nullptr) {\n            vals.emplace_back(head->val);\n            head = head->next;\n        }\n        for (int i = 0, j = (int)vals.size() - 1; i < j; ++i, --j) {\n            if (vals[i] != vals[j]) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar isPalindrome = function(head) {\n    const vals = [];\n    while (head !== null) {\n        vals.push(head.val);\n        head = head.next;\n    }\n    for (let i = 0, j = vals.length - 1; i < j; ++i, --j) {\n        if (vals[i] !== vals[j]) {\n            return false;\n        }\n    }\n    return true;\n};\n```\n\n```Golang [sol1-Golang]\nfunc isPalindrome(head *ListNode) bool {\n    vals := []int{}\n    for ; head != nil; head = head.Next {\n        vals = append(vals, head.Val)\n    }\n    n := len(vals)\n    for i, v := range vals[:n/2] {\n        if v != vals[n-1-i] {\n            return false\n        }\n    }\n    return true\n}\n```\n\n```C [sol1-C]\nbool isPalindrome(struct ListNode* head) {\n    int vals[50001], vals_num = 0;\n    while (head != NULL) {\n        vals[vals_num++] = head->val;\n        head = head->next;\n    }\n    for (int i = 0, j = vals_num - 1; i < j; ++i, --j) {\n        if (vals[i] != vals[j]) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 指的是链表的元素个数。\n\t* 第一步： 遍历链表并将值复制到数组中，$O(n)$。\n\t* 第二步：双指针判断是否为回文，执行了 $O(n/2)$ 次的判断，即 $O(n)$。\n\t* 总的时间复杂度：$O(2n) = O(n)$。\n* 空间复杂度：$O(n)$，其中 $n$ 指的是链表的元素个数，我们使用了一个数组列表存放链表的元素值。\n\n#### 方法二：递归\n\n**思路**\n\n为了想出使用空间复杂度为 $O(1)$ 的算法，你可能想过使用递归来解决，但是这仍然需要 $O(n)$ 的空间复杂度。\n\n递归为我们提供了一种优雅的方式来方向遍历节点。\n\n```\nfunction print_values_in_reverse(ListNode head)\n    if head is NOT null\n        print_values_in_reverse(head.next)\n        print head.val\n```\n\n如果使用递归反向迭代节点，同时使用递归函数外的变量向前迭代，就可以判断链表是否为回文。\n\n**算法**\n`currentNode` 指针是先到尾节点，由于递归的特性再从后往前进行比较。`frontPointer` 是递归函数外的指针。若 `currentNode.val != frontPointer.val` 则返回 `false`。反之，`frontPointer` 向前移动并返回 `true`。\n\n算法的正确性在于递归处理节点的顺序是相反的（回顾上面打印的算法），而我们在函数外又记录了一个变量，因此从本质上，我们同时在正向和逆向迭代匹配。\n\n下面的动画展示了算法的工作原理。我们定义递归函数名字为 `recursively_check`，每个节点都被赋予了标识符（如 `$1`）以便更好地解释它们。计算机在递归的过程中将使用堆栈的空间，这就是为什么递归并不是 $O(1)$ 的空间复杂度。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/234/1.PNG),![ppt2](https://assets.leetcode-cn.com/solution-static/234/2.PNG),![ppt3](https://assets.leetcode-cn.com/solution-static/234/3.PNG),![ppt4](https://assets.leetcode-cn.com/solution-static/234/4.PNG),![ppt5](https://assets.leetcode-cn.com/solution-static/234/5.PNG),![ppt6](https://assets.leetcode-cn.com/solution-static/234/6.PNG),![ppt7](https://assets.leetcode-cn.com/solution-static/234/7.PNG),![ppt8](https://assets.leetcode-cn.com/solution-static/234/8.PNG),![ppt9](https://assets.leetcode-cn.com/solution-static/234/9.PNG),![ppt10](https://assets.leetcode-cn.com/solution-static/234/10.PNG),![ppt11](https://assets.leetcode-cn.com/solution-static/234/11.PNG),![ppt12](https://assets.leetcode-cn.com/solution-static/234/12.PNG),![ppt13](https://assets.leetcode-cn.com/solution-static/234/13.PNG),![ppt14](https://assets.leetcode-cn.com/solution-static/234/14.PNG),![ppt15](https://assets.leetcode-cn.com/solution-static/234/15.PNG),![ppt16](https://assets.leetcode-cn.com/solution-static/234/16.PNG),![ppt17](https://assets.leetcode-cn.com/solution-static/234/17.PNG),![ppt18](https://assets.leetcode-cn.com/solution-static/234/18.PNG),![ppt19](https://assets.leetcode-cn.com/solution-static/234/19.PNG),![ppt20](https://assets.leetcode-cn.com/solution-static/234/20.PNG),![ppt21](https://assets.leetcode-cn.com/solution-static/234/21.PNG),![ppt22](https://assets.leetcode-cn.com/solution-static/234/22.PNG),![ppt23](https://assets.leetcode-cn.com/solution-static/234/23.PNG),![ppt24](https://assets.leetcode-cn.com/solution-static/234/24.PNG),![ppt25](https://assets.leetcode-cn.com/solution-static/234/25.PNG),![ppt26](https://assets.leetcode-cn.com/solution-static/234/26.PNG),![ppt27](https://assets.leetcode-cn.com/solution-static/234/27.PNG),![ppt28](https://assets.leetcode-cn.com/solution-static/234/28.PNG),![ppt29](https://assets.leetcode-cn.com/solution-static/234/29.PNG),![ppt30](https://assets.leetcode-cn.com/solution-static/234/30.PNG),![ppt31](https://assets.leetcode-cn.com/solution-static/234/31.PNG),![ppt32](https://assets.leetcode-cn.com/solution-static/234/32.PNG),![ppt33](https://assets.leetcode-cn.com/solution-static/234/33.PNG),![ppt34](https://assets.leetcode-cn.com/solution-static/234/34.PNG)>\n\n**代码**\n\n```python [sol2-Python3]\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n\n        self.front_pointer = head\n\n        def recursively_check(current_node=head):\n            if current_node is not None:\n                if not recursively_check(current_node.next):\n                    return False\n                if self.front_pointer.val != current_node.val:\n                    return False\n                self.front_pointer = self.front_pointer.next\n            return True\n\n        return recursively_check()\n```\n\n```Java [sol2-Java]\nclass Solution {\n    private ListNode frontPointer;\n\n    private boolean recursivelyCheck(ListNode currentNode) {\n        if (currentNode != null) {\n            if (!recursivelyCheck(currentNode.next)) {\n                return false;\n            }\n            if (currentNode.val != frontPointer.val) {\n                return false;\n            }\n            frontPointer = frontPointer.next;\n        }\n        return true;\n    }\n\n    public boolean isPalindrome(ListNode head) {\n        frontPointer = head;\n        return recursivelyCheck(head);\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\n    ListNode* frontPointer;\npublic:\n    bool recursivelyCheck(ListNode* currentNode) {\n        if (currentNode != nullptr) {\n            if (!recursivelyCheck(currentNode->next)) {\n                return false;\n            }\n            if (currentNode->val != frontPointer->val) {\n                return false;\n            }\n            frontPointer = frontPointer->next;\n        }\n        return true;\n    }\n\n    bool isPalindrome(ListNode* head) {\n        frontPointer = head;\n        return recursivelyCheck(head);\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nlet frontPointer;\n\nconst recursivelyCheck = (currentNode) => {\n    if (currentNode !== null) {\n        if (!recursivelyCheck(currentNode.next)) {\n            return false;\n        }\n        if (currentNode.val !== frontPointer.val) {\n            return false;\n        }\n        frontPointer = frontPointer.next;\n    }\n    return true;\n}\n\nvar isPalindrome = function(head) {\n    frontPointer = head;\n    return recursivelyCheck(head);\n};\n```\n\n```Golang [sol2-Golang]\nfunc isPalindrome(head *ListNode) bool {\n    frontPointer := head\n    var recursivelyCheck func(*ListNode) bool\n    recursivelyCheck = func(curNode *ListNode) bool {\n        if curNode != nil {\n            if !recursivelyCheck(curNode.Next) {\n                return false\n            }\n            if curNode.Val != frontPointer.Val {\n                return false\n            }\n            frontPointer = frontPointer.Next\n        }\n        return true\n    }\n    return recursivelyCheck(head)\n}\n```\n\n```C [sol2-C]\nstruct ListNode* frontPointer;\n\nbool recursivelyCheck(struct ListNode* currentNode) {\n    if (currentNode != NULL) {\n        if (!recursivelyCheck(currentNode->next)) {\n            return false;\n        }\n        if (currentNode->val != frontPointer->val) {\n            return false;\n        }\n        frontPointer = frontPointer->next;\n    }\n    return true;\n}\n\nbool isPalindrome(struct ListNode* head) {\n    frontPointer = head;\n    return recursivelyCheck(head);\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 指的是链表的大小。\n* 空间复杂度：$O(n)$，其中 $n$ 指的是链表的大小。我们要理解计算机如何运行递归函数，在一个函数中调用一个函数时，计算机需要在进入被调用函数之前跟踪它在当前函数中的位置（以及任何局部变量的值），通过运行时存放在堆栈中来实现（堆栈帧）。在堆栈中存放好了数据后就可以进入被调用的函数。在完成被调用函数之后，他会弹出堆栈顶部元素，以恢复在进行函数调用之前所在的函数。在进行回文检查之前，递归函数将在堆栈中创建 $n$ 个堆栈帧，计算机会逐个弹出进行处理。所以在使用递归时空间复杂度要考虑堆栈的使用情况。\n\n这种方法不仅使用了 $O(n)$ 的空间，且比第一种方法更差，因为在许多语言中，堆栈帧的开销很大（如 Python），并且最大的运行时堆栈深度为 1000（可以增加，但是有可能导致底层解释程序内存出错）。为每个节点创建堆栈帧极大的限制了算法能够处理的最大链表大小。\n\n#### 方法三：快慢指针\n\n**思路**\n\n避免使用 $O(n)$ 额外空间的方法就是改变输入。\n\n我们可以将链表的后半部分反转（修改链表结构），然后将前半部分和后半部分进行比较。比较完成后我们应该将链表恢复原样。虽然不需要恢复也能通过测试用例，但是使用该函数的人通常不希望链表结构被更改。\n\n该方法虽然可以将空间复杂度降到 $O(1)$，但是在并发环境下，该方法也有缺点。在并发环境下，函数运行时需要锁定其他线程或进程对链表的访问，因为在函数执行过程中链表会被修改。\n\n**算法**\n\n整个流程可以分为以下五个步骤：\n1. 找到前半部分链表的尾节点。\n2. 反转后半部分链表。\n3. 判断是否回文。\n4. 恢复链表。\n5. 返回结果。\n\n执行步骤一，我们可以计算链表节点的数量，然后遍历链表找到前半部分的尾节点。\n\n我们也可以使用**快慢指针**在一次遍历中找到：慢指针一次走一步，快指针一次走两步，快慢指针同时出发。当快指针移动到链表的末尾时，慢指针恰好到链表的中间。通过慢指针将链表分为两部分。\n\n若链表有奇数个节点，则中间的节点应该看作是前半部分。\n\n步骤二可以使用「[206. 反转链表](https://leetcode-cn.com/problems/reverse-linked-list/)」问题中的解决方法来反转链表的后半部分。\n\n步骤三比较两个部分的值，当后半部分到达末尾则比较完成，可以忽略计数情况中的中间节点。\n\n步骤四与步骤二使用的函数相同，再反转一次恢复链表本身。\n\n**代码**\n\n```python [sol3-Python]\nclass Solution:\n\n    def isPalindrome(self, head: ListNode) -> bool:\n        if head is None:\n            return True\n\n        # 找到前半部分链表的尾节点并反转后半部分链表\n        first_half_end = self.end_of_first_half(head)\n        second_half_start = self.reverse_list(first_half_end.next)\n\n        # 判断是否回文\n        result = True\n        first_position = head\n        second_position = second_half_start\n        while result and second_position is not None:\n            if first_position.val != second_position.val:\n                result = False\n            first_position = first_position.next\n            second_position = second_position.next\n\n        # 还原链表并返回结果\n        first_half_end.next = self.reverse_list(second_half_start)\n        return result    \n\n    def end_of_first_half(self, head):\n        fast = head\n        slow = head\n        while fast.next is not None and fast.next.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n        return slow\n\n    def reverse_list(self, head):\n        previous = None\n        current = head\n        while current is not None:\n            next_node = current.next\n            current.next = previous\n            previous = current\n            current = next_node\n        return previous\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        if (head == null) {\n            return true;\n        }\n\n        // 找到前半部分链表的尾节点并反转后半部分链表\n        ListNode firstHalfEnd = endOfFirstHalf(head);\n        ListNode secondHalfStart = reverseList(firstHalfEnd.next);\n\n        // 判断是否回文\n        ListNode p1 = head;\n        ListNode p2 = secondHalfStart;\n        boolean result = true;\n        while (result && p2 != null) {\n            if (p1.val != p2.val) {\n                result = false;\n            }\n            p1 = p1.next;\n            p2 = p2.next;\n        }        \n\n        // 还原链表并返回结果\n        firstHalfEnd.next = reverseList(secondHalfStart);\n        return result;\n    }\n\n    private ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode curr = head;\n        while (curr != null) {\n            ListNode nextTemp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = nextTemp;\n        }\n        return prev;\n    }\n\n    private ListNode endOfFirstHalf(ListNode head) {\n        ListNode fast = head;\n        ListNode slow = head;\n        while (fast.next != null && fast.next.next != null) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        if (head == nullptr) {\n            return true;\n        }\n\n        // 找到前半部分链表的尾节点并反转后半部分链表\n        ListNode* firstHalfEnd = endOfFirstHalf(head);\n        ListNode* secondHalfStart = reverseList(firstHalfEnd->next);\n\n        // 判断是否回文\n        ListNode* p1 = head;\n        ListNode* p2 = secondHalfStart;\n        bool result = true;\n        while (result && p2 != nullptr) {\n            if (p1->val != p2->val) {\n                result = false;\n            }\n            p1 = p1->next;\n            p2 = p2->next;\n        }        \n\n        // 还原链表并返回结果\n        firstHalfEnd->next = reverseList(secondHalfStart);\n        return result;\n    }\n\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr != nullptr) {\n            ListNode* nextTemp = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = nextTemp;\n        }\n        return prev;\n    }\n\n    ListNode* endOfFirstHalf(ListNode* head) {\n        ListNode* fast = head;\n        ListNode* slow = head;\n        while (fast->next != nullptr && fast->next->next != nullptr) {\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n        return slow;\n    }\n};\n```\n\n```JavaScript [sol3-JavaScript]\nconst reverseList = (head) => {\n    let prev = null;\n    let curr = head;\n    while (curr !== null) {\n        let nextTemp = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = nextTemp;\n    }\n    return prev;\n}\n\nconst endOfFirstHalf = (head) => {\n    let fast = head;\n    let slow = head;\n    while (fast.next !== null && fast.next.next !== null) {\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    return slow;\n}\n\nvar isPalindrome = function(head) {\n    if (head == null) return true;\n\n    // 找到前半部分链表的尾节点并反转后半部分链表\n    const firstHalfEnd = endOfFirstHalf(head);\n    const secondHalfStart = reverseList(firstHalfEnd.next);\n\n    // 判断是否回文\n    let p1 = head;\n    let p2 = secondHalfStart;\n    let result = true;\n    while (result && p2 != null) {\n        if (p1.val != p2.val) result = false;\n        p1 = p1.next;\n        p2 = p2.next;\n    }        \n\n    // 还原链表并返回结果\n    firstHalfEnd.next = reverseList(secondHalfStart);\n    return result;\n};\n```\n\n```Golang [sol3-Golang]\nfunc reverseList(head *ListNode) *ListNode {\n    var prev, cur *ListNode = nil, head\n    for cur != nil {\n        nextTmp := cur.Next\n        cur.Next = prev\n        prev = cur\n        cur = nextTmp\n    }\n    return prev\n}\n\nfunc endOfFirstHalf(head *ListNode) *ListNode {\n    fast := head\n    slow := head\n    for fast.Next != nil && fast.Next.Next != nil {\n        fast = fast.Next.Next\n        slow = slow.Next\n    }\n    return slow\n}\n\nfunc isPalindrome(head *ListNode) bool {\n    if head == nil {\n        return true\n    }\n\n    // 找到前半部分链表的尾节点并反转后半部分链表\n    firstHalfEnd := endOfFirstHalf(head)\n    secondHalfStart := reverseList(firstHalfEnd.Next)\n\n    // 判断是否回文\n    p1 := head\n    p2 := secondHalfStart\n    result := true\n    for result && p2 != nil {\n        if p1.Val != p2.Val {\n            result = false\n        }\n        p1 = p1.Next\n        p2 = p2.Next\n    }\n\n    // 还原链表并返回结果\n    firstHalfEnd.Next = reverseList(secondHalfStart)\n    return result\n}\n```\n\n```C [sol3-C]\nstruct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* curr = head;\n    while (curr != NULL) {\n        struct ListNode* nextTemp = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = nextTemp;\n    }\n    return prev;\n}\n\nstruct ListNode* endOfFirstHalf(struct ListNode* head) {\n    struct ListNode* fast = head;\n    struct ListNode* slow = head;\n    while (fast->next != NULL && fast->next->next != NULL) {\n        fast = fast->next->next;\n        slow = slow->next;\n    }\n    return slow;\n}\n\nbool isPalindrome(struct ListNode* head) {\n    if (head == NULL) {\n        return true;\n    }\n\n    // 找到前半部分链表的尾节点并反转后半部分链表\n    struct ListNode* firstHalfEnd = endOfFirstHalf(head);\n    struct ListNode* secondHalfStart = reverseList(firstHalfEnd->next);\n\n    // 判断是否回文\n    struct ListNode* p1 = head;\n    struct ListNode* p2 = secondHalfStart;\n    bool result = true;\n    while (result && p2 != NULL) {\n        if (p1->val != p2->val) {\n            result = false;\n        }\n        p1 = p1->next;\n        p2 = p2->next;\n    }\n\n    // 还原链表并返回结果\n    firstHalfEnd->next = reverseList(secondHalfStart);\n    return result;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 指的是链表的大小。\n\n* 空间复杂度：$O(1)$。我们只会修改原本链表中节点的指向，而在堆栈上的堆栈帧不超过 $O(1)$。"
}