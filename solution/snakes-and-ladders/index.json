{
	"titleSlug": "snakes-and-ladders",
	"slug": "she-ti-qi-by-leetcode-solution-w0vl",
	"url": "https://leetcode-cn.com/problems/snakes-and-ladders/solution/she-ti-qi-by-leetcode-solution-w0vl/",
	"content": "#### 方法一：广度优先搜索\n\n我们可以将棋盘抽象成一个包含 $N^2$ 个节点的有向图，对于每个节点 $x$，若 $x+i\\ (1\\le i \\le 6)$ 上没有蛇或梯子，则连一条从 $x$ 到 $x+i$ 的有向边；否则记蛇梯的目的地为 $y$，连一条从 $x$ 到 $y$ 的有向边。\n\n如此转换后，原问题等价于在这张有向图上求出从 $1$ 到 $N^2$ 的最短路长度。\n\n对于该问题，我们可以使用广度优先搜索。将节点编号和到达该节点的移动次数作为搜索状态，顺着该节点的出边扩展新状态，直至到达终点 $N^2$，返回此时的移动次数。若无法到达终点则返回 $-1$。\n\n代码实现时，我们可以用一个队列来存储搜索状态，初始时将起点状态 $(1,0)$ 加入队列，表示当前位于起点 $1$，移动次数为 $0$。然后不断取出队首，每次取出队首元素时扩展新状态，即遍历该节点的出边，若出边对应节点未被访问，则将该节点和移动次数加一的结果作为新状态，加入队列。如此循环直至到达终点或队列为空。\n\n此外，我们需要计算出编号在棋盘中的对应行列，以便从 $\\textit{board}$ 中得到目的地。设编号为 $\\textit{id}$，由于每行有 $n$ 个数字，其位于棋盘从下往上数的第 $\\left \\lfloor \\dfrac{\\textit{id}-1}{n} \\right \\rfloor$ 行，记作 $r$。由于棋盘的每一行会交替方向，若 $r$ 为偶数，则编号方向从左向右，列号为 $(\\textit{id}-1) \\bmod n$；若 $r$ 为奇数，则编号方向从右向左，列号为 $n-1-((\\textit{id}-1) \\bmod n)$。\n\n```C++ [sol1-C++]\nclass Solution {\n    pair<int, int> id2rc(int id, int n) {\n        int r = (id - 1) / n, c = (id - 1) % n;\n        if (r % 2 == 1) {\n            c = n - 1 - c;\n        }\n        return {n - 1 - r, c};\n    }\n\npublic:\n    int snakesAndLadders(vector<vector<int>> &board) {\n        int n = board.size();\n        vector<int> vis(n * n + 1);\n        queue<pair<int, int>> q;\n        q.emplace(1, 0);\n        while (!q.empty()) {\n            auto p = q.front();\n            q.pop();\n            for (int i = 1; i <= 6; ++i) {\n                int nxt = p.first + i;\n                if (nxt > n * n) { // 超出边界\n                    break;\n                }\n                auto rc = id2rc(nxt, n); // 得到下一步的行列\n                if (board[rc.first][rc.second] > 0) { // 存在蛇或梯子\n                    nxt = board[rc.first][rc.second];\n                }\n                if (nxt == n * n) { // 到达终点\n                    return p.second + 1;\n                }\n                if (!vis[nxt]) {\n                    vis[nxt] = true;\n                    q.emplace(nxt, p.second + 1); // 扩展新状态\n                }\n            }\n        }\n        return -1;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int snakesAndLadders(int[][] board) {\n        int n = board.length;\n        boolean[] vis = new boolean[n * n + 1];\n        Queue<int[]> queue = new LinkedList<int[]>();\n        queue.offer(new int[]{1, 0});\n        while (!queue.isEmpty()) {\n            int[] p = queue.poll();\n            for (int i = 1; i <= 6; ++i) {\n                int nxt = p[0] + i;\n                if (nxt > n * n) { // 超出边界\n                    break;\n                }\n                int[] rc = id2rc(nxt, n); // 得到下一步的行列\n                if (board[rc[0]][rc[1]] > 0) { // 存在蛇或梯子\n                    nxt = board[rc[0]][rc[1]];\n                }\n                if (nxt == n * n) { // 到达终点\n                    return p[1] + 1;\n                }\n                if (!vis[nxt]) {\n                    vis[nxt] = true;\n                    queue.offer(new int[]{nxt, p[1] + 1}); // 扩展新状态\n                }\n            }\n        }\n        return -1;\n    }\n\n    public int[] id2rc(int id, int n) {\n        int r = (id - 1) / n, c = (id - 1) % n;\n        if (r % 2 == 1) {\n            c = n - 1 - c;\n        }\n        return new int[]{n - 1 - r, c};\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int SnakesAndLadders(int[][] board) {\n        int n = board.Length;\n        bool[] vis = new bool[n * n + 1];\n        Queue<Tuple<int, int>> queue = new Queue<Tuple<int, int>>();\n        queue.Enqueue(new Tuple<int, int>(1, 0));\n        while (queue.Count > 0) {\n            Tuple<int, int> p = queue.Dequeue();\n            for (int i = 1; i <= 6; ++i) {\n                int nxt = p.Item1 + i;\n                if (nxt > n * n) { // 超出边界\n                    break;\n                }\n                Tuple<int, int> rc = Id2Rc(nxt, n); // 得到下一步的行列\n                if (board[rc.Item1][rc.Item2] > 0) { // 存在蛇或梯子\n                    nxt = board[rc.Item1][rc.Item2];\n                }\n                if (nxt == n * n) { // 到达终点\n                    return p.Item2 + 1;\n                }\n                if (!vis[nxt]) {\n                    vis[nxt] = true;\n                    queue.Enqueue(new Tuple<int, int>(nxt, p.Item2 + 1)); // 扩展新状态\n                }\n            }\n        }\n        return -1;\n    }\n\n    public Tuple<int, int> Id2Rc(int id, int n) {\n        int r = (id - 1) / n, c = (id - 1) % n;\n        if (r % 2 == 1) {\n            c = n - 1 - c;\n        }\n        return new Tuple<int, int>(n - 1 - r, c);\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc id2rc(id, n int) (r, c int) {\n    r, c = (id-1)/n, (id-1)%n\n    if r%2 == 1 {\n        c = n - 1 - c\n    }\n    r = n - 1 - r\n    return\n}\n\nfunc snakesAndLadders(board [][]int) int {\n    n := len(board)\n    vis := make([]bool, n*n+1)\n    type pair struct{ id, step int }\n    q := []pair{{1, 0}}\n    for len(q) > 0 {\n        p := q[0]\n        q = q[1:]\n        for i := 1; i <= 6; i++ {\n            nxt := p.id + i\n            if nxt > n*n { // 超出边界\n                break\n            }\n            r, c := id2rc(nxt, n) // 得到下一步的行列\n            if board[r][c] > 0 {  // 存在蛇或梯子\n                nxt = board[r][c]\n            }\n            if nxt == n*n { // 到达终点\n                return p.step + 1\n            }\n            if !vis[nxt] {\n                vis[nxt] = true\n                q = append(q, pair{nxt, p.step + 1}) // 扩展新状态\n            }\n        }\n    }\n    return -1\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar snakesAndLadders = function(board) {\n    const n = board.length;\n    const vis = new Array(n * n + 1).fill(0);\n    const queue = [[1, 0]];\n    while (queue.length) {\n        const p = queue.shift();\n        for (let i = 1; i <= 6; ++i) {\n            let nxt = p[0] + i;\n            if (nxt > n * n) { // 超出边界\n                break;\n            }\n            const rc = id2rc(nxt, n); // 得到下一步的行列\n            if (board[rc[0]][rc[1]] > 0) { // 存在蛇或梯子\n                nxt = board[rc[0]][rc[1]];\n            }\n            if (nxt === n * n) { // 到达终点\n                return p[1] + 1;\n            }\n            if (!vis[nxt]) {\n                vis[nxt] = true;\n                queue.push([nxt, p[1] + 1]); // 扩展新状态\n            }\n        }\n    }\n    return -1;\n};\n\nconst id2rc = (id, n) => {\n    let r = Math.floor((id - 1) / n), c = (id - 1) % n;\n    if (r % 2 === 1) {\n        c = n - 1 - c;\n    }\n    return [n - 1 - r, c];\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -> int:\n        n = len(board)\n\n        def id2rc(idx: int) -> (int, int):\n            r, c = (idx - 1) // n, (idx - 1) % n\n            if r % 2 == 1:\n                c = n - 1 - c\n            return n - 1 - r, c\n        \n        vis = set()\n        q = deque([(1, 0)])\n        while q:\n            idx, step = q.popleft()\n            for i in range(1, 6 + 1):\n                idx_nxt = idx + i\n                if idx_nxt > n * n:   # 超出边界\n                    break\n                \n                x_nxt, y_nxt = id2rc(idx_nxt)   # 得到下一步的行列\n                if board[x_nxt][y_nxt] > 0:   # 存在蛇或梯子\n                    idx_nxt = board[x_nxt][y_nxt]\n                if idx_nxt == n * n:   # 到达终点\n                    return step + 1\n                if idx_nxt not in vis:\n                    vis.add(idx_nxt)\n                    q.append((idx_nxt, step + 1))   # 扩展新状态\n        \n        return -1\n```\n\n```C [sol1-C]\nstruct Pair {\n    int first;\n    int second;\n};\n\nstruct Pair id2rc(int id, int n) {\n    int r = (id - 1) / n, c = (id - 1) % n;\n    if (r % 2 == 1) {\n        c = n - 1 - c;\n    }\n    return (struct Pair){n - 1 - r, c};\n}\n\nint snakesAndLadders(int** board, int boardSize, int* boardColSize) {\n    int n = boardSize;\n    int vis[n * n + 1];\n    memset(vis, 0, sizeof(vis));\n    struct Pair que[n * n];\n    int left = 0, right = 0;\n    que[right].first = 1, que[right++].second = 0;\n    while (left < right) {\n        struct Pair p = que[left++];\n        for (int i = 1; i <= 6; ++i) {\n            int nxt = p.first + i;\n            if (nxt > n * n) {  // 超出边界\n                break;\n            }\n            struct Pair rc = id2rc(nxt, n);  // 得到下一步的行列\n            if (board[rc.first][rc.second] > 0) {  // 存在蛇或梯子\n                nxt = board[rc.first][rc.second];\n            }\n            if (nxt == n * n) {  // 到达终点\n                return p.second + 1;\n            }\n            if (!vis[nxt]) {\n                vis[nxt] = true;\n                que[right].first = nxt, que[right++].second = p.second + 1;  // 扩展新状态\n            }\n        }\n    }\n    return -1;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N^2)$，其中 $N$ 为棋盘 $\\textit{board}$ 的边长。棋盘的每个格子至多入队一次，因此时间复杂度为 $O(N^2)$。\n\n- 空间复杂度：$O(N^2)$。我们需要 $O(N^2)$ 的空间来存储每个格子是否被访问过。"
}