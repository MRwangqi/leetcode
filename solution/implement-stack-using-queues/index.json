{
	"titleSlug": "implement-stack-using-queues",
	"slug": "yong-dui-lie-shi-xian-zhan-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/implement-stack-using-queues/solution/yong-dui-lie-shi-xian-zhan-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n![225. 用队列实现栈 2.mp4](904c0b3d-b8cc-4560-95d2-a5cd2d59effd)\n\n### 📖 文字题解\n#### 绪论\n\n这道题目是为初级读者准备的，题目涉及到栈和队列两种数据结构。\n\n栈是一种后进先出的数据结构，元素从顶端入栈，然后从顶端出栈。\n\n队列是一种先进先出的数据结构，元素从后端入队，然后从前端出队。\n\n#### 方法一：两个队列\n\n为了满足栈的特性，即最后入栈的元素最先出栈，在使用队列实现栈时，应满足队列前端的元素是最后入栈的元素。可以使用两个队列实现栈的操作，其中 $\\textit{queue}_1$ 用于存储栈内的元素，$\\textit{queue}_2$ 作为入栈操作的辅助队列。\n\n入栈操作时，首先将元素入队到 $\\textit{queue}_2$，然后将 $\\textit{queue}_1$ 的全部元素依次出队并入队到 $\\textit{queue}_2$，此时 $\\textit{queue}_2$ 的前端的元素即为新入栈的元素，再将 $\\textit{queue}_1$ 和 $\\textit{queue}_2$ 互换，则 $\\textit{queue}_1$ 的元素即为栈内的元素，$\\textit{queue}_1$ 的前端和后端分别对应栈顶和栈底。\n\n由于每次入栈操作都确保 $\\textit{queue}_1$ 的前端元素为栈顶元素，因此出栈操作和获得栈顶元素操作都可以简单实现。出栈操作只需要移除 $\\textit{queue}_1$ 的前端元素并返回即可，获得栈顶元素操作只需要获得 $\\textit{queue}_1$ 的前端元素并返回即可（不移除元素）。\n\n由于 $\\textit{queue}_1$ 用于存储栈内的元素，判断栈是否为空时，只需要判断 $\\textit{queue}_1$ 是否为空即可。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/225/225_fig1.gif)\n\n```Java [sol1-Java]\nclass MyStack {\n    Queue<Integer> queue1;\n    Queue<Integer> queue2;\n\n    /** Initialize your data structure here. */\n    public MyStack() {\n        queue1 = new LinkedList<Integer>();\n        queue2 = new LinkedList<Integer>();\n    }\n    \n    /** Push element x onto stack. */\n    public void push(int x) {\n        queue2.offer(x);\n        while (!queue1.isEmpty()) {\n            queue2.offer(queue1.poll());\n        }\n        Queue<Integer> temp = queue1;\n        queue1 = queue2;\n        queue2 = temp;\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    public int pop() {\n        return queue1.poll();\n    }\n    \n    /** Get the top element. */\n    public int top() {\n        return queue1.peek();\n    }\n    \n    /** Returns whether the stack is empty. */\n    public boolean empty() {\n        return queue1.isEmpty();\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass MyStack {\npublic:\n    queue<int> queue1;\n    queue<int> queue2;\n\n    /** Initialize your data structure here. */\n    MyStack() {\n\n    }\n\n    /** Push element x onto stack. */\n    void push(int x) {\n        queue2.push(x);\n        while (!queue1.empty()) {\n            queue2.push(queue1.front());\n            queue1.pop();\n        }\n        swap(queue1, queue2);\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    int pop() {\n        int r = queue1.front();\n        queue1.pop();\n        return r;\n    }\n    \n    /** Get the top element. */\n    int top() {\n        int r = queue1.front();\n        return r;\n    }\n    \n    /** Returns whether the stack is empty. */\n    bool empty() {\n        return queue1.empty();\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass MyStack:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.queue1 = collections.deque()\n        self.queue2 = collections.deque()\n\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"\n        self.queue2.append(x)\n        while self.queue1:\n            self.queue2.append(self.queue1.popleft())\n        self.queue1, self.queue2 = self.queue2, self.queue1\n\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        \"\"\"\n        return self.queue1.popleft()\n\n\n    def top(self) -> int:\n        \"\"\"\n        Get the top element.\n        \"\"\"\n        return self.queue1[0]\n\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the stack is empty.\n        \"\"\"\n        return not self.queue1\n```\n\n```Golang [sol1-Golang]\ntype MyStack struct {\n    queue1, queue2 []int\n}\n\n/** Initialize your data structure here. */\nfunc Constructor() (s MyStack) {\n    return\n}\n\n/** Push element x onto stack. */\nfunc (s *MyStack) Push(x int) {\n    s.queue2 = append(s.queue2, x)\n    for len(s.queue1) > 0 {\n        s.queue2 = append(s.queue2, s.queue1[0])\n        s.queue1 = s.queue1[1:]\n    }\n    s.queue1, s.queue2 = s.queue2, s.queue1\n}\n\n/** Removes the element on top of the stack and returns that element. */\nfunc (s *MyStack) Pop() int {\n    v := s.queue1[0]\n    s.queue1 = s.queue1[1:]\n    return v\n}\n\n/** Get the top element. */\nfunc (s *MyStack) Top() int {\n    return s.queue1[0]\n}\n\n/** Returns whether the stack is empty. */\nfunc (s *MyStack) Empty() bool {\n    return len(s.queue1) == 0\n}\n```\n\n```C [sol1-C]\n#define LEN 20\ntypedef struct queue {\n    int *data;\n    int head;\n    int rear;\n    int size;\n} Queue;\n\ntypedef struct {\n    Queue *queue1, *queue2;\n} MyStack;\n\nQueue *initQueue(int k) {\n    Queue *obj = (Queue *)malloc(sizeof(Queue));\n    obj->data = (int *)malloc(k * sizeof(int));\n    obj->head = -1;\n    obj->rear = -1;\n    obj->size = k;\n    return obj;\n}\n\nvoid enQueue(Queue *obj, int e) {\n    if (obj->head == -1) {\n        obj->head = 0;\n    }\n    obj->rear = (obj->rear + 1) % obj->size;\n    obj->data[obj->rear] = e;\n}\n\nint deQueue(Queue *obj) {\n    int a = obj->data[obj->head];\n    if (obj->head == obj->rear) {\n        obj->rear = -1;\n        obj->head = -1;\n        return a;\n    }\n    obj->head = (obj->head + 1) % obj->size;\n    return a;\n}\n\nint isEmpty(Queue *obj) {\n    return obj->head == -1;\n}\n\nMyStack *myStackCreate() {\n    MyStack *obj = (MyStack *)malloc(sizeof(MyStack));\n    obj->queue1 = initQueue(LEN);\n    obj->queue2 = initQueue(LEN);\n    return obj;\n}\n\nvoid myStackPush(MyStack *obj, int x) {\n    if (isEmpty(obj->queue1)) {\n        enQueue(obj->queue2, x);\n    } else {\n        enQueue(obj->queue1, x);\n    }\n}\n\nint myStackPop(MyStack *obj) {\n    if (isEmpty(obj->queue1)) {\n        while (obj->queue2->head != obj->queue2->rear) {\n            enQueue(obj->queue1, deQueue(obj->queue2));\n        }\n        return deQueue(obj->queue2);\n    }\n    while (obj->queue1->head != obj->queue1->rear) {\n        enQueue(obj->queue2, deQueue(obj->queue1));\n    }\n    return deQueue(obj->queue1);\n}\n\nint myStackTop(MyStack *obj) {\n    if (isEmpty(obj->queue1)) {\n        return obj->queue2->data[obj->queue2->rear];\n    }\n    return obj->queue1->data[obj->queue1->rear];\n}\n\nbool myStackEmpty(MyStack *obj) {\n    if (obj->queue1->head == -1 && obj->queue2->head == -1) {\n        return true;\n    }\n    return false;\n}\n\nvoid myStackFree(MyStack *obj) {\n    free(obj->queue1->data);\n    obj->queue1->data = NULL;\n    free(obj->queue1);\n    obj->queue1 = NULL;\n    free(obj->queue2->data);\n    obj->queue2->data = NULL;\n    free(obj->queue2);\n    obj->queue2 = NULL;\n    free(obj);\n    obj = NULL;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：入栈操作 $O(n)$，其余操作都是 $O(1)$，其中 $n$ 是栈内的元素个数。\n  入栈操作需要将 $\\textit{queue}_1$ 中的 $n$ 个元素出队，并入队 $n+1$ 个元素到 $\\textit{queue}_2$，共有 $2n+1$ 次操作，每次出队和入队操作的时间复杂度都是 $O(1)$，因此入栈操作的时间复杂度是 $O(n)$。\n  出栈操作对应将 $\\textit{queue}_1$ 的前端元素出队，时间复杂度是 $O(1)$。\n  获得栈顶元素操作对应获得 $\\textit{queue}_1$ 的前端元素，时间复杂度是 $O(1)$。\n  判断栈是否为空操作只需要判断 $\\textit{queue}_1$ 是否为空，时间复杂度是 $O(1)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是栈内的元素个数。需要使用两个队列存储栈内的元素。\n\n#### 方法二：一个队列\n\n方法一使用了两个队列实现栈的操作，也可以使用一个队列实现栈的操作。\n\n使用一个队列时，为了满足栈的特性，即最后入栈的元素最先出栈，同样需要满足队列前端的元素是最后入栈的元素。\n\n入栈操作时，首先获得入栈前的元素个数 $n$，然后将元素入队到队列，再将队列中的前 $n$ 个元素（即除了新入栈的元素之外的全部元素）依次出队并入队到队列，此时队列的前端的元素即为新入栈的元素，且队列的前端和后端分别对应栈顶和栈底。\n\n由于每次入栈操作都确保队列的前端元素为栈顶元素，因此出栈操作和获得栈顶元素操作都可以简单实现。出栈操作只需要移除队列的前端元素并返回即可，获得栈顶元素操作只需要获得队列的前端元素并返回即可（不移除元素）。\n\n由于队列用于存储栈内的元素，判断栈是否为空时，只需要判断队列是否为空即可。\n\n![fig2](https://assets.leetcode-cn.com/solution-static/225/225_fig2.gif)\n\n```Java [sol2-Java]\nclass MyStack {\n    Queue<Integer> queue;\n\n    /** Initialize your data structure here. */\n    public MyStack() {\n        queue = new LinkedList<Integer>();\n    }\n    \n    /** Push element x onto stack. */\n    public void push(int x) {\n        int n = queue.size();\n        queue.offer(x);\n        for (int i = 0; i < n; i++) {\n            queue.offer(queue.poll());\n        }\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    public int pop() {\n        return queue.poll();\n    }\n    \n    /** Get the top element. */\n    public int top() {\n        return queue.peek();\n    }\n    \n    /** Returns whether the stack is empty. */\n    public boolean empty() {\n        return queue.isEmpty();\n    }\n}\n```\n\n```cpp [sol2-C++]\nclass MyStack {\npublic:\n    queue<int> q;\n\n    /** Initialize your data structure here. */\n    MyStack() {\n\n    }\n\n    /** Push element x onto stack. */\n    void push(int x) {\n        int n = q.size();\n        q.push(x);\n        for (int i = 0; i < n; i++) {\n            q.push(q.front());\n            q.pop();\n        }\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    int pop() {\n        int r = q.front();\n        q.pop();\n        return r;\n    }\n    \n    /** Get the top element. */\n    int top() {\n        int r = q.front();\n        return r;\n    }\n    \n    /** Returns whether the stack is empty. */\n    bool empty() {\n        return q.empty();\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass MyStack:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.queue = collections.deque()\n\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"\n        n = len(self.queue)\n        self.queue.append(x)\n        for _ in range(n):\n            self.queue.append(self.queue.popleft())\n\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        \"\"\"\n        return self.queue.popleft()\n\n\n    def top(self) -> int:\n        \"\"\"\n        Get the top element.\n        \"\"\"\n        return self.queue[0]\n\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the stack is empty.\n        \"\"\"\n        return not self.queue\n```\n\n```Golang [sol2-Golang]\ntype MyStack struct {\n    queue []int\n}\n\n/** Initialize your data structure here. */\nfunc Constructor() (s MyStack) {\n    return\n}\n\n/** Push element x onto stack. */\nfunc (s *MyStack) Push(x int) {\n    n := len(s.queue)\n    s.queue = append(s.queue, x)\n    for ; n > 0; n-- {\n        s.queue = append(s.queue, s.queue[0])\n        s.queue = s.queue[1:]\n    }\n}\n\n/** Removes the element on top of the stack and returns that element. */\nfunc (s *MyStack) Pop() int {\n    v := s.queue[0]\n    s.queue = s.queue[1:]\n    return v\n}\n\n/** Get the top element. */\nfunc (s *MyStack) Top() int {\n    return s.queue[0]\n}\n\n/** Returns whether the stack is empty. */\nfunc (s *MyStack) Empty() bool {\n    return len(s.queue) == 0\n}\n```\n\n```C [sol2-C]\ntypedef struct tagListNode {\n    struct tagListNode* next;\n    int val;\n} ListNode;\n\ntypedef struct {\n    ListNode* top;\n} MyStack;\n\nMyStack* myStackCreate() {\n    MyStack* stk = calloc(1, sizeof(MyStack));\n    return stk;\n}\n\nvoid myStackPush(MyStack* obj, int x) {\n    ListNode* node = malloc(sizeof(ListNode));\n    node->val = x;\n    node->next = obj->top;\n    obj->top = node;\n}\n\nint myStackPop(MyStack* obj) {\n    ListNode* node = obj->top;\n    int val = node->val;\n    obj->top = node->next;\n    free(node);\n\n    return val;\n}\n\nint myStackTop(MyStack* obj) {\n    return obj->top->val;\n}\n\nbool myStackEmpty(MyStack* obj) {\n    return (obj->top == NULL);\n}\n\nvoid myStackFree(MyStack* obj) {\n    while (obj->top != NULL) {\n        ListNode* node = obj->top;\n        obj->top = obj->top->next;\n        free(node);\n    }\n    free(obj);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：入栈操作 $O(n)$，其余操作都是 $O(1)$，其中 $n$ 是栈内的元素个数。\n  入栈操作需要将队列中的 $n$ 个元素出队，并入队 $n+1$ 个元素到队列，共有 $2n+1$ 次操作，每次出队和入队操作的时间复杂度都是 $O(1)$，因此入栈操作的时间复杂度是 $O(n)$。\n  出栈操作对应将队列的前端元素出队，时间复杂度是 $O(1)$。\n  获得栈顶元素操作对应获得队列的前端元素，时间复杂度是 $O(1)$。\n  判断栈是否为空操作只需要判断队列是否为空，时间复杂度是 $O(1)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是栈内的元素个数。需要使用一个队列存储栈内的元素。"
}