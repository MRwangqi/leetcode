{
	"titleSlug": "maximum-length-of-subarray-with-positive-product",
	"slug": "cheng-ji-wei-zheng-shu-de-zui-chang-zi-shu-zu-ch-3",
	"url": "https://leetcode-cn.com/problems/maximum-length-of-subarray-with-positive-product/solution/cheng-ji-wei-zheng-shu-de-zui-chang-zi-shu-zu-ch-3/",
	"content": "#### 方法一：动态规划\n\n可以使用动态规划得到乘积为正数的最长子数组长度。定义两个数组 $\\textit{positive}$ 和 $\\textit{negative}$，其中 $\\textit{positive}[i]$ 表示以下标 $i$ 结尾的乘积为正数的最长子数组长度，$\\textit{negative}[i]$ 表示乘积为负数的最长子数组长度。\n\n当 $i=0$ 时，以下标 $i$ 结尾的子数组的长度为 $1$，因此当 $\\textit{nums}[0]>0$ 时 $\\textit{positive}[0]=1$，当 $\\textit{nums}[0]<0$ 时 $\\textit{negative}[0]=1$。\n\n当 $i>1$ 时，根据 $\\textit{nums}[i]$ 的值计算 $\\textit{positive}[i]$ 和 $\\textit{negative}[i]$ 的值。\n\n- 当 $\\textit{nums}[i]>0$ 时，之前的乘积乘以 $\\textit{nums}[i]$ 不会改变乘积的正负性。\n\n  $\\textit{positive}[i]$ 的计算为：\n\n  $$\n  \\textit{positive}[i]=\\textit{positive}[i-1]+1\n  $$\n\n  $\\textit{negative}[i]$ 的计算为：\n\n  $$\n  \\textit{negative}[i]=\\begin{cases}\n    \\textit{negative}[i-1]+1, & \\textit{negative}[i-1]>0 \\\\\n    0, & \\textit{negative}[i-1] = 0\n  \\end{cases}\n  $$\n\n  这是因为当 $\\textit{negative}[i-1]=0$ 时，$\\textit{negative}[i]$ 本身无法形成一个乘积为正数的子数组，所以要特殊判断。\n\n- 当 $\\textit{nums}[i]<0$ 时，之前的乘积乘以 $\\textit{nums}[i]$ 会改变乘积的正负性。\n\n  $\\textit{positive}[i]$ 的计算为：\n\n  $$\n  \\textit{positive}[i]=\\begin{cases}\n    \\textit{negative}[i-1]+1, & \\textit{negative}[i-1]>0 \\\\\n    0, & \\textit{negative}[i-1] = 0\n  \\end{cases}\n  $$\n\n  这是因为当 $\\textit{negative}[i-1]=0$ 时，$\\textit{positive}[i]$ 本身无法形成一个乘积为负数的子数组，所以要特殊判断。\n\n  $\\textit{negative}[i]$ 的计算为：\n\n  $$\n  \\textit{negative}[i]=\\textit{positive}[i-1]+1\n  $$\n\n- 当 $\\textit{nums}[i]=0$ 时，以下标 $i$ 结尾的子数组的元素乘积一定为 $0$，因此有 $\\textit{positive}[i]=0$ 和 $\\textit{negative}[i]=0$。\n\n在计算 $\\textit{positive}$ 和 $\\textit{negative}$ 两个数组的过程中维护乘积为正数的最长子数组长度，当遍历结束时，即可得到最长子数组长度。\n\n```Java [sol11-Java]\nclass Solution {\n    public int getMaxLen(int[] nums) {\n        int length = nums.length;\n        int[] positive = new int[length];\n        int[] negative = new int[length];\n        if (nums[0] > 0) {\n            positive[0] = 1;\n        } else if (nums[0] < 0) {\n            negative[0] = 1;\n        }\n        int maxLength = positive[0];\n        for (int i = 1; i < length; i++) {\n            if (nums[i] > 0) {\n                positive[i] = positive[i - 1] + 1;\n                negative[i] = negative[i - 1] > 0 ? negative[i - 1] + 1 : 0;\n            } else if (nums[i] < 0) {\n                positive[i] = negative[i - 1] > 0 ? negative[i - 1] + 1 : 0;\n                negative[i] = positive[i - 1] + 1;\n            } else {\n                positive[i] = 0;\n                negative[i] = 0;\n            }\n            maxLength = Math.max(maxLength, positive[i]);\n        }\n        return maxLength;\n    }\n}\n```\n\n```C++ [sol11-C++]\nclass Solution {\npublic:\n    int getMaxLen(vector<int>& nums) {\n        int length = nums.size();\n        vector<int> positive(length), negative(length);\n        if (nums[0] > 0) {\n            positive[0] = 1;\n        }\n        else if (nums[0] < 0) {\n            negative[0] = 1;\n        }\n        int maxLength = positive[0];\n        for (int i = 1; i < length; ++i) {\n            if (nums[i] > 0) {\n                positive[i] = positive[i - 1] + 1;\n                negative[i] = (negative[i - 1] > 0 ? negative[i - 1] + 1 : 0);\n            }\n            else if (nums[i] < 0) {\n                positive[i] = (negative[i - 1] > 0 ? negative[i - 1] + 1 : 0);\n                negative[i] = positive[i - 1] + 1;\n            }\n            else {\n                positive[i] = 0;\n                negative[i] = 0;\n            }\n            maxLength = max(maxLength, positive[i]);\n        }\n        return maxLength;\n    }\n};\n```\n\n```Python [sol11-Python3]\nclass Solution:\n    def getMaxLen(self, nums: List[int]) -> int:\n        length = len(nums)\n        positive, negative = [0] * length, [0] * length\n        if nums[0] > 0:\n            positive[0] = 1\n        elif nums[0] < 0:\n            negative[0] = 1\n        \n        maxLength = positive[0]\n        for i in range(1, length):\n            if nums[i] > 0:\n                positive[i] = positive[i - 1] + 1\n                negative[i] = (negative[i - 1] + 1 if negative[i - 1] > 0 else 0)\n            elif nums[i] < 0:\n                positive[i] = (negative[i - 1] + 1 if negative[i - 1] > 0 else 0)\n                negative[i] = positive[i - 1] + 1\n            else:\n                positive[i] = negative[i] = 0\n            maxLength = max(maxLength, positive[i])\n\n        return maxLength\n```\n\n注意到 $\\textit{positive}[i]$ 和 $\\textit{negative}[i]$ 的值只与 $\\textit{positive}[i-1]$ 和 $\\textit{negative}[i-1]$ 有关，因此可以使用滚动数组优化空间。\n\n```Java [sol12-Java]\nclass Solution {\n    public int getMaxLen(int[] nums) {\n        int length = nums.length;\n        int positive = nums[0] > 0 ? 1 : 0;\n        int negative = nums[0] < 0 ? 1 : 0;\n        int maxLength = positive;\n        for (int i = 1; i < length; i++) {\n            if (nums[i] > 0) {\n                positive++;\n                negative = negative > 0 ? negative + 1 : 0;\n            } else if (nums[i] < 0) {\n                int newPositive = negative > 0 ? negative + 1 : 0;\n                int newNegative = positive + 1;\n                positive = newPositive;\n                negative = newNegative;\n            } else {\n                positive = 0;\n                negative = 0;\n            }\n            maxLength = Math.max(maxLength, positive);\n        }\n        return maxLength;\n    }\n}\n```\n\n```C++ [sol12-C++]\nclass Solution {\npublic:\n    int getMaxLen(vector<int>& nums) {\n        int length = nums.size();\n        int positive = (nums[0] > 0);\n        int negative = (nums[0] < 0);\n        int maxLength = positive;\n        for (int i = 1; i < length; ++i) {\n            if (nums[i] > 0) {\n                ++positive;\n                negative = (negative > 0 ? negative + 1 : 0);\n            }\n            else if (nums[i] < 0) {\n                int newPositive = negative > 0 ? negative + 1 : 0;\n                int newNegative = positive + 1;\n                tie(positive, negative) = {newPositive, newNegative};\n            }\n            else {\n                positive = negative = 0;\n            }\n            maxLength = max(maxLength, positive);\n        }\n        return maxLength;\n    }\n};\n```\n\n```Python [sol12-Python3]\nclass Solution:\n    def getMaxLen(self, nums: List[int]) -> int:\n        length = len(nums)\n        positive, negative = int(nums[0] > 0), int(nums[0] < 0)\n        maxLength = positive\n\n        for i in range(1, length):\n            if nums[i] > 0:\n                positive += 1\n                negative = (negative + 1 if negative > 0 else 0)\n            elif nums[i] < 0:\n                newPositive = (negative + 1 if negative > 0 else 0)\n                newNegative = positive + 1\n                positive, negative = newPositive, newNegative\n            else:\n                positive = negative = 0\n            maxLength = max(maxLength, positive)\n\n        return maxLength\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组的长度。遍历数组一次，在遍历过程中维护最长子数组长度，对于数组中的每个元素的时间复杂度都是 $O(1)$，因此总时间复杂度是 $O(n)$。\n\n- 空间复杂度：$O(1)$。通过滚动数组实现，只需要使用常数的额外空间。"
}