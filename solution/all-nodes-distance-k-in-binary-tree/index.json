{
	"titleSlug": "all-nodes-distance-k-in-binary-tree",
	"slug": "er-cha-shu-zhong-suo-you-ju-chi-wei-k-de-qbla",
	"url": "https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/solution/er-cha-shu-zhong-suo-you-ju-chi-wei-k-de-qbla/",
	"content": "#### 方法一：深度优先搜索 + 哈希表\n\n若将 $\\textit{target}$ 当作树的根结点，我们就能从 $\\textit{target}$ 出发，使用深度优先搜索去寻找与 $\\textit{target}$ 距离为 $k$ 的所有结点，即深度为 $k$ 的所有结点。\n\n由于输入的二叉树没有记录父结点，为此，我们从根结点 $\\textit{root}$ 出发，使用深度优先搜索遍历整棵树，同时用一个哈希表记录每个结点的父结点。\n\n然后从 $\\textit{target}$ 出发，使用深度优先搜索遍历整棵树，除了搜索左右儿子外，还可以顺着父结点向上搜索。\n\n代码实现时，由于每个结点值都是唯一的，哈希表的键可以用结点值代替。此外，为避免在深度优先搜索时重复访问结点，递归时额外传入来源结点 $\\textit{from}$，在递归前比较目标结点是否与来源结点相同，不同的情况下才进行递归。\n\n```C++ [sol1-C++]\nclass Solution {\n    unordered_map<int, TreeNode*> parents;\n    vector<int> ans;\n\n    void findParents(TreeNode* node) {\n        if (node->left != nullptr) {\n            parents[node->left->val] = node;\n            findParents(node->left);\n        }\n        if (node->right != nullptr) {\n            parents[node->right->val] = node;\n            findParents(node->right);\n        }\n    }\n\n    void findAns(TreeNode* node, TreeNode* from, int depth, int k) {\n        if (node == nullptr) {\n            return;\n        }\n        if (depth == k) {\n            ans.push_back(node->val);\n            return;\n        }\n        if (node->left != from) {\n            findAns(node->left, node, depth + 1, k);\n        }\n        if (node->right != from) {\n            findAns(node->right, node, depth + 1, k);\n        }\n        if (parents[node->val] != from) {\n            findAns(parents[node->val], node, depth + 1, k);\n        }\n    }\n\npublic:\n    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {\n        // 从 root 出发 DFS，记录每个结点的父结点\n        findParents(root);\n\n        // 从 target 出发 DFS，寻找所有深度为 k 的结点\n        findAns(target, nullptr, 0, k);\n\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    Map<Integer, TreeNode> parents = new HashMap<Integer, TreeNode>();\n    List<Integer> ans = new ArrayList<Integer>();\n\n    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {\n        // 从 root 出发 DFS，记录每个结点的父结点\n        findParents(root);\n\n        // 从 target 出发 DFS，寻找所有深度为 k 的结点\n        findAns(target, null, 0, k);\n\n        return ans;\n    }\n\n    public void findParents(TreeNode node) {\n        if (node.left != null) {\n            parents.put(node.left.val, node);\n            findParents(node.left);\n        }\n        if (node.right != null) {\n            parents.put(node.right.val, node);\n            findParents(node.right);\n        }\n    }\n\n    public void findAns(TreeNode node, TreeNode from, int depth, int k) {\n        if (node == null) {\n            return;\n        }\n        if (depth == k) {\n            ans.add(node.val);\n            return;\n        }\n        if (node.left != from) {\n            findAns(node.left, node, depth + 1, k);\n        }\n        if (node.right != from) {\n            findAns(node.right, node, depth + 1, k);\n        }\n        if (parents.get(node.val) != from) {\n            findAns(parents.get(node.val), node, depth + 1, k);\n        }\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    Dictionary<int, TreeNode> parents = new Dictionary<int, TreeNode>();\n    IList<int> ans = new List<int>();\n\n    public IList<int> DistanceK(TreeNode root, TreeNode target, int k) {\n        // 从 root 出发 DFS，记录每个结点的父结点\n        FindParents(root);\n\n        // 从 target 出发 DFS，寻找所有深度为 k 的结点\n        FindAns(target, null, 0, k);\n\n        return ans;\n    }\n\n    public void FindParents(TreeNode node) {\n        if (node.left != null) {\n            parents.Add(node.left.val, node);\n            FindParents(node.left);\n        }\n        if (node.right != null) {\n            parents.Add(node.right.val, node);\n            FindParents(node.right);\n        }\n    }\n\n    public void FindAns(TreeNode node, TreeNode from, int depth, int k) {\n        if (node == null) {\n            return;\n        }\n        if (depth == k) {\n            ans.Add(node.val);\n            return;\n        }\n        if (node.left != from) {\n            FindAns(node.left, node, depth + 1, k);\n        }\n        if (node.right != from) {\n            FindAns(node.right, node, depth + 1, k);\n        }\n        TreeNode parent = parents.ContainsKey(node.val) ? parents[node.val] : null;\n        if (parent != from) {\n            FindAns(parent, node, depth + 1, k);\n        }\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc distanceK(root, target *TreeNode, k int) (ans []int) {\n    // 从 root 出发 DFS，记录每个结点的父结点\n    parents := map[int]*TreeNode{}\n    var findParents func(*TreeNode)\n    findParents = func(node *TreeNode) {\n        if node.Left != nil {\n            parents[node.Left.Val] = node\n            findParents(node.Left)\n        }\n        if node.Right != nil {\n            parents[node.Right.Val] = node\n            findParents(node.Right)\n        }\n    }\n    findParents(root)\n\n    // 从 target 出发 DFS，寻找所有深度为 k 的结点\n    var findAns func(*TreeNode, *TreeNode, int)\n    findAns = func(node, from *TreeNode, depth int) {\n        if node == nil {\n            return\n        }\n        if depth == k { // 将所有深度为 k 的结点的值计入结果\n            ans = append(ans, node.Val)\n            return\n        }\n        if node.Left != from {\n            findAns(node.Left, node, depth+1)\n        }\n        if node.Right != from {\n            findAns(node.Right, node, depth+1)\n        }\n        if parents[node.Val] != from {\n            findAns(parents[node.Val], node, depth+1)\n        }\n    }\n    findAns(target, nil, 0)\n    return\n}\n```\n\n```C [sol1-C]\nstruct HashTable {\n    int key;\n    struct TreeNode* val;\n    UT_hash_handle hh;\n};\n\nvoid modify(struct HashTable** hashTable, int ikey, struct HashTable* ival) {\n    struct HashTable* iter;\n    HASH_FIND_INT(*hashTable, &ikey, iter);\n    if (iter == NULL) {\n        iter = malloc(sizeof(struct HashTable));\n        iter->key = ikey;\n        iter->val = ival;\n        HASH_ADD_INT(*hashTable, key, iter);\n    } else {\n        iter->val = ival;\n    }\n}\n\nstruct HashTable* query(struct HashTable** hashTable, int ikey) {\n    struct HashTable* iter;\n    HASH_FIND_INT(*hashTable, &ikey, iter);\n    if (iter == NULL) {\n        return NULL;\n    }\n    return iter->val;\n}\n\nstruct HashTable* parents;\nint* ans;\nint ansSize;\n\nvoid findParents(struct TreeNode* node) {\n    if (node->left != NULL) {\n        modify(&parents, node->left->val, node);\n        findParents(node->left);\n    }\n    if (node->right != NULL) {\n        modify(&parents, node->right->val, node);\n        findParents(node->right);\n    }\n}\n\nvoid findAns(struct TreeNode* node, struct TreeNode* from, int depth, int k) {\n    if (node == NULL) {\n        return;\n    }\n    if (depth == k) {\n        ans[ansSize++] = node->val;\n        return;\n    }\n    if (node->left != from) {\n        findAns(node->left, node, depth + 1, k);\n    }\n    if (node->right != from) {\n        findAns(node->right, node, depth + 1, k);\n    }\n    if (query(&parents, node->val) != from) {\n        findAns(query(&parents, node->val), node, depth + 1, k);\n    }\n}\n\nint* distanceK(struct TreeNode* root, struct TreeNode* target, int k, int* returnSize) {\n    parents = NULL;\n    ans = malloc(sizeof(int) * 500);\n    ansSize = 0;\n\n    // 从 root 出发 DFS，记录每个结点的父结点\n    findParents(root);\n\n    // 从 target 出发 DFS，寻找所有深度为 k 的结点\n    findAns(target, NULL, 0, k);\n\n    *returnSize = ansSize;\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar distanceK = function(root, target, k) {\n    const parents = new Map();\n    const ans = [];\n\n    const findParents = (node) => {\n        if (node.left != null) {\n            parents.set(node.left.val, node);\n            findParents(node.left);\n        }\n        if (node.right != null) {\n            parents.set(node.right.val, node);\n            findParents(node.right);\n        }\n    }\n\n    // 从 root 出发 DFS，记录每个结点的父结点\n    findParents(root);\n\n    const findAns = (node, from, depth, k) => {\n        if (node == null) {\n            return;\n        }\n        if (depth === k) {\n            ans.push(node.val);\n            return;\n        }\n        if (node.left !== from) {\n            findAns(node.left, node, depth + 1, k);\n        }\n        if (node.right !== from) {\n            findAns(node.right, node, depth + 1, k);\n        }\n        if (parents.get(node.val) !== from) {\n            findAns(parents.get(node.val), node, depth + 1, k);\n        }\n    }\n    // 从 target 出发 DFS，寻找所有深度为 k 的结点\n    findAns(target, null, 0, k);\n\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树的结点个数。需要执行两次深度优先搜索，每次的时间复杂度均为 $O(n)$。\n\n- 空间复杂度：$O(n)$。记录父节点需要 $O(n)$ 的空间，深度优先搜索需要 $O(n)$ 的栈空间。"
}