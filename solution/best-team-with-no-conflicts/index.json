{
	"titleSlug": "best-team-with-no-conflicts",
	"slug": "pai-xu-dong-tai-gui-hua-by-lucifer1004",
	"url": "https://leetcode-cn.com/problems/best-team-with-no-conflicts/solution/pai-xu-dong-tai-gui-hua-by-lucifer1004/",
	"content": "### 解题思路\n\n本题的数据范围显然不可能支持我们进行所有子集的枚举。我们希望找到一种顺序，使得我们在进行选择时，总是不会发生冲突。\n\n我们可以将所有队员按照年龄升序进行排序，年龄相同时，则按照分数升序进行排序。排序之后，我们可以进行动态规划。令 $dp[i]$ 表示最后一个队员是第$i$个队员时的最大分数（这里的 $i$ 是重新排序后的编号）。我们只需要在 $[0,i-1]$ 的范围内枚举上一个队员即可。这里，如果上一个队员的分数不超过当前队员的分数，就可以进行转移。\n\n为什么这样的枚举一定是合法的呢？因为我们的最大分数总是在最后一个队员处取得（对于相同年龄的，我们是按照分数升序排序的，所以分数较高的一定在更后面），同时第 $i$ 个队员的年龄不小于之前任意队员的年龄，所以只要第 $i$ 个队员的分数大于等于之前的分组中最后一个队员的分数，就一定可以将第 $i$ 个队员加入到组里，从而得到一个以第 $i$ 个队员为最后一名队员的新的组。\n\n### 复杂度\n\n- 时间复杂度 $O(N^2)$\n- 空间复杂度 $O(N)$\n\n### 代码\n\n```cpp\nclass Solution {\npublic:\n    int bestTeamScore(vector<int>& scores, vector<int>& ages) {\n        int n = scores.size();\n        vector<int> order(n);\n        for (int i = 0; i < n; ++i)\n            order[i] = i;\n        sort(order.begin(), order.end(), [&](int i, int j){\n            return ages[i] < ages[j] || (ages[i] == ages[j] && scores[i] < scores[j]);\n        });\n        vector<int> dp(n);\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            int idx = order[i];\n            dp[i] = scores[idx];\n            for (int j = 0; j < i; ++j) {\n                int last = order[j];\n                if (scores[last] <= scores[idx])\n                    dp[i] = max(dp[i], dp[j] + scores[idx]);\n            }\n            ans = max(ans, dp[i]);\n        }\n        return ans;\n    }\n};\n```\n持续更新更多优质题解，欢迎 🌟[关注我](https://leetcode-cn.com/u/lucifer1004/)"
}