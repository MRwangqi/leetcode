{
	"titleSlug": "jump-game-iii",
	"slug": "tiao-yue-you-xi-iii-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/jump-game-iii/solution/tiao-yue-you-xi-iii-by-leetcode-solution/",
	"content": "#### 方法一：广度优先搜索\n\n我们可以使用广度优先搜索的方法得到从 `start` 开始能够到达的所有位置，如果其中某个位置对应的元素值为 `0`，那么就返回 `True`。\n\n具体地，我们初始时将 `start` 加入队列。在每一次的搜索过程中，我们取出队首的节点 `u`，它可以到达的位置为 `u + arr[u]` 和 `u - arr[u]`。如果某个位置落在数组的下标范围 `[0, len(arr))` 内，并且没有被搜索过，则将该位置加入队尾。只要我们搜索到一个对应元素值为 `0` 的位置，我们就返回 `True`。在搜索结束后，如果仍然没有找到符合要求的位置，我们就返回 `False`。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool canReach(vector<int>& arr, int start) {\n        if (arr[start] == 0) {\n            return true;\n        }\n        \n        int n = arr.size();\n        vector<bool> used(n);\n        queue<int> q;\n        q.push(start);\n        used[start] = true;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            if (u + arr[u] < n && !used[u + arr[u]]) {\n                if (arr[u + arr[u]] == 0) {\n                    return true;\n                }\n                q.push(u + arr[u]);\n                used[u + arr[u]] = true;\n            }\n            if (u - arr[u] >= 0 && !used[u - arr[u]]) {\n                if (arr[u - arr[u]] == 0) {\n                    return true;\n                }\n                q.push(u - arr[u]);\n                used[u - arr[u]] = true;\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n        if arr[start] == 0:\n            return True\n\n        n = len(arr)\n        used = {start}\n        q = collections.deque([start])\n\n        while len(q) > 0:\n            u = q.popleft()\n            for v in [u + arr[u], u - arr[u]]:\n                if 0 <= v < n and v not in used:\n                    if arr[v] == 0:\n                        return True\n                    q.append(v)\n                    used.add(v)\n        \n        return False\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是数组 `arr` 的长度。\n\n- 空间复杂度：$O(N)$。"
}