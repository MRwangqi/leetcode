{
	"titleSlug": "truncate-sentence",
	"slug": "jie-duan-ju-zi-by-leetcode-solution-d4ts",
	"url": "https://leetcode-cn.com/problems/truncate-sentence/solution/jie-duan-ju-zi-by-leetcode-solution-d4ts/",
	"content": "#### 方法一：遍历\n\n**思路与算法**\n\n由题意可知，除了最后一个单词，每个单词后面都跟随一个空格。因此我们可以通过统计空格与句子结尾的数目来统计单词数 $\\textit{count}$。当 $\\textit{count}=\\textit{k}$ 时，将当前的下标记录到 $\\textit{end}$，返回句子 $\\textit{s}$ 在 $\\textit{end}$ 处截断的句子。\n\n**代码**\n\n```C [sol1-C]\nchar * truncateSentence(char * s, int k){\n    int n = strlen(s);\n    int end = 0, count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i == n || s[i] == ' ') {\n            count++;\n            if (count == k) {\n                end = i;\n                break;\n            }\n        }\n    }\n    s[end] = '\\0';\n    return s;\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string truncateSentence(string s, int k) {\n        int n = s.size();\n        int end = 0, count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == n || s[i] == ' ') {\n                count++;\n                if (count == k) {\n                    end = i;\n                    break;\n                }\n            }\n        }\n        return s.substr(0, end);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String truncateSentence(String s, int k) {\n        int n = s.length();\n        int end = 0, count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == n || s.charAt(i) == ' ') {\n                count++;\n                if (count == k) {\n                    end = i;\n                    break;\n                }\n            }\n        }\n        return s.substring(0, end);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string TruncateSentence(string s, int k) {\n        int n = s.Length;\n        int end = 0, count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == n || s[i] == ' ') {\n                count++;\n                if (count == k) {\n                    end = i;\n                    break;\n                }\n            }\n        }\n        return s.Substring(0, end);\n    }\n}\n```\n\n```Go [sol1-Golang]\nfunc truncateSentence(s string, k int) string {\n    n, end, count := len(s), 0, 0\n    for i := 1; i <= n; i++ {\n        if i == n || s[i] == ' ' {\n            count++\n            if count == k {\n                end = i\n                break\n            }\n        }\n    }\n    return s[:end]\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar truncateSentence = function(s, k) {\n    const n = s.length;\n    let end = 0, count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i === n || s[i] === ' ') {\n            count++;\n            if (count === k) {\n                end = i;\n                break;\n            }\n        }\n    }\n    return s.slice(0, end);\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def truncateSentence(self, s: str, k: int) -> str:\n        n, end, count = len(s), 0, 0\n        for i in range(1, n + 1):\n            if i == n or s[i] == ' ':\n                count += 1\n                if count == k:\n                    end = i\n                    break\n        return s[:end]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为句子 $\\textit{s}$ 的长度。遍历整个字符串需要 $O(N)$。\n\n- 空间复杂度：$O(1)$。注意返回值不计入空间复杂度。"
}