{
	"titleSlug": "maximum-difference-between-node-and-ancestor",
	"slug": "jie-dian-yu-qi-zu-xian-zhi-jian-de-zui-d-85hf",
	"url": "https://leetcode-cn.com/problems/maximum-difference-between-node-and-ancestor/solution/jie-dian-yu-qi-zu-xian-zhi-jian-de-zui-d-85hf/",
	"content": "\n```cpp\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int res=0;\n    pair<int,int> dfs(TreeNode* root){\n        if(!root->left&&!root->right){\n            return make_pair(root->val,root->val);\n        }\n        else if(root->left&&!root->right){\n            pair<int,int> l=dfs(root->left);\n            res=max(res,max(abs(root->val-l.first),abs(root->val-l.second)));\n            return make_pair(max(root->val,l.first),min(root->val,l.second));\n        }\n        else if(!root->left&&root->right){\n            pair<int,int> r=dfs(root->right);\n            res=max(res,max(abs(root->val-r.first),abs(root->val-r.second)));\n            return make_pair(max(root->val,r.first),min(root->val,r.second));\n        }\n        else{\n            pair<int,int> l=dfs(root->left);\n            pair<int,int> r=dfs(root->right);\n            int l1=max(l.first,r.first);\n            int r1=min(l.second,r.second);\n            res=max(res,max(abs(root->val-l1),abs(root->val-r1)));\n            return make_pair(max(root->val,l1),min(root->val,r1));\n        }\n    }\n    int maxAncestorDiff(TreeNode* root) {\n        dfs(root);\n        return res;\n    }\n};\n```"
}