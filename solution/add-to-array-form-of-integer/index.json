{
	"titleSlug": "add-to-array-form-of-integer",
	"slug": "shu-zu-xing-shi-de-zheng-shu-jia-fa-by-l-jljp",
	"url": "https://leetcode-cn.com/problems/add-to-array-form-of-integer/solution/shu-zu-xing-shi-de-zheng-shu-jia-fa-by-l-jljp/",
	"content": "#### 方法一：逐位相加\n\n**思路**\n\n让我们逐位将数字加在一起。例如计算 $123+912$，我们从低位到高位依次计算 $3+2$、$2+1$ 和 $1+9$。任何时候，若加法的结果大于等于 $10$，把进位的 $1$ 加入到下一位的计算中，所以最终结果为 $1035$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res;\n        int n = num.size();\n        for (int i = n - 1; i >= 0; --i) {\n            int sum = num[i] + k % 10;\n            k /= 10;\n            if (sum >= 10) {\n                k++;\n                sum -= 10;\n            }\n            res.push_back(sum);\n        }\n        for (; k > 0; k /= 10) {\n            res.push_back(k % 10);\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<Integer>();\n        int n = num.length;\n        for (int i = n - 1; i >= 0; --i) {\n            int sum = num[i] + k % 10;\n            k /= 10;\n            if (sum >= 10) {\n                k++;\n                sum -= 10;\n            }\n            res.add(sum);\n        }\n        for (; k > 0; k /= 10) {\n            res.add(k % 10);\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc addToArrayForm(num []int, k int) (ans []int) {\n    for i := len(num) - 1; i >= 0; i-- {\n        sum := num[i] + k%10\n        k /= 10\n        if sum >= 10 {\n            k++\n            sum -= 10\n        }\n        ans = append(ans, sum)\n    }\n    for ; k > 0; k /= 10 {\n        ans = append(ans, k%10)\n    }\n    reverse(ans)\n    return\n}\n\nfunc reverse(num []int) {\n    for i, n := 0, len(num); i < n/2; i++ {\n        num[i], num[n-1-i] = num[n-1-i], num[i]\n    }\n}\n```\n\n```C [sol1-C]\nint* addToArrayForm(int* num, int numSize, int k, int* returnSize) {\n    int* res = malloc(sizeof(int) * fmax(10, numSize + 1));\n    *returnSize = 0;\n    for (int i = numSize - 1; i >= 0; --i) {\n        int sum = num[i] + k % 10;\n        k /= 10;\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res[(*returnSize)++] = sum;\n    }\n    for (; k > 0; k /= 10) {\n        res[(*returnSize)++] = k % 10;\n    }\n    for (int i = 0; i < (*returnSize) / 2; i++) {\n        int tmp = res[i];\n        res[i] = res[(*returnSize) - 1 - i];\n        res[(*returnSize) - 1 - i] = tmp;\n    }\n    return res;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar addToArrayForm = function(num, k) {\n    const res = [];\n    const n = num.length;\n    for (let i = n - 1; i >= 0; --i) {\n        let sum = num[i] + k % 10;\n        k = Math.floor(k / 10);\n        if (sum >= 10) {\n            k++;\n            sum -= 10;\n        }\n        res.push(sum);\n    }\n    for (; k > 0; k = Math.floor(k / 10)) {\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n```\n\n另一个思路是将整个加数 $k$ 加入数组表示的数的最低位。\n\n上面的例子 $123+912$，我们把它表示成 $[1,2,3+912]$。然后，我们计算 $3+912=915$。$5$ 留在当前这一位，将 $910/10=91$ 以进位的形式加入下一位。\n\n然后，我们再重复这个过程，计算 $[1,2+91,5]$。我们得到 $93$，$3$ 留在当前位，将 $90/10=9$ 以进位的形式加入下一位。继而又得到 $[1+9,3,5]$，重复这个过程之后，最终得到结果 $[1,0,3,5]$。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res;\n        int n = num.size();\n        for (int i = n - 1; i >= 0 || k > 0; --i, k /= 10) {\n            if (i >= 0) {\n                k += num[i];\n            }\n            res.push_back(k % 10);\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> res = new ArrayList<Integer>();\n        int n = num.length;\n        for (int i = n - 1; i >= 0 || k > 0; --i, k /= 10) {\n            if (i >= 0) {\n                k += num[i];\n            }\n            res.add(k % 10);\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc addToArrayForm(num []int, k int) (ans []int) {\n    for i := len(num) - 1; i >= 0 || k > 0; i-- {\n        if i >= 0 {\n            k += num[i]\n        }\n        ans = append(ans, k%10)\n        k /= 10\n    }\n    reverse(ans)\n    return\n}\n\nfunc reverse(num []int) {\n    for i, n := 0, len(num); i < n/2; i++ {\n        num[i], num[n-1-i] = num[n-1-i], num[i]\n    }\n}\n```\n\n```C [sol2-C]\nint* addToArrayForm(int* num, int numSize, int k, int* returnSize) {\n    int* res = malloc(sizeof(int) * fmax(10, numSize + 1));\n    *returnSize = 0;\n    for (int i = numSize - 1; i >= 0 || k > 0; --i, k /= 10) {\n        if (i >= 0) {\n            k += num[i];\n        }\n        res[(*returnSize)++] = k % 10;\n    }\n\n    for (int i = 0; i < (*returnSize) / 2; i++) {\n        int tmp = res[i];\n        res[i] = res[(*returnSize) - 1 - i];\n        res[(*returnSize) - 1 - i] = tmp;\n    }\n    return res;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar addToArrayForm = function(num, k) {\n    const res = [];\n    const n = num.length;\n    for (let i = n - 1; i >= 0 || k > 0; --i, k = Math.floor(k / 10)) {\n        if (i >= 0) {\n            k += num[i];\n        }\n        res.push(k % 10);\n    }\n    res.reverse();\n    return res;\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\max(n,\\log k))$，其中 $n$ 为数组的长度。\n\n* 空间复杂度：$O(1)$。除了返回值以外，使用的空间为常数。"
}