{
	"titleSlug": "most-profit-assigning-work",
	"slug": "an-pai-gong-zuo-yi-da-dao-zui-da-shou-yi-by-leetco",
	"url": "https://leetcode-cn.com/problems/most-profit-assigning-work/solution/an-pai-gong-zuo-yi-da-dao-zui-da-shou-yi-by-leetco/",
	"content": "\n#### 方法：排序\n\n**想法**\n\n我们可以以任意顺序考虑工人，所以我们按照能力大小排序。\n\n如果我们先访问低难度的工作，那么收益一定是截至目前最好的。\n\n**算法**\n\n我们使用 “双指针” 的方法去安排任务。我们记录最大可用利润 `best`。对于每个能力值为 `skill` 的工人，找到难度小于等于能力值的任务，并将如结果中。\n\n```Java []\nimport java.awt.Point;\n\nclass Solution {\n    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n        int N = difficulty.length;\n        Point[] jobs = new Point[N];\n        for (int i = 0; i < N; ++i)\n            jobs[i] = new Point(difficulty[i], profit[i]);\n        Arrays.sort(jobs, (a, b) -> a.x - b.x);\n        Arrays.sort(worker);\n\n        int ans = 0, i = 0, best = 0;\n        for (int skill: worker) {\n            while (i < N && skill >= jobs[i].x)\n                best = Math.max(best, jobs[i++].y);\n            ans += best;\n        }\n\n        return ans;\n    }\n}\n```\n\n```Python []\nclass Solution(object):\n    def maxProfitAssignment(self, difficulty, profit, worker):\n        jobs = zip(difficulty, profit)\n        jobs.sort()\n        ans = i = best = 0\n        for skill in sorted(worker):\n            while i < len(jobs) and skill >= jobs[i][0]:\n                best = max(best, jobs[i][1])\n                i += 1\n            ans += best\n        return ans\n\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log N + Q \\log Q)$，其中 $N$ 是任务个数，$Q$ 是工人数量。\n* 空间复杂度：$O(N)$，`jobs` 的额外空间。"
}