{
	"titleSlug": "longest-palindromic-subsequence",
	"slug": "zui-chang-hui-wen-zi-xu-lie-by-leetcode-hcjqp",
	"url": "https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/zui-chang-hui-wen-zi-xu-lie-by-leetcode-hcjqp/",
	"content": "#### 方法一：动态规划\n\n对于一个子序列而言，如果它是回文子序列，并且长度大于 $2$，那么将它首尾的两个字符去除之后，它仍然是个回文子序列。因此可以用动态规划的方法计算给定字符串的最长回文子序列。\n\n用 $\\textit{dp}[i][j]$ 表示字符串 $s$ 的下标范围 $[i, j]$ 内的最长回文子序列的长度。假设字符串 $s$ 的长度为 $n$，则只有当 $0 \\le i \\le j < n$ 时，才会有 $\\textit{dp}[i][j] > 0$，否则 $\\textit{dp}[i][j] = 0$。\n\n由于任何长度为 $1$ 的子序列都是回文子序列，因此动态规划的边界情况是，对任意 $0 \\le i < n$，都有 $\\textit{dp}[i][i] = 1$。\n\n当 $i < j$ 时，计算 $\\textit{dp}[i][j]$ 需要分别考虑 $s[i]$ 和 $s[j]$ 相等和不相等的情况：\n\n- 如果 $s[i] = s[j]$，则首先得到 $s$ 的下标范围 $[i+1, j-1]$ 内的最长回文子序列，然后在该子序列的首尾分别添加 $s[i]$ 和 $s[j]$，即可得到 $s$ 的下标范围 $[i, j]$ 内的最长回文子序列，因此 $\\textit{dp}[i][j] = \\textit{dp}[i+1][j-1] + 2$；\n\n- 如果 $s[i] \\ne s[j]$，则 $s[i]$ 和 $s[j]$ 不可能同时作为同一个回文子序列的首尾，因此 $\\textit{dp}[i][j] = \\max(\\textit{dp}[i+1][j], \\textit{dp}[i][j-1])$。\n\n由于状态转移方程都是从长度较短的子序列向长度较长的子序列转移，因此需要注意动态规划的循环顺序。\n\n最终得到 $\\textit{dp}[0][n-1]$ 即为字符串 $s$ 的最长回文子序列的长度。\n\n```Java [sol1-Java]\nclass Solution {\n    public int longestPalindromeSubseq(String s) {\n        int n = s.length();\n        int[][] dp = new int[n][n];\n        for (int i = n - 1; i >= 0; i--) {\n            dp[i][i] = 1;\n            char c1 = s.charAt(i);\n            for (int j = i + 1; j < n; j++) {\n                char c2 = s.charAt(j);\n                if (c1 == c2) {\n                    dp[i][j] = dp[i + 1][j - 1] + 2;\n                } else {\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[0][n - 1];\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int LongestPalindromeSubseq(string s) {\n        int n = s.Length;\n        int[,] dp = new int[n, n];\n        for (int i = n - 1; i >= 0; i--) {\n            dp[i, i] = 1;\n            char c1 = s[i];\n            for (int j = i + 1; j < n; j++) {\n                char c2 = s[j];\n                if (c1 == c2) {\n                    dp[i, j] = dp[i + 1, j - 1] + 2;\n                } else {\n                    dp[i, j] = Math.Max(dp[i + 1, j], dp[i, j - 1]);\n                }\n            }\n        }\n        return dp[0, n - 1];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar longestPalindromeSubseq = function(s) {\n    const n = s.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    for (let i = n - 1; i >= 0; i--) {\n        dp[i][i] = 1;\n        const c1 = s[i];\n        for (let j = i + 1; j < n; j++) {\n            const c2 = s[j];\n            if (c1 === c2) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][n - 1]\n```\n\n```go [sol1-Golang]\nfunc longestPalindromeSubseq(s string) int {\n    n := len(s)\n    dp := make([][]int, n)\n    for i := range dp {\n        dp[i] = make([]int, n)\n    }\n    for i := n - 1; i >= 0; i-- {\n        dp[i][i] = 1\n        for j := i + 1; j < n; j++ {\n            if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        int n = s.length();\n        vector<vector<int>> dp(n, vector<int>(n));\n        for (int i = n - 1; i >= 0; i--) {\n            dp[i][i] = 1;\n            char c1 = s[i];\n            for (int j = i + 1; j < n; j++) {\n                char c2 = s[j];\n                if (c1 == c2) {\n                    dp[i][j] = dp[i + 1][j - 1] + 2;\n                } else {\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[0][n - 1];\n    }\n};\n```\n\n```C [sol1-C]\nint longestPalindromeSubseq(char* s) {\n    int n = strlen(s);\n    int dp[n][n];\n    memset(dp, 0, sizeof(dp));\n    for (int i = n - 1; i >= 0; i--) {\n        dp[i][i] = 1;\n        char c1 = s[i];\n        for (int j = i + 1; j < n; j++) {\n            char c2 = s[j];\n            if (c1 == c2) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = fmax(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是字符串 $s$ 的长度。动态规划需要计算的状态数是 $O(n^2)$。\n\n- 空间复杂度：$O(n^2)$，其中 $n$ 是字符串 $s$ 的长度。需要创建二维数组 $\\textit{dp}$，空间是 $O(n^2)$。"
}