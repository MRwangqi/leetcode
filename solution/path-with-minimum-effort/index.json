{
	"titleSlug": "path-with-minimum-effort",
	"slug": "zui-xiao-ti-li-xiao-hao-lu-jing-by-leetc-3q2j",
	"url": "https://leetcode-cn.com/problems/path-with-minimum-effort/solution/zui-xiao-ti-li-xiao-hao-lu-jing-by-leetc-3q2j/",
	"content": "#### 前言\n\n我们可以将本题抽象成如下的一个图论模型：\n\n- 我们将地图中的每一个格子看成图中的一个节点；\n\n- 我么将两个相邻（左右相邻或者上下相邻）的两个格子对应的节点之间连接一条无向边，边的权值为这两个格子的高度差的绝对值；\n\n- 我们需要找到一条从左上角到右下角的**最短**路径，其中一条路径的长度定义为其经过的所有边权的**最大值**。\n\n由于地图是二维的，我们需要给每个格子对应的节点赋予一个唯一的节点编号。如果地图的行数为 $m$，列数为 $n$，那么位置为 $(i, j)$ 的格子对应的编号为 $i \\times n + j$，这样 $,mn$ 个格子的编号一一对应着 $[0, mn)$ 范围内的所有整数。当然，如果读者使用的语言支持对二元组进行哈希计算、作为下标访问等，则不需要这一步操作。\n\n本篇题解中会介绍三种不同的解决方法。\n\n#### 方法一：二分查找\n\n**思路与算法**\n\n我们可以将这个问题转化成一个「判定性」问题，即：\n\n> 是否存在一条从左上角到右下角的路径，其经过的所有边权的最大值不超过 $x$？\n\n这个判定性问题解决起来并不复杂，我们只要从左上角开始进行深度优先搜索或者广度优先搜索，在搜索的过程中只允许经过边权不超过 $x$ 的边，搜索结束后判断是否能到达右下角即可。\n\n随着 $x$ 的增大，原先可以经过的边仍然会被保留，因此如果当 $x=x_0$ 时，我们可以从左上角到达右下角，那么当 $x > x_0$ 时同样也可以可行的。因此我们可以使用二分查找的方法，找出满足要求的最小的那个 $x$ 值，记为 $x_\\textit{ans}$，那么：\n\n- 当 $x < x_\\textit{ans}$，我们无法从左上角到达右下角；\n\n- 当 $x \\geq x_\\textit{ans}$，我们可以从左上角到达右下角。\n\n由于格子的高度范围为 $[1, 10^6]$，因此我们可以 $[0, 10^6-1]$ 的范围内对 $x$ 进行二分查找。在每一步查找的过程中，我们使用进行深度优先搜索或者广度优先搜索判断是否可以从左上角到达右下角，并根据判定结果更新二分查找的左边界或右边界即可。\n\n**代码**\n\n下面的代码中使用的是广度优先搜索。\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    \npublic:\n    int minimumEffortPath(vector<vector<int>>& heights) {\n        int m = heights.size();\n        int n = heights[0].size();\n        int left = 0, right = 999999, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            queue<pair<int, int>> q;\n            q.emplace(0, 0);\n            vector<int> seen(m * n);\n            seen[0] = 1;\n            while (!q.empty()) {\n                auto [x, y] = q.front();\n                q.pop();\n                for (int i = 0; i < 4; ++i) {\n                    int nx = x + dirs[i][0];\n                    int ny = y + dirs[i][1];\n                    if (nx >= 0 && nx < m && ny >= 0 && ny < n && !seen[nx * n + ny] && abs(heights[x][y] - heights[nx][ny]) <= mid) {\n                        q.emplace(nx, ny);\n                        seen[nx * n + ny] = 1;\n                    }\n                }\n            }\n            if (seen[m * n - 1]) {\n                ans = mid;\n                right = mid - 1;\n            }\n            else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    public int minimumEffortPath(int[][] heights) {\n        int m = heights.length;\n        int n = heights[0].length;\n        int left = 0, right = 999999, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            Queue<int[]> queue = new LinkedList<int[]>();\n            queue.offer(new int[]{0, 0});\n            boolean[] seen = new boolean[m * n];\n            seen[0] = true;\n            while (!queue.isEmpty()) {\n                int[] cell = queue.poll();\n                int x = cell[0], y = cell[1];\n                for (int i = 0; i < 4; ++i) {\n                    int nx = x + dirs[i][0];\n                    int ny = y + dirs[i][1];\n                    if (nx >= 0 && nx < m && ny >= 0 && ny < n && !seen[nx * n + ny] && Math.abs(heights[x][y] - heights[nx][ny]) <= mid) {\n                        queue.offer(new int[]{nx, ny});\n                        seen[nx * n + ny] = true;\n                    }\n                }\n            }\n            if (seen[m * n - 1]) {\n                ans = mid;\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        m, n = len(heights), len(heights[0])\n        left, right, ans = 0, 10**6 - 1, 0\n\n        while left <= right:\n            mid = (left + right) // 2\n            q = collections.deque([(0, 0)])\n            seen = {(0, 0)}\n            \n            while q:\n                x, y = q.popleft()\n                for nx, ny in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]:\n                    if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in seen and abs(heights[x][y] - heights[nx][ny]) <= mid:\n                        q.append((nx, ny))\n                        seen.add((nx, ny))\n            \n            if (m - 1, n - 1) in seen:\n                ans = mid\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar minimumEffortPath = function(heights) {\n    const dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n\n    const m = heights.length, n = heights[0].length;\n    let left = 0, right = 999999, ans = 0;\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        const queue = [[0, 0]];\n        const seen = new Array(m * n).fill(0);\n        seen[0] = 1;\n        while (queue.length) {\n            const [x, y] = queue.shift();\n            for (let i = 0; i < 4; i++) {\n                const nx = x + dirs[i][0];\n                const ny = y + dirs[i][1];\n                if (nx >= 0 && nx < m && ny >= 0 && ny < n && !seen[nx * n + ny] && Math.abs(heights[x][y] - heights[nx][ny]) <= mid) {\n                    queue.push([nx, ny]);\n                    seen[nx * n + ny] = 1;\n                }\n            }\n        }\n        if (seen[m * n - 1]) {\n            ans = mid;\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\ntype pair struct{ x, y int }\nvar dirs = []pair{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\nfunc minimumEffortPath(heights [][]int) int {\n    n, m := len(heights), len(heights[0])\n    return sort.Search(1e6, func(maxHeightDiff int) bool {\n        vis := make([][]bool, n)\n        for i := range vis {\n            vis[i] = make([]bool, m)\n        }\n        vis[0][0] = true\n        queue := []pair{{}}\n        for len(queue) > 0 {\n            p := queue[0]\n            queue = queue[1:]\n            if p.x == n-1 && p.y == m-1 {\n                return true\n            }\n            for _, d := range dirs {\n                x, y := p.x+d.x, p.y+d.y\n                if 0 <= x && x < n && 0 <= y && y < m && !vis[x][y] && abs(heights[x][y]-heights[p.x][p.y]) <= maxHeightDiff {\n                    vis[x][y] = true\n                    queue = append(queue, pair{x, y})\n                }\n            }\n        }\n        return false\n    })\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n```\n\n```C [sol1-C]\nint dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\nint minimumEffortPath(int** heights, int heightsSize, int* heightsColSize) {\n    int m = heightsSize;\n    int n = heightsColSize[0];\n    int left = 0, right = 999999, ans = 0;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        int q[n * m][2];\n        int qleft = 0, qright = 0;\n        q[qright][0] = 0, q[qright++][1] = 0;\n        int seen[m * n];\n        memset(seen, 0, sizeof(seen));\n        seen[0] = 1;\n        while (qleft < qright) {\n            int x = q[qleft][0], y = q[qleft++][1];\n            for (int i = 0; i < 4; ++i) {\n                int nx = x + dirs[i][0];\n                int ny = y + dirs[i][1];\n                if (nx >= 0 && nx < m && ny >= 0 && ny < n && !seen[nx * n + ny] && abs(heights[x][y] - heights[nx][ny]) <= mid) {\n                    q[qright][0] = nx, q[qright++][1] = ny;\n                    seen[nx * n + ny] = 1;\n                }\n            }\n        }\n        if (seen[m * n - 1]) {\n            ans = mid;\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn \\log C)$，其中 $m$ 和 $n$ 分别是地图的行数和列数，$C$ 是格子的最大高度，在本题中 $C$ 不超过 $10^6$。我们需要进行 $O(\\log C)$ 次二分查找，每一步查找的过程中需要使用广度优先搜索，在 $O(mn)$ 的时间判断是否可以从左上角到达右下角，因此总时间复杂度为 $O(mn \\log C)$。\n\n- 空间复杂度：$O(mn)$，即为广度优先搜索中使用的队列需要的空间。\n\n#### 方法二：并查集\n\n**思路与算法**\n\n我们将这 $mn$ 个节点放入并查集中，实时维护它们的连通性。\n\n由于我们需要找到从左上角到右下角的最短路径，因此我们可以将图中的所有边按照权值从小到大进行排序，并依次加入并查集中。当我们加入一条权值为 $x$ 的边之后，如果左上角和右下角从非连通状态变为连通状态，那么 $x$ 即为答案。\n\n**代码**\n\n```C++ [sol2-C++]\n// 并查集模板\nclass UnionFind {\npublic:\n    vector<int> parent;\n    vector<int> size;\n    int n;\n    // 当前连通分量数目\n    int setCount;\n    \npublic:\n    UnionFind(int _n): n(_n), setCount(_n), parent(_n), size(_n, 1) {\n        iota(parent.begin(), parent.end(), 0);\n    }\n    \n    int findset(int x) {\n        return parent[x] == x ? x : parent[x] = findset(parent[x]);\n    }\n    \n    bool unite(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        if (x == y) {\n            return false;\n        }\n        if (size[x] < size[y]) {\n            swap(x, y);\n        }\n        parent[y] = x;\n        size[x] += size[y];\n        --setCount;\n        return true;\n    }\n    \n    bool connected(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        return x == y;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumEffortPath(vector<vector<int>>& heights) {\n        int m = heights.size();\n        int n = heights[0].size();\n        vector<tuple<int, int, int>> edges;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                int id = i * n + j;\n                if (i > 0) {\n                    edges.emplace_back(id - n, id, abs(heights[i][j] - heights[i - 1][j]));\n                }\n                if (j > 0) {\n                    edges.emplace_back(id - 1, id, abs(heights[i][j] - heights[i][j - 1]));\n                }\n            }\n        }\n        sort(edges.begin(), edges.end(), [](const auto& e1, const auto& e2) {\n            auto&& [x1, y1, v1] = e1;\n            auto&& [x2, y2, v2] = e2;\n            return v1 < v2;\n        });\n\n        UnionFind uf(m * n);\n        int ans = 0;\n        for (const auto [x, y, v]: edges) {\n            uf.unite(x, y);\n            if (uf.connected(0, m * n - 1)) {\n                ans = v;\n                break;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int minimumEffortPath(int[][] heights) {\n        int m = heights.length;\n        int n = heights[0].length;\n        List<int[]> edges = new ArrayList<int[]>();\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                int id = i * n + j;\n                if (i > 0) {\n                    edges.add(new int[]{id - n, id, Math.abs(heights[i][j] - heights[i - 1][j])});\n                }\n                if (j > 0) {\n                    edges.add(new int[]{id - 1, id, Math.abs(heights[i][j] - heights[i][j - 1])});\n                }\n            }\n        }\n        Collections.sort(edges, new Comparator<int[]>() {\n            public int compare(int[] edge1, int[] edge2) {\n                return edge1[2] - edge2[2];\n            }\n        });\n\n        UnionFind uf = new UnionFind(m * n);\n        int ans = 0;\n        for (int[] edge : edges) {\n            int x = edge[0], y = edge[1], v = edge[2];\n            uf.unite(x, y);\n            if (uf.connected(0, m * n - 1)) {\n                ans = v;\n                break;\n            }\n        }\n        return ans;\n    }\n}\n\n// 并查集模板\nclass UnionFind {\n    int[] parent;\n    int[] size;\n    int n;\n    // 当前连通分量数目\n    int setCount;\n\n    public UnionFind(int n) {\n        this.n = n;\n        this.setCount = n;\n        this.parent = new int[n];\n        this.size = new int[n];\n        Arrays.fill(size, 1);\n        for (int i = 0; i < n; ++i) {\n            parent[i] = i;\n        }\n    }\n    \n    public int findset(int x) {\n        return parent[x] == x ? x : (parent[x] = findset(parent[x]));\n    }\n    \n    public boolean unite(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        if (x == y) {\n            return false;\n        }\n        if (size[x] < size[y]) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        parent[y] = x;\n        size[x] += size[y];\n        --setCount;\n        return true;\n    }\n    \n    public boolean connected(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        return x == y;\n    }\n}\n```\n\n```Python [sol2-Python3]\n# 并查集模板\nclass UnionFind:\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.n = n\n        # 当前连通分量数目\n        self.setCount = n\n    \n    def findset(self, x: int) -> int:\n        if self.parent[x] == x:\n            return x\n        self.parent[x] = self.findset(self.parent[x])\n        return self.parent[x]\n    \n    def unite(self, x: int, y: int) -> bool:\n        x, y = self.findset(x), self.findset(y)\n        if x == y:\n            return False\n        if self.size[x] < self.size[y]:\n            x, y = y, x\n        self.parent[y] = x\n        self.size[x] += self.size[y]\n        self.setCount -= 1\n        return True\n    \n    def connected(self, x: int, y: int) -> bool:\n        x, y = self.findset(x), self.findset(y)\n        return x == y\n\nclass Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        m, n = len(heights), len(heights[0])\n        edges = list()\n        for i in range(m):\n            for j in range(n):\n                iden = i * n + j\n                if i > 0:\n                    edges.append((iden - n, iden, abs(heights[i][j] - heights[i - 1][j])))\n                if j > 0:\n                    edges.append((iden - 1, iden, abs(heights[i][j] - heights[i][j - 1])))\n        \n        edges.sort(key=lambda e: e[2])\n\n        uf = UnionFind(m * n)\n        ans = 0\n        for x, y, v in edges:\n            uf.unite(x, y)\n            if uf.connected(0, m * n - 1):\n                ans = v\n                break\n        \n        return ans\n```\n\n```JavaScript [sol2-JavaScript]\nvar minimumEffortPath = function(heights) {\n    const m = heights.length;\n    const n = heights[0].length;\n    const edges = [];\n    for (let i = 0; i < m; ++i) {\n        for (let j = 0; j < n; ++j) {\n            const id = i * n + j;\n            if (i > 0) {\n                edges.push([id - n, id, Math.abs(heights[i][j] - heights[i - 1][j])]);\n            }\n            if (j > 0) {\n                edges.push([id - 1, id, Math.abs(heights[i][j] - heights[i][j - 1])]);\n            }\n        }\n    }\n    edges.sort((a, b) => a[2] - b[2]);\n\n    const uf = new UnionFind(m * n);\n    let ans = 0;\n    for (const edge of edges) {\n        const x = edge[0], y = edge[1], v = edge[2];\n        uf.unite(x, y);\n        if (uf.connected(0, m * n - 1)) {\n            ans = v;\n            break;\n        }\n    }\n    return ans;\n};\n\n// 并查集模板\nclass UnionFind {\n    constructor (n) {\n        this.parent = new Array(n).fill(0).map((element, index) => index);\n        this.size = new Array(n).fill(1);\n        // 当前连通分量数目\n        this.setCount = n;\n    }\n\n    findset (x) {\n        if (this.parent[x] === x) {\n            return x;\n        }\n        this.parent[x] = this.findset(this.parent[x]);\n        return this.parent[x];\n    }\n\n    unite (a, b) {\n        let x = this.findset(a), y = this.findset(b);\n        if (x === y) {\n            return false;\n        }\n        if (this.size[x] < this.size[y]) {\n            [x, y] = [y, x];\n        }\n        this.parent[y] = x;\n        this.size[x] += this.size[y];\n        this.setCount -= 1;\n        return true;\n    }\n\n    connected (a, b) {\n        const x = this.findset(a), y = this.findset(b);\n        return x === y;\n    }\n}\n```\n\n```go [sol2-Golang]\ntype unionFind struct {\n    parent, size []int\n}\n\nfunc newUnionFind(n int) *unionFind {\n    parent := make([]int, n)\n    size := make([]int, n)\n    for i := range parent {\n        parent[i] = i\n        size[i] = 1\n    }\n    return &unionFind{parent, size}\n}\n\nfunc (uf *unionFind) find(x int) int {\n    if uf.parent[x] != x {\n        uf.parent[x] = uf.find(uf.parent[x])\n    }\n    return uf.parent[x]\n}\n\nfunc (uf *unionFind) union(x, y int) {\n    fx, fy := uf.find(x), uf.find(y)\n    if fx == fy {\n        return\n    }\n    if uf.size[fx] < uf.size[fy] {\n        fx, fy = fy, fx\n    }\n    uf.size[fx] += uf.size[fy]\n    uf.parent[fy] = fx\n}\n\nfunc (uf *unionFind) inSameSet(x, y int) bool {\n    return uf.find(x) == uf.find(y)\n}\n\ntype edge struct {\n    v, w, diff int\n}\n\nfunc minimumEffortPath(heights [][]int) int {\n    n, m := len(heights), len(heights[0])\n    edges := []edge{}\n    for i, row := range heights {\n        for j, h := range row {\n            id := i*m + j\n            if i > 0 {\n                edges = append(edges, edge{id - m, id, abs(h - heights[i-1][j])})\n            }\n            if j > 0 {\n                edges = append(edges, edge{id - 1, id, abs(h - heights[i][j-1])})\n            }\n        }\n    }\n    sort.Slice(edges, func(i, j int) bool { return edges[i].diff < edges[j].diff })\n\n    uf := newUnionFind(n * m)\n    for _, e := range edges {\n        uf.union(e.v, e.w)\n        if uf.inSameSet(0, n*m-1) {\n            return e.diff\n        }\n    }\n    return 0\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n```\n\n```C [sol2-C]\nvoid swap(int* a, int* b) {\n    int tmp = *a;\n    *a = *b, *b = tmp;\n}\n\nstruct DisjointSetUnion {\n    int *f, *size;\n    int n, setCount;\n};\n\nvoid initDSU(struct DisjointSetUnion* obj, int n) {\n    obj->f = malloc(sizeof(int) * n);\n    obj->size = malloc(sizeof(int) * n);\n    obj->n = n;\n    obj->setCount = n;\n    for (int i = 0; i < n; i++) {\n        obj->f[i] = i;\n        obj->size[i] = 1;\n    }\n}\n\nint find(struct DisjointSetUnion* obj, int x) {\n    return obj->f[x] == x ? x : (obj->f[x] = find(obj, obj->f[x]));\n}\n\nint unionSet(struct DisjointSetUnion* obj, int x, int y) {\n    int fx = find(obj, x), fy = find(obj, y);\n    if (fx == fy) {\n        return false;\n    }\n    if (obj->size[fx] < obj->size[fy]) {\n        swap(&fx, &fy);\n    }\n    obj->size[fx] += obj->size[fy];\n    obj->f[fy] = fx;\n    obj->setCount--;\n    return true;\n}\n\nint connected(struct DisjointSetUnion* obj, int x, int y) {\n    return find(obj, x) == find(obj, y);\n}\n\nstruct Tuple {\n    int x, y, z\n};\n\nint cmp(const struct Tuple* a, const struct Tuple* b) {\n    return a->z - b->z;\n}\n\nint minimumEffortPath(int** heights, int heightsSize, int* heightsColSize) {\n    int m = heightsSize;\n    int n = heightsColSize[0];\n    struct Tuple edges[n * m * 2];\n    int edgesSize = 0;\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            int id = i * n + j;\n            if (i > 0) {\n                edges[edgesSize].x = id - n;\n                edges[edgesSize].y = id;\n                edges[edgesSize++].z = fabs(heights[i][j] - heights[i - 1][j]);\n            }\n            if (j > 0) {\n                edges[edgesSize].x = id - 1;\n                edges[edgesSize].y = id;\n                edges[edgesSize++].z = fabs(heights[i][j] - heights[i][j - 1]);\n            }\n        }\n    }\n    qsort(edges, edgesSize, sizeof(struct Tuple), cmp);\n\n    struct DisjointSetUnion* uf = malloc(sizeof(struct DisjointSetUnion));\n    initDSU(uf, m * n);\n    int ans = 0;\n    for (int i = 0; i < edgesSize; i++) {\n        unionSet(uf, edges[i].x, edges[i].y);\n        if (connected(uf, 0, m * n - 1)) {\n            ans = edges[i].z;\n            break;\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn \\log(mn))$，其中 $m$ 和 $n$ 分别是地图的行数和列数。图中的边数为 $O(mn)$，因此排序的时间复杂度为 $O(mn \\log (mn))$。并查集的时间复杂度为 $O(mn \\cdot \\alpha(mn))$，其中 $\\alpha$ 为阿克曼函数的反函数。由于后者在渐进意义下小于前者，因此总时间复杂度为 $O(mn \\log(mn))$。\n\n- 空间复杂度：$O(mn)$，即为存储所有边以及并查集需要的空间。\n\n#### 方法三：最短路\n\n**思路与算法**\n\n「最短路径」使得我们很容易想到求解最短路径的 $\\texttt{Dijkstra}$ 算法，然而本题中对于「最短路径」的定义不是其经过的所有边权的和，而是其经过的所有边权的**最大值**，那么我们还可以用 $\\texttt{Dijkstra}$ 算法进行求解吗？\n\n答案是可以的。$\\texttt{Dijkstra}$ 算法本质上是一种启发式搜索算法，它是 $\\texttt{A*}$ 算法在启发函数 $h \\equiv 0$ 时的特殊情况。读者可以参考 [A* search algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm)，[Consistent heuristic](https://en.wikipedia.org/wiki/Consistent_heuristic)，[Admissible heuristic](https://en.wikipedia.org/wiki/Admissible_heuristic) 深入了解 $\\texttt{Dijkstra}$ 算法的本质。\n\n下面给出 $\\texttt{Dijkstra}$ 算法的可行性证明，需要读者对 $\\texttt{A*}$ 算法以及其可行性条件有一定的掌握。\n\n**证明**\n\n定义加法运算 $a \\oplus b = \\max (a,b)$，显然 $\\oplus$ 满足交换律和结合律。那么如果一条路径上的边权分别为 $e_0, e_1, \\cdots, e_k$，那么 $e_0 \\oplus e_1 \\oplus \\cdots \\oplus e_k$ 即为这条路径的长度。\n\n在 $\\texttt{Dijkstra}$ 算法中 $h \\equiv 0$，对于图中任意的无向边 $x \\leftrightarrow y$，由于 $e_{x, y} \\geq 0$，那么 $h(x)=0\\leq e_{x,y} \\oplus h(y)$ 恒成立，其中 $e_{x, y}$ 表示边权。因此启发函数 $h$ 和加法运算 $\\oplus$ 满足三角不等式，是 consistent heuristic 的，可以使用 $\\texttt{Dijkstra}$ 算法求出最短路径。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\nprivate:\n    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    \npublic:\n    int minimumEffortPath(vector<vector<int>>& heights) {\n        int m = heights.size();\n        int n = heights[0].size();\n        \n        auto tupleCmp = [](const auto& e1, const auto& e2) {\n            auto&& [x1, y1, d1] = e1;\n            auto&& [x2, y2, d2] = e2;\n            return d1 > d2;\n        };\n        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, decltype(tupleCmp)> q(tupleCmp);\n        q.emplace(0, 0, 0);\n\n        vector<int> dist(m * n, INT_MAX);\n        dist[0] = 0;\n        vector<int> seen(m * n);\n\n        while (!q.empty()) {\n            auto [x, y, d] = q.top();\n            q.pop();\n            int id = x * n + y;\n            if (seen[id]) {\n                continue;\n            }\n            if (x == m - 1 && y == n - 1) {\n                break;\n            }\n            seen[id] = 1;\n            for (int i = 0; i < 4; ++i) {\n                int nx = x + dirs[i][0];\n                int ny = y + dirs[i][1];\n                if (nx >= 0 && nx < m && ny >= 0 && ny < n && max(d, abs(heights[x][y] - heights[nx][ny])) < dist[nx * n + ny]) {\n                    dist[nx * n + ny] = max(d, abs(heights[x][y] - heights[nx][ny]));\n                    q.emplace(nx, ny, dist[nx * n + ny]);\n                }\n            }\n        }\n        \n        return dist[m * n - 1];\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n    public int minimumEffortPath(int[][] heights) {\n        int m = heights.length;\n        int n = heights[0].length;\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>() {\n            public int compare(int[] edge1, int[] edge2) {\n                return edge1[2] - edge2[2];\n            }\n        });\n        pq.offer(new int[]{0, 0, 0});\n\n        int[] dist = new int[m * n];\n        Arrays.fill(dist, Integer.MAX_VALUE);\n        dist[0] = 0;\n        boolean[] seen = new boolean[m * n];\n\n        while (!pq.isEmpty()) {\n            int[] edge = pq.poll();\n            int x = edge[0], y = edge[1], d = edge[2];\n            int id = x * n + y;\n            if (seen[id]) {\n                continue;\n            }\n            if (x == m - 1 && y == n - 1) {\n                break;\n            }\n            seen[id] = true;\n            for (int i = 0; i < 4; ++i) {\n                int nx = x + dirs[i][0];\n                int ny = y + dirs[i][1];\n                if (nx >= 0 && nx < m && ny >= 0 && ny < n && Math.max(d, Math.abs(heights[x][y] - heights[nx][ny])) < dist[nx * n + ny]) {\n                    dist[nx * n + ny] = Math.max(d, Math.abs(heights[x][y] - heights[nx][ny]));\n                    pq.offer(new int[]{nx, ny, dist[nx * n + ny]});\n                }\n            }\n        }\n        \n        return dist[m * n - 1];\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        m, n = len(heights), len(heights[0])\n        q = [(0, 0, 0)]\n        dist = [0] + [float(\"inf\")] * (m * n - 1)\n        seen = set()\n\n        while q:\n            d, x, y = heapq.heappop(q)\n            iden = x * n + y\n            if iden in seen:\n                continue\n            if (x, y) == (m - 1, n - 1):\n                break\n            \n            seen.add(iden)\n            for nx, ny in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]:\n                if 0 <= nx < m and 0 <= ny < n and max(d, abs(heights[x][y] - heights[nx][ny])) <= dist[nx * n + ny]:\n                    dist[nx * n + ny] = max(d, abs(heights[x][y] - heights[nx][ny]))\n                    heapq.heappush(q, (dist[nx * n + ny], nx, ny))\n        \n        return dist[m * n - 1]\n```\n\n```go [sol3-Golang]\ntype point struct{ x, y, maxDiff int }\ntype hp []point\nfunc (h hp) Len() int              { return len(h) }\nfunc (h hp) Less(i, j int) bool    { return h[i].maxDiff < h[j].maxDiff }\nfunc (h hp) Swap(i, j int)         { h[i], h[j] = h[j], h[i] }\nfunc (h *hp) Push(v interface{})   { *h = append(*h, v.(point)) }\nfunc (h *hp) Pop() (v interface{}) { a := *h; *h, v = a[:len(a)-1], a[len(a)-1]; return }\n\ntype pair struct{ x, y int }\nvar dir4 = []pair{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}\n\nfunc minimumEffortPath(heights [][]int) int {\n    n, m := len(heights), len(heights[0])\n    maxDiff := make([][]int, n)\n    for i := range maxDiff {\n        maxDiff[i] = make([]int, m)\n        for j := range maxDiff[i] {\n            maxDiff[i][j] = math.MaxInt64\n        }\n    }\n    maxDiff[0][0] = 0\n    h := &hp{{}}\n    for {\n        p := heap.Pop(h).(point)\n        if p.x == n-1 && p.y == m-1 {\n            return p.maxDiff\n        }\n        if maxDiff[p.x][p.y] < p.maxDiff {\n            continue\n        }\n        for _, d := range dir4 {\n            if x, y := p.x+d.x, p.y+d.y; 0 <= x && x < n && 0 <= y && y < m {\n                if diff := max(p.maxDiff, abs(heights[x][y]-heights[p.x][p.y])); diff < maxDiff[x][y] {\n                    maxDiff[x][y] = diff\n                    heap.Push(h, point{x, y, diff})\n                }\n            }\n        }\n    }\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn \\log(mn))$，其中 $m$ 和 $n$ 分别是地图的行数和列数。对于节点数为 $n_0$，边数为 $m_0$ 的图，使用优先队列优化的 $\\texttt{Dijkstra}$ 算法的时间复杂度为 $O(m_0 \\log m_0)$。由于图中的边数为 $O(mn)$，带入即可得到时间复杂度 $O(mn \\log(mn))$。\n\n- 空间复杂度：$O(mn)$，即为 $\\texttt{Dijkstra}$ 算法需要使用的空间。"
}