{
	"titleSlug": "erect-the-fence",
	"slug": "an-zhuang-zha-lan-by-leetcode-solution-75s3",
	"url": "https://leetcode-cn.com/problems/erect-the-fence/solution/an-zhuang-zha-lan-by-leetcode-solution-75s3/",
	"content": "#### 方法一: Jarvis 算法\n\n**思路与算法**\n\n此题为经典的求凸包的算法，详细的算法原理可以参考「[凸包](https://zh.wikipedia.org/wiki/%E5%87%B8%E5%8C%85#%E5%8C%85%E8%A3%B9%E6%B3%95%EF%BC%88Jarvis%E6%AD%A5%E8%BF%9B%E6%B3%95%EF%BC%89)」。常见的凸包算法有多种，在此只描述 $\\texttt{Jarvis}$ 算法、$\\texttt{Graham}$ 算法、 $\\texttt{Andrew}$ 算法。\n\n$\\texttt{Jarvis}$ 算法背后的想法非常简单。首先必须要从凸包上的某一点开始，比如从给定点集中最左边的点开始，例如最左的一点 $A_{1}$。然后选择 $A_{2}$ 点使得所有点都在向量 $\\vec{A_{1}A_{2}}$的左方或者右方，我们每次选择左方，需要比较所有点以 $A_{1}$ 为原点的极坐标角度。然后以 $A_{2}$ 为原点，重复这个步骤，依次找到 $A_{3},A_{4},\\ldots,A_{k}$。\n给定原点 $p$，如何找到点 $q$，满足其余的点 $r$ 均在向量 $\\vec{pq}$ 的左边，我们使用「[向量叉积](https://baike.baidu.com/item/%E5%90%91%E9%87%8F%E7%A7%AF/4601007?fr=aladdin)」来进行判别。我们可以知道两个向量 $\\vec{pq},\\vec{qr}$ 的叉积大于 $0$ 时，则两个向量之间的夹角小于 $180 \\degree$，两个向量之间构成的旋转方向为逆时针，此时可以知道 $r$ 一定在 $\\vec{pq}$ 的左边；叉积等于 $0$ 时，则表示两个向量之间平行，$p,q,r$ 在同一条直线上；叉积小于 $0$ 时，则表示两个向量之间的夹角大于 $180 \\degree$，两个向量之间构成的旋转方向为顺时针，此时可以知道 $r$ 一定在 $\\vec{pq}$ 的右边。为了找到点 $q$，我们使用函数 $\\texttt{cross}()$ ，这个函数有 $3$ 个参数，分别是当前凸包上的点 $p$，下一个会加到凸包里的点 $q$，其他点空间内的任何一个点 $r$，通过计算向量 $\\vec{pq},\\vec{qr}$ 的叉积来判断旋转方向，如果剩余所有的点 $r$ 均满足在向量 $\\vec{pq}$ 的左边，则此时我们将 $q$ 加入凸包中。\n下图说明了这样的关系，点 $r$ 在向量 $\\vec{pq}$ 的左边。\n![1](https://assets.leetcode-cn.com/solution-static/587/587_1.png)\n从上图中，我们可以观察到点 $p$，$q$ 和 $r$ 形成的向量相应地都是逆时针方向，向量 $\\vec{pq}$ 和  $\\vec{qr}$ 旋转方向为逆时针，函数 $\\texttt{cross}(p,q,r)$ 返回值大于 $0$。\n$$\n\\begin{aligned}\ncross(p,q,r) &= \\vec{pq} \\times \\vec{qr} \\\\\n&= \\begin{vmatrix} (q_x-p_x) & (q_y-p_y) \\\\ (r_x-q_x) & (r_y-q_y) \\end{vmatrix} \\\\\n&= (q_x-p_x) \\times (r_y-q_y) - (q_y-p_y) \\times (r_x-q_x)\n\\end{aligned}\n$$\n我们遍历所有点 $r$，找到对于点 $p$ 来说逆时针方向最靠外的点 $q$，把它加入凸包。如果存在 $2$ 个点相对点 $p$ 在同一条线上，我们应当将 $q$ 和 $p$ 同一线段上的边界点都考虑进来，此时需要进行标记，防止重复添加。\n\n通过这样，我们不断将凸包上的点加入，直到回到了开始的点，下面的动图描述了该过程。\n\n<![image.png](https://pic.leetcode-cn.com/db7030a438bfd419177d9493eaa12a3ebe1b60fb96e272160e18b4a41929b497-image.png),![image.png](https://pic.leetcode-cn.com/f3a65640532221fe2329e342b61f051ac7cef5c1a368fa7c885ddfde486a4721-image.png),![image.png](https://pic.leetcode-cn.com/b52f843468ac552d0ddbac1681522681abd3624b853737ea5f6ce1afdab667da-image.png),![image.png](https://pic.leetcode-cn.com/15d9b8397a6bf5d326858b119f831c458ab48d393488c64685062f8d579cf347-image.png),![image.png](https://pic.leetcode-cn.com/056968ffc825aed329c2d344fa28c777bcff8615dea6ddbad7813a993175feb2-image.png),![image.png](https://pic.leetcode-cn.com/16d6023e5f89aa8d3499fbfe974b27f4caf64e9c20ae7c0c4386ca3d7fc0b11c-image.png),![image.png](https://pic.leetcode-cn.com/343585c8d16e4abaaeeefedbb57a3820762c9577a05cc2c5fec3bbcef119a121-image.png),![image.png](https://pic.leetcode-cn.com/aa5924db788a6a3fa20dc63a19b3d7a3c5bb8b8eef375d48aff8c6d0e95b296e-image.png),![image.png](https://pic.leetcode-cn.com/8e4bd1b9d69d705f2187e6c169eefcfa4abc7019506c3e60f5a44ef19213c6c1-image.png),![image.png](https://pic.leetcode-cn.com/399a63541b548c4cd9f197debdc1c7362078e3fad4f0898b759c398797143750-image.png),![image.png](https://pic.leetcode-cn.com/550847328561a1c37ab0db4aa35c3e3da6dee4b8ba22638cee2191fcc9fa5c16-image.png),![image.png](https://pic.leetcode-cn.com/625f1df9822c6e12cf2b5ad4f967472088321c630c2f9a7018e82aa406388726-image.png),![image.png](https://pic.leetcode-cn.com/a21dc54d90b030ebc6d109841b98c2d5593c9fcb2de2197d7b2a3a100b650aa5-image.png),![image.png](https://pic.leetcode-cn.com/64d7d4112f878b984be6f4732fce948c87412767de790b698a2891e3bf890270-image.png),![image.png](https://pic.leetcode-cn.com/72d3a4ff10f1badb60d4c09e337c1f66d94b114e0d6c003ee293ce4573192e56-image.png),![image.png](https://pic.leetcode-cn.com/015c1c0decd6417306bedab3db6720e736beaf39bc4ede41b505940a64494036-image.png),![image.png](https://pic.leetcode-cn.com/874a693996d6a7ce740570b1721c0bc166bb8e0be04f8d673877242f833a6afd-image.png),![image.png](https://pic.leetcode-cn.com/0a9a86cb949546ab33193f9c68809c2554c9c68a185886741cb37b5fc53273fb-image.png),![image.png](https://pic.leetcode-cn.com/e35b11e9191d9f0f5176755b52b7460991a8fd98b563e9952826f556ab20a6f7-image.png),![image.png](https://pic.leetcode-cn.com/e26909eafac7d617a0a0e4203ddd321ee9aae77000f4cc425518c69716aeff2a-image.png),![image.png](https://pic.leetcode-cn.com/28ba662f3cc1ac40e8b24b79f4aa76effce338d5e134e2b581dbadda02d1e22a-image.png),![image.png](https://pic.leetcode-cn.com/4ab5beeb3f98371e18c7d77e6d57a33c3ffa95358397550936b58ad53d275405-image.png),![image.png](https://pic.leetcode-cn.com/03e81cdf4ed3904307a7627a467eb9bfa6b5474883d0cd7bd7cfad20421a3756-image.png),![image.png](https://pic.leetcode-cn.com/261aa25835f941c885ca821b549bbf14d4773e3ab5b90e032a222bb07c09cde6-image.png),![image.png](https://pic.leetcode-cn.com/ae44a34d313948a85b807c4b71a2050f103514fa3acaa3b48857e83ea02241a2-image.png),![image.png](https://pic.leetcode-cn.com/5103dee9b8f9cee208547e3491256bca413fe03253cfe9ef8f287313eddcb9dc-image.png),![image.png](https://pic.leetcode-cn.com/607444e1a8b5d4fc8b829e11ea2569e5fe8395bcde794398b809bdb34b75df0a-image.png),![image.png](https://pic.leetcode-cn.com/94ea4758c1608e4ddea2ea18a1aa87e826a69fce9934fc58bd94eda6d04fe9c1-image.png),![image.png](https://pic.leetcode-cn.com/a3cd11faca8d9848776d865824663fbe035b4740c0cd7cdef7acf1591e6f030f-image.png),![image.png](https://pic.leetcode-cn.com/f81a1e0622218aa9303b7dde0f592d722cdea8bf5b2e50b5abf7bccb46b69b4c-image.png),![image.png](https://pic.leetcode-cn.com/36b5fc52ea2c5c3202351926519bfc386b9cfc6119eb5e2e02ec319ad4254ba9-image.png),![image.png](https://pic.leetcode-cn.com/d640ccd0b5854d0ca3d39b918d064f95ec0238b90380cc71fff3094f61f06a13-image.png),![image.png](https://pic.leetcode-cn.com/54497c55fc5d73df553d127ce2af568a70d45af9b37ea6efc8eaa0e7b9c97352-image.png),![image.png](https://pic.leetcode-cn.com/ffacf69ea27167317b3bf870be8b161d0a5de2eff4331f0f968776f039ee45fc-image.png),![image.png](https://pic.leetcode-cn.com/f8ea7e5cfe30beeddb61a9043313ae2fa12527dbb27ea4f24672e3dfb13db4a5-image.png),![image.png](https://pic.leetcode-cn.com/6e2b4ec2ea40533d6681c2d0e740b02dcf5654e6832d9fac7a4cce73f5b52e45-image.png),![image.png](https://pic.leetcode-cn.com/c2dc88dc15839687aa89a1ec39925f0652c5cb9ae72321f94607e0db2a25a792-image.png),![image.png](https://pic.leetcode-cn.com/7f6224f9aedf5ef8a17e56adc2e3918ee200695fe779e33679d4a2bae2691e2b-image.png),![image.png](https://pic.leetcode-cn.com/3b5002638f57a8c86e1f6d7b3b9e83f6f7406fe7193f2bfac8b175a8b9a4abeb-image.png),![image.png](https://pic.leetcode-cn.com/33e67ca6d4faaf4cf0005401f5d1d75e81e326c3e69090edff22c465f1c91d72-image.png)>\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:\n        def cross(p: List[int], q: List[int], r: List[int]) -> int:\n            return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0])\n\n        n = len(trees)\n        if n < 4:\n            return trees\n\n        leftMost = 0\n        for i, tree in enumerate(trees):\n            if tree[0] < trees[leftMost][0] or (tree[0] == trees[leftMost][0] and tree[1] < trees[leftMost][1]):\n                leftMost = i\n\n        ans = []\n        vis = [False] * n\n        p = leftMost\n        while True:\n            q = (p + 1) % n\n            for r, tree in enumerate(trees):\n                # // 如果 r 在 pq 的右侧，则 q = r\n                if cross(trees[p], trees[q], tree) < 0:\n                    q = r\n            # 是否存在点 i, 使得 p q i 在同一条直线上\n            for i, b in enumerate(vis):\n                if not b and i != p and i != q and cross(trees[p], trees[q], trees[i]) == 0:\n                    ans.append(trees[i])\n                    vis[i] = True\n            if not vis[q]:\n                ans.append(trees[q])\n                vis[q] = True\n            p = q\n            if p == leftMost:\n                break\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int cross(vector<int> & p, vector<int> & q, vector<int> & r) {\n        return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n    }\n\n    vector<vector<int>> outerTrees(vector<vector<int>>& trees) {\n        int n = trees.size();\n        if (n < 4) {\n            return trees;\n        }\n        int leftMost = 0;\n        for (int i = 0; i < n; i++) {\n            if (trees[i][0] < trees[leftMost][0] || \n                (trees[i][0] == trees[leftMost][0] && \n                 trees[i][1] < trees[leftMost][1])) {\n                leftMost = i;\n            }\n        }\n\n        vector<vector<int>> res;\n        vector<bool> visit(n, false);\n        int p = leftMost;\n        do {\n            int q = (p + 1) % n;\n            for (int r = 0; r < n; r++) {\n                /* 如果 r 在 pq 的右侧，则 q = r */ \n                if (cross(trees[p], trees[q], trees[r]) < 0) {\n                    q = r;\n                }\n            }\n            /* 是否存在点 i, 使得 p 、q 、i 在同一条直线上 */\n            for (int i = 0; i < n; i++) {\n                if (visit[i] || i == p || i == q) {\n                    continue;\n                }\n                if (cross(trees[p], trees[q], trees[i]) == 0) {\n                    res.emplace_back(trees[i]);\n                    visit[i] = true;\n                }\n            }\n            if  (!visit[q]) {\n                res.emplace_back(trees[q]);\n                visit[q] = true;\n            }\n            p = q;\n        } while (p != leftMost);\n        return res;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[][] outerTrees(int[][] trees) {\n        int n = trees.length;\n        if (n < 4) {\n            return trees;\n        }\n        int leftMost = 0;\n        for (int i = 0; i < n; i++) {\n            if (trees[i][0] < trees[leftMost][0] || \n                (trees[i][0] == trees[leftMost][0] && \n                 trees[i][1] < trees[leftMost][1])) {\n                leftMost = i;\n            }\n        }\n\n        List<int[]> res = new ArrayList<int[]>();\n        boolean[] visit = new boolean[n];\n        int p = leftMost;\n        do {\n            int q = (p + 1) % n;\n            for (int r = 0; r < n; r++) {\n                /* 如果 r 在 pq 的右侧，则 q = r */ \n                if (cross(trees[p], trees[q], trees[r]) < 0) {\n                    q = r;\n                }\n            }\n            /* 是否存在点 i, 使得 p 、q 、i 在同一条直线上 */\n            for (int i = 0; i < n; i++) {\n                if (visit[i] || i == p || i == q) {\n                    continue;\n                }\n                if (cross(trees[p], trees[q], trees[i]) == 0) {\n                    res.add(trees[i]);\n                    visit[i] = true;\n                }\n            }\n            if  (!visit[q]) {\n                res.add(trees[q]);\n                visit[q] = true;\n            }\n            p = q;\n        } while (p != leftMost);\n        return res.toArray(new int[][]{});\n    }\n\n    public int cross(int[] p, int[] q, int[] r) {\n        return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[][] OuterTrees(int[][] trees) {\n        int n = trees.Length;\n        if (n < 4) {\n            return trees;\n        }\n        int leftMost = 0;\n        for (int i = 0; i < n; i++) {\n            if (trees[i][0] < trees[leftMost][0] || \n                (trees[i][0] == trees[leftMost][0] && \n                 trees[i][1] < trees[leftMost][1])) {\n                leftMost = i;\n            }\n        }\n\n        IList<int[]> res = new List<int[]>();\n        bool[] visit = new bool[n];\n        int p = leftMost;\n        do {\n            int q = (p + 1) % n;\n            for (int r = 0; r < n; r++) {\n                /* 如果 r 在 pq 的右侧，则 q = r */ \n                if (Cross(trees[p], trees[q], trees[r]) < 0) {\n                    q = r;\n                }\n            }\n            /* 是否存在点 i, 使得 p 、q 、i 在同一条直线上 */\n            for (int i = 0; i < n; i++) {\n                if (visit[i] || i == p || i == q) {\n                    continue;\n                }\n                if (Cross(trees[p], trees[q], trees[i]) == 0) {\n                    res.Add(trees[i]);\n                    visit[i] = true;\n                }\n            }\n            if  (!visit[q]) {\n                res.Add(trees[q]);\n                visit[q] = true;\n            }\n            p = q;\n        } while (p != leftMost);\n        return res.ToArray();\n    }\n\n    public int Cross(int[] p, int[] q, int[] r) {\n        return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n    }\n}\n```\n\n```C [sol1-C]\nint cross(const int * p, const int * q, const int * r) {\n    return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n}\n\nint** outerTrees(int** trees, int treesSize, int* treesColSize, int* returnSize, int** returnColumnSizes) {\n    int **res = (int **)malloc(sizeof(int *) * treesSize);\n    int pos = 0;\n    if (treesSize < 4) {\n        *returnColumnSizes = (int *)malloc(sizeof(int) * treesSize);\n        for (int i = 0; i < treesSize; i++) {\n            res[i] = (int *)malloc(sizeof(int) * 2);\n            res[i][0] = trees[i][0];\n            res[i][1] = trees[i][1];\n            (*returnColumnSizes)[i] = 2;\n        }\n        *returnSize = treesSize;\n        return res;\n    }\n    int leftMost = 0;\n    for (int i = 0; i < treesSize; i++) {\n        if (trees[i][0] < trees[leftMost][0] || \\\n            (trees[i][0] == trees[leftMost][0] && \\\n            trees[i][1] < trees[leftMost][1])) {\n            leftMost = i;\n        }\n    }\n\n    bool *visit = (bool *)malloc(sizeof(bool) * treesSize);\n    memset(visit, 0, sizeof(bool) * treesSize);\n    int p = leftMost;\n    do {\n        int q = (p + 1) % treesSize;\n        for (int r = 0; r < treesSize; r++) {\n            /* 如果 r 在 pq 的右侧，则 q = r */ \n            if (cross(trees[p], trees[q], trees[r]) < 0) {\n                q = r;\n            }\n        }\n        /* 是否存在点 i, 使得 p 、q 、i 在同一条直线上 */\n        for (int i = 0; i < treesSize; i++) {\n            if (visit[i] || i == p || i == q) {\n                continue;\n            }\n            if (cross(trees[p], trees[q], trees[i]) == 0) {\n                res[pos] = (int *)malloc(sizeof(int) * 2);\n                res[pos][0] = trees[i][0];\n                res[pos][1] = trees[i][1];\n                pos++;\n                visit[i] = true;\n            }\n        }\n        if (!visit[q]) {\n            visit[q] = true;\n            res[pos] = (int *)malloc(sizeof(int) * 2);\n            res[pos][0] = trees[q][0];\n            res[pos][1] = trees[q][1];\n            pos++;\n        }\n        p = q;\n    } while (p != leftMost);\n    *returnSize = pos;\n    *returnColumnSizes = (int *)malloc(sizeof(int) * pos);\n    for (int i = 0; i < pos; i++) {\n        (*returnColumnSizes)[i] = 2;\n    }\n    free(visit);\n    return res;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar outerTrees = function(trees) {\n    const n = trees.length;\n    if (n < 4) {\n        return trees;\n    }\n    let leftMost = 0;\n    for (let i = 0; i < n; i++) {\n        if (trees[i][0] < trees[leftMost][0] || (trees[i][0] == trees[leftMost][0] && trees[i][1] < trees[leftMost][1])) {\n            leftMost = i;\n        }\n    }\n\n    const res = [];\n    const visit = new Array(n).fill(0);\n    let p = leftMost;\n    do {\n        let q = (p + 1) % n;\n        for (let r = 0; r < n; r++) {\n            /* 如果 r 在 pq 的右侧，则 q = r */ \n            if (cross(trees[p], trees[q], trees[r]) < 0) {\n                q = r;\n            }\n        }\n        /* 是否存在点 i, 使得 p 、q 、i 在同一条直线上 */\n        for (let i = 0; i < n; i++) {\n            if (visit[i] || i === p || i === q) {\n                continue;\n            }\n            if (cross(trees[p], trees[q], trees[i]) === 0) {\n                res.push(trees[i]);\n                visit[i] = true;\n            }\n        }\n        if  (!visit[q]) {\n            res.push(trees[q]);\n            visit[q] = true;\n        }\n        p = q;\n    } while (p !== leftMost);\n    return res;\n}\n\nconst cross = (p, q, r) => {\n    return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n};\n```\n\n```go [sol1-Golang]\nfunc cross(p, q, r []int) int {\n    return (q[0]-p[0])*(r[1]-q[1]) - (q[1]-p[1])*(r[0]-q[0])\n}\n\nfunc outerTrees(trees [][]int) (ans [][]int) {\n    n := len(trees)\n    if n < 4 {\n        return trees\n    }\n\n    leftMost := 0\n    for i, tree := range trees {\n        if tree[0] < trees[leftMost][0] || (tree[0] == trees[leftMost][0] && tree[1] < trees[leftMost][1]) {\n            leftMost = i\n        }\n    }\n\n    vis := make([]bool, n)\n    p := leftMost\n    for {\n        q := (p + 1) % n\n        for r, tree := range trees {\n            // 如果 r 在 pq 的右侧，则 q = r\n            if cross(trees[p], trees[q], tree) < 0 {\n                q = r\n            }\n        }\n        // 是否存在点 i, 使得 p q i 在同一条直线上\n        for i, b := range vis {\n            if !b && i != p && i != q && cross(trees[p], trees[q], trees[i]) == 0 {\n                ans = append(ans, trees[i])\n                vis[i] = true\n            }\n        }\n        if !vis[q] {\n            ans = append(ans, trees[q])\n            vis[q] = true\n        }\n        p = q\n        if p == leftMost {\n            break\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n^2)$，其中 $n$ 为数组的长度。每次判定一个点 $p$，同时需要遍历数组所有点，一共最多需要取出 $n$ 个点，因此时间复杂度为 $O(n^2)$。\n\n+ 空间复杂度：$O(n)$。需要对每个点进行标记，需要的空间复杂度为 $O(n)$。\n\n#### 方法二: Graham 算法\n\n**思路与算法**\n\n这个方法的具体实现为：首先选择一个凸包上的初始点 $\\textit{bottom}$。我们选择 $y$ 坐标最小的点为起始点，我们可以肯定 $\\textit{bottom}$ 一定在凸包上，将给定点集按照相对的以 $\\textit{bottom}$ 为原点的极角大小进行排序。\n\n这一排序过程大致给了我们在逆时针顺序选点时候的思路。为了将点排序，我们使用上一方法使用过的函数 $\\texttt{cross}$ 。极角顺序更小的点排在数组的前面。如果有两个点相对于点 $\\textit{bottom}$ 的极角大小相同，则按照与点 $\\textit{bottom}$ 的距离排序。\n\n我们还需要考虑另一种重要的情况，如果共线的点在凸壳的最后一条边上，我们需要从距离初始点最远的点开始考虑起。所以在将数组排序后，我们从尾开始遍历有序数组并将共线且朝有序数组尾部的点反转顺序，因为这些点是形成凸壳过程中尾部的点，所以在经过了这些处理以后，我们得到了求凸壳时正确的点的顺序。\n\n现在我们从有序数组最开始两个点开始考虑。我们将这条线上的点放入栈中。然后我们从第三个点开始遍历有序数组 $\\textit{trees}$。如果当前点与栈顶的点相比前一条线是一个「左拐」或者是同一条线段上，我们都将当前点添加到栈顶，表示这个点暂时被添加到凸壳上。\n\n检查左拐或者右拐使用的还是 $\\texttt{cross}$ 函数。对于向量 $\\vec{pq},\\vec{qr}$，计算向量的叉积 $\\texttt{cross}(p,q,r) = \\vec{pq} \\times \\vec{qr}$，如果叉积小于 $0$，可以知道向量 $\\vec{pq},\\vec{qr}$ 顺时针旋转，则此时向右拐；如果叉积大于 $0$，可以知道向量 $\\vec{pq},\\vec{qr}$ 逆时针旋转，表示是左拐；如果叉积等于 $0$，则 $p,q,r$ 在同一条直线上。\n\n如果当前点与上一条线之间的关系是右拐的，说明上一个点不应该被包括在凸壳里，因为它在边界的里面（正如动画中点 $4$），所以我们将它从栈中弹出并考虑倒数第二条线的方向。重复这一过程，弹栈的操作会一直进行，直到我们当前点在凸壳中出现了右拐。这表示这时凸壳中只包括边界上的点而不包括边界以内的点。在所有点被遍历了一遍以后，栈中的点就是构成凸壳的点。\n\n<![image.png](https://pic.leetcode-cn.com/4547b1d7bec50f8f4abc83293be1e3b2fb88a8c7d8b7547f271c120551889fa3-image.png),![image.png](https://pic.leetcode-cn.com/3e38405a62705e79b50e2a84c9d629eaf650679cf045c7c27790ab9eabdac3de-image.png),![image.png](https://pic.leetcode-cn.com/7fec73962fd9ff12c096dcaf29c99218ab853cf6e930832616fb8eafe1d0cb97-image.png),![image.png](https://pic.leetcode-cn.com/0ac5b63afb23c200adbe27c1efbf6d43f43d349159a910d13c53913465ce88c1-image.png),![image.png](https://pic.leetcode-cn.com/cbf252cb894aba0bd58124688412aea04b0e461cf503b2204a433fdfee782f2a-image.png),![image.png](https://pic.leetcode-cn.com/8ddd88947a93f38a335423673e3cd5f607c8c08411b6a3ca140b3039a4a91b9c-image.png),![image.png](https://pic.leetcode-cn.com/315fa316991f206b2089c6510d2816c6d39eab7452c35f0963ecb9ba0540941c-image.png),![image.png](https://pic.leetcode-cn.com/2e97f05bbf869b9a97d6ce58258b81bbc38bffe1916abafee706c9af4c1bb0aa-image.png),![image.png](https://pic.leetcode-cn.com/0dd30c7de47dd8c8eaa4840a8c041fc28896742d114f082d90a3c26929a49e5d-image.png),![image.png](https://pic.leetcode-cn.com/c1523a37b29cd82f7bac54d63b60f30a4cd0c9a18e531088a1d7bf5542ea8a96-image.png),![image.png](https://pic.leetcode-cn.com/333d052e9dfb09dd18de65ab0b7c14028c6f1defbe69fe42afc323427885ba8d-image.png),![image.png](https://pic.leetcode-cn.com/d0052ff5ece576abeeedfd89a87d0d2b7632437420e302f6d9da79b91fe5170c-image.png),![image.png](https://pic.leetcode-cn.com/3531af674b97d4f2947c7c1666655a1b206b1c998759e9059611a4a1c219d23f-image.png),![image.png](https://pic.leetcode-cn.com/3b18152d25ba1fcd0c4e32782b8a6a8c4384f5a92105d37e2952f72b78290738-image.png),![image.png](https://pic.leetcode-cn.com/ceceb5b93684bbd31ddc4abde6e069196a0a4868526ca7d6819732f7cb112d07-image.png)>\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:\n        def cross(p: List[int], q: List[int], r: List[int]) -> int:\n            return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0])\n\n        def distance(p: List[int], q: List[int]) -> int:\n            return (p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1])\n\n        n = len(trees)\n        if n < 4:\n            return trees\n\n        # 找到 y 最小的点 bottom\n        bottom = 0\n        for i, tree in enumerate(trees):\n            if tree[1] < trees[bottom][1]:\n                bottom = i\n        trees[bottom], trees[0] = trees[0], trees[bottom]\n\n        # 以 bottom 原点，按照极坐标的角度大小进行排序\n        def cmp(a: List[int], b: List[int]) -> int:\n            diff = - cross(trees[0], a, b)\n            return diff if diff else distance(trees[0], a) - distance(trees[0], b)\n        trees[1:] = sorted(trees[1:], key=cmp_to_key(cmp))\n\n        # 对于凸包最后且在同一条直线的元素按照距离从大到小进行排序\n        r = n - 1\n        while r >= 0 and cross(trees[0], trees[n - 1], trees[r]) == 0:\n            r -= 1\n        l, h = r + 1, n - 1\n        while l < h:\n            trees[l], trees[h] = trees[h], trees[l]\n            l += 1\n            h -= 1\n\n        stack = [0, 1]\n        for i in range(2, n):\n            # 如果当前元素与栈顶的两个元素构成的向量顺时针旋转，则弹出栈顶元素\n            while len(stack) > 1 and cross(trees[stack[-2]], trees[stack[-1]], trees[i]) < 0:\n                stack.pop()\n            stack.append(i)\n        return [trees[i] for i in stack]\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int cross(const vector<int> & p, const vector<int> & q, const vector<int> & r) {\n        return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n    }\n\n    int distance(const vector<int> & p, const vector<int> & q) {\n        return (p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]);\n    }\n\n    vector<vector<int>> outerTrees(vector<vector<int>> &trees) {\n        int n = trees.size();\n        if (n < 4) {\n            return trees;\n        }\n        int bottom = 0;\n        /* 找到 y 最小的点 bottom*/\n        for (int i = 0; i < n; i++) {\n            if (trees[i][1] < trees[bottom][1]) {\n                bottom = i;\n            }\n        }\n        swap(trees[bottom], trees[0]);\n        /* 以 bottom 原点，按照极坐标的角度大小进行排序 */\n        sort(trees.begin() + 1, trees.end(), [&](const vector<int> & a, const vector<int> & b) {\n            int diff = cross(trees[0], a, b);\n            if (diff == 0) {\n                return distance(trees[0], a) < distance(trees[0], b);\n            } else {\n                return diff > 0;\n            }\n        });\n        /* 对于凸包最后且在同一条直线的元素按照距离从大到小进行排序 */\n        int r = n - 1;\n        while (r >= 0 && cross(trees[0], trees[n - 1], trees[r]) == 0) {\n            r--;\n        }\n        for (int l = r + 1, h = n - 1; l < h; l++, h--) {\n            swap(trees[l], trees[h]);\n        }\n        stack<int> st;\n        st.emplace(0);\n        st.emplace(1);\n        for (int i = 2; i < n; i++) {\n            int top = st.top();\n            st.pop();\n            /* 如果当前元素与栈顶的两个元素构成的向量顺时针旋转，则弹出栈顶元素 */\n            while (!st.empty() && cross(trees[st.top()], trees[top], trees[i]) < 0) {\n                top = st.top();\n                st.pop();\n            }\n            st.emplace(top);\n            st.emplace(i);\n        }\n\n        vector<vector<int>> res;\n        while (!st.empty()) {\n            res.emplace_back(trees[st.top()]);\n            st.pop();\n        }\n        return res;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[][] outerTrees(int[][] trees) {\n        int n = trees.length;\n        if (n < 4) {\n            return trees;\n        }\n        int bottom = 0;\n        /* 找到 y 最小的点 bottom*/\n        for (int i = 0; i < n; i++) {\n            if (trees[i][1] < trees[bottom][1]) {\n                bottom = i;\n            }\n        }\n        swap(trees, bottom, 0);\n        /* 以 bottom 原点，按照极坐标的角度大小进行排序 */\n        Arrays.sort(trees, 1, n, (a, b) -> {\n            int diff = cross(trees[0], a, b);\n            if (diff == 0) {\n                return distance(trees[0], a) - distance(trees[0], b);\n            } else {\n                return -diff;\n            }\n        });\n        /* 对于凸包最后且在同一条直线的元素按照距离从大到小进行排序 */\n        int r = n - 1;\n        while (r >= 0 && cross(trees[0], trees[n - 1], trees[r]) == 0) {\n            r--;\n        }\n        for (int l = r + 1, h = n - 1; l < h; l++, h--) {\n            swap(trees, l, h);\n        }\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n        stack.push(0);\n        stack.push(1);\n        for (int i = 2; i < n; i++) {\n            int top = stack.pop();\n            /* 如果当前元素与栈顶的两个元素构成的向量顺时针旋转，则弹出栈顶元素 */\n            while (!stack.isEmpty() && cross(trees[stack.peek()], trees[top], trees[i]) < 0) {\n                top = stack.pop();\n            }\n            stack.push(top);\n            stack.push(i);\n        }\n\n        int size = stack.size();\n        int[][] res = new int[size][2];\n        for (int i = 0; i < size; i++) {\n            res[i] = trees[stack.pop()];\n        }\n        return res;\n    }\n\n    public int cross(int[] p, int[] q, int[] r) {\n        return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n    }\n\n    public int distance(int[] p, int[] q) {\n        return (p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]);\n    }\n\n    public void swap(int[][] trees, int i, int j) {\n        int temp0 = trees[i][0], temp1 = trees[i][1];\n        trees[i][0] = trees[j][0];\n        trees[i][1] = trees[j][1];\n        trees[j][0] = temp0;\n        trees[j][1] = temp1;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int[][] OuterTrees(int[][] trees) {\n        int n = trees.Length;\n        if (n < 4) {\n            return trees;\n        }\n        int bottom = 0;\n        /* 找到 y 最小的点 bottom*/\n        for (int i = 0; i < n; i++) {\n            if (trees[i][1] < trees[bottom][1]) {\n                bottom = i;\n            }\n        }\n        Swap(trees, bottom, 0);\n        /* 以 bottom 原点，按照极坐标的角度大小进行排序 */\n        Array.Sort(trees, (a, b) => {\n            int diff = Cross(trees[0], a, b);\n            if (diff == 0) {\n                return Distance(trees[0], a) - Distance(trees[0], b);\n            } else {\n                return -diff;\n            }\n        });\n        /* 对于凸包最后且在同一条直线的元素按照距离从大到小进行排序 */\n        int r = n - 1;\n        while (r >= 0 && Cross(trees[0], trees[n - 1], trees[r]) == 0) {\n            r--;\n        }\n        for (int l = r + 1, h = n - 1; l < h; l++, h--) {\n            Swap(trees, l, h);\n        }\n        Stack<int> stack = new Stack<int>();\n        stack.Push(0);\n        stack.Push(1);\n        for (int i = 2; i < n; i++) {\n            int top = stack.Pop();\n            /* 如果当前元素与栈顶的两个元素构成的向量顺时针旋转，则弹出栈顶元素 */\n            while (stack.Count > 0 && Cross(trees[stack.Peek()], trees[top], trees[i]) < 0) {\n                top = stack.Pop();\n            }\n            stack.Push(top);\n            stack.Push(i);\n        }\n\n        int size = stack.Count;\n        int[][] res = new int[size][];\n        for (int i = 0; i < size; i++) {\n            res[i] = trees[stack.Pop()];\n        }\n        return res;\n    }\n\n    public int Cross(int[] p, int[] q, int[] r) {\n        return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n    }\n\n    public int Distance(int[] p, int[] q) {\n        return (p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]);\n    }\n\n    public void Swap(int[][] trees, int i, int j) {\n        int temp0 = trees[i][0], temp1 = trees[i][1];\n        trees[i][0] = trees[j][0];\n        trees[i][1] = trees[j][1];\n        trees[j][0] = temp0;\n        trees[j][1] = temp1;\n    }\n}\n```\n\n```C [sol2-C]\nstatic int cross(const int * p, const int * q, const int * r) {\n    return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n}\n\nstatic int distance(const int * p, const int * q) {\n    return (p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]);\n}\n\nstatic int * p = NULL;\n\nstatic int cmp(const void * pa, const void * pb) {\n    int *a = *((int **)pa);\n    int *b = *((int **)pb);\n    int diff = cross(p, a, b);\n    if (diff == 0) {\n        return distance(p, a) - distance(p, b);\n    } else {\n        return -diff;\n    } \n}\n\nstatic void swap(int * pa, int * pb) {\n    int c = pa[0];\n    pa[0] = pb[0];\n    pb[0] = c;\n    c = pa[1];\n    pa[1] = pb[1];\n    pb[1] = c;\n}\n\nint** outerTrees(int** trees, int treesSize, int* treesColSize, int* returnSize, int** returnColumnSizes) {\n    int **res = (int **)malloc(sizeof(int *) * treesSize);\n    int pos = 0;\n    if (treesSize < 4) {\n        *returnColumnSizes = (int *)malloc(sizeof(int) * treesSize);\n        for (int i = 0; i < treesSize; i++) {\n            res[i] = (int *)malloc(sizeof(int) * 2);\n            res[i][0] = trees[i][0];\n            res[i][1] = trees[i][1];\n            (*returnColumnSizes)[i] = 2;\n        }\n        *returnSize = treesSize;\n        return res;\n    }\n    int bottom = 0;\n    /* 找到 y 最小的点 bottom*/\n    for (int i = 0; i < treesSize; i++) {\n        if (trees[i][1] < trees[bottom][1] || \n            (trees[i][1] == trees[bottom][1] && \n             trees[i][0] < trees[bottom][0])) {\n            bottom = i;\n        }\n    }\n    swap(trees[bottom], trees[0]);\n    p = trees[0];\n    /* 以 bottom 原点，按照极坐标的角度大小进行排序 */\n    qsort(trees + 1, treesSize - 1, sizeof(int *), cmp);\n    /* 对于凸包最后且在同一条直线的元素按照距离从大到小进行排序 */\n    int r = treesSize - 1;\n    while (r >= 0 && cross(trees[0], trees[treesSize - 1], trees[r]) == 0) {\n        r--;\n    }\n    for (int l = r + 1, h = treesSize - 1; l < h; l++, h--) {\n        swap(trees[l], trees[h]);\n    }\n    int * stack = (int *)malloc(sizeof(int) * treesSize);\n    int top = 0;\n    stack[top++] = 0;\n    stack[top++] = 1;\n    for (int i = 2; i < treesSize; i++) {\n        /* 如果当前元素与栈顶的两个元素构成的向量顺时针旋转，则弹出栈顶元素 */\n        while (top > 1 && cross(trees[stack[top - 2]], trees[stack[top - 1]], trees[i]) < 0) {\n            top--;\n        }\n        stack[top++] = i;\n    }\n    while (top > 0) {\n        res[pos] = (int *)malloc(sizeof(int) * 2);\n        memcpy(res[pos], trees[stack[top - 1]], sizeof(int) * 2);\n        pos++;\n        top--;\n    }\n    *returnSize = pos;\n    *returnColumnSizes = (int *)malloc(sizeof(int) * pos);\n    for (int i = 0; i < pos; i++) {\n        (*returnColumnSizes)[i] = 2;\n    }\n    free(stack);\n    return res;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar outerTrees = function(trees) {\n    const n = trees.length;\n    if (n < 4) {\n        return trees;\n    }\n    let bottom = 0;\n    /* 找到 y 最小的点 bottom*/\n    for (let i = 0; i < n; i++) {\n        if (trees[i][1] < trees[bottom][1]) {\n            bottom = i;\n        }\n    }\n    trees = swap(trees, bottom, 0);\n    /* 以 bottom 原点，按照极坐标的角度大小进行排序 */\n    trees.sort((a, b) => {\n        let diff = cross(trees[0], a, b);\n        return diff === 0 ? distance(trees[0], a) - distance(trees[0], b) : diff > 0 ? 1 : -1;\n    });\n    /* 对于凸包最后且在同一条直线的元素按照距离从大到小进行排序 */\n    let r = n - 1;\n    while (r >= 0 && cross(trees[0], trees[n - 1], trees[r]) === 0) {\n        r--;\n    }\n    for (let l = r + 1, h = n - 1; l < h; l++, h--) {\n        trees = swap(trees, l, h);\n    }\n    const stack = [trees[0], trees[1]];\n    for (let i = 2; i < n; i++) {\n        let top = stack.pop();\n        /* 如果当前元素与栈顶的两个元素构成的向量顺时针旋转，则弹出栈顶元素 */\n        while (cross(stack[stack.length - 1], top, trees[i]) > 0) {\n            top = stack.pop();\n        }\n        stack.push(top);\n        stack.push(trees[i]);\n    }\n    return stack;\n}\n\nconst cross = (p, q, r) => {\n    return (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n}\n\nconst distance = (p, q) => {\n    return (p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]);\n}\n\nconst swap = (trees, i, j) => {\n    let temp0 = trees[i][0], temp1 = trees[i][1];\n    trees[i][0] = trees[j][0];\n    trees[i][1] = trees[j][1];\n    trees[j][0] = temp0;\n    trees[j][1] = temp1;\n    return trees;\n}\n```\n\n```go [sol2-Golang]\nfunc cross(p, q, r []int) int {\n    return (q[0]-p[0])*(r[1]-q[1]) - (q[1]-p[1])*(r[0]-q[0])\n}\n\nfunc distance(p, q []int) int {\n    return (p[0]-q[0])*(p[0]-q[0]) + (p[1]-q[1])*(p[1]-q[1])\n}\n\nfunc outerTrees(trees [][]int) [][]int {\n    n := len(trees)\n    if n < 4 {\n        return trees\n    }\n\n    // 找到 y 最小的点 bottom\n    bottom := 0\n    for i, tree := range trees {\n        if tree[1] < trees[bottom][1] {\n            bottom = i\n        }\n    }\n    trees[bottom], trees[0] = trees[0], trees[bottom]\n\n    // 以 bottom 原点，按照极坐标的角度大小进行排序\n    tr := trees[1:]\n    sort.Slice(tr, func(i, j int) bool {\n        a, b := tr[i], tr[j]\n        diff := cross(trees[0], a, b)\n        return diff > 0 || diff == 0 && distance(trees[0], a) < distance(trees[0], b)\n    })\n\n    // 对于凸包最后且在同一条直线的元素按照距离从大到小进行排序\n    r := n - 1\n    for r >= 0 && cross(trees[0], trees[n-1], trees[r]) == 0 {\n        r--\n    }\n    for l, h := r+1, n-1; l < h; l++ {\n        trees[l], trees[h] = trees[h], trees[l]\n        h--\n    }\n\n    st := []int{0, 1}\n    for i := 2; i < n; i++ {\n        // 如果当前元素与栈顶的两个元素构成的向量顺时针旋转，则弹出栈顶元素\n        for len(st) > 1 && cross(trees[st[len(st)-2]], trees[st[len(st)-1]], trees[i]) < 0 {\n            st = st[:len(st)-1]\n        }\n        st = append(st, i)\n    }\n\n    ans := make([][]int, len(st))\n    for i, idx := range st {\n        ans[i] = trees[idx]\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n \\log n)$，其中 $n$ 为数组的长度。首先需要对数组进行排序，时间复杂度为 $O(n \\log n)$，每次添加栈中添加元素后，判断新加入的元素是否在凸包上，因此每个元素都可能进行入栈与出栈一次，最多需要的时间复杂度为 $O(2n)$，因此总的时间复杂度为 $O(n \\log n)$。\n\n+ 空间复杂度：$O(n)$，其中 $n$ 为数组的长度。首先该解法需要快速排序，需要的栈空间为 $O(\\log n)$，需要栈来保存当前已经判别的元素，栈中最多有 $n$ 个元素，所需要的空间为 $O(n)$，因此总的空间复杂度为 $O(n)$。\n\n#### 方法三: Andrew 算法\n\n**思路与算法**\n\n$\\texttt{Andrew}$ 使用单调链算法，该算法与 $\\texttt{Graham}$ 扫描算分类似。它们主要的不同点在于凸壳上点的顺序。与 $\\texttt{Graham}$ 扫描算法按照点计较顺序排序不同，我们按照点的 $x$ 坐标排序，如果两个点又相同的 $x$ 坐标，那么就按照它们的 $y$ 坐标排序。显然排序后的最大值与最小值一定在凸包上，而且因为是凸多边形，我们如果从一个点出发逆时针走，轨迹总是「左拐」的，一旦出现右拐，就说明这一段不在凸包上，因此我们可以用一个单调栈来维护上下凸壳。\n\n仔细观察可以发现，最小值与最大值一定位于凸包的最左边与最右边，从左向右看，我们将凸壳考虑成 $2$ 个子边界组成：上凸壳和下凸壳。下凸壳一定是从最小值一直「左拐」直到最大值，上凸壳一定是从最大值「左拐」到最小值，因此我们首先升序枚举求出下凸壳，然后降序求出上凸壳。\n我们首先将最初始的两个点添加到凸壳中，然后遍历排好序的 $\\textit{trees}$ 数组。对于每个新的点，我们检查当前点是否在最后两个点的逆时针方向上，轨迹是否是左拐。如果是的话，当前点直接被压入凸壳 $\\textit{hull}$ 中，$\\textit{cross}$ 返回的结果为正数；如果不是的话，$\\textit{cross}$ 返回的结果为负数，我们可以知道栈顶的元素在凸壳里面而不是凸壳边上。我们继续从 $\\textit{hull}$ 中弹出元素直到当前点相对于栈顶的两个点的逆时针方向上。\n\n这个方法中，我们不需要显式地考虑共线的点，因为这些点已经按照 $x$ 坐标排好了序。所以如果有共线的点，它们已经被隐式地按正确顺序考虑了。通过这样，我们会一直遍历到 $x$ 坐标最大的点为止。但是凸壳还没有完全求解出来。目前求解出来的部分只包括凸壳的下半部分。现在我们需要求出凸壳的上半部分。\n\n我们继续找下一个逆时针的点并将不在边界上的点从栈中弹出，但这次我们遍历的顺序是按照 $x$ 坐标从大到小，我们只需要从后往前遍历有序数组 $\\textit{trees}$ 即可。我们将新的上凸壳的值添加到之前的 $\\textit{hull}$ 数组中。最后 $\\textit{hull}$ 数组返回了我们需要的边界上的点。需要注意的是，由于我们需要检测上凸壳最后加入的点是否合法，此时需要再次插入最左边的点 $textit{hull}[0]$ 进行判别。\n\n下面的动图展示了这一过程。\n\n<![image.png](https://pic.leetcode-cn.com/28c74c05c7e71763df6778647b202c8467464d528e2c24b56d4800c44e50ec8a-image.png),![image.png](https://pic.leetcode-cn.com/c9e083c99971d9c31eb284d55bc3e180fdac2cd16a15c33c098606aa04eaeb97-image.png),![image.png](https://pic.leetcode-cn.com/ffe6085c21d3e0925fa22183bb48b92471eb0b95894423523473a446a7403321-image.png),![image.png](https://pic.leetcode-cn.com/eca3df66fca58cc2baa18ecf14b9ccd957b352aaed6c32d4a4ee5f968d71a916-image.png),![image.png](https://pic.leetcode-cn.com/f45b8abcf52700532893947c88c19ee04918138ac7aaa8f033e0e65a52d23826-image.png),![image.png](https://pic.leetcode-cn.com/11a7379c6abe2a1cbfa23252ecf95c634248e53531a876628c4f3ab3d8db5df5-image.png),![image.png](https://pic.leetcode-cn.com/012f30834de8c581a921d4142003bb7ef243f66f035ce716ea0e24dd56ca0c59-image.png),![image.png](https://pic.leetcode-cn.com/9370c1061b17940996c03ea90dd4165982dc2acd36dd4daa4560982f4a0bc230-image.png),![image.png](https://pic.leetcode-cn.com/e030f2b0448b528604e85d9f17f4d1fd4a679d9e3b60bb37706034b7abca2a0a-image.png),![image.png](https://pic.leetcode-cn.com/cccf8a43fd9424cba7ab476f362ef28c4dd27566950c8076e8034c2496b21857-image.png),![image.png](https://pic.leetcode-cn.com/6692d870df81f3c1338e297449122abeb008e92f9edd47949467c69acb6294f8-image.png),![image.png](https://pic.leetcode-cn.com/57c03e527887ade079669b3c9c58f9b104701a41c9bea2f34ae95de246be702c-image.png),![image.png](https://pic.leetcode-cn.com/90eb1c164ed398fdbddf1dd23239902a605cff02c61c35ca8f33168573cff80b-image.png),![image.png](https://pic.leetcode-cn.com/5155cb152972a7bd6ffc67bb1f7713cc98e98a46aaeb2eb09be676105f70bb6b-image.png),![image.png](https://pic.leetcode-cn.com/789246c4139c7bb3634734b2e2fc2aa4584322584509c49129d1300adcb8d888-image.png),![image.png](https://pic.leetcode-cn.com/3afed0d6c7a2453a09379f97791eeaf45d469f1e2b21ba65b377142ab4500cc3-image.png),![image.png](https://pic.leetcode-cn.com/77c766fe39fef45549e1149954bf5b717cdd7d9f34caa1def01764234c79677d-image.png),![image.png](https://pic.leetcode-cn.com/617f5d0ff37692e9443aa2b02f2a3de6cac8e64a2c4d0fd6cc994ec7533662b2-image.png),![image.png](https://pic.leetcode-cn.com/4c02b60a2fa2bb8bfa9c60ff983ba76990e944ef3de41d85db61e9133ddf4742-image.png),![image.png](https://pic.leetcode-cn.com/419552b1b3adeb30d79f63c73faf742c1803ab4dee018e161102868b51795563-image.png),![image.png](https://pic.leetcode-cn.com/8391689b56933450bcf6b37d215071ccd50ac1ff5bcde193eedbfe6aa81d58fe-image.png),![image.png](https://pic.leetcode-cn.com/2475ed0aaaa5531d28214fd8ecd521e0b6fbed06b45f24ddecbc70a70169ef39-image.png),![image.png](https://pic.leetcode-cn.com/4177c35db6be3faa7d9c9eef61ac4bf7a669da8179412f7ab675e2a3728cce51-image.png),![image.png](https://pic.leetcode-cn.com/af71dc94c4459577aa65b775c94ef7bc2affbdd7b1f29926cae31a7d05ee0dfb-image.png),![image.png](https://pic.leetcode-cn.com/1332b23ab751058b102ec1b1726ee6aae196b2c89fd2c0fe5b4fce5ba239097f-image.png),![image.png](https://pic.leetcode-cn.com/444083192d672e1aa13c1c52d57dc106ba244a3b6879432fe76c0e89a76edc18-image.png),![image.png](https://pic.leetcode-cn.com/afece179c0208fd75de069336e5ca927fc20a4825a7a6f840009565cc0febd74-image.png),![image.png](https://pic.leetcode-cn.com/15ecfd82ca2e53fb57b9c69a308a8879477e7c64ed91705dbd3ffc7b8f8a3786-image.png),![image.png](https://pic.leetcode-cn.com/9a9ea7becb0a58da8589c78b6e087fdbf555f7e94dc5bf9441fadca352287f74-image.png)>\n\n**代码**\n\n```Python [sol3-Python3]\nclass Solution:\n    def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:\n        def cross(p: List[int], q: List[int], r: List[int]) -> int:\n            return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0])\n\n        n = len(trees)\n        if n < 4:\n            return trees\n\n        # 按照 x 从小到大排序，如果 x 相同，则按照 y 从小到大排序\n        trees.sort()\n\n        hull = [0]  # hull[0] 需要入栈两次，不标记\n        used = [False] * n\n        # 求凸包的下半部分\n        for i in range(1, n):\n            while len(hull) > 1 and cross(trees[hull[-2]], trees[hull[-1]], trees[i]) < 0:\n                used[hull.pop()] = False\n            used[i] = True\n            hull.append(i)\n        # 求凸包的上半部分\n        m = len(hull)\n        for i in range(n - 2, -1, -1):\n            if not used[i]:\n                while len(hull) > m and cross(trees[hull[-2]], trees[hull[-1]], trees[i]) < 0:\n                    used[hull.pop()] = False\n                used[i] = True\n                hull.append(i)\n        # hull[0] 同时参与凸包的上半部分检测，因此需去掉重复的 hull[0]\n        hull.pop()\n\n        return [trees[i] for i in hull]\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int cross(const vector<int> & p, const vector<int> & q, const vector<int> & r) {\n        return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n    }\n\n    vector<vector<int>> outerTrees(vector<vector<int>>& trees) {\n        int n = trees.size();\n        if (n < 4) {\n            return trees;\n        }\n        /* 按照 x 大小进行排序，如果 x 相同，则按照 y 的大小进行排序 */\n        sort(trees.begin(), trees.end(), [](const vector<int> & a, const vector<int> & b) {\n            if (a[0] == b[0]) {\n                return a[1] < b[1];\n            }\n            return a[0] < b[0];\n        });\n        vector<int> hull;\n        vector<bool> used(n, false);\n        /* hull[0] 需要入栈两次，不进行标记 */\n        hull.emplace_back(0);\n        /* 求出凸包的下半部分 */\n        for (int i = 1; i < n; i++) {\n            while (hull.size() > 1 && cross(trees[hull[hull.size() - 2]], trees[hull.back()], trees[i]) < 0) {\n                used[hull.back()] = false;\n                hull.pop_back();\n            }\n            used[i] = true;\n            hull.emplace_back(i);\n        }\n        int m = hull.size();\n        /* 求出凸包的上半部分 */\n        for (int i = n - 2; i >= 0; i--) {\n            if (!used[i]) {\n                while (hull.size() > m && cross(trees[hull[hull.size() - 2]], trees[hull.back()], trees[i]) < 0) {\n                    used[hull.back()] = false;\n                    hull.pop_back();\n                }\n                used[i] = true;\n                hull.emplace_back(i);\n            }\n        }\n        /* hull[0] 同时参与凸包的上半部分检测，因此需去掉重复的 hull[0] */\n        hull.pop_back();\n        vector<vector<int>> res;\n        for(auto & v : hull) {\n            res.emplace_back(trees[v]);\n        }\n        return res;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int[][] outerTrees(int[][] trees) {\n        int n = trees.length;\n        if (n < 4) {\n            return trees;\n        }\n        /* 按照 x 大小进行排序，如果 x 相同，则按照 y 的大小进行排序 */\n        Arrays.sort(trees, (a, b) -> {\n            if (a[0] == b[0]) {\n                return a[1] - b[1];\n            }\n            return a[0] - b[0];\n        });\n        List<Integer> hull = new ArrayList<Integer>();\n        boolean[] used = new boolean[n];\n        /* hull[0] 需要入栈两次，不进行标记 */\n        hull.add(0);\n        /* 求出凸包的下半部分 */\n        for (int i = 1; i < n; i++) {\n            while (hull.size() > 1 && cross(trees[hull.get(hull.size() - 2)], trees[hull.get(hull.size() - 1)], trees[i]) < 0) {\n                used[hull.get(hull.size() - 1)] = false;\n                hull.remove(hull.size() - 1);\n            }\n            used[i] = true;\n            hull.add(i);\n        }\n        int m = hull.size();\n        /* 求出凸包的上半部分 */\n        for (int i = n - 2; i >= 0; i--) {\n            if (!used[i]) {\n                while (hull.size() > m && cross(trees[hull.get(hull.size() - 2)], trees[hull.get(hull.size() - 1)], trees[i]) < 0) {\n                    used[hull.get(hull.size() - 1)] = false;\n                    hull.remove(hull.size() - 1);\n                }\n                used[i] = true;\n                hull.add(i);\n            }\n        }\n        /* hull[0] 同时参与凸包的上半部分检测，因此需去掉重复的 hull[0] */\n        hull.remove(hull.size() - 1);\n        int size = hull.size();\n        int[][] res = new int[size][2];\n        for (int i = 0; i < size; i++) {\n            res[i] = trees[hull.get(i)];\n        }\n        return res;\n    }\n\n    public int cross(int[] p, int[] q, int[] r) {\n        return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public int[][] OuterTrees(int[][] trees) {\n        int n = trees.Length;\n        if (n < 4) {\n            return trees;\n        }\n        /* 按照 x 大小进行排序，如果 x 相同，则按照 y 的大小进行排序 */\n        Array.Sort(trees, (a, b) => {\n            if (a[0] == b[0]) {\n                return a[1] - b[1];\n            }\n            return a[0] - b[0];\n        });\n        IList<int> hull = new List<int>();\n        bool[] used = new bool[n];\n        /* hull[0] 需要入栈两次，不进行标记 */\n        hull.Add(0);\n        /* 求出凸包的下半部分 */\n        for (int i = 1; i < n; i++) {\n            while (hull.Count > 1 && Cross(trees[hull[hull.Count - 2]], trees[hull[hull.Count - 1]], trees[i]) < 0) {\n                used[hull[hull.Count - 1]] = false;\n                hull.RemoveAt(hull.Count - 1);\n            }\n            used[i] = true;\n            hull.Add(i);\n        }\n        int m = hull.Count;\n        /* 求出凸包的上半部分 */\n        for (int i = n - 2; i >= 0; i--) {\n            if (!used[i]) {\n                while (hull.Count > m && Cross(trees[hull[hull.Count - 2]], trees[hull[hull.Count - 1]], trees[i]) < 0) {\n                    used[hull[hull.Count - 1]] = false;\n                    hull.RemoveAt(hull.Count - 1);\n                }\n                used[i] = true;\n                hull.Add(i);\n            }\n        }\n        /* hull[0] 同时参与凸包的上半部分检测，因此需去掉重复的 hull[0] */\n        hull.RemoveAt(hull.Count - 1);\n        int size = hull.Count;\n        int[][] res = new int[size][];\n        for (int i = 0; i < size; i++) {\n            res[i] = trees[hull[i]];\n        }\n        return res;\n    }\n\n    public int Cross(int[] p, int[] q, int[] r) {\n        return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n    }\n}\n```\n\n```C [sol3-C]\nstatic int cross(const int * p, const int * q, const int * r) {\n    return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n}\n\nstatic int cmp(const void * pa, const void * pb) {\n    int *a = *((int **)pa);\n    int *b = *((int **)pb);\n    if (a[0] == b[0]) {\n        return a[1] - b[1];\n    }\n    return a[0] - b[0];\n}\n\nint** outerTrees(int** trees, int treesSize, int* treesColSize, int* returnSize, int** returnColumnSizes) {\n    int **res = (int **)malloc(sizeof(int *) * treesSize);\n    int pos = 0;\n    if (treesSize < 4) {\n        *returnColumnSizes = (int *)malloc(sizeof(int) * treesSize);\n        for (int i = 0; i < treesSize; i++) {\n            res[i] = (int *)malloc(sizeof(int) * 2);\n            res[i][0] = trees[i][0];\n            res[i][1] = trees[i][1];\n            (*returnColumnSizes)[i] = 2;\n        }\n        *returnSize = treesSize;\n        return res;\n    }\n    \n    qsort(trees, treesSize, sizeof(int *), cmp);\n    int * hull = (int *)malloc(sizeof(int) * (treesSize + 1));\n    int * used = (int *)malloc(sizeof(int) * treesSize);\n    memset(used, 0, sizeof(int) * treesSize);\n    /* hull[0] 需要入栈两次，不进行标记 */\n    hull[pos++] = 0;\n    /* 求出凸包的下半部分 */\n    for (int i = 1; i < treesSize; i++) {\n        while (pos > 1 && cross(trees[hull[pos - 2]], trees[hull[pos - 1]], trees[i]) < 0) {\n            used[hull[pos - 1]] = false;\n            pos--;\n        }\n        used[i] = true;\n        hull[pos++] = i;\n    }\n    int m = pos;\n    /* 求出凸包的上半部分 */\n    for (int i = treesSize - 2; i >= 0; i--) {\n        if (!used[i]) {\n            while (pos > m && cross(trees[hull[pos - 2]], trees[hull[pos - 1]], trees[i]) < 0) {\n                used[hull[pos - 1]] = false;\n                pos--;\n            }\n            used[i] = true;\n            hull[pos++] = i;\n        }\n    }\n    /* hull[0] 同时参与凸包的上半部分检测，因此需去掉重复的 hull[0] */\n    pos--;\n    *returnSize = pos;\n    *returnColumnSizes = (int *)malloc(sizeof(int) * pos);\n    for (int i = 0; i < pos; i++) {\n        (*returnColumnSizes)[i] = 2;\n        res[i] = (int *)malloc(sizeof(int) * 2);\n        memcpy(res[i], trees[hull[i]], sizeof(int) * 2);\n    }\n    free(used);\n    free(hull);\n    return res;\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar outerTrees = function(trees) {\n    const n = trees.length;\n    if (n < 4) {\n        return trees;\n    }\n    /* 按照 x 大小进行排序，如果 x 相同，则按照 y 的大小进行排序 */\n    trees.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return a[1] - b[1];\n        }\n        return a[0] - b[0];\n    });\n    const hull = [];\n    const used = new Array(n).fill(0);\n    /* hull[0] 需要入栈两次，不进行标记 */\n    hull.push(0);\n    /* 求出凸包的下半部分 */\n    for (let i = 1; i < n; i++) {\n        while (hull.length > 1 && cross(trees[hull[hull.length - 2]], trees[hull[hull.length - 1]], trees[i]) < 0) {\n            used[hull[hull.length - 1]] = false;\n            hull.pop();\n        }\n        used[i] = true;\n        hull.push(i);\n    }\n    const m = hull.length;\n    /* 求出凸包的上半部分 */\n    for (let i = n - 2; i >= 0; i--) {\n        if (!used[i]) {\n            while (hull.length > m && cross(trees[hull[hull.length - 2]], trees[hull[hull.length - 1]], trees[i]) < 0) {\n                used[hull[hull.length - 1]] = false;\n                hull.pop();\n            }\n            used[i] = true;\n            hull.push(i);\n        }\n    }\n    /* hull[0] 同时参与凸包的上半部分检测，因此需去掉重复的 hull[0] */\n    hull.pop();\n    const size = hull.length;\n    const res = new Array(size).fill(0).map(() => new Array(2).fill(0));\n    for (let i = 0; i < size; i++) {\n        res[i] = trees[hull[i]];\n    }\n    return res;\n}\n\nconst cross = (p, q, r) => {\n    return (q[0] - p[0]) * (r[1] - q[1]) - (q[1] - p[1]) * (r[0] - q[0]);\n}\n```\n\n```go [sol3-Golang]\nfunc cross(p, q, r []int) int {\n    return (q[0]-p[0])*(r[1]-q[1]) - (q[1]-p[1])*(r[0]-q[0])\n}\n\nfunc outerTrees(trees [][]int) [][]int {\n    n := len(trees)\n    if n < 4 {\n        return trees\n    }\n\n    // 按照 x 从小到大排序，如果 x 相同，则按照 y 从小到大排序\n    sort.Slice(trees, func(i, j int) bool { a, b := trees[i], trees[j]; return a[0] < b[0] || a[0] == b[0] && a[1] < b[1] })\n\n    hull := []int{0} // hull[0] 需要入栈两次，不标记\n    used := make([]bool, n)\n    // 求凸包的下半部分\n    for i := 1; i < n; i++ {\n        for len(hull) > 1 && cross(trees[hull[len(hull)-2]], trees[hull[len(hull)-1]], trees[i]) < 0 {\n            used[hull[len(hull)-1]] = false\n            hull = hull[:len(hull)-1]\n        }\n        used[i] = true\n        hull = append(hull, i)\n    }\n    // 求凸包的上半部分\n    m := len(hull)\n    for i := n - 2; i >= 0; i-- {\n        if !used[i] {\n            for len(hull) > m && cross(trees[hull[len(hull)-2]], trees[hull[len(hull)-1]], trees[i]) < 0 {\n                used[hull[len(hull)-1]] = false\n                hull = hull[:len(hull)-1]\n            }\n            used[i] = true\n            hull = append(hull, i)\n        }\n    }\n    // hull[0] 同时参与凸包的上半部分检测，因此需去掉重复的 hull[0]\n    hull = hull[:len(hull)-1]\n\n    ans := make([][]int, len(hull))\n    for i, idx := range hull {\n        ans[i] = trees[idx]\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n \\log n)$，其中 $n$ 为数组的长度。首先需要对数组进行排序，时间复杂度为 $O(n \\log n)$，每次添加栈中添加元素后，判断新加入的元素是否在凸包上，因此每个元素都可能进行入栈与出栈一次，最多需要的时间复杂度为 $O(2n)$，因此总的时间复杂度为 $O(n \\log n)$。\n\n+ 空间复杂度：$O(n)$，其中 $n$ 为数组的长度。首先该解法需要快速排序，需要的栈空间为 $O(\\log n)$，用来标记元素是否存在重复访问的空间复杂度为 $O(n)$，需要栈来保存当前判别的凸包上的元素，栈中最多有 $n$ 个元素，所需要的空间为 $O(n)$，因此总的空间复杂度为 $O(n)$。"
}