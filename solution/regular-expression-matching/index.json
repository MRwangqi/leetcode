{
	"titleSlug": "regular-expression-matching",
	"slug": "zheng-ze-biao-da-shi-pi-pei-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/regular-expression-matching/solution/zheng-ze-biao-da-shi-pi-pei-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n**思路与算法**\n\n题目中的匹配是一个「逐步匹配」的过程：我们每次从字符串 $p$ 中取出一个字符或者「字符 + 星号」的组合，并在 $s$ 中进行匹配。对于 $p$ 中一个字符而言，它只能在 $s$ 中匹配一个字符，匹配的方法具有唯一性；而对于 $p$ 中字符 + 星号的组合而言，它可以在 $s$ 中匹配任意自然数个字符，并不具有唯一性。因此我们可以考虑使用动态规划，对匹配的方案进行枚举。\n\n我们用 $f[i][j]$ 表示 $s$ 的前 $i$ 个字符与 $p$ 中的前 $j$ 个字符是否能够匹配。在进行状态转移时，我们考虑 $p$ 的第 $j$ 个字符的匹配情况：\n\n- 如果 $p$ 的第 $j$ 个字符是一个小写字母，那么我们必须在 $s$ 中匹配一个相同的小写字母，即\n\n    $$\n    f[i][j] = \\begin{cases}\n    f[i - 1][j - 1], & s[i] = p[j]\\\\\n    \\text{false}, & s[i] \\neq p[j]\n    \\end{cases}\n    $$\n\n    也就是说，如果 $s$ 的第 $i$ 个字符与 $p$ 的第 $j$ 个字符不相同，那么无法进行匹配；否则我们可以匹配两个字符串的最后一个字符，完整的匹配结果取决于两个字符串前面的部分。\n\n- 如果 $p$ 的第 $j$ 个字符是 `*`，那么就表示我们可以对 $p$ 的第 $j-1$ 个字符匹配任意自然数次。在匹配 $0$ 次的情况下，我们有\n\n    $$\n    f[i][j] = f[i][j - 2]\n    $$\n\n    也就是我们「浪费」了一个字符 + 星号的组合，没有匹配任何 $s$ 中的字符。\n\n    在匹配 $1,2,3, \\cdots$ 次的情况下，类似地我们有\n\n    $$\n    \\begin{aligned}\n    & f[i][j] = f[i - 1][j - 2], \\quad && \\text{if~} s[i] = p[j - 1] \\\\\n    & f[i][j] = f[i - 2][j - 2], \\quad && \\text{if~} s[i - 1] = s[i] = p[j - 1] \\\\\n    & f[i][j] = f[i - 3][j - 2], \\quad && \\text{if~} s[i - 2] = s[i - 1] = s[i] = p[j - 1] \\\\\n    & \\cdots\\cdots & \n    \\end{aligned}\n    $$\n\n    如果我们通过这种方法进行转移，那么我们就需要枚举这个组合到底匹配了 $s$ 中的几个字符，会增导致时间复杂度增加，并且代码编写起来十分麻烦。我们不妨换个角度考虑这个问题：字母 + 星号的组合在匹配的过程中，本质上只会有两种情况：\n\n    - 匹配 $s$ 末尾的一个字符，将该字符扔掉，而该组合还可以继续进行匹配；\n\n    - 不匹配字符，将该组合扔掉，不再进行匹配。\n\n    如果按照这个角度进行思考，我们可以写出很精巧的状态转移方程：\n\n    $$\n    f[i][j] = \\begin{cases}\n    f[i - 1][j] \\text{~or~} f[i][j - 2], & s[i] = p[j - 1] \\\\\n    f[i][j - 2], & s[i] \\neq p[j - 1]\n    \\end{cases}\n    $$\n\n- 在任意情况下，只要 $p[j]$ 是 `.`，那么 $p[j]$ 一定成功匹配 $s$ 中的任意一个小写字母。\n\n最终的状态转移方程如下：\n\n$$\nf[i][j] = \\begin{cases}\n\\text{if~} (p[j] \\neq \\text{~`*'}) = \\begin{cases}\nf[i - 1][j - 1], & \\textit{matches}(s[i], p[j])\\\\\n\\text{false}, & \\text{otherwise}\n\\end{cases} \\\\\n\\text{otherwise} = \\begin{cases}\nf[i - 1][j] \\text{~or~} f[i][j - 2], & \\textit{matches}(s[i], p[j-1]) \\\\\nf[i][j - 2], & \\text{otherwise}\n\\end{cases}\n\\end{cases}\n$$\n\n其中 $\\textit{matches}(x, y)$ 判断两个字符是否匹配的辅助函数。只有当 $y$ 是 `.` 或者 $x$ 和 $y$ 本身相同时，这两个字符才会匹配。\n\n**细节**\n\n动态规划的边界条件为 $f[0][0] = \\text{true}$，即两个空字符串是可以匹配的。最终的答案即为 $f[m][n]$，其中 $m$ 和 $n$ 分别是字符串 $s$ 和 $p$ 的长度。由于大部分语言中，字符串的字符下标是从 $0$ 开始的，因此在实现上面的状态转移方程时，需要注意状态中每一维下标与实际字符下标的对应关系。\n\n在上面的状态转移方程中，如果字符串 $p$ 中包含一个「字符 + 星号」的组合（例如 `a*`），那么在进行状态转移时，会先将 `a` 进行匹配（当 $p[j]$ 为 `a` 时），再将 `a*` 作为整体进行匹配（当 $p[j]$ 为 `*` 时）。然而，在题目描述中，我们**必须**将 `a*` 看成一个整体，因此将 `a` 进行匹配是不符合题目要求的。看来我们进行了额外的状态转移，这样会对最终的答案产生影响吗？这个问题留给读者进行思考。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int m = s.size();\n        int n = p.size();\n\n        auto matches = [&](int i, int j) {\n            if (i == 0) {\n                return false;\n            }\n            if (p[j - 1] == '.') {\n                return true;\n            }\n            return s[i - 1] == p[j - 1];\n        };\n\n        vector<vector<int>> f(m + 1, vector<int>(n + 1));\n        f[0][0] = true;\n        for (int i = 0; i <= m; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                if (p[j - 1] == '*') {\n                    f[i][j] |= f[i][j - 2];\n                    if (matches(i, j - 1)) {\n                        f[i][j] |= f[i - 1][j];\n                    }\n                }\n                else {\n                    if (matches(i, j)) {\n                        f[i][j] |= f[i - 1][j - 1];\n                    }\n                }\n            }\n        }\n        return f[m][n];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isMatch(String s, String p) {\n        int m = s.length();\n        int n = p.length();\n\n        boolean[][] f = new boolean[m + 1][n + 1];\n        f[0][0] = true;\n        for (int i = 0; i <= m; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                if (p.charAt(j - 1) == '*') {\n                    f[i][j] = f[i][j - 2];\n                    if (matches(s, p, i, j - 1)) {\n                        f[i][j] = f[i][j] || f[i - 1][j];\n                    }\n                } else {\n                    if (matches(s, p, i, j)) {\n                        f[i][j] = f[i - 1][j - 1];\n                    }\n                }\n            }\n        }\n        return f[m][n];\n    }\n\n    public boolean matches(String s, String p, int i, int j) {\n        if (i == 0) {\n            return false;\n        }\n        if (p.charAt(j - 1) == '.') {\n            return true;\n        }\n        return s.charAt(i - 1) == p.charAt(j - 1);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        m, n = len(s), len(p)\n\n        def matches(i: int, j: int) -> bool:\n            if i == 0:\n                return False\n            if p[j - 1] == '.':\n                return True\n            return s[i - 1] == p[j - 1]\n\n        f = [[False] * (n + 1) for _ in range(m + 1)]\n        f[0][0] = True\n        for i in range(m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '*':\n                    f[i][j] |= f[i][j - 2]\n                    if matches(i, j - 1):\n                        f[i][j] |= f[i - 1][j]\n                else:\n                    if matches(i, j):\n                        f[i][j] |= f[i - 1][j - 1]\n        return f[m][n]\n```\n\n```golang [sol1-Golang]\nfunc isMatch(s string, p string) bool {\n    m, n := len(s), len(p)\n    matches := func(i, j int) bool {\n        if i == 0 {\n            return false\n        }\n        if p[j-1] == '.' {\n            return true\n        }\n        return s[i-1] == p[j-1]\n    }\n\n    f := make([][]bool, m + 1)\n    for i := 0; i < len(f); i++ {\n        f[i] = make([]bool, n + 1)\n    }\n    f[0][0] = true\n    for i := 0; i <= m; i++ {\n        for j := 1; j <= n; j++ {\n            if p[j-1] == '*' {\n                f[i][j] = f[i][j] || f[i][j-2]\n                if matches(i, j - 1) {\n                    f[i][j] = f[i][j] || f[i-1][j]\n                }\n            } else if matches(i, j) {\n                f[i][j] = f[i][j] || f[i-1][j-1]\n            }\n        }\n    }\n    return f[m][n]\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是字符串 $s$ 和 $p$ 的长度。我们需要计算出所有的状态，并且每个状态在进行转移时的时间复杂度为 $O(1)$。\n\n- 空间复杂度：$O(mn)$，即为存储所有状态使用的空间。"
}