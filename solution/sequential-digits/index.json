{
	"titleSlug": "sequential-digits",
	"slug": "shun-ci-shu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/sequential-digits/solution/shun-ci-shu-by-leetcode-solution/",
	"content": "### 方法一：枚举\n\n我们可以枚举所有的「顺次数」，并依次判断它们是否在 `[low, high]` 的范围内。\n\n具体地，我们首先枚举「顺次数」的最高位数字 `i`，随后递增地枚举「顺次数」的最低位数字 `j`，需要满足 `j > i`。对于每一组 `(i, j)`，我们可以得到其对应的「顺次数」`num`，如果 `num` 在 `[low, high]` 的范围内，就将其加入答案中。\n\n在枚举完所有的「顺次数」后，我们将答案进行排序，就可以得到最终的结果。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> sequentialDigits(int low, int high) {\n        vector<int> ans;\n        for (int i = 1; i <= 9; ++i) {\n            int num = i;\n            for (int j = i + 1; j <= 9; ++j) {\n                num = num * 10 + j;\n                if (num >= low && num <= high) {\n                    ans.push_back(num);\n                }\n            }\n        }\n        sort(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        ans = list()\n        for i in range(1, 10):\n            num = i\n            for j in range(i + 1, 10):\n                num = num * 10 + j\n                if low <= num <= high:\n                    ans.append(num)\n        return sorted(ans)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。根据定义，每一组满足 $1 \\leq i < j \\leq 9$ 的 $(i, j)$ 就对应了一个「顺次数」，那么「顺次数」的数量为 $\\binom{9}{2} = \\frac{9 \\times 8}{2} = 36$ 个，可以视作一个常数。因此时间复杂度为 $O(1)$。\n\n- 空间复杂度：$O(1)$。"
}