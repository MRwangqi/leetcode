{
	"titleSlug": "QTMn0o",
	"slug": "he-wei-k-de-zi-shu-zu-by-leetcode-soluti-1169",
	"url": "https://leetcode-cn.com/problems/QTMn0o/solution/he-wei-k-de-zi-shu-zu-by-leetcode-soluti-1169/",
	"content": "#### 方法一：枚举\n\n**思路和算法**\n\n考虑以 $i$ 结尾和为 $k$ 的连续子数组个数，我们需要统计符合条件的下标 $j$ 的个数，其中 $0\\leq j\\leq i$ 且 $[j..i]$ 这个子数组的和恰好为 $k$ 。\n\n我们可以枚举 $[0..i]$ 里所有的下标 $j$ 来判断是否符合条件，可能有读者会认为假定我们确定了子数组的开头和结尾，还需要 $O(n)$ 的时间复杂度遍历子数组来求和，那样复杂度就将达到 $O(n^3)$ 从而无法通过所有测试用例。但是如果我们知道 $[j,i]$ 子数组的和，就能 $O(1)$ 推出 $[j-1,i]$ 的和，因此这部分的遍历求和是不需要的，我们在枚举下标 $j$ 的时候已经能 $O(1)$ 求出 $[j,i]$ 的子数组之和。\n\n```Java [sol1-Java]\npublic class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0;\n        for (int start = 0; start < nums.length; ++start) {\n            int sum = 0;\n            for (int end = start; end >= 0; --end) {\n                sum += nums[end];\n                if (sum == k) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        int count = 0;\n        for (int start = 0; start < nums.size(); ++start) {\n            int sum = 0;\n            for (int end = start; end >= 0; --end) {\n                sum += nums[end];\n                if (sum == k) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar subarraySum = function(nums, k) {\n    let count = 0;\n    for (let start = 0; start < nums.length; ++start) {\n        let sum = 0;\n        for (let end = start; end >= 0; --end) {\n            sum += nums[end];\n            if (sum == k) {\n                count++;\n            }\n        }\n    }\n    return count;\n};\n```\n\n```golang [sol1-Golang]\nfunc subarraySum(nums []int, k int) int {\n    count := 0\n    for start := 0; start < len(nums); start++ {\n        sum := 0\n        for end := start; end >= 0; end-- {\n            sum += nums[end]\n            if sum == k {\n                count++\n            }\n        }\n    }\n    return count\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 为数组的长度。枚举子数组开头和结尾需要 $O(n^2)$ 的时间，其中求和需要 $O(1)$ 的时间复杂度，因此总时间复杂度为 $O(n^2)$。\n\n- 空间复杂度：$O(1)$。只需要常数空间存放若干变量。\n\n#### 方法二：前缀和 + 哈希表优化\n\n**思路和算法**\n\n我们可以基于方法一利用数据结构进行进一步的优化，我们知道方法一的瓶颈在于对每个 $i$，我们需要枚举所有的 $j$ 来判断是否符合条件，这一步是否可以优化呢？答案是可以的。 \n\n我们定义 $\\textit{pre}[i]$ 为 $[0..i]$ 里所有数的和，则 $\\textit{pre}[i]$ 可以由 $\\textit{pre}[i-1]$ 递推而来，即：\n$$\n\\textit{pre}[i]=\\textit{pre}[i-1]+\\textit{nums}[i]\n$$\n\n那么「$[j..i]$ 这个子数组和为 $k$ 」这个条件我们可以转化为\n\n$$\n\\textit{pre}[i]-\\textit{pre}[j-1]==k\n$$\n\n简单移项可得符合条件的下标 $j$ 需要满足\n$$\n\\textit{pre}[j-1] == \\textit{pre}[i] - k\n$$\n所以我们考虑以 $i$ 结尾的和为 $k$ 的连续子数组个数时只要统计有多少个前缀和为 $\\textit{pre}[i]-k$ 的 $\\textit{pre}[j]$ 即可。我们建立哈希表 $\\textit{mp}$，以和为键，出现次数为对应的值，记录 $\\textit{pre}[i]$ 出现的次数，从左往右边更新 $\\textit{mp}$ 边计算答案，那么以 $i$ 结尾的答案 $\\textit{mp}[\\textit{pre}[i]-k]$ 即可在 $O(1)$ 时间内得到。最后的答案即为所有下标结尾的和为 $k$ 的子数组个数之和。\n\n需要注意的是，从左往右边更新边计算的时候已经保证了$\\textit{mp}[\\textit{pre}[i]-k]$ 里记录的 $\\textit{pre}[j]$ 的下标范围是 $0\\leq j\\leq i$ 。同时，由于$\\textit{pre}[i]$ 的计算只与前一项的答案有关，因此我们可以不用建立 $\\textit{pre}$ 数组，直接用 $\\textit{pre}$ 变量来记录 $pre[i-1]$ 的答案即可。\n\n下面的动画描述了这一过程：\n\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_010/1.PNG),![fig2](https://assets.leetcode-cn.com/solution-static/jianzhi_II_010/2.PNG),![fig3](https://assets.leetcode-cn.com/solution-static/jianzhi_II_010/3.PNG),![fig4](https://assets.leetcode-cn.com/solution-static/jianzhi_II_010/4.PNG),![fig5](https://assets.leetcode-cn.com/solution-static/jianzhi_II_010/5.PNG),![fig6](https://assets.leetcode-cn.com/solution-static/jianzhi_II_010/6.PNG),![fig7](https://assets.leetcode-cn.com/solution-static/jianzhi_II_010/7.PNG),![fig8](https://assets.leetcode-cn.com/solution-static/jianzhi_II_010/8.PNG),![fig9](https://assets.leetcode-cn.com/solution-static/jianzhi_II_010/9.PNG)>\n\n\n```Java [sol2-Java]\npublic class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0, pre = 0;\n        HashMap < Integer, Integer > mp = new HashMap < > ();\n        mp.put(0, 1);\n        for (int i = 0; i < nums.length; i++) {\n            pre += nums[i];\n            if (mp.containsKey(pre - k)) {\n                count += mp.get(pre - k);\n            }\n            mp.put(pre, mp.getOrDefault(pre, 0) + 1);\n        }\n        return count;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        unordered_map<int, int> mp;\n        mp[0] = 1;\n        int count = 0, pre = 0;\n        for (auto& x:nums) {\n            pre += x;\n            if (mp.find(pre - k) != mp.end()) {\n                count += mp[pre - k];\n            }\n            mp[pre]++;\n        }\n        return count;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar subarraySum = function(nums, k) {\n    const mp = new Map();\n    mp.set(0, 1);\n    let count = 0, pre = 0;\n    for (const x of nums) {\n        pre += x;\n        if (mp.has(pre - k)) {\n            count += mp.get(pre - k);\n        }\n        if (mp.has(pre)) {\n            mp.set(pre, mp.get(pre) + 1);\n        } else {\n            mp.set(pre, 1);\n        }\n    }\n    return count;\n};\n```\n\n```golang [sol2-Golang]\nfunc subarraySum(nums []int, k int) int {\n    count, pre := 0, 0\n    m := map[int]int{}\n    m[0] = 1\n    for i := 0; i < len(nums); i++ {\n        pre += nums[i]\n        if _, ok := m[pre - k]; ok {\n            count += m[pre - k]\n        }\n        m[pre] += 1\n    }\n    return count\n} \n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。我们遍历数组的时间复杂度为 $O(n)$，中间利用哈希表查询删除的复杂度均为 $O(1)$，因此总时间复杂度为 $O(n)$。\n\n* 空间复杂度：$O(n)$，其中 $n$ 为数组的长度。哈希表在最坏情况下可能有 $n$ 个不同的键值，因此需要 $O(n)$ 的空间复杂度。"
}