{
	"titleSlug": "sequentially-ordinal-rank-tracker",
	"slug": "by-shikata-akiko-fans-96p8",
	"url": "https://leetcode-cn.com/problems/sequentially-ordinal-rank-tracker/solution/by-shikata-akiko-fans-96p8/",
	"content": "[第 67 场双周赛](https://leetcode.cn/contest/biweekly-contest-67/) 的 `第四题`，评分 `2158`。现在来看这题，还是挺简单的~ 🤣\r\n\r\nPS：其实是高阶的做法我不会~ 😂\r\n\r\n**方法一**：`有序集合` — `SortedList` ~\r\n\r\n```css\r\n执行用时：784 ms, 在所有 Python3 提交中击败了 63.53% 的用户\r\n内存消耗：38.9 MB, 在所有 Python3 提交中击败了 41.18% 的用户\r\n```\r\n\r\n```python\r\nfrom sortedcontainers import SortedList\r\n\r\n\r\nclass SORTracker:\r\n\r\n    def __init__(self):\r\n        self.sl = SortedList(\r\n            key=lambda elem: (-elem[1], elem[0])\r\n        )\r\n        self.cnt = -1\r\n\r\n    def add(self, name: str, score: int) -> None:\r\n        self.sl.add((name, score))\r\n\r\n    def get(self) -> str:\r\n        self.cnt += 1\r\n        return self.sl[self.cnt][0]\r\n\r\n```\r\n**方法二**：`二分插入` ~\r\n\r\n```css\r\n执行用时：924 ms, 在所有 Python3 提交中击败了 25.88% 的用户\r\n内存消耗：36.1 MB, 在所有 Python3 提交中击败了 82.35% 的用户\r\n```\r\n\r\n```python\r\nclass SORTracker:\r\n\r\n    def __init__(self):\r\n        self.sl = []\r\n        self.cnt = -1\r\n\r\n    def add(self, name: str, score: int) -> None:\r\n        idx = bisect.bisect_left(self.sl, (-score, name))\r\n        self.sl.insert(idx, (-score, name))\r\n\r\n    def get(self) -> str:\r\n        self.cnt += 1\r\n        return self.sl[self.cnt][1]\r\n\r\n```\r\n"
}