{
	"titleSlug": "split-two-strings-to-make-palindrome",
	"slug": "split-two-strings-to-make-palindrome-by-ikaruga",
	"url": "https://leetcode-cn.com/problems/split-two-strings-to-make-palindrome/solution/split-two-strings-to-make-palindrome-by-ikaruga/",
	"content": "### 思路\r\n1. 题目给出的字符串长度固定，可以直接使用 [中心扩展法](https://leetcode-cn.com/problems/palindromic-substrings/solution/palindromic-substrings-by-ikaruga/) 检测\r\n    1. 由中心向两侧分别检测字符串 a 和 b\r\n    2. 即【前 a 后 a】和【前 b 后 b】\r\n    3. 不断扩展，直到字符不相同，中间部分都是回文串\r\n    4. 结合下图观看，同时检测两条字符串，我们只关心回文更长的那串，具体是哪条更长不重要\r\n\r\n2. 当不符合回文串时，有一次机会将两个字符串拼接一下\r\n    1. 继续扩展检测，这次检测拼接后的字符串\r\n    2. 即【前 a 后 b】和【前 b 后 a】\r\n    3. 结合下图观看，因为拼接的字符串既有 a 也有 b，所以之前更长的是哪串都不影响\r\n\r\n3. 当再次结束检测时\r\n    1. 如字符再次不相同，则是匹配失败\r\n    2. 如全部匹配，则 `left` 应该为 -1\r\n\r\n### 图解\r\n![图片.png](https://pic.leetcode-cn.com/1602390786-XfOHyx-%E5%9B%BE%E7%89%87.png)\r\n* 如图所示，第一次检测时，字符串 a 的中心并没有回文串，而字符串 b 有一段合法回文串\r\n* 第二次检测时，【前 a 后 b】通过测试\r\n* 最终，【前 a 后 b】和 b 的中心子串组合起来，就是拼接后的回文串（所有有底色的字符）\r\n\r\n### 答题\r\n```C++ []\r\nclass Solution {\r\npublic:\r\n    bool checkPalindromeFormation(string a, string b) {\r\n        int left = a.size() / 2 - 1;\r\n        left = min(check(a, a, left), check(b, b, left));\r\n        left = min(check(a, b, left), check(b, a, left));\r\n        return left == -1;\r\n    }\r\n\r\n    int check(string str_l, string str_r, int left) {\r\n        int right = str_l.size() - 1 - left;\r\n        while (left >= 0 && right < str_l.size()) {\r\n            if (str_l[left] != str_r[right]) break;\r\n            left--;\r\n            right++;\r\n        }\r\n        return left;\r\n    }\r\n};\r\n```\r\n\r\n\r\n\r\n### 致谢\r\n\r\n感谢您的观看，希望对您有帮助，欢迎热烈的交流！  \r\n\r\n**如果感觉还不错就点个赞吧~**\r\n\r\n这是 [我的leetcode](https://leetcode-cn.com/u/ikaruga/) ，帮助我收集整理题目，可以方便的 `visual studio` 调试，欢迎关注，star。\r\n\r\n"
}