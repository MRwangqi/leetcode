{
	"titleSlug": "lexicographically-smallest-string-after-applying-operations",
	"slug": "bao-li-mei-xue-by-lucifer1004",
	"url": "https://leetcode-cn.com/problems/lexicographically-smallest-string-after-applying-operations/solution/bao-li-mei-xue-by-lucifer1004/",
	"content": "[本场周赛题解](https://cp-wiki.vercel.app/tutorial/leetcode/WC211/) | [我的LeetCode比赛题解](https://cp-wiki.vercel.app/tutorial/leetcode/)\n\n### 解题思路\n\n在本题的数据范围内，可以枚举所有可能的操作结果，从中选择最小的那一个。关键是：如何枚举？\n\n首先考虑轮转操作。对于一个长度为$N$的字符串，每次轮转$b$个位置，等价于轮转$g=GCD(N,b)$个位置。所以，我们只需要以$g$为步长进行轮转的枚举即可。\n\n接下来考虑增加操作。如果$g$是偶数，那么不管怎么轮转，我们只能对下标为奇数的位置进行增加操作；否则，我们也可以对下标为偶数的位置进行增加操作。根据这两种情况，枚举奇数和偶数位置的增加操作的次数即可。因为每一位是$[0,9]$之间的数，而$1\\leq a\\leq9$，所以我们只需要枚举操作$[0,9]$次的情形。\n\n### 复杂度\n\n- 时间复杂度$O(D^2|S|^2)$，本题中$D=10$。\n- 空间复杂度$O(|S|)$\n\n### 代码\n\n```cpp\nclass Solution {\n    int gcd(int x, int y) {\n        return y == 0 ? x : gcd(y, x % y);\n    }\npublic:\n    string findLexSmallestString(string s, int a, int b) {\n        int n = s.size();\n        string ans = s;\n        string t = s + s;\n        int g = gcd(n, b);\n        for (int i = 0; i < n; i += g) {\n            string p = t.substr(i, n);\n            for (int j = 0; j <= 9; ++j) {\n                int th = g % 2 == 0 ? 0 : 9;\n                for (int k = 0; k <= th; ++k) {\n                    string q(p);\n                    for (int t = 1; t < n; t += 2)\n                        q[t] = '0' + (q[t] - '0' + a * j) % 10;\n                    for (int t = 0; t < n; t += 2)\n                        q[t] = '0' + (q[t] - '0' + a * k) % 10;\n                    ans = min(ans, q);\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n### 进一步优化\n\n![截屏2020-10-19 21.00.22.png](https://pic.leetcode-cn.com/1603112427-uRjiTp-%E6%88%AA%E5%B1%8F2020-10-19%2021.00.22.png)\n\n上述方法还有进一步优化的空间吗？答案是肯定的。事实上，对于每一个轮转，我们只需要让其第一个奇数位，也即`p[1]`达到最小；当然，如果可以对偶数位进行操作，则需要再考虑让`p[0]`达到最小。这样，对奇偶的讨论就变成了并联而非串联的关系。在确定了奇数位（和偶数位）的操作次数后，对于每一轮转，我们只会生成一个唯一的新字符串。\n\n从而，我们将算法的时间复杂度优化到了$O(|S|^2+D)$。\n\n```cpp\nclass Solution {\n    int gcd(int x, int y) {\n        return y == 0 ? x : gcd(y, x % y);\n    }\npublic:\n    string findLexSmallestString(string s, int a, int b) {\n        int n = s.size();\n        string ans = s;\n        string t = s + s;\n        int ga = gcd(10, a), gb = gcd(n, b);\n        \n        // 奇偶通用的add操作\n        auto add = [&](string &p, int pos) {\n            int lo = p[pos] - '0', added = 0;\n            for (int i = ga; i < 10; i += ga) {\n                int c = (p[pos] - '0' + i) % 10;\n                if (c < lo) {\n                    lo = c;\n                    added = i;\n                }\n            }\n            if (added)\n                for (int i = pos; i < n; i += 2)\n                    p[i] = '0' + (p[i] - '0' + added) % 10;\n        };\n        \n        // rotate操作\n        for (int i = 0; i < n; i += gb) {\n            string p = t.substr(i, n);\n            add(p, 1);\n            if (gb % 2)\n                add(p, 0);\n            ans = min(ans, p);\n        }\n        return ans;\n    }\n};\n```"
}