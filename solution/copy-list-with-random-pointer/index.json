{
	"titleSlug": "copy-list-with-random-pointer",
	"slug": "fu-zhi-dai-sui-ji-zhi-zhen-de-lian-biao-rblsf",
	"url": "https://leetcode-cn.com/problems/copy-list-with-random-pointer/solution/fu-zhi-dai-sui-ji-zhi-zhen-de-lian-biao-rblsf/",
	"content": "#### 方法一：回溯 + 哈希表\n\n**思路及算法**\n\n本题要求我们对一个特殊的链表进行深拷贝。如果是普通链表，我们可以直接按照遍历的顺序创建链表节点。而本题中因为随机指针的存在，当我们拷贝节点时，「当前节点的随机指针指向的节点」可能还没创建，因此我们需要变换思路。一个可行方案是，我们利用回溯的方式，让每个节点的拷贝操作相互独立。对于当前节点，我们首先要进行拷贝，然后我们进行「当前节点的后继节点」和「当前节点的随机指针指向的节点」拷贝，拷贝完成后将创建的新节点的指针返回，即可完成当前节点的两指针的赋值。\n\n具体地，我们用哈希表记录每一个节点对应新节点的创建情况。遍历该链表的过程中，我们检查「当前节点的后继节点」和「当前节点的随机指针指向的节点」的创建情况。如果这两个节点中的任何一个节点的新节点没有被创建，我们都立刻递归地进行创建。当我们拷贝完成，回溯到当前层时，我们即可完成当前节点的指针赋值。注意一个节点可能被多个其他节点指向，因此我们可能递归地多次尝试拷贝某个节点，为了防止重复拷贝，我们需要首先检查当前节点是否被拷贝过，如果已经拷贝过，我们可以直接从哈希表中取出拷贝后的节点的指针并返回即可。\n\n在实际代码中，我们需要特别判断给定节点为空节点的情况。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    unordered_map<Node*, Node*> cachedNode;\n\n    Node* copyRandomList(Node* head) {\n        if (head == nullptr) {\n            return nullptr;\n        }\n        if (!cachedNode.count(head)) {\n            Node* headNew = new Node(head->val);\n            cachedNode[head] = headNew;\n            headNew->next = copyRandomList(head->next);\n            headNew->random = copyRandomList(head->random);\n        }\n        return cachedNode[head];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    Map<Node, Node> cachedNode = new HashMap<Node, Node>();\n\n    public Node copyRandomList(Node head) {\n        if (head == null) {\n            return null;\n        }\n        if (!cachedNode.containsKey(head)) {\n            Node headNew = new Node(head.val);\n            cachedNode.put(head, headNew);\n            headNew.next = copyRandomList(head.next);\n            headNew.random = copyRandomList(head.random);\n        }\n        return cachedNode.get(head);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    Dictionary<Node, Node> cachedNode = new Dictionary<Node, Node>();\n\n    public Node CopyRandomList(Node head) {\n        if (head == null) {\n            return null;\n        }\n        if (!cachedNode.ContainsKey(head)) {\n            Node headNew = new Node(head.val);\n            cachedNode.Add(head, headNew);\n            headNew.next = CopyRandomList(head.next);\n            headNew.random = CopyRandomList(head.random);\n        }\n        return cachedNode[head];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar copyRandomList = function(head, cachedNode = new Map()) {\n    if (head === null) {\n        return null;\n    }\n    if (!cachedNode.has(head)) {\n        cachedNode.set(head, {val: head.val}), Object.assign(cachedNode.get(head), {next: copyRandomList(head.next, cachedNode), random: copyRandomList(head.random, cachedNode)})\n    }\n    return cachedNode.get(head);\n}\n```\n\n```go [sol1-Golang]\nvar cachedNode map[*Node]*Node\n\nfunc deepCopy(node *Node) *Node {\n    if node == nil {\n        return nil\n    }\n    if n, has := cachedNode[node]; has {\n        return n\n    }\n    newNode := &Node{Val: node.Val}\n    cachedNode[node] = newNode\n    newNode.Next = deepCopy(node.Next)\n    newNode.Random = deepCopy(node.Random)\n    return newNode\n}\n\nfunc copyRandomList(head *Node) *Node {\n    cachedNode = map[*Node]*Node{}\n    return deepCopy(head)\n}\n```\n\n```C [sol1-C]\nstruct HashTable {\n    struct Node *key, *val;\n    UT_hash_handle hh;\n} * cachedNode;\n\nstruct Node* deepCopy(struct Node* head) {\n    if (head == NULL) {\n        return NULL;\n    }\n    struct HashTable* tmp;\n    HASH_FIND_PTR(cachedNode, &head, tmp);\n    if (tmp == NULL) {\n        struct Node* headNew = malloc(sizeof(struct Node));\n        headNew->val = head->val;\n        tmp = malloc(sizeof(struct HashTable));\n        tmp->key = head, tmp->val = headNew;\n        HASH_ADD_PTR(cachedNode, key, tmp);\n        headNew->next = deepCopy(head->next);\n        headNew->random = deepCopy(head->random);\n    }\n    return tmp->val;\n}\n\nstruct Node* copyRandomList(struct Node* head) {\n    cachedNode = NULL;\n    return deepCopy(head);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的长度。对于每个节点，我们至多访问其「后继节点」和「随机指针指向的节点」各一次，均摊每个点至多被访问两次。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是链表的长度。为哈希表的空间开销。\n\n#### 方法二：迭代 + 节点拆分\n\n**思路及算法**\n\n注意到方法一需要使用哈希表记录每一个节点对应新节点的创建情况，而我们可以使用一个小技巧来省去哈希表的空间。\n\n我们首先将该链表中每一个节点拆分为两个相连的节点，例如对于链表 $A \\rightarrow B \\rightarrow C$，我们可以将其拆分为 $A \\rightarrow A' \\rightarrow B \\rightarrow B' \\rightarrow C \\rightarrow C'$。对于任意一个原节点 $S$，其拷贝节点 $S'$ 即为其后继节点。\n\n这样，我们可以直接找到每一个拷贝节点 $S'$ 的随机指针应当指向的节点，即为其原节点 $S$ 的随机指针指向的节点 $T$ 的后继节点 $T'$。需要注意原节点的随机指针可能为空，我们需要特别判断这种情况。\n\n当我们完成了拷贝节点的随机指针的赋值，我们只需要将这个链表按照原节点与拷贝节点的种类进行拆分即可，只需要遍历一次。同样需要注意最后一个拷贝节点的后继节点为空，我们需要特别判断这种情况。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/138/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/138/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/138/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/138/4.png)>\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        if (head == nullptr) {\n            return nullptr;\n        }\n        for (Node* node = head; node != nullptr; node = node->next->next) {\n            Node* nodeNew = new Node(node->val);\n            nodeNew->next = node->next;\n            node->next = nodeNew;\n        }\n        for (Node* node = head; node != nullptr; node = node->next->next) {\n            Node* nodeNew = node->next;\n            nodeNew->random = (node->random != nullptr) ? node->random->next : nullptr;\n        }\n        Node* headNew = head->next;\n        for (Node* node = head; node != nullptr; node = node->next) {\n            Node* nodeNew = node->next;\n            node->next = node->next->next;\n            nodeNew->next = (nodeNew->next != nullptr) ? nodeNew->next->next : nullptr;\n        }\n        return headNew;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public Node copyRandomList(Node head) {\n        if (head == null) {\n            return null;\n        }\n        for (Node node = head; node != null; node = node.next.next) {\n            Node nodeNew = new Node(node.val);\n            nodeNew.next = node.next;\n            node.next = nodeNew;\n        }\n        for (Node node = head; node != null; node = node.next.next) {\n            Node nodeNew = node.next;\n            nodeNew.random = (node.random != null) ? node.random.next : null;\n        }\n        Node headNew = head.next;\n        for (Node node = head; node != null; node = node.next) {\n            Node nodeNew = node.next;\n            node.next = node.next.next;\n            nodeNew.next = (nodeNew.next != null) ? nodeNew.next.next : null;\n        }\n        return headNew;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public Node CopyRandomList(Node head) {\n        if (head == null) {\n            return null;\n        }\n        for (Node node = head; node != null; node = node.next.next) {\n            Node nodeNew = new Node(node.val);\n            nodeNew.next = node.next;\n            node.next = nodeNew;\n        }\n        for (Node node = head; node != null; node = node.next.next) {\n            Node nodeNew = node.next;\n            nodeNew.random = (node.random != null) ? node.random.next : null;\n        }\n        Node headNew = head.next;\n        for (Node node = head; node != null; node = node.next) {\n            Node nodeNew = node.next;\n            node.next = node.next.next;\n            nodeNew.next = (nodeNew.next != null) ? nodeNew.next.next : null;\n        }\n        return headNew;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar copyRandomList = function(head) {\n    if (head === null) {\n        return null;\n    }\n    for (let node = head; node !== null; node = node.next.next) {\n        const nodeNew = new Node(node.val, node.next, null);\n        node.next = nodeNew;\n    }\n    for (let node = head; node !== null; node = node.next.next) {\n        const nodeNew = node.next;\n        nodeNew.random = (node.random !== null) ? node.random.next : null;\n    }\n    const headNew = head.next;\n    for (let node = head; node !== null; node = node.next) {\n        const nodeNew = node.next;\n        node.next = node.next.next;\n        nodeNew.next = (nodeNew.next !== null) ? nodeNew.next.next : null;\n    }\n    return headNew;\n};\n```\n\n```go [sol2-Golang]\nfunc copyRandomList(head *Node) *Node {\n    if head == nil {\n        return nil\n    }\n    for node := head; node != nil; node = node.Next.Next {\n        node.Next = &Node{Val: node.Val, Next: node.Next}\n    }\n    for node := head; node != nil; node = node.Next.Next {\n        if node.Random != nil {\n            node.Next.Random = node.Random.Next\n        }\n    }\n    headNew := head.Next\n    for node := head; node != nil; node = node.Next {\n        nodeNew := node.Next\n        node.Next = node.Next.Next\n        if nodeNew.Next != nil {\n            nodeNew.Next = nodeNew.Next.Next\n        }\n    }\n    return headNew\n}\n```\n\n```C [sol2-C]\nstruct Node* copyRandomList(struct Node* head) {\n    if (head == NULL) {\n        return NULL;\n    }\n    for (struct Node* node = head; node != NULL; node = node->next->next) {\n        struct Node* nodeNew = malloc(sizeof(struct Node));\n        nodeNew->val = node->val;\n        nodeNew->next = node->next;\n        node->next = nodeNew;\n    }\n    for (struct Node* node = head; node != NULL; node = node->next->next) {\n        struct Node* nodeNew = node->next;\n        nodeNew->random = (node->random != NULL) ? node->random->next : NULL;\n    }\n    struct Node* headNew = head->next;\n    for (struct Node* node = head; node != NULL; node = node->next) {\n        struct Node* nodeNew = node->next;\n        node->next = node->next->next;\n        nodeNew->next = (nodeNew->next != NULL) ? nodeNew->next->next : NULL;\n    }\n    return headNew;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的长度。我们只需要遍历该链表三次。\n\n  - 读者们也可以自行尝试在计算拷贝节点的随机指针的同时计算其后继指针，这样只需要遍历两次。\n\n- 空间复杂度：$O(1)$。注意返回值不计入空间复杂度。"
}