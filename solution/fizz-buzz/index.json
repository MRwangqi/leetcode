{
	"titleSlug": "fizz-buzz",
	"slug": "fizz-buzz-by-leetcode-solution-s0s5",
	"url": "https://leetcode-cn.com/problems/fizz-buzz/solution/fizz-buzz-by-leetcode-solution-s0s5/",
	"content": "### 📺 视频题解  \n![....Fizz Buzz-栗子小笼包.mp4](4f7068a3-a78d-4962-8597-c6260e87544f)\n\n### 📖 文字题解\n#### 方法一：模拟 + 字符串拼接\n\n题目要求返回数组 $\\textit{answer}$，对于每个 $1 \\le i \\le n$，$\\textit{answer}[i]$ 为 $i$ 的转化。注意下标 $i$ 从 $1$ 开始。\n\n根据题目描述，当 $i$ 是 $3$ 的倍数时 $\\textit{answer}[i]$ 包含 $\\text{``Fizz\"}$，当 $i$ 是 $5$ 的倍数时 $\\textit{answer}[i]$ 包含 $\\text{``Buzz\"}$，当 $i$ 同时是 $3$ 的倍数和 $5$ 的倍数时 $\\textit{answer}[i]$ 既包含 $\\text{``Fizz\"}$ 也包含 $\\text{``Fuzz\"}$，且 $\\text{``Fizz\"}$ 在 $\\text{``Buzz\"}$ 前面。\n\n基于上述规则，对于每个 $1 \\le i \\le n$，可以使用字符串拼接的方式得到 $\\textit{answer}[i]$，具体操作如下：\n\n1. 如果 $i$ 是 $3$ 的倍数，则将 $\\text{``Fizz\"}$ 拼接到 $\\textit{answer}[i]$；\n\n2. 如果 $i$ 是 $5$ 的倍数，则将 $\\text{``Buzz\"}$ 拼接到 $\\textit{answer}[i]$；\n\n3. 如果 $\\textit{answer}[i]$ 为空，则 $i$ 既不是 $3$ 的倍数也不是 $5$ 的倍数，将 $i$ 拼接到 $\\textit{answer}[i]$。\n\n```Java [sol1-Java]\nclass Solution {\n    public List<String> fizzBuzz(int n) {\n        List<String> answer = new ArrayList<String>();\n        for (int i = 1; i <= n; i++) {\n            StringBuffer sb = new StringBuffer();\n            if (i % 3 == 0) {\n                sb.append(\"Fizz\");\n            }\n            if (i % 5 == 0) {\n                sb.append(\"Buzz\");\n            }\n            if (sb.length() == 0) {\n                sb.append(i);\n            }\n            answer.add(sb.toString());\n        }\n        return answer;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<string> FizzBuzz(int n) {\n        IList<string> answer = new List<string>();\n        for (int i = 1; i <= n; i++) {\n            StringBuilder sb = new StringBuilder();\n            if (i % 3 == 0) {\n                sb.Append(\"Fizz\");\n            }\n            if (i % 5 == 0) {\n                sb.Append(\"Buzz\");\n            }\n            if (sb.Length == 0) {\n                sb.Append(i);\n            }\n            answer.Add(sb.ToString());\n        }\n        return answer;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar fizzBuzz = function(n) {\n    const answer = [];\n    for (let i = 1; i <= n; i++) {\n        const sb = [];\n        if (i % 3 === 0) {\n            sb.push(\"Fizz\");\n        }\n        if (i % 5 === 0) {\n            sb.push(\"Buzz\");\n        }\n        if (sb.length === 0) {\n            sb.push(i);\n        }\n        answer.push(sb.join(''));\n    }\n    return answer;\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<string> fizzBuzz(int n) {\n        vector<string> answer;\n        for (int i = 1; i <= n; i++) {\n            string curr;\n            if (i % 3 == 0) {\n                curr　+= \"Fizz\";\n            }\n            if (i % 5 == 0) {\n                curr += \"Buzz\";\n            }\n            if (curr.size() == 0) {\n                curr += to_string(i);\n            }            \n            answer.emplace_back(curr);\n        }\n        return answer;\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc fizzBuzz(n int) (ans []string) {\n    for i := 1; i <= n; i++ {\n        sb := &strings.Builder{}\n        if i%3 == 0 {\n            sb.WriteString(\"Fizz\")\n        }\n        if i%5 == 0 {\n            sb.WriteString(\"Buzz\")\n        }\n        if sb.Len() == 0 {\n            sb.WriteString(strconv.Itoa(i))\n        }\n        ans = append(ans, sb.String())\n    }\n    return\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        ans = []\n        for i in range(1, n + 1):\n            s = \"\"\n            if i % 3 == 0:\n                s += \"Fizz\"\n            if i % 5 == 0:\n                s += \"Buzz\"\n            if s == \"\":\n                s = str(i)\n            ans.append(s)\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。需要遍历从 $1$ 到 $n$ 的每个整数，对于每个整数 $i$，生成 $\\textit{answer}[i]$ 的时间复杂度是 $O(1)$。\n\n- 空间复杂度：$O(1)$。注意返回值不计入空间复杂度。"
}