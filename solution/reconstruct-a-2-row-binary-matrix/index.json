{
	"titleSlug": "reconstruct-a-2-row-binary-matrix",
	"slug": "by-dawn-c6-gpoe",
	"url": "https://leetcode-cn.com/problems/reconstruct-a-2-row-binary-matrix/solution/by-dawn-c6-gpoe/",
	"content": "本题先对upper和lower相加判断是否和colsum数组中的总和是否相等，如果不相等直接为空，否则判断colsum中为2的,上下两层一定都为1，upper和lower都-1，colsum不为2全部先填充为0，然后判断colsum中为1时，先添加到上面一层，upper-1，upper不大于0时，开始填充到下面一层，lower-1,最后判断upper和lower是否等于0，是否全部填充完或过多填充。\r\n```\r\nclass Solution {\r\n    public List<List<Integer>> reconstructMatrix(int upper, int lower, int[] colsum) {\r\n       List<List<Integer>> lists = new LinkedList<>();\r\n\t    List<Integer> lists1 = new ArrayList<>();\r\n\t    List<Integer> lists2 = new ArrayList<>();\r\n\t    int sum = 0;\r\n\t    for(int i = 0; i < colsum.length; i++) {\r\n\t\t    sum += colsum[i];\r\n\t    }\r\n\t    if (sum != upper+lower){\r\n\t\t    return lists;\r\n\t    }\r\n\t    for(int i = 0; i < colsum.length; i++) {\r\n\t\t    if (colsum[i] == 2){\r\n\t\t\t    lists1.add(1);\r\n\t\t\t    lists2.add(1);\r\n\t\t\t    upper--;\r\n\t\t\t    lower--;\r\n\t\t    }else {\r\n\t\t\t    lists1.add(0);\r\n\t\t\t    lists2.add(0);\r\n\t\t    }\r\n\t    }\r\n\t    for(int i = 0; i < colsum.length; i++) {\r\n\t\t    if (colsum[i] == 1){\r\n\t\t\t    if (upper > 0){\r\n\t\t\t\t    lists1.set(i,1);\r\n\t\t\t\t    lists2.set(i,0);\r\n\t\t\t\t    upper--;\r\n\t\t\t    }else {\r\n\t\t\t\t    lists1.set(i,0);\r\n\t\t\t\t    lists2.set(i,1);\r\n\t\t\t\t    lower--;\r\n\t\t\t    }\r\n\t\t    }\r\n\t    }\r\n\t    if (upper != 0 || lower!=0){\r\n\t    \treturn lists;\r\n\t    }\r\n\t    lists.add(lists1);\r\n\t    lists.add(lists2);\r\n\t    return lists;\r\n    }\r\n}\r\n```\r\n"
}