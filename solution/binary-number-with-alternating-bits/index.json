{
	"titleSlug": "binary-number-with-alternating-bits",
	"slug": "jiao-ti-wei-er-jin-zhi-shu-by-leetcode-s-bmxd",
	"url": "https://leetcode-cn.com/problems/binary-number-with-alternating-bits/solution/jiao-ti-wei-er-jin-zhi-shu-by-leetcode-s-bmxd/",
	"content": "#### 方法一：模拟\n\n**思路**\n\n从最低位至最高位，我们用对 $2$ 取模再除以 $2$ 的方法，依次求出输入的二进制表示的每一位，并与前一位进行比较。如果相同，则不符合条件；如果每次比较都不相同，则符合条件。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n        prev = 2\n        while n:\n            cur = n % 2\n            if cur == prev:\n                return False\n            prev = cur\n            n //= 2\n        return True\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean hasAlternatingBits(int n) {\n        int prev = 2;\n        while (n != 0) {\n            int cur = n % 2;\n            if (cur == prev) {\n                return false;\n            }\n            prev = cur;\n            n /= 2;\n        }\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool HasAlternatingBits(int n) {\n        int prev = 2;\n        while (n != 0) {\n            int cur = n % 2;\n            if (cur == prev) {\n                return false;\n            }\n            prev = cur;\n            n /= 2;\n        }\n        return true;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool hasAlternatingBits(int n) {\n        int prev = 2;\n        while (n != 0) {\n            int cur = n % 2;\n            if (cur == prev) {\n                return false;\n            }\n            prev = cur;\n            n /= 2;\n        }\n        return true;\n    }\n};\n```\n\n```C [sol1-C]\nbool hasAlternatingBits(int n) {\n    int prev = 2;\n    while (n != 0) {\n        int cur = n % 2;\n        if (cur == prev) {\n            return false;\n        }\n        prev = cur;\n        n /= 2;\n    }\n    return true;\n} \n```\n\n```go [sol1-Golang]\nfunc hasAlternatingBits(n int) bool {\n    for pre := 2; n != 0; n /= 2 {\n        cur := n % 2\n        if cur == pre {\n            return false\n        }\n        pre = cur\n    }\n    return true\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar hasAlternatingBits = function(n) {\n    let prev = 2;\n    while (n !== 0) {\n        const cur = n % 2;\n        if (cur === prev) {\n            return false;\n        }\n        prev = cur;\n        n = Math.floor(n / 2);\n    }\n    return true;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$。输入 $n$ 的二进制表示最多有 $O(\\log n)$ 位。\n\n- 空间复杂度：$O(1)$。使用了常数空间来存储中间变量。\n\n#### 方法二：位运算\n\n**思路**\n\n对输入 $n$ 的二进制表示右移一位后，得到的数字再与 $n$ 按位异或得到 $a$。当且仅当输入 $n$ 为交替位二进制数时，$a$ 的二进制表示全为 $1$（不包括前导 $0$）。这里进行简单证明：当 $a$ 的某一位为 $1$ 时，当且仅当 $n$ 的对应位和其前一位相异。当 $a$ 的每一位为 $1$ 时，当且仅当 $n$ 的所有相邻位相异，即 $n$ 为交替位二进制数。\n\n将 $a$ 与 $a + 1$ 按位与，当且仅当 $a$ 的二进制表示全为 $1$ 时，结果为 $0$。这里进行简单证明：当且仅当 $a$ 的二进制表示全为 $1$ 时，$a + 1$ 可以进位，并将原最高位置为 $0$，按位与的结果为 $0$。否则，不会产生进位，两个最高位都为 $1$，相与结果不为 $0$。\n\n结合上述两步，可以判断输入是否为交替位二进制数。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n        a = n ^ (n >> 1)\n        return a & (a + 1) == 0\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean hasAlternatingBits(int n) {\n        int a = n ^ (n >> 1);\n        return (a & (a + 1)) == 0;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public bool HasAlternatingBits(int n) {\n        int a = n ^ (n >> 1);\n        return (a & (a + 1)) == 0;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool hasAlternatingBits(int n) {\n        long a = n ^ (n >> 1);\n        return (a & (a + 1)) == 0;\n    }\n};\n```\n\n```C [sol2-C]\nbool hasAlternatingBits(int n) {\n    long a = n ^ (n >> 1);\n    return (a & (a + 1)) == 0;\n}\n```\n\n```go [sol2-Golang]\nfunc hasAlternatingBits(n int) bool {\n    a := n ^ n>>1\n    return a&(a+1) == 0\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar hasAlternatingBits = function(n) {\n    const a = n ^ (n >> 1);\n    return (a & (a + 1)) === 0;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。仅使用了常数时间来计算。\n\n- 空间复杂度：$O(1)$。使用了常数空间来存储中间变量。"
}