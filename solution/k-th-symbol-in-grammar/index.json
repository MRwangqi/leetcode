{
	"titleSlug": "k-th-symbol-in-grammar",
	"slug": "di-kge-yu-fa-fu-hao-by-leetcode",
	"url": "https://leetcode-cn.com/problems/k-th-symbol-in-grammar/solution/di-kge-yu-fa-fu-hao-by-leetcode/",
	"content": "#### 方法一： 暴力法\n\n**思路和算法**\n\n像题目描述中的那样，生成每一行字符串，每次只需要保存最后一行就可以了。但不幸的是，字符串的长度可能超过 10 亿，因为字符串的长度是每行翻倍的，所以这个方法不是很高效。\n\n```java [solution1-Java]\nclass Solution {\n    public int kthGrammar(int N, int K) {\n        int[] lastrow = new int[1 << N];\n        for (int i = 1; i < N; ++i) {\n            for (int j = (1 << (i-1)) - 1; j >= 0; --j) {\n                lastrow[2*j] = lastrow[j];\n                lastrow[2*j+1] = 1 - lastrow[j];\n            }\n        }\n        return lastrow[K-1];\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def kthGrammar(self, N, K):\n        lastrow = '0'\n        while len(rows) < N:\n            lastrow = \"\".join('01' if x == '0' else '10'\n                              for x in lastrow)\n        return int(rows[-1][K-1])\n```\n\n\n**复杂度分析**\n\n* 时间复杂度： $O(2^N)$，其为生成字符串的总长度 $2^0 + 2^1 + \\cdots + 2^{N-1}$。\n\n* 空间复杂度： $O(2^N)$，其为最后一行字符串的长度。\n\n#### 方法二： 递归 (父子递推)\n\n**思路和算法**\n\n既然每一行都是根据上一行来生成的，把这样的上下两行写成比特形式找一下规律。\n\n![](https://pic.leetcode-cn.com/Figures/779/parent.png){:width=350}\n\n如果当前行为 `\"0110\"`，由此生成的下一行为 `\"01101001\"`。\n\n![](https://pic.leetcode-cn.com/Figures/779/link.png){:width=350}\n\n据此可以总结出规律，第 `K` 个数字是上一行第 `(K+1) / 2` 个数字生成的。如果上一行的数字为 `0`，被生成的数字为 `1 - (K%2)`，如果上一行的数字为 `1`，被生成的数字为 `K%2`。\n\n```java [solution2-Java]\nclass Solution {\n    public int kthGrammar(int N, int K) {\n        if (N == 1) return 0;\n        return (~K & 1) ^ kthGrammar(N-1, (K+1)/2);\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution(object):\n    def kthGrammar(self, N, K):\n        if N == 1: return 0\n        return (1 - K%2) ^ self.kthGrammar(N-1, (K+1)/2)\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(N)$。\n* 空间复杂度： $O(1)$。\n\n#### 方法三： 递归 (翻转递推)\n\n**思路和算法**\n\n同方法二一样，把上下两行写成比特形式找一下规律。\n\n按照规律写出几行，可以注意到一个规律：每一行的后半部分正好是前半部分的 ”翻转“，前半部分是 `'0'`，后半部分变成 `'1'`，前半部分是 `'1'`，后半部分变成 `'0'`。  \n\n可以通过归纳法证明以上规律，核心的思想在于，如果 $X$ 可以生成 $Y$，那么 $X'$ 就能生成 $Y'$。据此可以提出以下的算法： 如果 `K` 在第二部分，就找 `K -= (1 << N-2)` 在第一部分的答案，然后将答案翻转。\n\n```java [solution3-Java]\nclass Solution {\n    public int kthGrammar(int N, int K) {\n        if (N == 1) return 0;\n        if (K <= 1 << N-2)\n            return kthGrammar(N-1, K);\n        return kthGrammar(N-1, K - (1 << N-2)) ^ 1;\n    }\n}\n```\n\n```python [solution3-Python]\nclass Solution(object):\n    def kthGrammar(self, N, K):\n        if N == 1: return 0\n        if K <= (2**(N-2)):\n            return self.kthGrammar(N-1, K)\n        return self.kthGrammar(N-1, K - 2**(N-2)) ^ 1\n```\n\n\n**复杂度分析**\n\n* 时间复杂度： $O(N)$。\n\n* 空间复杂度： $O(1)$。\n\n#### 方法四： Binary Count\n\n**思路和算法**\n\n同方法三一样，每一行的后半部分都是前半部分的翻转。\n\n把下标 `K` 写成二进制的形式，如果 `K` 在第二部分，那么二进制形式的第一个比特位一定是 `1`。据此可以将方法三继续简化，实际上翻转的次数等于 `K-1` 二进制表示形式中 `1` 出现的个数。\n\n```java [solution4-Java]\nclass Solution {\n    public int kthGrammar(int N, int K) {\n        return Integer.bitCount(K - 1) % 2;\n    }\n}\n```\n\n```python [solution4-Python]\nclass Solution(object):\n    def kthGrammar(self, N, K):\n        return bin(K - 1).count('1') % 2\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\log N)$，其为 `N` 的二进制字符串表示形式的长度。\n\n* 空间复杂度：$O(1)$。"
}