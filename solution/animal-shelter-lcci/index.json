{
	"titleSlug": "animal-shelter-lcci",
	"slug": "by-cogency-v55u",
	"url": "https://leetcode-cn.com/problems/animal-shelter-lcci/solution/by-cogency-v55u/",
	"content": "### 解题思路\n![image.png](https://pic.leetcode-cn.com/1658287314-htQiVn-image.png)\n\n\n### 代码\n\n```golang\ntype AnimalShelf struct {\n    dogs []int\n    cats []int\n}\n\n\nfunc Constructor() AnimalShelf {\n    return AnimalShelf{}\n}\n\n\nfunc (this *AnimalShelf) Enqueue(animal []int)  {\n    switch animal[1] {\n        case 0:\n            this.cats = append(this.cats, animal[0])\n        case 1:\n            this.dogs = append(this.dogs, animal[0])\n    }\n}\n\n\nfunc (this *AnimalShelf) DequeueAny() []int {\n    if len(this.cats) == 0 && len(this.dogs) == 0 {\n        return []int{-1, -1}\n    }\n\n    if len(this.cats) != 0 && len(this.dogs) != 0 {\n        if this.cats[0] < this.dogs[0] {\n            res := this.cats[0]\n            this.cats = this.cats[1:]\n            return []int{res, 0}\n        } else {\n            res := this.dogs[0]\n            this.dogs = this.dogs[1:]\n            return []int{res, 1}          \n        }\n    }\n\n    if len(this.dogs) == 0 {\n        res := this.cats[0]\n        this.cats = this.cats[1:]\n        return []int{res, 0}\n    } else {\n        res := this.dogs[0]\n        this.dogs = this.dogs[1:]\n        return []int{res, 1}\n    }\n}\n\n\nfunc (this *AnimalShelf) DequeueDog() []int {\n    if len(this.dogs) == 0 {\n        return []int{-1, -1}\n    }\n\n    res := this.dogs[0]\n    this.dogs = this.dogs[1:]\n    return []int{res, 1}\n}\n\n\nfunc (this *AnimalShelf) DequeueCat() []int {\n    if len(this.cats) == 0 {\n        return []int{-1, -1}\n    }\n\n    res := this.cats[0]\n    this.cats = this.cats[1:]\n    return []int{res, 0}\n}\n\n\n/**\n * Your AnimalShelf object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Enqueue(animal);\n * param_2 := obj.DequeueAny();\n * param_3 := obj.DequeueDog();\n * param_4 := obj.DequeueCat();\n */\n```"
}