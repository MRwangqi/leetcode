{
	"titleSlug": "available-captures-for-rook",
	"slug": "che-de-ke-yong-bu-huo-liang-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/available-captures-for-rook/solution/che-de-ke-yong-bu-huo-liang-by-leetcode-solution/",
	"content": "#### 方法一：模拟\n\n**思路和算法**\n\n根据题意模拟即可：\n\n1. 遍历棋盘确定白色车的下标，用 $(st,ed)$ 表示。\n\n2. 模拟车移动的规则，朝四个基本方向移动，直到碰到卒或者白色象或者碰到棋盘边缘时停止，用 $\\textit{cnt}$ 记录捕获到的卒的数量。\n\n那么如何模拟车移动的规则呢？我们可以建立方向数组表示在这个方向上移动一步的增量，比如向北移动一步的时候，白色车的 `x` 轴坐标减 `1`，而 `y` 轴坐标不会变化，所以我们可以用 `(-1, 0)` 表示白色车向北移动一步的增量，其它三个方向同理。建立了方向数组，则白色车在某个方向移动 $\\textit{step}$ 步的坐标增量就可以直接计算得到，比如向北移动 $\\textit{step}$ 步的坐标增量即为 `(-step, 0)`。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/999_fig1.gif)\n\n方向数组也可以根据相应的题意自行扩展，比如模拟象棋中马跳的坐标增量。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numRookCaptures(vector<vector<char>>& board) {\n        int cnt = 0, st = 0, ed = 0;\n        int dx[4] = {0, 1, 0, -1};\n        int dy[4] = {1, 0, -1, 0};\n        for (int i = 0; i < 8; ++i) {\n            for (int j = 0; j < 8; ++j) {\n                if (board[i][j] == 'R') {\n                    st = i;\n                    ed = j;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < 4; ++i) {\n            for (int step = 0;; ++step) {\n                int tx = st + step * dx[i];\n                int ty = ed + step * dy[i];\n                if (tx < 0 || tx >= 8 || ty < 0 || ty >= 8 || board[tx][ty] == 'B') {\n                    break;\n                }\n                if (board[tx][ty] == 'p') {\n                    cnt++;\n                    break;\n                }\n            }\n        }\n        return cnt;\n    }\n};\n```\n```Java [sol1-Java]\nclass Solution {\n    public int numRookCaptures(char[][] board) {\n        int cnt = 0, st = 0, ed = 0;\n        int[] dx = {0, 1, 0, -1};\n        int[] dy = {1, 0, -1, 0};\n        for (int i = 0; i < 8; ++i) {\n            for (int j = 0; j < 8; ++j) {\n                if (board[i][j] == 'R') {\n                    st = i;\n                    ed = j;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < 4; ++i) {\n            for (int step = 0;; ++step) {\n                int tx = st + step * dx[i];\n                int ty = ed + step * dy[i];\n                if (tx < 0 || tx >= 8 || ty < 0 || ty >= 8 || board[tx][ty] == 'B') {\n                    break;\n                }\n                if (board[tx][ty] == 'p') {\n                    cnt++;\n                    break;\n                }\n            }\n        }\n        return cnt;\n    }\n}\n```\n```Javascript [sol1-Javascript]\nvar numRookCaptures = function(board) {\n    let cnt = 0, st = 0, ed = 0;\n    const dx = [0, 1, 0, -1];\n    const dy = [1, 0, -1, 0];\n\n    for (let i = 0; i < 8; ++i) {\n        for (let j = 0; j < 8; ++j) {\n            if (board[i][j] == 'R') {\n                st = i;\n                ed = j;\n                break;\n            }\n        }\n    }\n    for (let i = 0; i < 4; ++i) {\n        for (let step = 0;; ++step) {\n            const tx = st + step * dx[i];\n            const ty = ed + step * dy[i];\n            if (tx < 0 || tx >= 8 || ty < 0 || ty >= 8 || board[tx][ty] == 'B') {\n                break;\n            }\n            if (board[tx][ty] == 'p') {\n                cnt++;\n                break;\n            }\n        }\n    }\n    return cnt;\n};\n```\n```Python [sol1-Python3]\nclass Solution:\n    def numRookCaptures(self, board: List[List[str]]) -> int:\n        cnt, st, ed = 0, 0, 0\n        dx, dy = [0, 1, 0, -1], [1, 0, -1, 0]\n        for i in range(8):\n            for j in range(8):\n                if board[i][j] == \"R\":\n                    st, ed = i, j\n        for i in range(4):\n            step = 0\n            while True:\n                tx = st + step * dx[i]\n                ty = ed + step * dy[i]\n                if tx < 0 or tx >= 8 or ty < 0 or ty >= 8 or board[tx][ty] == \"B\":\n                    break\n                if board[tx][ty] == \"p\":\n                    cnt += 1\n                    break\n                step += 1\n        return cnt\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是棋盘的边长。找白色车在棋盘中的位置需要 $O(n^2)$ 的时间复杂度，模拟车在四个方向上捕获颜色相反的卒需要 $O(n)$ 的时间复杂度，所以一共需要 $O(n^2+n) = O(n^2)$ 的时间复杂度。 \n\n- 空间复杂度：$O(1)$，只需要常数空间存放若干变量。"
}