{
	"titleSlug": "longest-harmonious-subsequence",
	"slug": "zui-chang-he-xie-zi-xu-lie-by-leetcode-s-8cyr",
	"url": "https://leetcode-cn.com/problems/longest-harmonious-subsequence/solution/zui-chang-he-xie-zi-xu-lie-by-leetcode-s-8cyr/",
	"content": "#### 方法一：枚举\n\n**思路与算法**\n\n我们可以枚举数组中的每一个元素，对于当前枚举的元素 $x$，它可以和 $x + 1$ 组成和谐子序列。我们只需要在数组中找出等于 $x$ 或 $x + 1$ 的元素个数，就可以得到以 $x$ 为最小值的和谐子序列的长度。\n+ 实际处理时，我们可以将数组按照从小到大进行排序，我们只需要依次找到相邻两个连续相同元素的子序列，检查该这两个子序列的元素的之差是否为 $1$。\n+ 利用类似与滑动窗口的做法，$\\textit{begin}$ 指向第一个连续相同元素的子序列的第一个元素，$\\textit{end}$ 指向相邻的第二个连续相同元素的子序列的末尾元素，如果满足二者的元素之差为 $1$，则当前的和谐子序列的长度即为两个子序列的长度之和，等于 $\\textit{end} - \\textit{begin} + 1$。\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    public int findLHS(int[] nums) {\n        Arrays.sort(nums);\n        int begin = 0;\n        int res = 0;\n        for (int end = 0; end < nums.length; end++) {\n            while (nums[end] - nums[begin] > 1) {\n                begin++;\n            }\n            if (nums[end] - nums[begin] == 1) {\n                res = Math.max(res, end - begin + 1);\n            }\n        }\n        return res;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findLHS(vector<int>& nums) {\n        sort(nums.begin(),nums.end());\n        int begin = 0;\n        int res = 0;\n        for (int end = 0; end < nums.size(); end++) {\n            while (nums[end] - nums[begin] > 1) {\n                begin++;\n            }\n            if (nums[end] - nums[begin] == 1) {\n                res = max(res, end - begin + 1);\n            }\n        }\n        return res;\n    }\n};\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int FindLHS(int[] nums) {\n        Array.Sort(nums);\n        int begin = 0;\n        int res = 0;\n        for (int end = 0; end < nums.Length; end++) {\n            while (nums[end] - nums[begin] > 1) {\n                begin++;\n            }\n            if (nums[end] - nums[begin] == 1) {\n                res = Math.Max(res, end - begin + 1);\n            }\n        }\n        return res;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findLHS(self, nums: List[int]) -> int:\n        nums.sort()\n        res, begin = 0, 0\n        for end in range(len(nums)):\n            while nums[end] - nums[begin] > 1:\n                begin += 1\n            if nums[end] - nums[begin] == 1:\n                res = max(res, end - begin + 1)\n        return res\n```\n\n```JavaScript [sol1-JavaScript]\nvar findLHS = function(nums) {\n    nums.sort((a, b) => a - b);\n    let begin = 0;\n    let res = 0;\n    for (let end = 0; end < nums.length; end++) {\n        while (nums[end] - nums[begin] > 1) {\n            begin++;\n        }\n        if (nums[end] - nums[begin] === 1) {\n            res = Math.max(res, end - begin + 1);\n        }\n    }\n    return res;\n};\n```\n\n```go [sol1-Golang]\nfunc findLHS(nums []int) (ans int) {\n    sort.Ints(nums)\n    begin := 0\n    for end, num := range nums {\n        for num-nums[begin] > 1 {\n            begin++\n        }\n        if num-nums[begin] == 1 && end-begin+1 > ans {\n            ans = end - begin + 1\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\log N)$，其中 $N$ 为数组的长度。我们首先需要对数组进行排序，花费的时间复杂度为 $O(N\\log N)$，我们需要利用双指针遍历数组花费的时间为 $O(2N)$，总的时间复杂度 $T(N) = O(N\\log N) + O(2N) = O(N\\log N)$。\n\n- 空间复杂度：$O(1)$，需要常数个空间保存中间变量。\n\n#### 方法二：哈希表\n\n**思路与算法**\n\n在方法一中，我们枚举了 $x$ 后，遍历数组找出所有的 $x$ 和 $x + 1$的出现的次数。我们也可以用一个哈希映射来存储每个数出现的次数，这样就能在 $O(1)$ 的时间内得到 $x$ 和 $x + 1$ 出现的次数。\n\n我们首先遍历一遍数组，得到哈希映射。随后遍历哈希映射，设当前遍历到的键值对为 $(x, \\textit{value})$，那么我们就查询 $x + 1$ 在哈希映射中对应的统计次数，就得到了 $x$ 和 $x + 1$ 出现的次数，和谐子序列的长度等于 $x$ 和 $x + 1$ 出现的次数之和。\n\n**代码**\n\n```Java [sol2-Java]\nclass Solution {\n    public int findLHS(int[] nums) {\n        HashMap <Integer, Integer> cnt = new HashMap <>();\n        int res = 0;\n        for (int num : nums) {\n            cnt.put(num, cnt.getOrDefault(num, 0) + 1);\n        }\n        for (int key : cnt.keySet()) {\n            if (cnt.containsKey(key + 1)) {\n                res = Math.max(res, cnt.get(key) + cnt.get(key + 1));\n            }\n        }\n        return res;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int findLHS(vector<int>& nums) {\n        unordered_map<int, int> cnt;\n        int res = 0;\n        for (int num : nums) {\n            cnt[num]++;\n        }\n        for (auto [key, val] : cnt) {\n            if (cnt.count(key + 1)) {\n                res = max(res, val + cnt[key + 1]);\n            }\n        }\n        return res;\n    }\n};\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int FindLHS(int[] nums) {\n        Dictionary<int, int> dictionary = new Dictionary<int, int>();\n        int res = 0;\n        foreach (int num in nums) {\n            if (dictionary.ContainsKey(num)) {\n                dictionary[num]++;\n            } else {\n                dictionary.Add(num, 1);\n            }\n        }\n        foreach (int key in dictionary.Keys) {\n            if (dictionary.ContainsKey(key + 1)) {\n                res = Math.Max(res, dictionary[key] + dictionary[key + 1]);\n            }\n        }\n        return res;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def findLHS(self, nums: List[int]) -> int:\n        cnt = Counter(nums)\n        return max((val + cnt[key + 1] for key, val in cnt.items() if key + 1 in cnt), default=0)\n```\n\n```JavaScript [sol2-JavaScript]\nvar findLHS = function(nums) {\n    const cnt = new Map();\n    let res = 0;\n    for (const num of nums) {\n        cnt.set(num, (cnt.get(num) || 0) + 1);\n    }\n    for (const key of cnt.keys()) {\n        if (cnt.has(key + 1)) {\n            res = Math.max(res, cnt.get(key) + cnt.get(key + 1));\n        }\n    }\n    return res;\n};\n```\n\n```go [sol2-Golang]\nfunc findLHS(nums []int) (ans int) {\n    cnt := map[int]int{}\n    for _, num := range nums {\n        cnt[num]++\n    }\n    for num, c := range cnt {\n        if c1 := cnt[num+1]; c1 > 0 && c+c1 > ans {\n            ans = c + c1\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为数组的长度。\n\n- 空间复杂度：$O(N)$，其中 $N$ 为数组的长度。数组中最多有 $N$ 个不同元素，因此哈希表最多存储 $N$ 个数据。"
}