{
	"titleSlug": "vertical-order-traversal-of-a-binary-tree",
	"slug": "er-cha-shu-de-chui-xu-bian-li-by-leetcod-clsh",
	"url": "https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/solution/er-cha-shu-de-chui-xu-bian-li-by-leetcod-clsh/",
	"content": "#### 方法一：自定义排序\n\n**思路与算法**\n\n我们可以从根节点开始，对整棵树进行一次遍历，在遍历的过程中使用数组 $\\textit{nodes}$ 记录下每个节点的行号 $\\textit{row}$，列号 $\\textit{col}$ 以及值 $\\textit{value}$。在遍历完成后，我们按照 $\\textit{col}$ 为第一关键字升序，$\\textit{row}$ 为第二关键字升序，$\\textit{value}$ 为第三关键字升序，对所有的节点进行排序即可。\n\n在排序完成后，我们还需要按照题目要求，将同一列的所有节点放入同一个数组中。因此，我们可以对 $\\textit{nodes}$ 进行一次遍历，并在遍历的过程中记录**上一个节点的列号 $\\textit{lastcol}$**。如果当前遍历到的节点的列号 $\\textit{col}$ 与 $\\textit{lastcol}$ 相等，则将该节点放入与上一个节点相同的数组中，否则放入不同的数组中。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<vector<int>> verticalTraversal(TreeNode* root) {\n        vector<tuple<int, int, int>> nodes;\n\n        function<void(TreeNode*, int, int)> dfs = [&](TreeNode* node, int row, int col) {\n            if (!node) {\n                return;\n            }\n            nodes.emplace_back(col, row, node->val);\n            dfs(node->left, row + 1, col - 1);\n            dfs(node->right, row + 1, col + 1);\n        };\n\n        dfs(root, 0, 0);\n        sort(nodes.begin(), nodes.end());\n        vector<vector<int>> ans;\n        int lastcol = INT_MIN;\n        for (const auto& [col, row, value]: nodes) {\n            if (col != lastcol) {\n                lastcol = col;\n                ans.emplace_back();\n            }\n            ans.back().push_back(value);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<List<Integer>> verticalTraversal(TreeNode root) {\n        List<int[]> nodes = new ArrayList<int[]>();\n        dfs(root, 0, 0, nodes);\n        Collections.sort(nodes, new Comparator<int[]>() {\n            public int compare(int[] tuple1, int[] tuple2) {\n                if (tuple1[0] != tuple2[0]) {\n                    return tuple1[0] - tuple2[0];\n                } else if (tuple1[1] != tuple2[1]) {\n                    return tuple1[1] - tuple2[1];\n                } else {\n                    return tuple1[2] - tuple2[2];\n                }\n            }\n        });\n        List<List<Integer>> ans = new ArrayList<List<Integer>>();\n        int size = 0;\n        int lastcol = Integer.MIN_VALUE;\n        for (int[] tuple : nodes) {\n            int col = tuple[0], row = tuple[1], value = tuple[2];\n            if (col != lastcol) {\n                lastcol = col;\n                ans.add(new ArrayList<Integer>());\n                size++;\n            }\n            ans.get(size - 1).add(value);\n        }\n        return ans;\n    }\n\n    public void dfs(TreeNode node, int row, int col, List<int[]> nodes) {\n        if (node == null) {\n            return;\n        }\n        nodes.add(new int[]{col, row, node.val});\n        dfs(node.left, row + 1, col - 1, nodes);\n        dfs(node.right, row + 1, col + 1, nodes);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<IList<int>> VerticalTraversal(TreeNode root) {\n        List<Tuple<int, int, int>> nodes = new List<Tuple<int, int, int>>();\n        DFS(root, 0, 0, nodes);\n        nodes.Sort((a, b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1 - b.Item1;\n            } else if (a.Item2 != b.Item2) {\n                return a.Item2 - b.Item2;\n            } else {\n                return a.Item3 - b.Item3;\n            }\n        });\n        IList<IList<int>> ans = new List<IList<int>>();\n        int size = 0;\n        int lastcol = int.MinValue;\n        foreach (Tuple<int, int, int> tuple in nodes) {\n            int col = tuple.Item1, row = tuple.Item2, value = tuple.Item3;\n            if (col != lastcol) {\n                lastcol = col;\n                ans.Add(new List<int>());\n                size++;\n            }\n            ans[size - 1].Add(value);\n        }\n        return ans;\n    }\n\n    public void DFS(TreeNode node, int row, int col, List<Tuple<int, int, int>> nodes) {\n        if (node == null) {\n            return;\n        }\n        nodes.Add(new Tuple<int, int, int>(col, row, node.val));\n        DFS(node.left, row + 1, col - 1, nodes);\n        DFS(node.right, row + 1, col + 1, nodes);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        nodes = list()\n\n        def dfs(node: TreeNode, row: int, col: int) -> None:\n            if not node:\n                return\n\n            nodes.append((col, row, node.val))\n            dfs(node.left, row + 1, col - 1)\n            dfs(node.right, row + 1, col + 1)\n\n        dfs(root, 0, 0)\n        nodes.sort()\n        ans, lastcol = list(), float(\"-inf\")\n\n        for col, row, value in nodes:\n            if col != lastcol:\n                lastcol = col\n                ans.append(list())\n            ans[-1].append(value)\n        \n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar verticalTraversal = function(root) {\n    const nodes = [];\n    dfs(root, 0, 0, nodes);\n    nodes.sort((tuple1, tuple2) => {\n        if (tuple1[0] !== tuple2[0]) {\n            return tuple1[0] - tuple2[0];\n        } else if (tuple1[1] !== tuple2[1]) {\n            return tuple1[1] - tuple2[1];\n        } else {\n            return tuple1[2] - tuple2[2];\n        }\n    });\n\n    const ans = [];\n    let lastcol = -Number.MAX_VALUE;\n    for (const tuple of nodes) {\n        let col = tuple[0], row = tuple[1], value = tuple[2];\n        if (col !== lastcol) {\n            lastcol = col;\n            ans.push([]);\n        }\n        ans[ans.length - 1].push(value);\n    }\n    return ans;\n}\n\nconst dfs = (node, row, col, nodes) => {\n    if (node === null) {\n        return;\n    }\n    nodes.push([col, row, node.val]);\n    dfs(node.left, row + 1, col - 1, nodes);\n    dfs(node.right, row + 1, col + 1, nodes);\n}\n```\n\n```go [sol1-Golang]\ntype data struct{ col, row, val int }\n\nfunc verticalTraversal(root *TreeNode) (ans [][]int) {\n    nodes := []data{}\n    var dfs func(*TreeNode, int, int)\n    dfs = func(node *TreeNode, row, col int) {\n        if node == nil {\n            return\n        }\n        nodes = append(nodes, data{col, row, node.Val})\n        dfs(node.Left, row+1, col-1)\n        dfs(node.Right, row+1, col+1)\n    }\n    dfs(root, 0, 0)\n\n    sort.Slice(nodes, func(i, j int) bool {\n        a, b := nodes[i], nodes[j]\n        return a.col < b.col || a.col == b.col && (a.row < b.row || a.row == b.row && a.val < b.val)\n    })\n\n    lastCol := math.MinInt32\n    for _, node := range nodes {\n        if node.col != lastCol {\n            lastCol = node.col\n            ans = append(ans, nil)\n        }\n        ans[len(ans)-1] = append(ans[len(ans)-1], node.val)\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是树中的节点个数。我们需要 $O(n)$ 的时间对整棵树进行一次遍历（例如代码中的深度优先搜索），随后需要 $O(n \\log n)$ 的时间对数组 $\\textit{nodes}$ 进行排序，以及 $O(n)$ 的时间对数组 $\\textit{nodes}$ 进行遍历得到最终的答案。由于 $O(n \\log n)$ 在渐近意义下大于 $O(n)$，所以算法的总时间复杂度为 $O(n \\log n)$。\n\n- 空间复杂度：$O(n)$。深度优先搜索中需要 $O(n)$ 的栈空间，同时数组 $\\textit{nodes}$ 也需要 $O(n)$ 的空间。"
}