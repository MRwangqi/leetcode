{
	"titleSlug": "shortest-bridge",
	"slug": "zui-duan-de-qiao-by-leetcode",
	"url": "https://leetcode-cn.com/problems/shortest-bridge/solution/zui-duan-de-qiao-by-leetcode/",
	"content": "#### 方法一：搜索\n\n**分析**\n\n我们使用的方法非常直接：首先找到这两座岛，随后选择一座，将它不断向外延伸一圈，直到到达了另一座岛。\n\n在寻找这两座岛时，我们使用深度优先搜索。在向外延伸时，我们使用广度优先搜索。\n\n**算法**\n\n我们通过对数组 `A` 中的 `1` 进行深度优先搜索，可以得到两座岛的位置集合，分别为 `source` 和 `target`。随后我们从 `source` 中的所有位置开始进行广度优先搜索，当它们到达了 `target` 中的任意一个位置时，搜索的层数就是答案。\n\n```Java [sol1]\nclass Solution {\n    public int shortestBridge(int[][] A) {\n        int R = A.length, C = A[0].length;\n        int[][] colors = getComponents(A);\n\n        Queue<Node> queue = new LinkedList();\n        Set<Integer> target = new HashSet();\n\n        for (int r = 0; r < R; ++r)\n            for (int c = 0; c < C; ++c) {\n                if (colors[r][c] == 1) {\n                    queue.add(new Node(r, c, 0));\n                } else if (colors[r][c] == 2) {\n                    target.add(r * C + c);\n                }\n            }\n\n        while (!queue.isEmpty()) {\n            Node node = queue.poll();\n            if (target.contains(node.r * C + node.c))\n                return node.depth - 1;\n            for (int nei: neighbors(A, node.r, node.c)) {\n                int nr = nei / C, nc = nei % C;\n                if (colors[nr][nc] != 1) {\n                    queue.add(new Node(nr, nc, node.depth + 1));\n                    colors[nr][nc] = 1;\n                }\n            }\n        }\n\n        throw null;\n    }\n\n    public int[][] getComponents(int[][] A) {\n        int R = A.length, C = A[0].length;\n        int[][] colors = new int[R][C];\n        int t = 0;\n\n        for (int r0 = 0; r0 < R; ++r0)\n            for (int c0 = 0; c0 < C; ++c0)\n                if (colors[r0][c0] == 0 && A[r0][c0] == 1) {\n                    // Start dfs\n                    Stack<Integer> stack = new Stack();\n                    stack.push(r0 * C + c0);\n                    colors[r0][c0] = ++t;\n\n                    while (!stack.isEmpty()) {\n                        int node = stack.pop();\n                        int r = node / C, c = node % C;\n                        for (int nei: neighbors(A, r, c)) {\n                            int nr = nei / C, nc = nei % C;\n                            if (A[nr][nc] == 1 && colors[nr][nc] == 0) {\n                                colors[nr][nc] = t;\n                                stack.push(nr * C + nc);\n                            }\n                        }\n                    }\n                }\n\n        return colors;\n    }\n\n    public List<Integer> neighbors(int[][] A, int r, int c) {\n        int R = A.length, C = A[0].length;\n        List<Integer> ans = new ArrayList();\n        if (0 <= r-1) ans.add((r-1) * R + c);\n        if (0 <= c-1) ans.add(r * R + (c-1));\n        if (r+1 < R) ans.add((r+1) * R + c);\n        if (c+1 < C) ans.add(r * R + (c+1));\n        return ans;\n    }\n}\n\nclass Node {\n    int r, c, depth;\n    Node(int r, int c, int d) {\n        this.r = r;\n        this.c = c;\n        depth = d;\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def shortestBridge(self, A):\n        R, C = len(A), len(A[0])\n\n        def neighbors(r, c):\n            for nr, nc in ((r-1,c),(r,c-1),(r+1,c),(r,c+1)):\n                if 0 <= nr < R and 0 <= nc < C:\n                    yield nr, nc\n\n        def get_components():\n            done = set()\n            components = []\n            for r, row in enumerate(A):\n                for c, val in enumerate(row):\n                    if val and (r, c) not in done:\n                        # Start dfs\n                        stack = [(r, c)]\n                        seen = {(r, c)}\n                        while stack:\n                            node = stack.pop()\n                            for nei in neighbors(*node):\n                                if A[nei[0]][nei[1]] and nei not in seen:\n                                    stack.append(nei)\n                                    seen.add(nei)\n                        done |= seen\n                        components.append(seen)\n            return components\n\n        source, target = get_components()\n        print source, target\n        queue = collections.deque([(node, 0) for node in source])\n        done = set(source)\n        while queue:\n            node, d = queue.popleft()\n            if node in target: return d-1\n            for nei in neighbors(*node):\n                if nei not in done:\n                    queue.append((nei, d+1))\n                    done.add(nei)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(MN)$，其中 $M$ 和 $N$ 分别是数组 `A` 的行数和列数。\n\n* 空间复杂度：$O(MN)$。"
}