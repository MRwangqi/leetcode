{
	"titleSlug": "integer-to-roman",
	"slug": "zheng-shu-zhuan-luo-ma-shu-zi-by-leetcod-75rs",
	"url": "https://leetcode-cn.com/problems/integer-to-roman/solution/zheng-shu-zhuan-luo-ma-shu-zi-by-leetcod-75rs/",
	"content": "#### 前言\n\n**罗马数字符号**\n\n罗马数字由 $7$ 个不同的单字母符号组成，每个符号对应一个具体的数值。此外，减法规则（如问题描述中所述）给出了额外的 $6$ 个复合符号。这给了我们总共 $13$ 个独特的符号（每个符号由 $1$ 个或 $2$ 个字母组成），如下图所示。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/12/1.png)\n\n**罗马数字的唯一表示法**\n\n让我们从一个例子入手。考虑 $140$ 的罗马数字表示，下面哪一个是正确的？\n\n![fig2](https://assets.leetcode-cn.com/solution-static/12/2.png)\n\n我们用来确定罗马数字的规则是：对于罗马数字从左到右的每一位，选择尽可能大的符号值。对于 $140$，最大可以选择的符号值为 $\\texttt{C}=100$。接下来，对于剩余的数字 $40$，最大可以选择的符号值为 $\\texttt{XL}=40$。因此，$140$ 的对应的罗马数字为 $\\texttt{C}+\\texttt{XL}=\\texttt{CXL}$。\n\n#### 方法一：模拟\n\n**思路**\n\n根据罗马数字的唯一表示法，为了表示一个给定的整数 $\\textit{num}$，我们寻找不超过 $\\textit{num}$ 的最大符号值，将 $\\textit{num}$ 减去该符号值，然后继续寻找不超过 $\\textit{num}$ 的最大符号值，将该符号拼接在上一个找到的符号之后，循环直至 $\\textit{num}$ 为 $0$。最后得到的字符串即为 $\\textit{num}$ 的罗马数字表示。\n\n编程时，可以建立一个数值-符号对的列表 $\\textit{valueSymbols}$，按数值从大到小排列。遍历 $\\textit{valueSymbols}$ 中的每个数值-符号对，若当前数值 $\\textit{value}$ 不超过 $\\textit{num}$，则从 $\\textit{num}$ 中不断减去 $\\textit{value}$，直至 $\\textit{num}$ 小于 $\\textit{value}$，然后遍历下一个数值-符号对。若遍历中 $\\textit{num}$ 为 $0$ 则跳出循环。\n\n**代码**\n\n```C++ [sol1-C++]\nconst pair<int, string> valueSymbols[] = {\n    {1000, \"M\"},\n    {900,  \"CM\"},\n    {500,  \"D\"},\n    {400,  \"CD\"},\n    {100,  \"C\"},\n    {90,   \"XC\"},\n    {50,   \"L\"},\n    {40,   \"XL\"},\n    {10,   \"X\"},\n    {9,    \"IX\"},\n    {5,    \"V\"},\n    {4,    \"IV\"},\n    {1,    \"I\"},\n};\n\nclass Solution {\npublic:\n    string intToRoman(int num) {\n        string roman;\n        for (const auto &[value, symbol] : valueSymbols) {\n            while (num >= value) {\n                num -= value;\n                roman += symbol;\n            }\n            if (num == 0) {\n                break;\n            }\n        }\n        return roman;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n    public String intToRoman(int num) {\n        StringBuffer roman = new StringBuffer();\n        for (int i = 0; i < values.length; ++i) {\n            int value = values[i];\n            String symbol = symbols[i];\n            while (num >= value) {\n                num -= value;\n                roman.append(symbol);\n            }\n            if (num == 0) {\n                break;\n            }\n        }\n        return roman.toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    readonly Tuple<int, string>[] valueSymbols = {\n        new Tuple<int, string>(1000, \"M\"),\n        new Tuple<int, string>(900, \"CM\"),\n        new Tuple<int, string>(500, \"D\"),\n        new Tuple<int, string>(400, \"CD\"),\n        new Tuple<int, string>(100, \"C\"),\n        new Tuple<int, string>(90, \"XC\"),\n        new Tuple<int, string>(50, \"L\"),\n        new Tuple<int, string>(40, \"XL\"),\n        new Tuple<int, string>(10, \"X\"),\n        new Tuple<int, string>(9, \"IX\"),\n        new Tuple<int, string>(5, \"V\"),\n        new Tuple<int, string>(4, \"IV\"),\n        new Tuple<int, string>(1, \"I\")\n    };\n\n    public string IntToRoman(int num) {\n        StringBuilder roman = new StringBuilder();\n        foreach (Tuple<int, string> tuple in valueSymbols) {\n            int value = tuple.Item1;\n            string symbol = tuple.Item2;\n            while (num >= value) {\n                num -= value;\n                roman.Append(symbol);\n            }\n            if (num == 0) {\n                break;\n            }\n        }\n        return roman.ToString();\n    }\n}\n```\n\n```go [sol1-Golang]\nvar valueSymbols = []struct {\n    value  int\n    symbol string\n}{\n    {1000, \"M\"},\n    {900, \"CM\"},\n    {500, \"D\"},\n    {400, \"CD\"},\n    {100, \"C\"},\n    {90, \"XC\"},\n    {50, \"L\"},\n    {40, \"XL\"},\n    {10, \"X\"},\n    {9, \"IX\"},\n    {5, \"V\"},\n    {4, \"IV\"},\n    {1, \"I\"},\n}\n\nfunc intToRoman(num int) string {\n    roman := []byte{}\n    for _, vs := range valueSymbols {\n        for num >= vs.value {\n            num -= vs.value\n            roman = append(roman, vs.symbol...)\n        }\n        if num == 0 {\n            break\n        }\n    }\n    return string(roman)\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar intToRoman = function(num) {\n    const valueSymbols = [[1000, \"M\"], [900, \"CM\"], [500, \"D\"], [400, \"CD\"], [100, \"C\"], [90, \"XC\"], [50, \"L\"], [40, \"XL\"], [10, \"X\"], [9, \"IX\"], [5, \"V\"], [4, \"IV\"], [1, \"I\"]];\n    const roman = [];\n    for (const [value, symbol] of valueSymbols) {\n        while (num >= value) {\n            num -= value;\n            roman.push(symbol);\n        }\n        if (num == 0) {\n            break;\n        }\n    }\n    return roman.join('');\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n\n    VALUE_SYMBOLS = [\n        (1000, \"M\"),\n        (900, \"CM\"),\n        (500, \"D\"),\n        (400, \"CD\"),\n        (100, \"C\"),\n        (90, \"XC\"),\n        (50, \"L\"),\n        (40, \"XL\"),\n        (10, \"X\"),\n        (9, \"IX\"),\n        (5, \"V\"),\n        (4, \"IV\"),\n        (1, \"I\"),\n    ]\n\n    def intToRoman(self, num: int) -> str:\n        roman = list()\n        for value, symbol in Solution.VALUE_SYMBOLS:\n            while num >= value:\n                num -= value\n                roman.append(symbol)\n            if num == 0:\n                break\n        return \"\".join(roman)\n```\n\n```C [sol1-C]\nconst int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\nconst char* symbols[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\nchar* intToRoman(int num) {\n    char* roman = malloc(sizeof(char) * 16);\n    roman[0] = '\\0';\n    for (int i = 0; i < 13; i++) {\n        while (num >= values[i]) {\n            num -= values[i];\n            strcpy(roman + strlen(roman), symbols[i]);\n        }\n        if (num == 0) {\n            break;\n        }\n    }\n    return roman;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。由于 $\\textit{valueSymbols}$ 长度是固定的，且这 $13$ 字符中的每个字符的出现次数均不会超过 $3$，因此循环次数有一个确定的上限。对于本题给出的数据范围，循环次数不会超过 $15$ 次。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：硬编码数字\n\n**思路**\n\n![fig3](https://assets.leetcode-cn.com/solution-static/12/1.png)\n\n回顾前言中列出的这 $13$ 个符号，可以发现：\n\n- 千位数字只能由 $\\texttt{M}$ 表示；\n- 百位数字只能由 $\\texttt{C}$，$\\texttt{CD}$，$\\texttt{D}$ 和 $\\texttt{CM}$ 表示；\n- 十位数字只能由 $\\texttt{X}$，$\\texttt{XL}$，$\\texttt{L}$ 和 $\\texttt{XC}$ 表示；\n- 个位数字只能由 $\\texttt{I}$，$\\texttt{IV}$，$\\texttt{V}$ 和 $\\texttt{IX}$ 表示。\n\n这恰好把这 $13$ 个符号分为四组，且组与组之间没有公共的符号。因此，整数 $\\textit{num}$ 的十进制表示中的每一个数字都是可以单独处理的。\n\n进一步地，我们可以计算出每个数字在每个位上的表示形式，整理成一张硬编码表。如下图所示，其中 $0$ 对应的是空字符串。\n\n![fig4](https://assets.leetcode-cn.com/solution-static/12/3.png)\n\n利用模运算和除法运算，我们可以得到 $\\textit{num}$ 每个位上的数字：\n\n```\nthousands_digit = num / 1000\nhundreds_digit = (num % 1000) / 100\ntens_digit = (num % 100) / 10\nones_digit = num % 10\n```\n\n最后，根据 $\\textit{num}$ 每个位上的数字，在硬编码表中查找对应的罗马字符，并将结果拼接在一起，即为 $\\textit{num}$ 对应的罗马数字。\n\n**代码**\n\n```C++ [sol2-C++]\nconst string thousands[] = {\"\", \"M\", \"MM\", \"MMM\"};\nconst string hundreds[]  = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\nconst string tens[]      = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\nconst string ones[]      = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\nclass Solution {\npublic:\n    string intToRoman(int num) {\n        return thousands[num / 1000] + hundreds[num % 1000 / 100] + tens[num % 100 / 10] + ones[num % 10];\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    String[] thousands = {\"\", \"M\", \"MM\", \"MMM\"};\n    String[] hundreds  = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n    String[] tens      = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n    String[] ones      = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\n    public String intToRoman(int num) {\n        StringBuffer roman = new StringBuffer();\n        roman.append(thousands[num / 1000]);\n        roman.append(hundreds[num % 1000 / 100]);\n        roman.append(tens[num % 100 / 10]);\n        roman.append(ones[num % 10]);\n        return roman.toString();\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    readonly string[] thousands = {\"\", \"M\", \"MM\", \"MMM\"};\n    readonly string[] hundreds  = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n    readonly string[] tens      = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n    readonly string[] ones      = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\n    public string IntToRoman(int num) {\n        StringBuilder roman = new StringBuilder();\n        roman.Append(thousands[num / 1000]);\n        roman.Append(hundreds[num % 1000 / 100]);\n        roman.Append(tens[num % 100 / 10]);\n        roman.Append(ones[num % 10]);\n        return roman.ToString();\n    }\n}\n```\n\n```go [sol2-Golang]\nvar (\n    thousands = []string{\"\", \"M\", \"MM\", \"MMM\"}\n    hundreds  = []string{\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"}\n    tens      = []string{\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"}\n    ones      = []string{\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"}\n)\n\nfunc intToRoman(num int) string {\n    return thousands[num/1000] + hundreds[num%1000/100] + tens[num%100/10] + ones[num%10]\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar intToRoman = function(num) {\n    const thousands = [\"\", \"M\", \"MM\", \"MMM\"];\n    const hundreds = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"];\n    const tens     = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"];\n    const ones     = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"];\n\n    const roman = [];\n    roman.push(thousands[Math.floor(num / 1000)]);\n    roman.push(hundreds[Math.floor(num % 1000 / 100)]);\n    roman.push(tens[Math.floor(num % 100 / 10)]);\n    roman.push(ones[num % 10]);\n    return roman.join('');\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n\n    THOUSANDS = [\"\", \"M\", \"MM\", \"MMM\"]\n    HUNDREDS = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"]\n    TENS = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"]\n    ONES = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n\n    def intToRoman(self, num: int) -> str:\n        return Solution.THOUSANDS[num // 1000] + \\\n            Solution.HUNDREDS[num % 1000 // 100] + \\\n            Solution.TENS[num % 100 // 10] + \\\n            Solution.ONES[num % 10]\n```\n\n```C [sol2-C]\nconst char* thousands[] = {\"\", \"M\", \"MM\", \"MMM\"};\nconst char* hundreds[] = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\nconst char* tens[] = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\nconst char* ones[] = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\nchar* intToRoman(int num) {\n    char* roman = malloc(sizeof(char) * 16);\n    roman[0] = '\\0';\n    strcpy(roman + strlen(roman), thousands[num / 1000]);\n    strcpy(roman + strlen(roman), hundreds[num % 1000 / 100]);\n    strcpy(roman + strlen(roman), tens[num % 100 / 10]);\n    strcpy(roman + strlen(roman), ones[num % 10]);\n    return roman;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。计算量与输入数字的大小无关。\n\n- 空间复杂度：$O(1)$。"
}