{
	"titleSlug": "perfect-number",
	"slug": "wan-mei-shu-by-leetcode-solution-d5pw",
	"url": "https://leetcode-cn.com/problems/perfect-number/solution/wan-mei-shu-by-leetcode-solution-d5pw/",
	"content": "#### 方法一：枚举\n\n我们可以枚举 $\\textit{num}$ 的所有真因子，累加所有真因子之和，记作 $\\textit{sum}$。若 $\\textit{sum}=\\textit{num}$ 则返回 $\\texttt{true}$，否则返回 $\\texttt{false}$。\n\n在枚举时，我们只需要枚举不超过 $\\sqrt\\textit{num}$ 的数。这是因为如果 $\\textit{num}$ 有一个大于 $\\sqrt\\textit{num}$ 的因数 $d$，那么它一定有一个小于 $\\sqrt\\textit{num}$ 的因数 $\\dfrac{\\textit{num}}{d}$。\n\n在枚举时，若找到了一个因数 $d$，那么就找到了因数 $\\dfrac{\\textit{num}}{d}$。注意当 $d\\cdot d=\\textit{num}$ 时这两个因数相同，此时不能重复计算。\n\n```Python [sol1-Python3]\nclass Solution:\n    def checkPerfectNumber(self, num: int) -> bool:\n        if num == 1:\n            return False\n\n        sum = 1\n        d = 2\n        while d * d <= num:\n            if num % d == 0:\n                sum += d\n                if d * d < num:\n                    sum += num / d\n            d += 1\n        return sum == num\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool checkPerfectNumber(int num) {\n        if (num == 1) {\n            return false;\n        }\n\n        int sum = 1;\n        for (int d = 2; d * d <= num; ++d) {\n            if (num % d == 0) {\n                sum += d;\n                if (d * d < num) {\n                    sum += num / d;\n                }\n            }\n        }\n        return sum == num;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean checkPerfectNumber(int num) {\n        if (num == 1) {\n            return false;\n        }\n\n        int sum = 1;\n        for (int d = 2; d * d <= num; ++d) {\n            if (num % d == 0) {\n                sum += d;\n                if (d * d < num) {\n                    sum += num / d;\n                }\n            }\n        }\n        return sum == num;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool CheckPerfectNumber(int num) {\n        if (num == 1) {\n            return false;\n        }\n\n        int sum = 1;\n        for (int d = 2; d * d <= num; ++d) {\n            if (num % d == 0) {\n                sum += d;\n                if (d * d < num) {\n                    sum += num / d;\n                }\n            }\n        }\n        return sum == num;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc checkPerfectNumber(num int) bool {\n    if num == 1 {\n        return false\n    }\n\n    sum := 1\n    for d := 2; d*d <= num; d++ {\n        if num%d == 0 {\n            sum += d\n            if d*d < num {\n                sum += num / d\n            }\n        }\n    }\n    return sum == num\n}\n```\n\n```C [sol1-C]\nbool checkPerfectNumber(int num){\n    if (num == 1) {\n        return false;\n    }\n\n    int sum = 1;\n    for (int d = 2; d * d <= num; ++d) {\n        if (num % d == 0) {\n            sum += d;\n            if (d * d < num) {\n                sum += num / d;\n            }\n        }\n    }\n    return sum == num;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar checkPerfectNumber = function(num) {\n    if (num === 1) {\n        return false;\n    }\n\n    let sum = 1;\n    for (let d = 2; d * d <= num; ++d) {\n        if (num % d === 0) {\n            sum += d;\n            if (d * d < num) {\n                sum += Math.floor(num / d);\n            }\n        }\n    }\n    return sum === num;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\sqrt\\textit{num})$。\n- 空间复杂度：$O(1)$。\n\n#### 方法二：数学\n\n根据欧几里得-欧拉定理，每个偶完全数都可以写成\n\n$$\n2^{p-1}(2^p-1)\n$$\n\n的形式，其中 $p$ 为素数且 $2^p-1$ 为素数。\n\n由于目前奇完全数还未被发现，因此题目范围 $[1,10^8]$ 内的完全数都可以写成上述形式。\n\n这一共有如下 $5$ 个：\n\n$$\n6, 28, 496, 8128, 33550336\n$$\n\n```Python [sol2-Python3]\nclass Solution:\n    def checkPerfectNumber(self, num: int) -> bool:\n        return num == 6 or num == 28 or num == 496 or num == 8128 or num == 33550336\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool checkPerfectNumber(int num) {\n        return num == 6 || num == 28 || num == 496 || num == 8128 || num == 33550336;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean checkPerfectNumber(int num) {\n        return num == 6 || num == 28 || num == 496 || num == 8128 || num == 33550336;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public bool CheckPerfectNumber(int num) {\n        return num == 6 || num == 28 || num == 496 || num == 8128 || num == 33550336;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc checkPerfectNumber(num int) bool {\n    return num == 6 || num == 28 || num == 496 || num == 8128 || num == 33550336\n}\n```\n\n```C [sol2-C]\nbool checkPerfectNumber(int num){\n    return num == 6 || num == 28 || num == 496 || num == 8128 || num == 33550336;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar checkPerfectNumber = function(num) {\n    return num === 6 || num === 28 || num === 496 || num === 8128 || num === 33550336;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。\n- 空间复杂度：$O(1)$。"
}