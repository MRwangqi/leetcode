{
	"titleSlug": "finding-3-digit-even-numbers",
	"slug": "zhao-chu-3-wei-ou-shu-by-leetcode-soluti-hptf",
	"url": "https://leetcode-cn.com/problems/finding-3-digit-even-numbers/solution/zhao-chu-3-wei-ou-shu-by-leetcode-soluti-hptf/",
	"content": "#### 方法一：枚举数组中的元素组合\n\n**思路与算法**\n\n我们可以从数组中枚举目标整数的三个整数位，判断组成的整数是否满足以下条件：\n\n- 整数为**偶数**；\n\n- 整数**不包含前导零**（即整数不小于 $100$）；\n\n- 三个整数位对应的数组下标**不能重复**。\n\n为了避免重复，我们用一个哈希集合来维护符合要求的 $3$ 位偶数，如果枚举产生的整数满足上述三个条件，则我们将该整数加入哈希集合。\n\n最终，我们将该哈希集合内的元素放入数组中，按照递增顺序排序并返回。\n\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> findEvenNumbers(vector<int>& digits) {\n        unordered_set<int> nums;   // 目标偶数集合\n        int n = digits.size();\n        // 遍历三个数位的下标\n        for (int i = 0; i < n; ++i){\n            for (int j = 0; j < n; ++j){\n                for (int k = 0; k < n; ++k){\n                    // 判断是否满足目标偶数的条件\n                    if (i == j || j == k || i == k){\n                        continue;\n                    }\n                    int num = digits[i] * 100 + digits[j] * 10 + digits[k];\n                    if (num >= 100 && num % 2 == 0){\n                        nums.insert(num);\n                    }\n                }\n            }\n        }\n        // 转化为升序排序的数组\n        vector<int> res;\n        for (const int num: nums){\n            res.push_back(num);\n        }\n        sort(res.begin(), res.end());\n        return res;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\n        nums = set()   # 目标偶数集合\n        n = len(digits)\n        # 遍历三个数位的下标\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    # 判断是否满足目标偶数的条件\n                    if i == j or j == k or i == k:\n                        continue\n                    num = digits[i] * 100 + digits[j] * 10 + digits[k]\n                    if num >= 100 and num % 2 == 0:\n                        nums.add(num)\n        # 转化为升序排序的数组\n        res = sorted(list(nums))\n        return res\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^3 + M \\log M)$，其中 $M = \\min(n^3, 10^k)$ 代表符合要求偶数的数量， $n$ 为 $\\textit{digits}$ 的长度，$k$ 为目标偶数的位数。枚举所有元素组合的时间复杂度为 $O(n^3)$，对符合要求偶数集合排序的时间复杂度为 $O(M \\log M)$。\n\n- 空间复杂度：$O(M)$，即为符合要求整数的哈希集合的空间开销。\n\n\n\n#### 方法二：遍历所有可能的 $3$ 位偶数\n\n**思路与算法**\n\n我们也可以从小到大遍历所有 $3$ 位偶数（即 $[100, 999]$ 闭区间内的所有偶数），并判断对应的三个整数位是否为 $\\textit{digits}$ 数组中三个不同元素。如果是，则该偶数为目标偶数；反之亦然。\n\n具体地，我们首先用哈希表 $\\textit{freq}$ 维护 $\\textit{digits}$ 数组中每个数出现的次数。在遍历偶数时，我们同样用哈希表 $\\textit{freq}_1$ 维护每个偶数中每个数位出现的次数。此时，该偶数能够被数组中不重复元素表示的**充要条件**即为：\n\n$\\textit{freq}_1$ 中每个元素的出现次数都不大于它在 $\\textit{freq}$ 中的出现次数。\n\n我们按照上述条件判断每个偶数是否为目标偶数，并按顺序统计这些偶数。最终，我们返回目标偶数的数组作为答案。\n\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> findEvenNumbers(vector<int>& digits) {\n        vector<int> res;   // 目标偶数数组\n        unordered_map<int, int> freq;   // 整数数组中各数字的出现次数\n        for (const int digit: digits){\n            ++freq[digit];\n        }\n       // 枚举所有三位偶数，维护整数中各数位的出现次数并比较判断是否为目标偶数\n        for (int i = 100; i < 1000; i += 2){\n            unordered_map<int, int> freq1;\n            int tmp = i;\n            while (tmp){\n                ++freq1[tmp%10];\n                tmp /= 10;\n            }\n            if (all_of(freq1.begin(), freq1.end(), [&](const auto& x){\n                    return freq[x.first] >= freq1[x.first]; \n                })){\n                res.push_back(i);\n            }\n        }\n        return res;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def findEvenNumbers(self, digits: List[int]) -> List[int]:\n        res = []   # 目标偶数数组\n        freq = Counter(digits)   # 整数数组中各数字的出现次数\n        # 枚举所有三位偶数，维护整数中各数位的出现次数并比较判断是否为目标偶数\n        for i in range(100, 1000, 2):\n            freq1 = Counter([int(d) for d in str(i)])\n            if all(freq[d] >= freq1[d] for d in freq1.keys()):\n                res.append(i)\n        return res\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(k\\cdot10^k)$，其中 $k$ 为目标偶数的位数。即为枚举所有给定位数偶数的时间复杂度。\n\n- 空间复杂度：$O(1)$，输出数组不计入空间复杂度。"
}