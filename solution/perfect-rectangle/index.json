{
	"titleSlug": "perfect-rectangle",
	"slug": "wan-mei-ju-xing-by-leetcode-solution-ty8q",
	"url": "https://leetcode-cn.com/problems/perfect-rectangle/solution/wan-mei-ju-xing-by-leetcode-solution-ty8q/",
	"content": "#### 方法一：哈希表\n\n**精确覆盖**意味着：\n\n- 矩形区域中不能有空缺，即矩形区域的面积等于所有矩形的面积之和；\n- 矩形区域中不能有相交区域。\n\n我们需要一个统计量来判定是否存在相交区域。由于精确覆盖意味着矩形的边和顶点会重合在一起，我们不妨统计每个矩形顶点的出现次数。同一个位置至多只能存在四个顶点，在满足该条件的前提下，如果矩形区域中有相交区域，这要么导致矩形区域四角的顶点出现不止一次，要么导致非四角的顶点存在出现一次或三次的顶点；\n\n因此要满足精确覆盖，除了要满足矩形区域的面积等于所有矩形的面积之和，还要满足矩形区域四角的顶点只能出现一次，且其余顶点的出现次数只能是两次或四次。\n\n在代码实现时，我们可以遍历矩形数组，计算矩形区域四个顶点的位置，以及矩形面积之和，并用哈希表统计每个矩形的顶点的出现次数。遍历完成后，检查矩形区域的面积是否等于所有矩形的面积之和，以及每个顶点的出现次数是否满足上述要求。\n\n```Python [sol1-Python3]\nclass Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        area, minX, minY, maxX, maxY = 0, rectangles[0][0], rectangles[0][1], rectangles[0][2], rectangles[0][3]\n        cnt = defaultdict(int)\n        for rect in rectangles:\n            x, y, a, b = rect[0], rect[1], rect[2], rect[3]\n            area += (a - x) * (b - y)\n\n            minX = min(minX, x)\n            minY = min(minY, y)\n            maxX = max(maxX, a)\n            maxY = max(maxY, b)\n\n            cnt[(x, y)] += 1\n            cnt[(x, b)] += 1\n            cnt[(a, y)] += 1\n            cnt[(a, b)] += 1\n\n        if area != (maxX - minX) * (maxY - minY) or cnt[(minX, minY)] != 1 or cnt[(minX, maxY)] != 1 or cnt[(maxX, minY)] != 1 or cnt[(maxX, maxY)] != 1:\n            return False\n\n        del cnt[(minX, minY)], cnt[(minX, maxY)], cnt[(maxX, minY)], cnt[(maxX, maxY)]\n\n        return all(c == 2 or c == 4 for c in cnt.values())\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isRectangleCover(int[][] rectangles) {\n        long area = 0;\n        int minX = rectangles[0][0], minY = rectangles[0][1], maxX = rectangles[0][2], maxY = rectangles[0][3];\n        Map<Point, Integer> cnt = new HashMap<Point, Integer>();\n        for (int[] rect : rectangles) {\n            int x = rect[0], y = rect[1], a = rect[2], b = rect[3];\n            area += (long) (a - x) * (b - y);\n\n            minX = Math.min(minX, x);\n            minY = Math.min(minY, y);\n            maxX = Math.max(maxX, a);\n            maxY = Math.max(maxY, b);\n\n            Point point1 = new Point(x, y);\n            Point point2 = new Point(x, b);\n            Point point3 = new Point(a, y);\n            Point point4 = new Point(a, b);\n\n            cnt.put(point1, cnt.getOrDefault(point1, 0) + 1);\n            cnt.put(point2, cnt.getOrDefault(point2, 0) + 1);\n            cnt.put(point3, cnt.getOrDefault(point3, 0) + 1);\n            cnt.put(point4, cnt.getOrDefault(point4, 0) + 1);\n        }\n\n        Point pointMinMin = new Point(minX, minY);\n        Point pointMinMax = new Point(minX, maxY);\n        Point pointMaxMin = new Point(maxX, minY);\n        Point pointMaxMax = new Point(maxX, maxY);\n        if (area != (long) (maxX - minX) * (maxY - minY) || cnt.getOrDefault(pointMinMin, 0) != 1 || cnt.getOrDefault(pointMinMax, 0) != 1 || cnt.getOrDefault(pointMaxMin, 0) != 1 || cnt.getOrDefault(pointMaxMax, 0) != 1) {\n            return false;\n        }\n\n        cnt.remove(pointMinMin);\n        cnt.remove(pointMinMax);\n        cnt.remove(pointMaxMin);\n        cnt.remove(pointMaxMax);\n\n        for (Map.Entry<Point, Integer> entry : cnt.entrySet()) {\n            int value = entry.getValue();\n            if (value != 2 && value != 4) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nclass Point {\n    int x;\n    int y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public int hashCode() {\n        return x + y;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Point) {\n            Point point2 = (Point) obj;\n            return this.x == point2.x && this.y == point2.y;\n        }\n        return false;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool IsRectangleCover(int[][] rectangles) {\n        long area = 0;\n        int minX = rectangles[0][0], minY = rectangles[0][1], maxX = rectangles[0][2], maxY = rectangles[0][3];\n        Dictionary<Point, int> cnt = new Dictionary<Point, int>();\n        foreach (int[] rect in rectangles) {\n            int x = rect[0], y = rect[1], a = rect[2], b = rect[3];\n            area += (long) (a - x) * (b - y);\n\n            minX = Math.Min(minX, x);\n            minY = Math.Min(minY, y);\n            maxX = Math.Max(maxX, a);\n            maxY = Math.Max(maxY, b);\n\n            Point point1 = new Point(x, y);\n            Point point2 = new Point(x, b);\n            Point point3 = new Point(a, y);\n            Point point4 = new Point(a, b);\n\n            if (!cnt.ContainsKey(point1)) {\n                cnt.Add(point1, 0);\n            }\n            cnt[point1]++;\n            if (!cnt.ContainsKey(point2)) {\n                cnt.Add(point2, 0);\n            }\n            cnt[point2]++;\n            if (!cnt.ContainsKey(point3)) {\n                cnt.Add(point3, 0);\n            }\n            cnt[point3]++;\n            if (!cnt.ContainsKey(point4)) {\n                cnt.Add(point4, 0);\n            }\n            cnt[point4]++;\n        }\n\n        Point pointMinMin = new Point(minX, minY);\n        Point pointMinMax = new Point(minX, maxY);\n        Point pointMaxMin = new Point(maxX, minY);\n        Point pointMaxMax = new Point(maxX, maxY);\n        if (area != (long) (maxX - minX) * (maxY - minY) || !cnt.ContainsKey(pointMinMin) || cnt[pointMinMin] != 1 || !cnt.ContainsKey(pointMinMax) || cnt[pointMinMax] != 1 || !cnt.ContainsKey(pointMaxMin) || cnt[pointMaxMin] != 1 || !cnt.ContainsKey(pointMaxMax) || cnt[pointMaxMax] != 1) {\n            return false;\n        }\n\n        cnt.Remove(pointMinMin);\n        cnt.Remove(pointMinMax);\n        cnt.Remove(pointMaxMin);\n        cnt.Remove(pointMaxMax);\n\n        foreach (KeyValuePair<Point, int> entry in cnt) {\n            int value = entry.Value;\n            if (value != 2 && value != 4) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nclass Point {\n    int x;\n    int y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public override int GetHashCode() {\n        return x + y;\n    }\n\n    public override bool Equals(Object obj) {\n        if (obj is Point) {\n            Point point2 = (Point) obj;\n            return this.x == point2.x && this.y == point2.y;\n        }\n        return false;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc isRectangleCover(rectangles [][]int) bool {\n    type point struct{ x, y int }\n    area, minX, minY, maxX, maxY := 0, rectangles[0][0], rectangles[0][1], rectangles[0][2], rectangles[0][3]\n    cnt := map[point]int{}\n    for _, rect := range rectangles {\n        x, y, a, b := rect[0], rect[1], rect[2], rect[3]\n        area += (a - x) * (b - y)\n\n        minX = min(minX, x)\n        minY = min(minY, y)\n        maxX = max(maxX, a)\n        maxY = max(maxY, b)\n\n        cnt[point{x, y}]++\n        cnt[point{x, b}]++\n        cnt[point{a, y}]++\n        cnt[point{a, b}]++\n    }\n\n    if area != (maxX-minX)*(maxY-minY) || cnt[point{minX, minY}] != 1 || cnt[point{minX, maxY}] != 1 || cnt[point{maxX, minY}] != 1 || cnt[point{maxX, maxY}] != 1 {\n        return false\n    }\n\n    delete(cnt, point{minX, minY})\n    delete(cnt, point{minX, maxY})\n    delete(cnt, point{maxX, minY})\n    delete(cnt, point{maxX, maxY})\n\n    for _, c := range cnt {\n        if c != 2 && c != 4 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n```C++ [sol1-C++]\ntypedef pair<int, int> Point;\n\nclass Solution {\npublic:\n    bool isRectangleCover(vector<vector<int>>& rectangles) {\n        long area = 0;\n        int minX = rectangles[0][0], minY = rectangles[0][1], maxX = rectangles[0][2], maxY = rectangles[0][3];\n        map<Point, int> cnt;\n        for (auto & rect : rectangles) {\n            int x = rect[0], y = rect[1], a = rect[2], b = rect[3];\n            area += (long) (a - x) * (b - y);\n\n            minX = min(minX, x);\n            minY = min(minY, y);\n            maxX = max(maxX, a);\n            maxY = max(maxY, b);\n\n            Point point1({x, y});\n            Point point2({x, b});\n            Point point3({a, y});\n            Point point4({a, b});\n\n            cnt[point1] += 1;\n            cnt[point2] += 1;\n            cnt[point3] += 1;\n            cnt[point4] += 1;\n        }\n\n        Point pointMinMin({minX, minY});\n        Point pointMinMax({minX, maxY});\n        Point pointMaxMin({maxX, minY});\n        Point pointMaxMax({maxX, maxY});\n        if (area != (long long) (maxX - minX) * (maxY - minY) || !cnt.count(pointMinMin) || !cnt.count(pointMinMax) || !cnt.count(pointMaxMin) || !cnt.count(pointMaxMax)) {\n            return false;\n        }\n\n        cnt.erase(pointMinMin);\n        cnt.erase(pointMinMax);\n        cnt.erase(pointMaxMin);\n        cnt.erase(pointMaxMax);\n\n        for (auto & entry : cnt) {\n            int value = entry.second;\n            if (value != 2 && value != 4) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar isRectangleCover = function(rectangles) {\n    let area = 0;\n    let minX = rectangles[0][0], minY = rectangles[0][1], maxX = rectangles[0][2], maxY = rectangles[0][3];\n    const cnt = new Map();\n    for (const rect of rectangles) {\n        const x = rect[0], y = rect[1], a = rect[2], b = rect[3];\n        area += (a - x) * (b - y);\n\n        minX = Math.min(minX, x);\n        minY = Math.min(minY, y);\n        maxX = Math.max(maxX, a);\n        maxY = Math.max(maxY, b);\n\n        cnt.set([x, y].toString(), (cnt.get([x, y].toString()) || 0) + 1);\n        cnt.set([x, b].toString(), (cnt.get([x, b].toString()) || 0) + 1);\n        cnt.set([a, y].toString(), (cnt.get([a, y].toString()) || 0) + 1);\n        cnt.set([a, b].toString(), (cnt.get([a, b].toString()) || 0) + 1);\n    }\n    \n    const pointMinMin = [minX, minY].toString();\n    const pointMinMax = [minX, maxY].toString();\n    const pointMaxMin = [maxX, minY].toString();\n    const pointMaxMax = [maxX, maxY].toString();\n    if (area !== (maxX - minX) * (maxY - minY) || (cnt.get(pointMinMin) || 0) !== 1 || (cnt.get(pointMinMax) || 0) !== 1 || (cnt.get(pointMaxMin) || 0) !== 1 || (cnt.get(pointMaxMax) || 0) !== 1) {\n        console.log(cnt.get([minX, minY].toString()))\n        return false;\n    }\n\n    cnt.delete(pointMinMin);\n    cnt.delete(pointMinMax);\n    cnt.delete(pointMaxMin);\n    cnt.delete(pointMaxMax);\n\n    for (const [_, value] of cnt.entries()) {\n        if (value !== 2 && value !== 4) {\n            \n            return false;\n        }\n    }\n    \n    return true;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{rectangles}$ 的长度。\n\n- 空间复杂度：$O(n)$。我们需要用哈希表存储矩形的顶点及其出现次数。"
}