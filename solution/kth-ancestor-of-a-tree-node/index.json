{
	"titleSlug": "kth-ancestor-of-a-tree-node",
	"slug": "li-kou-zai-zhu-jian-ba-acm-mo-ban-ti-ban-shang-lai",
	"url": "https://leetcode-cn.com/problems/kth-ancestor-of-a-tree-node/solution/li-kou-zai-zhu-jian-ba-acm-mo-ban-ti-ban-shang-lai/",
	"content": "因为力扣的数据还是有些弱的，所以这个问题我看到一些相对“暴力”的解也能过。但是这个问题的“正规解”应该是 Binary Lifting。\n\nBinary Lifting 的本质其实是 dp。``dp[node][j]`` 存储的是 node 节点距离为 2^j 的祖先是谁。\n\n根据定义，``dp[node][0]`` 就是 ``parent[node]``，即 node 的距离为 1 的祖先是 ``parent[node]``。\n\n状态转移是： ``dp[node][j] = dp[dp[node][j - 1]][j - 1]``。\n\n意思是：要想找到 node 的距离 2^j 的祖先，先找到 node 的距离 2^(j - 1) 的祖先，然后，再找这个祖先的距离 2^(j - 1) 的祖先。两步得到 node 的距离为 2^j 的祖先。\n\n所以，我们要找到每一个 node 的距离为 1, 2, 4, 8, 16, 32, ... 的祖先，直到达到树的最大的高度。树的最大的高度是 logn 级别的。\n\n这样做，状态总数是 O(nlogn)，可以使用 O(nlogn) 的时间做预处理。\n\n之后，根据预处理的结果，可以在 O(logn) 的时间里完成每次查询：对于每一个查询 k，把 k 拆解成二进制表示，然后根据二进制表示中 1 的位置，累计向上查询。\n\n<br/>\n\n我的参考代码（C++）：\n\n```\nclass TreeAncestor {\n\nprivate:\n    vector<vector<int>> dp;\n\npublic:\n    TreeAncestor(int n, vector<int>& parent) : dp(n) {\n\n        for(int i = 0; i < n; i ++)\n            dp[i].push_back(parent[i]);\n\n        for(int j = 1; ; j ++){\n            bool allneg = true;\n            for(int i = 0; i < n; i ++){\n                int t = dp[i][j - 1] != -1 ? dp[dp[i][j - 1]][j - 1] : -1;\n                dp[i].push_back(t);\n                if(t != -1) allneg = false;\n            }\n            if(allneg) break; // 所有的节点的 2^j 的祖先都是 -1 了，就不用再计算了\n        }\n    }\n\n    int getKthAncestor(int node, int k) {\n\n        if(k == 0 || node== -1) return node;\n\n        int pos = ffs(k) - 1; // C++ 语言中 ffs(k) 求解出 k 的最右侧第一个 1 的位置（1-based）\n\n        return pos < dp[node].size() ? getKthAncestor(dp[node][pos], k - (1 << pos)) : -1;\n    }\n};\n```\n\n<br/>\n\n上面的 query 使用递归写法，再提供一个非递归写法，可能对有些同学来说更清晰：\n\n```\n    int getKthAncestor(int node, int k) {\n\n        int res = node, pos = 0;\n        while(k && res != -1){\n            if(pos >= dp[res].size()) return -1;\n            if(k & 1) res = dp[res][pos];\n            k >>= 1, pos ++;\n        }\n        return res;\n    }\n```\n\n<br/>\n\n\n---\n\n觉得有帮助请点赞哇！\n\n"
}