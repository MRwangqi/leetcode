{
	"titleSlug": "cherry-pickup",
	"slug": "zhai-ying-tao-by-leetcode-solution-1h3k",
	"url": "https://leetcode-cn.com/problems/cherry-pickup/solution/zhai-ying-tao-by-leetcode-solution-1h3k/",
	"content": "#### 方法一：动态规划\n\n由于从 $(N-1,N-1)$ 返回 $(0,0)$ 的这条路径，可以等价地看成从 $(0,0)$ 到 $(N-1,N-1)$ 的路径，因此问题可以等价转换成，有两个人从 $(0,0)$ 出发，向下或向右走到 $(N-1,N-1)$ 时，摘到的樱桃个数之和的最大值。\n\n由于题目限制同一个格子只能摘取一次，我们需要找到一种方案来判断两人是否到达了同一个格子。\n\n不妨假设两人同时出发，且速度相同。无论这两人怎么走，在时间相同的情况下，他们向右走的步数加上向下走的步数之和是一个定值（设为 $k$）。设两人的坐标为 $(x_1,y_1)$ 和 $(x_2,y_2)$，则 $x_1+y_1 = x_2+y_2 = k$。那么当 $x_1=x_2$ 时，必然有 $y_1=y_2$，即两个人到达了同一个格子。\n\n定义 $f[k][x_1][x_2]$ 表示两个人（设为 A 和 B）分别从 $(x_1,k-x_1)$ 和 $(x_2,k-x_2)$ 同时出发，到达 $(N-1,N-1)$ 摘到的樱桃个数之和的最大值。\n\n如果 $(x_1,k-x_1)$ 或 $(x_2,k-x_2)$ 是荆棘，则 $f[k][x_1][x_2]=-\\infty$，表示不合法的情况。\n\n枚举 A 和 B 上一步的走法，来计算 $f[k][x_1][x_2]$。有四种情况：\n\n- 都往右：从 $f[k-1][x_1][x_2]$ 转移过来；\n- A 往下，B 往右：从 $f[k-1][x_1-1][x_2]$ 转移过来；\n- A 往右，B 往下：从 $f[k-1][x_1][x_2-1]$ 转移过来；\n- 都往下：从 $f[k-1][x_1-1][x_2-1]$ 转移过来；\n\n取这四种情况的最大值，加上 $\\textit{grid}[x_1][k-x_1]$ 和 $\\textit{grid}[x_2][k-x_2]$ 的值，就得到了 $f[k][x_1][x_2]$，如果 $x_1=x_2$，则只需加上 $\\textit{grid}[x_1][k-x_1]$。\n\n最后答案为 $\\max(f[2n-2][n-1][n-1],0)$，取 $\\max$ 是因为路径可能被荆棘挡住，无法从 $(0,0)$ 到达 $(N-1,N-1)$。\n\n代码实现时，我们可以将 A 和 B 走出的路径的上轮廓看成是 A 走出的路径，下轮廓看成是 B 走出的路径，即视作 A 始终不会走到 B 的下方，则有 $x_1\\le x_2$，在代码实现时保证这一点，可以减少循环次数。\n\n```Python [sol1-Python3]\nclass Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        f = [[[-inf] * n for _ in range(n)] for _ in range(n * 2 - 1)]\n        f[0][0][0] = grid[0][0]\n        for k in range(1, n * 2 - 1):\n            for x1 in range(max(k - n + 1, 0), min(k + 1, n)):\n                y1 = k - x1\n                if grid[x1][y1] == -1:\n                    continue\n                for x2 in range(x1, min(k + 1, n)):\n                    y2 = k - x2\n                    if grid[x2][y2] == -1:\n                        continue\n                    res = f[k - 1][x1][x2]  # 都往右\n                    if x1:\n                        res = max(res, f[k - 1][x1 - 1][x2])  # 往下，往右\n                    if x2:\n                        res = max(res, f[k - 1][x1][x2 - 1])  # 往右，往下\n                    if x1 and x2:\n                        res = max(res, f[k - 1][x1 - 1][x2 - 1])  # 都往下\n                    res += grid[x1][y1]\n                    if x2 != x1:  # 避免重复摘同一个樱桃\n                        res += grid[x2][y2]\n                    f[k][x1][x2] = res\n        return max(f[-1][-1][-1], 0)\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int cherryPickup(vector<vector<int>> &grid) {\n        int n = grid.size();\n        vector<vector<vector<int>>> f(n * 2 - 1, vector<vector<int>>(n, vector<int>(n, INT_MIN)));\n        f[0][0][0] = grid[0][0];\n        for (int k = 1; k < n * 2 - 1; ++k) {\n            for (int x1 = max(k - n + 1, 0); x1 <= min(k, n - 1); ++x1) {\n                int y1 = k - x1;\n                if (grid[x1][y1] == -1) {\n                    continue;\n                }\n                for (int x2 = x1; x2 <= min(k, n - 1); ++x2) {\n                    int y2 = k - x2;\n                    if (grid[x2][y2] == -1) {\n                        continue;\n                    }\n                    int res = f[k - 1][x1][x2]; // 都往右\n                    if (x1) {\n                        res = max(res, f[k - 1][x1 - 1][x2]); // 往下，往右\n                    }\n                    if (x2) {\n                        res = max(res, f[k - 1][x1][x2 - 1]); // 往右，往下\n                    }\n                    if (x1 && x2) {\n                        res = max(res, f[k - 1][x1 - 1][x2 - 1]); // 都往下\n                    }\n                    res += grid[x1][y1];\n                    if (x2 != x1) { // 避免重复摘同一个樱桃\n                        res += grid[x2][y2];\n                    }\n                    f[k][x1][x2] = res;\n                }\n            }\n        }\n        return max(f.back().back().back(), 0);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int cherryPickup(int[][] grid) {\n        int n = grid.length;\n        int[][][] f = new int[n * 2 - 1][n][n];\n        for (int i = 0; i < n * 2 - 1; ++i) {\n            for (int j = 0; j < n; ++j) {\n                Arrays.fill(f[i][j], Integer.MIN_VALUE);\n            }\n        }\n        f[0][0][0] = grid[0][0];\n        for (int k = 1; k < n * 2 - 1; ++k) {\n            for (int x1 = Math.max(k - n + 1, 0); x1 <= Math.min(k, n - 1); ++x1) {\n                int y1 = k - x1;\n                if (grid[x1][y1] == -1) {\n                    continue;\n                }\n                for (int x2 = x1; x2 <= Math.min(k, n - 1); ++x2) {\n                    int y2 = k - x2;\n                    if (grid[x2][y2] == -1) {\n                        continue;\n                    }\n                    int res = f[k - 1][x1][x2]; // 都往右\n                    if (x1 > 0) {\n                        res = Math.max(res, f[k - 1][x1 - 1][x2]); // 往下，往右\n                    }\n                    if (x2 > 0) {\n                        res = Math.max(res, f[k - 1][x1][x2 - 1]); // 往右，往下\n                    }\n                    if (x1 > 0 && x2 > 0) {\n                        res = Math.max(res, f[k - 1][x1 - 1][x2 - 1]); // 都往下\n                    }\n                    res += grid[x1][y1];\n                    if (x2 != x1) { // 避免重复摘同一个樱桃\n                        res += grid[x2][y2];\n                    }\n                    f[k][x1][x2] = res;\n                }\n            }\n        }\n        return Math.max(f[n * 2 - 2][n - 1][n - 1], 0);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int CherryPickup(int[][] grid) {\n        int n = grid.Length;\n        int[,,] f = new int[n * 2 - 1, n, n];\n        for (int i = 0; i < n * 2 - 1; ++i) {\n            for (int j = 0; j < n; ++j) {\n                for (int k = 0; k < n; ++k) {\n                    f[i, j, k] = int.MinValue;\n                }\n            }\n        }\n        f[0, 0, 0] = grid[0][0];\n        for (int k = 1; k < n * 2 - 1; ++k) {\n            for (int x1 = Math.Max(k - n + 1, 0); x1 <= Math.Min(k, n - 1); ++x1) {\n                int y1 = k - x1;\n                if (grid[x1][y1] == -1) {\n                    continue;\n                }\n                for (int x2 = x1; x2 <= Math.Min(k, n - 1); ++x2) {\n                    int y2 = k - x2;\n                    if (grid[x2][y2] == -1) {\n                        continue;\n                    }\n                    int res = f[k - 1, x1, x2]; // 都往右\n                    if (x1 > 0) {\n                        res = Math.Max(res, f[k - 1, x1 - 1, x2]); // 往下，往右\n                    }\n                    if (x2 > 0) {\n                        res = Math.Max(res, f[k - 1, x1, x2 - 1]); // 往右，往下\n                    }\n                    if (x1 > 0 && x2 > 0) {\n                        res = Math.Max(res, f[k - 1, x1 - 1, x2 - 1]); // 都往下\n                    }\n                    res += grid[x1][y1];\n                    if (x2 != x1) { // 避免重复摘同一个樱桃\n                        res += grid[x2][y2];\n                    }\n                    f[k, x1, x2] = res;\n                }\n            }\n        }\n        return Math.Max(f[n * 2 - 2, n - 1, n - 1], 0);\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc cherryPickup(grid [][]int) int {\n    n := len(grid)\n    f := make([][][]int, n*2-1)\n    for i := range f {\n        f[i] = make([][]int, n)\n        for j := range f[i] {\n            f[i][j] = make([]int, n)\n            for k := range f[i][j] {\n                f[i][j][k] = math.MinInt32\n            }\n        }\n    }\n    f[0][0][0] = grid[0][0]\n    for k := 1; k < n*2-1; k++ {\n        for x1 := max(k-n+1, 0); x1 <= min(k, n-1); x1++ {\n            y1 := k - x1\n            if grid[x1][y1] == -1 {\n                continue\n            }\n            for x2 := x1; x2 <= min(k, n-1); x2++ {\n                y2 := k - x2\n                if grid[x2][y2] == -1 {\n                    continue\n                }\n                res := f[k-1][x1][x2] // 都往右\n                if x1 > 0 {\n                    res = max(res, f[k-1][x1-1][x2]) // 往下，往右\n                }\n                if x2 > 0 {\n                    res = max(res, f[k-1][x1][x2-1]) // 往右，往下\n                }\n                if x1 > 0 && x2 > 0 {\n                    res = max(res, f[k-1][x1-1][x2-1]) // 都往下\n                }\n                res += grid[x1][y1]\n                if x2 != x1 { // 避免重复摘同一个樱桃\n                    res += grid[x2][y2]\n                }\n                f[k][x1][x2] = res\n            }\n        }\n    }\n    return max(f[n*2-2][n-1][n-1], 0)\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nint cherryPickup(int** grid, int gridSize, int* gridColSize){\n    int n = gridSize;\n    int ***f = (int ***)malloc(sizeof(int **) * (n * 2 - 1));\n    for (int i = 0; i < n * 2 - 1; ++i) {\n        f[i] = (int **)malloc(sizeof(int *) * n);\n        for (int j = 0; j < n; ++j) {\n            f[i][j] = (int *)malloc(sizeof(int) * n);\n            for (int k = 0; k < n; ++k) {\n                f[i][j][k] = INT_MIN;\n            }\n        }\n    }\n    f[0][0][0] = grid[0][0];\n    for (int k = 1; k < n * 2 - 1; ++k) {\n        for (int x1 = MAX(k - n + 1, 0); x1 <= MIN(k, n - 1); ++x1) {\n            int y1 = k - x1;\n            if (grid[x1][y1] == -1) {\n                continue;\n            }\n            for (int x2 = x1; x2 <= MIN(k, n - 1); ++x2) {\n                int y2 = k - x2;\n                if (grid[x2][y2] == -1) {\n                    continue;\n                }\n                int res = f[k - 1][x1][x2]; // 都往右\n                if (x1) {\n                    res = MAX(res, f[k - 1][x1 - 1][x2]); // 往下，往右\n                }\n                if (x2) {\n                    res = MAX(res, f[k - 1][x1][x2 - 1]); // 往右，往下\n                }\n                if (x1 && x2) {\n                    res = MAX(res, f[k - 1][x1 - 1][x2 - 1]); // 都往下\n                }\n                res += grid[x1][y1];\n                if (x2 != x1) { // 避免重复摘同一个樱桃\n                    res += grid[x2][y2];\n                }\n                f[k][x1][x2] = res;\n            }\n        }\n    }\n    int ret = MAX(f[n * 2 - 2][n - 1][n - 1], 0);\n    for (int i = 0; i < n * 2 - 1; ++i) {\n        for (int j = 0; j < n; ++j) {\n            free(f[i][j]);\n        }\n        free(f[i]);\n    }\n    free(f);\n    return ret;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar cherryPickup = function(grid) {\n    const n = grid.length;\n    const f = new Array(n * 2 - 1).fill(0).map(() => new Array(n).fill(0).map(() => new Array(n).fill(-Number.MAX_VALUE)));\n    f[0][0][0] = grid[0][0];\n    for (let k = 1; k < n * 2 - 1; ++k) {\n        for (let x1 = Math.max(k - n + 1, 0); x1 <= Math.min(k, n - 1); ++x1) {\n            const y1 = k - x1;\n            if (grid[x1][y1] === -1) {\n                continue;\n            }\n            for (let x2 = x1; x2 <= Math.min(k, n - 1); ++x2) {\n                let y2 = k - x2;\n                if (grid[x2][y2] === -1) {\n                    continue;\n                }\n                let res = f[k - 1][x1][x2]; // 都往右\n                if (x1 > 0) {\n                    res = Math.max(res, f[k - 1][x1 - 1][x2]); // 往下，往右\n                }\n                if (x2 > 0) {\n                    res = Math.max(res, f[k - 1][x1][x2 - 1]); // 往右，往下\n                }\n                if (x1 > 0 && x2 > 0) {\n                    res = Math.max(res, f[k - 1][x1 - 1][x2 - 1]); // 都往下\n                }\n                res += grid[x1][y1];\n                if (x2 !== x1) { // 避免重复摘同一个樱桃\n                    res += grid[x2][y2];\n                }\n                f[k][x1][x2] = res;\n            }\n        }\n    }\n    return Math.max(f[n * 2 - 2][n - 1][n - 1], 0);\n};\n```\n\n由于 $f[k][][]$ 都是从 $f[k-1][][]$ 转移过来的，我们可以通过倒序循环 $x_1$ 和 $x_2$，来优化掉第一个维度。\n\n为什么要倒序循环呢？在去掉第一个维度后，若正序循环 $x_1$ 和 $x_2$，在计算 $f[x_1][x_2]$ 时，转移来源 $f[x'_1][x'_2]$ 的值已经被覆盖（因为 $x'_1\\le x_1$ 以及 $x'_2\\le x_2$），这意味着 $f[x'_1][x'_2]$ 实际对应的是 $f[k][x'_1][x'_2]$。\n\n若倒序循环，则可消除该错误，这种方式保证计算 $f[x_1][x_2]$ 时，转移来源 $f[x'_1][x'_2]$ 的值尚未被覆盖，实际对应的是 $f[k-1][x'_1][x'_2]$，从而保证转移方程与去掉维度前一致。\n\n```Python [sol2-Python3]\nclass Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        f = [[-inf] * n for _ in range(n)]\n        f[0][0] = grid[0][0]\n        for k in range(1, n * 2 - 1):\n            for x1 in range(min(k, n - 1), max(k - n, -1), -1):\n                for x2 in range(min(k, n - 1), x1 - 1, -1):\n                    y1, y2 = k - x1, k - x2\n                    if grid[x1][y1] == -1 or grid[x2][y2] == -1:\n                        f[x1][x2] = -inf\n                        continue\n                    res = f[x1][x2]  # 都往右\n                    if x1:\n                        res = max(res, f[x1 - 1][x2])  # 往下，往右\n                    if x2:\n                        res = max(res, f[x1][x2 - 1])  # 往右，往下\n                    if x1 and x2:\n                        res = max(res, f[x1 - 1][x2 - 1])  # 都往下\n                    res += grid[x1][y1]\n                    if x2 != x1:  # 避免重复摘同一个樱桃\n                        res += grid[x2][y2]\n                    f[x1][x2] = res\n        return max(f[-1][-1], 0)\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int cherryPickup(vector<vector<int>> &grid) {\n        int n = grid.size();\n        vector<vector<int>> f(n, vector<int>(n, INT_MIN));\n        f[0][0] = grid[0][0];\n        for (int k = 1; k < n * 2 - 1; ++k) {\n            for (int x1 = min(k, n - 1); x1 >= max(k - n + 1, 0); --x1) {\n                for (int x2 = min(k, n - 1); x2 >= x1; --x2) {\n                    int y1 = k - x1, y2 = k - x2;\n                    if (grid[x1][y1] == -1 || grid[x2][y2] == -1) {\n                        f[x1][x2] = INT_MIN;\n                        continue;\n                    }\n                    int res = f[x1][x2]; // 都往右\n                    if (x1) {\n                        res = max(res, f[x1 - 1][x2]); // 往下，往右\n                    }\n                    if (x2) {\n                        res = max(res, f[x1][x2 - 1]); // 往右，往下\n                    }\n                    if (x1 && x2) {\n                        res = max(res, f[x1 - 1][x2 - 1]); // 都往下\n                    }\n                    res += grid[x1][y1];\n                    if (x2 != x1) { // 避免重复摘同一个樱桃\n                        res += grid[x2][y2];\n                    }\n                    f[x1][x2] = res;\n                }\n            }\n        }\n        return max(f.back().back(), 0);\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int cherryPickup(int[][] grid) {\n        int n = grid.length;\n        int[][] f = new int[n][n];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(f[i], Integer.MIN_VALUE);\n        }\n        f[0][0] = grid[0][0];\n        for (int k = 1; k < n * 2 - 1; ++k) {\n            for (int x1 = Math.min(k, n - 1); x1 >= Math.max(k - n + 1, 0); --x1) {\n                for (int x2 = Math.min(k, n - 1); x2 >= x1; --x2) {\n                    int y1 = k - x1, y2 = k - x2;\n                    if (grid[x1][y1] == -1 || grid[x2][y2] == -1) {\n                        f[x1][x2] = Integer.MIN_VALUE;\n                        continue;\n                    }\n                    int res = f[x1][x2]; // 都往右\n                    if (x1 > 0) {\n                        res = Math.max(res, f[x1 - 1][x2]); // 往下，往右\n                    }\n                    if (x2 > 0) {\n                        res = Math.max(res, f[x1][x2 - 1]); // 往右，往下\n                    }\n                    if (x1 > 0 && x2 > 0) {\n                        res = Math.max(res, f[x1 - 1][x2 - 1]); // 都往下\n                    }\n                    res += grid[x1][y1];\n                    if (x2 != x1) { // 避免重复摘同一个樱桃\n                        res += grid[x2][y2];\n                    }\n                    f[x1][x2] = res;\n                }\n            }\n        }\n        return Math.max(f[n - 1][n - 1], 0);\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int CherryPickup(int[][] grid) {\n        int n = grid.Length;\n        int[,] f = new int[n, n];\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                f[i, j] = int.MinValue;\n            }\n        }\n        f[0, 0] = grid[0][0];\n        for (int k = 1; k < n * 2 - 1; ++k) {\n            for (int x1 = Math.Min(k, n - 1); x1 >= Math.Max(k - n + 1, 0); --x1) {\n                for (int x2 = Math.Min(k, n - 1); x2 >= x1; --x2) {\n                    int y1 = k - x1, y2 = k - x2;\n                    if (grid[x1][y1] == -1 || grid[x2][y2] == -1) {\n                        f[x1, x2] = int.MinValue;\n                        continue;\n                    }\n                    int res = f[x1, x2]; // 都往右\n                    if (x1 > 0) {\n                        res = Math.Max(res, f[x1 - 1, x2]); // 往下，往右\n                    }\n                    if (x2 > 0) {\n                        res = Math.Max(res, f[x1, x2 - 1]); // 往右，往下\n                    }\n                    if (x1 > 0 && x2 > 0) {\n                        res = Math.Max(res, f[x1 - 1, x2 - 1]); // 都往下\n                    }\n                    res += grid[x1][y1];\n                    if (x2 != x1) { // 避免重复摘同一个樱桃\n                        res += grid[x2][y2];\n                    }\n                    f[x1, x2] = res;\n                }\n            }\n        }\n        return Math.Max(f[n - 1, n - 1], 0);\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc cherryPickup(grid [][]int) int {\n    n := len(grid)\n    f := make([][]int, n)\n    for i := range f {\n        f[i] = make([]int, n)\n        for j := range f[i] {\n            f[i][j] = math.MinInt32\n        }\n    }\n    f[0][0] = grid[0][0]\n    for k := 1; k < n*2-1; ++k {\n        for x1 := min(k, n-1); x1 >= max(k-n+1, 0); x1-- {\n            for x2 := min(k, n-1); x2 >= x1; x2-- {\n                y1, y2 := k-x1, k-x2\n                if grid[x1][y1] == -1 || grid[x2][y2] == -1 {\n                    f[x1][x2] = math.MinInt32\n                    continue\n                }\n                res := f[x1][x2] // 都往右\n                if x1 > 0 {\n                    res = max(res, f[x1-1][x2]) // 往下，往右\n                }\n                if x2 > 0 {\n                    res = max(res, f[x1][x2-1]) // 往右，往下\n                }\n                if x1 > 0 && x2 > 0 {\n                    res = max(res, f[x1-1][x2-1]) // 都往下\n                }\n                res += grid[x1][y1]\n                if x2 != x1 { // 避免重复摘同一个樱桃\n                    res += grid[x2][y2]\n                }\n                f[x1][x2] = res\n            }\n        }\n    }\n    return max(f[n-1][n-1], 0)\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n```C [sol2-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nint cherryPickup(int** grid, int gridSize, int* gridColSize){\n    int n = gridSize;\n    int **f = (int **)malloc(sizeof(int *) * n);\n    for (int i = 0; i < n; ++i) {\n        f[i] = (int *)malloc(sizeof(int) * n);\n        for (int j = 0; j < n; ++j) {\n            f[i][j] = INT_MIN;\n        }\n    }\n    f[0][0] = grid[0][0];\n    for (int k = 1; k < n * 2 - 1; ++k) {\n        for (int x1 = MIN(k, n - 1); x1 >= MAX(k - n + 1, 0); --x1) {\n            for (int x2 = MIN(k, n - 1); x2 >= x1; --x2) {\n                int y1 = k - x1, y2 = k - x2;\n                if (grid[x1][y1] == -1 || grid[x2][y2] == -1) {\n                    f[x1][x2] = INT_MIN;\n                    continue;\n                }\n                int res = f[x1][x2]; // 都往右\n                if (x1) {\n                    res = MAX(res, f[x1 - 1][x2]); // 往下，往右\n                }\n                if (x2) {\n                    res = MAX(res, f[x1][x2 - 1]); // 往右，往下\n                }\n                if (x1 && x2) {\n                    res = MAX(res, f[x1 - 1][x2 - 1]); // 都往下\n                }\n                res += grid[x1][y1];\n                if (x2 != x1) { // 避免重复摘同一个樱桃\n                    res += grid[x2][y2];\n                }\n                f[x1][x2] = res;\n            }\n        }\n    }\n    int ret = MAX(f[n - 1][n - 1], 0);\n    for (int i = 0; i < n; ++i) {\n        free(f[i]);\n    }\n    free(f);\n    return ret;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar cherryPickup = function(grid) {\n    const n = grid.length;\n    const f = new Array(n).fill(0).map(() => new Array(n).fill(-Number.MAX_VALUE));\n    f[0][0] = grid[0][0];\n    for (let k = 1; k < n * 2 - 1; ++k) {\n        for (let x1 = Math.min(k, n - 1); x1 >= Math.max(k - n + 1, 0); --x1) {\n            for (let x2 = Math.min(k, n - 1); x2 >= x1; --x2) {\n                const y1 = k - x1, y2 = k - x2;\n                if (grid[x1][y1] === -1 || grid[x2][y2] === -1) {\n                    f[x1][x2] = -Number.MAX_VALUE;\n                    continue;\n                }\n                let res = f[x1][x2]; // 都往右\n                if (x1 > 0) {\n                    res = Math.max(res, f[x1 - 1][x2]); // 往下，往右\n                }\n                if (x2 > 0) {\n                    res = Math.max(res, f[x1][x2 - 1]); // 往右，往下\n                }\n                if (x1 > 0 && x2 > 0) {\n                    res = Math.max(res, f[x1 - 1][x2 - 1]); //都往下\n                }\n                res += grid[x1][y1];\n                if (x2 !== x1) { // 避免重复摘同一个樱桃\n                    res += grid[x2][y2];\n                }\n                f[x1][x2] = res;\n            }\n        }\n    }\n    return Math.max(f[n - 1][n - 1], 0);\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N^3)$，其中 $N$ 是矩阵 $\\textit{grid}$ 的长宽。\n\n- 空间复杂度：$O(N^2)$。"
}