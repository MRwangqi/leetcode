{
	"titleSlug": "koko-eating-bananas",
	"slug": "ai-chi-xiang-jiao-de-ke-ke-by-leetcode-s-z4rt",
	"url": "https://leetcode-cn.com/problems/koko-eating-bananas/solution/ai-chi-xiang-jiao-de-ke-ke-by-leetcode-s-z4rt/",
	"content": "#### 方法一：二分查找\n\n如果珂珂在 $h$ 小时内吃掉所有香蕉的最小速度是每小时 $k$ 个香蕉，则当吃香蕉的速度大于每小时 $k$ 个香蕉时一定可以在 $h$ 小时内吃掉所有香蕉，当吃香蕉的速度小于每小时 $k$ 个香蕉时一定不能在 $h$ 小时内吃掉所有香蕉。\n\n由于吃香蕉的速度和是否可以在规定时间内吃掉所有香蕉之间存在单调性，因此可以使用二分查找的方法得到最小速度 $k$。\n\n由于每小时都要吃香蕉，即每小时至少吃 $1$ 个香蕉，因此二分查找的下界是 $1$；由于每小时最多吃一堆香蕉，即每小时吃的香蕉数目不会超过最多的一堆中的香蕉数目，因此二分查找的上界是最多的一堆中的香蕉数目。\n\n假设吃香蕉的速度是 $\\textit{speed}$，则当一堆香蕉的个数是 $\\textit{pile}$ 时，吃掉这堆香蕉需要 $\\Big\\lceil \\dfrac{\\textit{pile}}{\\textit{speed}} \\Big\\rceil$ 小时，由此可以计算出吃掉所有香蕉需要的时间。如果在速度 $\\textit{speed}$ 下可以在 $h$ 小时内吃掉所有香蕉，则最小速度一定小于或等于 $\\textit{speed}$，因此将上界调整为 $\\textit{speed}$；否则，最小速度一定大于 $\\textit{speed}$，因此将下界调整为 $\\textit{speed} + 1$。\n\n二分查找结束之后，即可得到在 $h$ 小时内吃掉所有香蕉的最小速度 $k$。\n\n实现方面，在计算吃掉每一堆香蕉的时间时，由于 $\\textit{pile}$ 和 $\\textit{speed}$ 都大于 $0$，因此 $\\Big\\lceil \\dfrac{\\textit{pile}}{\\textit{speed}} \\Big\\rceil$ 等价于 $\\Big\\lfloor \\dfrac{\\textit{pile} + \\textit{speed} - 1}{\\textit{speed}} \\Big\\rfloor$。\n\n```Python [sol1-Python3]\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        return bisect_left(range(max(piles)), -h, 1, key=lambda k: -sum((pile + k - 1) // k for pile in piles))\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n        int low = 1;\n        int high = 0;\n        for (int pile : piles) {\n            high = Math.max(high, pile);\n        }\n        int k = high;\n        while (low < high) {\n            int speed = (high - low) / 2 + low;\n            long time = getTime(piles, speed);\n            if (time <= h) {\n                k = speed;\n                high = speed;\n            } else {\n                low = speed + 1;\n            }\n        }\n        return k;\n    }\n\n    public long getTime(int[] piles, int speed) {\n        long time = 0;\n        for (int pile : piles) {\n            int curTime = (pile + speed - 1) / speed;\n            time += curTime;\n        }\n        return time;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MinEatingSpeed(int[] piles, int h) {\n        int low = 1;\n        int high = 0;\n        foreach (int pile in piles) {\n            high = Math.Max(high, pile);\n        }\n        int k = high;\n        while (low < high) {\n            int speed = (high - low) / 2 + low;\n            long time = GetTime(piles, speed);\n            if (time <= h) {\n                k = speed;\n                high = speed;\n            } else {\n                low = speed + 1;\n            }\n        }\n        return k;\n    }\n\n    public long GetTime(int[] piles, int speed) {\n        long time = 0;\n        foreach (int pile in piles) {\n            int curTime = (pile + speed - 1) / speed;\n            time += curTime;\n        }\n        return time;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minEatingSpeed(vector<int>& piles, int h) {\n        int low = 1;\n        int high = 0;\n        for (int pile : piles) {\n            high = max(high, pile);\n        }\n        int k = high;\n        while (low < high) {\n            int speed = (high - low) / 2 + low;\n            long time = getTime(piles, speed);\n            if (time <= h) {\n                k = speed;\n                high = speed;\n            } else {\n                low = speed + 1;\n            }\n        }\n        return k;\n    }\n\n    long getTime(const vector<int>& piles, int speed) {\n        long time = 0;\n        for (int pile : piles) {\n            int curTime = (pile + speed - 1) / speed;\n            time += curTime;\n        }\n        return time;\n    }\n};\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n\nlong getTime(const int* piles, int pilesSize, int speed) {\n    long time = 0;\n    for (int i = 0; i < pilesSize; i++) {\n        int curTime = (piles[i] + speed - 1) / speed;\n        time += curTime;\n    }\n    return time;\n}\n    \nint minEatingSpeed(int* piles, int pilesSize, int h) {\n    int low = 1;\n    int high = 0;\n    for (int i = 0; i < pilesSize; i++) {\n        high = MAX(high, piles[i]);\n    }\n    int k = high;\n    while (low < high) {\n        int speed = (high - low) / 2 + low;\n        long time = getTime(piles, pilesSize, speed);\n        if (time <= h) {\n            k = speed;\n            high = speed;\n        } else {\n            low = speed + 1;\n        }\n    }\n    return k;\n}\n```\n\n```go [sol1-Golang]\nfunc minEatingSpeed(piles []int, h int) int {\n    max := 0\n    for _, pile := range piles {\n        if pile > max {\n            max = pile\n        }\n    }\n    return 1 + sort.Search(max-1, func(speed int) bool {\n        speed++\n        time := 0\n        for _, pile := range piles {\n            time += (pile + speed - 1) / speed\n        }\n        return time <= h\n    })\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minEatingSpeed = function(piles, h) {\n    let low = 1;\n    let high = 0;\n    for (const pile of piles) {\n        high = Math.max(high, pile);\n    }\n    let k = high;\n    while (low < high) {\n        const speed = Math.floor((high - low) / 2) + low;\n        const time = getTime(piles, speed);\n        if (time <= h) {\n            k = speed;\n            high = speed;\n        } else {\n            low = speed + 1;\n        }\n    }\n    return k;\n}\n\nconst getTime = (piles, speed) => {\n    let time = 0;\n    for (const pile of piles) {\n        const curTime = Math.floor((pile + speed - 1) / speed);\n        time += curTime;\n    }\n    return time;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log m)$，其中 $n$ 是数组 $\\textit{piles}$ 的长度，$m$ 是数组 $\\textit{piles}$ 中的最大值。需要 $O(n)$ 的时间遍历数组找到最大值 $m$，二分查找需要执行 $O(\\log m)$ 轮，每一轮二分查找需要 $O(n)$ 的时间，因此总时间复杂度是 $O(n \\log m)$。\n\n- 空间复杂度：$O(1)$。"
}