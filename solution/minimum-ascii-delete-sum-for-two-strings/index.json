{
	"titleSlug": "minimum-ascii-delete-sum-for-two-strings",
	"slug": "liang-ge-zi-fu-chuan-de-zui-xiao-asciish-xllf",
	"url": "https://leetcode-cn.com/problems/minimum-ascii-delete-sum-for-two-strings/solution/liang-ge-zi-fu-chuan-de-zui-xiao-asciish-xllf/",
	"content": "#### 方法一：动态规划\n\n假设字符串 $s_1$ 和 $s_2$ 的长度分别为 $m$ 和 $n$，创建 $m+1$ 行 $n+1$ 列的二维数组 $\\textit{dp}$，其中 $\\textit{dp}[i][j]$ 表示使 $s_1[0:i]$ 和 $s_2[0:j]$ 相同的最小 $\\text{ASCII}$ 删除和。\n\n> 上述表示中，$s_1[0:i]$ 表示 $s_1$ 的长度为 $i$ 的前缀，$s_2[0:j]$ 表示 $s_2$ 的长度为 $j$ 的前缀。\n\n动态规划的边界情况如下：\n\n- 当 $i=j=0$ 时，$s_1[0:i]$ 和 $s_2[0:j]$ 都为空，两个空字符串相同，不需要删除任何字符，因此有 $\\textit{dp}[0][0]=0$；\n\n- 当 $i=0$ 且 $j>0$ 时，$s_1[0:i]$ 为空且 $s_2[0:j]$ 不为空，空字符串和任何字符串要变成相同，只有将另一个字符串的字符全部删除，因此对任意 $1 \\le j \\le n$，有 $\\textit{dp}[0][j]=\\textit{dp}[0][j-1]+s_2[j-1]$；\n\n- 当 $j=0$ 且 $i>0$ 时，$s_2[0:j]$ 为空且 $s_1[0:i]$ 不为空，同理可得，对任意 $1 \\le i \\le m$，有 $\\textit{dp}[i][0]=\\textit{dp}[i-1][0]+s_1[i-1]$。\n\n当 $i>0$ 且 $j>0$ 时，考虑 $\\textit{dp}[i][j]$ 的计算：\n\n- 当 $s_1[i-1]=s_2[j-1]$ 时，将这两个相同的字符称为公共字符，考虑使 $s_1[0:i-1]$ 和 $s_2[0:j-1]$ 相同的最小 $\\text{ASCII}$ 删除和，增加一个公共字符之后，最小 $\\text{ASCII}$ 删除和不变，因此 $\\textit{dp}[i][j]=\\textit{dp}[i-1][j-1]$。\n\n- 当 $s_1[i-1] \\ne s_2[j-1]$ 时，考虑以下两项：\n\n   - 使 $s_1[0:i-1]$ 和 $s_2[0:j]$ 相同的最小 $\\text{ASCII}$ 删除和，加上删除 $s_1[i-1]$ 的 $\\text{ASCII}$ 值；\n\n   - 使 $s_1[0:i]$ 和 $s_2[0:j-1]$ 相同的最小 $\\text{ASCII}$ 删除和，加上删除 $s_2[j-1]$ 的 $\\text{ASCII}$ 值。\n\n   要得到使 $s_1[0:i]$ 和 $s_2[0:j]$ 相同的最小 $\\text{ASCII}$ 删除和，应取两项中较小的一项，因此 $\\textit{dp}[i][j]=\\min(\\textit{dp}[i-1][j]+s_1[i-1],\\textit{dp}[i][j-1]+s_2[j-1])$。\n\n由此可以得到如下状态转移方程：\n\n$$\n\\textit{dp}[i][j] = \\begin{cases}\n\\textit{dp}[i-1][j-1], & s_1[i-1]=s_2[j-1] \\\\\n\\min(\\textit{dp}[i-1][j]+s_1[i-1],\\textit{dp}[i][j-1]+s_2[j-1]), & s_1[i-1] \\ne s_2[j-1]\n\\end{cases}\n$$\n\n最终计算得到 $\\textit{dp}[m][n]$ 即为使 $s_1$ 和 $s_2$ 相同的最小 $\\text{ASCII}$ 删除和。\n\n实现方面，需要将 $s_1[i-1]$ 和 $s_2[j-1]$ 转换成相应的 $\\text{ASCII}$ 值。\n\n```Java [sol1-Java]\nclass Solution {\n    public int minimumDeleteSum(String s1, String s2) {\n        int m = s1.length(), n = s2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 1; i <= m; i++) {\n            dp[i][0] = dp[i - 1][0] + s1.codePointAt(i - 1);\n        }\n        for (int j = 1; j <= n; j++) {\n            dp[0][j] = dp[0][j - 1] + s2.codePointAt(j - 1);\n        }\n        for (int i = 1; i <= m; i++) {\n            int code1 = s1.codePointAt(i - 1);\n            for (int j = 1; j <= n; j++) {\n                int code2 = s2.codePointAt(j - 1);\n                if (code1 == code2) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j] + code1, dp[i][j - 1] + code2);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MinimumDeleteSum(string s1, string s2) {\n        int m = s1.Length, n = s2.Length;\n        int[,] dp = new int[m + 1, n + 1];\n        for (int i = 1; i <= m; i++) {\n            dp[i, 0] = dp[i - 1, 0] + s1[i - 1];\n        }\n        for (int j = 1; j <= n; j++) {\n            dp[0, j] = dp[0, j - 1] + s2[j - 1];\n        }\n        for (int i = 1; i <= m; i++) {\n            int code1 = s1[i - 1];\n            for (int j = 1; j <= n; j++) {\n                int code2 = s2[j - 1];\n                if (code1 == code2) {\n                    dp[i, j] = dp[i - 1, j - 1];\n                } else {\n                    dp[i, j] = Math.Min(dp[i - 1, j] + code1, dp[i, j - 1] + code2);\n                }\n            }\n        }\n        return dp[m, n];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minimumDeleteSum = function(s1, s2) {\n    const m = s1.length, n = s2.length;\n    const dp = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0));\n    for (let i = 1; i <= m; i++) {\n        dp[i][0] = dp[i - 1][0] + s1[i - 1].charCodeAt();\n    }\n    for (let j = 1; j <= n; j++) {\n        dp[0][j] = dp[0][j - 1] + s2[j - 1].charCodeAt();\n    }\n    for (let i = 1; i <= m; i++) {\n        const code1 = s1[i - 1].charCodeAt();\n        for (let j = 1; j <= n; j++) {\n            const code2 = s2[j - 1].charCodeAt();\n            if (code1 === code2) {\n                dp[i][j] = dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = Math.min(dp[i - 1][j] + code1, dp[i][j - 1] + code2);\n            }\n        }\n    }\n    return dp[m][n];\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        m, n = len(s1), len(s2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = dp[i - 1][0] + ord(s1[i - 1])\n        for j in range(1, n + 1):\n            dp[0][j] = dp[0][j - 1] + ord(s2[j - 1])\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j] + ord(s1[i - 1]), dp[i][j - 1] + ord(s2[j - 1]))\n        \n        return dp[m][n]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minimumDeleteSum(string s1, string s2) {\n        int m = s1.size();\n        int n = s2.size();\n        vector<vector<int>> dp(m + 1, vector<int>(n + 1));\n\n        for (int i = 1; i <= m; ++i) {\n            dp[i][0] = dp[i - 1][0] + s1[i - 1];\n        }\n        for (int j = 1; j <= n; ++j) {\n            dp[0][j] = dp[0][j - 1] + s2[j - 1];\n        }\n        for (int i = 1; i <= m; i++) {\n            char c1 = s1[i - 1];\n            for (int j = 1; j <= n; j++) {\n                char c2 = s2[j - 1];\n                if (c1 == c2) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = min(dp[i - 1][j] + s1[i - 1], dp[i][j - 1] + s2[j - 1]);\n                }\n            }\n        }\n\n        return dp[m][n];\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc minimumDeleteSum(s1 string, s2 string) int {\n    m, n := len(s1), len(s2)\n    dp := make([][]int, m+1)\n    for i := range dp {\n        dp[i] = make([]int, n+1)\n        if i > 0 {\n            dp[i][0] = dp[i-1][0] + int(s1[i-1])\n        }\n    }\n    for j := range dp[0] {\n        if j > 0 {\n            dp[0][j] = dp[0][j-1] + int(s2[j-1])\n        }\n    }\n    for i, c1 := range s1 {\n        for j, c2 := range s2 {\n            if c1 == c2 {\n                dp[i+1][j+1] = dp[i][j]\n            } else {\n                dp[i+1][j+1] = min(dp[i][j+1] + int(c1), dp[i+1][j] + int(c2))\n            }\n        }\n    }\n    return dp[m][n]\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是字符串 $s_1$ 和 $s_2$ 的长度。二维数组 $\\textit{dp}$ 有 $m+1$ 行和 $n+1$ 列，需要对 $\\textit{dp}$ 中的每个元素进行计算。\n\n- 空间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是字符串 $s_1$ 和 $s_2$ 的长度。创建了 $m+1$ 行 $n+1$ 列的二维数组 $\\textit{dp}$。"
}