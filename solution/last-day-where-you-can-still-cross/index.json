{
	"titleSlug": "last-day-where-you-can-still-cross",
	"slug": "ni-neng-chuan-guo-ju-zhen-de-zui-hou-yi-9j20y",
	"url": "https://leetcode-cn.com/problems/last-day-where-you-can-still-cross/solution/ni-neng-chuan-guo-ju-zhen-de-zui-hou-yi-9j20y/",
	"content": "#### 前言\n\n本题和 [1631. 最小体力消耗路径](https://leetcode-cn.com/problems/path-with-minimum-effort/) 是几乎一样的题目。\n\n#### 方法一：二分查找 + 广度优先搜索\n\n**思路与算法**\n\n如果第 $k$ 天我们能够从最上面一行走到最下面一行，那么第 $0, 1, \\cdots, k-1$ 天我们也可以。\n\n因此，一定存在一个最大值 $k'$ 使得：\n\n- 当 $k \\leq k'$ 时，我们可以在第 $k$ 天从最上面一行走到最下面一行；\n\n- 当 $k > k'$ 时，我们不可以在第 $k$ 天从最上面一行走到最下面一行。\n\n我们可以使用二分查找的方法找出 $k'$。二分查找的下界为 $0$，上界为 $\\textit{row} \\times \\textit{col}$。\n\n在二分查找的每一步中，我们需要对于二分到的 $k$ 值，判断是否可以最上面一行走到最下面一行。一种可行的方法是，我们构造一个 $\\textit{row} \\times \\textit{col}$ 的全 $1$ 矩阵，并把 $\\textit{cells}$ 中前 $k$ 个坐标在矩阵中对应的格子置为 $0$。随后，我们将第一行的所有格子（如果格子上的值为 $1$）放入队列中，进行广度优先搜索，搜索的过程中只能走向上下左右相邻并且值为 $1$ 的格子。如果能够搜索到最后一行的某个格子，那么说明存在一条从最上面一行走到最下面一行的路径，我们修改二分的下界，否则修改二分的上界。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\npublic:\n    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {\n        int left = 0, right = row * col, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            \n            vector<vector<int>> grid(row, vector<int>(col, 1));\n            for (int i = 0; i < mid; ++i) {\n                grid[cells[i][0] - 1][cells[i][1] - 1] = 0;\n            }\n\n            queue<pair<int, int>> q;\n            for (int i = 0; i < col; ++i) {\n                if (grid[0][i]) {\n                    q.emplace(0, i);\n                    grid[0][i] = 0;\n                }\n            }\n            bool found = false;\n            while (!q.empty()) {\n                auto [x, y] = q.front();\n                q.pop();\n                for (int d = 0; d < 4; ++d) {\n                    int nx = x + dirs[d][0];\n                    int ny = y + dirs[d][1];\n                    if (nx >= 0 && nx < row && ny >= 0 && ny < col && grid[nx][ny]) {\n                        if (nx == row - 1) {\n                            found = true;\n                            break;\n                        }\n                        q.emplace(nx, ny);\n                        grid[nx][ny] = 0;\n                    }\n                }\n            }\n            if (found) {\n                ans = mid;\n                left = mid + 1;\n            }\n            else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        left, right, ans = 0, row * col, 0\n        while left <= right:\n            mid = (left + right) // 2\n            \n            grid = [[1] * col for _ in range(row)]\n            for x, y in cells[:mid]:\n                grid[x - 1][y - 1] = 0\n\n            q = deque()\n            for i in range(col):\n                if grid[0][i]:\n                    q.append((0, i))\n                    grid[0][i] = 0\n            \n            found = False\n            while q:\n                x, y = q.popleft()\n                for nx, ny in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]:\n                    if 0 <= nx < row and 0 <= ny < col and grid[nx][ny]:\n                        if nx == row - 1:\n                            found = True\n                            break\n                        q.append((nx, ny))\n                        grid[nx][ny] = 0\n            \n            if found:\n                ans = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\textit{row} \\times \\textit{col} \\times \\log(\\textit{row} \\times \\textit{col}))$。二分查找的次数为 $O(\\log(\\textit{row} \\times \\textit{col}))$，在二分查找的每一步中，我们需要 $O(\\textit{row} \\times \\textit{col})$ 的时间进行广度优先搜索。\n\n- 空间复杂度：$O(\\textit{row} \\times \\textit{col})$，即为广度优先搜索中的矩阵以及队列需要使用的空间。\n\n#### 方法二：时光倒流 + 并查集\n\n**思路与算法**\n\n我们也可以倒着考虑这个问题：\n\n在第 $\\textit{row} \\times \\textit{col}$ 天时，矩阵中的每个格子都是水域。随后每往前推一天，就会有一个格子从水域变为陆地，问**最少**往前推几天可以从最上面一行走到最下面一行。\n\n因此，我们可以将矩阵中的每一个格子看成并查集中的一个节点。当我们将 $(x, y)$ 从水域变为陆地时，我们将 $(x, y)$ 在并查集中的节点与上下左右四个方向的格子（如果对应的格子也是陆地）在并查集中的节点进行合并。\n\n由于我们需要判断的是最上面一行与最下面一行的连通性，所以我们可以在并查集中额外添加两个超级节点 $s$ 和 $t$，分别表示最上面一行（整体）与最下面一行（整体）。如果 $(x, y)$ 中的 $x=0$，我们就将 $s$ 与 $(x, y)$ 在并查集中的节点进行合并；如果 $x=\\textit{row}-1$，我们就将 $t$ 与 $(x, y)$ 在并查集中的节点进行合并。这样一来，只要 $(s, t)$ 在并查集中连通，就说明我们可以从最上面一行走到最下面一行。\n\n**代码**\n\n```C++ [sol2-C++]\n// 并查集模板\nclass UnionFind {\npublic:\n    vector<int> parent;\n    vector<int> size;\n    int n;\n    // 当前连通分量数目\n    int setCount;\n    \npublic:\n    UnionFind(int _n): n(_n), setCount(_n), parent(_n), size(_n, 1) {\n        iota(parent.begin(), parent.end(), 0);\n    }\n    \n    int findset(int x) {\n        return parent[x] == x ? x : parent[x] = findset(parent[x]);\n    }\n    \n    bool unite(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        if (x == y) {\n            return false;\n        }\n        if (size[x] < size[y]) {\n            swap(x, y);\n        }\n        parent[y] = x;\n        size[x] += size[y];\n        --setCount;\n        return true;\n    }\n    \n    bool connected(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        return x == y;\n    }\n};\n\nclass Solution {\npublic:\n    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {\n        // 编号为 n 的节点是超级节点 s\n        // 编号为 n+1 的节点是超级节点 t\n        int n = row * col;\n        auto uf = UnionFind(n + 2);\n\n        vector<vector<int>> valid(row, vector<int>(col));\n        int ans = 0;\n        for (int i = n - 1; i >= 0; --i) {\n            int x = cells[i][0] - 1, y = cells[i][1] - 1;\n            valid[x][y] = true;\n            // 并查集是一维的，(x, y) 坐标是二维的，需要进行转换\n            int id = x * col + y;\n            if (x - 1 >= 0 && valid[x - 1][y]) {\n                uf.unite(id, id - col);\n            }\n            if (x + 1 < row && valid[x + 1][y]) {\n                uf.unite(id, id + col);\n            }\n            if (y - 1 >= 0 && valid[x][y - 1]) {\n                uf.unite(id, id - 1);\n            }\n            if (y + 1 < col && valid[x][y + 1]) {\n                uf.unite(id, id + 1);\n            }\n            if (x == 0) {\n                uf.unite(id, n);\n            }\n            if (x == row - 1) {\n                uf.unite(id, n + 1);\n            }\n            if (uf.connected(n, n + 1)) {\n                ans = i;\n                break;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol2-Python3]\n# 并查集模板\nclass UnionFind:\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.n = n\n        # 当前连通分量数目\n        self.setCount = n\n    \n    def findset(self, x: int) -> int:\n        if self.parent[x] == x:\n            return x\n        self.parent[x] = self.findset(self.parent[x])\n        return self.parent[x]\n    \n    def unite(self, x: int, y: int) -> bool:\n        x, y = self.findset(x), self.findset(y)\n        if x == y:\n            return False\n        if self.size[x] < self.size[y]:\n            x, y = y, x\n        self.parent[y] = x\n        self.size[x] += self.size[y]\n        self.setCount -= 1\n        return True\n    \n    def connected(self, x: int, y: int) -> bool:\n        x, y = self.findset(x), self.findset(y)\n        return x == y\n\nclass Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        # 编号为 n 的节点是超级节点 s\n        # 编号为 n+1 的节点是超级节点 t\n        n = row * col\n        uf = UnionFind(n + 2)\n\n        valid = [[0] * col for _ in range(row)]\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            x, y = cells[i][0] - 1, cells[i][1] - 1\n            valid[x][y] = 1\n            # 并查集是一维的，(x, y) 坐标是二维的，需要进行转换\n            idx = x * col + y\n            if x - 1 >= 0 and valid[x - 1][y]:\n                uf.unite(idx, idx - col)\n            if x + 1 < row and valid[x + 1][y]:\n                uf.unite(idx, idx + col)\n            if y - 1 >= 0 and valid[x][y - 1]:\n                uf.unite(idx, idx - 1)\n            if y + 1 < col and valid[x][y + 1]:\n                uf.unite(idx, idx + 1)\n            if x == 0:\n                uf.unite(idx, n)\n            if x == row - 1:\n                uf.unite(idx, n + 1)\n            if uf.connected(n, n + 1):\n                ans = i\n                break\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\textit{row} \\times \\textit{col} \\times \\alpha(\\textit{row} \\times \\textit{col}))$。其中 $\\alpha$ 是阿克曼函数的反函数，表示并查集在均摊意义下单次操作需要的时间。\n\n- 空间复杂度：$O(\\textit{row} \\times \\textit{col})$，即为并查集需要的空间。"
}