{
	"titleSlug": "longest-continuous-increasing-subsequence",
	"slug": "zui-chang-lian-xu-di-zeng-xu-lie-by-leet-dmb8",
	"url": "https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/solution/zui-chang-lian-xu-di-zeng-xu-lie-by-leet-dmb8/",
	"content": "#### 方法一：贪心\n\n对于下标范围 $[l,r]$ 的连续子序列，如果对任意 $l \\le i<r$ 都满足 $\\textit{nums}[i]<\\textit{nums}[i+1]$，则该连续子序列是递增序列。\n\n假设数组 $\\textit{nums}$ 的长度是 $n$，对于 $0<l \\le r<n-1$，如果下标范围 $[l,r]$ 的连续子序列是递增序列，则考虑 $\\textit{nums}[l-1]$ 和 $\\textit{nums}[r+1]$。\n\n- 如果 $\\textit{nums}[l-1]<\\textit{nums}[l]$，则将 $\\textit{nums}[l-1]$ 加到 $\\textit{nums}[l]$ 的前面，可以得到更长的连续递增序列.\n\n- 如果 $\\textit{nums}[r+1]>\\textit{nums}[r]$，则将 $\\textit{nums}[r+1]$ 加到 $\\textit{nums}[r]$ 的后面，可以得到更长的连续递增序列。\n\n基于上述分析可知，为了得到最长连续递增序列，可以使用贪心的策略得到尽可能长的连续递增序列。做法是使用记录当前连续递增序列的开始下标和结束下标，遍历数组的过程中每次比较相邻元素，根据相邻元素的大小关系决定是否需要更新连续递增序列的开始下标。\n\n具体而言，令 $\\textit{start}$ 表示连续递增序列的开始下标，初始时 $\\textit{start}=0$，然后遍历数组 $\\textit{nums}$，进行如下操作。\n\n- 如果下标 $i>0$ 且 $\\textit{nums}[i] \\le \\textit{nums}[i-1]$，则说明当前元素小于或等于上一个元素，因此 $\\textit{nums}[i-1]$ 和 $\\textit{nums}[i]$ 不可能属于同一个连续递增序列，必须从下标 $i$ 处开始一个新的连续递增序列，因此令 $\\textit{start}=i$。如果下标 $i=0$ 或 $\\textit{nums}[i]>\\textit{nums}[i-1]$，则不更新 $\\textit{start}$ 的值。\n\n- 此时下标范围 $[\\textit{start},i]$ 的连续子序列是递增序列，其长度为 $i-\\textit{start}+1$，使用当前连续递增序列的长度更新最长连续递增序列的长度。\n\n遍历结束之后，即可得到整个数组的最长连续递增序列的长度。\n\n```Java [sol1-Java]\nclass Solution {\n    public int findLengthOfLCIS(int[] nums) {\n        int ans = 0;\n        int n = nums.length;\n        int start = 0;\n        for (int i = 0; i < n; i++) {\n            if (i > 0 && nums[i] <= nums[i - 1]) {\n                start = i;\n            }\n            ans = Math.max(ans, i - start + 1);\n        }\n        return ans;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findLengthOfLCIS = function(nums) {\n    let ans = 0;\n    const n = nums.length;\n    let start = 0;\n    for (let i = 0; i < n; i++) {\n        if (i > 0 && nums[i] <= nums[i - 1]) {\n            start = i;\n        }\n        ans = Math.max(ans, i - start + 1);\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc findLengthOfLCIS(nums []int) (ans int) {\n    start := 0\n    for i, v := range nums {\n        if i > 0 && v <= nums[i-1] {\n            start = i\n        }\n        ans = max(ans, i-start+1)\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findLengthOfLCIS(vector<int>& nums) {\n        int ans = 0;\n        int n = nums.size();\n        int start = 0;\n        for (int i = 0; i < n; i++) {\n            if (i > 0 && nums[i] <= nums[i - 1]) {\n                start = i;\n            }\n            ans = max(ans, i - start + 1);\n        }\n        return ans;\n    }\n};\n```\n\n```C [sol1-C]\nint findLengthOfLCIS(int* nums, int numsSize) {\n    int ans = 0;\n    int start = 0;\n    for (int i = 0; i < numsSize; i++) {\n        if (i > 0 && nums[i] <= nums[i - 1]) {\n            start = i;\n        }\n        ans = fmax(ans, i - start + 1);\n    }\n    return ans;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findLengthOfLCIS(self, nums: List[int]) -> int:\n        ans = 0\n        n = len(nums)\n        start = 0\n\n        for i in range(n):\n            if i > 0 and nums[i] <= nums[i - 1]:\n                start = i\n            ans = max(ans, i - start + 1)\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。需要遍历数组一次。\n\n- 空间复杂度：$O(1)$。额外使用的空间为常数。"
}