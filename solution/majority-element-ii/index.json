{
	"titleSlug": "majority-element-ii",
	"slug": "qiu-zhong-shu-ii-by-leetcode-solution-y1rn",
	"url": "https://leetcode-cn.com/problems/majority-element-ii/solution/qiu-zhong-shu-ii-by-leetcode-solution-y1rn/",
	"content": "#### 方法一：哈希统计\n\n**思路**\n\n我们用哈希统计数组中每个元素出现的次数，设数组的长度为 $n$，返回所有统计次数超过 $\\lfloor\\frac{n}{3}\\rfloor$ 的元素。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> majorityElement(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> ans;\n        unordered_map<int, int> cnt;\n\n        for (auto & v : nums) {\n            cnt[v]++;\n        }\n        for (auto & v : cnt) {\n            if (v.second > n / 3) {\n                ans.push_back(v.first);\n            }\n        }\n\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        HashMap<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n\n        for (int i = 0; i < nums.length; i++) {\n            if (cnt.containsKey(nums[i])) {\n                cnt.put(nums[i], cnt.get(nums[i]) + 1);\n            } else {\n                cnt.put(nums[i], 1);\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int x : cnt.keySet()) {\n            if (cnt.get(x) > nums.length / 3) {\n                ans.add(x);\n            }\n        }\n   \n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<int> MajorityElement(int[] nums) {\n        Dictionary<int, int> cnt = new Dictionary<int, int>();\n\n        for (int i = 0; i < nums.Length; i++) {\n            if (cnt.ContainsKey(nums[i])) {\n                cnt[nums[i]]++;\n            } else {\n                cnt.Add(nums[i], 1);\n            }\n        }\n        IList<int> ans = new List<int>();\n        foreach (KeyValuePair<int, int> pair in cnt) {\n            if (pair.Value > nums.Length / 3) {\n                ans.Add(pair.Key);\n            }\n        }\n   \n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> List[int]:\n        cnt = {}\n        ans = []\n\n        for v in nums:\n            if v in cnt:\n                cnt[v] += 1\n            else:\n                cnt[v] = 1\n        for item in cnt.keys():\n            if cnt[item] > len(nums)//3:\n                ans.append(item)\n\n        return ans\n```\n\n```go [sol1-Golang]\nfunc majorityElement(nums []int) (ans []int) {\n    cnt := map[int]int{}\n    for _, v := range nums {\n        cnt[v]++\n    }\n    for v, c := range cnt {\n        if c > len(nums)/3 {\n            ans = append(ans, v)\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar majorityElement = function(nums) {\n    const cnt = new Map();\n\n    for (let i = 0; i < nums.length; i++) {\n        if (cnt.has(nums[i])) {\n            cnt.set(nums[i], cnt.get(nums[i]) + 1);\n        } else {\n            cnt.set(nums[i], 1);\n        }\n    }\n    const ans = [];\n    for (const x of cnt.keys()) {\n        if (cnt.get(x) > Math.floor(nums.length / 3)) {\n            ans.push(x);\n        }\n    }\n\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。\n\n- 空间复杂度：$O(n)$，其中 $n$ 为数组的长度，使用哈希表需要开辟额外的空间。\n\n#### 方法二：摩尔投票法\n\n**背景知识**\n\n摩尔投票法：摩尔投票法的核心思想为对拼消耗。首先我们考虑最基本的摩尔投票问题，比如找出一组数字序列中出现次数大于总数 $\\frac{1}{2}$ 的数字（并且假设这个数字一定存在）。我们可以直接利用反证法证明这样的数字只可能有一个。摩尔投票算法的核心思想是基于这个事实：\n\n- 每次从序列里选择两个不相同的数字删除掉（或称为「抵消」），最后剩下一个数字或几个相同的数字，就是出现次数大于总数一半的那个元素。假设我们当前数组中存在次数大于总数一半的元素为 $x$，数组的总长度为 $n$，则我们可以把数组分为两部分，一部分为相同的 $k$ 个元素 $x$，另一部分为 $\\frac{n-k}{2}$对个不同的元素配对，此时我们假设还存在另外一个次数大于总数一半的元素 $y$，则此时 $y$ 因该满足 $y > \\frac{n}{2}$，但是按照我们之前的推理 $y$ 应当满足 $y \\le \\frac{n-k}{2}$，二者自相矛盾。\n\n- 具体有兴趣的同学可以参考论文的证明过程，论文地址：[MJRTYA Fast Majority Vote Algorithm](https://www.cs.ou.edu/~rlpage/dmtools/mjrty.pdf)\n\n**解题思路**\n\n题目要求找出其中所有出现超过 $\\lfloor\\frac{n}{3}\\rfloor$ 次的元素。我们可以利用反证法推断出满足这样条件的元素最多只有两个，我们可以利用摩尔投票法的核心思想，每次选择三个互不相同的元素进行删除（或称为「抵消」）。我们可以假设数组中一定只存在一个次数大于 $\\lfloor\\frac{n}{3}\\rfloor$ 的元素 $x$，其中 $n$ 为数组的长度，则此时我们可以把数组分成两部分：一部分相同的 $k$ 个元素 $x$，另一部分为 $\\frac{n-k}{3}$组三个不同的元素，我们知道三个不同的元素会被抵消，因此最终只会剩下一个元素为 $x$。如果只存在 $2$ 个次数大于 $\\lfloor\\frac{n}{3}\\rfloor$ 的元素时，我们假设这两个不同的元素分别为 $x$ 和 $y$，则此时我们一定可以把数组分成三部分：第一部分相同的 $m$ 个元素 $x$，第二部分相同的 $k$ 个元素 $y$，第三部分为 $\\frac{n-m-k}{3}$组三个互不同的元素，我们知道三个互不同的元素会被抵消，因此最终只会剩下两个元素为 $x$ 和 $y$。\n\n- 我们每次检测当前元素是否为第一个选中的元素或者第二个选中的元素。\n\n- 每次我们发现当前元素与已经选中的两个元素都不相同，则进行抵消一次。\n\n- 如果存在最终选票大于 $0$ 的元素，我们还需要再次统计已选中元素的次数,检查元素的次数是否大于 $\\lfloor\\frac{n}{3}\\rfloor$ 。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> majorityElement(vector<int>& nums) {\n        vector<int> ans;\n        int element1 = 0;\n        int element2 = 0;\n        int vote1 = 0;\n        int vote2 = 0;\n\n        for (auto & num : nums) {\n            if (vote1 > 0 && num == element1) { //如果该元素为第一个元素，则计数加1\n                vote1++;\n            } else if (vote2 > 0 && num == element2) { //如果该元素为第二个元素，则计数加1\n                vote2++;\n            } else if (vote1 == 0) { // 选择第一个元素\n                element1 = num;\n                vote1++;\n            } else if (vote2 == 0) { // 选择第二个元素\n                element2 = num;\n                vote2++;\n            } else { //如果三个元素均不相同，则相互抵消1次\n                vote1--;\n                vote2--;\n            }\n        }\n\n        int cnt1 = 0;\n        int cnt2 = 0;\n        for (auto & num : nums) {\n            if (vote1 > 0 && num == element1) {\n                cnt1++;\n            }\n            if (vote2 > 0 && num == element2) {\n                cnt2++;\n            }\n        }\n        // 检测元素出现的次数是否满足要求\n        if (vote1 > 0 && cnt1 > nums.size() / 3) {\n            ans.push_back(element1);\n        }\n        if (vote2 > 0 && cnt2 > nums.size() / 3) {\n            ans.push_back(element2);\n        }\n\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        int element1 = 0;\n        int element2 = 0;\n        int vote1 = 0;\n        int vote2 = 0;\n\n        for (int num : nums) {\n            if (vote1 > 0 && num == element1) { //如果该元素为第一个元素，则计数加1\n                vote1++;\n            } else if (vote2 > 0 && num == element2) { //如果该元素为第二个元素，则计数加1\n                vote2++;\n            } else if (vote1 == 0) { // 选择第一个元素\n                element1 = num;\n                vote1++;\n            } else if (vote2 == 0) { // 选择第二个元素\n                element2 = num;\n                vote2++;\n            } else { //如果三个元素均不相同，则相互抵消1次\n                vote1--;\n                vote2--;\n            }\n        }\n\n        int cnt1 = 0;\n        int cnt2 = 0;\n        for (int num : nums) {\n            if (vote1 > 0 && num == element1) {\n                cnt1++;\n            }\n            if (vote2 > 0 && num == element2) {\n                cnt2++;\n            }\n        }\n        // 检测元素出现的次数是否满足要求\n        List<Integer> ans = new ArrayList<>();\n        if (vote1 > 0 && cnt1 > nums.length / 3) {\n            ans.add(element1);\n        }\n        if (vote2 > 0 && cnt2 > nums.length / 3) {\n            ans.add(element2);\n        }\n\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public IList<int> MajorityElement(int[] nums) {\n        int element1 = 0;\n        int element2 = 0;\n        int vote1 = 0;\n        int vote2 = 0;\n\n        foreach (int num in nums) {\n            if (vote1 > 0 && num == element1) { //如果该元素为第一个元素，则计数加1\n                vote1++;\n            } else if (vote2 > 0 && num == element2) { //如果该元素为第二个元素，则计数加1\n                vote2++;\n            } else if (vote1 == 0) { // 选择第一个元素\n                element1 = num;\n                vote1++;\n            } else if (vote2 == 0) { // 选择第二个元素\n                element2 = num;\n                vote2++;\n            } else { //如果三个元素均不相同，则相互抵消1次\n                vote1--;\n                vote2--;\n            }\n        }\n\n        int cnt1 = 0;\n        int cnt2 = 0;\n        foreach (int num in nums) {\n            if (vote1 > 0 && num == element1) {\n                cnt1++;\n            }\n            if (vote2 > 0 && num == element2) {\n                cnt2++;\n            }\n        }\n        // 检测元素出现的次数是否满足要求\n        IList<int> ans = new List<int>();\n        if (vote1 > 0 && cnt1 > nums.Length / 3) {\n            ans.Add(element1);\n        }\n        if (vote2 > 0 && cnt2 > nums.Length / 3) {\n            ans.Add(element2);\n        }\n\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def majorityElement(self, nums: List[int]) -> List[int]:\n        ans = []\n        element1, element2 = 0, 0\n        vote1, vote2 = 0, 0\n\n        for num in nums:\n            # 如果该元素为第一个元素，则计数加1\n            if vote1 > 0 and num == element1:\n                vote1 += 1\n            # 如果该元素为第二个元素，则计数加1\n            elif vote2 > 0 and num == element2:\n                vote2 += 1\n            # 选择第一个元素\n            elif vote1 == 0:\n                element1 = num\n                vote1 += 1\n            # 选择第二个元素\n            elif vote2 == 0:\n                element2 = num\n                vote2 += 1\n            # 如果三个元素均不相同，则相互抵消1次\n            else:\n                vote1 -= 1\n                vote2 -= 1\n\n        cnt1, cnt2 = 0, 0\n        for num in nums:\n            if vote1 > 0 and num == element1:\n                cnt1 += 1\n            if vote2 > 0 and num == element2:\n                cnt2 += 1        \n        # 检测元素出现的次数是否满足要求\n        if vote1 > 0 and cnt1 > len(nums) / 3:\n            ans.append(element1)\n        if vote2 > 0 and cnt2 > len(nums) / 3:\n            ans.append(element2)\n\n        return ans\n```\n\n```go [sol2-Golang]\nfunc majorityElement(nums []int) (ans []int) {\n    element1, element2 := 0, 0\n    vote1, vote2 := 0, 0\n\n    for _, num := range nums {\n        if vote1 > 0 && num == element1 { // 如果该元素为第一个元素，则计数加1\n            vote1++\n        } else if vote2 > 0 && num == element2 { // 如果该元素为第二个元素，则计数加1\n            vote2++\n        } else if vote1 == 0 { // 选择第一个元素\n            element1 = num\n            vote1++\n        } else if vote2 == 0 { // 选择第二个元素\n            element2 = num\n            vote2++\n        } else { // 如果三个元素均不相同，则相互抵消1次\n            vote1--\n            vote2--\n        }\n    }\n\n    cnt1, cnt2 := 0, 0\n    for _, num := range nums {\n        if vote1 > 0 && num == element1 {\n            cnt1++\n        }\n        if vote2 > 0 && num == element2 {\n            cnt2++\n        }\n    }\n\n    // 检测元素出现的次数是否满足要求\n    if vote1 > 0 && cnt1 > len(nums)/3 {\n        ans = append(ans, element1)\n    }\n    if vote2 > 0 && cnt2 > len(nums)/3 {\n        ans = append(ans, element2)\n    }\n    return\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar majorityElement = function(nums) {\n    let element1 = 0;\n    let element2 = 0;\n    let vote1 = 0;\n    let vote2 = 0;\n\n    for (const num of nums) {\n        if (vote1 > 0 && num === element1) { //如果该元素为第一个元素，则计数加1\n            vote1++;\n        } else if (vote2 > 0 && num === element2) { //如果该元素为第二个元素，则计数加1\n            vote2++;\n        } else if (vote1 === 0) { // 选择第一个元素\n            element1 = num;\n            vote1++;\n        } else if (vote2 === 0) { // 选择第二个元素\n            element2 = num;\n            vote2++;\n        } else { //如果三个元素均不相同，则相互抵消1次\n            vote1--;\n            vote2--;\n        }\n    }\n\n    let cnt1 = 0;\n    let cnt2 = 0;\n    for (const num of nums) {\n        if (vote1 > 0 && num === element1) {\n            cnt1++;\n        }\n        if (vote2 > 0 && num === element2) {\n            cnt2++;\n        }\n    }\n    // 检测元素出现的次数是否满足要求\n    const ans = [];\n    if (vote1 > 0 && cnt1 > Math.floor(nums.length / 3)) {\n        ans.push(element1);\n    }\n    if (vote2 > 0 && cnt2 > Math.floor(nums.length / 3)) {\n        ans.push(element2);\n    }\n\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。\n\n- 空间复杂度：$O(1)$，只需要常数个元素用来存储关键元素和统计次数即可。"
}