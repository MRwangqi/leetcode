{
	"titleSlug": "word-break-ii",
	"slug": "dan-ci-chai-fen-ii-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/word-break-ii/solution/dan-ci-chai-fen-ii-by-leetcode-solution/",
	"content": "#### 前言\n\n这道题是「[139. 单词拆分](https://leetcode-cn.com/problems/word-break/)」的进阶，第 139 题要求判断是否可以拆分，这道题要求返回所有可能的拆分结果。\n\n第 139 题可以使用动态规划的方法判断是否可以拆分，因此这道题也可以使用动态规划的思想。但是这道题如果使用自底向上的动态规划的方法进行拆分，则无法事先判断拆分的可行性，在不能拆分的情况下会超时。\n\n例如以下例子，由于字符串 $s$ 中包含字母 $\\texttt{b}$，而单词列表 $\\textit{wordDict}$ 中的所有单词都由字母 $\\texttt{a}$ 组成，不包含字母 $\\texttt{b}$，因此不能拆分，但是自底向上的动态规划仍然会在每个下标都进行大量的匹配，导致超时。\n\n```\ns = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\nwordDict = [\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaa\",\"aaaaaaaa\",\"aaaaaaaaa\",\"aaaaaaaaaa\"]\n```\n\n为了避免动态规划的方法超时，需要首先使用第 139 题的代码进行判断，在可以拆分的情况下再使用动态规划的方法进行拆分。相比之下，自顶向下的记忆化搜索可以在搜索过程中将不可以拆分的情况进行剪枝，因此记忆化搜索是更优的做法。\n\n#### 方法一：记忆化搜索\n\n对于字符串 $s$，如果某个前缀是单词列表中的单词，则拆分出该单词，然后对 $s$ 的剩余部分继续拆分。如果可以将整个字符串 $s$ 拆分成单词列表中的单词，则得到一个句子。在对 $s$ 的剩余部分拆分得到一个句子之后，将拆分出的第一个单词（即 $s$ 的前缀）添加到句子的头部，即可得到一个完整的句子。上述过程可以通过回溯实现。\n\n假设字符串 $s$ 的长度为 $n$，回溯的时间复杂度在最坏情况下高达 $O(n^n)$。时间复杂度高的原因是存在大量重复计算，可以通过记忆化的方式降低时间复杂度。\n\n具体做法是，使用哈希表存储字符串 $s$ 的每个下标和从该下标开始的部分可以组成的句子列表，在回溯过程中如果遇到已经访问过的下标，则可以直接从哈希表得到结果，而不需要重复计算。如果到某个下标发现无法匹配，则哈希表中该下标对应的是空列表，因此可以对不能拆分的情况进行剪枝优化。\n\n还有一个可优化之处为使用哈希集合存储单词列表中的单词，这样在判断一个字符串是否是单词列表中的单词时只需要判断该字符串是否在哈希集合中即可，而不再需要遍历单词列表。\n\n```Java [sol1-Java]\nclass Solution {\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        Map<Integer, List<List<String>>> map = new HashMap<Integer, List<List<String>>>();\n        List<List<String>> wordBreaks = backtrack(s, s.length(), new HashSet<String>(wordDict), 0, map);\n        List<String> breakList = new LinkedList<String>();\n        for (List<String> wordBreak : wordBreaks) {\n            breakList.add(String.join(\" \", wordBreak));\n        }\n        return breakList;\n    }\n\n    public List<List<String>> backtrack(String s, int length, Set<String> wordSet, int index, Map<Integer, List<List<String>>> map) {\n        if (!map.containsKey(index)) {\n            List<List<String>> wordBreaks = new LinkedList<List<String>>();\n            if (index == length) {\n                wordBreaks.add(new LinkedList<String>());\n            }\n            for (int i = index + 1; i <= length; i++) {\n                String word = s.substring(index, i);\n                if (wordSet.contains(word)) {\n                    List<List<String>> nextWordBreaks = backtrack(s, length, wordSet, i, map);\n                    for (List<String> nextWordBreak : nextWordBreaks) {\n                        LinkedList<String> wordBreak = new LinkedList<String>(nextWordBreak);\n                        wordBreak.offerFirst(word);\n                        wordBreaks.add(wordBreak);\n                    }\n                }\n            }\n            map.put(index, wordBreaks);\n        }\n        return map.get(index);\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst backtrack = (s, length, wordSet, index, map) => {\n    if (map.has(index)) {\n        return map.get(index);\n    }\n    const wordBreaks = [];\n    if (index === length) {\n        wordBreaks.push([]);\n    }\n    for (let i = index + 1; i <= length; i++) {\n        const word = s.substring(index, i);\n        if (wordSet.has(word)) {\n            const nextWordBreaks = backtrack(s, length, wordSet, i, map);\n            for (const nextWordBreak of nextWordBreaks) {\n                const wordBreak = [word, ...nextWordBreak]\n                wordBreaks.push(wordBreak);\n            }\n        }\n    }\n    map.set(index, wordBreaks);\n    return wordBreaks;\n}\nvar wordBreak = function(s, wordDict) {\n    const map = new Map();\n    const wordBreaks = backtrack(s, s.length, new Set(wordDict), 0, map);\n    const breakList = [];\n    for (const wordBreak of wordBreaks) {\n        breakList.push(wordBreak.join(' '));\n    }\n    return breakList;\n};\n```\n\n```Golang [sol1-Golang]\nfunc wordBreak(s string, wordDict []string) (sentences []string) {\n    wordSet := map[string]struct{}{}\n    for _, w := range wordDict {\n        wordSet[w] = struct{}{}\n    }\n\n    n := len(s)\n    dp := make([][][]string, n)\n    var backtrack func(index int) [][]string\n    backtrack = func(index int) [][]string {\n        if dp[index] != nil {\n            return dp[index]\n        }\n        wordsList := [][]string{}\n        for i := index + 1; i < n; i++ {\n            word := s[index:i]\n            if _, has := wordSet[word]; has {\n                for _, nextWords := range backtrack(i) {\n                    wordsList = append(wordsList, append([]string{word}, nextWords...))\n                }\n            }\n        }\n        word := s[index:]\n        if _, has := wordSet[word]; has {\n            wordsList = append(wordsList, []string{word})\n        }\n        dp[index] = wordsList\n        return wordsList\n    }\n    for _, words := range backtrack(0) {\n        sentences = append(sentences, strings.Join(words, \" \"))\n    }\n    return\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    unordered_map<int, vector<string>> ans;\n    unordered_set<string> wordSet;\n\npublic:\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n        wordSet = unordered_set(wordDict.begin(), wordDict.end());\n        backtrack(s, 0);\n        return ans[0];\n    }\n\n    void backtrack(const string& s, int index) {\n        if (!ans.count(index)) {\n            if (index == s.size()) {\n                ans[index] = {\"\"};\n                return;\n            }\n            ans[index] = {};\n            for (int i = index + 1; i <= s.size(); ++i) {\n                string word = s.substr(index, i - index);\n                if (wordSet.count(word)) {\n                    backtrack(s, i);\n                    for (const string& succ: ans[i]) {\n                        ans[index].push_back(succ.empty() ? word : word + \" \" + succ);\n                    }\n                }\n            }\n        }\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        @lru_cache(None)\n        def backtrack(index: int) -> List[List[str]]:\n            if index == len(s):\n                return [[]]\n            ans = list()\n            for i in range(index + 1, len(s) + 1):\n                word = s[index:i]\n                if word in wordSet:\n                    nextWordBreaks = backtrack(i)\n                    for nextWordBreak in nextWordBreaks:\n                        ans.append(nextWordBreak.copy() + [word])\n            return ans\n        \n        wordSet = set(wordDict)\n        breakList = backtrack(0)\n        return [\" \".join(words[::-1]) for words in breakList]\n```\n\n```C [sol1-C]\nstruct Trie {\n    int ch[26];\n    bool flag;\n} trie[10001];\n\nint size;\n\nvoid insert(char* s, int sSize) {\n    int add = 0;\n    for (int i = 0; i < sSize; i++) {\n        int x = s[i] - 'a';\n        if (trie[add].ch[x] == 0) {\n            trie[add].ch[x] = ++size;\n            memset(trie[size].ch, 0, sizeof(trie[size].ch));\n            trie[size].flag = false;\n        }\n        add = trie[add].ch[x];\n    }\n    trie[add].flag = true;\n}\n\nbool find(char* s, int sSize) {\n    int add = 0;\n    for (int i = 0; i < sSize; i++) {\n        int x = s[i] - 'a';\n        if (trie[add].ch[x] == 0) {\n            return false;\n        }\n        add = trie[add].ch[x];\n    }\n    return trie[add].flag;\n}\n\nchar** ans[1001];\nint ansSize[1001];\n\nvoid backtrack(char* s, int sSize, int index) {\n    if (ans[index] == NULL) {\n        ans[index] = malloc(sizeof(char**));\n        if (index == sSize) {\n            ansSize[index] = 1;\n            char* tmp = malloc(sizeof(char));\n            tmp[0] = '\\0';\n            ans[index][0] = tmp;\n            return;\n        }\n        ansSize[index] = 0;\n        for (int i = index + 1; i <= sSize; ++i) {\n            int len = i - index;\n            char* word = malloc(sizeof(char) * (len + 1));\n            for (int j = 0; j < len; ++j) word[j] = s[index + j];\n            word[len] = '\\0';\n            if (find(word, len)) {\n                backtrack(s, sSize, i);\n                ans[index] = realloc(ans[index], sizeof(char**) * (ansSize[index] + ansSize[i]));\n                for (int j = 0; j < ansSize[i]; ++j) {\n                    int len1 = len, len2 = strlen(ans[i][j]);\n                    char* tmp = malloc(sizeof(char) * (len1 + len2 + 2));\n                    strcpy(tmp, word);\n                    if (len2 > 0) {\n                        tmp[len1] = ' ';\n                    }\n                    strcpy(tmp + len1 + 1, ans[i][j]);\n                    ans[index][ansSize[index]++] = tmp;\n                }\n            }\n        }\n    }\n}\n\nchar** wordBreak(char* s, char** wordDict, int wordDictSize, int* returnSize) {\n    memset(ans, 0, sizeof(ans));\n    size = 0;\n    memset(trie[0].ch, 0, sizeof(trie[0].ch));\n    trie[0].flag = false;\n    for (int i = 0; i < wordDictSize; i++) {\n        insert(wordDict[i], strlen(wordDict[i]));\n    }\n    backtrack(s, strlen(s), 0);\n    *returnSize = ansSize[0];\n    return ans[0];\n}\n```\n\n**复杂度分析**\n\n本题的时间与空间复杂度均为指数级别，较难进行具体的分析。在最坏的情况下，考虑下面这样一组测试数据：\n\n```\ns = \"aaa...aaa\"\nwordDict = [\"a\",\"aa\",\"aaa\", ..., \"aaa...aaa\"]\n```\n\n显然，$s$ 的任意一种分隔方法均符合题目要求。即使我们忽略存储最终答案需要的空间，但在记忆化搜索的过程中缓存下来，防止重复计算而使用的空间**不可以忽略**。这一部分的占用的空间至少为 $O(n \\cdot 2^n)$，其中 $n$ 是 $s$ 的长度，即 $s$ 的分隔方法有 $2^n$ 种，每一种方法需要一个长度为 $O(n)$ 的字符串进行存储。\n\n对于时间复杂度部分，由于写入 $O(n \\cdot 2^n)$ 空间至少也需要 $O(n \\cdot 2^n)$ 的时间，因此时间复杂度同样为指数级别。\n\n虽然记忆化搜索和普通的回溯方法的时间复杂度均为指数级别，但前者的底数为 $2$，后者的底数为 $n$，因此记忆化搜索仍然具有一定的优越性。"
}