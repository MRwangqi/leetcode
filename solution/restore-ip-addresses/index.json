{
	"titleSlug": "restore-ip-addresses",
	"slug": "fu-yuan-ipdi-zhi-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/restore-ip-addresses/solution/fu-yuan-ipdi-zhi-by-leetcode-solution/",
	"content": "#### 方法一：回溯\n\n**思路与算法**\n\n由于我们需要找出**所有**可能复原出的 IP 地址，因此可以考虑使用回溯的方法，对所有可能的字符串分隔方式进行搜索，并筛选出满足要求的作为答案。\n\n设题目中给出的字符串为 $s$。我们用递归函数 $\\textit{dfs}(\\textit{segId}, \\textit{segStart})$ 表示我们正在从 $s[\\textit{segStart}]$ 的位置开始，搜索 IP 地址中的第 $\\textit{segId}$ 段，其中 $\\textit{segId} \\in \\{0, 1, 2, 3\\}$。由于 IP 地址的每一段必须是 $[0, 255]$ 中的整数，因此我们从 $\\textit{segStart}$ 开始，从小到大依次枚举当前这一段 IP 地址的结束位置 $\\textit{segEnd}$。如果满足要求，就递归地进行下一段搜索，调用递归函数 $\\textit{dfs}(\\textit{segId} + 1, \\textit{segEnd} + 1)$。\n\n特别地，由于 IP 地址的每一段不能有前导零，因此如果 $s[\\textit{segStart}]$ 等于字符 $0$，那么 IP 地址的第 $\\textit{segId}$ 段只能为 $0$，需要作为特殊情况进行考虑。\n\n在搜索的过程中，如果我们已经得到了全部的 $4$ 段 IP 地址（即 $\\textit{segId} = 4$），并且遍历完了整个字符串（即 $\\textit{segStart} = |s|$，其中 $|s|$ 表示字符串 $s$ 的长度），那么就复原出了一种满足题目要求的 IP 地址，我们将其加入答案。在其它的时刻，如果**提前**遍历完了整个字符串，那么我们需要结束搜索，回溯到上一步。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int SEG_COUNT = 4;\n\nprivate:\n    vector<string> ans;\n    vector<int> segments;\n\npublic:\n    void dfs(const string& s, int segId, int segStart) {\n        // 如果找到了 4 段 IP 地址并且遍历完了字符串，那么就是一种答案\n        if (segId == SEG_COUNT) {\n            if (segStart == s.size()) {\n                string ipAddr;\n                for (int i = 0; i < SEG_COUNT; ++i) {\n                    ipAddr += to_string(segments[i]);\n                    if (i != SEG_COUNT - 1) {\n                        ipAddr += \".\";\n                    }\n                }\n                ans.push_back(move(ipAddr));\n            }\n            return;\n        }\n\n        // 如果还没有找到 4 段 IP 地址就已经遍历完了字符串，那么提前回溯\n        if (segStart == s.size()) {\n            return;\n        }\n\n        // 由于不能有前导零，如果当前数字为 0，那么这一段 IP 地址只能为 0\n        if (s[segStart] == '0') {\n            segments[segId] = 0;\n            dfs(s, segId + 1, segStart + 1);\n        }\n\n        // 一般情况，枚举每一种可能性并递归\n        int addr = 0;\n        for (int segEnd = segStart; segEnd < s.size(); ++segEnd) {\n            addr = addr * 10 + (s[segEnd] - '0');\n            if (addr > 0 && addr <= 0xFF) {\n                segments[segId] = addr;\n                dfs(s, segId + 1, segEnd + 1);\n            } else {\n                break;\n            }\n        }\n    }\n\n    vector<string> restoreIpAddresses(string s) {\n        segments.resize(SEG_COUNT);\n        dfs(s, 0, 0);\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    static final int SEG_COUNT = 4;\n    List<String> ans = new ArrayList<String>();\n    int[] segments = new int[SEG_COUNT];\n\n    public List<String> restoreIpAddresses(String s) {\n        segments = new int[SEG_COUNT];\n        dfs(s, 0, 0);\n        return ans;\n    }\n\n    public void dfs(String s, int segId, int segStart) {\n        // 如果找到了 4 段 IP 地址并且遍历完了字符串，那么就是一种答案\n        if (segId == SEG_COUNT) {\n            if (segStart == s.length()) {\n                StringBuffer ipAddr = new StringBuffer();\n                for (int i = 0; i < SEG_COUNT; ++i) {\n                    ipAddr.append(segments[i]);\n                    if (i != SEG_COUNT - 1) {\n                        ipAddr.append('.');\n                    }\n                }\n                ans.add(ipAddr.toString());\n            }\n            return;\n        }\n\n        // 如果还没有找到 4 段 IP 地址就已经遍历完了字符串，那么提前回溯\n        if (segStart == s.length()) {\n            return;\n        }\n\n        // 由于不能有前导零，如果当前数字为 0，那么这一段 IP 地址只能为 0\n        if (s.charAt(segStart) == '0') {\n            segments[segId] = 0;\n            dfs(s, segId + 1, segStart + 1);\n        }\n\n        // 一般情况，枚举每一种可能性并递归\n        int addr = 0;\n        for (int segEnd = segStart; segEnd < s.length(); ++segEnd) {\n            addr = addr * 10 + (s.charAt(segEnd) - '0');\n            if (addr > 0 && addr <= 0xFF) {\n                segments[segId] = addr;\n                dfs(s, segId + 1, segEnd + 1);\n            } else {\n                break;\n            }\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n        SEG_COUNT = 4\n        ans = list()\n        segments = [0] * SEG_COUNT\n        \n        def dfs(segId: int, segStart: int):\n            # 如果找到了 4 段 IP 地址并且遍历完了字符串，那么就是一种答案\n            if segId == SEG_COUNT:\n                if segStart == len(s):\n                    ipAddr = \".\".join(str(seg) for seg in segments)\n                    ans.append(ipAddr)\n                return\n            \n            # 如果还没有找到 4 段 IP 地址就已经遍历完了字符串，那么提前回溯\n            if segStart == len(s):\n                return\n\n            # 由于不能有前导零，如果当前数字为 0，那么这一段 IP 地址只能为 0\n            if s[segStart] == \"0\":\n                segments[segId] = 0\n                dfs(segId + 1, segStart + 1)\n            \n            # 一般情况，枚举每一种可能性并递归\n            addr = 0\n            for segEnd in range(segStart, len(s)):\n                addr = addr * 10 + (ord(s[segEnd]) - ord(\"0\"))\n                if 0 < addr <= 0xFF:\n                    segments[segId] = addr\n                    dfs(segId + 1, segEnd + 1)\n                else:\n                    break\n        \n\n        dfs(0, 0)\n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar restoreIpAddresses = function(s) {\n    const SEG_COUNT = 4;\n    const segments = new Array(SEG_COUNT);\n    const ans = [];\n\n    const dfs = (s, segId, segStart) => {\n        // 如果找到了 4 段 IP 地址并且遍历完了字符串，那么就是一种答案\n        if (segId === SEG_COUNT) {\n            if (segStart === s.length) {\n                ans.push(segments.join('.'));\n            }\n            return;\n        }\n\n        // 如果还没有找到 4 段 IP 地址就已经遍历完了字符串，那么提前回溯\n        if (segStart === s.length) {\n            return;\n        }\n\n        // 由于不能有前导零，如果当前数字为 0，那么这一段 IP 地址只能为 0\n        if (s.charAt(segStart) === '0') {\n            segments[segId] = 0;\n            dfs(s, segId + 1, segStart + 1);\n        }\n\n        // 一般情况，枚举每一种可能性并递归\n        let addr = 0;\n        for (let segEnd = segStart; segEnd < s.length; ++segEnd) {\n            addr = addr * 10 + (s.charAt(segEnd) - '0');\n            if (addr > 0 && addr <= 0xFF) {\n                segments[segId] = addr;\n                dfs(s, segId + 1, segEnd + 1);\n            } else {\n                break;\n            }\n        }\n    }\n\n    dfs(s, 0, 0);\n    return ans;\n};\n```\n\n```C [sol1-C]\n#define SEG_COUNT 4\nint segments[SEG_COUNT];\nchar** ans;\nint ans_len;\n\nvoid dfs(char* s, int segId, int segStart) {\n    // 如果找到了 4 段 IP 地址并且遍历完了字符串，那么就是一种答案\n    int len_s = strlen(s);\n    if (segId == SEG_COUNT) {\n        if (segStart == len_s) {\n            char* ipAddr = (char*)malloc(sizeof(char) * (len_s + 4));\n            int add = 0;\n            for (int i = 0; i < SEG_COUNT; ++i) {\n                int number = segments[i];\n                if (number >= 100) {\n                    ipAddr[add++] = number / 100 + '0';\n                }\n                if (number >= 10) {\n                    ipAddr[add++] = number % 100 / 10 + '0';\n                }\n                ipAddr[add++] = number % 10 + '0';\n                if (i != SEG_COUNT - 1) {\n                    ipAddr[add++] = '.';\n                }\n            }\n            ipAddr[add] = 0;\n            ans = realloc(ans, sizeof(char*) * (ans_len + 1));\n            ans[ans_len++] = ipAddr;\n        }\n        return;\n    }\n\n    // 如果还没有找到 4 段 IP 地址就已经遍历完了字符串，那么提前回溯\n    if (segStart == len_s) {\n        return;\n    }\n\n    // 由于不能有前导零，如果当前数字为 0，那么这一段 IP 地址只能为 0\n    if (s[segStart] == '0') {\n        segments[segId] = 0;\n        dfs(s, segId + 1, segStart + 1);\n    }\n\n    // 一般情况，枚举每一种可能性并递归\n    int addr = 0;\n    for (int segEnd = segStart; segEnd < len_s; ++segEnd) {\n        addr = addr * 10 + (s[segEnd] - '0');\n        if (addr > 0 && addr <= 0xFF) {\n            segments[segId] = addr;\n            dfs(s, segId + 1, segEnd + 1);\n        } else {\n            break;\n        }\n    }\n}\n\nchar** restoreIpAddresses(char* s, int* returnSize) {\n    ans = (char**)malloc(0);\n    ans_len = 0;\n    dfs(s, 0, 0);\n    (*returnSize) = ans_len;\n    return ans;\n}\n```\n\n```golang [sol1-Golang]\nconst SEG_COUNT = 4\n\nvar (\n    ans []string\n    segments []int\n)\n\nfunc restoreIpAddresses(s string) []string {\n    segments = make([]int, SEG_COUNT)\n    ans = []string{}\n    dfs(s, 0, 0)\n    return ans\n}\n\nfunc dfs(s string, segId, segStart int) {\n    // 如果找到了 4 段 IP 地址并且遍历完了字符串，那么就是一种答案\n    if segId == SEG_COUNT {\n        if segStart == len(s) {\n            ipAddr := \"\"\n            for i := 0; i < SEG_COUNT; i++ {\n                ipAddr += strconv.Itoa(segments[i])\n                if i != SEG_COUNT - 1 {\n                    ipAddr += \".\"\n                }\n            }\n            ans = append(ans, ipAddr)\n        }\n        return\n    }\n\n    // 如果还没有找到 4 段 IP 地址就已经遍历完了字符串，那么提前回溯\n    if segStart == len(s) {\n        return\n    }\n    // 由于不能有前导零，如果当前数字为 0，那么这一段 IP 地址只能为 0\n    if s[segStart] == '0' {\n        segments[segId] = 0\n        dfs(s, segId + 1, segStart + 1)\n    }\n    // 一般情况，枚举每一种可能性并递归\n    addr := 0\n    for segEnd := segStart; segEnd < len(s); segEnd++ {\n        addr = addr * 10 + int(s[segEnd] - '0')\n        if addr > 0 && addr <= 0xFF {\n            segments[segId] = addr\n            dfs(s, segId + 1, segEnd + 1)\n        } else {\n            break\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n我们用 $\\text{SEG\\_COUNT} = 4$ 表示 IP 地址的段数。\n\n- 时间复杂度：$O(3^\\text{SEG\\_COUNT} \\times |s|)$。由于 IP 地址的每一段的位数不会超过 $3$，因此在递归的每一层，我们最多只会深入到下一层的 $3$ 种情况。由于 $\\text{SEG\\_COUNT} = 4$，对应着递归的最大层数，所以递归本身的时间复杂度为 $O(3^\\text{SEG\\_COUNT})$。如果我们复原出了一种满足题目要求的 IP 地址，那么需要 $O(|s|)$ 的时间将其加入答案数组中，因此总时间复杂度为 $O(3^\\text{SEG\\_COUNT} \\times |s|)$。\n\n- 空间复杂度：$O(\\text{SEG\\_COUNT})$，这里只计入除了用来存储答案数组以外的**额外空间复杂度**。递归使用的空间与递归的最大深度 $\\text{SEG\\_COUNT}$ 成正比。并且在上面的代码中，我们只额外使用了长度为 $\\text{SEG\\_COUNT}$ 的数组 $\\textit{segments}$ 存储已经搜索过的 IP 地址，因此空间复杂度为 $O(\\text{SEG\\_COUNT})$。"
}