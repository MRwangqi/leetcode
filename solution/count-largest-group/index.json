{
	"titleSlug": "count-largest-group",
	"slug": "tong-ji-zui-da-zu-de-shu-mu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/count-largest-group/solution/tong-ji-zui-da-zu-de-shu-mu-by-leetcode-solution/",
	"content": "#### 方法一：哈希表\n\n**思路**\n\n对于 $[1, n]$ 中的每一个整数 $i$，我们可以计算出它的数位和 $s_i$。建立一个从数位和到原数字的哈希映射，对每一个数字 $i$，使键 $s_i$ 对应的值自增一。然后我们在值的集合中找到最大的值 $m$，再遍历哈希表，统计值为 $m$ 的个数即可。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def countLargestGroup(self, n: int) -> int:\n        hashMap = collections.Counter()\n        for i in range(1, n + 1): \n            key = sum([int(x) for x in str(i)])\n            hashMap[key] += 1\n        maxValue = max(hashMap.values())\n        count = sum(1 for v in hashMap.values() if v == maxValue)\n        return count\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int countLargestGroup(int n) {\n        unordered_map<int, int> hashMap;\n        int maxValue = 0;\n        for (int i = 1; i <= n; ++i) {\n            int key = 0, i0 = i;\n            while (i0) {\n                key += i0 % 10;\n                i0 /= 10;\n            }\n            ++hashMap[key];\n            maxValue = max(maxValue, hashMap[key]);\n        }\n        int count = 0;\n        for (auto& kvpair: hashMap) {\n            if (kvpair.second == maxValue) {\n                ++count;\n            }\n        }\n        return count;\n    }\n};\n```\n\n```C++ [sol1-C++17]\nclass Solution {\npublic:\n    int countLargestGroup(int n) {\n        unordered_map<int, int> hashMap;\n        int maxValue = 0;\n        for (int i = 1; i <= n; ++i) {\n            int key = 0, i0 = i;\n            while (i0) {\n                key += i0 % 10;\n                i0 /= 10;\n            }\n            ++hashMap[key];\n            maxValue = max(maxValue, hashMap[key]);\n        }\n        int count = 0;\n        for (auto& [_, value]: hashMap) {\n            if (value == maxValue) {\n                ++count;\n            }\n        }\n        return count;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countLargestGroup(int n) {\n        Map<Integer, Integer> hashMap = new HashMap<Integer, Integer>();\n        int maxValue = 0;\n        for (int i = 1; i <= n; ++i) {\n            int key = 0, i0 = i;\n            while (i0 != 0) {\n                key += i0 % 10;\n                i0 /= 10;\n            }\n            hashMap.put(key, hashMap.getOrDefault(key, 0) + 1);\n            maxValue = Math.max(maxValue, hashMap.get(key));\n        }\n        int count = 0;\n        for (Map.Entry<Integer, Integer> kvpair : hashMap.entrySet()) {\n            if (kvpair.getValue() == maxValue) {\n                ++count;\n            }\n        }\n        return count;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：对数 $x$ 求数位和的时间为 $O(\\log_{10} x) = O(\\log x)$，因此总时间代价为 $O(n \\log n)$，选出最大元素和遍历哈希表的时间代价均为 $O(n)$，故渐渐时间复杂度 $O(n \\log n) + O(n) = O(n \\log n)$。\n\n- 空间复杂度：使用哈希表作为辅助空间，$n$ 的数位个数为 $O(\\log_{10} n) = O(\\log n)$，每一个数位都在 $[0, 9]$ 之间，故哈希表最多包含的键的个数为 $O(10 \\log n) = O(\\log n)$，渐进空间复杂度为 $O(\\log n)$。"
}