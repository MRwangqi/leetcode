{
	"titleSlug": "set-mismatch",
	"slug": "cuo-wu-de-ji-he-by-leetcode-solution-1ea4",
	"url": "https://leetcode-cn.com/problems/set-mismatch/solution/cuo-wu-de-ji-he-by-leetcode-solution-1ea4/",
	"content": "#### 方法一：排序\n\n将数组排序之后，比较每对相邻的元素，即可找到错误的集合。\n\n寻找重复的数字较为简单，如果相邻的两个元素相等，则该元素为重复的数字。\n\n寻找丢失的数字相对复杂，可能有以下两种情况：\n\n- 如果丢失的数字大于 $1$ 且小于 $n$，则一定存在相邻的两个元素的差等于 $2$，这两个元素之间的值即为丢失的数字；\n\n- 如果丢失的数字是 $1$ 或 $n$，则需要另外判断。\n\n为了寻找丢失的数字，需要在遍历已排序数组的同时记录上一个元素，然后计算当前元素与上一个元素的差。考虑到丢失的数字可能是 $1$，因此需要将上一个元素初始化为 $0$。\n\n- 当丢失的数字小于 $n$ 时，通过计算当前元素与上一个元素的差，即可得到丢失的数字；\n\n- 如果 $\\textit{nums}[n-1] \\ne n$，则丢失的数字是 $n$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] findErrorNums(int[] nums) {\n        int[] errorNums = new int[2];\n        int n = nums.length;\n        Arrays.sort(nums);\n        int prev = 0;\n        for (int i = 0; i < n; i++) {\n            int curr = nums[i];\n            if (curr == prev) {\n                errorNums[0] = prev;\n            } else if (curr - prev > 1) {\n                errorNums[1] = prev + 1;\n            }\n            prev = curr;\n        }\n        if (nums[n - 1] != n) {\n            errorNums[1] = n;\n        }\n        return errorNums;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] FindErrorNums(int[] nums) {\n        int[] errorNums = new int[2];\n        int n = nums.Length;\n        Array.Sort(nums);\n        int prev = 0;\n        for (int i = 0; i < n; i++) {\n            int curr = nums[i];\n            if (curr == prev) {\n                errorNums[0] = prev;\n            } else if (curr - prev > 1) {\n                errorNums[1] = prev + 1;\n            }\n            prev = curr;\n        }\n        if (nums[n - 1] != n) {\n            errorNums[1] = n;\n        }\n        return errorNums;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> findErrorNums(vector<int>& nums) {\n        vector<int> errorNums(2);\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        int prev = 0;\n        for (int i = 0; i < n; i++) {\n            int curr = nums[i];\n            if (curr == prev) {\n                errorNums[0] = prev;\n            } else if (curr - prev > 1) {\n                errorNums[1] = prev + 1;\n            }\n            prev = curr;\n        }\n        if (nums[n - 1] != n) {\n            errorNums[1] = n;\n        }\n        return errorNums;\n    }\n};\n```\n\n```C [sol1-C]\nint cmp(int* a, int* b) {\n    return *a - *b;\n}\n\nint* findErrorNums(int* nums, int numsSize, int* returnSize) {\n    int* errorNums = malloc(sizeof(int) * 2);\n    *returnSize = 2;\n    qsort(nums, numsSize, sizeof(int), cmp);\n    int prev = 0;\n    for (int i = 0; i < numsSize; i++) {\n        int curr = nums[i];\n        if (curr == prev) {\n            errorNums[0] = prev;\n        } else if (curr - prev > 1) {\n            errorNums[1] = prev + 1;\n        }\n        prev = curr;\n    }\n    if (nums[numsSize - 1] != numsSize) {\n        errorNums[1] = numsSize;\n    }\n    return errorNums;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findErrorNums = function(nums) {\n    const errorNums = new Array(2).fill(0);\n    const n = nums.length;\n    nums.sort((a, b) => a - b);\n    let prev = 0;\n    for (let i = 0; i < n; i++) {\n        const curr = nums[i];\n        if (curr === prev) {\n            errorNums[0] = prev;\n        } else if (curr - prev > 1) {\n            errorNums[1] = prev + 1;\n        }\n        prev = curr;\n    }\n    if (nums[n - 1] !== n) {\n        errorNums[1] = n;\n    }\n    return errorNums;\n};\n```\n\n```go [sol1-Golang]\nfunc findErrorNums(nums []int) []int {\n    ans := make([]int, 2)\n    sort.Ints(nums)\n    pre := 0\n    for _, v := range nums {\n        if v == pre {\n            ans[0] = v\n        } else if v-pre > 1 {\n            ans[1] = pre + 1\n        }\n        pre = v\n    }\n    n := len(nums)\n    if nums[n-1] != n {\n        ans[1] = n\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。排序需要 $O(n \\log n)$ 的时间，遍历数组找到错误的集合需要 $O(n)$ 的时间，因此总时间复杂度是 $O(n \\log n)$。\n\n- 空间复杂度：$O(\\log n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。排序需要 $O(\\log n)$ 的空间。\n\n#### 方法二：哈希表\n\n重复的数字在数组中出现 $2$ 次，丢失的数字在数组中出现 $0$ 次，其余的每个数字在数组中出现 $1$ 次。因此可以使用哈希表记录每个元素在数组中出现的次数，然后遍历从 $1$ 到 $n$ 的每个数字，分别找到出现 $2$ 次和出现 $0$ 次的数字，即为重复的数字和丢失的数字。\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] findErrorNums(int[] nums) {\n        int[] errorNums = new int[2];\n        int n = nums.length;\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        for (int i = 1; i <= n; i++) {\n            int count = map.getOrDefault(i, 0);\n            if (count == 2) {\n                errorNums[0] = i;\n            } else if (count == 0) {\n                errorNums[1] = i;\n            }\n        }\n        return errorNums;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int[] FindErrorNums(int[] nums) {\n        int[] errorNums = new int[2];\n        int n = nums.Length;\n        Dictionary<int, int> dictionary = new Dictionary<int, int>();\n        foreach (int num in nums) {\n            if (!dictionary.ContainsKey(num)) {\n                dictionary.Add(num, 1);\n            } else {\n                dictionary[num]++;\n            }\n        }\n        for (int i = 1; i <= n; i++) {\n            int count = 0;\n            dictionary.TryGetValue(i, out count);\n            if (count == 2) {\n                errorNums[0] = i;\n            } else if (count == 0) {\n                errorNums[1] = i;\n            }\n        }\n        return errorNums;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> findErrorNums(vector<int>& nums) {\n        vector<int> errorNums(2);\n        int n = nums.size();\n        unordered_map<int, int> mp;\n        for (auto& num : nums) {\n            mp[num]++;\n        }\n        for (int i = 1; i <= n; i++) {\n            int count = mp[i];\n            if (count == 2) {\n                errorNums[0] = i;\n            } else if (count == 0) {\n                errorNums[1] = i;\n            }\n        }\n        return errorNums;\n    }\n};\n```\n\n```C [sol2-C]\nstruct HashTable {\n    int key, val;\n    UT_hash_handle hh;\n};\n\nint cmp(int* a, int* b) {\n    return *a - *b;\n}\n\nint* findErrorNums(int* nums, int numsSize, int* returnSize) {\n    int* errorNums = malloc(sizeof(int) * 2);\n    *returnSize = 2;\n    struct HashTable* hashTable = NULL;\n    for (int i = 0; i < numsSize; i++) {\n        struct HashTable* tmp;\n        HASH_FIND_INT(hashTable, &nums[i], tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct HashTable));\n            tmp->key = nums[i], tmp->val = 1;\n            HASH_ADD_INT(hashTable, key, tmp);\n        } else {\n            tmp->val++;\n        }\n    }\n    for (int i = 1; i <= numsSize; i++) {\n        struct HashTable* tmp;\n        HASH_FIND_INT(hashTable, &i, tmp);\n        if (tmp == NULL) {\n            errorNums[1] = i;\n        } else if (tmp->val == 2) {\n            errorNums[0] = i;\n        }\n    }\n    return errorNums;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findErrorNums = function(nums) {\n    const errorNums = new Array(2).fill(0);\n    const n = nums.length;\n    const map = new Map();\n    for (const num of nums) {\n        map.set(num, (map.get(num) || 0) + 1);\n    }\n    for (let i = 1; i <= n; i++) {\n        const count = map.get(i) || 0;\n        if (count === 2) {\n            errorNums[0] = i;\n        } else if (count === 0) {\n            errorNums[1] = i;\n        }\n    }\n    return errorNums;\n};\n```\n\n```go [sol2-Golang]\nfunc findErrorNums(nums []int) []int {\n    cnt := map[int]int{}\n    for _, v := range nums {\n        cnt[v]++\n    }\n    ans := make([]int, 2)\n    for i := 1; i <= len(nums); i++ {\n        if c := cnt[i]; c == 2 {\n            ans[0] = i\n        } else if c == 0 {\n            ans[1] = i\n        }\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。需要遍历数组并填入哈希表，然后遍历从 $1$ 到 $n$ 的每个数寻找错误的集合。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。需要创建大小为 $O(n)$ 的哈希表。\n\n#### 方法三：位运算\n\n使用位运算，可以达到 $O(n)$ 的时间复杂度和 $O(1)$ 的空间复杂度。\n\n重复的数字在数组中出现 $2$ 次，丢失的数字在数组中出现 $0$ 次，其余的每个数字在数组中出现 $1$ 次。由此可见，重复的数字和丢失的数字的出现次数的奇偶性相同，且和其余的每个数字的出现次数的奇偶性不同。如果在数组的 $n$ 个数字后面再添加从 $1$ 到 $n$ 的每个数字，得到 $2n$ 个数字，则在 $2n$ 个数字中，重复的数字出现 $3$ 次，丢失的数字出现 $1$ 次，其余的每个数字出现 $2$ 次。根据出现次数的奇偶性，可以使用异或运算求解。\n\n用 $x$ 和 $y$ 分别表示重复的数字和丢失的数字。考虑上述 $2n$ 个数字的异或运算结果 $\\textit{xor}$，由于异或运算 $\\oplus$ 满足交换律和结合律，且对任何数字 $a$ 都满足 $a \\oplus a = 0$ 和 $0 \\oplus a = a$，因此 $\\textit{xor} = x \\oplus x \\oplus x \\oplus y = x \\oplus y$，即 $x$ 和 $y$ 的异或运算的结果。\n\n由于 $x \\ne y$，因此 $\\textit{xor} \\ne 0$，令 $\\textit{lowbit} = \\textit{xor}~\\&~(-\\textit{xor})$，则 $\\textit{lowbit}$ 为 $x$ 和 $y$ 的二进制表示中的最低不同位，可以用 $\\textit{lowbit}$ 区分 $x$ 和 $y$。\n\n得到 $\\textit{lowbit}$ 之后，可以将上述 $2n$ 个数字分成两组，第一组的每个数字 $a$ 都满足 $a~\\&~\\textit{lowbit} = 0$，第二组的每个数字 $b$ 都满足 $b~\\&~\\textit{lowbit} \\ne 0$。\n\n创建两个变量 $\\textit{num}_1$ 和 $\\textit{num}_2$，初始值都为 $0$，然后再次遍历上述 $2n$ 个数字，对于每个数字 $a$，如果 $a~\\&~\\textit{lowbit} = 0$，则令 $\\textit{num}_1 = \\textit{num}_1 \\oplus a$，否则令 $\\textit{num}_2 = \\textit{num}_2 \\oplus a$。\n\n遍历结束之后，$\\textit{num}_1$ 为第一组的全部数字的异或结果，$\\textit{num}_2$ 为第二组的全部数字的异或结果。由于同一个数字只可能出现在其中的一组，且除了 $x$ 和 $y$ 以外，每个数字一定在其中的一组出现 $2$ 次，因此 $\\textit{num}_1$ 和 $\\textit{num}_2$ 分别对应 $x$ 和 $y$ 中的一个数字，但是具体对应哪个数还未知。\n\n为了知道 $\\textit{num}_1$ 和 $\\textit{num}_2$ 分别对应 $x$ 和 $y$ 中的哪一个数字，只需要再次遍历数组 $\\textit{nums}$ 即可。如果数组中存在元素等于 $\\textit{num}_1$，则有 $x=\\textit{num}_1$ 和 $y=\\textit{num}_2$，否则有 $x=\\textit{num}_2$ 和 $y=\\textit{num}_1$。\n\n```Java [sol3-Java]\nclass Solution {\n    public int[] findErrorNums(int[] nums) {\n        int n = nums.length;\n        int xor = 0;\n        for (int num : nums) {\n            xor ^= num;\n        }\n        for (int i = 1; i <= n; i++) {\n            xor ^= i;\n        }\n        int lowbit = xor & (-xor);\n        int num1 = 0, num2 = 0;\n        for (int num : nums) {\n            if ((num & lowbit) == 0) {\n                num1 ^= num;\n            } else {\n                num2 ^= num;\n            }\n        }\n        for (int i = 1; i <= n; i++) {\n            if ((i & lowbit) == 0) {\n                num1 ^= i;\n            } else {\n                num2 ^= i;\n            }\n        }\n        for (int num : nums) {\n            if (num == num1) {\n                return new int[]{num1, num2};\n            }\n        }\n        return new int[]{num2, num1};\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public int[] FindErrorNums(int[] nums) {\n        int n = nums.Length;\n        int xor = 0;\n        foreach (int num in nums) {\n            xor ^= num;\n        }\n        for (int i = 1; i <= n; i++) {\n            xor ^= i;\n        }\n        int lowbit = xor & (-xor);\n        int num1 = 0, num2 = 0;\n        foreach (int num in nums) {\n            if ((num & lowbit) == 0) {\n                num1 ^= num;\n            } else {\n                num2 ^= num;\n            }\n        }\n        for (int i = 1; i <= n; i++) {\n            if ((i & lowbit) == 0) {\n                num1 ^= i;\n            } else {\n                num2 ^= i;\n            }\n        }\n        foreach (int num in nums) {\n            if (num == num1) {\n                return new int[]{num1, num2};\n            }\n        }\n        return new int[]{num2, num1};\n    }\n}\n```\n\n``` C++ [sol3-C++]\nclass Solution {\npublic:\n    vector<int> findErrorNums(vector<int>& nums) {\n        int n = nums.size();\n        int xorSum = 0;\n        for (int num : nums) {\n            xorSum ^= num;\n        }\n        for (int i = 1; i <= n; i++) {\n            xorSum ^= i;\n        }\n        int lowbit = xorSum & (-xorSum);\n        int num1 = 0, num2 = 0;\n        for (int &num : nums) {\n            if ((num & lowbit) == 0) {\n                num1 ^= num;\n            } else {\n                num2 ^= num;\n            }\n        }\n        for (int i = 1; i <= n; i++) {\n            if ((i & lowbit) == 0) {\n                num1 ^= i;\n            } else {\n                num2 ^= i;\n            }\n        }\n        for (int num : nums) {\n            if (num == num1) {\n                return vector<int>{num1, num2};\n            }\n        }\n        return vector<int>{num2, num1};\n    }\n};\n```\n\n```C [sol3-C]\nint* findErrorNums(int* nums, int numsSize, int* returnSize) {\n    int* errorNums = malloc(sizeof(int) * 2);\n    int xorSum = 0;\n    for (int i = 1; i <= numsSize; i++) {\n        xorSum ^= i;\n        xorSum ^= nums[i - 1];\n    }\n    int lowbit = xorSum & (-xorSum);\n    int num1 = 0, num2 = 0;\n    for (int i = 0; i < numsSize; i++) {\n        if ((nums[i] & lowbit) == 0) {\n            num1 ^= nums[i];\n        } else {\n            num2 ^= nums[i];\n        }\n    }\n    for (int i = 1; i <= numsSize; i++) {\n        if ((i & lowbit) == 0) {\n            num1 ^= i;\n        } else {\n            num2 ^= i;\n        }\n    }\n    int* ret = malloc(sizeof(int) * 2);\n    *returnSize = 2;\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] == num1) {\n            ret[0] = num1, ret[1] = num2;\n            return ret;\n        }\n    }\n    ret[0] = num2, ret[1] = num1;\n    return ret;\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar findErrorNums = function(nums) {\n    const n = nums.length;\n    let xor = 0;\n    for (const num of nums) {\n        xor ^= num;\n    }\n    for (let i = 1; i <= n; i++) {\n        xor ^= i;\n    }\n    const lowbit = xor & (-xor);\n    let num1 = 0, num2 = 0;\n    for (const num of nums) {\n        if ((num & lowbit) === 0) {\n            num1 ^= num;\n        } else {\n            num2 ^= num;\n        }\n    }\n    for (let i = 1; i <= n; i++) {\n        if ((i & lowbit) === 0) {\n            num1 ^= i;\n        } else {\n            num2 ^= i;\n        }\n    }\n    for (const num of nums) {\n        if (num === num1) {\n            return [num1, num2];\n        }\n    }\n    return [num2, num1];\n};\n```\n\n```go [sol3-Golang]\nfunc findErrorNums(nums []int) []int {\n    xor := 0\n    for _, v := range nums {\n        xor ^= v\n    }\n    n := len(nums)\n    for i := 1; i <= n; i++ {\n        xor ^= i\n    }\n    lowbit := xor & -xor\n    num1, num2 := 0, 0\n    for _, v := range nums {\n        if v&lowbit == 0 {\n            num1 ^= v\n        } else {\n            num2 ^= v\n        }\n    }\n    for i := 1; i <= n; i++ {\n        if i&lowbit == 0 {\n            num1 ^= i\n        } else {\n            num2 ^= i\n        }\n    }\n    for _, v := range nums {\n        if v == num1 {\n            return []int{num1, num2}\n        }\n    }\n    return []int{num2, num1}\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。整个过程需要对数组 $\\textit{nums}$ 遍历 $3$ 次，以及遍历从 $1$ 到 $n$ 的每个数 $2$ 次。\n\n- 空间复杂度：$O(1)$。只需要常数的额外空间。"
}