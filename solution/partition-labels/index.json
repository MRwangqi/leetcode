{
	"titleSlug": "partition-labels",
	"slug": "hua-fen-zi-mu-qu-jian-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/partition-labels/solution/hua-fen-zi-mu-qu-jian-by-leetcode-solution/",
	"content": "#### 方法一：贪心\n\n由于同一个字母只能出现在同一个片段，显然同一个字母的第一次出现的下标位置和最后一次出现的下标位置必须出现在同一个片段。因此需要遍历字符串，得到每个字母最后一次出现的下标位置。\n\n在得到每个字母最后一次出现的下标位置之后，可以使用贪心的方法将字符串划分为尽可能多的片段，具体做法如下。\n\n- 从左到右遍历字符串，遍历的同时维护当前片段的开始下标 $\\textit{start}$ 和结束下标 $\\textit{end}$，初始时 $\\textit{start}=\\textit{end}=0$。\n\n- 对于每个访问到的字母 $c$，得到当前字母的最后一次出现的下标位置 $\\textit{end}_c$，则当前片段的结束下标一定不会小于 $\\textit{end}_c$，因此令 $\\textit{end}=\\max(\\textit{end},\\textit{end}_c)$。\n\n- 当访问到下标 $\\textit{end}$ 时，当前片段访问结束，当前片段的下标范围是 $[\\textit{start},\\textit{end}]$，长度为 $\\textit{end}-\\textit{start}+1$，将当前片段的长度添加到返回值，然后令 $\\textit{start}=\\textit{end}+1$，继续寻找下一个片段。\n\n- 重复上述过程，直到遍历完字符串。\n\n上述做法使用贪心的思想寻找每个片段可能的最小结束下标，因此可以保证每个片段的长度一定是符合要求的最短长度，如果取更短的片段，则一定会出现同一个字母出现在多个片段中的情况。由于每次取的片段都是符合要求的最短的片段，因此得到的片段数也是最多的。\n\n由于每个片段访问结束的标志是访问到下标 $\\textit{end}$，因此对于每个片段，可以保证当前片段中的每个字母都一定在当前片段中，不可能出现在其他片段，可以保证同一个字母只会出现在同一个片段。\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> partitionLabels(String s) {\n        int[] last = new int[26];\n        int length = s.length();\n        for (int i = 0; i < length; i++) {\n            last[s.charAt(i) - 'a'] = i;\n        }\n        List<Integer> partition = new ArrayList<Integer>();\n        int start = 0, end = 0;\n        for (int i = 0; i < length; i++) {\n            end = Math.max(end, last[s.charAt(i) - 'a']);\n            if (i == end) {\n                partition.add(end - start + 1);\n                start = end + 1;\n            }\n        }\n        return partition;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> partitionLabels(string s) {\n        int last[26];\n        int length = s.size();\n        for (int i = 0; i < length; i++) {\n            last[s[i] - 'a'] = i;\n        }\n        vector<int> partition;\n        int start = 0, end = 0;\n        for (int i = 0; i < length; i++) {\n            end = max(end, last[s[i] - 'a']);\n            if (i == end) {\n                partition.push_back(end - start + 1);\n                start = end + 1;\n            }\n        }\n        return partition;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar partitionLabels = function(s) {\n    const last = new Array(26);\n    const length = s.length;\n    const codePointA = 'a'.codePointAt(0);\n    for (let i = 0; i < length; i++) {\n        last[s.codePointAt(i) - codePointA] = i;\n    }\n    const partition = [];\n    let start = 0, end = 0;\n    for (let i = 0; i < length; i++) {\n        end = Math.max(end, last[s.codePointAt(i) - codePointA]);\n        if (i == end) {\n            partition.push(end - start + 1);\n            start = end + 1;\n        }\n    }\n    return partition;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last = [0] * 26\n        for i, ch in enumerate(s):\n            last[ord(ch) - ord(\"a\")] = i\n        \n        partition = list()\n        start = end = 0\n        for i, ch in enumerate(s):\n            end = max(end, last[ord(ch) - ord(\"a\")])\n            if i == end:\n                partition.append(end - start + 1)\n                start = end + 1\n        \n        return partition\n```\n\n```Golang [sol1-Golang]\nfunc partitionLabels(s string) (partition []int) {\n    lastPos := [26]int{}\n    for i, c := range s {\n        lastPos[c-'a'] = i\n    }\n    start, end := 0, 0\n    for i, c := range s {\n        if lastPos[c-'a'] > end {\n            end = lastPos[c-'a']\n        }\n        if i == end {\n            partition = append(partition, end-start+1)\n            start = end + 1\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint* partitionLabels(char* s, int* returnSize) {\n    int last[26];\n    int length = strlen(s);\n    for (int i = 0; i < length; i++) {\n        last[s[i] - 'a'] = i;\n    }\n    int* partition = malloc(sizeof(int) * length);\n    int start = 0, end = 0;\n    *returnSize = 0;\n    for (int i = 0; i < length; i++) {\n        end = fmax(end, last[s[i] - 'a']);\n        if (i == end) {\n            partition[(*returnSize)++] = end - start + 1;\n            start = end + 1;\n        }\n    }\n    return partition;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串的长度。需要遍历字符串两次，第一次遍历时记录每个字母最后一次出现的下标位置，第二次遍历时进行字符串的划分。\n\n- 空间复杂度：$O(|\\Sigma|)$，其中 $\\Sigma$ 是字符串中的字符集。这道题中，字符串只包含小写字母，因此 $|\\Sigma|=26$。"
}