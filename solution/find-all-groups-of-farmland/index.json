{
	"titleSlug": "find-all-groups-of-farmland",
	"slug": "1992-zhao-dao-suo-you-de-nong-chang-zu-c-0uyd",
	"url": "https://leetcode-cn.com/problems/find-all-groups-of-farmland/solution/1992-zhao-dao-suo-you-de-nong-chang-zu-c-0uyd/",
	"content": "### 解题思路\ndfs\n\n定义方向数组\n\n需要注意的是，在dfs函数中\n\n1、更新r2和c2最大值的语句，需要放在dfs的循环体靠前的位置，即移动语句前，因为如果移动到最后的方格，将其置为0后，会因为四周都是0进而dfs自身，最后return，而不会更新r2和c2\n\n2、在每一次dfs之后需要将r2和c2初始化为0\n\n### 代码\n\n```cpp\nclass Solution {\n    int dir[4][2]={\n        {0,1},\n        {0,-1},\n        {1,0},\n        {-1,0}\n    };\n    void dfs(vector<vector<int>>& land,int m,int n,int r1,int c1,int &rmax,int &cmax){\n        if(!land[r1][c1]){\n            return;\n        }\n        land[r1][c1] = 0;\n        rmax = max(rmax,r1);\n        cmax = max(cmax,c1);\n        for(int i=0;i<4;i++){\n            r1+=dir[i][0];\n            c1+=dir[i][1];\n            if(r1>=m||r1<0||c1>=n||c1<0||land[r1][c1]==0){\n                r1-=dir[i][0];\n                c1-=dir[i][1];\n                continue;\n            }\n            \n            dfs(land,m,n,r1,c1,rmax,cmax);\n        }\n    }\npublic:\n    vector<vector<int>> findFarmland(vector<vector<int>>& land) {\n        vector<vector<int>> ret;\n        int r = land.size();\n        int c = land[0].size();\n        int r1=0,c1=0,r2=0,c2=0;\n        for(int i=0;i<r;i++){\n            for(int j=0; j<c; j++){\n                if(land[i][j]){\n                    r1 = i;\n                    c1 = j;\n                    dfs(land,r,c,r1,c1,r2,c2);\n                    ret.push_back({r1, c1, r2, c2});\n                }\n                r2=c2=0;\n            }\n            \n        }\n        return ret;\n    }\n};\n```"
}