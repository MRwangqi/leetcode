{
	"titleSlug": "convert-binary-number-in-a-linked-list-to-integer",
	"slug": "er-jin-zhi-lian-biao-zhuan-zheng-shu-by-leetcode-s",
	"url": "https://leetcode-cn.com/problems/convert-binary-number-in-a-linked-list-to-integer/solution/er-jin-zhi-lian-biao-zhuan-zheng-shu-by-leetcode-s/",
	"content": "### 方法一：模拟\n\n由于链表中从高位到低位存放了数字的二进制表示，因此我们可以使用二进制转十进制的方法，在遍历一遍链表的同时得到数字的十进制值。\n\n以示例 1 中给出的二进制链表为例：\n\n![](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/15/graph-1.png)\n\n以下用 $(n)_2$ 表示 $n$ 是二进制整数。\n\n$$\n(101)_2 = 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0\n$$\n\n链表的第 1 个节点的值是 $1$，这个 $1$ 是二进制的最高位，在十进制分解中，$1$ 作为系数对应的 $2^2$ 的指数是 $2$，这是因为链表的长度为 $3$。我们是不是有必要一定要先知道链表的长度，才可以确定指数 $2$ 呢？答案是不必要的。\n\n+ 每读取链表的一个节点值，可以认为读到的节点值是当前二进制数的最低位；\n+ 当读到下一个节点值的时候，**需要将已经读到的结果乘以 $2$**，再将新读到的节点值当作当前二进制数的最低位；\n+ 如此进行下去，直到读到了链表的末尾。\n\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int getDecimalValue(ListNode* head) {\n        ListNode* cur = head;\n        int ans = 0;\n        while (cur != nullptr) {\n            ans = ans * 2 + cur->val;\n            cur = cur->next;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int getDecimalValue(ListNode head) {\n        ListNode curNode = head;\n        int ans = 0;\n        while (curNode != null) {\n            ans = ans * 2 + curNode.val;\n            curNode = curNode.next;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def getDecimalValue(self, head: ListNode) -> int:\n        cur = head\n        ans = 0\n        while cur:\n            ans = ans * 2 + cur.val\n            cur = cur.next\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是链表中的节点个数。\n\n- 空间复杂度：$O(1)$。"
}