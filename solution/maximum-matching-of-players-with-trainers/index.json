{
	"titleSlug": "maximum-matching-of-players-with-trainers",
	"slug": "yun-dong-yuan-he-xun-lian-shi-de-zui-da-3icgd",
	"url": "https://leetcode-cn.com/problems/maximum-matching-of-players-with-trainers/solution/yun-dong-yuan-he-xun-lian-shi-de-zui-da-3icgd/",
	"content": "#### 方法一：排序 + 双指针 + 贪心\n\n为了尽可能匹配最多数量的运动员，从贪心的角度考虑，应该按照运动员的能力值从小到大的顺序依次匹配每个运动员，且对于每个运动员，应该选择可以匹配这个运动员的能力值且能力值最小的训练师。证明如下。\n\n假设有 $m$ 个运动员，能力值分别是 $\\textit{players}_1$ 到 $\\textit{players}_m$，有 $n$ 个训练师，能力值分别是 $\\textit{trainers}_1$ 到 $\\textit{trainers}_n$，满足 $\\textit{players}_i \\le \\textit{players}_{i+1}$ 和 $\\textit{trainers}_j \\le \\textit{trainers}_{j+1}$，其中 $1 \\le i < m$，$1 \\le j < n$。\n\n假设在对前 $i-1$ 个运动员匹配训练师之后，可以满足第 $i$ 个运动员的能力值的最小的训练师是第 $j$ 个训练师，即 $\\textit{trainers}_j$ 是剩下的训练师中满足 $\\textit{players}_i \\le \\textit{trainers}_j$ 的最小值，最优解是将第 $j$ 个训练师匹配第 $i$ 个运动员。如果不这样匹配，考虑如下两种情形：\n\n- 如果 $i<m$ 且 $\\textit{players}_{i+1} \\le \\textit{trainers}_j$ 也成立，则如果将第 $j$ 个训练师匹配第 $i+1$ 个运动员，且还有剩余的训练师，则可以将第 $j+1$ 个训练师匹配第 $i$ 个运动员，匹配的结果不会让更多的运动员被匹配；\n\n- 如果 $j<n$，则如果将第 $j+1$ 个训练师匹配第 $i$ 个运动员，当 $\\textit{players}_{i+1} \\le \\textit{trainers}_j$ 时，可以将第 $j$ 个训练师匹配第 $i+1$ 个运动员，匹配的结果不会让更多的运动员被匹配；当 $\\textit{players}_{i+1}>\\textit{trainers}_j$ 时，第 $j$ 个训练师无法匹配任何运动员，因此剩下的可用的训练师少了一个，因此匹配的结果不会让更多的运动员被匹配，甚至可能因为少了一个可用的训练师而导致更少的运动员被匹配。\n\n基于上述分析，可以使用贪心的方法尽可能满足最多数量的运动员。\n\n首先对数组 $\\textit{players}$ 和 $\\textit{trainers}$ 排序，然后从小到大遍历 $\\textit{players}$ 中的每个元素，对于每个元素找到能满足该元素的 $\\textit{trainers}$ 中的最小的元素。具体而言，令 $i$ 是 $\\textit{players}$ 的下标，$j$ 是 $\\textit{trainers}$ 的下标，初始时 $i$ 和 $j$ 都为 $0$，进行如下操作。\n\n对于每个元素 $\\textit{players}[i]$，找到**未被使用的**最小的 $j$ 使得 $\\textit{players}[i] \\le \\textit{trainers}[j]$，则 $\\textit{trainers}[j]$ 可以满足 $\\textit{players}[i]$。由于 $\\textit{players}$ 和 $\\textit{trainers}$ 已经排好序，因此整个过程只需要对数组 $\\textit{players}$ 和 $\\textit{trainers}$ 各遍历一次。当两个数组之一遍历结束时，说明所有的运动员都匹配到了训练师，或者所有的训练师都已经匹配或尝试匹配运动员（可能有些训练师无法匹配任何运动员），此时匹配到训练师的运动员数量即为最大匹配书。\n\n```Java [sol1-Java]\nclass Solution {\n    public int matchPlayersAndTrainers(int[] players, int[] trainers) {\n        Arrays.sort(players);\n        Arrays.sort(trainers);\n        int m = players.length, n = trainers.length;\n        int count = 0;\n        for (int i = 0, j = 0; i < m && j < n; i++, j++) {\n            while (j < n && players[i] > trainers[j]) {\n                j++;\n            }\n            if (j < n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MatchPlayersAndTrainers(int[] players, int[] trainers) {\n        Array.Sort(players);\n        Array.Sort(trainers);\n        int m = players.Length, n = trainers.Length;\n        int count = 0;\n        for (int i = 0, j = 0; i < m && j < n; i++, j++) {\n            while (j < n && players[i] > trainers[j]) {\n                j++;\n            }\n            if (j < n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar matchPlayersAndTrainers = function(players, trainers) {\n    players.sort((a, b) => a - b);\n    trainers.sort((a, b) => a - b);\n    const m = players.length, n = trainers.length;\n    let count = 0;\n    for (let i = 0, j = 0; i < m && j < n; i++, j++) {\n        while (j < n && players[i] > trainers[j]) {\n            j++;\n        }\n        if (j < n) {\n            count++;\n        }\n    }\n    return count;\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int matchPlayersAndTrainers(vector<int>& players, vector<int>& trainers) {\n        sort(players.begin(), players.end());\n        sort(trainers.begin(), trainers.end());\n        int m = players.size(), n = trainers.size();\n        int count = 0;\n        for (int i = 0, j = 0; i < m && j < n; i++, j++) {\n            while (j < n && players[i] > trainers[j]) {\n                j++;\n            }\n            if (j < n) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n```\n\n```Go [sol1-Golang]\nfunc matchPlayersAndTrainers(players []int, trainers []int) (ans int) {\n    sort.Ints(players)\n    sort.Ints(trainers)\n    m, n := len(players), len(trainers)\n    for i, j := 0, 0; i < m && j < n; i++ {\n        for j < n && players[i] > trainers[j] {\n            j++\n        }\n        if j < n {\n            ans++\n            j++\n        }\n    }\n    return\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def matchPlayersAndTrainers(self, players: List[int], trainers: List[int]) -> int:\n        players.sort()\n        trainers.sort()\n        m, n = len(players), len(trainers)\n        i = j = count = 0\n\n        while i < m and j < n:\n            while j < n and players[i] > trainers[j]:\n                j += 1\n            if j < n:\n                count += 1\n            i += 1\n            j += 1\n        \n        return count\n```\n\n```C [sol1-C]\nint cmp(int* a, int* b) {\n    return *a - *b;\n}\n\nint matchPlayersAndTrainers(int* players, int playersSize, int* trainers, int trainersSize) {\n    qsort(players, playersSize, sizeof(int), cmp);\n    qsort(trainers, trainersSize, sizeof(int), cmp);\n    int m = playersSize, n = trainersSize;\n    int count = 0;\n    for (int i = 0, j = 0; i < m && j < n; i++, j++) {\n        while (j < n && players[i] > trainers[j]) {\n            j++;\n        }\n        if (j < n) {\n            count++;\n        }\n    }\n    return count;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\log m + n \\log n)$，其中 $m$ 和 $n$ 分别是数组 $\\textit{players}$ 和 $\\textit{trainers}$ 的长度。对两个数组排序的时间复杂度是 $O(m \\log m + n \\log n)$，遍历数组的时间复杂度是 $O(m+n)$，因此总时间复杂度是 $O(m \\log m + n \\log n)$。\n\n- 空间复杂度：$O(\\log m + \\log n)$，其中 $m$ 和 $n$ 分别是数组 $\\textit{players}$ 和 $\\textit{trainers}$ 的长度。空间复杂度主要是排序的额外空间开销。"
}