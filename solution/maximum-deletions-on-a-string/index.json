{
	"titleSlug": "maximum-deletions-on-a-string",
	"slug": "xian-xing-dppythonjavacgo-by-endlesschen-gpx9",
	"url": "https://leetcode-cn.com/problems/maximum-deletions-on-a-string/solution/xian-xing-dppythonjavacgo-by-endlesschen-gpx9/",
	"content": "[视频讲解](https://www.bilibili.com/video/BV1kd4y1q7fC) 已出炉，欢迎点赞三连，在评论区分享你对这场周赛的看法~\r\n\r\n---\r\n\r\n定义 $f[i]$ 表示删除后缀 $s[i:]$ 所需的最大操作数。\r\n\r\n根据题意，我们可以枚举删除字母的长度 $j$，如果 $s[i:i+j] = s[i+j:i+2j]$，那么可以删除，此时有转移 $f[i] = f[i+j] + 1$。如果不存在两个子串相等的情况，则 $f[i] = 1$。$f[i]$ 取所有情况的最大值。\r\n\r\n倒着计算 $f[i]$，答案为 $f[0]$。\r\n\r\n最后，我们需要快速判断两个子串是否相同。这可以用 $O(n^2)$ 的 DP 预处理出来，具体见代码。\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def deleteString(self, s: str) -> int:\r\n        n = len(s)\r\n        if len(set(s)) == 1: return n  # 特判全部相同的情况\r\n        lcp = [[0] * (n + 1) for _ in range(n + 1)]  # lcp[i][j] 表示 s[i:] 和 s[j:] 的最长公共前缀\r\n        for i in range(n - 1, -1, -1):\r\n            for j in range(n - 1, i, -1):\r\n                if s[i] == s[j]:\r\n                    lcp[i][j] = lcp[i + 1][j + 1] + 1\r\n        f = [0] * n\r\n        for i in range(n - 1, -1, -1):\r\n            for j in range(1, (n - i) // 2 + 1):\r\n                if lcp[i][i + j] >= j:  # 说明 s[i:i+j] == s[i+j:i+2*j]\r\n                    f[i] = max(f[i], f[i + j])\r\n            f[i] += 1\r\n        return f[0]\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    public int deleteString(String S) {\r\n        var s = S.toCharArray();\r\n        var n = s.length;\r\n        if (allEqual(s)) return n; // 特判全部相同的情况\r\n        var lcp = new int[n + 1][n + 1]; // lcp[i][j] 表示 s[i:] 和 s[j:] 的最长公共前缀\r\n        for (var i = n - 1; i >= 0; --i)\r\n            for (var j = n - 1; j > i; --j)\r\n                if (s[i] == s[j])\r\n                    lcp[i][j] = lcp[i + 1][j + 1] + 1;\r\n        var f = new int[n];\r\n        for (var i = n - 1; i >= 0; --i) {\r\n            for (var j = 1; i + j * 2 <= n; ++j)\r\n                if (lcp[i][i + j] >= j) // 说明 s[i:i+j] == s[i+j:i+j*2]\r\n                    f[i] = Math.max(f[i], f[i + j]);\r\n            ++f[i];\r\n        }\r\n        return f[0];\r\n    }\r\n\r\n    private boolean allEqual(char[] s) {\r\n        for (var i = 1; i < s.length; i++)\r\n            if (s[i] != s[0])\r\n                return false;\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n```cpp [sol1-C++]\r\nclass Solution {\r\npublic:\r\n    int deleteString(string s) {\r\n        int n = s.length();\r\n        if (equal(s.begin() + 1, s.end(), s.begin())) // 特判全部相同的情况\r\n            return n;\r\n        int lcp[n + 1][n + 1]; // lcp[i][j] 表示 s[i:] 和 s[j:] 的最长公共前缀\r\n        memset(lcp, 0, sizeof(lcp));\r\n        for (int i = n - 1; i >= 0; --i)\r\n            for (int j = n - 1; j > i; --j)\r\n                if (s[i] == s[j])\r\n                    lcp[i][j] = lcp[i + 1][j + 1] + 1;\r\n        int f[n];\r\n        memset(f, 0, sizeof(f));\r\n        for (int i = n - 1; i >= 0; --i) {\r\n            for (int j = 1; i + j * 2 <= n; ++j)\r\n                if (lcp[i][i + j] >= j) // 说明 s[i:i+j] == s[i+j:i+j*2]\r\n                    f[i] = max(f[i], f[i + j]);\r\n            ++f[i];\r\n        }\r\n        return f[0];\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc deleteString(s string) int {\r\n\tn := len(s)\r\n\tif allEqual(s) { // 特判全部相同的情况\r\n\t\treturn n\r\n\t}\r\n\tlcp := make([][]int, n+1) // lcp[i][j] 表示 s[i:] 和 s[j:] 的最长公共前缀\r\n\tlcp[n] = make([]int, n+1)\r\n\tfor i := n - 1; i >= 0; i-- {\r\n\t\tlcp[i] = make([]int, n+1)\r\n\t\tfor j := n - 1; j > i; j-- {\r\n\t\t\tif s[i] == s[j] {\r\n\t\t\t\tlcp[i][j] = lcp[i+1][j+1] + 1\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tf := make([]int, n)\r\n\tfor i := n - 1; i >= 0; i-- {\r\n\t\tfor j := 1; i+j*2 <= n; j++ {\r\n\t\t\tif lcp[i][i+j] >= j { // 说明 s[i:i+j] == s[i+j:i+j*2]\r\n\t\t\t\tf[i] = max(f[i], f[i+j])\r\n\t\t\t}\r\n\t\t}\r\n\t\tf[i]++\r\n\t}\r\n\treturn f[0]\r\n}\r\n\r\nfunc allEqual(s string) bool {\r\n\tfor i := 1; i < len(s); i++ {\r\n\t\tif s[i] != s[0] {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\treturn true\r\n}\r\n\r\nfunc max(a, b int) int { if b > a { return b }; return a }\r\n```\r\n\r\n#### 复杂度分析\r\n\r\n- 时间复杂度：$O(n^2)$，其中 $n$ 为 $s$ 的长度。\r\n- 空间复杂度：$O(n^2)$。\r\n"
}