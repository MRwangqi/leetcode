{
	"titleSlug": "contains-duplicate",
	"slug": "cun-zai-zhong-fu-yuan-su-by-leetcode-sol-iedd",
	"url": "https://leetcode-cn.com/problems/contains-duplicate/solution/cun-zai-zhong-fu-yuan-su-by-leetcode-sol-iedd/",
	"content": "#### 方法一：排序\n\n在对数字从小到大排序之后，数组的重复元素一定出现在相邻位置中。因此，我们可以扫描已排序的数组，每次判断相邻的两个元素是否相等，如果相等则说明存在重复的元素。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        for (int i = 0; i < n - 1; i++) {\n            if (nums[i] == nums[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean containsDuplicate(int[] nums) {\n        Arrays.sort(nums);\n        int n = nums.length;\n        for (int i = 0; i < n - 1; i++) {\n            if (nums[i] == nums[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n```Golang [sol1-Golang]\nfunc containsDuplicate(nums []int) bool {\n    sort.Ints(nums)\n    for i := 1; i < len(nums); i++ {\n        if nums[i] == nums[i-1] {\n            return true\n        }\n    }\n    return false\n}\n```\n\n```C [sol1-C]\nint cmp(const void* _a, const void* _b) {\n    int a = *(int*)_a, b = *(int*)_b;\n    return a - b;\n}\n\nbool containsDuplicate(int* nums, int numsSize) {\n    qsort(nums, numsSize, sizeof(int), cmp);\n    for (int i = 0; i < numsSize - 1; i++) {\n        if (nums[i] == nums[i + 1]) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar containsDuplicate = function(nums) {\n    nums.sort((a, b) => a - b);\n    const n = nums.length;\n    for (let i = 0; i < n - 1; i++) {\n        if (nums[i] === nums[i + 1]) {\n            return true;\n        }\n    }\n    return false;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\log N)$，其中 $N$ 为数组的长度。需要对数组进行排序。\n\n- 空间复杂度：$O(\\log N)$，其中 $N$ 为数组的长度。注意我们在这里应当考虑递归调用栈的深度。\n\n#### 方法二：哈希表\n\n对于数组中每个元素，我们将它插入到哈希表中。如果插入一个元素时发现该元素已经存在于哈希表中，则说明存在重复的元素。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        unordered_set<int> s;\n        for (int x: nums) {\n            if (s.find(x) != s.end()) {\n                return true;\n            }\n            s.insert(x);\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean containsDuplicate(int[] nums) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (int x : nums) {\n            if (!set.add(x)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n```Golang [sol2-Golang]\nfunc containsDuplicate(nums []int) bool {\n    set := map[int]struct{}{}\n    for _, v := range nums {\n        if _, has := set[v]; has {\n            return true\n        }\n        set[v] = struct{}{}\n    }\n    return false\n}\n```\n\n```C [sol2-C]\nstruct hashTable {\n    int key;\n    UT_hash_handle hh;\n};\n\nbool containsDuplicate(int* nums, int numsSize) {\n    struct hashTable* set = NULL;\n    for (int i = 0; i < numsSize; i++) {\n        struct hashTable* tmp;\n        HASH_FIND_INT(set, nums + i, tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct hashTable));\n            tmp->key = nums[i];\n            HASH_ADD_INT(set, key, tmp);\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar containsDuplicate = function(nums) {\n    const set = new Set();\n    for (const x of nums) {\n        if (set.has(x)) {\n            return true;\n        }\n        set.add(x);\n    }\n    return false;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为数组的长度。\n\n- 空间复杂度：$O(N)$，其中 $N$ 为数组的长度。"
}