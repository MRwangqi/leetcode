{
	"titleSlug": "find-mode-in-binary-search-tree",
	"slug": "er-cha-sou-suo-shu-zhong-de-zhong-shu-by-leetcode-",
	"url": "https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/solution/er-cha-sou-suo-shu-zhong-de-zhong-shu-by-leetcode-/",
	"content": "#### 方法一：中序遍历\n\n**思路与算法**\n\n首先我们一定能想到一个最朴素的做法：因为这棵树的中序遍历是一个有序的序列，所以我们可以先获得这棵树的中序遍历，然后从扫描这个中序遍历序列，然后用一个哈希表来统计每个数字出现的个数，这样就可以找到出现次数最多的数字。但是这样做的空间复杂度显然不是 $O(1)$ 的，原因是哈希表和保存中序遍历序列的空间代价都是 $O(n)$。\n\n**首先，我们考虑在寻找出现次数最多的数时，不使用哈希表。** 这个优化是基于二叉搜索树中序遍历的性质：一棵二叉搜索树的中序遍历序列是一个非递减的有序序列。例如：\n\n```\n      1\n    /   \\\n   0     2\n  / \\    /\n-1   0  2\n```\n\n这样一颗二叉搜索树的中序遍历序列是 $\\{ -1, 0, 0, 1, 2, 2 \\}$。我们可以发现重复出现的数字一定是一个连续出现的，例如这里的 $0$ 和 $2$，它们都重复出现了，并且所有的 $0$ 都集中在一个连续的段内，所有的 $2$ 也集中在一个连续的段内。我们可以顺序扫描中序遍历序列，用 $\\textit{base}$ 记录当前的数字，用 $\\textit{count}$ 记录当前数字重复的次数，用 $\\textit{maxCount}$ 来维护已经扫描过的数当中出现最多的那个数字的出现次数，用 $\\textit{answer}$ 数组记录出现的众数。每次扫描到一个新的元素：\n\n+ 首先更新 $\\textit{base}$ 和 $\\textit{count}$:\n    + 如果该元素和 $\\textit{base}$ 相等，那么 $\\textit{count}$ 自增 $1$；\n    + 否则将 $\\textit{base}$ 更新为当前数字，$\\textit{count}$ 复位为 $1$。\n+ 然后更新 $\\textit{maxCount}$：\n    + 如果 $\\textit{count} = maxCount$，那么说明当前的这个数字（$\\textit{base}$）出现的次数等于当前众数出现的次数，将 $\\textit{base}$ 加入 $\\textit{answer}$ 数组；\n    + 如果 $\\textit{count} > maxCount$，那么说明当前的这个数字（$\\textit{base}$）出现的次数大于当前众数出现的次数，因此，我们需要将 $\\textit{maxCount}$ 更新为 $\\textit{count}$，清空 $\\textit{answer}$ 数组后将 $\\textit{base}$ 加入 $\\textit{answer}$ 数组。\n\n我们可以把这个过程写成一个 $\\text{update}$ 函数。这样我们在寻找出现次数最多的数字的时候就可以省去一个哈希表带来的空间消耗。\n\n**然后，我们考虑不存储这个中序遍历序列。** 如果我们在递归进行中序遍历的过程中，访问当了某个点的时候直接使用上面的 $\\text{update}$ 函数，就可以省去中序遍历序列的空间，代码如下。\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    vector<int> answer;\n    int base, count, maxCount;\n\n    void update(int x) {\n        if (x == base) {\n            ++count;\n        } else {\n            count = 1;\n            base = x;\n        }\n        if (count == maxCount) {\n            answer.push_back(base);\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            answer = vector<int> {base};\n        }\n    }\n\n    void dfs(TreeNode* o) {\n        if (!o) {\n            return;\n        }\n        dfs(o->left);\n        update(o->val);\n        dfs(o->right);\n    }\n\n    vector<int> findMode(TreeNode* root) {\n        dfs(root);\n        return answer;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    List<Integer> answer = new ArrayList<Integer>();\n    int base, count, maxCount;\n\n    public int[] findMode(TreeNode root) {\n        dfs(root);\n        int[] mode = new int[answer.size()];\n        for (int i = 0; i < answer.size(); ++i) {\n            mode[i] = answer.get(i);\n        }\n        return mode;\n    }\n\n    public void dfs(TreeNode o) {\n        if (o == null) {\n            return;\n        }\n        dfs(o.left);\n        update(o.val);\n        dfs(o.right);\n    }\n\n    public void update(int x) {\n        if (x == base) {\n            ++count;\n        } else {\n            count = 1;\n            base = x;\n        }\n        if (count == maxCount) {\n            answer.add(base);\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            answer.clear();\n            answer.add(base);\n        }\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findMode = function(root) {\n    let base = 0, count = 0, maxCount = 0;\n    let answer = [];\n\n    const update = (x) => {\n        if (x === base) {\n            ++count;\n        } else {\n            count = 1;\n            base = x;\n        }\n        if (count === maxCount) {\n            answer.push(base);\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            answer = [base];\n        }\n    }\n\n    const dfs = (o) => {\n        if (!o) {\n            return;\n        }\n        dfs(o.left);\n        update(o.val);\n        dfs(o.right);\n    }\n\n    dfs(root);\n    return answer;\n};\n```\n\n```Golang [sol1-Golang]\nfunc findMode(root *TreeNode) (answer []int) {\n    var base, count, maxCount int\n\n    update := func(x int) {\n        if x == base {\n            count++\n        } else {\n            base, count = x, 1\n        }\n        if count == maxCount {\n            answer = append(answer, base)\n        } else if count > maxCount {\n            maxCount = count\n            answer = []int{base}\n        }\n    }\n\n    var dfs func(*TreeNode)\n    dfs = func(node *TreeNode) {\n        if node == nil {\n            return\n        }\n        dfs(node.Left)\n        update(node.Val)\n        dfs(node.Right)\n    }\n    dfs(root)\n    return\n}\n```\n\n```C [sol1-C]\nint* answer;\nint answerSize;\nint base, count, maxCount;\n\nvoid update(int x) {\n    if (x == base) {\n        ++count;\n    } else {\n        count = 1;\n        base = x;\n    }\n    if (count == maxCount) {\n        answer[answerSize++] = base;\n    }\n    if (count > maxCount) {\n        maxCount = count;\n        answerSize = 0;\n        answer[answerSize++] = base;\n    }\n}\n\nvoid dfs(struct TreeNode* o) {\n    if (!o) {\n        return;\n    }\n    dfs(o->left);\n    update(o->val);\n    dfs(o->right);\n}\n\nint* findMode(struct TreeNode* root, int* returnSize) {\n    base = count = maxCount = 0;\n    answer = malloc(sizeof(int) * 4001);\n    answerSize = 0;\n    dfs(root);\n    *returnSize = answerSize;\n    return answer;\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$。即遍历这棵树的复杂度。\n+ 空间复杂度：$O(n)$。即递归的栈空间的空间代价。\n\n#### 方法二：Morris 中序遍历\n\n**思路与算法**\n\n**接着上面的思路，我们用 Morris 中序遍历的方法把中序遍历的空间复杂度优化到 $O(1)$。** 我们在中序遍历的时候，一定先遍历左子树，然后遍历当前节点，最后遍历右子树。在常规方法中，我们用递归回溯或者是栈来保证遍历完左子树可以再回到当前节点，但这需要我们付出额外的空间代价。我们需要用一种巧妙地方法可以在 $O(1)$ 的空间下，遍历完左子树可以再回到当前节点。我们希望当前的节点在遍历完当前点的前驱之后被遍历，我们可以考虑修改它的前驱节点的 $\\textit{right}$ 指针。当前节点的前驱节点的 $\\textit{right}$ 指针可能本来就指向当前节点（前驱是当前节点的父节点），也可能是当前节点左子树最右下的节点。如果是后者，我们希望遍历完这个前驱节点之后再回到当前节点，可以将它的 $\\textit{right}$ 指针指向当前节点。\n\nMorris 中序遍历的一个重要步骤就是寻找当前节点的前驱节点，并且 Morris 中序遍历寻找下一个点始终是通过转移到 $\\textit{right}$ 指针指向的位置来完成的。\n\n+ 如果当前节点没有左子树，则遍历这个点，然后跳转到当前节点的右子树。\n+ 如果当前节点有左子树，那么它的前驱节点一定在左子树上，我们可以在左子树上一直向右行走，找到当前点的前驱节点。\n    + 如果前驱节点没有右子树，就将前驱节点的 $\\textit{right}$ 指针指向当前节点。这一步是为了在遍历完前驱节点后能找到前驱节点的后继，也就是当前节点。\n    + 如果前驱节点的右子树为当前节点，说明前驱节点已经被遍历过并被修改了 $\\textit{right}$ 指针，这个时候我们重新将前驱的右孩子设置为空，遍历当前的点，然后跳转到当前节点的右子树。\n\n因此我们可以得到这样的代码框架：\n\n```cpp [demo-C++]\nTreeNode *cur = root, *pre = nullptr;\nwhile (cur) {\n    if (!cur->left) {\n        // ...遍历 cur\n        cur = cur->right;\n        continue;\n    }\n    pre = cur->left;\n    while (pre->right && pre->right != cur) {\n        pre = pre->right;\n    }\n    if (!pre->right) {\n        pre->right = cur;\n        cur = cur->left;\n    } else {\n        pre->right = nullptr;\n        // ...遍历 cur\n        cur = cur->right;\n    }\n}\n```\n\n最后我们将 `...遍历 cur` 替换成之前的 $\\text{update}$ 函数即可。\n\n\n**代码**\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    int base, count, maxCount;\n    vector<int> answer;\n\n    void update(int x) {\n        if (x == base) {\n            ++count;\n        } else {\n            count = 1;\n            base = x;\n        }\n        if (count == maxCount) {\n            answer.push_back(base);\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            answer = vector<int> {base};\n        }\n    }\n\n    vector<int> findMode(TreeNode* root) {\n        TreeNode *cur = root, *pre = nullptr;\n        while (cur) {\n            if (!cur->left) {\n                update(cur->val);\n                cur = cur->right;\n                continue;\n            }\n            pre = cur->left;\n            while (pre->right && pre->right != cur) {\n                pre = pre->right;\n            }\n            if (!pre->right) {\n                pre->right = cur;\n                cur = cur->left;\n            } else {\n                pre->right = nullptr;\n                update(cur->val);\n                cur = cur->right;\n            }\n        }\n        return answer;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    int base, count, maxCount;\n    List<Integer> answer = new ArrayList<Integer>();\n\n    public int[] findMode(TreeNode root) {\n        TreeNode cur = root, pre = null;\n        while (cur != null) {\n            if (cur.left == null) {\n                update(cur.val);\n                cur = cur.right;\n                continue;\n            }\n            pre = cur.left;\n            while (pre.right != null && pre.right != cur) {\n                pre = pre.right;\n            }\n            if (pre.right == null) {\n                pre.right = cur;\n                cur = cur.left;\n            } else {\n                pre.right = null;\n                update(cur.val);\n                cur = cur.right;\n            }\n        }\n        int[] mode = new int[answer.size()];\n        for (int i = 0; i < answer.size(); ++i) {\n            mode[i] = answer.get(i);\n        }\n        return mode;\n    }\n\n    public void update(int x) {\n        if (x == base) {\n            ++count;\n        } else {\n            count = 1;\n            base = x;\n        }\n        if (count == maxCount) {\n            answer.add(base);\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            answer.clear();\n            answer.add(base);\n        }\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findMode = function(root) {\n    let base = 0, count = 0, maxCount = 0;\n    let answer = [];\n\n    const update = (x) => {\n        if (x === base) {\n            ++count;\n        } else {\n            count = 1;\n            base = x;\n        }\n        if (count === maxCount) {\n            answer.push(base);\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            answer = [base];\n        }\n    }\n\n    let cur = root, pre = null;\n    while (cur !== null) {\n        if (cur.left === null) {\n            update(cur.val);\n            cur = cur.right;\n            continue;\n        }\n        pre = cur.left;\n        while (pre.right !== null && pre.right !== cur) {\n            pre = pre.right;\n        }\n        if (pre.right === null) {\n            pre.right = cur;\n            cur = cur.left;\n        } else {\n            pre.right = null;\n            update(cur.val);\n            cur = cur.right;\n        }\n    }\n    return answer;\n};\n```\n\n```Golang [sol2-Golang]\nfunc findMode(root *TreeNode) (answer []int) {\n    var base, count, maxCount int\n    update := func(x int) {\n        if x == base {\n            count++\n        } else {\n            base, count = x, 1\n        }\n        if count == maxCount {\n            answer = append(answer, base)\n        } else if count > maxCount {\n            maxCount = count\n            answer = []int{base}\n        }\n    }\n    cur := root\n    for cur != nil {\n        if cur.Left == nil {\n            update(cur.Val)\n            cur = cur.Right\n            continue\n        }\n        pre := cur.Left\n        for pre.Right != nil && pre.Right != cur {\n            pre = pre.Right\n        }\n        if pre.Right == nil {\n            pre.Right = cur\n            cur = cur.Left\n        } else {\n            pre.Right = nil\n            update(cur.Val)\n            cur = cur.Right\n        }\n    }\n    return\n}\n```\n\n```C [sol2-C]\nint base, count, maxCount;\nint *answer, answerSize;\n\nvoid update(int x) {\n    if (x == base) {\n        ++count;\n    } else {\n        count = 1;\n        base = x;\n    }\n    if (count == maxCount) {\n        answer[answerSize++] = base;\n    }\n    if (count > maxCount) {\n        maxCount = count;\n        answerSize = 0;\n        answer[answerSize++] = base;\n    }\n}\n\nint* findMode(struct TreeNode* root, int* returnSize) {\n    struct TreeNode *cur = root, *pre = NULL;\n    answer = malloc(sizeof(int) * 5001);\n    answerSize = count = maxCount = 0;\n    while (cur) {\n        if (!cur->left) {\n            update(cur->val);\n            cur = cur->right;\n            continue;\n        }\n        pre = cur->left;\n        while (pre->right && pre->right != cur) {\n            pre = pre->right;\n        }\n        if (!pre->right) {\n            pre->right = cur;\n            cur = cur->left;\n        } else {\n            pre->right = NULL;\n            update(cur->val);\n            cur = cur->right;\n        }\n    }\n    *returnSize = answerSize;\n    return answer;\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$。每个点被访问的次数不会超过两次，故这里的时间复杂度是 $O(n)$。\n+ 空间复杂度：$O(1)$。使用临时空间的大小和输入规模无关。"
}