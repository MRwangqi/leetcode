{
	"titleSlug": "xor-queries-of-a-subarray",
	"slug": "zi-shu-zu-yi-huo-cha-xun-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/xor-queries-of-a-subarray/solution/zi-shu-zu-yi-huo-cha-xun-by-leetcode-solution/",
	"content": "#### 方法一：前缀异或\n\n朴素的想法是，对每个查询，计算数组中的对应下标范围内的元素的异或结果。每个查询的计算时间取决于查询对应的下标范围的长度。如果数组 $\\textit{arr}$ 的长度为 $n$，数组 $\\textit{queries}$ 的长度为 $m$（即有 $m$ 个查询），则最坏情况下每个查询都需要 $O(n)$ 的时间计算结果，总时间复杂度是 $O(nm)$，会超出时间限制，因此必须优化。\n\n由于有 $m$ 个查询，对于每个查询都要计算结果，因此应该优化每个查询的计算时间。理想情况下，每个查询的计算时间应该为 $O(1)$。为了将每个查询的计算时间从 $O(n)$ 优化到 $O(1)$，需要计算数组的前缀异或。\n\n定义长度为 $n+1$ 的数组 $\\textit{xors}$。令 $\\textit{xors}[0]=0$，对于 $0 \\le i<n$，$\\textit{xors}[i+1]=\\textit{xors}[i] \\oplus \\textit{arr}[i]$，其中 $\\oplus$ 是异或运算符。当 $1 \\le i \\le n$ 时，$\\textit{xors}[i]$ 为从 $\\textit{arr}[0]$ 到 $\\textit{arr}[i-1]$ 的元素的异或运算结果：\n\n$$\n\\textit{xors}[i]=\\textit{arr}[0] \\oplus \\ldots \\oplus \\textit{arr}[i-1]\n$$\n\n对于查询 $[\\textit{left},\\textit{right}](\\textit{left} \\le \\textit{right})$，用 $Q(\\textit{left},\\textit{right})$ 表示该查询的结果。\n\n- 当 $\\textit{left}=0$ 时，$Q(\\textit{left},\\textit{right})=\\textit{xors}[\\textit{right}+1]$。\n\n- 当 $\\textit{left}>0$ 时，$Q(\\textit{left},\\textit{right})$ 的计算如下：\n\n$$\n\\begin{aligned}\n& \\quad ~ Q(\\textit{left},\\textit{right}) \\\\\n&= \\textit{arr}[\\textit{left}] \\oplus \\ldots \\oplus \\textit{arr}[\\textit{right}] \\\\\n&= (\\textit{arr}[0] \\oplus \\ldots \\oplus \\textit{arr}[\\textit{left}-1]) \\oplus (\\textit{arr}[0] \\oplus \\ldots \\oplus \\textit{arr}[\\textit{left}-1]) \\oplus (\\textit{arr}[\\textit{left}] \\oplus \\ldots \\oplus \\textit{arr}[\\textit{right}]) \\\\\n&= (\\textit{arr}[0] \\oplus \\ldots \\oplus \\textit{arr}[\\textit{left}-1]) \\oplus (\\textit{arr}[0] \\oplus \\ldots \\oplus \\textit{arr}[\\textit{right}]) \\\\\n&= \\textit{xors}[\\textit{left}] \\oplus \\textit{xors}[\\textit{right}+1]\n\\end{aligned}\n$$\n\n上述计算用到了异或运算的结合律，以及异或运算的性质 $x \\oplus x=0$。\n\n当 $\\textit{left}=0$ 时，$\\textit{xors}[\\textit{left}]=0$，因此 $Q(\\textit{left},\\textit{right})=\\textit{xors}[\\textit{left}] \\oplus \\textit{xors}[\\textit{right}+1]$ 也成立。\n\n因此对任意 $0 \\le \\textit{left} \\le \\textit{right}<n$，都有 $Q(\\textit{left},\\textit{right})=\\textit{xors}[\\textit{left}] \\oplus \\textit{xors}[\\textit{right}+1]$，即可在 $O(1)$ 的时间内完成一个查询的计算。\n\n根据上述分析，这道题可以分两步求解。\n\n1. 计算前缀异或数组 $\\textit{xors}$；\n\n2. 计算每个查询的结果，第 $i$ 个查询的结果为 $\\textit{xors}[\\textit{queries}[i][0]] \\oplus \\textit{xors}[\\textit{queries}[i][1]+1]$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] xorQueries(int[] arr, int[][] queries) {\n        int n = arr.length;\n        int[] xors = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            xors[i + 1] = xors[i] ^ arr[i];\n        }\n        int m = queries.length;\n        int[] ans = new int[m];\n        for (int i = 0; i < m; i++) {\n            ans[i] = xors[queries[i][0]] ^ xors[queries[i][1] + 1];\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] XorQueries(int[] arr, int[][] queries) {\n        int n = arr.Length;\n        int[] xors = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            xors[i + 1] = xors[i] ^ arr[i];\n        }\n        int m = queries.Length;\n        int[] ans = new int[m];\n        for (int i = 0; i < m; i++) {\n            ans[i] = xors[queries[i][0]] ^ xors[queries[i][1] + 1];\n        }\n        return ans;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar xorQueries = function(arr, queries) {\n    const n = arr.length;\n    const xors = new Array(n + 1).fill(0);\n    for (let i = 0; i < n; i++) {\n        xors[i + 1] = xors[i] ^ arr[i];\n    }\n    const m = queries.length;\n    const ans = new Array(m).fill(0);\n    for (let i = 0; i < m; i++) {\n        ans[i] = xors[queries[i][0]] ^ xors[queries[i][1] + 1];\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc xorQueries(arr []int, queries [][]int) []int {\n    xors := make([]int, len(arr)+1)\n    for i, v := range arr {\n        xors[i+1] = xors[i] ^ v\n    }\n    ans := make([]int, len(queries))\n    for i, q := range queries {\n        ans[i] = xors[q[0]] ^ xors[q[1]+1]\n    }\n    return ans\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> xorQueries(vector<int>& arr, vector<vector<int>>& queries) {\n        int n = arr.size();\n        vector<int> xors(n + 1);\n        for (int i = 0; i < n; i++) {\n            xors[i + 1] = xors[i] ^ arr[i];\n        }\n        int m = queries.size();\n        vector<int> ans(m);\n        for (int i = 0; i < m; i++) {\n            ans[i] = xors[queries[i][0]] ^ xors[queries[i][1] + 1];\n        }\n        return ans;\n    }\n};\n```\n\n```C [sol1-C]\nint* xorQueries(int* arr, int arrSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    int n = arrSize;\n    int xors[n + 1];\n    xors[0] = 0;\n    for (int i = 0; i < n; i++) {\n        xors[i + 1] = xors[i] ^ arr[i];\n    }\n    int m = queriesSize;\n    int* ans = malloc(sizeof(int) * m);\n    *returnSize = m;\n    for (int i = 0; i < m; i++) {\n        ans[i] = xors[queries[i][0]] ^ xors[queries[i][1] + 1];\n    }\n    return ans;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]:\n        xors = [0]\n        for num in arr:\n            xors.append(xors[-1] ^ num)\n        \n        ans = list()\n        for left, right in queries:\n            ans.append(xors[left] ^ xors[right + 1])\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度，$m$ 是数组 $\\textit{queries}$ 的长度。需要遍历数组 $\\textit{arr}$ 一次，计算前缀异或数组的每个元素值，然后对每个查询分别使用 $O(1)$ 的时间计算查询结果。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。需要创建长度为 $n+1$ 的前缀异或数组，注意返回值不计入空间复杂度。"
}