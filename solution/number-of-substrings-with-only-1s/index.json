{
	"titleSlug": "number-of-substrings-with-only-1s",
	"slug": "jin-han-1-de-zi-chuan-shu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/number-of-substrings-with-only-1s/solution/jin-han-1-de-zi-chuan-shu-by-leetcode-solution/",
	"content": "#### 方法一：遍历字符串寻找最长子串\n\n如果一个所有字符都为 `1` 的字符串的长度为 `k`，则该字符串包含的所有字符都为 `1` 的子字符串（包括该字符串本身）的数量是 `k * (k + 1) / 2`。\n\n首先寻找到所有的只包含字符 `1` 的最长子字符串。这里的「只包含字符 `1` 的最长子字符串」的意思是，假设该子字符串的下标范围是 `[i, j]`（包含下标 `i` 和下标 `j`），其中 `i <= j`，该子字符串中的所有字符都是 `1`，且下标 `i` 满足 `i` 位于字符串 `s` 的最左侧或者下标 `i - 1` 位置的字符是 `0`，以及下标 `j` 满足 `j` 位于字符串 `s` 的最右侧或者下标 `j + 1` 位置的字符是 `0`。\n\n寻找到所有的只包含字符 `1` 的最长子字符串之后，就可以计算所有字符都为 `1` 的子字符串的数量。\n\n具体做法是，从左到右遍历字符串，如果遇到字符 `1` 则计算连续字符 `1` 的数量，如果遇到字符 `0` 则说明上一个只包含字符 `1` 的最长子字符串遍历结束，根据最长子字符串的长度计算子字符串的数量，然后将连续字符 `1` 的数量清零。遍历结束后，如果连续字符 `1` 的数量大于零，则还有最后一个只包含字符 `1` 的最长子字符串，因此还需要计算其对应的子字符串的数量。\n\n```Java [sol1-Java]\nclass Solution {\n    public int numSub(String s) {\n        final int MODULO = 1000000007;\n        long total = 0;\n        int length = s.length();\n        long consecutive = 0;\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            if (c == '0') {\n                total += consecutive * (consecutive + 1) / 2;\n                total %= MODULO;\n                consecutive = 0;\n            } else {\n                consecutive++;\n            }\n        }\n        total += consecutive * (consecutive + 1) / 2;\n        total %= MODULO;\n        return (int) total;\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    static constexpr int P = int(1E9) + 7;\n    \n    int numSub(string s) {\n        int p = 0;\n        long long ans = 0;\n        while (p < s.size()) {\n            if (s[p] == '0') {\n                ++p;\n                continue;\n            }\n            int cnt = 0;\n            while (p < s.size() && s[p] == '1') {\n                ++cnt;\n                ++p;\n            }\n            ans = ans + (1LL + (long long)cnt) * cnt / 2;\n            ans = ans % P;\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numSub(self, s: str) -> int:\n        total, consecutive = 0, 0\n        length = len(s)\n        for i in range(length):\n            if s[i] == '0':\n                total += consecutive * (consecutive + 1) // 2\n                consecutive = 0\n            else:\n                consecutive += 1\n        \n        total += consecutive * (consecutive + 1) // 2\n        total %= (10**9 + 7)\n        return total\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串的长度。需要遍历字符串一次。\n\n- 空间复杂度：$O(1)$。只需要维护有限的变量，空间复杂度是常数。"
}