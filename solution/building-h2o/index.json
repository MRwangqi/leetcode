{
	"titleSlug": "building-h2o",
	"slug": "shengchengzhe-by-lyon-f-0rs9",
	"url": "https://leetcode-cn.com/problems/building-h2o/solution/shengchengzhe-by-lyon-f-0rs9/",
	"content": "#### 解法一：状态机解法\r\n\r\n| State | Oxygen | Hydrogen |\r\n|-------|--------|----------|\r\n| 0 {}     | 2      | 1        |\r\n| 1 {H}    | 4      | 3        | \r\n| 2 {O}     | WAIT   | 4        | \r\n| 3 {H,H}     | 0      | WAIT     |\r\n| 4 {H,O}     | WAIT | 0        |\r\n1. 根据上表构造一个状态机，第一列代表线程执行顺序状态，第二三列代表状态转移方程。\r\n2. 注意表中的 WAIT，这代表此时线程应被阻塞。\r\n3. 当从 3、4 状态转移回 0 状态时，唤醒所有被阻塞的线程。\r\n```cpp\r\nclass H2O {\r\npublic:\r\n    int transitions[5][2] = {{2,1}, {4,3}, {-1,4}, {0,-1}, {-1,0}};\r\n    int state = 0;\r\n    \r\n    condition_variable cv;\r\n    mutex mu;\r\n\r\n    H2O() {}\r\n\r\n    void hydrogen(function<void()> releaseHydrogen) {\r\n        unique_lock<mutex> lock(mu);    \r\n        cv.wait(lock, [this]{return transitions[state][1] != -1;});\r\n        state = transitions[state][1];\r\n        // releaseHydrogen() outputs \"H\". Do not change or remove this line.\r\n        releaseHydrogen();\r\n        if(state == 0) cv.notify_all();\r\n    }\r\n\r\n    void oxygen(function<void()> releaseOxygen) {\r\n        unique_lock<mutex> lock(mu);\r\n        cv.wait(lock, [this]{return transitions[state][0] != -1;});\r\n        state = transitions[state][0];\r\n        // releaseOxygen() outputs \"O\". Do not change or remove this line.\r\n        releaseOxygen();\r\n        if(state == 0) cv.notify_all();\r\n    }\r\n};\r\n```\r\n#### 解法二：生产者-消费者解法\r\n1. 把 *hydrogen* 线程看作生产者，*oxygen* 线程看作消费者，缓冲队列大小为2。\r\n2. *hydrogen* 把生成的氢放入队列；*oxygen* 线程每次从队列里消费两个氢元素。\r\n3. 生产者生产两个氢元素后会因为缓冲队列满而阻塞，使用条件变量使生产者阻塞。\r\n4. 消费者只有当缓冲队列满时才会从缓冲队列中消费元素，缓冲队列未满时消费者阻塞。\r\n5. 当生产者生成的氢元素填满缓冲队列时，生产者唤醒被阻塞的消费者；当消费者消费掉缓冲队列的元素后，消费者唤醒被阻塞的生产者。\r\n6. 由于不需要对队列中的氢元素做操作，我们只需维护缓冲队列的大小即可。\r\n7. 缺点：如评论区所言，这种解法只能产生 HHO 序列\r\n```cpp\r\nclass H2O {\r\npublic:\r\n    int cnt_h = 0;\r\n    condition_variable cv;\r\n    mutex mu;\r\n\r\n    H2O() {}\r\n\r\n    void hydrogen(function<void()> releaseHydrogen) {\r\n        unique_lock<mutex> lock(mu);\r\n        cv.wait(lock, [this]{return this->cnt_h < 2;});\r\n        // releaseHydrogen() outputs \"H\". Do not change or remove this line.\r\n        releaseHydrogen();\r\n        cnt_h++;\r\n        if(cnt_h == 2) cv.notify_all();\r\n    }\r\n\r\n    void oxygen(function<void()> releaseOxygen) {\r\n        unique_lock<mutex> lock(mu);\r\n        cv.wait(lock, [this]{return this->cnt_h == 2;});\r\n        // releaseOxygen() outputs \"O\". Do not change or remove this line.\r\n        releaseOxygen();\r\n        cnt_h = 0;\r\n        cv.notify_all();\r\n    }\r\n};\r\n```\r\n"
}