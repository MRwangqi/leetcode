{
	"titleSlug": "reformat-phone-number",
	"slug": "zhong-xin-ge-shi-hua-dian-hua-hao-ma-by-nf6g3",
	"url": "https://leetcode-cn.com/problems/reformat-phone-number/solution/zhong-xin-ge-shi-hua-dian-hua-hao-ma-by-nf6g3/",
	"content": "#### 方法一：找出所有的数字并分块\n\n**思路与算法**\n\n我们首先对给定的字符串 $\\textit{number}$ 进行一次遍历，找出所有的数字，并记录在字符串 $\\textit{digits}$ 中。如果使用的语言不支持可修改的字符串，也可以记录在数组中。\n\n随后我们对 $\\textit{digits}$ 进行一次遍历。在遍历的过程中，我们可以存储剩余的数字数量 $n$ 以及当前遍历到的字符位置 $\\textit{pt}$：\n\n- 当 $n>4$ 时，我们取出三个连续的字符，作为一个块；\n\n- 当 $n \\leq 4$ 时，我们根据题目的要求，将剩余的 $n$ 个字符进行分块，并结束遍历。\n\n我们还需要在块之间添加破折号。根据使用的语言不同，可以考虑在遍历的过程中添加破折号，并在遍历完成后直接返回答案；或者在遍历结束后再添加破折号，并在遍历完成后使用 $\\texttt{join()}$ API 得到答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string reformatNumber(string number) {\n        string digits;\n        for (char ch: number) {\n            if (isdigit(ch)) {\n                digits.push_back(ch);\n            }\n        }\n\n        int n = digits.size();\n        int pt = 0;\n        string ans;\n        while (n) {\n            if (n > 4) {\n                ans += digits.substr(pt, 3) + \"-\";\n                pt += 3;\n                n -= 3;\n            }\n            else {\n                if (n == 4) {\n                    ans += digits.substr(pt, 2) + \"-\" + digits.substr(pt + 2, 2);\n                }\n                else {\n                    ans += digits.substr(pt, n);\n                }\n                break;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String reformatNumber(String number) {\n        StringBuilder digits = new StringBuilder();\n        for (int i = 0; i < number.length(); ++i) {\n            char ch = number.charAt(i);\n            if (Character.isDigit(ch)) {\n                digits.append(ch);\n            }\n        }\n\n        int n = digits.length();\n        int pt = 0;\n        StringBuilder ans = new StringBuilder();\n        while (n > 0) {\n            if (n > 4) {\n                ans.append(digits.substring(pt, pt + 3) + \"-\");\n                pt += 3;\n                n -= 3;\n            } else {\n                if (n == 4) {\n                    ans.append(digits.substring(pt, pt + 2) + \"-\" + digits.substring(pt + 2, pt + 4));\n                } else {\n                    ans.append(digits.substring(pt, pt + n));\n                }\n                break;\n            }\n        }\n        return ans.toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string ReformatNumber(string number) {\n        StringBuilder sb = new StringBuilder();\n        foreach (char ch in number) {\n            if (char.IsDigit(ch)) {\n                sb.Append(ch);\n            }\n        }\n\n        string digits = sb.ToString();\n        int n = digits.Length;\n        int pt = 0;\n        StringBuilder ans = new StringBuilder();\n        while (n > 0) {\n            if (n > 4) {\n                ans.Append(digits.Substring(pt, 3) + \"-\");\n                pt += 3;\n                n -= 3;\n            } else {\n                if (n == 4) {\n                    ans.Append(digits.Substring(pt, 2) + \"-\" + digits.Substring(pt + 2, 2));\n                } else {\n                    ans.Append(digits.Substring(pt, n));\n                }\n                break;\n            }\n        }\n        return ans.ToString();\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def reformatNumber(self, number: str) -> str:\n        digits = list()\n        for ch in number:\n            if ch.isdigit():\n                digits.append(ch)\n        \n        n, pt = len(digits), 0\n        ans = list()\n\n        while n > 0:\n            if n > 4:\n                ans.append(\"\".join(digits[pt:pt+3]))\n                pt += 3\n                n -= 3\n            else:\n                if n == 4:\n                    ans.append(\"\".join(digits[pt:pt+2]))\n                    ans.append(\"\".join(digits[pt+2:pt+4]))\n                else:\n                    ans.append(\"\".join(digits[pt:pt+n]))\n                break\n        \n        return \"-\".join(ans)\n```\n\n```C [sol1-C]\nchar * reformatNumber(char * number) {\n    int len = strlen(number);\n    char digits[len + 1];\n    int pos = 0;\n    for (int i = 0; i < len; i++) {\n        char ch = number[i];\n        if (isdigit(ch)) {\n            digits[pos++] = ch;\n        }\n    }\n\n    int n = pos;\n    int pt = 0;\n    char *ans =  (char *)malloc(sizeof(char) * n * 2);\n    pos = 0;\n    while (n) {\n        if (n > 4) {\n            strncpy(ans + pos, digits + pt, 3);\n            pos += 3;\n            ans[pos++] = '-';\n            pt += 3;\n            n -= 3;\n        } else {\n            if (n == 4) {\n                strncpy(ans + pos, digits + pt, 2);\n                pos += 2;\n                ans[pos++] = '-';\n                strncpy(ans + pos, digits + pt + 2, 2);\n                pos += 2;\n            } else {\n                strncpy(ans + pos, digits + pt, n);\n                pos += n;\n            }\n            break;\n        }\n    }\n    ans[pos] = '\\0';\n    return ans;\n}\n```\n\n```go [sol1-Golang]\nfunc reformatNumber(number string) string {\n    s := strings.ReplaceAll(number, \" \", \"\")\n    s = strings.ReplaceAll(s, \"-\", \"\")\n    ans := []string{}\n    i := 0\n    for ; i+4 < len(s); i += 3 {\n        ans = append(ans, s[i:i+3])\n    }\n    s = s[i:]\n    if len(s) < 4 {\n        ans = append(ans, s)\n    } else {\n        ans = append(ans, s[:2], s[2:])\n    }\n    return strings.Join(ans, \"-\")\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar reformatNumber = function(number) {\n    let digits = '';\n    for (let i = 0; i < number.length; ++i) {\n        const ch = number[i];\n        if (isDigit(ch)) {\n            digits += ch;\n        }\n    }\n\n    let n = digits.length;\n    let pt = 0;\n    let ans = '';\n    while (n > 0) {\n        if (n > 4) {\n            ans += digits.slice(pt, pt + 3) + \"-\";\n            pt += 3;\n            n -= 3;\n        } else {\n            if (n == 4) {\n                ans += digits.slice(pt, pt + 2) + \"-\" + digits.slice(pt + 2, pt + 4);\n            } else {\n                ans += digits.slice(pt, pt + n);\n            }\n            break;\n        }\n    }\n    return ans;\n};\n\nconst isDigit = (ch) => {\n    return parseFloat(ch).toString() === \"NaN\" ? false : true;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $\\textit{number}$ 的长度。\n\n- 空间复杂度：$O(n)$，即为字符串 $\\textit{digits}$ 以及其它临时字符串需要使用的空间。"
}