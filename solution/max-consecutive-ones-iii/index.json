{
	"titleSlug": "max-consecutive-ones-iii",
	"slug": "zui-da-lian-xu-1de-ge-shu-iii-by-leetcod-hw12",
	"url": "https://leetcode-cn.com/problems/max-consecutive-ones-iii/solution/zui-da-lian-xu-1de-ge-shu-iii-by-leetcod-hw12/",
	"content": "#### 前言\n\n对于数组 $A$ 的区间 $[\\textit{left}, \\textit{right}]$ 而言，只要它包含不超过 $k$ 个 $0$，我们就可以根据它构造出一段满足要求，并且长度为 $\\textit{right} - \\textit{left} + 1$ 的区间。\n\n因此，我们可以将该问题进行如下的转化，即：\n\n> 对于任意的右端点 $\\textit{right}$，希望找到最小的左端点 $\\textit{left}$，使得 $[\\textit{left}, \\textit{right}]$ 包含不超过 $k$ 个 $0$。\n>\n> 只要我们枚举所有可能的右端点，将得到的区间的长度取最大值，即可得到答案。\n\n要想快速判断一个区间内 $0$ 的个数，我们可以考虑将数组 $A$ 中的 $0$ 变成 $1$，$1$ 变成 $0$。此时，我们对数组 $A$ 求出前缀和，记为数组 $P$，那么 $[\\textit{left}, \\textit{right}]$ 中包含不超过 $k$ 个 $1$（注意这里就不是 $0$ 了），当且仅当二者的前缀和之差：\n\n$$\nP[\\textit{right}] - P[\\textit{left} - 1]\n$$\n\n小于等于 $k$。这样一来，我们就可以容易地解决这个问题了。\n\n#### 方法一：二分查找\n\n**思路与算法**\n\n$$\nP[\\textit{right}] - P[\\textit{left} - 1] \\leq k\n$$\n\n等价于\n\n$$\nP[\\textit{left} - 1] \\geq P[\\textit{right}] - k \\tag{1}\n$$\n\n也就是说，我们需要找到最小的满足 $(1)$ 式的 $\\textit{left}$。由于数组 $A$ 中仅包含 $0/1$，因此前缀和数组是一个单调递增的数组，我们就可以使用二分查找的方法得到 $\\textit{left}$。\n\n**细节**\n\n注意到 $(1)$ 式的左侧的下标是 $\\textit{left}-1$ 而不是 $\\textit{left}$，那么我们在构造前缀和数组时，可以将前缀和整体向右移动一位，空出 $P[0]$ 的位置，即：\n\n$$\n\\begin{cases}\nP[0] = 0 \\\\\nP[i] = P[i-1] + (1 - A[i-1])\n\\end{cases}\n$$\n\n此时，我们在数组 $P$ 上二分查找到的下标即为 $\\textit{left}$ 本身，同时我们也避免了原先 $\\textit{left}=0$ 时 $\\textit{left}-1=-1$ 不在数组合法的下标范围中的边界情况。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int longestOnes(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> P(n + 1);\n        for (int i = 1; i <= n; ++i) {\n            P[i] = P[i - 1] + (1 - nums[i - 1]);\n        }\n\n        int ans = 0;\n        for (int right = 0; right < n; ++right) {\n            int left = lower_bound(P.begin(), P.end(), P[right + 1] - k) - P.begin();\n            ans = max(ans, right - left + 1);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int longestOnes(int[] nums, int k) {\n        int n = nums.length;\n        int[] P = new int[n + 1];\n        for (int i = 1; i <= n; ++i) {\n            P[i] = P[i - 1] + (1 - nums[i - 1]);\n        }\n\n        int ans = 0;\n        for (int right = 0; right < n; ++right) {\n            int left = binarySearch(P, P[right + 1] - k);\n            ans = Math.max(ans, right - left + 1);\n        }\n        return ans;\n    }\n\n    public int binarySearch(int[] P, int target) {\n        int low = 0, high = P.length - 1;\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (P[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def longestOnes(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        P = [0]\n        for num in nums:\n            P.append(P[-1] + (1 - num))\n        \n        ans = 0\n        for right in range(n):\n            left = bisect.bisect_left(P, P[right + 1] - k)\n            ans = max(ans, right - left + 1)\n        \n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar longestOnes = function(nums, k) {\n    const n = nums.length;\n    const P = new Array(n + 1).fill(0);\n    for (let i = 1; i <= n; ++i) {\n        P[i] = P[i - 1] + (1 - nums[i - 1]);\n    }\n\n    let ans = 0;\n    for (let right = 0; right < n; ++right) {\n        const left = binarySearch(P, P[right + 1] - k);\n        ans = Math.max(ans, right - left + 1);\n    }\n    return ans;\n};\n\nconst binarySearch = (P, target) => {\n    let low = 0, high = P.length - 1;\n    while (low < high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        if (P[mid] < target) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n};\n```\n\n```go [sol1-Golang]\nfunc longestOnes(nums []int, k int) (ans int) {\n    n := len(nums)\n    P := make([]int, n+1)\n    for i, v := range nums {\n        P[i+1] = P[i] + 1 - v\n    }\n    for right, v := range P {\n        left := sort.SearchInts(P, v-k)\n        ans = max(ans, right-left)\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol1-C]\nint binarySearch(int* P, int len, int target) {\n    int low = 0, high = len - 1;\n    while (low < high) {\n        int mid = (high - low) / 2 + low;\n        if (P[mid] < target) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\nint longestOnes(int* nums, int numsSize, int k) {\n    int P[numsSize + 1];\n    P[0] = 0;\n    for (int i = 1; i <= numsSize; ++i) {\n        P[i] = P[i - 1] + (1 - nums[i - 1]);\n    }\n\n    int ans = 0;\n    for (int right = 0; right < numsSize; ++right) {\n        int left = binarySearch(P, numsSize + 1, P[right + 1] - k);\n        ans = fmax(ans, right - left + 1);\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $A$ 的长度。每一次二分查找的时间复杂度为 $O(\\log n)$，我们需要枚举 $\\textit{right}$ 进行 $n$ 次二分查找，因此总时间复杂度为 $O(n \\log n)$。\n\n- 空间复杂度：$O(n)$，即为前缀和数组 $P$ 需要的空间。\n\n#### 方法二：滑动窗口\n\n**思路与算法**\n\n我们继续观察 $(1)$ 式，由于前缀和数组 $P$ 是单调递增的，那么 $(1)$ 式的右侧 $P[\\textit{right}] - k$ 同样也是单调递增的。因此，我们可以发现：\n\n> 随着 $\\textit{right}$ 的增大，满足 $(1)$ 式的最小的 $\\textit{left}$ 值是单调递增的。\n\n这样一来，我们就可以使用滑动窗口来实时地维护 $\\textit{left}$ 和 $\\textit{right}$ 了。在 $\\textit{right}$ 向右移动的过程中，我们同步移动 $\\textit{left}$，直到 $\\textit{left}$ 为首个（即最小的）满足 $(1)$ 式的位置，此时我们就可以使用此区间对答案进行更新了。\n\n**细节**\n\n当我们使用滑动窗口代替二分查找解决本题时，就不需要显式地计算并保存出前缀和数组了。我们只需要知道 $\\textit{left}$ 和 $\\textit{right}$ 作为下标在前缀和数组中对应的值，因此我们只需要用两个变量 $\\textit{lsum}$ 和 $\\textit{rsum}$ 记录 $\\textit{left}$ 和 $\\textit{right}$ 分别对应的前缀和即可。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int longestOnes(vector<int>& nums, int k) {\n        int n = nums.size();\n        int left = 0, lsum = 0, rsum = 0;\n        int ans = 0;\n        for (int right = 0; right < n; ++right) {\n            rsum += 1 - nums[right];\n            while (lsum < rsum - k) {\n                lsum += 1 - nums[left];\n                ++left;\n            }\n            ans = max(ans, right - left + 1);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int longestOnes(int[] nums, int k) {\n        int n = nums.length;\n        int left = 0, lsum = 0, rsum = 0;\n        int ans = 0;\n        for (int right = 0; right < n; ++right) {\n            rsum += 1 - nums[right];\n            while (lsum < rsum - k) {\n                lsum += 1 - nums[left];\n                ++left;\n            }\n            ans = Math.max(ans, right - left + 1);\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def longestOnes(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        left = lsum = rsum = 0\n        ans = 0\n        \n        for right in range(n):\n            rsum += 1 - nums[right]\n            while lsum < rsum - k:\n                lsum += 1 - nums[left]\n                left += 1\n            ans = max(ans, right - left + 1)\n        \n        return ans\n```\n\n```JavaScript [sol2-JavaScript]\nvar longestOnes = function(nums, k) {\n    const n = nums.length;\n    let left = 0, lsum = 0, rsum = 0;\n    let ans = 0;\n    for (let right = 0; right < n; ++right) {\n        rsum += 1 - nums[right];\n        while (lsum < rsum - k) {\n            lsum += 1 - nums[left];\n            ++left;\n        }\n        ans = Math.max(ans, right - left + 1);\n    }\n    return ans;\n};\n```\n\n```go [sol2-Golang]\nfunc longestOnes(nums []int, k int) (ans int) {\n    var left, lsum, rsum int\n    for right, v := range nums {\n        rsum += 1 - v\n        for lsum < rsum-k {\n            lsum += 1 - nums[left]\n            left++\n        }\n        ans = max(ans, right-left+1)\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol2-C]\nint longestOnes(int* nums, int numsSize, int k) {\n    int left = 0, lsum = 0, rsum = 0;\n    int ans = 0;\n    for (int right = 0; right < numsSize; ++right) {\n        rsum += 1 - nums[right];\n        while (lsum < rsum - k) {\n            lsum += 1 - nums[left];\n            ++left;\n        }\n        ans = fmax(ans, right - left + 1);\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $A$ 的长度。我们至多只需要遍历该数组两次（左右指针各一次）。\n\n- 空间复杂度：$O(1)$，我们只需要常数的空间保存若干变量。"
}