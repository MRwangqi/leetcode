{
	"titleSlug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
	"slug": "jian-cha-dan-ci-shi-fou-wei-ju-zhong-qi-pqpu2",
	"url": "https://leetcode-cn.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/solution/jian-cha-dan-ci-shi-fou-wei-ju-zhong-qi-pqpu2/",
	"content": "#### 方法一：双指针\n\n使用 $\\textit{start}$ 记录单词的起始，$\\textit{end}$ 记录单词结尾的下一个位置。我们遍历字符串 $\\textit{sentence}$ 并不断地分割单词，对于区间 $[\\textit{start}, \\textit{end})$ 对应的单词，判断它是否存在某一前缀等于 $\\textit{searchWord}$，如果存在直接返回该单词对应的下标 $\\textit{index}$；如果遍历完所有单词都不符合条件，返回 $-1$。\n\n```Python [sol1-Python3]\nclass Solution:\n    def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:\n        i, index, n = 0, 1, len(sentence)\n        while i < n:\n            start = i\n            while i < n and sentence[i] != ' ':\n                i += 1\n            end = i\n            if sentence[start:end].startswith(searchWord):\n                return index\n            index += 1\n            i += 1\n        return -1\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isPrefix(const string &sentence, int start, int end, const string &searchWord) {\n        for (int i = 0; i < searchWord.size(); i++) {\n            if (start + i >= end || sentence[start + i] != searchWord[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    int isPrefixOfWord(string sentence, string searchWord) {\n        int n = sentence.size(), index = 1, start = 0, end = 0;\n        while (start < n) {\n            while (end < n && sentence[end] != ' ') {\n                end++;\n            }\n            if (isPrefix(sentence, start, end, searchWord)) {\n                return index;\n            }\n\n            index++;\n            end++;\n            start = end;\n        }\n        return -1;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int isPrefixOfWord(String sentence, String searchWord) {\n        int n = sentence.length(), index = 1, start = 0, end = 0;\n        while (start < n) {\n            while (end < n && sentence.charAt(end) != ' ') {\n                end++;\n            }\n            if (isPrefix(sentence, start, end, searchWord)) {\n                return index;\n            }\n\n            index++;\n            end++;\n            start = end;\n        }\n        return -1;\n    }\n\n    public boolean isPrefix(String sentence, int start, int end, String searchWord) {\n        for (int i = 0; i < searchWord.length(); i++) {\n            if (start + i >= end || sentence.charAt(start + i) != searchWord.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int IsPrefixOfWord(string sentence, string searchWord) {\n        int n = sentence.Length, index = 1, start = 0, end = 0;\n        while (start < n) {\n            while (end < n && sentence[end] != ' ') {\n                end++;\n            }\n            if (IsPrefix(sentence, start, end, searchWord)) {\n                return index;\n            }\n\n            index++;\n            end++;\n            start = end;\n        }\n        return -1;\n    }\n\n    public bool IsPrefix(string sentence, int start, int end, string searchWord) {\n        for (int i = 0; i < searchWord.Length; i++) {\n            if (start + i >= end || sentence[start + i] != searchWord[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C [sol1-C]\nbool isPrefix(const char* sentence, int start, int end, const char* searchWord) {\n    int len = strlen(searchWord);\n    for (int i = 0; i < len; i++) {\n        if (start + i >= end || sentence[start + i] != searchWord[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint isPrefixOfWord(char * sentence, char * searchWord){\n    int n = strlen(sentence), index = 1, start = 0, end = 0;\n    while (start < n) {\n        while (end < n && sentence[end] != ' ') {\n            end++;\n        }\n        if (isPrefix(sentence, start, end, searchWord)) {\n            return index;\n        }\n        index++;\n        end++;\n        start = end;\n    }\n    return -1;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar isPrefixOfWord = function(sentence, searchWord) {\n    let n = sentence.length, index = 1, start = 0, end = 0;\n    while (start < n) {\n        while (end < n && sentence[end] !== ' ') {\n            end++;\n        }\n        if (isPrefix(sentence, start, end, searchWord)) {\n            return index;\n        }\n\n        index++;\n        end++;\n        start = end;\n    }\n    return -1;\n}\n\nconst isPrefix = (sentence, start, end, searchWord) => {\n    for (let i = 0; i < searchWord.length; i++) {\n        if (start + i >= end || sentence[start + i] !== searchWord[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n```\n\n```go [sol1-Golang]\nfunc isPrefixOfWord(sentence, searchWord string) int {\n    for i, index, n := 0, 1, len(sentence); i < n; i++ {\n        start := i\n        for i < n && sentence[i] != ' ' {\n            i++\n        }\n        end := i\n        if strings.HasPrefix(sentence[start:end], searchWord) {\n            return index\n        }\n        index++\n    }\n    return -1\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 是 $\\textit{sentence}$ 的长度。遍历字符串 $\\textit{sentence}$ 需要 $O(n)$，前缀判断函数 $\\text{isPrefix}$ 的总时间复杂度为 $O(n)$。\n\n+ 空间复杂度：$O(1)$，只需要额外的常数级别的空间。"
}