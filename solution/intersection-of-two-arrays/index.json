{
	"titleSlug": "intersection-of-two-arrays",
	"slug": "liang-ge-shu-zu-de-jiao-ji-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/intersection-of-two-arrays/solution/liang-ge-shu-zu-de-jiao-ji-by-leetcode-solution/",
	"content": "#### 方法一：两个集合\n\n计算两个数组的交集，直观的方法是遍历数组 `nums1`，对于其中的每个元素，遍历数组 `nums2` 判断该元素是否在数组 `nums2` 中，如果存在，则将该元素添加到返回值。假设数组 `nums1` 和 `nums2` 的长度分别是 $m$ 和 $n$，则遍历数组 `nums1` 需要 $O(m)$ 的时间，判断 `nums1` 中的每个元素是否在数组 `nums2` 中需要 $O(n)$ 的时间，因此总时间复杂度是 $O(mn)$。\n\n如果使用哈希集合存储元素，则可以在 $O(1)$ 的时间内判断一个元素是否在集合中，从而降低时间复杂度。\n\n首先使用两个集合分别存储两个数组中的元素，然后遍历较小的集合，判断其中的每个元素是否在另一个集合中，如果元素也在另一个集合中，则将该元素添加到返回值。该方法的时间复杂度可以降低到 $O(m+n)$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int num : nums1) {\n            set1.add(num);\n        }\n        for (int num : nums2) {\n            set2.add(num);\n        }\n        return getIntersection(set1, set2);\n    }\n\n    public int[] getIntersection(Set<Integer> set1, Set<Integer> set2) {\n        if (set1.size() > set2.size()) {\n            return getIntersection(set2, set1);\n        }\n        Set<Integer> intersectionSet = new HashSet<Integer>();\n        for (int num : set1) {\n            if (set2.contains(num)) {\n                intersectionSet.add(num);\n            }\n        }\n        int[] intersection = new int[intersectionSet.size()];\n        int index = 0;\n        for (int num : intersectionSet) {\n            intersection[index++] = num;\n        }\n        return intersection;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        set1 = set(nums1)\n        set2 = set(nums2)\n        return self.set_intersection(set1, set2)\n\n    def set_intersection(self, set1, set2):\n        if len(set1) > len(set2):\n            return self.set_intersection(set2, set1)\n        return [x for x in set1 if x in set2]\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> set1, set2;\n        for (auto& num : nums1) {\n            set1.insert(num);\n        }\n        for (auto& num : nums2) {\n            set2.insert(num);\n        }\n        return getIntersection(set1, set2);\n    }\n\n    vector<int> getIntersection(unordered_set<int>& set1, unordered_set<int>& set2) {\n        if (set1.size() > set2.size()) {\n            return getIntersection(set2, set1);\n        }\n        vector<int> intersection;\n        for (auto& num : set1) {\n            if (set2.count(num)) {\n                intersection.push_back(num);\n            }\n        }\n        return intersection;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nconst set_intersection = (set1, set2) => {\n    if (set1.size > set2.size) {\n        return set_intersection(set2, set1);\n    }\n    const intersection = new Set();\n    for (const num of set1) {\n        if (set2.has(num)) {\n            intersection.add(num);\n        }\n    }\n    return [...intersection];\n}\n\nvar intersection = function(nums1, nums2) {\n    const set1 = new Set(nums1);\n    const set2 = new Set(nums2);\n    return set_intersection(set1, set2);\n};\n```\n\n```Golang [sol1-Golang]\nfunc intersection(nums1 []int, nums2 []int) (intersection []int) {\n    set1 := map[int]struct{}{}\n    for _, v := range nums1 {\n        set1[v] = struct{}{}\n    }\n    set2 := map[int]struct{}{}\n    for _, v := range nums2 {\n        set2[v] = struct{}{}\n    }\n    if len(set1) > len(set2) {\n        set1, set2 = set2, set1\n    }\n    for v := range set1 {\n        if _, has := set2[v]; has {\n            intersection = append(intersection, v)\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nstruct unordered_set {\n    int key;\n    UT_hash_handle hh;\n};\n\nstruct unordered_set* find(struct unordered_set** hashtable, int ikey) {\n    struct unordered_set* tmp;\n    HASH_FIND_INT(*hashtable, &ikey, tmp);\n    return tmp;\n}\n\nvoid insert(struct unordered_set** hashtable, int ikey) {\n    struct unordered_set* tmp = find(hashtable, ikey);\n    if (tmp != NULL) return;\n    tmp = malloc(sizeof(struct unordered_set));\n    tmp->key = ikey;\n    HASH_ADD_INT(*hashtable, key, tmp);\n}\n\nint* getIntersection(struct unordered_set** set1, struct unordered_set** set2, int* returnSize) {\n    if (HASH_COUNT(*set1) > HASH_COUNT(*set2)) {\n        return getIntersection(set2, set1, returnSize);\n    }\n    int* intersection = malloc(sizeof(int) * (HASH_COUNT(*set1) + HASH_COUNT(*set2)));\n    struct unordered_set *s, *tmp;\n    HASH_ITER(hh, *set1, s, tmp) {\n        if (find(set2, s->key)) {\n            intersection[(*returnSize)++] = s->key;\n        }\n    }\n    return intersection;\n}\n\nint* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\n    *returnSize = 0;\n    struct unordered_set *set1 = NULL, *set2 = NULL;\n    for (int i = 0; i < nums1Size; i++) {\n        insert(&set1, nums1[i]);\n    }\n    for (int i = 0; i < nums2Size; i++) {\n        insert(&set2, nums2[i]);\n    }\n\n    return getIntersection(&set1, &set2, returnSize);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m+n)$，其中 $m$ 和 $n$ 分别是两个数组的长度。使用两个集合分别存储两个数组中的元素需要 $O(m+n)$ 的时间，遍历较小的集合并判断元素是否在另一个集合中需要 $O(\\min(m,n))$ 的时间，因此总时间复杂度是 $O(m+n)$。\n\n- 空间复杂度：$O(m+n)$，其中 $m$ 和 $n$ 分别是两个数组的长度。空间复杂度主要取决于两个集合。\n\n#### 方法二：排序 + 双指针\n\n如果两个数组是有序的，则可以使用双指针的方法得到两个数组的交集。\n\n首先对两个数组进行排序，然后使用两个指针遍历两个数组。可以预见的是加入答案的数组的元素一定是递增的，为了保证加入元素的唯一性，我们需要额外记录变量 $\\textit{pre}$ 表示上一次加入答案数组的元素。\n\n初始时，两个指针分别指向两个数组的头部。每次比较两个指针指向的两个数组中的数字，如果两个数字不相等，则将指向较小数字的指针右移一位，如果两个数字相等，且该数字不等于 $\\textit{pre}$ ，将该数字添加到答案并更新 $\\textit{pre}$ 变量，同时将两个指针都右移一位。当至少有一个指针超出数组范围时，遍历结束。\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        Arrays.sort(nums1);\n        Arrays.sort(nums2);\n        int length1 = nums1.length, length2 = nums2.length;\n        int[] intersection = new int[length1 + length2];\n        int index = 0, index1 = 0, index2 = 0;\n        while (index1 < length1 && index2 < length2) {\n            int num1 = nums1[index1], num2 = nums2[index2];\n            if (num1 == num2) {\n                // 保证加入元素的唯一性\n                if (index == 0 || num1 != intersection[index - 1]) {\n                    intersection[index++] = num1;\n                }\n                index1++;\n                index2++;\n            } else if (num1 < num2) {\n                index1++;\n            } else {\n                index2++;\n            }\n        }\n        return Arrays.copyOfRange(intersection, 0, index);\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        nums1.sort()\n        nums2.sort()\n        length1, length2 = len(nums1), len(nums2)\n        intersection = list()\n        index1 = index2 = 0\n        while index1 < length1 and index2 < length2:\n            num1 = nums1[index1]\n            num2 = nums2[index2]\n            if num1 == num2:\n                # 保证加入元素的唯一性\n                if not intersection or num1 != intersection[-1]:\n                    intersection.append(num1)\n                index1 += 1\n                index2 += 1\n            elif num1 < num2:\n                index1 += 1\n            else:\n                index2 += 1\n        return intersection\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        sort(nums1.begin(), nums1.end());\n        sort(nums2.begin(), nums2.end());\n        int length1 = nums1.size(), length2 = nums2.size();\n        int index1 = 0, index2 = 0;\n        vector<int> intersection;\n        while (index1 < length1 && index2 < length2) {\n            int num1 = nums1[index1], num2 = nums2[index2];\n            if (num1 == num2) {\n                // 保证加入元素的唯一性\n                if (!intersection.size() || num1 != intersection.back()) {\n                    intersection.push_back(num1);\n                }\n                index1++;\n                index2++;\n            } else if (num1 < num2) {\n                index1++;\n            } else {\n                index2++;\n            }\n        }\n        return intersection;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar intersection = function(nums1, nums2) {\n    nums1.sort((x, y) => x - y);\n    nums2.sort((x, y) => x - y);\n    const length1 = nums1.length, length2 = nums2.length;\n    let index1 = 0, index2 = 0;\n    const intersection = [];\n    while (index1 < length1 && index2 < length2) {\n        const num1 = nums1[index1], num2 = nums2[index2];\n        if (num1 === num2) {\n            // 保证加入元素的唯一性\n            if (!intersection.length || num1 !== intersection[intersection.length - 1]) {\n                intersection.push(num1);\n            }\n            index1++;\n            index2++;\n        } else if (num1 < num2) {\n            index1++;\n        } else {\n            index2++;\n        }\n    }\n    return intersection;\n};\n```\n\n```Golang [sol2-Golang]\nfunc intersection(nums1 []int, nums2 []int) (res []int) {\n    sort.Ints(nums1)\n    sort.Ints(nums2)\n    for i, j := 0, 0; i < len(nums1) && j < len(nums2); {\n        x, y := nums1[i], nums2[j]\n        if x == y {\n            if res == nil || x > res[len(res)-1] {\n                res = append(res, x)\n            }\n            i++\n            j++\n        } else if x < y {\n            i++\n        } else {\n            j++\n        }\n    }\n    return\n}\n```\n\n```C [sol2-C]\nint cmp(void* a, void* b) {\n    return *(int*)a - *(int*)b;\n}\n\nint* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\n    qsort(nums1, nums1Size, sizeof(int), cmp);\n    qsort(nums2, nums2Size, sizeof(int), cmp);\n    *returnSize = 0;\n    int index1 = 0, index2 = 0;\n    int* intersection = malloc(sizeof(int) * (nums1Size + nums2Size));\n    while (index1 < nums1Size && index2 < nums2Size) {\n        int num1 = nums1[index1], num2 = nums2[index2];\n        if (num1 == num2) {\n            // 保证加入元素的唯一性\n            if (!(*returnSize) || num1 != intersection[(*returnSize) - 1]) {\n                intersection[(*returnSize)++] = num1;\n            }\n            index1++;\n            index2++;\n        } else if (num1 < num2) {\n            index1++;\n        } else {\n            index2++;\n        }\n    }\n    return intersection;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\log m+n \\log n)$，其中 $m$ 和 $n$ 分别是两个数组的长度。对两个数组排序的时间复杂度分别是 $O(m \\log m)$ 和 $O(n \\log n)$，双指针寻找交集元素的时间复杂度是 $O(m+n)$，因此总时间复杂度是 $O(m \\log m+n \\log n)$。\n\n- 空间复杂度：$O(\\log m+\\log n)$，其中 $m$ 和 $n$ 分别是两个数组的长度。空间复杂度主要取决于排序使用的额外空间。"
}