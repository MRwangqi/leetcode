{
	"titleSlug": "find-the-kth-largest-integer-in-the-array",
	"slug": "zhao-chu-shu-zu-zhong-de-di-k-da-zheng-s-wvwg",
	"url": "https://leetcode-cn.com/problems/find-the-kth-largest-integer-in-the-array/solution/zhao-chu-shu-zu-zhong-de-di-k-da-zheng-s-wvwg/",
	"content": "#### 方法一：自定义排序\n\n**思路与算法**\n\n为了找出字符串数组中的第 $k$ 大整数，一种可行的方式是把字符串数组按照字符串对应的整数大小进行**降序排序**，最终选择排序后数组中的第 $k$ 个元素作为答案返回。而自定义排序算法的核心在于实现一个自定义的比较函数 $\\textit{cmp}(s_1, s_2)$，即对于数组 $\\textit{nums}$ 中的任意两个字符串 $s_1$ 与 $s_2$，比较它们对应整数的大小，并按照要求返回对应的结果。\n\n由于 $s_1$ 与 $s_2$ 的长度上限为 $100$，对应的整数超出了大多数编程语言的内置整型的上限，因此我们难以将字符串直接转化为内置整型进行比较。此时我们需要直接对字符串进行比较来判断它们对应整数的大小，比较过程可以分为两个部分：\n\n- 第一部分：由于 $s_1$ 与 $s_2$ 均不含前导零，因此我们首先可以比较 $s_1$ 与 $s_2$ 的长度：如果 $s_1$ 的长度大于 $s_2$ 的长度，则 $s_1$ 对应的整数也大于 $s_2$ 对应的整数；反之亦然。\n\n- 第二部分：如果 $s_1$ 与 $s_2$ 的长度相等，我们就需要从高位至低位比较每一位字符对应数字的大小。当比较至某一位时，如果 $s_1$ 在该位对应的数字大于 $s_2$ 在该位对应的数字，则 $s_1$ 对应的整数也大于 $s_2$ 对应的整数；反之亦然。这部分的比较过程等价于直接比较字符串**字典序**的大小。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string kthLargestNumber(vector<string>& nums, int k) {\n        // 自定义比较函数，在 s1 对应的整数较大时返回 true，反之返回 false\n        auto cmp = [](const string& s1, const string& s2) -> bool{\n            // 首先比较字符串长度\n            if (s1.size() > s2.size()){\n                return true;\n            }\n            else if (s1.size() < s2.size()){\n                return false;\n            }\n            else{\n                // 长度相等时比较字符串字典序大小\n                return s1 > s2;\n            }\n        };\n        \n        sort(nums.begin(), nums.end(), cmp);\n        return nums[k-1];\n    }\n};\n```\n\n```Python [sol1-Python3]\nfrom functools import cmp_to_key\nclass Solution:\n    def kthLargestNumber(self, nums: List[str], k: int) -> str:\n        # 自定义比较函数，在 s1 对应的整数较大时返回 -1，反之返回 1\n        def cmp(s1: str, s2: str) -> int:\n            # 首先比较字符串长度\n            if len(s1) > len(s2):\n                return -1\n            elif len(s1) < len(s2):\n                return 1\n            else:\n                # 长度相等时比较字符串字典序大小\n                if s1 > s2:\n                    return -1\n                else:\n                    return 1\n            \n        nums.sort(key=cmp_to_key(cmp))\n        return nums[k-1]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(nm \\log n)$，其中 $n$ 为 $\\textit{nums}$ 的长度，$m$ 为 $\\textit{nums}$ 中字符串的长度。排序的过程中会存在 $O(n \\log n)$ 次比较与交换操作，每次比较与交换操作的时间复杂度为 $O(m)$。\n\n- 空间复杂度：$O(m + \\log n)$，即为交换操作的空间开销与排序的栈空间开销。"
}