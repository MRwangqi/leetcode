{
	"titleSlug": "QC3q1f",
	"slug": "shi-xian-qian-zhui-shu-by-leetcode-solut-un50",
	"url": "https://leetcode-cn.com/problems/QC3q1f/solution/shi-xian-qian-zhui-shu-by-leetcode-solut-un50/",
	"content": "#### 方法一：字典树\n\n$\\text{Trie}$，又称前缀树或字典树，是一棵有根树，其每个节点包含以下字段：\n\n- 指向子节点的指针数组 $\\textit{children}$。对于本题而言，数组长度为 $26$，即小写英文字母的数量。此时 $\\textit{children}[0]$ 对应小写字母 $a$，$\\textit{children}[1]$ 对应小写字母 $b$，…，$\\textit{children}[25]$ 对应小写字母 $z$。\n- 布尔字段 $\\textit{isEnd}$，表示该节点是否为字符串的结尾。\n\n**插入字符串**\n\n我们从字典树的根开始，插入字符串。对于当前字符对应的子节点，有两种情况：\n\n- 子节点存在。沿着指针移动到子节点，继续处理下一个字符。\n- 子节点不存在。创建一个新的子节点，记录在 $\\textit{children}$ 数组的对应位置上，然后沿着指针移动到子节点，继续搜索下一个字符。\n\n重复以上步骤，直到处理字符串的最后一个字符，然后将当前节点标记为字符串的结尾。\n\n**查找前缀**\n\n我们从字典树的根开始，查找前缀。对于当前字符对应的子节点，有两种情况：\n\n- 子节点存在。沿着指针移动到子节点，继续搜索下一个字符。\n- 子节点不存在。说明字典树中不包含该前缀，返回空指针。\n\n重复以上步骤，直到返回空指针或搜索完前缀的最后一个字符。\n\n若搜索到了前缀的末尾，就说明字典树中存在该前缀。此外，若前缀末尾对应节点的 $\\textit{isEnd}$ 为真，则说明字典树中存在该字符串。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Trie {\nprivate:\n    vector<Trie*> children;\n    bool isEnd;\n\n    Trie* searchPrefix(string prefix) {\n        Trie* node = this;\n        for (char ch : prefix) {\n            ch -= 'a';\n            if (node->children[ch] == nullptr) {\n                return nullptr;\n            }\n            node = node->children[ch];\n        }\n        return node;\n    }\n\npublic:\n    Trie() : children(26), isEnd(false) {}\n\n    void insert(string word) {\n        Trie* node = this;\n        for (char ch : word) {\n            ch -= 'a';\n            if (node->children[ch] == nullptr) {\n                node->children[ch] = new Trie();\n            }\n            node = node->children[ch];\n        }\n        node->isEnd = true;\n    }\n\n    bool search(string word) {\n        Trie* node = this->searchPrefix(word);\n        return node != nullptr && node->isEnd;\n    }\n\n    bool startsWith(string prefix) {\n        return this->searchPrefix(prefix) != nullptr;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Trie {\n    private Trie[] children;\n    private boolean isEnd;\n\n    public Trie() {\n        children = new Trie[26];\n        isEnd = false;\n    }\n    \n    public void insert(String word) {\n        Trie node = this;\n        for (int i = 0; i < word.length(); i++) {\n            char ch = word.charAt(i);\n            int index = ch - 'a';\n            if (node.children[index] == null) {\n                node.children[index] = new Trie();\n            }\n            node = node.children[index];\n        }\n        node.isEnd = true;\n    }\n    \n    public boolean search(String word) {\n        Trie node = searchPrefix(word);\n        return node != null && node.isEnd;\n    }\n    \n    public boolean startsWith(String prefix) {\n        return searchPrefix(prefix) != null;\n    }\n\n    private Trie searchPrefix(String prefix) {\n        Trie node = this;\n        for (int i = 0; i < prefix.length(); i++) {\n            char ch = prefix.charAt(i);\n            int index = ch - 'a';\n            if (node.children[index] == null) {\n                return null;\n            }\n            node = node.children[index];\n        }\n        return node;\n    }\n}\n```\n\n```go [sol1-Golang]\ntype Trie struct {\n    children [26]*Trie\n    isEnd    bool\n}\n\nfunc Constructor() Trie {\n    return Trie{}\n}\n\nfunc (t *Trie) Insert(word string) {\n    node := t\n    for _, ch := range word {\n        ch -= 'a'\n        if node.children[ch] == nil {\n            node.children[ch] = &Trie{}\n        }\n        node = node.children[ch]\n    }\n    node.isEnd = true\n}\n\nfunc (t *Trie) SearchPrefix(prefix string) *Trie {\n    node := t\n    for _, ch := range prefix {\n        ch -= 'a'\n        if node.children[ch] == nil {\n            return nil\n        }\n        node = node.children[ch]\n    }\n    return node\n}\n\nfunc (t *Trie) Search(word string) bool {\n    node := t.SearchPrefix(word)\n    return node != nil && node.isEnd\n}\n\nfunc (t *Trie) StartsWith(prefix string) bool {\n    return t.SearchPrefix(prefix) != nil\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar Trie = function() {\n    this.children = {};\n};\n\nTrie.prototype.insert = function(word) {\n    let node = this.children;\n    for (const ch of word) {\n        if (!node[ch]) {\n            node[ch] = {};\n        }\n        node = node[ch];\n    }\n    node.isEnd = true;\n};\n\nTrie.prototype.searchPrefix = function(prefix) {\n    let node = this.children;\n    for (const ch of prefix) {\n        if (!node[ch]) {\n            return false;\n        }\n        node = node[ch];\n    }\n    return node;\n}\n\nTrie.prototype.search = function(word) {\n    const node = this.searchPrefix(word);\n    return node !== undefined && node.isEnd !== undefined;\n};\n\nTrie.prototype.startsWith = function(prefix) {\n    return this.searchPrefix(prefix);\n};\n```\n\n```Python [sol1-Python3]\nclass Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.isEnd = False\n    \n    def searchPrefix(self, prefix: str) -> \"Trie\":\n        node = self\n        for ch in prefix:\n            ch = ord(ch) - ord(\"a\")\n            if not node.children[ch]:\n                return None\n            node = node.children[ch]\n        return node\n\n    def insert(self, word: str) -> None:\n        node = self\n        for ch in word:\n            ch = ord(ch) - ord(\"a\")\n            if not node.children[ch]:\n                node.children[ch] = Trie()\n            node = node.children[ch]\n        node.isEnd = True\n\n    def search(self, word: str) -> bool:\n        node = self.searchPrefix(word)\n        return node is not None and node.isEnd\n\n    def startsWith(self, prefix: str) -> bool:\n        return self.searchPrefix(prefix) is not None\n```\n\n```C [sol1-C]\ntypedef struct Trie {\n    struct Trie* children[26];\n    bool isEnd;\n} Trie;\n\nTrie* trieCreate() {\n    Trie* ret = malloc(sizeof(Trie));\n    memset(ret->children, 0, sizeof(ret->children));\n    ret->isEnd = false;\n    return ret;\n}\n\nvoid trieInsert(Trie* obj, char* word) {\n    int n = strlen(word);\n    for (int i = 0; i < n; i++) {\n        int ch = word[i] - 'a';\n        if (obj->children[ch] == NULL) {\n            obj->children[ch] = trieCreate();\n        }\n        obj = obj->children[ch];\n    }\n    obj->isEnd = true;\n}\n\nbool trieSearch(Trie* obj, char* word) {\n    int n = strlen(word);\n    for (int i = 0; i < n; i++) {\n        int ch = word[i] - 'a';\n        if (obj->children[ch] == NULL) {\n            return false;\n        }\n        obj = obj->children[ch];\n    }\n    return obj->isEnd;\n}\n\nbool trieStartsWith(Trie* obj, char* prefix) {\n    int n = strlen(prefix);\n    for (int i = 0; i < n; i++) {\n        int ch = prefix[i] - 'a';\n        if (obj->children[ch] == NULL) {\n            return false;\n        }\n        obj = obj->children[ch];\n    }\n    return true;\n}\n\nvoid trieFree(Trie* obj) {\n    for (int i = 0; i < 26; i++) {\n        if (obj->children[i]) {\n            trieFree(obj->children[i]);\n        }\n    }\n    free(obj);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：初始化为 $O(1)$，其余操作为 $O(|S|)$，其中 $|S|$ 是每次插入或查询的字符串的长度。\n\n- 空间复杂度：$O(|T|\\cdot\\Sigma)$，其中 $|T|$ 为所有插入字符串的长度之和，$\\Sigma$ 为字符集的大小，本题 $\\Sigma=26$。"
}