{
	"titleSlug": "execution-of-all-suffix-instructions-staying-in-a-grid",
	"slug": "zhi-xing-suo-you-hou-zhui-zhi-ling-by-le-scvh",
	"url": "https://leetcode-cn.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/solution/zhi-xing-suo-you-hou-zhui-zhi-ling-by-le-scvh/",
	"content": "#### 方法一：模拟\n\n**思路与算法**\n\n我们直接从每一条指令开始，模拟机器人的运动路径即可。具体地，从第 $i$ 条指令开始时，我们首先讲机器人置于 $\\textit{startPos}$ 的位置，随后逐条执行指令。当遇到第 $j$ 条 $\\text{L, R, U, D}$ 指令时，机器人会分别向左、右、上、下移动一个位置。如果机器人移动到了网格外，那么它可以执行 $j - i$ 条指令。如果在所有指令执行完毕后，机器人仍然位于网格内，那么它可以执行全部的 $m - i$ 条指令。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> executeInstructions(int n, vector<int>& startPos, string s) {\n        int m = s.size();\n        vector<int> ans;\n        for (int i = 0; i < m; ++i) {\n            int x = startPos[0], y = startPos[1];\n            int cnt = m - i;\n            for (int j = i; j < m; ++j) {\n                char ch = s[j];\n                if (ch == 'L') {\n                    --y;\n                }\n                else if (ch == 'R') {\n                    ++y;\n                }\n                else if (ch == 'U') {\n                    --x;\n                }\n                else {\n                    ++x;\n                }\n                if (x < 0 || x >= n || y < 0 || y >= n) {\n                    cnt = j - i;\n                    break;\n                }\n            }\n            ans.push_back(cnt);\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def executeInstructions(self, n: int, startPos: List[int], s: str) -> List[int]:\n        m = len(s)\n        ans = list()\n        for i in range(m):\n            x, y = startPos\n            cnt = m - i\n            for j in range(i, m):\n                ch = s[j]\n                if ch == \"L\":\n                    y -= 1\n                elif ch == \"R\":\n                    y += 1\n                elif ch == \"U\":\n                    x -= 1\n                else:\n                    x += 1\n                if x < 0 or x >= n or y < 0 or y >= n:\n                    cnt = j - i\n                    break\n            ans.append(cnt)\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m^2)$。\n\n- 空间复杂度：$O(1)$。"
}