{
	"titleSlug": "fancy-sequence",
	"slug": "by-masx200-ycpn",
	"url": "https://leetcode-cn.com/problems/fancy-sequence/solution/by-masx200-ycpn/",
	"content": "### 解题思路\n前缀和+乘法逆元+快速幂\nhttps://leetcode.cn/problems/fancy-sequence/solution/qi-miao-xu-lie-by-zerotrac2/\n### 代码\n432 ms\t35.5 MB\n```golang\n\n\ntype Fancy struct {\n\tv, a, b []int\n}\n\nfunc Constructor() Fancy {\n\treturn Fancy{\n\t\ta: []int{1}, b: []int{0},\n\t}\n}\n\nfunc (f *Fancy) Append(val int) {\n\tf.v = append(f.v, val)\n\tf.a = append(f.a, f.a[len(f.a)-1])\n\tf.b = append(f.b, f.b[len(f.b)-1])\n}\n\nfunc (f *Fancy) AddAll(inc int) {\n\tf.b[len(f.b)-1] = (f.b[len(f.b)-1] + inc) % mod\n}\n\nfunc (f *Fancy) MultAll(m int) {\n\tf.a[len(f.a)-1] = (f.a[len(f.a)-1] * m) % mod\n\tf.b[len(f.b)-1] = (f.b[len(f.b)-1] * m) % mod\n}\n\nfunc (f *Fancy) GetIndex(idx int) int {\n\tif idx >= len(f.v) {\n\t\treturn -1\n\t}\n\tao := (MultiplicativeInverse(f.a[idx], mod) * f.a[len(f.a)-1]) % mod\n\tbo := (f.b[len(f.b)-1] - f.b[idx]*ao%mod + mod) % mod\n\treturn (ao*f.v[idx]%mod + bo) % mod\n}\nfunc PowMod(x, y, m int) int {\n\tmod := int64(m)\n\tvar ret int64 = 1\n\tvar cur int64 = int64(x)\n\tfor y != 0 {\n\t\tif y&1 != 0 {\n\t\t\tret = (ret) * cur % mod\n\t\t}\n\t\tcur = cur * cur % mod\n\t\ty >>= 1\n\t}\n\treturn int(ret)\n}\nfunc MultiplicativeInverse(x, m int) int {\n\treturn PowMod(x, m-2, m)\n}\n\nconst mod = 1000000007\n\n```"
}