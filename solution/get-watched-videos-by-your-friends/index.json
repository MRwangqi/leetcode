{
	"titleSlug": "get-watched-videos-by-your-friends",
	"slug": "huo-qu-ni-hao-you-yi-guan-kan-de-shi-pin-by-leet-2",
	"url": "https://leetcode-cn.com/problems/get-watched-videos-by-your-friends/solution/huo-qu-ni-hao-you-yi-guan-kan-de-shi-pin-by-leet-2/",
	"content": "#### 说明\n\n本题将几个面试中常考的知识点（广度优先搜索、Set/Map 的应用、排序）进行了结合。题目本身的难度不大，但需要仔细考虑清楚每一个模块之间的关系，并且能尽量做到一次性通过，否则调试起来会较为复杂。\n\n#### 方法一：广度优先搜索\n\n##### 步骤一：找出所有 Level k 的好友\n\n我们可以使用广度优先搜索的方法，从编号为 `id` 的节点开始搜索，得到从 `id` 到其余所有节点的最短路径，则所有到 `id` 的最短路径为 `k` 的节点都是 Level k 的好友。\n\n具体地，我们使用一个队列帮助我们进行搜索。队列中初始只有编号为 `id` 的节点。我们进行 `k` 轮搜索，在第 `i` 轮搜索开始前，队列中的节点是所有 Level i-1 的好友，而我们希望从这些节点得到所有 Level i 的好友。我们依次取出这些 Level i-1 的节点，设当前取出的节点为 `x`，我们遍历 `x` 的所有好友 `friends[x]`，如果某个好友未被访问过，那么我们就能知道其为 Level i 的好友，可以将其加入队列。在 `k` 轮搜索结束之后，队列中就包含了所有 Level k 的好友。\n\n##### 步骤二：统计好友观看过的视频\n\n我们使用一个哈希映射（HashMap）来统计 Level k 的好友观看过的视频。对于哈希映射中的每个键值对，键表示视频的名称，值表示视频被好友观看过的次数。对于队列中的每个节点 `x`，我们将 `watchedVideos[x]` 中的所有视频依次加入哈希映射，就可以完成这一步骤。\n\n##### 步骤三：将视频按照要求排序\n\n在统计完成之后，我们将哈希映射中的所有键值对存储进数组中，并将它们按照观看次数为第一关键字、视频名称为第二关键字生序排序，即可得到最终的结果。\n\n\n```C++ [sol1-C++]\nusing PSI = pair<string, int>;\n\nclass Solution {\npublic:\n    vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {\n        int n = friends.size();\n        vector<bool> used(n);\n        queue<int> q;\n        q.push(id);\n        used[id] = true;\n        for (int _ = 1; _ <= level; ++_) {\n            int span = q.size();\n            for (int i = 0; i < span; ++i) {\n                int u = q.front();\n                q.pop();\n                for (int v: friends[u]) {\n                    if (!used[v]) {\n                        q.push(v);\n                        used[v] = true;\n                    }\n                }\n            }\n        }\n        \n        unordered_map<string, int> freq;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (const string& watched: watchedVideos[u]) {\n                ++freq[watched];\n            }\n        }\n        \n        vector<PSI> videos(freq.begin(), freq.end());\n        sort(videos.begin(), videos.end(), [](const PSI& p, const PSI& q) {\n            return p.second < q.second || (p.second == q.second && p.first < q.first);\n        });\n        \n        vector<string> ans;\n        for (const PSI& video: videos) {\n            ans.push_back(video.first);\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def watchedVideosByFriends(self, watchedVideos: List[List[str]], friends: List[List[int]], id: int, level: int) -> List[str]:\n        n = len(friends)\n        used = [False] * n\n        q = collections.deque([id])\n        used[id] = True\n        for _ in range(level):\n            span = len(q)\n            for i in range(span):\n                u = q.popleft()\n                for v in friends[u]:\n                    if not used[v]:\n                        q.append(v)\n                        used[v] = True\n        \n        freq = collections.Counter()\n        for _ in range(len(q)):\n            u = q.pop()\n            for watched in watchedVideos[u]:\n                freq[watched] += 1\n\n        videos = list(freq.items())\n        videos.sort(key=lambda x: (x[1], x[0]))\n\n        ans = [video[0] for video in videos]\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N + M + V\\log V)$，其中 $N$ 是人数，$M$ 是好友关系的总数，$V$ 是电影的总数。\n\n- 空间复杂度：$O(N + V)$。"
}