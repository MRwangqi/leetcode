{
	"titleSlug": "valid-parenthesis-string",
	"slug": "you-xiao-de-gua-hao-zi-fu-chuan-by-leetc-osi3",
	"url": "https://leetcode-cn.com/problems/valid-parenthesis-string/solution/you-xiao-de-gua-hao-zi-fu-chuan-by-leetc-osi3/",
	"content": "#### 方法一：动态规划\n\n要判断 $s$ 是否为有效的括号字符串，需要判断 $s$ 的首尾字符以及 $s$ 的中间字符是否符合有效的括号字符串的要求。可以使用动态规划求解。\n\n假设字符串 $s$ 的长度为 $n$。定义 $\\textit{dp}[i][j]$ 表示字符串 $s$ 从下标 $i$ 到 $j$ 的子串是否为有效的括号字符串，其中 $0 \\le i \\le j < n$。\n\n动态规划的边界情况是子串的长度为 $1$ 或 $2$ 的情况。\n\n- 当子串的长度为 $1$ 时，只有当该字符是 $\\text{`*'}$ 时，才是有效的括号字符串，此时子串可以看成空字符串；\n\n- 当子串的长度为 $2$ 时，只有当两个字符是 $\\text{``()\"}, \\text{``(*\"}, \\text{``*)\"}, \\text{``**\"}$ 中的一种情况时，才是有效的括号字符串，此时子串可以看成 $\\text{``()\"}$。\n\n当子串的长度大于 $2$ 时，需要根据子串的首尾字符以及中间的字符判断子串是否为有效的括号字符串。字符串 $s$ 从下标 $i$ 到 $j$ 的子串的长度大于 $2$ 等价于 $j - i \\ge 2$，此时 $\\textit{dp}[i][j]$ 的计算如下，只要满足以下一个条件就有 $\\textit{dp}[i][j] = \\text{true}$：\n\n- 如果 $s[i]$ 和 $s[j]$ 分别为左括号和右括号，或者为 $\\text{`*'}$，则当 $\\textit{dp}[i + 1][j - 1] = \\text{true}$ 时，$\\textit{dp}[i][j] = \\text{true}$，此时 $s[i]$ 和 $s[j]$ 可以分别看成左括号和右括号；\n\n- 如果存在 $i \\le k < j$ 使得 $\\textit{dp}[i][k]$ 和 $\\textit{dp}[k + 1][j]$ 都为 $\\textit{true}$，则 $\\textit{dp}[i][j] = \\text{true}$，因为字符串 $s$ 的下标范围 $[i, k]$ 和 $[k + 1, j]$ 的子串分别为有效的括号字符串，将两个子串拼接之后的子串也为有效的括号字符串，对应下标范围 $[i, j]$。\n\n上述计算过程为从较短的子串的结果得到较长的子串的结果，因此需要注意动态规划的计算顺序。最终答案为 $\\textit{dp}[0][n - 1]$。\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean checkValidString(String s) {\n        int n = s.length();\n        boolean[][] dp = new boolean[n][n];\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '*') {\n                dp[i][i] = true;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            char c1 = s.charAt(i - 1), c2 = s.charAt(i);\n            dp[i - 1][i] = (c1 == '(' || c1 == '*') && (c2 == ')' || c2 == '*');\n        }\n        for (int i = n - 3; i >= 0; i--) {\n            char c1 = s.charAt(i);\n            for (int j = i + 2; j < n; j++) {\n                char c2 = s.charAt(j);\n                if ((c1 == '(' || c1 == '*') && (c2 == ')' || c2 == '*')) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                }\n                for (int k = i; k < j && !dp[i][j]; k++) {\n                    dp[i][j] = dp[i][k] && dp[k + 1][j];\n                }\n            }\n        }\n        return dp[0][n - 1];\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool CheckValidString(string s) {\n        int n = s.Length;\n        bool[,] dp = new bool[n, n];\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '*') {\n                dp[i, i] = true;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            char c1 = s[i - 1], c2 = s[i];\n            dp[i - 1, i] = (c1 == '(' || c1 == '*') && (c2 == ')' || c2 == '*');\n        }\n        for (int i = n - 3; i >= 0; i--) {\n            char c1 = s[i];\n            for (int j = i + 2; j < n; j++) {\n                char c2 = s[j];\n                if ((c1 == '(' || c1 == '*') && (c2 == ')' || c2 == '*')) {\n                    dp[i, j] = dp[i + 1, j - 1];\n                }\n                for (int k = i; k < j && !dp[i, j]; k++) {\n                    dp[i, j] = dp[i, k] && dp[k + 1, j];\n                }\n            }\n        }\n        return dp[0, n - 1];\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar checkValidString = function(s) {\n    const n = s.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(false));\n    for (let i = 0; i < n; i++) {\n        if (s[i] === '*') {\n            dp[i][i] = true;\n        }\n    }\n    for (let i = 1; i < n; i++) {\n        const c1 = s[i - 1], c2 = s[i];\n        dp[i - 1][i] = (c1 === '(' || c1 === '*') && (c2 === ')' || c2 === '*');\n    }\n    for (let i = n - 3; i >= 0; i--) {\n        const c1 = s[i];\n        for (let j = i + 2; j < n; j++) {\n            const c2 = s[j];\n            if ((c1 === '(' || c1 === '*') && (c2 === ')' || c2 === '*')) {\n                dp[i][j] = dp[i + 1][j - 1];\n            }\n            for (let k = i; k < j && !dp[i][j]; k++) {\n                dp[i][j] = dp[i][k] && dp[k + 1][j];\n            }\n        }\n    }\n    return dp[0][n - 1];\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool checkValidString(string s) {\n        int n = s.size();\n        vector<vector<bool>> dp = vector<vector<bool>>(n,vector<bool>(n,false));\n\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '*') {\n                dp[i][i] = true;\n            }\n        }\n\n        for (int i = 1; i < n; i++) {\n            char c1 = s[i - 1]; \n            char c2 = s[i];\n            dp[i - 1][i] = (c1 == '(' || c1 == '*') && (c2 == ')' || c2 == '*');\n        }\n\n        for (int i = n - 3; i >= 0; i--) {\n            char c1 = s[i];\n            for (int j = i + 2; j < n; j++) {\n                char c2 = s[j];\n                if ((c1 == '(' || c1 == '*') && (c2 == ')' || c2 == '*')) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                }\n                for (int k = i; k < j && !dp[i][j]; k++) {\n                    dp[i][j] = dp[i][k] && dp[k + 1][j];\n                }\n            }\n        }\n        return dp[0][n - 1];\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc checkValidString(s string) bool {\n    n := len(s)\n    dp := make([][]bool, n)\n    for i := range dp {\n        dp[i] = make([]bool, n)\n    }\n    for i, ch := range s {\n        if ch == '*' {\n            dp[i][i] = true\n        }\n    }\n\n    for i := 1; i < n; i++ {\n        c1, c2 := s[i-1], s[i]\n        dp[i-1][i] = (c1 == '(' || c1 == '*') && (c2 == ')' || c2 == '*')\n    }\n\n    for i := n - 3; i >= 0; i-- {\n        c1 := s[i]\n        for j := i + 2; j < n; j++ {\n            c2 := s[j]\n            if (c1 == '(' || c1 == '*') && (c2 == ')' || c2 == '*') {\n                dp[i][j] = dp[i+1][j-1]\n            }\n            for k := i; k < j && !dp[i][j]; k++ {\n                dp[i][j] = dp[i][k] && dp[k+1][j]\n            }\n        }\n    }\n\n    return dp[0][n-1]\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^3)$，其中 $n$ 是字符串 $s$ 的长度。动态规划的状态数是 $O(n^2)$，每个状态的计算时间最多为 $O(n)$。\n\n- 空间复杂度：$O(n^2)$，其中 $n$ 是字符串 $s$ 的长度。创建了 $n$ 行 $n$ 列的二维数组 $\\textit{dp}$。\n\n#### 方法二：栈\n\n括号匹配的问题可以用栈求解。\n\n如果字符串中没有星号，则只需要一个栈存储左括号，在从左到右遍历字符串的过程中检查括号是否匹配。\n\n在有星号的情况下，需要两个栈分别存储左括号和星号。从左到右遍历字符串，进行如下操作。\n\n- 如果遇到左括号，则将当前下标存入左括号栈。\n\n- 如果遇到星号，则将当前下标存入星号栈。\n\n- 如果遇到右括号，则需要有一个左括号或星号和右括号匹配，由于星号也可以看成右括号或者空字符串，因此当前的右括号应优先和左括号匹配，没有左括号时和星号匹配：\n\n   1. 如果左括号栈不为空，则从左括号栈弹出栈顶元素；\n\n   2. 如果左括号栈为空且星号栈不为空，则从星号栈弹出栈顶元素；\n\n   3. 如果左括号栈和星号栈都为空，则没有字符可以和当前的右括号匹配，返回 $\\text{false}$。\n\n遍历结束之后，左括号栈和星号栈可能还有元素。为了将每个左括号匹配，需要将星号看成右括号，且每个左括号必须出现在其匹配的星号之前。当两个栈都不为空时，每次从左括号栈和星号栈分别弹出栈顶元素，对应左括号下标和星号下标，判断是否可以匹配，匹配的条件是左括号下标小于星号下标，如果左括号下标大于星号下标则返回 $\\text{false}$。\n\n最终判断左括号栈是否为空。如果左括号栈为空，则左括号全部匹配完毕，剩下的星号都可以看成空字符串，此时 $s$ 是有效的括号字符串，返回 $\\text{true}$。如果左括号栈不为空，则还有左括号无法匹配，此时 $s$ 不是有效的括号字符串，返回 $\\text{false}$。\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean checkValidString(String s) {\n        Deque<Integer> leftStack = new LinkedList<Integer>();\n        Deque<Integer> asteriskStack = new LinkedList<Integer>();\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            if (c == '(') {\n                leftStack.push(i);\n            } else if (c == '*') {\n                asteriskStack.push(i);\n            } else {\n                if (!leftStack.isEmpty()) {\n                    leftStack.pop();\n                } else if (!asteriskStack.isEmpty()) {\n                    asteriskStack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        while (!leftStack.isEmpty() && !asteriskStack.isEmpty()) {\n            int leftIndex = leftStack.pop();\n            int asteriskIndex = asteriskStack.pop();\n            if (leftIndex > asteriskIndex) {\n                return false;\n            }\n        }\n        return leftStack.isEmpty();\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public bool CheckValidString(string s) {\n        Stack<int> leftStack = new Stack<int>();\n        Stack<int> asteriskStack = new Stack<int>();\n        int n = s.Length;\n        for (int i = 0; i < n; i++) {\n            char c = s[i];\n            if (c == '(') {\n                leftStack.Push(i);\n            } else if (c == '*') {\n                asteriskStack.Push(i);\n            } else {\n                if (leftStack.Count > 0) {\n                    leftStack.Pop();\n                } else if (asteriskStack.Count > 0) {\n                    asteriskStack.Pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        while (leftStack.Count > 0 && asteriskStack.Count > 0) {\n            int leftIndex = leftStack.Pop();\n            int asteriskIndex = asteriskStack.Pop();\n            if (leftIndex > asteriskIndex) {\n                return false;\n            }\n        }\n        return leftStack.Count == 0;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar checkValidString = function(s) {\n    const leftStack = [];\n    const asteriskStack = [];\n    const n = s.length;\n    for (let i = 0; i < n; i++) {\n        const c = s[i];\n        if (c === '(') {\n            leftStack.push(i);\n        } else if (c === '*') {\n            asteriskStack.push(i);\n        } else {\n            if (leftStack.length) {\n                leftStack.pop();\n            } else if (asteriskStack.length) {\n                asteriskStack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    while (leftStack.length && asteriskStack.length) {\n        const leftIndex = leftStack.pop();\n        const asteriskIndex = asteriskStack.pop();\n        if (leftIndex > asteriskIndex) {\n            return false;\n        }\n    }\n    return leftStack.length === 0;\n};\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool checkValidString(string s) {\n        stack<int> leftStack;\n        stack<int> asteriskStack;\n        int n = s.size();\n\n        for (int i = 0; i < n; i++) {\n            char c = s[i];\n            if (c == '(') {\n                leftStack.push(i);\n            } else if (c == '*') {\n                asteriskStack.push(i);\n            } else {\n                if (!leftStack.empty()) {\n                    leftStack.pop();\n                } else if (!asteriskStack.empty()) {\n                    asteriskStack.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        while (!leftStack.empty() && !asteriskStack.empty()) {\n            int leftIndex = leftStack.top();\n            leftStack.pop();\n            int asteriskIndex = asteriskStack.top();\n            asteriskStack.pop();\n            if (leftIndex > asteriskIndex) {\n                return false;\n            }\n        }\n        \n        return leftStack.empty();\n    }\n};\n```\n\n```go [sol2-Golang]\nfunc checkValidString(s string) bool {\n    var leftStk, asteriskStk []int\n    for i, ch := range s {\n        if ch == '(' {\n            leftStk = append(leftStk, i)\n        } else if ch == '*' {\n            asteriskStk = append(asteriskStk, i)\n        } else if len(leftStk) > 0 {\n            leftStk = leftStk[:len(leftStk)-1]\n        } else if len(asteriskStk) > 0 {\n            asteriskStk = asteriskStk[:len(asteriskStk)-1]\n        } else {\n            return false\n        }\n    }\n    i := len(leftStk) - 1\n    for j := len(asteriskStk) - 1; i >= 0 && j >= 0; i, j = i-1, j-1 {\n        if leftStk[i] > asteriskStk[j] {\n            return false\n        }\n    }\n    return i < 0\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度。需要遍历字符串一次，遍历过程中每个字符的操作时间都是 $O(1)$，遍历结束之后对左括号栈和星号栈弹出元素的操作次数不会超过 $n$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度。空间复杂度主要取决于左括号栈和星号栈，两个栈的元素总数不会超过 $n$。\n\n#### 方法三：贪心\n\n使用贪心的思想，可以将空间复杂度降到 $O(1)$。\n\n从左到右遍历字符串，遍历过程中，未匹配的左括号数量可能会出现如下变化：\n\n- 如果遇到左括号，则未匹配的左括号数量加 $1$；\n\n- 如果遇到右括号，则需要有一个左括号和右括号匹配，因此未匹配的左括号数量减 $1$；\n\n- 如果遇到星号，由于星号可以看成左括号、右括号或空字符串，因此未匹配的左括号数量可能加 $1$、减 $1$ 或不变。\n\n基于上述结论，可以在遍历过程中维护未匹配的左括号数量可能的最小值和最大值，根据遍历到的字符更新最小值和最大值：\n\n- 如果遇到左括号，则将最小值和最大值分别加 $1$；\n\n- 如果遇到右括号，则将最小值和最大值分别减 $1$；\n\n- 如果遇到星号，则将最小值减 $1$，将最大值加 $1$。\n\n任何情况下，未匹配的左括号数量必须非负，因此当最大值变成负数时，说明没有左括号可以和右括号匹配，返回 $\\text{false}$。\n\n当最小值为 $0$ 时，不应将最小值继续减少，以确保最小值非负。\n\n遍历结束时，所有的左括号都应和右括号匹配，因此只有当最小值为 $0$ 时，字符串 $s$ 才是有效的括号字符串。\n\n```Java [sol3-Java]\nclass Solution {\n    public boolean checkValidString(String s) {\n        int minCount = 0, maxCount = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            if (c == '(') {\n                minCount++;\n                maxCount++;\n            } else if (c == ')') {\n                minCount = Math.max(minCount - 1, 0);\n                maxCount--;\n                if (maxCount < 0) {\n                    return false;\n                }\n            } else {\n                minCount = Math.max(minCount - 1, 0);\n                maxCount++;\n            }\n        }\n        return minCount == 0;\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public bool CheckValidString(string s) {\n        int minCount = 0, maxCount = 0;\n        int n = s.Length;\n        for (int i = 0; i < n; i++) {\n            char c = s[i];\n            if (c == '(') {\n                minCount++;\n                maxCount++;\n            } else if (c == ')') {\n                minCount = Math.Max(minCount - 1, 0);\n                maxCount--;\n                if (maxCount < 0) {\n                    return false;\n                }\n            } else {\n                minCount = Math.Max(minCount - 1, 0);\n                maxCount++;\n            }\n        }\n        return minCount == 0;\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar checkValidString = function(s) {\n    let minCount = 0, maxCount = 0;\n    const n = s.length;\n    for (let i = 0; i < n; i++) {\n        const c = s[i];\n        if (c === '(') {\n            minCount++;\n            maxCount++;\n        } else if (c === ')') {\n            minCount = Math.max(minCount - 1, 0);\n            maxCount--;\n            if (maxCount < 0) {\n                return false;\n            }\n        } else {\n            minCount = Math.max(minCount - 1, 0);\n            maxCount++;\n        }\n    }\n    return minCount === 0;\n};\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    bool checkValidString(string s) {\n        int minCount = 0, maxCount = 0;\n        int n = s.size();\n        for (int i = 0; i < n; i++) {\n            char c = s[i];\n            if (c == '(') {\n                minCount++;\n                maxCount++;\n            } else if (c == ')') {\n                minCount = max(minCount - 1, 0);\n                maxCount--;\n                if (maxCount < 0) {\n                    return false;\n                }\n            } else {\n                minCount = max(minCount - 1, 0);\n                maxCount++;\n            }\n        }\n        return minCount == 0;\n    }\n};\n```\n\n```go [sol3-Golang]\nfunc checkValidString(s string) bool {\n    minCount, maxCount := 0, 0\n    for _, ch := range s {\n        if ch == '(' {\n            minCount++\n            maxCount++\n        } else if ch == ')' {\n            minCount = max(minCount-1, 0)\n            maxCount--\n            if maxCount < 0 {\n                return false\n            }\n        } else {\n            minCount = max(minCount-1, 0)\n            maxCount++\n        }\n    }\n    return minCount == 0\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度。需要遍历字符串一次。\n\n- 空间复杂度：$O(1)$。"
}