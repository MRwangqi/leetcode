{
	"titleSlug": "print-foobar-alternately",
	"slug": "duo-xian-cheng-liu-mai-shen-jian-ni-xue-d220n",
	"url": "https://leetcode-cn.com/problems/print-foobar-alternately/solution/duo-xian-cheng-liu-mai-shen-jian-ni-xue-d220n/",
	"content": "```\n\n//手太阴肺经 BLOCKING Queue\npublic class FooBar {\n    private int n;\n    private BlockingQueue<Integer> bar = new LinkedBlockingQueue<>(1);\n    private BlockingQueue<Integer> foo = new LinkedBlockingQueue<>(1);\n    public FooBar(int n) {\n        this.n = n;\n    }\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            foo.put(i);\n            printFoo.run();\n            bar.put(i);\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            bar.take();\n            printBar.run();\n            foo.take();\n        }\n    }\n}\n\n//手阳明大肠经CyclicBarrier 控制先后\nclass FooBar6 {\n    private int n;\n\n    public FooBar6(int n) {\n        this.n = n;\n    }\n\n    CyclicBarrier cb = new CyclicBarrier(2);\n    volatile boolean fin = true;\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            while(!fin);\n            printFoo.run();\n            fin = false;\n            try {\n                cb.await();\n            } catch (BrokenBarrierException e) {}\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            try {\n                cb.await();\n            } catch (BrokenBarrierException e) {}\n            printBar.run();\n            fin = true;\n        }\n    }\n}\n\n//手少阴心经 自旋 + 让出CPU\nclass FooBar5 {\n    private int n;\n\n    public FooBar5(int n) {\n        this.n = n;\n    }\n\n    volatile boolean permitFoo = true;\n\n    public void foo(Runnable printFoo) throws InterruptedException {     \n        for (int i = 0; i < n; ) {\n            if(permitFoo) {\n        \t    printFoo.run();\n            \ti++;\n            \tpermitFoo = false;\n            }else{\n                Thread.yield();\n            }\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {       \n        for (int i = 0; i < n; ) {\n            if(!permitFoo) {\n        \tprintBar.run();\n        \ti++;\n        \tpermitFoo = true;\n            }else{\n                Thread.yield();\n            }\n        }\n    }\n}\n\n\n\n//手少阳三焦经 可重入锁 + Condition\nclass FooBar4 {\n    private int n;\n\n    public FooBar4(int n) {\n        this.n = n;\n    }\n    Lock lock = new ReentrantLock(true);\n    private final Condition foo = lock.newCondition();\n    volatile boolean flag = true;\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            lock.lock();\n            try {\n            \twhile(!flag) {\n                    foo.await();\n                }\n                printFoo.run();\n                flag = false;\n                foo.signal();\n            }finally {\n            \tlock.unlock();\n            }\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n;i++) {\n            lock.lock();\n            try {\n            \twhile(flag) {\n                    foo.await();\n            \t}\n                printBar.run();\n                flag = true;\n                foo.signal();\n            }finally {\n            \tlock.unlock();\n            }\n        }\n    }\n}\n\n//手厥阴心包经 synchronized + 标志位 + 唤醒\nclass FooBar3 {\n    private int n;\n    // 标志位，控制执行顺序，true执行printFoo，false执行printBar\n    private volatile boolean type = true;\n    private final Object foo=  new Object(); // 锁标志\n\n    public FooBar3(int n) {\n        this.n = n;\n    }\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            synchronized (foo) {\n                while(!type){\n                    foo.wait();\n                }\n                printFoo.run();\n                type = false;\n                foo.notifyAll();\n            }\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            synchronized (foo) {\n                while(type){\n                    foo.wait();\n                }\n                printBar.run();\n                type = true;\n                foo.notifyAll();\n            }\n        }\n    }\n}\n\n\n//手太阳小肠经 信号量 适合控制顺序\nclass FooBar2 {\n    private int n;\n    private Semaphore foo = new Semaphore(1);\n    private Semaphore bar = new Semaphore(0);\n    public FooBar2(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            foo.acquire();\n        \tprintFoo.run();\n            bar.release();\n        }\n    }\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n; i++) {\n            bar.acquire();\n        \tprintBar.run();\n            foo.release();\n        }\n    }\n}\n```\n"
}