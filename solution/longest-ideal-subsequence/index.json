{
	"titleSlug": "longest-ideal-subsequence",
	"slug": "by-endlesscheng-t7zf",
	"url": "https://leetcode-cn.com/problems/longest-ideal-subsequence/solution/by-endlesscheng-t7zf/",
	"content": "[视频讲解](https://www.bilibili.com/video/BV1CN4y1V7uE) 已出炉，欢迎点赞三连，在评论区分享你对这场周赛的看法~\r\n \r\n---\r\n\r\n看到**子序列**和**相邻**就可以往 DP 上想（回顾一下经典题 [300. 最长递增子序列](https://leetcode.cn/problems/longest-increasing-subsequence/)，它也是**子序列**和**相邻**）。\r\n\r\n字符串题目套路：枚举字符。定义 $f[i][c]$ 表示 $s$ 的前 $i$ 个字母中的以 $c$ 结尾的理想字符串的最长长度。\r\n\r\n根据题意：\r\n\r\n- 选 $s[i]$ 作为理想字符串中的字符，需要从 $f[i-1]$ 中的 $[s[i]-k,s[i]+k]$ 范围内的字符转移过来，即\r\n\r\n  $$\r\n  f[i][s[i]] = 1 + \\max_{c=\\max(s[i]-k,0)}^{\\min(s[i]+k,25)} f[i-1][c]\r\n  $$\r\n\r\n- 其余情况，$f[i][c] = f[i-1][c]$。\r\n\r\n答案为 $\\max(f[n-1])$。\r\n\r\n代码实现时第一维可以压缩掉。\r\n\r\n#### 复杂度分析\r\n\r\n- 时间复杂度：$O(nk)$，其中 $n$ 为 $s$ 的长度。\r\n- 空间复杂度：$O(|\\Sigma|)$，其中 $|\\Sigma|$ 为字符集合的大小，本题中字符均为小写字母，所以 $|\\Sigma|=26$。\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def longestIdealString(self, s: str, k: int) -> int:\r\n        f = [0] * 26\r\n        for c in s:\r\n            c = ord(c) - ord('a')\r\n            f[c] = 1 + max(f[max(c - k, 0): c + k + 1])\r\n        return max(f)\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    public int longestIdealString(String s, int k) {\r\n        var f = new int[26];\r\n        for (var i = 0; i < s.length(); i++) {\r\n            var c = s.charAt(i) - 'a';\r\n            for (var j = Math.max(c - k, 0); j <= Math.min(c + k, 25); j++)\r\n                f[c] = Math.max(f[c], f[j]);\r\n            f[c]++;\r\n        }\r\n        return Arrays.stream(f).max().getAsInt();\r\n    }\r\n}\r\n```\r\n\r\n```cpp [sol1-C++]\r\nclass Solution {\r\npublic:\r\n    int longestIdealString(string &s, int k) {\r\n        int f[26] = {};\r\n        for (char c : s) {\r\n            c -= 'a';\r\n            f[c] = 1 + *max_element(f + max(c - k, 0), f + min(c + k + 1, 26));\r\n        }\r\n        return *max_element(f, f + 26);\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc longestIdealString(s string, k int) (ans int) {\r\n\tf := [26]int{}\r\n\tfor _, c := range s {\r\n\t\tc := int(c - 'a')\r\n\t\tfor _, v := range f[max(c-k, 0):min(c+k+1, 26)] {\r\n\t\t\tf[c] = max(f[c], v)\r\n\t\t}\r\n\t\tf[c]++\r\n\t}\r\n\tfor _, v := range f {\r\n\t\tans = max(ans, v)\r\n\t}\r\n\treturn\r\n}\r\n\r\nfunc min(a, b int) int { if b < a { return b }; return a }\r\nfunc max(a, b int) int { if b > a { return b }; return a }\r\n```\r\n"
}