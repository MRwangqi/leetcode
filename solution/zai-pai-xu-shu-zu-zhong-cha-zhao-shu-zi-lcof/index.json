{
	"titleSlug": "zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof",
	"slug": "zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-wl6kr",
	"url": "https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/solution/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-wl6kr/",
	"content": "### 📺 视频题解  \n![...- 1：在排序数组中查找数字I.mp4](f9da6d51-f18c-4139-8b69-4261c1bfd331)\n\n### 📖 文字题解\n\n#### 方法一：二分查找\n\n直观的思路肯定是从前往后遍历一遍。用两个变量记录第一次和最后一次遇见 $\\textit{target}$ 的下标，但这个方法的时间复杂度为 $O(n)$，没有利用到数组**升序排列**的条件。\n\n由于数组已经排序，因此整个数组是**单调递增**的，我们可以利用二分法来加速查找的过程。\n\n考虑 $\\textit{target}$ 在数组中出现的次数，其实我们要找的就是数组中「第一个等于 $\\textit{target}$ 的位置」（记为 $\\textit{leftIdx}$）和「第一个大于 $\\textit{target}$ 的位置**减一**」（记为 $\\textit{rightIdx}$）。当 $\\textit{target}$ 在数组中存在时，$\\textit{target}$ 在数组中出现的次数为 $\\textit{rightIdx}-\\textit{leftIdx}+1$。\n\n二分查找中，寻找 $\\textit{leftIdx}$ 即为在数组中寻找第一个**大于等于** $\\textit{target}$ 的下标，寻找 $\\textit{rightIdx}$ 即为在数组中寻找第一个**大于** $\\textit{target}$ 的下标，然后将下标减一。两者的判断条件不同，为了代码的复用，我们定义 `binarySearch(nums, target, lower)` 表示在 $\\textit{nums}$ 数组中二分查找 $\\textit{target}$ 的位置，如果 $\\textit{lower}$ 为 $\\rm true$，则查找第一个**大于等于** $\\textit{target}$ 的下标，否则查找第一个**大于** $\\textit{target}$ 的下标。\n\n最后，因为 $\\textit{target}$ 可能不存在数组中，因此我们需要重新校验我们得到的两个下标 $\\textit{leftIdx}$ 和 $\\textit{rightIdx}$，看是否符合条件，如果符合条件就返回 $\\textit{rightIdx}-\\textit{leftIdx}+1$，不符合就返回 $0$。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/jianzhi_53_I/14.png)>\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int binarySearch(vector<int>& nums, int target, bool lower) {\n        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n\n    int search(vector<int>& nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.size() && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return rightIdx - leftIdx + 1;\n        }\n        return 0;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int search(int[] nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.length && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return rightIdx - leftIdx + 1;\n        } \n        return 0;\n    }\n\n    public int binarySearch(int[] nums, int target, boolean lower) {\n        int left = 0, right = nums.length - 1, ans = nums.length;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int Search(int[] nums, int target) {\n        int leftIdx = BinarySearch(nums, target, true);\n        int rightIdx = BinarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.Length && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return rightIdx - leftIdx + 1;\n        } \n        return 0;\n    }\n\n    public int BinarySearch(int[] nums, int target, bool lower) {\n        int left = 0, right = nums.Length - 1, ans = nums.Length;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst binarySearch = (nums, target, lower) => {\n    let left = 0, right = nums.length - 1, ans = nums.length;\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        if (nums[mid] > target || (lower && nums[mid] >= target)) {\n            right = mid - 1;\n            ans = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return ans;\n}\n\nvar search = function(nums, target) {\n    let ans = 0;\n    const leftIdx = binarySearch(nums, target, true);\n    const rightIdx = binarySearch(nums, target, false) - 1;\n    if (leftIdx <= rightIdx && rightIdx < nums.length && nums[leftIdx] === target && nums[rightIdx] === target) {\n        ans = rightIdx - leftIdx + 1;\n    } \n    return ans;\n};\n```\n\n```Golang [sol1-Golang]\nfunc search(nums []int, target int) int {\n    leftmost := sort.SearchInts(nums, target)\n    if leftmost == len(nums) || nums[leftmost] != target {\n        return 0\n    }\n    rightmost := sort.SearchInts(nums, target + 1) - 1\n    return rightmost - leftmost + 1\n}\n```\n\n```C [sol1-C]\nint binarySearch(int* nums, int numsSize, int target, bool lower) {\n    int left = 0, right = numsSize - 1, ans = numsSize;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (nums[mid] > target || (lower && nums[mid] >= target)) {\n            right = mid - 1;\n            ans = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return ans;\n}\n\nint search(int* nums, int numsSize, int target) {\n    int leftIdx = binarySearch(nums, numsSize, target, true);\n    int rightIdx = binarySearch(nums, numsSize, target, false) - 1;\n    int ret = 0;\n    if (leftIdx <= rightIdx && rightIdx < numsSize && nums[leftIdx] == target && nums[rightIdx] == target) {\n        ret = rightIdx - leftIdx + 1;\n    }\n    return ret;\n}\n```\n\n\n**复杂度分析**\n\n* 时间复杂度： $O(\\log n)$ ，其中 $n$ 为数组的长度。二分查找的时间复杂度为 $O(\\log n)$，一共会执行两次，因此总时间复杂度为 $O(\\log n)$。\n\n* 空间复杂度：$O(1)$ 。只需要常数空间存放若干变量。"
}