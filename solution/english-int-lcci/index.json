{
	"titleSlug": "english-int-lcci",
	"slug": "zheng-shu-de-ying-yu-biao-shi-by-leetcod-oven",
	"url": "https://leetcode-cn.com/problems/english-int-lcci/solution/zheng-shu-de-ying-yu-biao-shi-by-leetcod-oven/",
	"content": "#### 方法一：递归\n\n由于非负整数 $\\textit{num}$ 的最大值为 $2^{31}-1$，因此最多有 $10$ 位数。将整数转换成英语表示中，将数字按照 $3$ 位一组划分，将每一组的英语表示拼接之后即可得到整数 $\\textit{num}$ 的英语表示。\n\n每一组最多有 $3$ 位数，可以使用递归的方式得到每一组的英语表示。根据数字所在的范围，具体做法如下：\n\n- 小于 $20$ 的数可以直接得到其英语表示；\n\n- 大于等于 $20$ 且小于 $100$ 的数首先将十位转换成英语表示，然后对个位递归地转换成英语表示；\n\n- 大于等于 $100$ 的数首先将百位转换成英语表示，然后对其余部分（十位和个位）递归地转换成英语表示。\n\n从高到低的每一组的单位依次是 $10^9$、$10^6$、$10^3$、$1$，除了最低组以外，每一组都有对应的表示单位的词，分别是 $\\text{``Billion\"}$、$\\text{``Million\"}$、$\\text{``Thousand\"}$。\n\n得到每一组的英语表示后，需要对每一组加上对应的表示单位的词，然后拼接得到整数 $\\textit{num}$ 的英语表示。\n\n具体实现中需要注意以下两点：\n\n- 只有非零的组的英语表示才会拼接到整数 $\\textit{num}$ 的英语表示中；\n\n- 如果 $\\textit{num} = 0$，则不适用上述做法，而是直接返回 $\\text{``Zero\"}$。\n\n```Java [sol1-Java]\nclass Solution {\n    String[] singles = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    String[] teens = {\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};\n    String[] tens = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};\n    String[] thousands = {\"\", \"Thousand\", \"Million\", \"Billion\"};\n\n    public String numberToWords(int num) {\n        if (num == 0) {\n            return \"Zero\";\n        }\n        StringBuffer sb = new StringBuffer();\n        for (int i = 3, unit = 1000000000; i >= 0; i--, unit /= 1000) {\n            int curNum = num / unit;\n            if (curNum != 0) {\n                num -= curNum * unit;\n                StringBuffer curr = new StringBuffer();\n                recursion(curr, curNum);\n                curr.append(thousands[i]).append(\" \");\n                sb.append(curr);\n            }\n        }\n        return sb.toString().trim();\n    }\n\n    public void recursion(StringBuffer curr, int num) {\n        if (num == 0) {\n            return;\n        } else if (num < 10) {\n            curr.append(singles[num]).append(\" \");\n        } else if (num < 20) {\n            curr.append(teens[num - 10]).append(\" \");\n        } else if (num < 100) {\n            curr.append(tens[num / 10]).append(\" \");\n            recursion(curr, num % 10);\n        } else {\n            curr.append(singles[num / 100]).append(\" Hundred \");\n            recursion(curr, num % 100);\n        }\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    string[] singles = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    string[] teens = {\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};\n    string[] tens = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};\n    string[] thousands = {\"\", \"Thousand\", \"Million\", \"Billion\"};\n\n    public string NumberToWords(int num) {\n        if (num == 0) {\n            return \"Zero\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 3, unit = 1000000000; i >= 0; i--, unit /= 1000) {\n            int curNum = num / unit;\n            if (curNum != 0) {\n                num -= curNum * unit;\n                StringBuilder curr = new StringBuilder();\n                Recursion(curr, curNum);\n                curr.Append(thousands[i]).Append(\" \");\n                sb.Append(curr);\n            }\n        }\n        return sb.ToString().Trim();\n    }\n\n    public void Recursion(StringBuilder curr, int num) {\n        if (num == 0) {\n            return;\n        } else if (num < 10) {\n            curr.Append(singles[num]).Append(\" \");\n        } else if (num < 20) {\n            curr.Append(teens[num - 10]).Append(\" \");\n        } else if (num < 100) {\n            curr.Append(tens[num / 10]).Append(\" \");\n            Recursion(curr, num % 10);\n        } else {\n            curr.Append(singles[num / 100]).Append(\" Hundred \");\n            Recursion(curr, num % 100);\n        }\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<string> singles = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<string> teens = {\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};\n    vector<string> tens = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};\n    vector<string> thousands = {\"\", \"Thousand\", \"Million\", \"Billion\"};\n\n    string numberToWords(int num) {\n        if (num == 0) {\n            return \"Zero\";\n        }\n        string sb;\n        for (int i = 3, unit = 1000000000; i >= 0; i--, unit /= 1000) {\n            int curNum = num / unit;\n            if (curNum != 0) {\n                num -= curNum * unit;\n                string curr;\n                recursion(curr, curNum);\n                curr = curr + thousands[i] + \" \";\n                sb = sb + curr;\n            }\n        }\n        while (sb.back() == ' ') {\n            sb.pop_back();\n        }\n        return sb;\n    }\n\n    void recursion(string & curr, int num) {\n        if (num == 0) {\n            return;\n        } else if (num < 10) {\n            curr = curr + singles[num] + \" \";\n        } else if (num < 20) {\n            curr = curr + teens[num - 10] + \" \";\n        } else if (num < 100) {\n            curr = curr + tens[num / 10] + \" \";\n            recursion(curr, num % 10);\n        } else {\n            curr = curr + singles[num / 100] + \" Hundred \";\n            recursion(curr, num % 100);\n        }\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar numberToWords = function(num) {\n    const singles = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"];\n    const tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"];\n    const thousands = [\"\", \"Thousand\", \"Million\", \"Billion\"];\n\n    const recursion = (curr, num) => {\n        if (num === 0) {\n            return;\n        } else if (num < 10) {\n            curr.push(singles[num] + \" \");\n        } else if (num < 20) {\n            curr.push(teens[num - 10] + \" \");\n        } else if (num < 100) {\n            curr.push(tens[Math.floor(num / 10)] + \" \");\n            recursion(curr, num % 10);\n        } else {\n            curr.push(singles[Math.floor(num / 100)] + \" Hundred \");\n            recursion(curr, num % 100);\n        }\n    }\n    \n    if (num === 0) {\n        return \"Zero\";\n    }\n    const sb = [];\n    for (let i = 3, unit = 1000000000; i >= 0; i--, unit = Math.floor(unit / 1000)) {\n        const curNum = Math.floor(num / unit);\n        if (curNum !== 0) {\n            num -= curNum * unit;\n            const curr = [];\n            recursion(curr, curNum);\n            curr.push(thousands[i] + \" \");\n            sb.push(curr.join(''));\n        }\n    }\n    return sb.join('').trim();\n}\n```\n\n```go [sol1-Golang]\nvar (\n    singles   = []string{\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    teens     = []string{\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"}\n    tens      = []string{\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"}\n    thousands = []string{\"\", \"Thousand\", \"Million\", \"Billion\"}\n)\n\nfunc numberToWords(num int) string {\n    if num == 0 {\n        return \"Zero\"\n    }\n    sb := &strings.Builder{}\n    var recursion func(int)\n    recursion = func(num int) {\n        switch {\n        case num == 0:\n        case num < 10:\n            sb.WriteString(singles[num])\n            sb.WriteByte(' ')\n        case num < 20:\n            sb.WriteString(teens[num-10])\n            sb.WriteByte(' ')\n        case num < 100:\n            sb.WriteString(tens[num/10])\n            sb.WriteByte(' ')\n            recursion(num % 10)\n        default:\n            sb.WriteString(singles[num/100])\n            sb.WriteString(\" Hundred \")\n            recursion(num % 100)\n        }\n    }\n    for i, unit := 3, int(1e9); i >= 0; i-- {\n        if curNum := num / unit; curNum > 0 {\n            num -= curNum * unit\n            recursion(curNum)\n            sb.WriteString(thousands[i])\n            sb.WriteByte(' ')\n        }\n        unit /= 1000\n    }\n    return strings.TrimSpace(sb.String())\n}\n```\n\n```Python [sol1-Python3]\nsingles = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nteens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\ntens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\nthousands = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n\nclass Solution:\n    def numberToWords(self, num: int) -> str:\n        if num == 0:\n            return \"Zero\"\n\n        def recursion(num: int) -> str:\n            s = \"\"\n            if num == 0:\n                return s\n            elif num < 10:\n                s += singles[num] + \" \"\n            elif num < 20:\n                s += teens[num - 10] + \" \"\n            elif num < 100:\n                s += tens[num // 10] + \" \" + recursion(num % 10)\n            else:\n                s += singles[num // 100] + \" Hundred \" + recursion(num % 100)\n            return s\n\n        s = \"\"\n        unit = int(1e9)\n        for i in range(3, -1, -1):\n            curNum = num // unit\n            if curNum:\n                num -= curNum * unit\n                s += recursion(curNum) + thousands[i] + \" \"\n            unit //= 1000\n        return s.strip()\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。非负整数 $\\textit{nums}$ 按照 $3$ 位一组划分最多有 $4$ 组，分别得到每一组的英语表示，然后拼接得到整数 $\\textit{num}$ 的英语表示，时间复杂度是常数。\n\n- 空间复杂度：$O(1)$。空间复杂度主要取决于存储英语表示的字符串和递归调用栈，英语表示的长度可以看成常数，递归调用栈不会超过 $3$ 层。\n\n#### 方法二：迭代\n\n也可以使用迭代的方式得到每一组的英语表示。由于每一组最多有 $3$ 位数，因此依次得到百位、十位、个位上的数字，生成该组的英语表示，注意只有非零位才会被添加到英语表示中。\n\n```Java [sol2-Java]\nclass Solution {\n    String[] singles = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    String[] teens = {\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};\n    String[] tens = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};\n    String[] thousands = {\"\", \"Thousand\", \"Million\", \"Billion\"};\n\n    public String numberToWords(int num) {\n        if (num == 0) {\n            return \"Zero\";\n        }\n        StringBuffer sb = new StringBuffer();\n        for (int i = 3, unit = 1000000000; i >= 0; i--, unit /= 1000) {\n            int curNum = num / unit;\n            if (curNum != 0) {\n                num -= curNum * unit;\n                sb.append(toEnglish(curNum)).append(thousands[i]).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n\n    public String toEnglish(int num) {\n        StringBuffer curr = new StringBuffer();\n        int hundred = num / 100;\n        num %= 100;\n        if (hundred != 0) {\n            curr.append(singles[hundred]).append(\" Hundred \");\n        }\n        int ten = num / 10;\n        if (ten >= 2) {\n            curr.append(tens[ten]).append(\" \");\n            num %= 10;\n        }\n        if (num > 0 && num < 10) {\n            curr.append(singles[num]).append(\" \");\n        } else if (num >= 10) {\n            curr.append(teens[num - 10]).append(\" \");\n        }\n        return curr.toString();\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    string[] singles = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    string[] teens = {\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};\n    string[] tens = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};\n    string[] thousands = {\"\", \"Thousand\", \"Million\", \"Billion\"};\n\n    public string NumberToWords(int num) {\n        if (num == 0) {\n            return \"Zero\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 3, unit = 1000000000; i >= 0; i--, unit /= 1000) {\n            int curNum = num / unit;\n            if (curNum != 0) {\n                num -= curNum * unit;\n                sb.Append(toEnglish(curNum)).Append(thousands[i]).Append(\" \");\n            }\n        }\n        return sb.ToString().Trim();\n    }\n\n    public string toEnglish(int num) {\n        StringBuilder curr = new StringBuilder();\n        int hundred = num / 100;\n        num %= 100;\n        if (hundred != 0) {\n            curr.Append(singles[hundred]).Append(\" Hundred \");\n        }\n        int ten = num / 10;\n        if (ten >= 2) {\n            curr.Append(tens[ten]).Append(\" \");\n            num %= 10;\n        }\n        if (num > 0 && num < 10) {\n            curr.Append(singles[num]).Append(\" \");\n        } else if (num >= 10) {\n            curr.Append(teens[num - 10]).Append(\" \");\n        }\n        return curr.ToString();\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<string> singles = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<string> teens = {\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};\n    vector<string> tens = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};\n    vector<string> thousands = {\"\", \"Thousand\", \"Million\", \"Billion\"};\n    \n    string numberToWords(int num) {\n        if (num == 0) {\n            return \"Zero\";\n        }\n        string sb;\n        for (int i = 3, unit = 1000000000; i >= 0; i--, unit /= 1000) {\n            int curNum = num / unit;\n            if (curNum != 0) {\n                num -= curNum * unit;\n                sb = sb + toEnglish(curNum) + thousands[i] + \" \";\n            }\n        }\n        while (sb.back() == ' ') {\n            sb.pop_back();\n        }\n        return sb;\n    }\n\n    string toEnglish(int num) {\n        string curr;\n        int hundred = num / 100;\n        num %= 100;\n        if (hundred != 0) {\n            curr = curr + singles[hundred] + \" Hundred \";\n        }\n        int ten = num / 10;\n        if (ten >= 2) {\n            curr = curr + tens[ten] + \" \";\n            num %= 10;\n        }\n        if (num > 0 && num < 10) {\n            curr = curr + singles[num] + \" \";\n        } else if (num >= 10) {\n            curr = curr + teens[num - 10] + \" \";\n        }\n        return curr;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar numberToWords = function(num) {\n    const singles = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"];\n    const tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"];\n    const thousands = [\"\", \"Thousand\", \"Million\", \"Billion\"];\n\n    const toEnglish = (num) => {\n        const curr = [];\n        const hundred = Math.floor(num / 100);\n        num %= 100;\n        if (hundred !== 0) {\n            curr.push(singles[hundred] + \" Hundred \");\n        }\n        const ten = Math.floor(num / 10);\n        if (ten >= 2) {\n            curr.push(tens[ten] + \" \");\n            num %= 10;\n        }\n        if (num > 0 && num < 10) {\n            curr.push(singles[num] + \" \");\n        } else if (num >= 10) {\n            curr.push(teens[num - 10] + \" \");\n        }\n        return curr.join('');\n    }\n\n    if (num === 0) {\n        return \"Zero\";\n    }\n    const sb = [];\n    for (let i = 3, unit = 1000000000; i >= 0; i--, unit = Math.floor(unit / 1000)) {\n        const curNum = Math.floor(num / unit);\n        if (curNum !== 0) {\n            num -= curNum * unit;\n            sb.push(toEnglish(curNum) + thousands[i] + \" \");\n        }\n    }\n    return sb.join('').trim();\n}\n```\n\n```go [sol2-Golang]\nvar (\n    singles   = []string{\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    teens     = []string{\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"}\n    tens      = []string{\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"}\n    thousands = []string{\"\", \"Thousand\", \"Million\", \"Billion\"}\n)\n\nfunc numberToWords(num int) string {\n    if num == 0 {\n        return \"Zero\"\n    }\n    sb := &strings.Builder{}\n    toEnglish := func(num int) {\n        if num >= 100 {\n            sb.WriteString(singles[num/100])\n            sb.WriteString(\" Hundred \")\n            num %= 100\n        }\n        if num >= 20 {\n            sb.WriteString(tens[num/10])\n            sb.WriteByte(' ')\n            num %= 10\n        }\n        if 0 < num && num < 10 {\n            sb.WriteString(singles[num])\n            sb.WriteByte(' ')\n        } else if num >= 10 {\n            sb.WriteString(teens[num-10])\n            sb.WriteByte(' ')\n        }\n    }\n    for i, unit := 3, int(1e9); i >= 0; i-- {\n        if curNum := num / unit; curNum > 0 {\n            num -= curNum * unit\n            toEnglish(curNum)\n            sb.WriteString(thousands[i])\n            sb.WriteByte(' ')\n        }\n        unit /= 1000\n    }\n    return strings.TrimSpace(sb.String())\n}\n```\n\n```Python [sol2-Python3]\nsingles = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nteens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\ntens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\nthousands = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n\nclass Solution:\n    def numberToWords(self, num: int) -> str:\n        if num == 0:\n            return \"Zero\"\n\n        def toEnglish(num: int) -> str:\n            s = \"\"\n            if num >= 100:\n                s += singles[num // 100] + \" Hundred \"\n                num %= 100\n            if num >= 20:\n                s += tens[num // 10] + \" \"\n                num %= 10\n            if 0 < num < 10:\n                s += singles[num] + \" \"\n            elif num >= 10:\n                s += teens[num - 10] + \" \"\n            return s\n\n        s = \"\"\n        unit = int(1e9)\n        for i in range(3, -1, -1):\n            curNum = num // unit\n            if curNum:\n                num -= curNum * unit\n                s += toEnglish(curNum) + thousands[i] + \" \"\n            unit //= 1000\n        return s.strip()\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。\n\n- 空间复杂度：$O(1)$。"
}