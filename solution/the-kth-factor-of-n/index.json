{
	"titleSlug": "the-kth-factor-of-n",
	"slug": "n-de-di-k-ge-yin-zi-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/the-kth-factor-of-n/solution/n-de-di-k-ge-yin-zi-by-leetcode-solution/",
	"content": "#### 方法一：枚举\n\n我们可以从小到大枚举所有在 $[1, n]$ 范围内的数，并判断是否为 $n$ 的因子。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int kthFactor(int n, int k) {\n        int count = 0;\n        for (int factor = 1; factor <= n; ++factor) {\n            if (n % factor == 0) {\n                ++count;\n                if (count == k) {\n                    return factor;\n                }\n            }\n        }\n        return -1;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int kthFactor(int n, int k) {\n        int count = 0;\n        for (int factor = 1; factor <= n; ++factor) {\n            if (n % factor == 0) {\n                ++count;\n                if (count == k) {\n                    return factor;\n                }\n            }\n        }\n        return -1;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        count = 0\n        for factor in range(1, n):\n            if n % factor == 0:\n                count += 1\n                if count == k:\n                    return factor\n        return -1\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：枚举优化\n\n方法一中的枚举时间复杂度较高，直观地来说，如果 $n=1000$，那么从 $501$ 开始到 $999$ 结束，这些数都不是 $n$ 的因子，但我们却要将这些数全部枚举一遍。可以发现，如果 $n$ 有一个因子 $k$，那么它必然有一个因子 $n/k$，这两个因子中至少有一个是小于等于 $\\sqrt n$ 的。\n\n> 如何证明？我们使用反证法，假设 $k > \\sqrt n$ 且 $n/k > \\sqrt n$，那么我们有：\n> $$\n> n = k * (n / k) > \\sqrt n * \\sqrt n = n\n> $$\n> 产生了矛盾！\n\n因此我们只要在 $[1, \\lfloor \\sqrt n \\rfloor]$ 的范围内枚举 $n$ 的因子 $x$（这里 $\\lfloor a \\rfloor$ 表示对 $a$ 进行下取整），这些因子都小于等于 $\\sqrt n$。在这之后，我们倒过来在 $[\\lfloor \\sqrt n \\rfloor, 1]$ 的范围内枚举 $n$ 的因子 $x$，但我们真正的用到的因子是 $n/x$。这样一来，我们就从小到大枚举出了 $n$ 的所有因子。\n\n最后需要注意一种特殊情况：如果 $n$ 是完全平方数，那么满足 $x^2 = n$ 的因子 $x$ 被枚举了两次，需要忽略其中的一次。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int kthFactor(int n, int k) {\n        int count = 0, factor;\n        for (factor = 1; factor * factor <= n; ++factor) {\n            if (n % factor == 0) {\n                ++count;\n                if (count == k) {\n                    return factor;\n                }\n            }\n        }\n        --factor;\n        if (factor * factor == n) {\n            --factor;\n        }\n        for (; factor > 0; --factor) {\n            if (n % factor == 0) {\n                ++count;\n                if (count == k) {\n                    return n / factor;\n                }\n            }\n        }\n        return -1;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int kthFactor(int n, int k) {\n        int count = 0, factor;\n        for (factor = 1; factor * factor <= n; ++factor) {\n            if (n % factor == 0) {\n                ++count;\n                if (count == k) {\n                    return factor;\n                }\n            }\n        }\n        --factor;\n        if (factor * factor == n) {\n            --factor;\n        }\n        for (; factor > 0; --factor) {\n            if (n % factor == 0) {\n                ++count;\n                if (count == k) {\n                    return n / factor;\n                }\n            }\n        }\n        return -1;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        count = 0\n        factor = 1\n        while factor * factor <= n:\n            if n % factor == 0:\n                count += 1\n                if count == k:\n                    return factor\n            factor += 1\n        factor -= 1\n        if factor * factor == n:\n            factor -= 1\n        while factor > 0:\n            if n % factor == 0:\n                count += 1\n                if count == k:\n                    return n // factor\n            factor -= 1\n        return -1\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\sqrt n)$。\n\n- 空间复杂度：$O(1)$。"
}