{
	"titleSlug": "restore-the-array",
	"slug": "hui-fu-shu-zu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/restore-the-array/solution/hui-fu-shu-zu-by-leetcode-solution/",
	"content": "#### 方法一：递推\n\n对于「求出方案数」的题目，我们一般可以想到的做法就是递推。\n\n我们用 $f[i]$ 表示前 $i$ 个数字进行恢复的方案数，那么可以很容易地写出递推式：\n\n$$\nf[i] = \\sum_{j=0}^{i-1} f[j]\n$$\n\n其中字符串 $s$ 的第 $j+1$ 个到第 $i$ 个数字组成的数不包含前导 $0$ 并且小于等于 $k$。\n\n对于每一个固定的 $i$，我们可以倒序（从大到小）枚举 $j$，并且由于 $k \\leq 10^9$，我们最多只要倒序枚举 $9+1=10$ 个数字就行了，因为包含超过 $10$ 个数字的数要么大于 $k$，要么有前导 $0$。\n\n下面的代码中给出了详细的注释。\n\n```C++ [sol1-C++]\nusing LL = long long;\n\nclass Solution {\nprivate:\n    static constexpr int mod = 1000000007;\n\npublic:\n    int numberOfArrays(string s, int k) {\n        int n = s.size();\n        // 为了便于代码编写，我们使用 64 位整数类型\n        LL kll = k;\n        vector<int> f(n + 1, 0);\n        // 递推的边界条件\n        f[0] = 1;\n        for (int i = 1; i <= n; ++i) {\n            LL num = 0, base = 1;\n            // 倒序枚举 j，最多只需要枚举 10 个\n            for (int j = i - 1; j >= 0 && i - j <= 10; --j) {\n                // 在高位添加当前的数字，得到第 j+1 到 i 个数字组成的数\n                // 注意 s 的下标是从 0 开始的\n                num += (s[j] - '0') * base;\n                if (num > kll) {\n                    break;\n                }\n                // 判断是否有前导 0\n                if (s[j] != '0') {\n                    f[i] += f[j];\n                    f[i] %= mod;\n                }\n                base *= 10;\n            }\n        }\n        return f[n];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int numberOfArrays(String s, int k) {\n        final int MOD = 1000000007;\n        int n = s.length();\n        // 为了便于代码编写，我们使用 64 位整数类型\n        long kLong = k;\n        int[] f = new int[n + 1];\n        // 递推的边界条件\n        f[0] = 1;\n        for (int i = 1; i <= n; ++i) {\n            long num = 0, base = 1;\n            // 倒序枚举 j，最多只需要枚举 10 个\n            for (int j = i - 1; j >= 0 && i - j <= 10; --j) {\n                // 在高位添加当前的数字，得到第 j+1 到 i 个数字组成的数\n                // 注意 s 的下标是从 0 开始的\n                num += (s.charAt(j) - '0') * base;\n                if (num > kLong) {\n                    break;\n                }\n                // 判断是否有前导 0\n                if (s.charAt(j) != '0') {\n                    f[i] += f[j];\n                    f[i] %= MOD;\n                }\n                base *= 10;\n            }\n        }\n        return f[n];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numberOfArrays(self, s: str, k: int) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        # 递推的边界条件，f[0] = 1\n        f = [1] + [0] * n\n        for i in range(1, n + 1):\n            num, base = 0, 1\n            j = i - 1\n            # 倒序枚举 j，最多只需要枚举 10 个\n            while j >= 0 and i - j <= 10:\n                # 在高位添加当前的数字，得到第 j+1 到 i 个数字组成的数\n                # 注意 s 的下标是从 0 开始的\n                num += (ord(s[j]) - 48) * base\n                if num > k:\n                    break\n                # 判断是否有前导 0\n                if s[j] != \"0\":\n                    f[i] += f[j]\n                base *= 10\n                j -= 1\n            f[i] %= mod\n        return f[n]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N \\log K)$，其中 $N$ 是字符串 $s$ 的长度。对于每一个 $f[i]$，我们需要倒序枚举 $10$ 个数字，这其实就是 $\\log_{10} K_{\\max} + 1$，我们可以用 $O(\\log K)$ 来表示。\n\n- 空间复杂度：$O(N)$，即为递推需要的空间。"
}