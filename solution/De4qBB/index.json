{
	"titleSlug": "De4qBB",
	"slug": "by-blablablawu-su2q",
	"url": "https://leetcode-cn.com/problems/De4qBB/solution/by-blablablawu-su2q/",
	"content": "首先我们知道，我们需要枚举每一个积木的两种状态，即 **翻转** 和**旋转**。\r\n\r\n这里分享一下我的枚举思路，首先，我们可以将一个立方体的面分为以下三类分别枚举：\r\n\r\n- 1个顶面\r\n- 1个底面\r\n- 4个侧面\r\n\r\n\r\n\r\n其次，我们考虑如何判断这些面的每一个小块是否匹配，玩过魔方的都知道，组成一个$n\\cdot n\\cdot n$立方体的一个小块我们可以将它们分为**棱块**和**角块**（不考虑中心块），其中 棱块有$(n-2)\\cdot12$块，角块有$8$块。对于此题来说：\r\n\r\n- 判断角块：需要相邻3个面的参与\r\n- 判断棱块：需要相邻2个面的参与\r\n\r\n这样一来，枚举思路就呼之欲出了。\r\n\r\n注意可以剪枝的点：\r\n\r\n- 我们首先枚举顶面or底面，其中第一个枚举的面不需要考虑旋转操作\r\n\r\n- 每枚举到一个新的积木时，它与之前枚举过的是否能匹配，不能的话可以直接continue\r\n\r\n```cpp\r\nclass Solution {\r\n    vector<vector<string>> a;\r\n    int n;\r\n    // 底面、顶面、侧面1 2 3 4\r\n    int btm, top, r1, r2, r3, r4;\r\npublic:\r\n\r\n    // 原地翻转\r\n    void flip(vector<string> &s){\r\n        for(int i=0;i<n;++i){\r\n            reverse(s[i].begin(), s[i].end());\r\n        }\r\n    }\r\n\r\n    // 原地顺时针旋转90°\r\n    void rot90(vector<string> &s){\r\n        auto t = s;\r\n        for(int i=0;i<n;++i){\r\n            for(int j=0;j<n;++j){\r\n                t[i][j] = s[n-j-1][i];\r\n            }\r\n        }\r\n        s = std::move(t);\r\n    }\r\n\r\n    // 判断三个里面恰好有一个1\r\n    bool exact_1_from_3(char a,char b,char c){\r\n        return (a=='1') + (b=='1') + (c=='1') == 1;\r\n    }\r\n\r\n    // 判断两个里面恰好有一个1\r\n    bool exact_1_from_2(char a,char b){\r\n        return (a=='1') + (b=='1') == 1;\r\n    }\r\n\r\n    // 这里判断 侧面4 和 顶面、底面、侧面123 的拼接情况\r\n    bool gao(){ \r\n\r\n        // 8个角块（只需可考虑r4参与的情况）\r\n        if(!exact_1_from_3(a[r3][0][n-1], a[r4][0][0], a[top][0][0])) return false;\r\n        if(!exact_1_from_3(a[r4][0][n-1], a[r1][0][0], a[top][n-1][0])) return false;\r\n        if(!exact_1_from_3(a[r3][n-1][n-1], a[r4][n-1][0], a[btm][n-1][0])) return false;\r\n        if(!exact_1_from_3(a[r4][n-1][n-1], a[r1][n-1][0], a[btm][0][0])) return false;\r\n\r\n        // 12 个棱（只需考虑r4参与的情况）\r\n        for(int i=1;i<n-1;++i){\r\n            // 上面4个\r\n            if(!exact_1_from_2(a[r4][0][i],a[top][i][0])) return false;\r\n            // 下面4个\r\n            if(!exact_1_from_2(a[r4][n-1][i],a[btm][n-i-1][0])) return false;\r\n            // 中间四个\r\n            if(!exact_1_from_2(a[r3][i][n-1],a[r4][i][0])) return false;\r\n            if(!exact_1_from_2(a[r4][i][n-1],a[r1][i][0])) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    bool composeCube(vector<vector<string>>& _a) {\r\n        n = _a[0][0].size();\r\n        a = _a;\r\n\r\n        for(int i=0;i<6;++i){// 6个选1个当底\r\n            btm = i;\r\n            for(int btmflip=0;btmflip<2;++btmflip, flip(a[btm])){ // 翻转\r\n                for(int j=0;j<6;++j){ // 剩下5个选一个当顶\r\n                    if(j == i) continue;\r\n                    top = j;\r\n                    for(int topflip=0;topflip<2;++topflip, flip(a[top])){ // 翻转\r\n                        for(int toprot=0;toprot<4;++toprot, rot90(a[top])){ // 旋转90°\r\n                            for(int i1=0;i1<6;++i1){ // 剩下4个选一个当侧面1\r\n                                if(i1 == i || i1 == j) continue;\r\n                                r1 = i1;\r\n                                for(int r1flip=0;r1flip<2;++r1flip, flip(a[r1])){ // 翻转\r\n                                    for(int r1rot=0;r1rot<4;++r1rot, rot90(a[r1])){ // 旋转90°\r\n                                        \r\n                                        // 1 and top/btm 考虑 侧面1和顶面底面的拼接情况\r\n                                        bool f = true;\r\n                                        for(int now=1;now<n-1;++now){\r\n                                            if(!exact_1_from_2(a[r1][0][now],a[top][n-1][now])){\r\n                                                f = false;\r\n                                                break;\r\n                                            }\r\n                                            if(!exact_1_from_2(a[r1][n-1][now],a[btm][0][now])){\r\n                                                f = false;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        if(!f) continue;\r\n\r\n                                        for(int i2=0;i2<6;++i2){\r\n                                            if(i2 == i || i2 == j || i2 == i1) continue;\r\n                                            r2 = i2;\r\n                                            for(int r2flip=0;r2flip<2;++r2flip, flip(a[r2])){\r\n                                                for(int r2rot=0;r2rot<4;++r2rot, rot90(a[r2])){\r\n\r\n                                                    // 1,2 and top/btm 考虑 侧面2 和 顶面、底面、侧面1 的拼接情况\r\n                                                    if(!exact_1_from_3(a[r1][0][n-1], a[r2][0][0], a[top][n-1][n-1])){\r\n                                                        continue;\r\n                                                    }\r\n                                                    if(!exact_1_from_3(a[r1][n-1][n-1], a[r2][n-1][0], a[btm][0][n-1])){\r\n                                                        continue;\r\n                                                    }\r\n                                                    bool f = true;\r\n                                                    for(int now=1;now<n-1;++now){\r\n                                                        if(!exact_1_from_2(a[r2][0][now],a[top][n-now-1][n-1])){\r\n                                                            f = false;\r\n                                                            break;\r\n                                                        }\r\n                                                        if(!exact_1_from_2(a[r2][n-1][now],a[btm][now][n-1])){\r\n                                                            f = false;\r\n                                                            break;\r\n                                                        }\r\n                                                        if(!exact_1_from_2(a[r1][now][n-1],a[r2][now][0])){\r\n                                                            f = false;\r\n                                                            break;\r\n                                                        }\r\n                                                    }\r\n                                                    if(!f) continue;\r\n                                                    \r\n                                                    for(int i3=0;i3<6;++i3){\r\n                                                        if(i3 == i || i3 == j || i3 == r1 || i3 == r2) continue;\r\n                                                        r3 = i3;\r\n                                                        for(int r3flip=0;r3flip<2;++r3flip, flip(a[r3])){\r\n                                                            for(int r3rot=0;r3rot<4;++r3rot, rot90(a[r3])){\r\n\r\n                                                                // 1,2,3 and top/btm 考虑 侧面3 和 顶面、底面、侧面12 的拼接情况\r\n                                                                if(!exact_1_from_3(a[r2][0][n-1], a[r3][0][0], a[top][0][n-1])){\r\n                                                                    continue;\r\n                                                                }\r\n                                                                if(!exact_1_from_3(a[r2][n-1][n-1], a[r3][n-1][0], a[btm][n-1][n-1])){\r\n                                                                    continue;\r\n                                                                }\r\n                                                                bool f = true;\r\n                                                                for(int now=1;now<n-1;++now){\r\n                                                                    if(!exact_1_from_2(a[r3][0][now],a[top][0][n-now-1])){\r\n                                                                        f = false;\r\n                                                                        break;\r\n                                                                    }\r\n                                                                    if(!exact_1_from_2(a[r3][n-1][now],a[btm][n-1][n-now-1])){\r\n                                                                        f = false;\r\n                                                                        break;\r\n                                                                    }\r\n                                                                    if(!exact_1_from_2(a[r2][now][n-1],a[r3][now][0])){\r\n                                                                        f = false;\r\n                                                                        break;\r\n                                                                    }\r\n                                                                }\r\n                                                                if(!f) continue;\r\n\r\n                                                                for(int i4=0;i4<6;++i4){\r\n                                                                    if(i4 == i || i4 == j || i4 == r1 || i4 == i2 || i4 == i3) continue;\r\n                                                                    r4 = i4;\r\n                                                                    for(int r4flip=0;r4flip<2;++r4flip, flip(a[r4])){\r\n                                                                        for(int r4rot=0;r4rot<4;++r4rot, rot90(a[r4])){\r\n                                                                            // 考虑 侧面4 和 顶面、底面、侧面123 的拼接情况\r\n                                                                            if(gao()) return true;\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n};\r\n```\r\n\r\n"
}