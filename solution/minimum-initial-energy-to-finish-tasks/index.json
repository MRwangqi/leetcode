{
	"titleSlug": "minimum-initial-energy-to-finish-tasks",
	"slug": "wan-cheng-suo-you-ren-wu-de-zui-shao-chu-shi-neng-",
	"url": "https://leetcode-cn.com/problems/minimum-initial-energy-to-finish-tasks/solution/wan-cheng-suo-you-ren-wu-de-zui-shao-chu-shi-neng-/",
	"content": "### 前言\n\n题解中大部分的篇幅为公式，请读者认真仔细阅读。\n\n#### 方法一：自定义排序\n\n**思路与算法**\n\n设完成所有任务需要的能量为 $p$，这些任务依次为 $(a_0,m_0), (a_1, m_1), \\cdots, (a_{n-1}, m_{n-1})$，那么根据题目的要求，有：\n\n$$\n\\begin{aligned}\np &\\geq m_0 \\\\\np-a_0 &\\geq m_1 \\\\\np-a_0-a_1 &\\geq m_2 \\\\\n& \\cdots \\\\\np-a_0-a_1-\\cdots-a_{n-2} &\\geq m_{n-1}\n\\end{aligned}\n$$\n\n将与 $p$ 无关的项都移至不等式的右侧，整理得：\n\n$$\n\\begin{aligned}\np &\\geq m_0 \\\\\np &\\geq a_0+m_1 \\\\\np &\\geq a_0+a_1+m_2 \\\\\n& \\cdots \\\\\np &\\geq a_0+a_1+\\cdots+a_{n-2}+m_{n-1}\n\\end{aligned}\n$$\n\n由于我们需要计算出**最少**的能量，因此我们的目标是上面 $n$ 个不等式右侧的**最大值最小**，此时 $p$ 就是这个最大值。\n\n那么我们如何最小化这个最大值呢？首先可以尝试「局部最优解」，我们来看一看如果交换**相邻两个任务的顺序**，会发生什么。假设我们交换了任务 $(a_i, m_i)$ 以及 $(a_{i+1},m_{i+1})$，那么只有交换前：\n\n$$\n\\begin{aligned}\np &\\geq a_0+a_1+\\cdots+a_{i-1}+m_i = P(i,0) \\\\\np &\\geq a_0+a_1+\\cdots+a_{i-1}+a_i+m_{i+1} = P(i,1)\n\\end{aligned}\n$$\n\n以及交换后：\n\n$$\n\\begin{aligned}\np &\\geq a_0+a_1+\\cdots+a_{i-1}+m_{i+1} = P'(i,0) \\\\\np &\\geq a_0+a_1+\\cdots+a_{i-1}+a_{i+1}+m_i = P'(i,1)\n\\end{aligned}\n$$\n\n的包含 $m_i$ 或者 $m_{i+1}$ 的这两个不等式产生了变化，其余不等式在交换前后均保持不变。因此，如果在交换后，不等式右侧（仅考虑这两个变化的不等式，而不是考虑所有的不等式）的最大值更小了，那么交换显然不会使得答案更差。\n\n> 这是因为如果这两个变化的不等式右侧的最大值变小了，那么所有的 $n$ 个不等式右侧的最大值要么也变小，要么保持不变，因此交换不会使得答案更差。\n\n交换前的最大值为 $\\max \\big\\{ P(i,0),P(i,1) \\big\\}$，交换后的最大值为 $\\max \\big\\{ P'(i,0),P'(i,1) \\big\\}$。由于 $P(i,0) < P'(i,1)$ 以及 $P'(i,0) < P(i,1)$ 恒成立，因此交换的条件：\n\n$$\n\\max \\big\\{ P(i,0),P(i,1) \\big\\} > \\max \\big\\{ P'(i,0),P'(i,1) \\big\\}\n$$\n\n等价于：\n\n$$\nP(i,1) > P'(i,1)\n$$\n\n将不等式的右侧带入并消去相同项，就可以得到：\n\n$$\na_i+m_{i+1} > a_{i+1}+m_i\n$$\n\n也就是：\n\n$$\na_i - m_i > a_{i+1} - m_{i+1}\n$$\n\n因此，对于任意一种安排任务的方式，我们不断找出满足 $a_i - m_i > a_{i+1} - m_{i+1}$ 的相邻的两个任务，并将它们进行交换，就可以使得答案不会更差。当我们无法找出满足 $a_i - m_i > a_{i+1} - m_{i+1}$ 的相邻的两个任务时，就得到了一个「局部最优解」。\n\n那么我们如何得到「全局最优解」（也就是答案）呢？实际上，「局部最优解」就是「全局最优解」，因为对于任意的两个任务索引 $i,j$，$a_i-m_i$ 和 $a_j-m_j$ 的大小关系都是**可比较的**，因此对于所有的「局部最优解」，它们都是将这些任务按照 $a_i-m_i$ 升序排序得到的结果，只是在有相同的 $a_i-m_i$ 时，不同的「局部最优解」对它们的排列顺序不相同，但这并不会影响最终答案。\n\n因此，任意的「局部最优解」都是「全局最优解」。当然我们也不必真的模拟「局部最优解」的求解过程，而是可以直接将所有的任务按照 $a_i-m_i$ 升序排序，并计算出答案即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minimumEffort(vector<vector<int>>& tasks) {\n        sort(tasks.begin(), tasks.end(), [](const auto& u, const auto& v) {\n            return u[0] - u[1] < v[0] - v[1];\n        });\n        int p = 0;\n        int suma = 0;\n        for (const auto& task: tasks) {\n            p = max(p, suma + task[1]);\n            suma += task[0];\n        }\n        return p;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minimumEffort(self, tasks: List[List[int]]) -> int:\n        tasks.sort(key=lambda x: x[0] - x[1])\n        p = suma = 0\n        for ai, mi in tasks:\n            p = max(p, suma + mi)\n            suma += ai\n        return p\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是任务的数量。\n\n- 空间复杂度：$\\Omega(\\log n)$。\n\n#### 结语\n\n这种根据相邻项得出自定义排序方法的思路，第一次见的话确实很难想，这里贴几个别的平台类似的题目：\n\n- （简单）[NOIP 2012 提高组 Day1 T2 国王游戏](https://www.luogu.com.cn/problem/P1080)\n\n- （中等）[NOIP 2013 提高组 Day1 T2 火柴排队](https://www.luogu.com.cn/problem/P1966)\n\n- （困难）[AtCoder Educational DP Contest Problem X - Tower](https://atcoder.jp/contests/dp/tasks/dp_x)"
}