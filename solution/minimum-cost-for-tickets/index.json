{
	"titleSlug": "minimum-cost-for-tickets",
	"slug": "zui-di-piao-jie-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/minimum-cost-for-tickets/solution/zui-di-piao-jie-by-leetcode-solution/",
	"content": "### 📺 视频题解 \n![983. 最低票价.mp4](571c1009-3b14-47e2-b768-c04f2aa99f2d)\n\n### 📖 文字题解\n\n#### 方法一：记忆化搜索（日期变量型）\n\n**思路和算法**\n\n我们用 $\\textit{dp}(i)$ 来表示从第 $i$ 天开始到一年的结束，我们需要花的钱。考虑到一张通行证可以让我们在「接下来」的若干天进行旅行，所以我们「从后往前」倒着进行动态规划。\n\n对于一年中的任意一天：\n\n- 如果这一天不是必须出行的日期，那我们可以贪心地选择不买。这是因为如果今天不用出行，那么也不必购买通行证，并且通行证越晚买越好。所以有 $\\textit{dp}(i) = \\textit{dp}(i + 1)$；\n\n- 如果这一天是必须出行的日期，我们可以选择买 $1$，$7$ 或 $30$ 天的通行证。若我们购买了 $j$ 天的通行证，那么接下来的 $j - 1$ 天，我们都不再需要购买通行证，只需要考虑第 $i + j$ 天及以后即可。因此，我们有\n\n  $$\n  \\textit{dp}(i) = \\min\\{\\textit{cost}(j) + \\textit{dp}(i + j)\\}, \\quad j \\in \\{1, 7, 30\\}\n  $$\n\n  其中 $\\textit{cost}(j)$ 表示 $j$ 天通行证的价格。为什么我们只需要考虑第 $i+j$ 天及以后呢？这里和第一条的贪心思路是一样的，如果我们需要购买通行证，那么一定越晚买越好，在握着一张有效的通行证的时候购买其它的通行证显然是不划算的。\n\n由于我们是倒着进行动态规划的，因此我们可以使用记忆化搜索，减少代码的编写难度。我们使用一个长度为 $366$ 的数组（因为天数是 $[1, 365]$，而数组的下标是从 $0$ 开始的）存储所有的动态规划结果，这样所有的 $\\textit{dp}(i)$ 只会被计算一次（和普通的动态规划相同），时间复杂度不会增大。\n\n最终的答案记为 $\\textit{dp}(1)$。\n\n```Java [sol1-Java]\nclass Solution {\n    int[] costs;\n    Integer[] memo;\n    Set<Integer> dayset;\n\n    public int mincostTickets(int[] days, int[] costs) {\n        this.costs = costs;\n        memo = new Integer[366];\n        dayset = new HashSet();\n        for (int d: days) {\n            dayset.add(d);\n        }\n        return dp(1);\n    }\n\n    public int dp(int i) {\n        if (i > 365) {\n            return 0;\n        }\n        if (memo[i] != null) {\n            return memo[i];\n        }\n        if (dayset.contains(i)) {\n            memo[i] = Math.min(Math.min(dp(i + 1) + costs[0], dp(i + 7) + costs[1]), dp(i + 30) + costs[2]);\n        } else {\n            memo[i] = dp(i + 1);\n        }\n        return memo[i];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        dayset = set(days)\n        durations = [1, 7, 30]\n\n        @lru_cache(None)\n        def dp(i):\n            if i > 365:\n                return 0\n            elif i in dayset:\n                return min(dp(i + d) + c for c, d in zip(costs, durations))\n            else:\n                return dp(i + 1)\n\n        return dp(1)\n```\n\n```C++ [sol1-C++]\nclass Solution {\n    unordered_set<int> dayset;\n    vector<int> costs;\n    int memo[366] = {0};\n\npublic:\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\n        this->costs = costs;\n        for (int d: days) {\n            dayset.insert(d);\n        }\n        memset(memo, -1, sizeof(memo));\n        return dp(1);\n    }\n\n    int dp(int i) {\n        if (i > 365) {\n            return 0;\n        }\n        if (memo[i] != -1) {\n            return memo[i];\n        }\n        if (dayset.count(i)) {\n            memo[i] = min(min(dp(i + 1) + costs[0], dp(i + 7) + costs[1]), dp(i + 30) + costs[2]);\n        } else {\n            memo[i] = dp(i + 1);\n        }\n        return memo[i];\n    }\n};\n```\n\n```golang [sol1-Golang]\nfunc mincostTickets(days []int, costs []int) int {\n    memo := [366]int{}\n    dayM := map[int]bool{}\n    for _, d := range days {\n        dayM[d] = true\n    }\n\n    var dp func(day int) int \n    dp = func(day int) int {\n        if day > 365 {\n            return 0\n        }\n        if memo[day] > 0 {\n            return memo[day]\n        }\n        if dayM[day] {\n            memo[day] = min(min(dp(day + 1) + costs[0], dp(day + 7) + costs[1]), dp(day + 30) + costs[2])\n        } else {\n            memo[day] = dp(day + 1)\n        }\n        return memo[day]\n    }\n    return dp(1)\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(W)$，其中 $W = 365$ 是旅行计划中日期的最大值，我们需要计算 $W$ 个解，而每个解最多需要查询 $3$ 个其他的解，因此计算量为 $O(3 * W)=O(W)$。\n\n* 空间复杂度：$O(W)$，我们需要长度为 $O(W)$ 的数组来存储所有的解。\n\n#### 方法二：记忆化搜索（窗口变量型）\n\n**思路**\n\n方法一需要遍历一年中所有的天数，无论 $\\textit{days}$ 的长度是多少。\n\n但是观察方法一的递推式，我们可以看到，如果我们查询 $\\textit{dp}(i)$，而第 $i$ 天我们又不需要出行的话，那么 $\\textit{dp}$ 函数会一直向后计算 $\\textit{dp}(i + 1) = \\textit{dp}(i + 2) = \\textit{dp}(i + 3)$ 一直到一年结束或者有一天我们需要出行为止。那么我们其实可以直接跳过这些不需要出行的日期，直接找到下一个需要出行的日期。\n\n**算法**\n\n现在，我们令 $\\textit{dp}(i)$ 表示能够完成从第 $\\textit{days}[i]$ 天到最后的旅行计划的最小花费（注意，不再是第 $i$ 天到最后的最小花费）。令 $j_1$ 是满足 $\\textit{days}[j_1] >= \\textit{days}[i] + 1$ 的最小下标，$j_7$ 是满足 $\\textit{days}[j_7] >= \\textit{days}[i] + 7$ 的最小下标， $j_{30}$ 是满足 $\\textit{days}[j_{30}] >= \\textit{days}[i] + 30$ 的最小下标，那么就有：\n\n$$\n\\textit{dp}(i) = \\min(\\textit{dp}(j_1) + \\textit{costs}[0], \\textit{dp}(j_7) + \\textit{costs}[1], \\textit{dp}(j_{30}) + \\textit{costs}[2])\n$$\n\n```Java [sol2-Java]\nclass Solution {\n    int[] days, costs;\n    Integer[] memo;\n    int[] durations = new int[]{1, 7, 30};\n\n    public int mincostTickets(int[] days, int[] costs) {\n        this.days = days;\n        this.costs = costs;\n        memo = new Integer[days.length];\n        return dp(0);\n    }\n\n    public int dp(int i) {\n        if (i >= days.length) {\n            return 0;\n        }\n        if (memo[i] != null) {\n            return memo[i];\n        }\n        memo[i] = Integer.MAX_VALUE;\n        int j = i;\n        for (int k = 0; k < 3; ++k) {\n            while (j < days.length && days[j] < days[i] + durations[k]) {\n                j++;\n            }\n            memo[i] = Math.min(memo[i], dp(j) + costs[k]);\n        }\n        return memo[i];\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        N = len(days)\n        durations = [1, 7, 30]\n\n        @lru_cache(None)\n        def dp(i):\n            if i >= N:\n                return 0\n            ans = 10**9\n            j = i\n            for c, d in zip(costs, durations):\n                while j < N and days[j] < days[i] + d:\n                    j += 1\n                ans = min(ans, dp(j) + c)\n            return ans\n\n        return dp(0)\n```\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    vector<int> days, costs;\n    vector<int> memo;\n    int durations[3] = {1, 7, 30};\n    \npublic:\n    int mincostTickets(vector<int>& days, vector<int>& costs) {\n        this->days = days;\n        this->costs = costs;\n        memo.assign(days.size(), -1);\n        return dp(0);\n    }\n\n    int dp(int i) {\n        if (i >= days.size()) {\n            return 0;\n        }\n        if (memo[i] != -1) {\n            return memo[i];\n        }\n        memo[i] = INT_MAX;\n        int j = i;\n        for (int k = 0; k < 3; ++k) {\n            while (j < days.size() && days[j] < days[i] + durations[k]) {\n                ++j;\n            }\n            memo[i] = min(memo[i], dp(j) + costs[k]);\n        }\n        return memo[i];\n    }\n};\n```\n\n```golang [sol2-Golang]\nfunc mincostTickets(days []int, costs []int) int {\n    memo := [366]int{}\n    durations := []int{1, 7, 30}\n\n    var dp func(idx int) int \n    dp = func(idx int) int {\n        if idx >= len(days) {\n            return 0\n        }\n        if memo[idx] > 0 {\n            return memo[idx]\n        }\n        memo[idx] = math.MaxInt32\n        j := idx\n        for i := 0; i < 3; i++ {\n            for ; j < len(days) && days[j] < days[idx] + durations[i]; j++ { }\n            memo[idx] = min(memo[idx], dp(j) + costs[i])\n        }\n        return memo[idx]\n    }\n    return dp(0)\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是出行日期的数量，我们需要计算 $N$ 个解，而计算每个解的过程中最多将指针挪动 $30$ 步，计算量为 $O(30 * N)=O(N)$。\n\n* 空间复杂度：$O(N)$，我们需要长度为 $O(N)$ 的数组来存储所有的解。"
}