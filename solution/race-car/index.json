{
	"titleSlug": "race-car",
	"slug": "sai-che-by-leetcode",
	"url": "https://leetcode-cn.com/problems/race-car/solution/sai-che-by-leetcode/",
	"content": "#### 解题思路：\n\n我们用 $A^k$ 表示连续使用 `k` 次 $A$ 指令，这样就可以用 $A^{k_1} R A^{k_2} R \\cdots A^{k_n}, k_i \\geq 0$ 表示任意一种指令列表。注意到最优的指令列表不可能以 $R$ 结束，因为在到了终点后转向是无意义的；同样最优的指令列表也不必以 $R$ 开始，假设 $R A^{k_1} R A^{k_2} \\cdots R A^{k_n}$ 是一种最优的指令列表，那么我们可以将 $R A^{k_1} R$ 根据 $n$ 的奇偶性将其变为 $R A^{k_1}$ 或 $RR A^{k_1}$ 放在指令列表的末尾。\n\n对于指令列表 $A^{k_1} R A^{k_2} R \\cdots A^{k_n}$，它可以使得赛车到达的位置为 $(2^{k_1} - 1) - (2^{k_2} - 1) + (2^{k_3} - 1) - \\cdots$，因此不失一般性，可以交换 $k_1, k_3, \\cdots$ 这些奇数位置的 $k_i$ 使得这个数列单调不增，同样可以交换 $k_2, k_4, \\cdots$ 这些偶数位置的 $k_i$ 使得这个数列单调不增。同时所有的 $k_i$ 都有一个上界 $a + 1$，其中 $a$ 为最小满足 $2^a \\geq \\text{target}$ 的整数，即如果在某一时刻赛车经过了终点，那么折返比继续行驶更优。\n\n#### 方法一：最短路\n\n由于 $k_i$ 存在上界 $a + 1$，因此我们可以在给定 `target` 后确定赛车能够到达的最远距离 `barrier`，那么赛车只有在 `[-barrier, barrier]` 这个区间内驾驶，才可以找到最优解。对于区间中的某一个位置 `x`，我们可以通过 $k_i = 0, 1, 2, \\cdots$ 来使得赛车行驶对应的距离，同时需要使用对应长度的指令，相当于位置 `x` 和其余若干个位置间连了一条长度为指令的边。因此我们只需要求出位置 `0` 到位置 `target` 的最短路即可。我们可以使用 `Dijkstra` 算法快速求出最短路。\n\n```Java [sol1]\nclass Solution {\n    public int racecar(int target) {\n        int K = 33 - Integer.numberOfLeadingZeros(target - 1);\n        int barrier = 1 << K;\n        int[] dist = new int[2 * barrier + 1];\n        Arrays.fill(dist, Integer.MAX_VALUE);\n        dist[target] = 0;\n\n        PriorityQueue<Node> pq = new PriorityQueue<Node>(\n            (a, b) -> a.steps - b.steps);\n        pq.offer(new Node(0, target));\n\n        while (!pq.isEmpty()) {\n            Node node = pq.poll();\n            int steps = node.steps, targ1 = node.target;\n            if (dist[Math.floorMod(targ1, dist.length)] > steps) continue;\n\n            for (int k = 0; k <= K; ++k) {\n                int walk = (1 << k) - 1;\n                int targ2 = walk - targ1;\n                int steps2 = steps + k + (targ2 != 0 ? 1 : 0);\n\n                if (Math.abs(targ2) <= barrier && steps2 < dist[Math.floorMod(targ2, dist.length)]) {\n                    pq.offer(new Node(steps2, targ2));\n                    dist[Math.floorMod(targ2, dist.length)] = steps2;\n                }\n            }\n        }\n\n        return dist[0];\n    }\n}\n\nclass Node {\n    int steps, target;\n    Node(int s, int t) {\n        steps = s;\n        target = t;\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def racecar(self, target):\n        K = target.bit_length() + 1\n        barrier = 1 << K\n        pq = [(0, target)]\n        dist = [float('inf')] * (2 * barrier + 1)\n        dist[target] = 0\n\n        while pq:\n            steps, targ = heapq.heappop(pq)\n            if dist[targ] > steps: continue\n\n            for k in xrange(K+1):\n                walk = (1 << k) - 1\n                steps2, targ2 = steps + k + 1, walk - targ\n                if walk == targ: steps2 -= 1 #No \"R\" command if already exact\n\n                if abs(targ2) <= barrier and steps2 < dist[targ2]:\n                    heapq.heappush(pq, (steps2, targ2))\n                    dist[targ2] = steps2\n\n        return dist[0]\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(T \\log T)$。其中 $O(T)$ 表示 `barrier` 的数量级。\n\n* 空间复杂度：$O(T)$。\n\n#### 方法二：动态规划\n\n我们可以使用动态规划来找到最短的指令长度。\n\n假设我们需要到达位置 `x`，且 $2^{k-1} \\leq x < 2^k$，我们用 `dp[x]` 表示到达位置 `x` 的最短指令长度。如果 $t = 2^{k-1}$，那么我们只需要用 $A^k$ 即可。否则我们需要考虑两种情况：\n\n- 我们首先用 $A^{k-1}$ 到达位置 $2^{k-1} - 1$，随后折返并使用 $A^j$，这样我们到达了位置 $2^{k-1} - 2^j$，使用的指令为 $A^{k-1} R A^k R$，长度为 $k - 1 + j - 2$，剩余的距离为 $x - (2^{k-1} - 2^j) < x$；\n\n- 我们首先用 $A^k$ 到达位置 $2^k - 1$，随后仅使用折返指令，此时我们已经超过了终点并且速度方向朝向终点，使用的指令为 $A^k R$，长度为 $k + 1$，剩余的距离为 $x - (2^k) - 1 < x$。\n\n```Java [sol2]\nclass Solution {\n    public int racecar(int target) {\n        int[] dp = new int[target + 3];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0; dp[1] = 1; dp[2] = 4;\n\n        for (int t = 3; t <= target; ++t) {\n            int k = 32 - Integer.numberOfLeadingZeros(t);\n            if (t == (1<<k) - 1) {\n                dp[t] = k;\n                continue;\n            }\n            for (int j = 0; j < k-1; ++j)\n                dp[t] = Math.min(dp[t], dp[t - (1<<(k-1)) + (1<<j)] + k-1 + j + 2);\n            if ((1<<k) - 1 - t < t)\n                dp[t] = Math.min(dp[t], dp[(1<<k) - 1 - t] + k + 1);\n        }\n\n        return dp[target];  \n    }\n}\n```\n\n```Python [sol2]\nclass Solution(object):\n    def racecar(self, target):\n        dp = [0, 1, 4] + [float('inf')] * target\n        for t in xrange(3, target + 1):\n            k = t.bit_length()\n            if t == 2**k - 1:\n                dp[t] = k\n                continue\n            for j in xrange(k - 1):\n                dp[t] = min(dp[t], dp[t - 2**(k - 1) + 2**j] + k - 1 + j + 2)\n            if 2**k - 1 - t < t:\n                dp[t] = min(dp[t], dp[2**k - 1 - t] + k + 1)\n        return dp[target]\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(T \\log T)$。对于每一个位置 `x`，需要循环 $O(\\log x)$ 次。\n\n* 空间复杂度：$O(T)$。"
}