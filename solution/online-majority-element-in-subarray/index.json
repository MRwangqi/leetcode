{
	"titleSlug": "online-majority-element-in-subarray",
	"slug": "san-chong-fang-fa-bao-li-fen-kuai-xian-duan-shu-by",
	"url": "https://leetcode-cn.com/problems/online-majority-element-in-subarray/solution/san-chong-fang-fa-bao-li-fen-kuai-xian-duan-shu-by/",
	"content": "####    解法一、暴力\r\n问题分为两个部分：\r\n\r\n找出 **可能的** 绝对众数（不一定存在绝对众数，但存在绝对众数的话找到的一定是绝对众数）和统计这个数出现的次数。\r\n\r\n找可能的绝对众数方法很简单，暴力寻找即可（类似于打擂台，具体实现可以看代码，正确性证明略去）。\r\n\r\n统计次数也使用暴力统计。\r\n\r\n设数组长度为 $n$，询问次数为 $q$，则总时间复杂度为 $O(nq)$，无法通过。\r\n```cpp [-C++]\r\nclass MajorityChecker {\r\n    int n,a[20005];\r\npublic:\r\n    MajorityChecker(vector<int>& arr) {\r\n        n=arr.size();\r\n        for(int i=0;i<n;i++)a[i]=arr[i];\r\n    }\r\n    \r\n    int query(int left, int right, int threshold) {\r\n        int i,j,k;\r\n        j=k=0;\r\n        for(i=left;i<=right;i++)if(a[i]==j)k++;\r\n        else if(k)k--;\r\n        else\r\n        {\r\n            j=a[i];\r\n            k=1;\r\n        }\r\n        for(i=left,k=0;i<=right;i++)if(a[i]==j)k++;\r\n        if(k<threshold)j=-1;\r\n        return j;\r\n    }\r\n};\r\n```\r\n#### 解法二、分块\r\n针对不同的询问区间长度，使用两种不同的方法。取一个分界值 $s$。\r\n\r\n如果区间长度 $\\leq s$，直接暴力即可。时间复杂度为 $O(s)$。\r\n\r\n如果区间长度 $>s$，则绝对众数出现次数 $>\\frac{s}{2}$，因此可能的答案个数 $\\leq\\frac{2n}{s}$（出现次数 $>\\frac{s}{2}$ 的不同数字个数 $\\leq\\frac{2n}{s}$）。\r\n\r\n统计每个前缀内这些数各自出现了多少次。询问时枚举每一个可能的数，对两个前缀和求差即可得到这个数在区间内的出现次数。时间复杂度为 $O(\\frac{2n}{s})$。\r\n\r\n取 $s=\\sqrt{2n}$（考虑到常数，实践中不一定最优），两种方法时间复杂度均为 $O(\\sqrt{2n})=O(\\sqrt{n})$。因此总时间复杂度为 $O((n+q)\\sqrt{n})$。可以通过本题。\r\n```cpp [-C++]\r\nclass MajorityChecker {\r\n    int n,N,s,a[20005],b[205][20005],d[205];\r\n    map<int,int> m;\r\npublic:\r\n    MajorityChecker(vector<int>& arr) {\r\n        n=arr.size();\r\n        N=0;\r\n        for(int i=0;i<n;i++)m[a[i]=arr[i]]++;\r\n        s=sqrt(n*2);\r\n        for(auto i:m)if(i.second>s>>1)\r\n        {\r\n            b[++N][0]=0;\r\n            d[N]=i.first;\r\n            for(int j=0;j<n;j++)b[N][j+1]=b[N][j]+(a[j]==d[N]);\r\n        }\r\n    }\r\n    \r\n    int query(int left, int right, int threshold) {\r\n        int i,j,k;\r\n        if(right-left<=s)\r\n        {\r\n            j=k=0;\r\n            for(i=left;i<=right;i++)if(a[i]==j)k++;\r\n            else if(k)k--;\r\n            else\r\n            {\r\n                j=a[i];\r\n                k=1;\r\n            }\r\n            for(i=left,k=0;i<=right;i++)if(a[i]==j)k++;\r\n            if(k<threshold)j=-1;\r\n            return j;\r\n        }\r\n        for(i=1;i<=N;i++)if(b[i][right+1]-b[i][left]>=threshold)return d[i];\r\n        return -1;\r\n    }\r\n};\r\n```\r\n#### 解法三、线段树\r\n注意到暴力算法维护的信息满足可加性（即可以快速合并两个子段的信息得到完整段的信息），因此可以使用线段树维护。具体实现可以参见代码。因此寻找可能的绝对众数的时间复杂度为 $O(\\log n)$。\r\n\r\n数值范围是 $[1,20000]$，因此使用 $20000$ 个 `vector` 存储每一个数出现的位置，使用 `lower_bound` 和 `upper_bound` 即可在 $O(\\log n)$ 的时间复杂度内找出一个数在一个区间内的出现次数。\r\n\r\n因此，单次询问的时间复杂度为 $O(\\log n)$，预处理时间复杂度为 $O(n)$，总时间复杂度为 $O(n+q\\log n)$。（貌似由于常数 + 数据原因，分块比线段树还快）\r\n```cpp [-C++]\r\nclass MajorityChecker {\r\n    struct node\r\n    {\r\n        int x,y;\r\n        node operator+(const node& b)const\r\n        {\r\n            node t;\r\n            if(x==b.x)\r\n            {\r\n                t.x=x;\r\n                t.y=y+b.y;\r\n            }\r\n            else if(y<b.y)\r\n            {\r\n                t.x=b.x;\r\n                t.y=b.y-y;\r\n            }\r\n            else\r\n            {\r\n                t.x=x;\r\n                t.y=y-b.y;\r\n            }\r\n            return t;\r\n        }\r\n    }t[65536];\r\n    int n,a[20005];\r\n    vector<int> s[20005];\r\n    void build(int R,int l,int r)\r\n    {\r\n        if(l==r)\r\n        {\r\n            t[R].x=a[l];\r\n            t[R].y=1;\r\n            return;\r\n        }\r\n        int mid=l+r>>1;\r\n        build(R<<1,l,mid);\r\n        build(R<<1|1,mid+1,r);\r\n        t[R]=t[R<<1]+t[R<<1|1];\r\n    }\r\n    node ask(int R,int l,int r,int l1,int r1)\r\n    {\r\n        if(l1==l&&r==r1)return t[R];\r\n        int mid=l+r>>1;\r\n        if(r1<=mid)return ask(R<<1,l,mid,l1,r1);\r\n        if(l1>mid)return ask(R<<1|1,mid+1,r,l1,r1);\r\n        return ask(R<<1,l,mid,l1,mid)+ask(R<<1|1,mid+1,r,mid+1,r1);\r\n    }\r\npublic:\r\n    MajorityChecker(vector<int>& arr) {\r\n        n=arr.size();\r\n        int i;\r\n        for(i=0;i<n;i++)s[a[i]=arr[i]].push_back(i);\r\n        build(1,0,n-1);\r\n    }\r\n    \r\n    int query(int left, int right, int threshold) {\r\n        int ans=ask(1,0,n-1,left,right).x;\r\n        if(upper_bound(s[ans].begin(),s[ans].end(),right)-lower_bound(s[ans].begin(),s[ans].end(),left)<threshold)ans=-1;\r\n        return ans;\r\n    }\r\n};\r\n```"
}