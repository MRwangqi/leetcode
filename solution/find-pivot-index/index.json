{
	"titleSlug": "find-pivot-index",
	"slug": "xun-zhao-shu-zu-de-zhong-xin-suo-yin-by-gzjle",
	"url": "https://leetcode-cn.com/problems/find-pivot-index/solution/xun-zhao-shu-zu-de-zhong-xin-suo-yin-by-gzjle/",
	"content": "#### 方法一：前缀和\n\n**思路**\n\n记数组的全部元素之和为 $\\textit{total}$，当遍历到第 $i$ 个元素时，设其左侧元素之和为 $\\textit{sum}$，则其右侧元素之和为 $\\textit{total}-\\textit{nums}_i-\\textit{sum}$。左右侧元素相等即为 $\\textit{sum}=\\textit{total}-\\textit{nums}_i-\\textit{sum}$，即 $2\\times\\textit{sum}+\\textit{nums}_i=\\textit{total}$。\n\n当中心索引左侧或右侧没有元素时，即为零个项相加，这在数学上称作「空和」（$\\text{empty sum}$）。在程序设计中我们约定「空和是零」。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int pivotIndex(vector<int> &nums) {\n        int total = accumulate(nums.begin(), nums.end(), 0);\n        int sum = 0;\n        for (int i = 0; i < nums.size(); ++i) {\n            if (2 * sum + nums[i] == total) {\n                return i;\n            }\n            sum += nums[i];\n        }\n        return -1;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int pivotIndex(int[] nums) {\n        int total = Arrays.stream(nums).sum();\n        int sum = 0;\n        for (int i = 0; i < nums.length; ++i) {\n            if (2 * sum + nums[i] == total) {\n                return i;\n            }\n            sum += nums[i];\n        }\n        return -1;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int PivotIndex(int[] nums) {\n        int total = nums.Sum();\n        int sum = 0;\n        for (int i = 0; i < nums.Length; ++i) {\n            if (2 * sum + nums[i] == total) {\n                return i;\n            }\n            sum += nums[i];\n        }\n        return -1;\n    }\n}\n```\n\n```Go [sol1-Golang]\nfunc pivotIndex(nums []int) int {\n    total := 0\n    for _, v := range nums {\n        total += v\n    }\n    sum := 0\n    for i, v := range nums {\n        if 2*sum+v == total {\n            return i\n        }\n        sum += v\n    }\n    return -1\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar pivotIndex = function(nums) {\n    const total = nums.reduce((a, b) => a + b, 0);\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (2 * sum + nums[i] === total) {\n            return i;\n        }\n        sum += nums[i];\n    }\n    return -1;\n};\n```\n\n```C [sol1-C]\nint pivotIndex(int* nums, int numsSize) {\n    int total = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        total += nums[i];\n    }\n    int sum = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        if (2 * sum + nums[i] == total) {\n            return i;\n        }\n        sum += nums[i];\n    }\n    return -1;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。\n\n* 空间复杂度：$O(1)$。"
}