{
	"titleSlug": "maximum-average-pass-ratio",
	"slug": "by-trusting-6rothendieckuf6-p2ro",
	"url": "https://leetcode-cn.com/problems/maximum-average-pass-ratio/solution/by-trusting-6rothendieckuf6-p2ro/",
	"content": "### 解题思路\n在看到这道题目之后，首先想到的做法的思路主要是：\n每次加入一名优等生的时候，为了弄清楚到底加道哪一个班，于是遍历所有的班级，将增量最大的班级对应的序号存好，并在程序结束后将对应班级加1.\n但是遗憾的是，这个程序的复杂度太高。\nclass Solution {\npublic:\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\n        int length = classes.size();\n        //double increment = 0;\n        double fen=0;\n        for (;extraStudents>0;extraStudents--) {\n            int max_i = 0;\n            double increment = 0;\n            for (int i = 0; i < length; i++) {\n                if (double(classes[i][1] - classes[i][0]) / double(classes[i][1] * (classes[i][1] + 1)) > increment) {\n                    increment= double(classes[i][1] - classes[i][0]) / double(classes[i][1] * (classes[i][1] + 1));\n                    max_i = i;\n                }\n            }\n            classes[max_i][0]++;\n            classes[max_i][1]++;\n        }\n        for (int i = 0; i < length; i++)\n            fen += (double(classes[i][0]) / double(classes[i][1]));\n\n        return fen/length;\n    }\n};\n于是改用优先队列，使得能实现自动的排序，结果开始用vector，仍然超时。改用tuple后符合要求\n### 代码\n\n```cpp\nclass Solution {\npublic:\n   \n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\n        priority_queue<tuple<double,int,int>> ttr;\n        double result = 0;\n        int length = classes.size();\n        for (int i = 0; i < length; i++) {\n            result += double(classes[i][0]) / (classes[i][1]);\n            double incre = double(classes[i][0] + 1) / (classes[i][1] + 1)-double(classes[i][0]) / (classes[i][1]);           \n            ttr.emplace(incre, classes[i][0], classes[i][1]);\n        }\n        for (int i = 0; i < extraStudents; i++) {\n            auto mid = ttr.top();\n            ttr.pop();\n            result += get<0>(mid);\n            get<0>(mid)= double((get<1>(mid) + 2)) / (get<2>(mid) + 2) - (double(get<1>(mid))+1) / (get<2>(mid)+1);\n            get<2>(mid)++, get<1>(mid)++;\n            ttr.emplace(mid);\n            \n        }\n\n        return result / length;\n    }\n   \n};\n```\n![image.png](https://pic.leetcode-cn.com/1663653469-ciLrCY-image.png)\n"
}