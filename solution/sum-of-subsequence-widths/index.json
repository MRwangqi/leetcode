{
	"titleSlug": "sum-of-subsequence-widths",
	"slug": "zi-xu-lie-kuan-du-zhi-he-by-leetcode",
	"url": "https://leetcode-cn.com/problems/sum-of-subsequence-widths/solution/zi-xu-lie-kuan-du-zhi-he-by-leetcode/",
	"content": "#### 方法：数学\n\n**思路**\n\n让我们试着统计具有最小值 `A[i]` 和最大值 `A[j]` 的子序列的数量。\n\n**算法**\n\n我们可以对数组进行排序，因为这并不会改变答案。对数组进行排序后，我们可以得知有最小值 `A[i]` 和最大值 `A[j]` 的子序列的数目是 $2^{j-i-1}$。因此，期望的答案为：\n\n$$\n\\sum\\limits_{j > i} (2^{j-i-1}) (A_j - A_i)\n$$\n\n$$\n= \\big( \\sum\\limits_{i = 0}^{n-2} \\sum\\limits_{j = i+1}^{n-1} (2^{j-i-1}) (A_j) \\big) - \\big( \\sum\\limits_{i = 0}^{n-2} \\sum\\limits_{j = i+1}^{n-1} (2^{j-i-1}) (A_i) \\big)\n$$\n\n$$\n= \\big( (2^0 A_1 + 2^1 A_2 + 2^2 A_3 + \\cdots) + (2^0 A_2 + 2^1 A_3 + \\cdots) + (2^0 A_3 + 2^1 A_4 + \\cdots) + \\cdots \\big)\n$$\n$$\n - \\big( \\sum\\limits_{i = 0}^{n-2} (2^0 + 2^1 + \\cdots + 2^{N-i-2}) (A_i) \\big)\n$$\n\n$$\n= \\big( \\sum\\limits_{j = 1}^{n-1} (2^j - 1) A_j \\big) - \\big( \\sum\\limits_{i = 0}^{n-2} (2^{N-i-1} - 1) A_i \\big)\n$$\n\n$$\n= \\sum\\limits_{i = 0}^{n-1} \\big(((2^i - 1) A_i) - ((2^{N-i-1} - 1) A_i)\\big)\n$$\n\n$$\n= \\sum\\limits_{i = 0}^{n-1} (2^i - 2^{N-i-1}) A_i\n$$\n\n```java [DorYCcF2-Java]\nclass Solution {\n    public int sumSubseqWidths(int[] A) {\n        int MOD = 1_000_000_007;\n        int N = A.length;\n        Arrays.sort(A);\n\n        long[] pow2 = new long[N];\n        pow2[0] = 1;\n        for (int i = 1; i < N; ++i)\n            pow2[i] = pow2[i-1] * 2 % MOD;\n\n        long ans = 0;\n        for (int i = 0; i < N; ++i)\n            ans = (ans + (pow2[i] - pow2[N-1-i]) * A[i]) % MOD;\n\n        return (int) ans;\n    }\n}\n```\n```python [DorYCcF2-Python]\nclass Solution(object):\n    def sumSubseqWidths(self, A):\n        MOD = 10**9 + 7\n        N = len(A)\n        A.sort()\n\n        pow2 = [1]\n        for i in xrange(1, N):\n            pow2.append(pow2[-1] * 2 % MOD)\n\n        ans = 0\n        for i, x in enumerate(A):\n            ans = (ans + (pow2[i] - pow2[N-1-i]) * x) % MOD\n        return ans\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log N)$，其中 $N$ 是 `A` 的长度。\n\n* 空间复杂度：$O(N)$，`pow2` 所用的空间。（我们可以通过动态地计算这些乘方将其改进到 $O(1)$）。"
}