{
	"titleSlug": "cong-wei-dao-tou-da-yin-lian-biao-lcof",
	"slug": "mian-shi-ti-06-cong-wei-dao-tou-da-yin-lian-biao-d",
	"url": "https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solution/mian-shi-ti-06-cong-wei-dao-tou-da-yin-lian-biao-d/",
	"content": "### 方法一：递归法\r\n\r\n#### 解题思路：\r\n\r\n> **利用递归：** 先走至链表末端，回溯时依次将节点值加入列表 ，这样就可以实现链表值的倒序输出。\r\n\r\n- **Python 算法流程：**\r\n  1. **递推阶段：** 每次传入 `head.next` ，以 `head == None`（即走过链表尾部节点）为递归终止条件，此时返回空列表 `[]` 。\r\n  2. **回溯阶段：** 利用 Python 语言特性，递归回溯时每次返回 `当前 list + 当前节点值 [head.val] `，即可实现节点的倒序输出。\r\n\r\n- **Java 算法流程：**\r\n  1. **递推阶段：** 每次传入 `head.next` ，以 `head == null`（即走过链表尾部节点）为递归终止条件，此时直接返回。\r\n  2. **回溯阶段：** 层层回溯时，将当前节点值加入列表，即`tmp.add(head.val)`。\r\n  3. 最终，将列表 `tmp` 转化为数组 `res` ，并返回即可。\r\n\r\n#### 复杂度分析：\r\n- **时间复杂度 $O(N)$：** 遍历链表，递归 $N$ 次。\r\n- **空间复杂度 $O(N)$：** 系统递归需要使用 $O(N)$ 的栈空间。\r\n\r\n> 图解以 Python 代码为例， Java 原理一致，只是把利用返回值改为 `add()` 操作。\r\n\r\n<![Picture1.png](https://pic.leetcode-cn.com/694435ca220f61a874729d3be12ab594be0be530760caf5e25d71bf7a9f29b8b-Picture1.png),![Picture2.png](https://pic.leetcode-cn.com/4ea9eec2a6c504eb5444e693ad94ad5eaed26b215733eedf0a2c9a1ed3781390-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/3a81b73ee54d312ac8349ffedcc69a714f2cd814d70c1f3f0efbbe23f91cb9fc-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/d3e724a1e77b77bd9323c8a2606d5ec9464ef8b2c81a1d33a7af96655457a483-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/4dfa31e2cc8ccc65e43a2ac95e394de7bf234af927878054a53e6a441aa9eacc-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/a4b8bd414664b8688a411ef3753aa669594da340f20e53f62a57ac7ab7df3a3b-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/76178a4127e47bbe7fd6ca59121843d93a5e1e4aa7bcffb86062d925499f3dde-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/65b63e3fc8277c16c80a676aaa13f8110083a0e31d95c0ecc196f1c12d872767-Picture8.png),![Picture9.png](https://pic.leetcode-cn.com/363e04c2ae104ed0275d4fcd953d21e20ed1536a98902c5c83843c2c6cff0590-Picture9.png),![Picture10.png](https://pic.leetcode-cn.com/1066f15bd86d99e7998519f4e2ffee070401ec67102f6e3626a61811987d99b5-Picture10.png)>\r\n\r\n#### 代码：\r\n\r\n```python []\r\nclass Solution:\r\n    def reversePrint(self, head: ListNode) -> List[int]:\r\n        return self.reversePrint(head.next) + [head.val] if head else []\r\n```\r\n\r\n```java []\r\nclass Solution {\r\n    ArrayList<Integer> tmp = new ArrayList<Integer>();\r\n    public int[] reversePrint(ListNode head) {\r\n        recur(head);\r\n        int[] res = new int[tmp.size()];\r\n        for(int i = 0; i < res.length; i++)\r\n            res[i] = tmp.get(i);\r\n        return res;\r\n    }\r\n    void recur(ListNode head) {\r\n        if(head == null) return;\r\n        recur(head.next);\r\n        tmp.add(head.val);\r\n    }\r\n}\r\n```\r\n\r\n### 方法二：辅助栈法\r\n\r\n#### 解题思路：\r\n\r\n> **链表特点：** 只能从前至后访问每个节点。 \r\n> **题目要求：** 倒序输出节点值。\r\n> 这种 **先入后出** 的需求可以借助 **栈** 来实现。\r\n\r\n- **算法流程：**\r\n  1. **入栈：** 遍历链表，将各节点值 `push` 入栈。（Python​ 使用 `append()` 方法，​Java​借助 `LinkedList` 的`addLast()`方法）。\r\n  2. **出栈：** 将各节点值 `pop` 出栈，存储于数组并返回。（Python​ 直接返回 `stack` 的倒序列表，Java ​新建一个数组，通过 `popLast()` 方法将各元素存入数组，实现倒序输出）。\r\n\r\n#### 复杂度分析：\r\n\r\n- **时间复杂度 $O(N)$：** 入栈和出栈共使用 $O(N)$ 时间。\r\n- **空间复杂度 $O(N)$：** 辅助栈 `stack` 和数组 `res` 共使用 $O(N)$ 的额外空间。\r\n \r\n> 图解以 Java 代码为例，Python 无需将 `stack` 转移至 `res`，而是直接返回倒序数组。\r\n\r\n<![Picture11.png](https://pic.leetcode-cn.com/c4491c53f72d8a619f67636aaf352b0210959e448e569b4645f2e8d96aea75b1-Picture11.png),![Picture12.png](https://pic.leetcode-cn.com/4bf7afc2c24cbbdd00d32113d165168ad156f5c10eddc9376967c39f44040ee9-Picture12.png),![Picture13.png](https://pic.leetcode-cn.com/bc00895cf946e5f87964b9c6b0109ccb495c6f37699249605ca2141fd058e151-Picture13.png),![Picture14.png](https://pic.leetcode-cn.com/5e6d519aa9ee822e467b2b62f53f6557778cdfe7cdb05660043c5991563d2193-Picture14.png),![Picture15.png](https://pic.leetcode-cn.com/e5cb4ba143fd768601c94ee563197b2067e01c1bfe4284049162ec37cfee1b8e-Picture15.png),![Picture16.png](https://pic.leetcode-cn.com/38a97be4cdc3cf728878f6d08bdbfab3496d07d32793a3de62c3d8ba0d9d10e8-Picture16.png),![Picture17.png](https://pic.leetcode-cn.com/496f770781dfdfeed0039cc2a42fb2534a6ca7691df716e8637684621ebb0b8c-Picture17.png),![Picture18.png](https://pic.leetcode-cn.com/851bae5e9697a706ac9daab1a4529af3ff85e27cd17697eef9b5ee47be2a3556-Picture18.png)>\r\n\r\n#### 代码：\r\n\r\n```python []\r\nclass Solution:\r\n    def reversePrint(self, head: ListNode) -> List[int]:\r\n        stack = []\r\n        while head:\r\n            stack.append(head.val)\r\n            head = head.next\r\n        return stack[::-1]\r\n```\r\n\r\n```java []\r\nclass Solution {\r\n    public int[] reversePrint(ListNode head) {\r\n        LinkedList<Integer> stack = new LinkedList<Integer>();\r\n        while(head != null) {\r\n            stack.addLast(head.val);\r\n            head = head.next;\r\n        }\r\n        int[] res = new int[stack.size()];\r\n        for(int i = 0; i < res.length; i++)\r\n            res[i] = stack.removeLast();\r\n    return res;\r\n    }\r\n}\r\n```"
}