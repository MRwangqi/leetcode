{
	"titleSlug": "li-wu-de-zui-da-jie-zhi-lcof",
	"slug": "mian-shi-ti-47-li-wu-de-zui-da-jie-zhi-dong-tai-gu",
	"url": "https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof/solution/mian-shi-ti-47-li-wu-de-zui-da-jie-zhi-dong-tai-gu/",
	"content": "#### 解题思路：\r\n\r\n题目说明：从棋盘的左上角开始拿格子里的礼物，并每次 **向右** 或者 **向下** 移动一格、直到到达棋盘的右下角。\r\n根据题目说明，易得某单元格只可能从上边单元格或左边单元格到达。\r\n\r\n设 $f(i, j)$ 为从棋盘左上角走至单元格 $(i ,j)$ 的礼物最大累计价值，易得到以下递推关系：$f(i,j)$ 等于 $f(i,j-1)$ 和 $f(i-1,j)$ 中的较大值加上当前单元格礼物价值 $grid(i,j)$ 。\r\n\r\n$$\r\nf(i,j) = \\max[f(i,j-1), f(i-1,j)] + grid(i,j)\r\n$$\r\n\r\n因此，可用动态规划解决此问题，以上公式便为转移方程。\r\n\r\n![Picture1.png](https://pic.leetcode-cn.com/73153e75d74b1f48ac47244681caacc8ad20ca2ffd2dee2f70a2768dee09d073-Picture1.png){:width=450}\r\n\r\n##### 动态规划解析：\r\n\r\n- **状态定义：** 设动态规划矩阵 $dp$ ，$dp(i,j)$ 代表从棋盘的左上角开始，到达单元格 $(i,j)$ 时能拿到礼物的最大累计价值。 \r\n- **转移方程：**\r\n  1. 当 $i = 0$ 且 $j = 0$ 时，为起始元素；\r\n  2. 当 $i = 0$ 且 $j \\ne 0$ 时，为矩阵第一行元素，只可从左边到达；\r\n  3. 当 $i \\ne 0$ 且 $j = 0$ 时，为矩阵第一列元素，只可从上边到达；\r\n  4. 当 $i \\ne 0$ 且 $j \\ne 0$ 时，可从左边或上边到达；\r\n\r\n$$\r\ndp(i,j)=\r\n\\begin{cases}\r\ngrid(i,j) & {,i=0, j=0}\\\\\r\ngrid(i,j) + dp(i,j-1) & {,i=0, j \\ne 0}\\\\\r\ngrid(i,j) + dp(i-1,j) & {,i \\ne 0, j=0}\\\\\r\ngrid(i,j) + \\max[dp(i-1,j),dp(i,j-1)]& ,{i \\ne 0, j \\ne 0}\r\n\\end{cases}\r\n$$\r\n\r\n- **初始状态：** $dp[0][0] = grid[0][0]$ ，即到达单元格 $(0,0)$ 时能拿到礼物的最大累计价值为 $grid[0][0]$ ；\r\n- **返回值：** $dp[m-1][n-1]$ ，$m, n$ 分别为矩阵的行高和列宽，即返回 $dp$ 矩阵右下角元素。\r\n\r\n##### 空间复杂度优化：\r\n\r\n- 由于 $dp[i][j]$ 只与 $dp[i-1][j]$ , $dp[i][j-1]$ , $grid[i][j]$ 有关系，因此可以将原矩阵 $grid$ 用作 $dp$ 矩阵，即直接在 $grid$ 上修改即可。\r\n- 应用此方法可省去 $dp$ 矩阵使用的额外空间，因此空间复杂度从 $O(MN)$ 降至 $O(1)$ 。 \r\n\r\n<![Picture2.png](https://pic.leetcode-cn.com/67cf85128a890bac4a7e38062f728ce536ebecd6c3595dd99e94f7f4cb2edd9f-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/f74a7d8a2b3d6151c3ffad67091ccb6e7360301d7d2e2b4d57c1f8cbdd4d439c-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/7885d2fb7a18b497d242f09076df8b2e7f16c92d949c0d5c04416987ab262a0c-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/df35c99048191872eabf260600a7f8ca33e11b71374a1245c9924a5012788e7a-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/68914728aa4e45427315b07f2711970c2917dbac03d78721a4e898ac360b56ca-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/9cb66e7ed62cdd0d4ee32f54626082e238d1791bf0edea7b34d416c645309350-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/60abcaadc19c3c9616377d148f337ae3b9ec6235c4628177a646de2daf379b1a-Picture8.png),![Picture9.png](https://pic.leetcode-cn.com/29dae0242239cbae12878a8587917b63c090c65839f356d2b087aabe26a3f1fe-Picture9.png),![Picture10.png](https://pic.leetcode-cn.com/7d62208403a02b8439fecec0e37b3910e47dfe3a0280af7d9f438e0a992005f3-Picture10.png),![Picture11.png](https://pic.leetcode-cn.com/d7005f30bf7bfc9e41860fa186e8f03c2481256323f3d66bfbf0852f08f5e57b-Picture11.png)>\r\n\r\n##### 复杂度分析：\r\n\r\n- **时间复杂度 $O(MN)$ ：** $M, N$ 分别为矩阵行高、列宽；动态规划需遍历整个 $grid$ 矩阵，使用 $O(MN)$ 时间。\r\n- **空间复杂度 $O(1)$ ：** 原地修改使用常数大小的额外空间。\r\n\r\n#### 代码：\r\n\r\n```Python []\r\nclass Solution:\r\n    def maxValue(self, grid: List[List[int]]) -> int:\r\n        for i in range(len(grid)):\r\n            for j in range(len(grid[0])):\r\n                if i == 0 and j == 0: continue\r\n                if i == 0: grid[i][j] += grid[i][j - 1]\r\n                elif j == 0: grid[i][j] += grid[i - 1][j]\r\n                else: grid[i][j] += max(grid[i][j - 1], grid[i - 1][j])\r\n        return grid[-1][-1]\r\n```\r\n\r\n```Java []\r\nclass Solution {\r\n    public int maxValue(int[][] grid) {\r\n        int m = grid.length, n = grid[0].length;\r\n        for(int i = 0; i < m; i++) {\r\n            for(int j = 0; j < n; j++) {\r\n                if(i == 0 && j == 0) continue;\r\n                if(i == 0) grid[i][j] += grid[i][j - 1] ;\r\n                else if(j == 0) grid[i][j] += grid[i - 1][j];\r\n                else grid[i][j] += Math.max(grid[i][j - 1], grid[i - 1][j]);\r\n            }\r\n        }\r\n        return grid[m - 1][n - 1];\r\n    }\r\n}\r\n```\r\n\r\n以上代码逻辑清晰，和转移方程直接对应，但仍可提升效率：当 $grid$ 矩阵很大时， $i = 0$ 或 $j = 0$ 的情况仅占极少数，相当循环每轮都冗余了一次判断。因此，可先初始化矩阵第一行和第一列，再开始遍历递推。\r\n\r\n```Python []\r\nclass Solution:\r\n    def maxValue(self, grid: List[List[int]]) -> int:\r\n        m, n = len(grid), len(grid[0])\r\n        for j in range(1, n): # 初始化第一行\r\n            grid[0][j] += grid[0][j - 1]\r\n        for i in range(1, m): # 初始化第一列\r\n            grid[i][0] += grid[i - 1][0]\r\n        for i in range(1, m):\r\n            for j in range(1, n):\r\n                grid[i][j] += max(grid[i][j - 1], grid[i - 1][j])\r\n        return grid[-1][-1]\r\n```\r\n\r\n```Java []\r\nclass Solution {\r\n    public int maxValue(int[][] grid) {\r\n        int m = grid.length, n = grid[0].length;\r\n        for(int j = 1; j < n; j++) // 初始化第一行\r\n            grid[0][j] += grid[0][j - 1];\r\n        for(int i = 1; i < m; i++) // 初始化第一列\r\n            grid[i][0] += grid[i - 1][0];\r\n        for(int i = 1; i < m; i++)\r\n            for(int j = 1; j < n; j++) \r\n                grid[i][j] += Math.max(grid[i][j - 1], grid[i - 1][j]);\r\n        return grid[m - 1][n - 1];\r\n    }\r\n}\r\n```"
}