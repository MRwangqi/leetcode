{
	"titleSlug": "binary-tree-paths",
	"slug": "er-cha-shu-de-suo-you-lu-jing-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/binary-tree-paths/solution/er-cha-shu-de-suo-you-lu-jing-by-leetcode-solution/",
	"content": "#### 方法一：深度优先搜索\n\n**思路与算法**\n\n最直观的方法是使用深度优先搜索。在深度优先搜索遍历二叉树时，我们需要考虑当前的节点以及它的孩子节点。\n\n- 如果当前节点**不是叶子节点**，则在当前的路径末尾添加该节点，并继续递归遍历该节点的每一个孩子节点。\n- 如果当前节点**是叶子节点**，则在当前路径末尾添加该节点后我们就得到了一条从根节点到叶子节点的路径，将该路径加入到答案即可。\n\n如此，当遍历完整棵二叉树以后我们就得到了所有从根节点到叶子节点的路径。当然，深度优先搜索也可以使用非递归的方式实现，这里不再赘述。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void construct_paths(TreeNode* root, string path, vector<string>& paths) {\n        if (root != nullptr) {\n            path += to_string(root->val);\n            if (root->left == nullptr && root->right == nullptr) {  // 当前节点是叶子节点\n                paths.push_back(path);                              // 把路径加入到答案中\n            } else {\n                path += \"->\";  // 当前节点不是叶子节点，继续递归遍历\n                construct_paths(root->left, path, paths);\n                construct_paths(root->right, path, paths);\n            }\n        }\n    }\n\n    vector<string> binaryTreePaths(TreeNode* root) {\n        vector<string> paths;\n        construct_paths(root, \"\", paths);\n        return paths;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar binaryTreePaths = function(root) {\n    const paths = [];\n    const construct_paths = (root, path) => {\n        if (root) {\n            path += root.val.toString();\n            if (root.left === null && root.right === null) { // 当前节点是叶子节点\n                paths.push(path); // 把路径加入到答案中\n            } else {\n                path += \"->\"; // 当前节点不是叶子节点，继续递归遍历\n                construct_paths(root.left, path);\n                construct_paths(root.right, path);\n            }\n        }\n    }\n    construct_paths(root, \"\");\n    return paths;\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<String> binaryTreePaths(TreeNode root) {\n        List<String> paths = new ArrayList<String>();\n        constructPaths(root, \"\", paths);\n        return paths;\n    }\n\n    public void constructPaths(TreeNode root, String path, List<String> paths) {\n        if (root != null) {\n            StringBuffer pathSB = new StringBuffer(path);\n            pathSB.append(Integer.toString(root.val));\n            if (root.left == null && root.right == null) {  // 当前节点是叶子节点\n                paths.add(pathSB.toString());  // 把路径加入到答案中\n            } else {\n                pathSB.append(\"->\");  // 当前节点不是叶子节点，继续递归遍历\n                constructPaths(root.left, pathSB.toString(), paths);\n                constructPaths(root.right, pathSB.toString(), paths);\n            }\n        }\n    }\n}\n```\n\n```Python [sol1-Python]\nclass Solution:\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        def construct_paths(root, path):\n            if root:\n                path += str(root.val)\n                if not root.left and not root.right:  # 当前节点是叶子节点\n                    paths.append(path)  # 把路径加入到答案中\n                else:\n                    path += '->'  # 当前节点不是叶子节点，继续递归遍历\n                    construct_paths(root.left, path)\n                    construct_paths(root.right, path)\n\n        paths = []\n        construct_paths(root, '')\n        return paths\n```\n\n```golang [sol1-Golang]\nvar paths []string\n\nfunc binaryTreePaths(root *TreeNode) []string {\n    paths = []string{}\n    constructPaths(root, \"\")\n    return paths\n}\n\nfunc constructPaths(root *TreeNode, path string) {\n    if root != nil {\n        pathSB := path\n        pathSB += strconv.Itoa(root.Val)\n        if root.Left == nil && root.Right == nil {\n            paths = append(paths, pathSB)\n        } else {\n            pathSB += \"->\"\n            constructPaths(root.Left, pathSB)\n            constructPaths(root.Right, pathSB)\n        }\n    }\n}\n```\n\n```C [sol1-C]\nvoid construct_paths(struct TreeNode* root, char** paths, int* returnSize, int* sta, int top) {\n    if (root != NULL) {\n        if (root->left == NULL && root->right == NULL) {  // 当前节点是叶子节点\n            char* tmp = (char*)malloc(1001);\n            int len = 0;\n            for (int i = 0; i < top; i++) {\n                len += sprintf(tmp + len, \"%d->\", sta[i]);\n            }\n            sprintf(tmp + len, \"%d\", root->val);\n            paths[(*returnSize)++] = tmp;  // 把路径加入到答案中\n        } else {\n            sta[top++] = root->val;  // 当前节点不是叶子节点，继续递归遍历\n            construct_paths(root->left, paths, returnSize, sta, top);\n            construct_paths(root->right, paths, returnSize, sta, top);\n        }\n    }\n}\n\nchar** binaryTreePaths(struct TreeNode* root, int* returnSize) {\n    char** paths = (char**)malloc(sizeof(char*) * 1001);\n    *returnSize = 0;\n    int sta[1001];\n    construct_paths(root, paths, returnSize, sta, 0);\n    return paths;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$，其中 $N$ 表示节点数目。在深度优先搜索中每个节点会被访问一次且只会被访问一次，每一次会对 `path` 变量进行拷贝构造，时间代价为 $O(N)$，故时间复杂度为 $O(N^2)$。\n\n* 空间复杂度：$O(N^2)$，其中 $N$ 表示节点数目。除答案数组外我们需要考虑递归调用的栈空间。在最坏情况下，当二叉树中每个节点只有一个孩子节点时，即整棵二叉树呈一个链状，此时递归的层数为 $N$，此时每一层的 `path` 变量的空间代价的总和为 $O(\\sum_{i = 1}^{N} i) = O(N^2)$ 空间复杂度为 $O(N^2)$。最好情况下，当二叉树为平衡二叉树时，它的高度为 $\\log N$，此时空间复杂度为 $O((\\log {N})^2)$。\n\n#### 方法二：广度优先搜索\n\n**思路与算法**\n\n我们也可以用广度优先搜索来实现。我们维护一个队列，存储节点以及根到该节点的路径。一开始这个队列里只有根节点。在每一步迭代中，我们取出队列中的首节点，如果它**是叶子节点**，则将它对应的路径加入到答案中。如果它**不是叶子节点**，则将它的所有孩子节点加入到队列的末尾。当队列为空时广度优先搜索结束，我们即能得到答案。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/257/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/257/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/257/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/257/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/257/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/257/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/257/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/257/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/257/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/257/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/257/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/257/12.png)>\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<string> binaryTreePaths(TreeNode* root) {\n        vector<string> paths;\n        if (root == nullptr) {\n            return paths;\n        }\n        queue<TreeNode*> node_queue;\n        queue<string> path_queue;\n\n        node_queue.push(root);\n        path_queue.push(to_string(root->val));\n\n        while (!node_queue.empty()) {\n            TreeNode* node = node_queue.front(); \n            string path = path_queue.front();\n            node_queue.pop();\n            path_queue.pop();\n\n            if (node->left == nullptr && node->right == nullptr) {\n                paths.push_back(path);\n            } else {\n                if (node->left != nullptr) {\n                    node_queue.push(node->left);\n                    path_queue.push(path + \"->\" + to_string(node->left->val));\n                }\n\n                if (node->right != nullptr) {\n                    node_queue.push(node->right);\n                    path_queue.push(path + \"->\" + to_string(node->right->val));\n                }\n            }\n        }\n        return paths;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar binaryTreePaths = function(root) {\n    const paths = [];\n    if (root === null) {\n        return paths;\n    }\n    const node_queue = [root];\n    const path_queue = [root.val.toString()];\n\n    while (node_queue.length) {\n        const node = node_queue.shift(); \n        const path = path_queue.shift();\n\n        if (node.left === null && node.right === null) {\n            paths.push(path);\n        } else {\n            if (node.left !== null) {\n                node_queue.push(node.left);\n                path_queue.push(path + \"->\" + node.left.val.toString());\n            }\n\n            if (node.right !== null) {\n                node_queue.push(node.right);\n                path_queue.push(path + \"->\" + node.right.val.toString());\n            }\n        }\n    }\n    return paths;\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<String> binaryTreePaths(TreeNode root) {\n        List<String> paths = new ArrayList<String>();\n        if (root == null) {\n            return paths;\n        }\n        Queue<TreeNode> nodeQueue = new LinkedList<TreeNode>();\n        Queue<String> pathQueue = new LinkedList<String>();\n\n        nodeQueue.offer(root);\n        pathQueue.offer(Integer.toString(root.val));\n\n        while (!nodeQueue.isEmpty()) {\n            TreeNode node = nodeQueue.poll(); \n            String path = pathQueue.poll();\n\n            if (node.left == null && node.right == null) {\n                paths.add(path);\n            } else {\n                if (node.left != null) {\n                    nodeQueue.offer(node.left);\n                    pathQueue.offer(new StringBuffer(path).append(\"->\").append(node.left.val).toString());\n                }\n\n                if (node.right != null) {\n                    nodeQueue.offer(node.right);\n                    pathQueue.offer(new StringBuffer(path).append(\"->\").append(node.right.val).toString());\n                }\n            }\n        }\n        return paths;\n    }\n}\n```\n\n```Python [sol2-Python]\nclass Solution:\n    def binaryTreePaths(self, root: TreeNode) -> List[str]:\n        paths = list()\n        if not root:\n            return paths\n\n        node_queue = collections.deque([root])\n        path_queue = collections.deque([str(root.val)])\n\n        while node_queue:\n            node = node_queue.popleft()\n            path = path_queue.popleft()\n\n            if not node.left and not node.right:\n                paths.append(path)\n            else:\n                if node.left:\n                    node_queue.append(node.left)\n                    path_queue.append(path + '->' + str(node.left.val))\n                \n                if node.right:\n                    node_queue.append(node.right)\n                    path_queue.append(path + '->' + str(node.right.val))\n        return paths\n```\n\n```golang [sol2-Golang]\nfunc binaryTreePaths(root *TreeNode) []string {\n    paths := []string{}\n    if root == nil {\n        return paths\n    }\n    nodeQueue := []*TreeNode{}\n    pathQueue := []string{}\n    nodeQueue = append(nodeQueue, root)\n    pathQueue = append(pathQueue, strconv.Itoa(root.Val))\n\n    for i := 0; i < len(nodeQueue); i++ {\n        node, path := nodeQueue[i], pathQueue[i]\n        if node.Left == nil && node.Right == nil {\n            paths = append(paths, path)\n            continue\n        }\n        if node.Left != nil {\n            nodeQueue = append(nodeQueue, node.Left)\n            pathQueue = append(pathQueue, path + \"->\" + strconv.Itoa(node.Left.Val))\n        }\n        if node.Right != nil {\n            nodeQueue = append(nodeQueue, node.Right)\n            pathQueue = append(pathQueue, path + \"->\" + strconv.Itoa(node.Right.Val))\n        }\n    }\n    return paths\n}\n```\n\n```C [sol2-C]\nchar** binaryTreePaths(struct TreeNode* root, int* returnSize) {\n    char** paths = (char**)malloc(sizeof(char*) * 1001);\n    *returnSize = 0;\n    if (root == NULL) {\n        return paths;\n    }\n\n    struct TreeNode** node_queue = (struct TreeNode**)malloc(sizeof(struct TreeNode*) * 1001);\n    char** path_queue = (char**)malloc(sizeof(char*) * 1001);\n\n    int left = 0, right = 0;\n\n    char* tmp = malloc(sizeof(char) * 1001);\n    sprintf(tmp, \"%d\", root->val);\n    node_queue[right] = root;\n    path_queue[right++] = tmp;\n\n    while (left < right) {\n        struct TreeNode* node = node_queue[left];\n        char* path = path_queue[left++];\n\n        if (node->left == NULL && node->right == NULL) {\n            paths[(*returnSize)++] = path;\n        } else {\n            int n = strlen(path);\n            if (node->left != NULL) {\n                char* tmp = malloc(sizeof(char) * 1001);\n                for (int i = 0; i < n; i++) {\n                    tmp[i] = path[i];\n                }\n                sprintf(tmp + n, \"->%d\", node->left->val);\n                node_queue[right] = node->left;\n                path_queue[right++] = tmp;\n            }\n\n            if (node->right != NULL) {\n                char* tmp = malloc(sizeof(char) * 1001);\n                for (int i = 0; i < n; i++) {\n                    tmp[i] = path[i];\n                }\n                sprintf(tmp + n, \"->%d\", node->right->val);\n                node_queue[right] = node->right;\n                path_queue[right++] = tmp;\n            }\n        }\n    }\n    return paths;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$，其中 $N$ 表示节点数目。分析同方法一。\n* 空间复杂度：$O(N^2)$，其中 $N$ 表示节点数目。在最坏情况下，队列中会存在 $N$ 个节点，保存字符串的队列中每个节点的最大长度为 $N$，故空间复杂度为 $O(N^2)$。"
}