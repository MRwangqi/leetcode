{
	"titleSlug": "smallest-k-lcci",
	"slug": "zui-xiao-kge-shu-by-leetcode-solution-o5eg",
	"url": "https://leetcode-cn.com/problems/smallest-k-lcci/solution/zui-xiao-kge-shu-by-leetcode-solution-o5eg/",
	"content": "#### 方法一：排序\n\n**思路和算法**\n\n对原数组从小到大排序后取出前 $k$ 个数即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> smallestK(vector<int>& arr, int k) {\n        vector<int> vec(k, 0);\n        sort(arr.begin(), arr.end());\n        for (int i = 0; i < k; ++i) {\n            vec[i] = arr[i];\n        }\n        return vec;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] smallestK(int[] arr, int k) {\n        int[] vec = new int[k];\n        Arrays.sort(arr);\n        for (int i = 0; i < k; ++i) {\n            vec[i] = arr[i];\n        }\n        return vec;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] SmallestK(int[] arr, int k) {\n        int[] vec = new int[k];\n        Array.Sort(arr);\n        for (int i = 0; i < k; ++i) {\n            vec[i] = arr[i];\n        }\n        return vec;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def smallestK(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        return arr[:k]\n```\n\n```JavaScript [sol1-JavaScript]\nvar smallestK = function(arr, k) {\n    arr.sort((a, b) => a - b);\n    return arr.slice(0, k);\n};\n```\n\n```go [sol1-Golang]\nfunc smallestK(arr []int, k int) []int {\n    sort.Ints(arr)\n    return arr[:k]\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log n)$，其中 $n$ 是数组 `arr` 的长度。算法的时间复杂度即排序的时间复杂度。\n\n- 空间复杂度：$O(\\log n)$，排序所需额外的空间复杂度为 $O(\\log n)$。\n\n#### 方法二：堆\n\n**思路和算法**\n\n我们用一个大根堆实时维护数组的前 $k$ 小值。首先将前 $k$ 个数插入大根堆中，随后从第 $k+1$ 个数开始遍历，如果当前遍历到的数比大根堆的堆顶的数要小，就把堆顶的数弹出，再插入当前遍历到的数。最后将大根堆里的数存入数组返回即可。在下面的代码中，由于 C++ 语言中的堆（即优先队列）为大根堆，我们可以这么做。而 Python 语言中的堆为小根堆，因此我们要对数组中所有的数取其相反数，才能使用小根堆维护前 $k$ 小值。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> smallestK(vector<int>& arr, int k) {\n        vector<int> vec(k, 0);\n        if (k == 0) { // 排除 0 的情况\n            return vec;\n        }\n        priority_queue<int> Q;\n        for (int i = 0; i < k; ++i) {\n            Q.push(arr[i]);\n        }\n        for (int i = k; i < (int)arr.size(); ++i) {\n            if (Q.top() > arr[i]) {\n                Q.pop();\n                Q.push(arr[i]);\n            }\n        }\n        for (int i = 0; i < k; ++i) {\n            vec[i] = Q.top();\n            Q.pop();\n        }\n        return vec;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] smallestK(int[] arr, int k) {\n        int[] vec = new int[k];\n        if (k == 0) { // 排除 0 的情况\n            return vec;\n        }\n        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(new Comparator<Integer>() {\n            public int compare(Integer num1, Integer num2) {\n                return num2 - num1;\n            }\n        });\n        for (int i = 0; i < k; ++i) {\n            queue.offer(arr[i]);\n        }\n        for (int i = k; i < arr.length; ++i) {\n            if (queue.peek() > arr[i]) {\n                queue.poll();\n                queue.offer(arr[i]);\n            }\n        }\n        for (int i = 0; i < k; ++i) {\n            vec[i] = queue.poll();\n        }\n        return vec;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def smallestK(self, arr: List[int], k: int) -> List[int]:\n        if k == 0:\n            return list()\n\n        hp = [-x for x in arr[:k]]\n        heapq.heapify(hp)\n        for i in range(k, len(arr)):\n            if -hp[0] > arr[i]:\n                heapq.heappop(hp)\n                heapq.heappush(hp, -arr[i])\n        ans = [-x for x in hp]\n        return ans\n```\n\n```go [sol2-Golang]\nfunc smallestK(arr []int, k int) []int {\n    if k == 0 {\n        return nil\n    }\n    h := &hp{arr[:k]}\n    heap.Init(h)\n    for _, v := range arr[k:] {\n        if h.IntSlice[0] > v {\n            h.IntSlice[0] = v\n            heap.Fix(h, 0)\n        }\n    }\n    return h.IntSlice\n}\n\ntype hp struct{ sort.IntSlice }\nfunc (h hp) Less(i, j int) bool { return h.IntSlice[i] > h.IntSlice[j] }\nfunc (hp) Push(interface{})     {}\nfunc (hp) Pop() (_ interface{}) { return }\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log k)$，其中 $n$ 是数组 `arr` 的长度。由于大根堆实时维护前 $k$ 小值，所以插入删除都是 $O(\\log k)$ 的时间复杂度，最坏情况下数组里 $n$ 个数都会插入，所以一共需要 $O(n\\log k)$ 的时间复杂度。\n\n- 空间复杂度：$O(k)$，因为大根堆里最多 $k$ 个数。\n\n#### 方法三：快排思想\n\n**思路和算法**\n\n我们可以借鉴快速排序的思想。我们知道快排的划分函数每次执行完后都能将数组分成两个部分，小于等于分界值 `pivot` 的元素的都会被放到数组的左边，大于的都会被放到数组的右边，然后返回分界值的下标。与快速排序不同的是，快速排序会根据分界值的下标递归处理划分的两侧，而这里我们只处理划分的一边。\n\n我们定义函数 `randomized_selected(arr, l, r, k)` 表示划分数组 `arr` 的 `[l,r]` 部分，使前 `k` 小的数在数组的左侧，在函数里我们调用快排的划分函数，假设划分函数返回的下标是 `pos`（表示分界值 `pivot` 最终在数组中的位置），即 `pivot` 是数组中第 `pos - l + 1` 小的数，那么一共会有三种情况：\n\n- 如果 `pos - l + 1 == k`，表示 `pivot` 就是第 $k$ 小的数，直接返回即可；\n\n- 如果 `pos - l + 1 < k`，表示第 $k$ 小的数在 `pivot` 的右侧，因此递归调用 `randomized_selected(arr, pos + 1, r, k - (pos - l + 1))`；\n\n- 如果 `pos - l + 1 > k`，表示第 $k$ 小的数在 `pivot` 的左侧，递归调用 `randomized_selected(arr, l, pos - 1, k)`。\n\n函数递归入口为 `randomized_selected(arr, 0, arr.length - 1, k)`。在函数返回后，将前 `k` 个数放入答案数组返回即可。\n\n```C++ [sol3-C++]\nclass Solution {\n    int partition(vector<int>& nums, int l, int r) {\n        int pivot = nums[r];\n        int i = l - 1;\n        for (int j = l; j <= r - 1; ++j) {\n            if (nums[j] <= pivot) {\n                i = i + 1;\n                swap(nums[i], nums[j]);\n            }\n        }\n        swap(nums[i + 1], nums[r]);\n        return i + 1;\n    }\n\n    // 基于随机的划分\n    int randomized_partition(vector<int>& nums, int l, int r) {\n        int i = rand() % (r - l + 1) + l;\n        swap(nums[r], nums[i]);\n        return partition(nums, l, r);\n    }\n\n    void randomized_selected(vector<int>& arr, int l, int r, int k) {\n        if (l >= r) {\n            return;\n        }\n        int pos = randomized_partition(arr, l, r);\n        int num = pos - l + 1;\n        if (k == num) {\n            return;\n        } else if (k < num) {\n            randomized_selected(arr, l, pos - 1, k);\n        } else {\n            randomized_selected(arr, pos + 1, r, k - num);\n        }\n    }\n\npublic:\n    vector<int> smallestK(vector<int>& arr, int k) {\n        srand((unsigned)time(NULL));\n        randomized_selected(arr, 0, (int)arr.size() - 1, k);\n        vector<int> vec;\n        for (int i = 0; i < k; ++i) {\n            vec.push_back(arr[i]);\n        }\n        return vec;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int[] smallestK(int[] arr, int k) {\n        randomizedSelected(arr, 0, arr.length - 1, k);\n        int[] vec = new int[k];\n        for (int i = 0; i < k; ++i) {\n            vec[i] = arr[i];\n        }\n        return vec;\n    }\n\n    private void randomizedSelected(int[] arr, int l, int r, int k) {\n        if (l >= r) {\n            return;\n        }\n        int pos = randomizedPartition(arr, l, r);\n        int num = pos - l + 1;\n        if (k == num) {\n            return;\n        } else if (k < num) {\n            randomizedSelected(arr, l, pos - 1, k);\n        } else {\n            randomizedSelected(arr, pos + 1, r, k - num);\n        }\n    }\n\n    // 基于随机的划分\n    private int randomizedPartition(int[] nums, int l, int r) {\n        int i = new Random().nextInt(r - l + 1) + l;\n        swap(nums, r, i);\n        return partition(nums, l, r);\n    }\n\n    private int partition(int[] nums, int l, int r) {\n        int pivot = nums[r];\n        int i = l - 1;\n        for (int j = l; j <= r - 1; ++j) {\n            if (nums[j] <= pivot) {\n                i = i + 1;\n                swap(nums, i, j);\n            }\n        }\n        swap(nums, i + 1, r);\n        return i + 1;\n    }\n\n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public int[] SmallestK(int[] arr, int k) {\n        RandomizedSelected(arr, 0, arr.Length - 1, k);\n        int[] vec = new int[k];\n        for (int i = 0; i < k; ++i) {\n            vec[i] = arr[i];\n        }\n        return vec;\n    }\n\n    private void RandomizedSelected(int[] arr, int l, int r, int k) {\n        if (l >= r) {\n            return;\n        }\n        int pos = RandomizedPartition(arr, l, r);\n        int num = pos - l + 1;\n        if (k == num) {\n            return;\n        } else if (k < num) {\n            RandomizedSelected(arr, l, pos - 1, k);\n        } else {\n            RandomizedSelected(arr, pos + 1, r, k - num);\n        }\n    }\n\n    // 基于随机的划分\n    private int RandomizedPartition(int[] nums, int l, int r) {\n        int i = new Random().Next(l, r + 1);\n        Swap(nums, r, i);\n        return Partition(nums, l, r);\n    }\n\n    private int Partition(int[] nums, int l, int r) {\n        int pivot = nums[r];\n        int i = l - 1;\n        for (int j = l; j <= r - 1; ++j) {\n            if (nums[j] <= pivot) {\n                i = i + 1;\n                Swap(nums, i, j);\n            }\n        }\n        Swap(nums, i + 1, r);\n        return i + 1;\n    }\n\n    private void Swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def partition(self, nums, l, r):\n        pivot = nums[r]\n        i = l - 1\n        for j in range(l, r):\n            if nums[j] <= pivot:\n                i += 1\n                nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1], nums[r] = nums[r], nums[i + 1]\n        return i + 1\n\n    def randomized_partition(self, nums, l, r):\n        i = random.randint(l, r)\n        nums[r], nums[i] = nums[i], nums[r]\n        return self.partition(nums, l, r)\n\n    def randomized_selected(self, arr, l, r, k):\n        pos = self.randomized_partition(arr, l, r)\n        num = pos - l + 1\n        if k < num:\n            self.randomized_selected(arr, l, pos - 1, k)\n        elif k > num:\n            self.randomized_selected(arr, pos + 1, r, k - num)\n\n    def smallestK(self, arr: List[int], k: int) -> List[int]:\n        if k == 0:\n            return list()\n        self.randomized_selected(arr, 0, len(arr) - 1, k)\n        return arr[:k]\n```\n\n```JavaScript [sol3-JavaScript]\nvar smallestK = function(arr, k) {\n    randomizedSelected(arr, 0, arr.length - 1, k);\n    return arr.slice(0, k);\n}\n\nconst randomizedSelected = (arr, l, r, k) => {\n    if (l >= r) {\n        return;\n    }\n    const pos = randomizedPartition(arr, l, r);\n    const num = pos - l + 1;\n    if (k === num) {\n        return;\n    } else if (k < num) {\n        randomizedSelected(arr, l, pos - 1, k);\n    } else {\n        randomizedSelected(arr, pos + 1, r, k - num);\n    }\n}\n\n// 基于随机的划分\nconst randomizedPartition = (nums, l, r) => {\n    const i = parseInt(Math.random() * (r - l + 1)) + l;\n    swap(nums, r, i);\n    return partition(nums, l, r);\n}\n\nconst partition = (nums, l, r) => {\n    const pivot = nums[r];\n    let i = l - 1;\n    for (let j = l; j <= r - 1; ++j) {\n        if (nums[j] <= pivot) {\n            i = i + 1;\n            swap(nums, i, j);\n        }\n    }\n    swap(nums, i + 1, r);\n    return i + 1;\n}\n\nconst swap = (nums, i, j) => {\n    [nums[i], nums[j]] = [nums[j], nums[i]];\n}\n```\n\n```go [sol3-Golang]\nfunc partition(nums []int, l, r int) int {\n    pivot := nums[r]\n    i := l - 1\n    for j := l; j < r; j++ {\n        if nums[j] <= pivot {\n            i++\n            nums[i], nums[j] = nums[j], nums[i]\n        }\n    }\n    nums[i+1], nums[r] = nums[r], nums[i+1]\n    return i + 1\n}\n\nfunc randomizedPartition(nums []int, l, r int) int {\n    i := l + rand.Intn(r-l+1)\n    nums[r], nums[i] = nums[i], nums[r]\n    return partition(nums, l, r)\n}\n\nfunc randomizedSelected(arr []int, l, r, k int) {\n    pos := randomizedPartition(arr, l, r)\n    num := pos - l + 1\n    if k < num {\n        randomizedSelected(arr, l, pos-1, k)\n    } else if k > num {\n        randomizedSelected(arr, pos+1, r, k-num)\n    }\n}\n\nfunc smallestK(arr []int, k int) []int {\n    if k == 0 {\n        return nil\n    }\n    rand.Seed(time.Now().UnixNano())\n    randomizedSelected(arr, 0, len(arr)-1, k)\n    return arr[:k]\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：期望为 $O(n)$ ，由于证明过程很繁琐，所以不在这里展开讲。具体证明可以参考《算法导论》第 9 章第 2 小节。\n\n  最坏情况下的时间复杂度为 $O(n^2)$。情况最差时，每次的划分点都是最大值或最小值，一共需要划分 $n - 1$ 次，而一次划分需要线性的时间复杂度，所以最坏情况下时间复杂度为 $O(n^2)$。\n  \n- 空间复杂度：期望为 $O(\\log n)$，递归调用的期望深度为 $O(\\log n)$，每层需要的空间为 $O(1)$，只有常数个变量。\n\n  最坏情况下的空间复杂度为 $O(n)$。最坏情况下需要划分 $n$ 次，即 `randomized_selected` 函数递归调用最深 $n - 1$ 层，而每层由于需要 $O(1)$ 的空间，所以一共需要 $O(n)$ 的空间复杂度。"
}