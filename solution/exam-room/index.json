{
	"titleSlug": "exam-room",
	"slug": "kao-chang-jiu-zuo-by-leetcode",
	"url": "https://leetcode-cn.com/problems/exam-room/solution/kao-chang-jiu-zuo-by-leetcode/",
	"content": "#### 方法一：维护有序的座位编号\n\n我们可以用有序集合（`Java` 中 `TreeSet`，`C++` 中的 `set`）存储目前有学生的座位编号。当我们要调用 `leave(p)` 函数时，我们只需要把有序集合中的 `p` 移除即可。当我们要调用 `seat()` 函数时，我们遍历这个有序集合，对于相邻的两个座位 `i` 和 `j`，如果选择在这两个座位之间入座，那么最近的距离 `d` 为 `(j - i) / 2`，选择的座位为 `i + d`。除此之外，我们还需要考虑坐在最左侧 `0` 和最右侧 `N - 1` 的情况。\n\n```Java [sol1]\nclass ExamRoom {\n    int N;\n    TreeSet<Integer> students;\n\n    public ExamRoom(int N) {\n        this.N = N;\n        students = new TreeSet();\n    }\n\n    public int seat() {\n        //Let's determine student, the position of the next\n        //student to sit down.\n        int student = 0;\n        if (students.size() > 0) {\n            //Tenatively, dist is the distance to the closest student,\n            //which is achieved by sitting in the position 'student'.\n            //We start by considering the left-most seat.\n            int dist = students.first();\n            Integer prev = null;\n            for (Integer s: students) {\n                if (prev != null) {\n                    //For each pair of adjacent students in positions (prev, s),\n                    //d is the distance to the closest student;\n                    //achieved at position prev + d.\n                    int d = (s - prev) / 2;\n                    if (d > dist) {\n                        dist = d;\n                        student = prev + d;\n                    }\n                }\n                prev = s;\n            }\n\n            //Considering the right-most seat.\n            if (N - 1 - students.last() > dist)\n                student = N - 1;\n        }\n\n        //Add the student to our sorted TreeSet of positions.\n        students.add(student);\n        return student;\n    }\n\n    public void leave(int p) {\n        students.remove(p);\n    }\n}\n```\n\n```Python3 [sol1]\nclass ExamRoom(object):\n    def __init__(self, N):\n        self.N = N\n        self.students = []\n\n    def seat(self):\n        # Let's determine student, the position of the next\n        # student to sit down.\n        if not self.students:\n            student = 0\n        else:\n            # Tenatively, dist is the distance to the closest student,\n            # which is achieved by sitting in the position 'student'.\n            # We start by considering the left-most seat.\n            dist, student = self.students[0], 0\n            for i, s in enumerate(self.students):\n                if i:\n                    prev = self.students[i-1]\n                    # For each pair of adjacent students in positions (prev, s),\n                    # d is the distance to the closest student;\n                    # achieved at position prev + d.\n                    d = (s - prev) // 2\n                    if d > dist:\n                        dist, student = d, prev + d\n\n            # Considering the right-most seat.\n            d = self.N - 1 - self.students[-1]\n            if d > dist:\n                student = self.N - 1\n\n        # Add the student to our sorted list of positions.\n        bisect.insort(self.students, student)\n        return student\n\n    def leave(self, p):\n        self.students.remove(p)\n```\n\n**复杂度分析**\n\n* 时间复杂度：`seat()` 函数的时间复杂度为 $O(P)$，其中 $P$ 是当前入座学生的数目。每次调用 `seat()` 函数我们都需要遍历整个有序集合。`leave()` 函数的时间复杂度为 $O(P)$（`Python` 代码中）或者 $O(\\log P)$（`Java` 代码中）。\n\n* 空间复杂度：$O(P)$，用于存储有序集合。"
}