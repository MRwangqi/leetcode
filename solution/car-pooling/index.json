{
	"titleSlug": "car-pooling",
	"slug": "pin-che-by-xxbryce",
	"url": "https://leetcode-cn.com/problems/car-pooling/solution/pin-che-by-xxbryce/",
	"content": "### 解题思路：\r\n排序+小顶堆\r\n\r\n* 首先按照上车地点距离初始位置距离排序；初始化小顶堆，小顶堆用来记录接下来最早需要下车的乘客人数。\r\n* 顺序遍历 `trips`，首先更新当前车的位置距离起点的距离 `dist`，主要是为了解决 “先下后上” 的情况，假如当前乘客已满，但是当前距离与小顶堆堆顶元素比较发现有乘客需要下车，此处一个循环是为了解决在上次还未到下车距离此时又超过了下车位置的乘客一并全部下车的情况，循环直至没有乘客需要下车位置，再将这一站要上车的乘客加进来。\r\n* 如果此时乘客人数大于车容量，那么就无法完成任务。\r\n* 如果可以继续，则将这一站乘客需要下车的距离及人数加入到小顶堆中；继续遍历 `trips`。\r\n* 参考评论区：直接将下车位置及人数和上车位置及人数放在一个列表中进行排序，然后顺序遍历，在特定的位置上下车，判断是否小于车容量，很巧妙。\r\n\r\n#### 代码：\r\n```python [-Python]\r\nfrom typing import List\r\nimport heapq\r\n\r\n\r\nclass Solution:\r\n    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:\r\n        trips.sort(key=lambda x: x[1])\r\n        off_dist = []\r\n        count = 0\r\n        for i in range(len(trips)):\r\n            dist = trips[i][1]\r\n            while off_dist and dist >= off_dist[0][0]:\r\n                _, passenger = heapq.heappop(off_dist)\r\n                count -= passenger\r\n            count += trips[i][0]\r\n            if count > capacity:\r\n                return False\r\n            heapq.heappush(off_dist, [trips[i][-1], trips[i][0]])\r\n        return True\r\n\r\n\r\n    def carPooling1(self, trips: List[List[int]], capacity: int) -> bool:\r\n        stop = []\r\n        for n, s, e in trips:\r\n            stop.append([s, n])\r\n            stop.append([e, -n])\r\n\r\n        stop.sort()\r\n\r\n        for _, count in stop:\r\n            capacity -= count\r\n            if capacity < 0: return False\r\n\r\n        return True\r\n```"
}