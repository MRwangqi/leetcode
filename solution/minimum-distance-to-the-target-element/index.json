{
	"titleSlug": "minimum-distance-to-the-target-element",
	"slug": "dao-mu-biao-yuan-su-de-zui-xiao-ju-chi-b-v4ce",
	"url": "https://leetcode-cn.com/problems/minimum-distance-to-the-target-element/solution/dao-mu-biao-yuan-su-de-zui-xiao-ju-chi-b-v4ce/",
	"content": "#### 方法一：模拟\n\n**思路与算法**\n\n我们对 $\\textit{nums}$ 进行遍历，并在遍历的过程中用 $\\textit{res}$ 来维护满足要求的 $|i - \\textit{start}|$ 的最小值。\n\n注意 $\\textit{res}$ 的初始值需要大于等于 $|i - \\textit{start}|$ 的最大可能值，即 $\\textit{nums.length} - 1$。在下面的代码中，我们选择值 $\\textit{nums.length}$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int getMinDistance(vector<int>& nums, int target, int start) {\n        int res = nums.size();\n        for (int i = 0; i < nums.size(); ++i){\n            if (nums[i] == target){\n                res = min(res, abs(i - start));\n            }\n        }\n        return res;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\n        res = len(nums)\n        for i, num in enumerate(nums):\n            if num == target:\n                res = min(res, abs(i - start))\n        return res\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，即为遍历数组的时间复杂度。\n\n- 空间复杂度：$O(1)$。"
}