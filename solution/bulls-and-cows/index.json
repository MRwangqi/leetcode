{
	"titleSlug": "bulls-and-cows",
	"slug": "cai-shu-zi-you-xi-by-leetcode-solution-q9lz",
	"url": "https://leetcode-cn.com/problems/bulls-and-cows/solution/cai-shu-zi-you-xi-by-leetcode-solution-q9lz/",
	"content": "#### 方法一：遍历\n\n根据题意，对于公牛，需要满足数字和确切位置都猜对。我们可以遍历 $\\textit{secret}$ 和 $\\textit{guess}$，统计满足 $\\textit{secret}[i]=\\textit{guess}[i]$ 的下标个数，即为公牛的个数。\n\n对于奶牛，需要满足数字猜对但是位置不对。我们可以在 $\\textit{secret}[i]\\ne\\textit{guess}[i]$ 时，分别统计 $\\textit{secret}$ 和 $\\textit{guess}$ 的各个字符的出现次数，记在两个长度为 $10$ 的数组中。根据题目所述的「这次猜测中有多少位非公牛数字可以通过重新排列转换成公牛数字」，由于多余的数字无法匹配，对于 $\\texttt{0}$ 到 $\\texttt{9}$ 的每位数字，应取其在 $\\textit{secret}$ 和 $\\textit{guess}$ 中的出现次数的最小值。将每位数字出现次数的最小值累加，即为奶牛的个数。\n\n```Python [sol1-Python3]\nclass Solution:\n    def getHint(self, secret: str, guess: str) -> str:\n        bulls = 0\n        cntS, cntG = [0] * 10, [0] * 10\n        for s, g in zip(secret, guess):\n            if s == g:\n                bulls += 1\n            else:\n                cntS[int(s)] += 1\n                cntG[int(g)] += 1\n        cows = sum(min(s, g) for s, g in zip(cntS, cntG))\n        return f'{bulls}A{cows}B'\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string getHint(string secret, string guess) {\n        int bulls = 0;\n        vector<int> cntS(10), cntG(10);\n        for (int i = 0; i < secret.length(); ++i) {\n            if (secret[i] == guess[i]) {\n                ++bulls;\n            } else {\n                ++cntS[secret[i] - '0'];\n                ++cntG[guess[i] - '0'];\n            }\n        }\n        int cows = 0;\n        for (int i = 0; i < 10; ++i) {\n            cows += min(cntS[i], cntG[i]);\n        }\n        return to_string(bulls) + \"A\" + to_string(cows) + \"B\";\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String getHint(String secret, String guess) {\n        int bulls = 0;\n        int[] cntS = new int[10];\n        int[] cntG = new int[10];\n        for (int i = 0; i < secret.length(); ++i) {\n            if (secret.charAt(i) == guess.charAt(i)) {\n                ++bulls;\n            } else {\n                ++cntS[secret.charAt(i) - '0'];\n                ++cntG[guess.charAt(i) - '0'];\n            }\n        }\n        int cows = 0;\n        for (int i = 0; i < 10; ++i) {\n            cows += Math.min(cntS[i], cntG[i]);\n        }\n        return Integer.toString(bulls) + \"A\" + Integer.toString(cows) + \"B\";\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string GetHint(string secret, string guess) {\n        int bulls = 0;\n        int[] cntS = new int[10];\n        int[] cntG = new int[10];\n        for (int i = 0; i < secret.Length; ++i) {\n            if (secret[i] == guess[i]) {\n                ++bulls;\n            } else {\n                ++cntS[secret[i] - '0'];\n                ++cntG[guess[i] - '0'];\n            }\n        }\n        int cows = 0;\n        for (int i = 0; i < 10; ++i) {\n            cows += Math.Min(cntS[i], cntG[i]);\n        }\n        return bulls.ToString() + \"A\" + cows.ToString() + \"B\";\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc getHint(secret, guess string) string {\n    bulls := 0\n    var cntS, cntG [10]int\n    for i := range secret {\n        if secret[i] == guess[i] {\n            bulls++\n        } else {\n            cntS[secret[i]-'0']++\n            cntG[guess[i]-'0']++\n        }\n    }\n    cows := 0\n    for i := 0; i < 10; i++ {\n        cows += min(cntS[i], cntG[i])\n    }\n    return fmt.Sprintf(\"%dA%dB\", bulls, cows)\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar getHint = function(secret, guess) {\n    let bulls = 0;\n    const cntS = new Array(10).fill(0);\n    const cntG = new Array(10).fill(0);\n    for (let i = 0; i < secret.length; ++i) {\n        if (secret[i] == guess[i]) {\n            ++bulls;\n        } else {\n            ++cntS[secret[i].charCodeAt() - '0'.charCodeAt()];\n            ++cntG[guess[i].charCodeAt() - '0'.charCodeAt()];\n        }\n    }\n    let cows = 0;\n    for (let i = 0; i < 10; ++i) {\n        cows += Math.min(cntS[i], cntG[i]);\n    }\n    return '' + bulls + \"A\" + '' + cows + \"B\";\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是字符串 $\\textit{secret}$ 的长度。\n\n- 空间复杂度：$O(C)$。需要常数个空间统计字符出现次数，由于我们统计的是数字字符，因此 $C=10$。"
}