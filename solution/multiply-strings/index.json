{
	"titleSlug": "multiply-strings",
	"slug": "zi-fu-chuan-xiang-cheng-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/",
	"content": "#### 方法一：做加法\n\n如果 $\\textit{num}_1$ 和 $\\textit{num}_2$ 之一是 $0$，则直接将 $0$ 作为结果返回即可。\n\n如果 $\\textit{num}_1$ 和 $\\textit{num}_2$ 都不是 $0$，则可以通过模拟「竖式乘法」的方法计算乘积。从右往左遍历乘数，将乘数的每一位与被乘数相乘得到对应的结果，再将每次得到的结果累加。这道题中，被乘数是 $\\textit{num}_1$，乘数是 $\\textit{num}_2$。\n\n需要注意的是，$\\textit{num}_2$ 除了最低位以外，其余的每一位的运算结果都需要补 $0$。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/43/sol1.png)\n\n对每次得到的结果进行累加，可以使用「[415. 字符串相加](https://leetcode-cn.com/problems/add-strings/)」的做法。\n\n```Java [sol1-Java]\nclass Solution {\n    public String multiply(String num1, String num2) {\n        if (num1.equals(\"0\") || num2.equals(\"0\")) {\n            return \"0\";\n        }\n        String ans = \"0\";\n        int m = num1.length(), n = num2.length();\n        for (int i = n - 1; i >= 0; i--) {\n            StringBuffer curr = new StringBuffer();\n            int add = 0;\n            for (int j = n - 1; j > i; j--) {\n                curr.append(0);\n            }\n            int y = num2.charAt(i) - '0';\n            for (int j = m - 1; j >= 0; j--) {\n                int x = num1.charAt(j) - '0';\n                int product = x * y + add;\n                curr.append(product % 10);\n                add = product / 10;\n            }\n            if (add != 0) {\n                curr.append(add % 10);\n            }\n            ans = addStrings(ans, curr.reverse().toString());\n        }\n        return ans;\n    }\n\n    public String addStrings(String num1, String num2) {\n        int i = num1.length() - 1, j = num2.length() - 1, add = 0;\n        StringBuffer ans = new StringBuffer();\n        while (i >= 0 || j >= 0 || add != 0) {\n            int x = i >= 0 ? num1.charAt(i) - '0' : 0;\n            int y = j >= 0 ? num2.charAt(j) - '0' : 0;\n            int result = x + y + add;\n            ans.append(result % 10);\n            add = result / 10;\n            i--;\n            j--;\n        }\n        ans.reverse();\n        return ans.toString();\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    string multiply(string num1, string num2) {\n        if (num1 == \"0\" || num2 == \"0\") {\n            return \"0\";\n        }\n        string ans = \"0\";\n        int m = num1.size(), n = num2.size();\n        for (int i = n - 1; i >= 0; i--) {\n            string curr;\n            int add = 0;\n            for (int j = n - 1; j > i; j--) {\n                curr.push_back(0);\n            }\n            int y = num2.at(i) - '0';\n            for (int j = m - 1; j >= 0; j--) {\n                int x = num1.at(j) - '0';\n                int product = x * y + add;\n                curr.push_back(product % 10);\n                add = product / 10;\n            }\n            while (add != 0) {\n                curr.push_back(add % 10);\n                add /= 10;\n            }\n            reverse(curr.begin(), curr.end());\n            for (auto &c : curr) {\n                c += '0';\n            }\n            ans = addStrings(ans, curr);\n        }\n        return ans;\n    }\n\n    string addStrings(string &num1, string &num2) {\n        int i = num1.size() - 1, j = num2.size() - 1, add = 0;\n        string ans;\n        while (i >= 0 || j >= 0 || add != 0) {\n            int x = i >= 0 ? num1.at(i) - '0' : 0;\n            int y = j >= 0 ? num2.at(j) - '0' : 0;\n            int result = x + y + add;\n            ans.push_back(result % 10);\n            add = result / 10;\n            i--;\n            j--;\n        }\n        reverse(ans.begin(), ans.end());\n        for (auto &c: ans) {\n            c += '0';\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        ans = \"0\"\n        m, n = len(num1), len(num2)\n        for i in range(n - 1, -1, -1):\n            add = 0\n            y = int(num2[i])\n            curr = [\"0\"] * (n - i - 1)\n            for j in range(m - 1, -1, -1):\n                product = int(num1[j]) * y + add\n                curr.append(str(product % 10))\n                add = product // 10\n            if add > 0:\n                curr.append(str(add))\n            curr = \"\".join(curr[::-1])\n            ans = self.addStrings(ans, curr)\n        \n        return ans\n    \n    def addStrings(self, num1: str, num2: str) -> str:\n        i, j = len(num1) - 1, len(num2) - 1\n        add = 0\n        ans = list()\n        while i >= 0 or j >= 0 or add != 0:\n            x = int(num1[i]) if i >= 0 else 0\n            y = int(num2[j]) if j >= 0 else 0\n            result = x + y + add\n            ans.append(str(result % 10))\n            add = result // 10\n            i -= 1\n            j -= 1\n        return \"\".join(ans[::-1])\n```\n\n```golang [sol1-Golang]\nfunc multiply(num1 string, num2 string) string {\n    if num1 == \"0\" || num2 == \"0\" {\n        return \"0\"\n    }\n    ans := \"0\"\n    m, n := len(num1), len(num2)\n    for i := n - 1; i >= 0; i-- {\n        curr := \"\"\n        add := 0\n        for j := n - 1; j > i; j-- {\n            curr += \"0\"\n        }\n        y := int(num2[i] - '0')\n        for j := m - 1; j >= 0; j-- {\n            x := int(num1[j] - '0')\n            product := x * y + add\n            curr = strconv.Itoa(product % 10) + curr\n            add = product / 10\n        }\n        for ; add != 0; add /= 10 {\n            curr = strconv.Itoa(add % 10) + curr\n        }\n        ans = addStrings(ans, curr)\n    }\n    return ans\n}\n\nfunc addStrings(num1, num2 string) string {\n    i, j := len(num1) - 1, len(num2) - 1\n    add := 0\n    ans := \"\"\n    for ; i >= 0 || j >= 0 || add != 0; i, j = i - 1, j - 1 {\n        x, y := 0, 0\n        if i >= 0 {\n            x = int(num1[i] - '0')\n        }\n        if j >= 0 {\n            y = int(num2[j] - '0')\n        }\n        result := x + y + add\n        ans = strconv.Itoa(result % 10) + ans\n        add = result / 10\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nchar* addStrings(char* num1, char* num2) {\n    int i = strlen(num1) - 1, j = strlen(num2) - 1, add = 0;\n    char* ans = malloc(sizeof(char) * (i + j + 5));\n    int ansLen = 0;\n    while (i >= 0 || j >= 0 || add != 0) {\n        int x = i >= 0 ? num1[i] - '0' : 0;\n        int y = j >= 0 ? num2[j] - '0' : 0;\n        int result = x + y + add;\n        ans[ansLen++] = result % 10;\n        add = result / 10;\n        i--;\n        j--;\n    }\n    for (int i = 0; i < ansLen / 2; i++) {\n        char t = ans[i];\n        ans[i] = ans[ansLen - 1 - i];\n        ans[ansLen - 1 - i] = t;\n    }\n    for (int i = 0; i < ansLen; i++) {\n        ans[i] += '0';\n    }\n    ans[ansLen++] = 0;\n    return ans;\n}\n\nchar* multiply(char* num1, char* num2) {\n    int m = strlen(num1), n = strlen(num2);\n    char* ans = malloc(sizeof(char) * 2);\n    ans[0] = '0', ans[1] = 0;\n    if ((m == 1 && num1[0] == '0') || (n == 1 && num2[0] == '0')) {\n        return ans;\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        char* curr = malloc(sizeof(char) * (n + m + 5));\n        int currLen = 0;\n        int add = 0;\n        for (int j = n - 1; j > i; j--) {\n            curr[currLen++] = 0;\n        }\n        int y = num2[i] - '0';\n        for (int j = m - 1; j >= 0; j--) {\n            int x = num1[j] - '0';\n            int product = x * y + add;\n            curr[currLen++] = product % 10;\n            add = product / 10;\n        }\n        while (add != 0) {\n            curr[currLen++] = add % 10;\n            add /= 10;\n        }\n        for (int i = 0; i < currLen / 2; i++) {\n            char t = curr[i];\n            curr[i] = curr[currLen - 1 - i];\n            curr[currLen - 1 - i] = t;\n        }\n        for (int i = 0; i < currLen; i++) {\n            curr[i] += '0';\n        }\n        curr[currLen++] = 0;\n        char* tmp = addStrings(ans, curr);\n        free(ans), free(curr);\n        ans = tmp;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn+n^2)$，其中 $m$ 和 $n$ 分别是 $\\textit{num}_1$ 和 $\\textit{num}_2$ 的长度。需要从右往左遍历 $\\textit{num}_2$，对于 $\\textit{num}_2$ 的每一位，都需要和 $\\textit{num}_1$ 的每一位计算乘积，因此计算乘积的总次数是 $mn$。字符串相加操作共有 $n$ 次，相加的字符串长度最长为 $m+n$，因此字符串相加的时间复杂度是 $O(mn+n^2)$。总时间复杂度是 $O(mn+n^2)$。\n\n- 空间复杂度：$O(m+n)$，其中 $m$ 和 $n$ 分别是 $\\textit{num}_1$ 和 $\\textit{num}_2$ 的长度。空间复杂度取决于存储中间状态的字符串，由于乘积的最大长度为 $m+n$，因此存储中间状态的字符串的长度不会超过 $m+n$。\n\n#### 方法二：做乘法\n\n方法一的做法是从右往左遍历乘数，将乘数的每一位与被乘数相乘得到对应的结果，再将每次得到的结果累加，整个过程中涉及到较多字符串相加的操作。如果使用数组代替字符串存储结果，则可以减少对字符串的操作。\n\n令 $m$ 和 $n$ 分别表示 $\\textit{num}_1$ 和 $\\textit{num}_2$ 的长度，并且它们均不为 $0$，则 $\\textit{num}_1$ 和 $\\textit{num}_2$ 的乘积的长度为 $m+n-1$ 或 $m+n$。简单证明如下：\n\n- 如果 $\\textit{num}_1$ 和 $\\textit{num}_2$ 都取最小值，则 $\\textit{num}_1=10^{m-1}$，$\\textit{num}_2=10^{n-1}$，$\\textit{num}_1 \\times \\textit{num}_2=10^{m+n-2}$，乘积的长度为 $m+n-1$；\n\n- 如果 $\\textit{num}_1$ 和 $\\textit{num}_2$ 都取最大值，则 $\\textit{num}_1=10^m-1$，$\\textit{num}_2=10^n-1$，$\\textit{num}_1 \\times \\textit{num}_2=10^{m+n}-10^m-10^n+1$，乘积显然小于 $10^{m+n}$ 且大于 $10^{m+n-1}$，因此乘积的长度为 $m+n$。\n\n由于 $\\textit{num}_1$ 和 $\\textit{num}_2$ 的乘积的最大长度为 $m+n$，因此创建长度为 $m+n$ 的数组 $\\textit{ansArr}$ 用于存储乘积。对于任意 $0 \\le i < m$ 和 $0 \\le j < n$，$\\textit{num}_1[i] \\times \\textit{num}_2[j]$ 的结果位于 $\\textit{ansArr}[i+j+1]$，如果 $\\textit{ansArr}[i+j+1] \\ge 10$，则将进位部分加到 $\\textit{ansArr}[i+j]$。\n\n最后，将数组 $\\textit{ansArr}$ 转成字符串，如果最高位是 $0$ 则舍弃最高位。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/43/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/43/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/43/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/43/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/43/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/43/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/43/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/43/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/43/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/43/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/43/11.png),![fig12](https://assets.leetcode-cn.com/solution-static/43/12.png),![fig13](https://assets.leetcode-cn.com/solution-static/43/13.png)>\n\n```Java [sol2-Java]\nclass Solution {\n    public String multiply(String num1, String num2) {\n        if (num1.equals(\"0\") || num2.equals(\"0\")) {\n            return \"0\";\n        }\n        int m = num1.length(), n = num2.length();\n        int[] ansArr = new int[m + n];\n        for (int i = m - 1; i >= 0; i--) {\n            int x = num1.charAt(i) - '0';\n            for (int j = n - 1; j >= 0; j--) {\n                int y = num2.charAt(j) - '0';\n                ansArr[i + j + 1] += x * y;\n            }\n        }\n        for (int i = m + n - 1; i > 0; i--) {\n            ansArr[i - 1] += ansArr[i] / 10;\n            ansArr[i] %= 10;\n        }\n        int index = ansArr[0] == 0 ? 1 : 0;\n        StringBuffer ans = new StringBuffer();\n        while (index < m + n) {\n            ans.append(ansArr[index]);\n            index++;\n        }\n        return ans.toString();\n    }\n}\n```\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    string multiply(string num1, string num2) {\n        if (num1 == \"0\" || num2 == \"0\") {\n            return \"0\";\n        }\n        int m = num1.size(), n = num2.size();\n        auto ansArr = vector<int>(m + n);\n        for (int i = m - 1; i >= 0; i--) {\n            int x = num1.at(i) - '0';\n            for (int j = n - 1; j >= 0; j--) {\n                int y = num2.at(j) - '0';\n                ansArr[i + j + 1] += x * y;\n            }\n        }\n        for (int i = m + n - 1; i > 0; i--) {\n            ansArr[i - 1] += ansArr[i] / 10;\n            ansArr[i] %= 10;\n        }\n        int index = ansArr[0] == 0 ? 1 : 0;\n        string ans;\n        while (index < m + n) {\n            ans.push_back(ansArr[index]);\n            index++;\n        }\n        for (auto &c: ans) {\n            c += '0';\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        m, n = len(num1), len(num2)\n        ansArr = [0] * (m + n)\n        for i in range(m - 1, -1, -1):\n            x = int(num1[i])\n            for j in range(n - 1, -1, -1):\n                ansArr[i + j + 1] += x * int(num2[j])\n        \n        for i in range(m + n - 1, 0, -1):\n            ansArr[i - 1] += ansArr[i] // 10\n            ansArr[i] %= 10\n        \n        index = 1 if ansArr[0] == 0 else 0\n        ans = \"\".join(str(x) for x in ansArr[index:])\n        return ans\n```\n\n```golang [sol2-Golang]\nfunc multiply(num1 string, num2 string) string {\n    if num1 == \"0\" || num2 == \"0\" {\n        return \"0\"\n    }\n    m, n := len(num1), len(num2)\n    ansArr := make([]int, m + n)\n    for i := m - 1; i >= 0; i-- {\n        x := int(num1[i]) - '0'\n        for j := n - 1; j >= 0; j-- {\n            y := int(num2[j] - '0')\n            ansArr[i + j + 1] += x * y\n        }\n    }\n    for i := m + n - 1; i > 0; i-- {\n        ansArr[i - 1] += ansArr[i] / 10\n        ansArr[i] %= 10\n    }\n    ans := \"\"\n    idx := 0\n    if ansArr[0] == 0 {\n        idx = 1\n    }\n    for ; idx < m + n; idx++ {\n        ans += strconv.Itoa(ansArr[idx])\n    }\n    return ans\n}\n```\n\n```C [sol2-C]\nchar* multiply(char* num1, char* num2) {\n    int m = strlen(num1), n = strlen(num2);\n    char* ans = malloc(sizeof(char) * (m + n + 3));\n    memset(ans, 0, sizeof(char) * (m + n + 3));\n    if ((m == 1 && num1[0] == '0') || (n == 1 && num2[0] == '0')) {\n        ans[0] = '0', ans[1] = 0;\n        return ans;\n    }\n    int* ansArr = malloc(sizeof(int) * (m + n + 3));\n    memset(ansArr, 0, sizeof(int) * (m + n + 3));\n    for (int i = m - 1; i >= 0; i--) {\n        int x = num1[i] - '0';\n        for (int j = n - 1; j >= 0; j--) {\n            int y = num2[j] - '0';\n            ansArr[i + j + 1] += x * y;\n        }\n    }\n    for (int i = m + n - 1; i > 0; i--) {\n        ansArr[i - 1] += ansArr[i] / 10;\n        ansArr[i] %= 10;\n    }\n    int index = ansArr[0] == 0 ? 1 : 0;\n    int ansLen = 0;\n    while (index < m + n) {\n        ans[ansLen++] = ansArr[index];\n        index++;\n    }\n    for (int i = 0; i < ansLen; i++) ans[i] += '0';\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是 $\\textit{num}_1$ 和 $\\textit{num}_2$ 的长度。需要计算 $\\textit{num}_1$ 的每一位和 $\\textit{num}_2$ 的每一位的乘积。\n\n- 空间复杂度：$O(m+n)$，其中 $m$ 和 $n$ 分别是 $\\textit{num}_1$ 和 $\\textit{num}_2$ 的长度。需要创建一个长度为 $m+n$ 的数组存储乘积。\n\n#### 结语\n\n方法二还可以用另外一种方法改写。我们把两个数相乘看成是两个多项式相乘，因为任何一个数都可以表示成为\n\n$$\n\\sum_{i = 0}^{n - 1} a_i \\times 10^i\n$$\n\n的形式，也就相当于对多项式\n\n$$\nA(x) = \\sum_{i = 0} ^ {n - 1} a_i x^i\n$$\n\n在 $x = 10$ 处求值。当两个数 $N_a$、$N_b$ 相乘的时候，我们也可以认为这两个数是两个多项式\n\n$$\n\\left\\{\n\\begin{aligned}\n& A(x) = \\sum_{i = 0} ^ {n - 1} a_i x^i \\\\\n& B(x) = \\sum_{i = 0} ^ {m - 1} b_i x^i\n\\end{aligned}\n\\right.\n$$\n\n相乘的结果 $C(x) = A(x) \\times B(x)$ 在 $x = 10$ 处求值。我们可以这样表示 $C(x)$：\n\n$$\nC(x) = \\sum_{i = 0}^{n + m - 2} c_i x^i\n$$\n\n这里 \n\n$$\nc_i = \\sum_{k = 0} ^ {i} a_k b_{i - k}\n$$\n\n于是我们就可以顺序求解 $c_i$，每次 $O(i)$ 地选取下标和为 $i$ 的一组 $(a_k, b_{i - k})$。求到 $c_i$ 序列之后，再处理进位即可得到答案。对比这两种做法：\n\n+ 顺序求解 $c_i$ 的过程相当于集中计算 $c_i$\n+ 而方法二相当于每对 $(a_i, b_j)$ 对 $c_{i + j}$ 算贡献（注意这里的 $a_i$ 并不是题目中的 ${\\it num}_1[i]$，$a_i$ 下标越小，代表的位权越小，而 ${\\it num}_1[i]$ 下标越小，代表的位权越大）\n\n它们的本质是一样的，并且时间复杂度都是 $O(\\max \\{ n, m\\} ^2)$。我们再仔细的观察 $c_i$ 的形式：\n\n$$\nc_i = \\sum_{k = 0}^{i} a_k b_{i - k}\n$$\n\n它揭示了多项式乘法的另一面：$c_i$ 序列其实是 $a_i$ 序列和 $b_i$ 序列的卷积，即：\n\n$$\n\\vec{c} = \\vec{a} * \\vec{b}\n$$\n\n至此，我们就可以用一种叫做快速傅立叶变换（Fast Fourier Transform，FFT）的方法来加速卷积的计算，使得时间复杂度降低到 $O(c \\log c)$，这里 $c$ 是不小于 $n + m$ 的最小的 $2$ 的整数幂。由于这个方法并不在面试的考纲范围内，感兴趣的同学可以自行学习。"
}