{
	"titleSlug": "move-zeroes",
	"slug": "dong-hua-yan-shi-283yi-dong-ling-by-wang_ni_ma",
	"url": "https://leetcode-cn.com/problems/move-zeroes/solution/dong-hua-yan-shi-283yi-dong-ling-by-wang_ni_ma/",
	"content": "## 两次遍历\r\n我们创建两个指针```i```和```j```，第一次遍历的时候指针```j```用来记录当前有多少```非0```元素。即遍历的时候每遇到一个```非0```元素就将其往数组左边挪，第一次遍历完后，```j```指针的下标就指向了最后一个```非0```元素下标。  \r\n第二次遍历的时候，起始位置就从```j```开始到结束，将剩下的这段区域内的元素全部置为```0```。   \r\n动画演示：\r\n\r\n![283_1.gif](https://pic.leetcode-cn.com/9669b4ffb158eaeeee6f0cd66a70f24411575edab1ab8a037c4c9084b1c743f5-283_1.gif){:width=\"450px\"}{:align=\"center\"} \r\n时间复杂度: O(n)   \r\n空间复杂度: O(1)   \r\n代码实现:\r\n```Java []\r\nclass Solution {\r\n\tpublic void moveZeroes(int[] nums) {\r\n\t\tif(nums==null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//第一次遍历的时候，j指针记录非0的个数，只要是非0的统统都赋给nums[j]\r\n\t\tint j = 0;\r\n\t\tfor(int i=0;i<nums.length;++i) {\r\n\t\t\tif(nums[i]!=0) {\r\n\t\t\t\tnums[j++] = nums[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\t//非0元素统计完了，剩下的都是0了\r\n\t\t//所以第二次遍历把末尾的元素都赋为0即可\r\n\t\tfor(int i=j;i<nums.length;++i) {\r\n\t\t\tnums[i] = 0;\r\n\t\t}\r\n\t}\r\n}\t\r\n```\r\n```Python []\r\nclass Solution(object):\r\n\tdef moveZeroes(self, nums):\r\n\t\t\"\"\"\r\n\t\t:type nums: List[int]\r\n\t\t:rtype: None Do not return anything, modify nums in-place instead.\r\n\t\t\"\"\"\r\n\t\tif not nums:\r\n\t\t\treturn 0\r\n\t\t# 第一次遍历的时候，j指针记录非0的个数，只要是非0的统统都赋给nums[j]\t\r\n\t\tj = 0\r\n\t\tfor i in xrange(len(nums)):\r\n\t\t\tif nums[i]:\r\n\t\t\t\tnums[j] = nums[i]\r\n\t\t\t\tj += 1\r\n\t\t# 非0元素统计完了，剩下的都是0了\r\n\t\t# 所以第二次遍历把末尾的元素都赋为0即可\r\n\t\tfor i in xrange(j,len(nums)):\r\n\t\t\tnums[i] = 0\r\n```\r\n   \r\n   \r\n   \r\n## 一次遍历\r\n这里参考了快速排序的思想，快速排序首先要确定一个待分割的元素做中间点```x```，然后把所有小于等于```x```的元素放到x的左边，大于x的元素放到其右边。   \r\n这里我们可以用```0```当做这个中间点，把不等于0(注意题目没说不能有负数)的放到中间点的左边，等于0的放到其右边。\r\n这的中间点就是```0```本身，所以实现起来比快速排序简单很多，我们使用两个指针```i```和```j```，只要```nums[i]!=0```，我们就交换```nums[i]```和```nums[j]```   \r\n请对照动态图来理解：   \r\n![283_2.gif](https://pic.leetcode-cn.com/36d1ac5d689101cbf9947465e94753c626eab7fcb736ae2175f5d87ebc85fdf0-283_2.gif){:width=\"450px\"}{:align=\"center\"} \r\n时间复杂度: O(n)   \r\n空间复杂度: O(1)   \r\n代码实现:   \r\n```Java []\r\nclass Solution {\r\n\tpublic void moveZeroes(int[] nums) {\r\n\t\tif(nums==null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//两个指针i和j\r\n\t\tint j = 0;\r\n\t\tfor(int i=0;i<nums.length;i++) {\r\n\t\t\t//当前元素!=0，就把其交换到左边，等于0的交换到右边\r\n\t\t\tif(nums[i]!=0) {\r\n\t\t\t\tint tmp = nums[i];\r\n\t\t\t\tnums[i] = nums[j];\r\n\t\t\t\tnums[j++] = tmp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\t\r\n```\r\n```Python []\r\nclass Solution(object):\r\n\tdef moveZeroes(self, nums):\r\n\t\t\"\"\"\r\n\t\t:type nums: List[int]\r\n\t\t:rtype: None Do not return anything, modify nums in-place instead.\r\n\t\t\"\"\"\r\n\t\tif not nums:\r\n\t\t\treturn 0\r\n\t\t# 两个指针i和j\r\n\t\tj = 0\r\n\t\tfor i in xrange(len(nums)):\r\n\t\t\t# 当前元素!=0，就把其交换到左边，等于0的交换到右边\r\n\t\t\tif nums[i]:\r\n\t\t\t\tnums[j],nums[i] = nums[i],nums[j]\r\n\t\t\t\tj += 1\r\n```\r\n(全文完)   \r\n   \r\n**欢迎关注 👉👉👉 [我](https://leetcode-cn.com/u/wang_ni_ma/) 👈👈👈**   \r\n\r\n**如果能再点个赞 👍👍 就更感激啦 💓💓**\r\n\r\n"
}