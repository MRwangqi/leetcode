{
	"titleSlug": "get-biggest-three-rhombus-sums-in-a-grid",
	"slug": "ju-zhen-zhong-zui-da-de-san-ge-ling-xing-hpko",
	"url": "https://leetcode-cn.com/problems/get-biggest-three-rhombus-sums-in-a-grid/solution/ju-zhen-zhong-zui-da-de-san-ge-ling-xing-hpko/",
	"content": "#### 方法一：枚举所有的菱形\n\n**提示 $1$**\n\n一个菱形的自由度是多少（即如果我们至少需要多少个变量，才能**唯一**表示一个菱形）？\n\n**提示 $1$ 解释**\n\n一个菱形的自由度是 $3$，例如：\n\n> $2$ 个变量表示菱形上顶点的坐标，$1$ 个变量表示菱形在水平或者竖直方向上的宽度。\n\n**提示 $2$**\n\n![fig1](https://assets.leetcode-cn.com/solution-static/5757/5757.png)\n\n**提示 $3$**\n\n要想快速计算提示 $2$ 中的每一部分，我们可以使用前缀和。\n\n- 记 $\\textit{sum}_1[x][y]$ 表示从位置 $(x-1, y-1)$ 开始往**左上方**走，走到边界为止的所有格子的元素和。\n\n- 记 $\\textit{sum}_2[x][y]$ 表示从位置 $(x-1, y-1)$ 开始往**右上方**走，走到边界为止的所有格子的元素和。\n\n**思路与算法**\n\n我们首先可以使用二重循环预处理出所有的 $\\textit{sum}_1[i][j]$ 以及 $\\textit{sum}_2[i][j]$。具体地，有递推式：\n\n$$\n\\textit{sum}_1[i][j] = \\textit{sum}_1[i-1][j-1] + \\textit{grid}[i-1][j-1]\n$$\n\n以及：\n\n$$\n\\textit{sum}_2[i][j] = \\textit{sum}_2[i-1][j+1] + \\textit{grid}[i-1][j-1]\n$$\n\n其中 $i$ 和 $j$ 的范围分别为 $[1, m]$ 以及 $[1, n]$。\n\n接下来，我们使用三重循环分别枚举菱形上顶点的位置以及其在水平方向上的宽度，就可以计算出菱形四个顶点的位置，上下左右顶点的位置依次记为 $(u_x, u_y)$，$(d_x, d_y)$，$(l_x, l_y)$ 以及 $(r_x, r_y)$。这样一来，我们就可以使用前缀和在 $O(1)$ 的时间计算该菱形的菱形和，即提示 $2$ 中的五个部分的和分别为：\n\n$$\n\\begin{cases}\n\\textit{sum}_2[l_x + 1][l_y + 1] - \\textit{sum}_2[u_x][u_y + 2] \\\\\n\\textit{sum}_1[r_x + 1][r_y + 1] - \\textit{sum}_1[u_x][u_y] \\\\\n\\textit{sum}_1[d_x + 1][d_y + 1] - \\textit{sum}_1[l_x][l_y] \\\\\n\\textit{sum}_2[d_x + 1][d_y + 1] - \\textit{sum}_2[r_x][r_y + 2] \\\\\n\\textit{grid}[u_x][u_y] + \\textit{grid}[d_x][d_y] + \\textit{grid}[l_x][l_y] + \\textit{grid}[r_x][r_y]\n\\end{cases}\n$$\n\n除此之外，我们可以设计一个简单的数据结构，它使得我们在得到了菱形和后，可以实时维护最大的 $3$ 个互不相同的菱形和，具体的实现可以参考下面的代码。\n\n**细节**\n\n需要注意单独的一个格子也是菱形。\n\n**代码**\n\n```C++ [sol1-C++]\nstruct Answer {\n    array<int, 3> ans{};\n    \n    void put(int x) {\n        if (x > ans[0]) {\n            tie(ans[0], ans[1], ans[2]) = tuple{x, ans[0], ans[1]};\n        }\n        else if (x != ans[0] && x > ans[1]) {\n            tie(ans[1], ans[2]) = tuple{x, ans[1]};\n        }\n        else if (x != ans[0] && x != ans[1] && x > ans[2]) {\n            ans[2] = x;\n        }\n    }\n    \n    vector<int> get() const {\n        vector<int> ret;\n        for (int num: ans) {\n            if (num) {\n                ret.push_back(num);\n            }\n        }\n        return ret;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> getBiggestThree(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        vector<vector<int>> sum1(m + 1, vector<int>(n + 2));\n        vector<vector<int>> sum2(m + 1, vector<int>(n + 2));\n        for (int i = 1; i <= m; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                sum1[i][j] = sum1[i - 1][j - 1] + grid[i - 1][j - 1];\n                sum2[i][j] = sum2[i - 1][j + 1] + grid[i - 1][j - 1];\n            }\n        }\n        Answer ans;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                // 单独的一个格子也是菱形\n                ans.put(grid[i][j]);\n                for (int k = i + 2; k < m; k += 2) {\n                    int ux = i, uy = j;\n                    int dx = k, dy = j;\n                    int lx = (i + k) / 2, ly = j - (k - i) / 2;\n                    int rx = (i + k) / 2, ry = j + (k - i) / 2;\n                    if (ly < 0 || ry >= n) {\n                        break;\n                    }\n                    ans.put(\n                        (sum2[lx + 1][ly + 1] - sum2[ux][uy + 2]) +\n                        (sum1[rx + 1][ry + 1] - sum1[ux][uy]) +\n                        (sum1[dx + 1][dy + 1] - sum1[lx][ly]) +\n                        (sum2[dx + 1][dy + 1] - sum2[rx][ry + 2]) -\n                        (grid[ux][uy] + grid[dx][dy] + grid[lx][ly] + grid[rx][ry])\n                    );\n                }\n            }\n        }\n        return ans.get();\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Answer:\n    def __init__(self):\n        self.ans = [0, 0, 0]\n    \n    def put(self, x: int):\n        _ans = self.ans\n\n        if x > _ans[0]:\n            _ans[0], _ans[1], _ans[2] = x, _ans[0], _ans[1]\n        elif x != _ans[0] and x > _ans[1]:\n            _ans[1], _ans[2] = x, _ans[1]\n        elif x != _ans[0] and x != _ans[1] and x > _ans[2]:\n            _ans[2] = x\n    \n    def get(self) -> List[int]:\n        _ans = self.ans\n\n        return [num for num in _ans if num != 0]\n\n\nclass Solution:\n    def getBiggestThree(self, grid: List[List[int]]) -> List[int]:\n        m, n = len(grid), len(grid[0])\n        sum1 = [[0] * (n + 2) for _ in range(m + 1)]\n        sum2 = [[0] * (n + 2) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                sum1[i][j] = sum1[i - 1][j - 1] + grid[i - 1][j - 1]\n                sum2[i][j] = sum2[i - 1][j + 1] + grid[i - 1][j - 1]\n        \n        ans = Answer()\n        for i in range(m):\n            for j in range(n):\n                # 单独的一个格子也是菱形\n                ans.put(grid[i][j])\n                for k in range(i + 2, m, 2):\n                    ux, uy = i, j\n                    dx, dy = k, j\n                    lx, ly = (i + k) // 2, j - (k - i) // 2\n                    rx, ry = (i + k) // 2, j + (k - i) // 2\n                    \n                    if ly < 0 or ry >= n:\n                        break\n                    \n                    ans.put(\n                        (sum2[lx + 1][ly + 1] - sum2[ux][uy + 2]) +\n                        (sum1[rx + 1][ry + 1] - sum1[ux][uy]) +\n                        (sum1[dx + 1][dy + 1] - sum1[lx][ly]) +\n                        (sum2[dx + 1][dy + 1] - sum2[rx][ry + 2]) -\n                        (grid[ux][uy] + grid[dx][dy] + grid[lx][ly] + grid[rx][ry])\n                    )\n        \n        return ans.get()\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn \\min(m, n))$。预处理前缀和的时间复杂度为 $O(mn)$，枚举菱形并计算菱形和的时间复杂度为 $O(mn \\min(m, n))$，因此总时间复杂度为 $O(mn \\min(m, n))$。\n\n- 空间复杂度：$O(mn)$，记为前缀和数组需要使用的空间。"
}