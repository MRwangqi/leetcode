{
	"titleSlug": "freedom-trail",
	"slug": "zi-you-zhi-lu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/freedom-trail/solution/zi-you-zhi-lu-by-leetcode-solution/",
	"content": "#### 方法一：动态规划\n\n定义 $\\textit{dp}[i][j]$ 表示从前往后拼写出 $\\textit{key}$ 的第 $i$ 个字符， $\\textit{ring}$ 的第 $j$ 个字符与 $12:00$ 方向对齐的最少步数（下标均从 $0$ 开始）。\n\n显然，只有当字符串 $\\textit{ring}$ 的第 $j$ 个字符需要和 $\\textit{key}$ 的第 $i$ 个字符相同时才能拼写出 $\\textit{key}$ 的第 $i$ 个字符，因此对于 $\\textit{key}$ 的第 $i$ 个字符，需要考虑计算的 $\\textit{ring}$ 的第 $j$ 个字符只有 $\\textit{key}[i]$ 在 $\\textit{ring}$ 中出现的下标集合。我们对每个字符维护一个位置数组 $\\textit{pos}[i]$，表示字符 $i$ 在 $\\textit{ring}$ 中出现的位置集合，用来加速计算转移的过程。\n\n对于状态 $\\textit{dp}[i][j]$，需要枚举上一次与 $12:00$ 方向对齐的位置 $k$，因此可以列出如下的转移方程：\n$$\n\\textit{dp}[i][j]=\\min_{k \\in pos[key[i-1]]}\\{dp[i-1][k]+\\min\\{\\text{abs}(j-k),n-\\text{abs}(j-k)\\}+1\\}\n$$\n其中 $\\min\\{\\text{abs}(j-k),n-\\text{abs}(j-k)\\}+1$ 表示在当前第 $k$ 个字符与 $12:00$ 方向对齐时第 $j$ 个字符旋转到 $12:00$ 方向并按下拼写的最少步数。\n\n最后答案即为 $\\min_{i=0}^{n-1}\\{\\textit{dp}[m-1][i]\\}$。\n\n这样的做法需要开辟 $O(mn)$ 的空间来存放 $\\textit{dp}$ 值。考虑到每次转移状态 $\\textit{dp}[i][]$ 只会从 $\\textit{dp}[i-1][]$ 转移过来，因此我们可以利用滚动数组优化**第一维**的空间复杂度，有能力的读者可以尝试实现。下面只给出最朴素的 $O(mn)$ 空间复杂度的实现。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findRotateSteps(string ring, string key) {\n        int n = ring.size(), m = key.size();\n        vector<int> pos[26];\n        for (int i = 0; i < n; ++i) {\n            pos[ring[i] - 'a'].push_back(i);\n        }\n        vector<vector<int>> dp(m, vector<int>(n, 0x3f3f3f3f));\n        for (auto& i: pos[key[0] - 'a']) {\n            dp[0][i] = min(i, n - i) + 1;\n        }\n        for (int i = 1; i < m; ++i) {\n            for (auto& j: pos[key[i] - 'a']) {\n                for (auto& k: pos[key[i - 1] - 'a']) {\n                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + min(abs(j - k), n - abs(j - k)) + 1);\n                }\n            }\n        }\n        return *min_element(dp[m - 1].begin(), dp[m - 1].end());\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findRotateSteps(String ring, String key) {\n        int n = ring.length(), m = key.length();\n        List<Integer>[] pos = new List[26];\n        for (int i = 0; i < 26; ++i) {\n            pos[i] = new ArrayList<Integer>();\n        }\n        for (int i = 0; i < n; ++i) {\n            pos[ring.charAt(i) - 'a'].add(i);\n        }\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; ++i) {\n            Arrays.fill(dp[i], 0x3f3f3f);\n        }\n        for (int i : pos[key.charAt(0) - 'a']) {\n            dp[0][i] = Math.min(i, n - i) + 1;\n        }\n        for (int i = 1; i < m; ++i) {\n            for (int j : pos[key.charAt(i) - 'a']) {\n                for (int k : pos[key.charAt(i - 1) - 'a']) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][k] + Math.min(Math.abs(j - k), n - Math.abs(j - k)) + 1);\n                }\n            }\n        }\n        return Arrays.stream(dp[m - 1]).min().getAsInt();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst getIdx = (str, v) => str.codePointAt(v) - 'a'.codePointAt(0);\nvar findRotateSteps = function(ring, key) {\n    const n = ring.length, m = key.length;\n    const pos = new Array(26).fill(0).map(v => []);\n    for (let i = 0; i < n; ++i) {\n        pos[getIdx(ring, i)].push(i);\n    }\n    const dp = new Array(m).fill(0).map(v => new Array(n).fill(Number.MAX_SAFE_INTEGER));\n    for (const i of pos[getIdx(key, 0)]) {\n        dp[0][i] = Math.min(i, n - i) + 1;\n    }\n    for (let i = 1; i < m; ++i) {\n        for (const j of pos[getIdx(key, i)]) {\n            for (const k of pos[getIdx(key, i - 1)]) {\n                dp[i][j] = Math.min(dp[i][j], dp[i - 1][k] + Math.min(Math.abs(j - k), n - Math.abs(j - k)) + 1);\n            }\n        }\n    }\n    return dp[m - 1].reduce((pre, cur) => Math.min(pre, cur), Number.MAX_SAFE_INTEGER);\n};\n```\n\n```Golang [sol1-Golang]\nfunc findRotateSteps(ring string, key string) int {\n    const inf = math.MaxInt64 / 2\n    n, m := len(ring), len(key)\n    pos := [26][]int{}\n    for i, c := range ring {\n        pos[c-'a'] = append(pos[c-'a'], i)\n    }\n    dp := make([][]int, m)\n    for i := range dp {\n        dp[i] = make([]int, n)\n        for j := range dp[i] {\n            dp[i][j] = inf\n        }\n    }\n    for _, p := range pos[key[0]-'a'] {\n        dp[0][p] = min(p, n-p) + 1\n    }\n    for i := 1; i < m; i++ {\n        for _, j := range pos[key[i]-'a'] {\n            for _, k := range pos[key[i-1]-'a'] {\n                dp[i][j] = min(dp[i][j], dp[i-1][k]+min(abs(j-k), n-abs(j-k))+1)\n            }\n        }\n    }\n    return min(dp[m-1]...)\n}\n\nfunc min(a ...int) int {\n    res := a[0]\n    for _, v := range a[1:] {\n        if v < res {\n            res = v\n        }\n    }\n    return res\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n```\n\n```C [sol1-C]\nint findRotateSteps(char* ring, char* key) {\n    int n = strlen(ring), m = strlen(key);\n    int pos[26][n], posSize[26];\n    memset(posSize, 0, sizeof(posSize));\n    for (int i = 0; i < n; ++i) {\n        int x = ring[i] - 'a';\n        pos[x][posSize[x]++] = i;\n    }\n    int dp[m][n];\n    memset(dp, 0x3f3f3f3f, sizeof(dp));\n    for (int i = 0; i < posSize[key[0] - 'a']; i++) {\n        int x = pos[key[0] - 'a'][i];\n        dp[0][x] = fmin(x, n - x) + 1;\n    }\n    for (int i = 1; i < m; ++i) {\n        for (int j = 0; j < posSize[key[i] - 'a']; ++j) {\n            int x = pos[key[i] - 'a'][j];\n            for (int k = 0; k < posSize[key[i - 1] - 'a']; ++k) {\n                int y = pos[key[i - 1] - 'a'][k];\n                dp[i][x] = fmin(dp[i][x], dp[i - 1][y] + fmin(abs(x - y), n - abs(x - y)) + 1);\n            }\n        }\n    }\n    int ret = dp[m - 1][0];\n    for (int i = 1; i < n; ++i) {\n        ret = fmin(ret, dp[m - 1][i]);\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn^2)$，其中 $m$ 为字符串 $\\textit{key}$ 的长度，$n$ 为字符串 $\\textit{ring}$ 的长度。一共有 $O(mn)$ 个状态要计算，每次转移的时间复杂度为 $O(n)$，因此时间复杂度为 $O(mn^2)$。\n  由于维护了位置数组 $\\textit{pos}$ 加速了状态的计算与转移，因此 $O(mn^2)$ 是一个较松的上界，很多情况下的时间复杂度都会低于 $O(mn^2)$。\n\n- 空间复杂度：$O(mn)$。需要使用 $O(mn)$ 的空间来存放 $\\textit{dp}$ 数组，以及使用 $O(n)$ 的空间来存放 $\\textit{pos}$ 数组，因此总空间复杂度为 $O(mn)$。如果利用滚动数组，则可以将 $\\textit{dp}$ 数组的空间复杂度降低到 $O(n)$，总空间复杂度降低到 $O(n)$。"
}