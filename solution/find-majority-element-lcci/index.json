{
	"titleSlug": "find-majority-element-lcci",
	"slug": "zhu-yao-yuan-su-by-leetcode-solution-xr1p",
	"url": "https://leetcode-cn.com/problems/find-majority-element-lcci/solution/zhu-yao-yuan-su-by-leetcode-solution-xr1p/",
	"content": "#### 方法一：$\\text{Boyer-Moore}$ 投票算法\n\n由于题目要求时间复杂度 $O(n)$ 和空间复杂度 $O(1)$，因此符合要求的解法只有 $\\text{Boyer-Moore}$ 投票算法。\n\n$\\text{Boyer-Moore}$ 投票算法的基本思想是：在每一轮投票过程中，从数组中删除两个不同的元素，直到投票过程无法继续，此时数组为空或者数组中剩下的元素都相等。\n\n- 如果数组为空，则数组中不存在主要元素；\n\n- 如果数组中剩下的元素都相等，则数组中剩下的元素可能为主要元素。\n\n$\\text{Boyer-Moore}$ 投票算法的步骤如下：\n\n1. 维护一个候选主要元素 $\\textit{candidate}$ 和候选主要元素的出现次数 $\\textit{count}$，初始时 $\\textit{candidate}$ 为任意值，$\\textit{count}=0$；\n\n2. 遍历数组 $\\textit{nums}$ 中的所有元素，遍历到元素 $x$ 时，进行如下操作：\n\n   1. 如果 $\\textit{count}=0$，则将 $x$ 的值赋给 $\\textit{candidate}$，否则不更新 $\\textit{candidate}$ 的值；\n\n   2. 如果 $x=\\textit{candidate}$，则将 $\\textit{count}$ 加 $1$，否则将 $\\textit{count}$ 减 $1$。\n\n3. 遍历结束之后，如果数组 $\\textit{nums}$ 中存在主要元素，则 $\\textit{candidate}$ 即为主要元素，否则 $\\textit{candidate}$ 可能为数组中的任意一个元素。\n\n由于不一定存在主要元素，因此需要第二次遍历数组，验证 $\\textit{candidate}$ 是否为主要元素。第二次遍历时，统计 $\\textit{candidate}$ 在数组中的出现次数，如果出现次数大于数组长度的一半，则 $\\textit{candidate}$ 是主要元素，返回 $\\textit{candidate}$，否则数组中不存在主要元素，返回 $-1$。\n\n为什么当数组中存在主要元素时，$\\text{Boyer-Moore}$ 投票算法可以确保得到主要元素？\n\n在 $\\text{Boyer-Moore}$ 投票算法中，遇到相同的数则将 $\\textit{count}$ 加 $1$，遇到不同的数则将 $\\textit{count}$ 减 $1$。根据主要元素的定义，主要元素的出现次数大于其他元素的出现次数之和，因此在遍历过程中，主要元素和其他元素两两抵消，最后一定剩下至少一个主要元素，此时 $\\textit{candidate}$ 为主要元素，且 $\\textit{count} \\ge 1$。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/jindian_17.10/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/jindian_17.10/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/jindian_17.10/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/jindian_17.10/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/jindian_17.10/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/jindian_17.10/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/jindian_17.10/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/jindian_17.10/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/jindian_17.10/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/jindian_17.10/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/jindian_17.10/11.png),![fig12](https://assets.leetcode-cn.com/solution-static/jindian_17.10/12.png),![fig13](https://assets.leetcode-cn.com/solution-static/jindian_17.10/13.png),![fig14](https://assets.leetcode-cn.com/solution-static/jindian_17.10/14.png),![fig15](https://assets.leetcode-cn.com/solution-static/jindian_17.10/15.png),![fig16](https://assets.leetcode-cn.com/solution-static/jindian_17.10/16.png),![fig17](https://assets.leetcode-cn.com/solution-static/jindian_17.10/17.png),![fig18](https://assets.leetcode-cn.com/solution-static/jindian_17.10/18.png),![fig19](https://assets.leetcode-cn.com/solution-static/jindian_17.10/19.png),![fig20](https://assets.leetcode-cn.com/solution-static/jindian_17.10/20.png),![fig21](https://assets.leetcode-cn.com/solution-static/jindian_17.10/21.png),![fig22](https://assets.leetcode-cn.com/solution-static/jindian_17.10/22.png),![fig23](https://assets.leetcode-cn.com/solution-static/jindian_17.10/23.png),![fig24](https://assets.leetcode-cn.com/solution-static/jindian_17.10/24.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public int majorityElement(int[] nums) {\n        int candidate = -1;\n        int count = 0;\n        for (int num : nums) {\n            if (count == 0) {\n                candidate = num;\n            }\n            if (num == candidate) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n        count = 0;\n        int length = nums.length;\n        for (int num : nums) {\n            if (num == candidate) {\n                count++;\n            }\n        }\n        return count * 2 > length ? candidate : -1;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MajorityElement(int[] nums) {\n        int candidate = -1;\n        int count = 0;\n        foreach (int num in nums) {\n            if (count == 0) {\n                candidate = num;\n            }\n            if (num == candidate) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n        count = 0;\n        int length = nums.Length;\n        foreach (int num in nums) {\n            if (num == candidate) {\n                count++;\n            }\n        }\n        return count * 2 > length ? candidate : -1;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar majorityElement = function(nums) {\n    let candidate = -1;\n    let count = 0;\n    for (const num of nums) {\n        if (count === 0) {\n            candidate = num;\n        }\n        if (num === candidate) {\n            count++;\n        } else {\n            count--;\n        }\n    }\n    count = 0;\n    const length = nums.length;\n    for (const num of nums) {\n        if (num === candidate) {\n            count++;\n        }\n    }\n    return count * 2 > length ? candidate : -1;\n};\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        int candidate = -1;\n        int count = 0;\n        for (int& num : nums) {\n            if (count == 0) {\n                candidate = num;\n            }\n            if (num == candidate) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n        count = 0;\n        int length = nums.size();\n        for (int& num : nums) {\n            if (num == candidate) {\n                count++;\n            }\n        }\n        return count * 2 > length ? candidate : -1;\n    }\n};\n```\n\n```C [sol1-C]\nint majorityElement(int* nums, int numsSize) {\n    int candidate = -1;\n    int count = 0;\n    for (int i = 0; i < numsSize; i++) {\n        if (count == 0) {\n            candidate = nums[i];\n        }\n        if (nums[i] == candidate) {\n            count++;\n        } else {\n            count--;\n        }\n    }\n    count = 0;\n    int length = numsSize;\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] == candidate) {\n            count++;\n        }\n    }\n    return count * 2 > length ? candidate : -1;\n}\n```\n\n```go [sol1-Golang]\nfunc majorityElement(nums []int) int {\n    candidate := -1\n    count := 0\n    for _, num := range nums {\n        if count == 0 {\n            candidate = num\n        }\n        if num == candidate {\n            count++\n        } else {\n            count--\n        }\n    }\n    count = 0\n    for _, num := range nums {\n        if num == candidate {\n            count++\n        }\n    }\n    if count*2 > len(nums) {\n        return candidate\n    }\n    return -1\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。需要遍历数组两次。\n\n- 空间复杂度：$O(1)$。只需要常数的额外空间。"
}