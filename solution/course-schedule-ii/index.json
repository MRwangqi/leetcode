{
	"titleSlug": "course-schedule-ii",
	"slug": "ke-cheng-biao-ii-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/course-schedule-ii/solution/ke-cheng-biao-ii-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n![210. 课程表 II的.mp4](def715df-7ba6-462e-b957-ebaf4120b1ce)\n\n### 📖 文字题解\n#### 前言\n\n本题是一道经典的「拓扑排序」问题。\n\n给定一个包含 $n$ 个节点的有向图 $G$，我们给出它的节点编号的一种排列，如果满足：\n\n> 对于图 $G$ 中的任意一条有向边 $(u, v)$，$u$ 在排列中都出现在 $v$ 的前面。\n\n那么称该排列是图 $G$ 的「拓扑排序」。根据上述的定义，我们可以得出两个结论：\n\n- 如果图 $G$ 中存在环（即图 $G$ 不是「有向无环图」），那么图 $G$ 不存在拓扑排序。这是因为假设图中存在环 $x_1, x_2, \\cdots, x_n, x_1$，那么 $x_1$ 在排列中必须出现在 $x_n$ 的前面，但 $x_n$ 同时也必须出现在 $x_1$ 的前面，因此不存在一个满足要求的排列，也就不存在拓扑排序；\n\n- 如果图 $G$ 是有向无环图，那么它的拓扑排序可能不止一种。举一个最极端的例子，如果图 $G$ 值包含 $n$ 个节点却没有任何边，那么任意一种编号的排列都可以作为拓扑排序。\n\n有了上述的简单分析，我们就可以将本题建模成一个求拓扑排序的问题了：\n\n- 我们将每一门课看成一个节点；\n\n- 如果想要学习课程 $A$ 之前必须完成课程 $B$，那么我们从 $B$ 到 $A$ 连接一条有向边。这样以来，在拓扑排序中，$B$ 一定出现在 $A$ 的前面。\n\n求出该图的拓扑排序，就可以得到一种符合要求的课程学习顺序。下面介绍两种求解拓扑排序的方法。\n\n#### 方法一：深度优先搜索\n\n**思路**\n\n我们可以将深度优先搜索的流程与拓扑排序的求解联系起来，用一个栈来存储所有**已经搜索完成的节点**。\n\n> 对于一个节点 $u$，如果它的所有相邻节点都已经搜索完成，那么在搜索回溯到 $u$ 的时候，$u$ 本身也会变成一个已经搜索完成的节点。这里的「相邻节点」指的是从 $u$ 出发通过一条有向边可以到达的所有节点。\n\n假设我们当前搜索到了节点 $u$，如果它的所有相邻节点都已经搜索完成，那么这些节点都已经在栈中了，此时我们就可以把 $u$ 入栈。可以发现，如果我们从栈顶往栈底的顺序看，由于 $u$ 处于栈顶的位置，那么 $u$ 出现在所有 $u$ 的相邻节点的前面。因此对于 $u$ 这个节点而言，它是满足拓扑排序的要求的。\n\n这样以来，我们对图进行一遍深度优先搜索。当每个节点进行回溯的时候，我们把该节点放入栈中。最终从栈顶到栈底的序列就是一种拓扑排序。\n\n**算法**\n\n对于图中的任意一个节点，它在搜索的过程中有三种状态，即：\n\n- 「未搜索」：我们还没有搜索到这个节点；\n\n- 「搜索中」：我们搜索过这个节点，但还没有回溯到该节点，即该节点还没有入栈，还有相邻的节点没有搜索完成）；\n\n- 「已完成」：我们搜索过并且回溯过这个节点，即该节点已经入栈，并且所有该节点的相邻节点都出现在栈的更底部的位置，满足拓扑排序的要求。\n\n通过上述的三种状态，我们就可以给出使用深度优先搜索得到拓扑排序的算法流程，在每一轮的搜索搜索开始时，我们任取一个「未搜索」的节点开始进行深度优先搜索。\n\n- 我们将当前搜索的节点 $u$ 标记为「搜索中」，遍历该节点的每一个相邻节点 $v$：\n\n    - 如果 $v$ 为「未搜索」，那么我们开始搜索 $v$，待搜索完成回溯到 $u$；\n\n    - 如果 $v$ 为「搜索中」，那么我们就找到了图中的一个环，因此是不存在拓扑排序的；\n\n    - 如果 $v$ 为「已完成」，那么说明 $v$ 已经在栈中了，而 $u$ 还不在栈中，因此 $u$ 无论何时入栈都不会影响到 $(u, v)$ 之前的拓扑关系，以及不用进行任何操作。\n\n- 当 $u$ 的所有相邻节点都为「已完成」时，我们将 $u$ 放入栈中，并将其标记为「已完成」。\n\n在整个深度优先搜索的过程结束后，如果我们没有找到图中的环，那么栈中存储这所有的 $n$ 个节点，从栈顶到栈底的顺序即为一种拓扑排序。\n\n下面的幻灯片给出了深度优先搜索的可视化流程。图中的「白色」「黄色」「绿色」节点分别表示「未搜索」「搜索中」「已完成」的状态。\n\n<![DFS1](https://assets.leetcode-cn.com/solution-static/207/1.png),![DFS2](https://assets.leetcode-cn.com/solution-static/207/2.png),![DFS3](https://assets.leetcode-cn.com/solution-static/207/3.png),![DFS4](https://assets.leetcode-cn.com/solution-static/207/4.png),![DFS5](https://assets.leetcode-cn.com/solution-static/207/5.png),![DFS6](https://assets.leetcode-cn.com/solution-static/207/6.png),![DFS7](https://assets.leetcode-cn.com/solution-static/207/7.png),![DFS8](https://assets.leetcode-cn.com/solution-static/207/8.png),![DFS9](https://assets.leetcode-cn.com/solution-static/207/9.png),![DFS10](https://assets.leetcode-cn.com/solution-static/207/10.png),![DFS11](https://assets.leetcode-cn.com/solution-static/207/11.png),![DFS12](https://assets.leetcode-cn.com/solution-static/207/12.png),![DFS13](https://assets.leetcode-cn.com/solution-static/207/13.png),![DFS14](https://assets.leetcode-cn.com/solution-static/207/14.png),![DFS15](https://assets.leetcode-cn.com/solution-static/207/15.png),![DFS16](https://assets.leetcode-cn.com/solution-static/207/16.png),![DFS17](https://assets.leetcode-cn.com/solution-static/207/17.png),![DFS18](https://assets.leetcode-cn.com/solution-static/207/18.png),![DFS19](https://assets.leetcode-cn.com/solution-static/207/19.png),![DFS20](https://assets.leetcode-cn.com/solution-static/207/20.png)>\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    // 存储有向图\n    vector<vector<int>> edges;\n    // 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成\n    vector<int> visited;\n    // 用数组来模拟栈，下标 0 为栈底，n-1 为栈顶\n    vector<int> result;\n    // 判断有向图中是否有环\n    bool valid = true;\n\npublic:\n    void dfs(int u) {\n        // 将节点标记为「搜索中」\n        visited[u] = 1;\n        // 搜索其相邻节点\n        // 只要发现有环，立刻停止搜索\n        for (int v: edges[u]) {\n            // 如果「未搜索」那么搜索相邻节点\n            if (visited[v] == 0) {\n                dfs(v);\n                if (!valid) {\n                    return;\n                }\n            }\n            // 如果「搜索中」说明找到了环\n            else if (visited[v] == 1) {\n                valid = false;\n                return;\n            }\n        }\n        // 将节点标记为「已完成」\n        visited[u] = 2;\n        // 将节点入栈\n        result.push_back(u);\n    }\n\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        edges.resize(numCourses);\n        visited.resize(numCourses);\n        for (const auto& info: prerequisites) {\n            edges[info[1]].push_back(info[0]);\n        }\n        // 每次挑选一个「未搜索」的节点，开始进行深度优先搜索\n        for (int i = 0; i < numCourses && valid; ++i) {\n            if (!visited[i]) {\n                dfs(i);\n            }\n        }\n        if (!valid) {\n            return {};\n        }\n        // 如果没有环，那么就有拓扑排序\n        // 注意下标 0 为栈底，因此需要将数组反序输出\n        reverse(result.begin(), result.end());\n        return result;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    // 存储有向图\n    List<List<Integer>> edges;\n    // 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成\n    int[] visited;\n    // 用数组来模拟栈，下标 n-1 为栈底，0 为栈顶\n    int[] result;\n    // 判断有向图中是否有环\n    boolean valid = true;\n    // 栈下标\n    int index;\n\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        edges = new ArrayList<List<Integer>>();\n        for (int i = 0; i < numCourses; ++i) {\n            edges.add(new ArrayList<Integer>());\n        }\n        visited = new int[numCourses];\n        result = new int[numCourses];\n        index = numCourses - 1;\n        for (int[] info : prerequisites) {\n            edges.get(info[1]).add(info[0]);\n        }\n        // 每次挑选一个「未搜索」的节点，开始进行深度优先搜索\n        for (int i = 0; i < numCourses && valid; ++i) {\n            if (visited[i] == 0) {\n                dfs(i);\n            }\n        }\n        if (!valid) {\n            return new int[0];\n        }\n        // 如果没有环，那么就有拓扑排序\n        return result;\n    }\n\n    public void dfs(int u) {\n        // 将节点标记为「搜索中」\n        visited[u] = 1;\n        // 搜索其相邻节点\n        // 只要发现有环，立刻停止搜索\n        for (int v: edges.get(u)) {\n            // 如果「未搜索」那么搜索相邻节点\n            if (visited[v] == 0) {\n                dfs(v);\n                if (!valid) {\n                    return;\n                }\n            }\n            // 如果「搜索中」说明找到了环\n            else if (visited[v] == 1) {\n                valid = false;\n                return;\n            }\n        }\n        // 将节点标记为「已完成」\n        visited[u] = 2;\n        // 将节点入栈\n        result[index--] = u;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        # 存储有向图\n        edges = collections.defaultdict(list)\n        # 标记每个节点的状态：0=未搜索，1=搜索中，2=已完成\n        visited = [0] * numCourses\n        # 用数组来模拟栈，下标 0 为栈底，n-1 为栈顶\n        result = list()\n        # 判断有向图中是否有环\n        valid = True\n\n        for info in prerequisites:\n            edges[info[1]].append(info[0])\n        \n        def dfs(u: int):\n            nonlocal valid\n            # 将节点标记为「搜索中」\n            visited[u] = 1\n            # 搜索其相邻节点\n            # 只要发现有环，立刻停止搜索\n            for v in edges[u]:\n                # 如果「未搜索」那么搜索相邻节点\n                if visited[v] == 0:\n                    dfs(v)\n                    if not valid:\n                        return\n                # 如果「搜索中」说明找到了环\n                elif visited[v] == 1:\n                    valid = False\n                    return\n            # 将节点标记为「已完成」\n            visited[u] = 2\n            # 将节点入栈\n            result.append(u)\n        \n        # 每次挑选一个「未搜索」的节点，开始进行深度优先搜索\n        for i in range(numCourses):\n            if valid and not visited[i]:\n                dfs(i)\n        \n        if not valid:\n            return list()\n        \n        # 如果没有环，那么就有拓扑排序\n        # 注意下标 0 为栈底，因此需要将数组反序输出\n        return result[::-1]\n```\n\n```golang [sol1-Golang]\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n    var (\n        edges = make([][]int, numCourses)\n        visited = make([]int, numCourses)\n        result []int\n        valid bool = true\n        dfs func(u int)\n    )\n\n    dfs = func(u int) {\n        visited[u] = 1\n        for _, v := range edges[u] {\n            if visited[v] == 0 {\n                dfs(v)\n                if !valid {\n                    return\n                }\n            } else if visited[v] == 1 {\n                valid = false\n                return\n            }\n        }\n        visited[u] = 2\n        result = append(result, u)\n    }\n\n    for _, info := range prerequisites {\n        edges[info[1]] = append(edges[info[1]], info[0])\n    }\n\n    for i := 0; i < numCourses && valid; i++ {\n        if visited[i] == 0 {\n            dfs(i)\n        }\n    }\n    if !valid {\n        return []int{}\n    }\n    for i := 0; i < len(result)/2; i ++ {\n        result[i], result[numCourses-i-1] = result[numCourses-i-1], result[i]\n    }\n    return result\n}\n```\n\n```C [sol1-C]\nint** edges;\nint* edgeColSize;\nint* visited;\nint* result;\nint resultSize;\nbool valid;\n\nvoid dfs(int u) {\n    visited[u] = 1;\n    for (int i = 0; i < edgeColSize[u]; ++i) {\n        if (visited[edges[u][i]] == 0) {\n            dfs(edges[u][i]);\n            if (!valid) {\n                return;\n            }\n        } else if (visited[edges[u][i]] == 1) {\n            valid = false;\n            return;\n        }\n    }\n    visited[u] = 2;\n    result[resultSize++] = u;\n}\n\nint* findOrder(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize, int* returnSize) {\n    valid = true;\n    edges = (int**)malloc(sizeof(int*) * numCourses);\n    for (int i = 0; i < numCourses; i++) {\n        edges[i] = (int*)malloc(0);\n    }\n    edgeColSize = (int*)malloc(sizeof(int) * numCourses);\n    memset(edgeColSize, 0, sizeof(int) * numCourses);\n    visited = (int*)malloc(sizeof(int) * numCourses);\n    memset(visited, 0, sizeof(int) * numCourses);\n    for (int i = 0; i < prerequisitesSize; ++i) {\n        int a = prerequisites[i][1], b = prerequisites[i][0];\n        edgeColSize[a]++;\n        edges[a] = (int*)realloc(edges[a], sizeof(int) * edgeColSize[a]);\n        edges[a][edgeColSize[a] - 1] = b;\n    }\n    result = (int*)malloc(sizeof(int) * numCourses);\n    resultSize = 0;\n    for (int i = 0; i < numCourses && valid; ++i) {\n        if (!visited[i]) {\n            dfs(i);\n        }\n    }\n    for (int i = 0; i < numCourses; i++) {\n        free(edges[i]);\n    }\n    free(edges);\n    free(edgeColSize);\n    free(visited);\n    if (!valid) {\n        *returnSize = 0;\n    } else\n        *returnSize = numCourses;\n    for (int i = 0; i < numCourses / 2; i++) {\n        int t = result[i];\n        result[i] = result[numCourses - i - 1], result[numCourses - i - 1] = t;\n    }\n    return result;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度: $O(n+m)$，其中 $n$ 为课程数，$m$ 为先修课程的要求数。这其实就是对图进行深度优先搜索的时间复杂度。\n\n- 空间复杂度: $O(n+m)$。题目中是以列表形式给出的先修课程关系，为了对图进行深度优先搜索，我们需要存储成邻接表的形式，空间复杂度为 $O(n+m)$。在深度优先搜索的过程中，我们需要最多 $O(n)$ 的栈空间（递归）进行深度优先搜索，并且还需要若干个 $O(n)$ 的空间存储节点状态、最终答案等。\n\n#### 方法二：广度优先搜索\n\n**思路**\n\n方法一的深度优先搜索是一种「逆向思维」：最先被放入栈中的节点是在拓扑排序中最后面的节点。我们也可以使用正向思维，顺序地生成拓扑排序，这种方法也更加直观。\n\n我们考虑拓扑排序中最前面的节点，该节点一定不会有任何入边，也就是它没有任何的先修课程要求。当我们将一个节点加入答案中后，我们就可以移除它的所有出边，代表着它的相邻节点**少了一门先修课程的要求**。如果某个相邻节点变成了「没有任何入边的节点」，那么就代表着这门课可以开始学习了。按照这样的流程，我们不断地将没有入边的节点加入答案，直到答案中包含所有的节点（得到了一种拓扑排序）或者不存在没有入边的节点（图中包含环）。\n\n上面的想法类似于广度优先搜索，因此我们可以将广度优先搜索的流程与拓扑排序的求解联系起来。\n\n**算法**\n\n我们使用一个队列来进行广度优先搜索。开始时，所有入度为 $0$ 的节点都被放入队列中，它们就是可以作为拓扑排序最前面的节点，并且它们之间的相对顺序是无关紧要的。\n\n在广度优先搜索的每一步中，我们取出队首的节点 $u$：\n\n- 我们将 $u$ 放入答案中；\n\n- 我们移除 $u$ 的所有出边，也就是将 $u$ 的所有相邻节点的入度减少 $1$。如果某个相邻节点 $v$ 的入度变为 $0$，那么我们就将 $v$ 放入队列中。\n\n在广度优先搜索的过程结束后。如果答案中包含了这 $n$ 个节点，那么我们就找到了一种拓扑排序，否则说明图中存在环，也就不存在拓扑排序了。\n\n下面的幻灯片给出了广度优先搜索的可视化流程。\n\n<![BFS1](https://assets.leetcode-cn.com/solution-static/207/fig1.png),![BFS2](https://assets.leetcode-cn.com/solution-static/207/fig2.png),![BFS3](https://assets.leetcode-cn.com/solution-static/207/fig3.png),![BFS4](https://assets.leetcode-cn.com/solution-static/207/fig4.png),![BFS5](https://assets.leetcode-cn.com/solution-static/207/fig5.png),![BFS6](https://assets.leetcode-cn.com/solution-static/207/fig6.png),![BFS7](https://assets.leetcode-cn.com/solution-static/207/fig7.png),![BFS8](https://assets.leetcode-cn.com/solution-static/207/fig8.png),![BFS9](https://assets.leetcode-cn.com/solution-static/207/fig9.png),![BFS10](https://assets.leetcode-cn.com/solution-static/207/fig10.png),![BFS11](https://assets.leetcode-cn.com/solution-static/207/fig11.png),![BFS12](https://assets.leetcode-cn.com/solution-static/207/fig12.png),![BFS13](https://assets.leetcode-cn.com/solution-static/207/fig13.png),![BFS14](https://assets.leetcode-cn.com/solution-static/207/fig14.png)>\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    // 存储有向图\n    vector<vector<int>> edges;\n    // 存储每个节点的入度\n    vector<int> indeg;\n    // 存储答案\n    vector<int> result;\n\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        edges.resize(numCourses);\n        indeg.resize(numCourses);\n        for (const auto& info: prerequisites) {\n            edges[info[1]].push_back(info[0]);\n            ++indeg[info[0]];\n        }\n\n        queue<int> q;\n        // 将所有入度为 0 的节点放入队列中\n        for (int i = 0; i < numCourses; ++i) {\n            if (indeg[i] == 0) {\n                q.push(i);\n            }\n        }\n\n        while (!q.empty()) {\n            // 从队首取出一个节点\n            int u = q.front();\n            q.pop();\n            // 放入答案中\n            result.push_back(u);\n            for (int v: edges[u]) {\n                --indeg[v];\n                // 如果相邻节点 v 的入度为 0，就可以选 v 对应的课程了\n                if (indeg[v] == 0) {\n                    q.push(v);\n                }\n            }\n        }\n\n        if (result.size() != numCourses) {\n            return {};\n        }\n        return result;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    // 存储有向图\n    List<List<Integer>> edges;\n    // 存储每个节点的入度\n    int[] indeg;\n    // 存储答案\n    int[] result;\n    // 答案下标\n    int index;\n\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        edges = new ArrayList<List<Integer>>();\n        for (int i = 0; i < numCourses; ++i) {\n            edges.add(new ArrayList<Integer>());\n        }\n        indeg = new int[numCourses];\n        result = new int[numCourses];\n        index = 0;\n        for (int[] info : prerequisites) {\n            edges.get(info[1]).add(info[0]);\n            ++indeg[info[0]];\n        }\n\n        Queue<Integer> queue = new LinkedList<Integer>();\n        // 将所有入度为 0 的节点放入队列中\n        for (int i = 0; i < numCourses; ++i) {\n            if (indeg[i] == 0) {\n                queue.offer(i);\n            }\n        }\n\n        while (!queue.isEmpty()) {\n            // 从队首取出一个节点\n            int u = queue.poll();\n            // 放入答案中\n            result[index++] = u;\n            for (int v: edges.get(u)) {\n                --indeg[v];\n                // 如果相邻节点 v 的入度为 0，就可以选 v 对应的课程了\n                if (indeg[v] == 0) {\n                    queue.offer(v);\n                }\n            }\n        }\n\n        if (index != numCourses) {\n            return new int[0];\n        }\n        return result;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        # 存储有向图\n        edges = collections.defaultdict(list)\n        # 存储每个节点的入度\n        indeg = [0] * numCourses\n        # 存储答案\n        result = list()\n\n        for info in prerequisites:\n            edges[info[1]].append(info[0])\n            indeg[info[0]] += 1\n        \n        # 将所有入度为 0 的节点放入队列中\n        q = collections.deque([u for u in range(numCourses) if indeg[u] == 0])\n\n        while q:\n            # 从队首取出一个节点\n            u = q.popleft()\n            # 放入答案中\n            result.append(u)\n            for v in edges[u]:\n                indeg[v] -= 1\n                # 如果相邻节点 v 的入度为 0，就可以选 v 对应的课程了\n                if indeg[v] == 0:\n                    q.append(v)\n\n        if len(result) != numCourses:\n            result = list()\n        return result\n```\n\n```golang [sol2-Golang]\nfunc findOrder(numCourses int, prerequisites [][]int) []int {\n    var (\n        edges = make([][]int, numCourses)\n        indeg = make([]int, numCourses)\n        result []int\n    )\n\n    for _, info := range prerequisites {\n        edges[info[1]] = append(edges[info[1]], info[0])\n        indeg[info[0]]++\n    }\n\n    q := []int{}\n    for i := 0; i < numCourses; i++ {\n        if indeg[i] == 0 {\n            q = append(q, i)\n        }\n    }\n\n    for len(q) > 0 {\n        u := q[0]\n        q = q[1:]\n        result = append(result, u)\n        for _, v := range edges[u] {\n            indeg[v]--\n            if indeg[v] == 0 {\n                q = append(q, v)\n            }\n        }\n    }\n    if len(result) != numCourses {\n        return []int{}\n    }\n    return result\n}\n```\n\n```C [sol2-C]\nint* findOrder(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize, int* returnSize) {\n    int** edges = (int**)malloc(sizeof(int*) * numCourses);\n    for (int i = 0; i < numCourses; i++) {\n        edges[i] = (int*)malloc(0);\n    }\n    int edgeColSize[numCourses];\n    memset(edgeColSize, 0, sizeof(edgeColSize));\n    int indeg[numCourses];\n    memset(indeg, 0, sizeof(indeg));\n    for (int i = 0; i < prerequisitesSize; ++i) {\n        int a = prerequisites[i][1], b = prerequisites[i][0];\n        edgeColSize[a]++;\n        edges[a] = (int*)realloc(edges[a], sizeof(int) * edgeColSize[a]);\n        edges[a][edgeColSize[a] - 1] = b;\n        ++indeg[b];\n    }\n\n    int q[numCourses];\n    int l = 0, r = -1;\n    for (int i = 0; i < numCourses; ++i) {\n        if (indeg[i] == 0) {\n            q[++r] = i;\n        }\n    }\n\n    int* result = (int*)malloc(sizeof(int) * numCourses);\n    int resultSize = 0;\n\n    int visited = 0;\n    while (l <= r) {\n        ++visited;\n        int u = q[l++];\n        result[resultSize++] = u;\n        for (int i = 0; i < edgeColSize[u]; ++i) {\n            --indeg[edges[u][i]];\n            if (indeg[edges[u][i]] == 0) {\n                q[++r] = edges[u][i];\n            }\n        }\n    }\n    for (int i = 0; i < numCourses; i++) {\n        free(edges[i]);\n    }\n    free(edges);\n    if (visited == numCourses) {\n        *returnSize = numCourses;\n    } else {\n        *returnSize = 0;\n    }\n    return result;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度: $O(n+m)$，其中 $n$ 为课程数，$m$ 为先修课程的要求数。这其实就是对图进行广度优先搜索的时间复杂度。\n\n- 空间复杂度: $O(n+m)$。题目中是以列表形式给出的先修课程关系，为了对图进行广度优先搜索，我们需要存储成邻接表的形式，空间复杂度为 $O(n+m)$。在广度优先搜索的过程中，我们需要最多 $O(n)$ 的队列空间（迭代）进行广度优先搜索，并且还需要若干个 $O(n)$ 的空间存储节点入度、最终答案等。"
}