{
	"titleSlug": "maximum-product-of-three-numbers",
	"slug": "san-ge-shu-de-zui-da-cheng-ji-by-leetcod-t9sb",
	"url": "https://leetcode-cn.com/problems/maximum-product-of-three-numbers/solution/san-ge-shu-de-zui-da-cheng-ji-by-leetcod-t9sb/",
	"content": "#### 方法一：排序\n\n首先将数组排序。\n\n如果数组中全是非负数，则排序后最大的三个数相乘即为最大乘积；如果全是非正数，则最大的三个数相乘同样也为最大乘积。\n\n如果数组中有正数有负数，则最大乘积既可能是三个最大正数的乘积，也可能是两个最小负数（即绝对值最大）与最大正数的乘积。\n\n综上，我们在给数组排序后，分别求出三个最大正数的乘积，以及两个最小负数与最大正数的乘积，二者之间的最大值即为所求答案。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maximumProduct(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        return max(nums[0] * nums[1] * nums[n - 1], nums[n - 3] * nums[n - 2] * nums[n - 1]);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maximumProduct(int[] nums) {\n        Arrays.sort(nums);\n        int n = nums.length;\n        return Math.max(nums[0] * nums[1] * nums[n - 1], nums[n - 3] * nums[n - 2] * nums[n - 1]);\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc maximumProduct(nums []int) int {\n    sort.Ints(nums)\n    n := len(nums)\n    return max(nums[0]*nums[1]*nums[n-1], nums[n-3]*nums[n-2]*nums[n-1])\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol1-C]\nint cmp(int* a, int* b) {\n    return *a - *b;\n}\n\nint maximumProduct(int* nums, int numsSize) {\n    qsort(nums, numsSize, sizeof(int), cmp);\n    return fmax(nums[0] * nums[1] * nums[numsSize - 1], nums[numsSize - 3] * nums[numsSize - 2] * nums[numsSize - 1]);\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar maximumProduct = function(nums) {\n    nums.sort((a, b) => a - b);\n    const n = nums.length;\n    return Math.max(nums[0] * nums[1] * nums[n - 1], nums[n - 1] * nums[n - 2] * nums[n - 3]);\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\log N)$，其中 $N$ 为数组长度。排序需要 $O(N\\log N)$ 的时间。\n\n- 空间复杂度：$O(\\log N)$，主要为排序的空间开销。\n\n#### 方法二：线性扫描\n\n在方法一中，我们实际上只要求出数组中最大的三个数以及最小的两个数，因此我们可以不用排序，用线性扫描直接得出这五个数。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maximumProduct(vector<int>& nums) {\n        // 最小的和第二小的\n        int min1 = INT_MAX, min2 = INT_MAX;\n        // 最大的、第二大的和第三大的\n        int max1 = INT_MIN, max2 = INT_MIN, max3 = INT_MIN;\n\n        for (int x: nums) {\n            if (x < min1) {\n                min2 = min1;\n                min1 = x;\n            } else if (x < min2) {\n                min2 = x;\n            }\n\n            if (x > max1) {\n                max3 = max2;\n                max2 = max1;\n                max1 = x;\n            } else if (x > max2) {\n                max3 = max2;\n                max2 = x;\n            } else if (x > max3) {\n                max3 = x;\n            }\n        }\n\n        return max(min1 * min2 * max1, max1 * max2 * max3);\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int maximumProduct(int[] nums) {\n        // 最小的和第二小的\n        int min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE;\n        // 最大的、第二大的和第三大的\n        int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE, max3 = Integer.MIN_VALUE;\n\n        for (int x : nums) {\n            if (x < min1) {\n                min2 = min1;\n                min1 = x;\n            } else if (x < min2) {\n                min2 = x;\n            }\n\n            if (x > max1) {\n                max3 = max2;\n                max2 = max1;\n                max1 = x;\n            } else if (x > max2) {\n                max3 = max2;\n                max2 = x;\n            } else if (x > max3) {\n                max3 = x;\n            }\n        }\n\n        return Math.max(min1 * min2 * max1, max1 * max2 * max3);\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc maximumProduct(nums []int) int {\n    // 最小的和第二小的\n    min1, min2 := math.MaxInt64, math.MaxInt64\n    // 最大的、第二大的和第三大的\n    max1, max2, max3 := math.MinInt64, math.MinInt64, math.MinInt64\n\n    for _, x := range nums {\n        if x < min1 {\n            min2 = min1\n            min1 = x\n        } else if x < min2 {\n            min2 = x\n        }\n\n        if x > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = x\n        } else if x > max2 {\n            max3 = max2\n            max2 = x\n        } else if x > max3 {\n            max3 = x\n        }\n    }\n\n    return max(min1*min2*max1, max1*max2*max3)\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol2-C]\nint maximumProduct(int* nums, int numsSize) {\n    // 最小的和第二小的\n    int min1 = INT_MAX, min2 = INT_MAX;\n    // 最大的、第二大的和第三大的\n    int max1 = INT_MIN, max2 = INT_MIN, max3 = INT_MIN;\n\n    for (int i = 0; i < numsSize; i++) {\n        int x = nums[i];\n        if (x < min1) {\n            min2 = min1;\n            min1 = x;\n        } else if (x < min2) {\n            min2 = x;\n        }\n\n        if (x > max1) {\n            max3 = max2;\n            max2 = max1;\n            max1 = x;\n        } else if (x > max2) {\n            max3 = max2;\n            max2 = x;\n        } else if (x > max3) {\n            max3 = x;\n        }\n    }\n\n    return fmax(min1 * min2 * max1, max1 * max2 * max3);\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar maximumProduct = function(nums) {\n    // 最小的和第二小的\n    let min1 = Number.MAX_SAFE_INTEGER, min2 = Number.MAX_SAFE_INTEGER;\n    // 最大的、第二大的和第三大的\n    let max1 = -Number.MAX_SAFE_INTEGER, max2 = -Number.MAX_SAFE_INTEGER, max3 = -Number.MAX_SAFE_INTEGER;\n\n    for (const x of nums) {\n        if (x < min1) {\n            min2 = min1;\n            min1 = x;\n        } else if (x < min2) {\n            min2 = x;\n        }\n\n        if (x > max1) {\n            max3 = max2;\n            max2 = max1;\n            max1 = x;\n        } else if (x > max2) {\n            max3 = max2;\n            max2 = x;\n        } else if (x > max3) {\n            max3 = x;\n        }\n    }\n\n    return Math.max(min1 * min2 * max1, max1 * max2 * max3);\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为数组长度。我们仅需遍历数组一次。\n\n- 空间复杂度：$O(1)$。"
}