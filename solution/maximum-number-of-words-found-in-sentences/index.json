{
	"titleSlug": "maximum-number-of-words-found-in-sentences",
	"slug": "ju-zi-zhong-de-zui-duo-dan-ci-shu-by-lee-c1in",
	"url": "https://leetcode-cn.com/problems/maximum-number-of-words-found-in-sentences/solution/ju-zi-zhong-de-zui-duo-dan-ci-shu-by-lee-c1in/",
	"content": "#### 方法一：计算空格数量\n\n**思路与算法**\n\n由于一个句子开头结尾均不含空格，且单词之间均只含一个空格，因此一个句子中的**单词数一定等于空格数加上 $1$**。\n\n那么我们可以遍历句子数组，通过统计每个句子的空格数量来计算它的单词数量，同时维护这些句子单词数量的最大值。当遍历完成后，我们返回该最大值作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int mostWordsFound(vector<string>& sentences) {\n        int res = 0;\n        for (const string& sentence: sentences) {\n            // 单词数 = 空格数 + 1\n            int cnt = count(sentence.begin(), sentence.end(), ' ') + 1;\n            res = max(res, cnt);\n        }\n        return res;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def mostWordsFound(self, sentences: List[str]) -> int:\n        res = 0\n        for sentence in sentences:\n            #  单词数 = 空格数 + 1\n            cnt = sentence.count(' ') + 1\n            res = max(res, cnt)\n        return res\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\sum_i n_i)$，其中 $n_i$ 为 $\\textit{sentences}[i]$ 的长度。即为遍历字符串统计单词数并维护最大值的时间复杂度。\n\n- 空间复杂度：$O(n)$。"
}