{
	"titleSlug": "sum-of-total-strength-of-wizards",
	"slug": "dan-diao-zhan-qian-zhui-he-de-qian-zhui-d9nki",
	"url": "https://leetcode-cn.com/problems/sum-of-total-strength-of-wizards/solution/dan-diao-zhan-qian-zhui-he-de-qian-zhui-d9nki/",
	"content": "本题 [视频讲解](https://www.bilibili.com/video/BV1RY4y157nW) 已出炉，额外介绍了单调栈的原理，欢迎点赞三连~\r\n\r\n---\r\n\r\n#### 提示 1-1\r\n\r\n枚举每位巫师，假设他是最弱的巫师，那么他能在哪些子数组中？\r\n\r\n#### 提示 1-2\r\n\r\n左右边界最远能到哪？具体地，这些子数组的左边界的最小值是多少，右边界的最大值是多少？\r\n\r\n#### 提示 1-3\r\n\r\n用**单调栈**来计算左右边界。\r\n\r\n不了解单调栈的同学可以看一下 [496. 下一个更大元素 I](https://leetcode-cn.com/problems/next-greater-element-i/)。对于本题，我们需要求的是下一个更小元素。\r\n\r\n#### 提示 1-4\r\n\r\n注意本题是可能有**重复元素**的，这会对最终答案的计算产生什么影响？\r\n\r\n#### 提示 1-5\r\n\r\n设左右边界为 $[L,R]$。\r\n\r\n为了避免重复计算，我们可以考虑左侧**严格小于**当前元素的最近元素位置 $L-1$，以及右侧**小于等于**当前元素的最近元素位置 $R+1$。\r\n\r\n以示例 1 中的数组 $[1,3,1,2]$ 为例，如果左右两侧都是找严格小于，那么第一个 $1$ 和第二个 $1$ 算出来的边界范围都是一样的（都是整个数组），这就重复统计了，为了避免这种情况，可以把某一侧改为小于等于，比如把右侧改成小于等于，那么第一个 $1$ 算出来的右边界不会触及或越过第二个 $1$，这样就能避免重复统计同一个子数组。\r\n\r\n---\r\n\r\n#### 提示 2-1\r\n\r\n设当前枚举的巫师的能力值为 $v$，那么他对答案产生的贡献是 $v$ 乘上在左右边界 $[L,R]$ 内的所有包含 $v$ 的子数组的元素和的和。\r\n\r\n#### 提示 2-2\r\n\r\n如何计算子数组的元素和？\r\n\r\n用前缀和来计算。\r\n\r\n#### 提示 2-3\r\n\r\n如何计算子数组的元素和**的和**？\r\n\r\n不妨将子数组的右端点固定，子数组左端点的范围是多少？\r\n\r\n对于多个不同的右端点，其对应的左端点的范围是否均相同？\r\n\r\n#### 提示 2-4\r\n\r\n设子数组左端点为 $l$，右端点为 $r$，当前枚举的元素下标为 $i$，那么有 $L\\le l\\le i \\le r\\le R$。\r\n\r\n设 $\\textit{strength}$ 数组的前缀和为 $s$，其中 $s[i]=\\sum\\limits_{j=0}^{i-1} \\textit{strength}[j]$，因此子数组 $[l,r]$ 的元素和可以表示为 \r\n\r\n$$\r\ns[r+1]-s[l]\r\n$$\r\n\r\n在范围 $[L,R]$ 内的所有子数组的元素和的和可以表示为\r\n\r\n$$\r\n\\begin{aligned}\r\n&\\sum_{r=i+1}^{R+1}\\sum_{l=L}^{i} (s[r]-s[l]) \\\\\r\n=&\\left(\\sum_{r=i+1}^{R+1}\\sum_{l=L}^{i} s[r]\\right)-\\left(\\sum_{r=i+1}^{R+1}\\sum_{l=L}^{i} s[l]\\right) \\\\\r\n=&(i-L+1)\\cdot \\sum_{r=i+1}^{R+1}s[r] -(R-i+1)\\cdot \\sum_{l=L}^{i} s[l]\r\n\\end{aligned}\r\n$$\r\n\r\n因此我们还需要计算出前缀和 $s$ 的前缀和 $\\textit{ss}$，其中 $\\textit{ss}[i]=\\sum\\limits_{j=0}^{i-1}s[j]$，上式即为\r\n\r\n$$\r\n(i-L+1)\\cdot (\\textit{ss}[R+2]-\\textit{ss}[i+1]) - (R-i+1)\\cdot (\\textit{ss}[i+1]-\\textit{ss}[L]) \r\n$$\r\n\r\n再乘上 $v$ 即为当前巫师的贡献，累加所有贡献即为答案。\r\n\r\n```Python [sol1-Python3]\r\nclass Solution:\r\n    def totalStrength(self, strength: List[int]) -> int:\r\n        n = len(strength)\r\n        # left[i] 为左侧严格小于 strength[i] 的最近元素位置（不存在时为 -1）\r\n        # right[i] 为右侧小于等于 strength[i] 的最近元素位置（不存在时为 n）\r\n        left, right, st = [-1] * n, [n] * n, []\r\n        for i, v in enumerate(strength):\r\n            while st and strength[st[-1]] >= v: right[st.pop()] = i\r\n            if st: left[i] = st[-1]\r\n            st.append(i)\r\n\r\n        ss = list(accumulate(accumulate(strength, initial=0), initial=0))  # 前缀和的前缀和\r\n\r\n        ans = 0\r\n        for i, v in enumerate(strength):\r\n            l, r = left[i] + 1, right[i] - 1  # [l, r]  左闭右闭\r\n            tot = (i - l + 1) * (ss[r + 2] - ss[i + 1]) - (r - i + 1) * (ss[i + 1] - ss[l])\r\n            ans += v * tot  # 累加贡献\r\n        return ans % (10 ** 9 + 7)\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    public int totalStrength(int[] strength) {\r\n        final var mod = (int) 1e9 + 7;\r\n\r\n        var n = strength.length;\r\n        var left = new int[n];  // left[i] 为左侧严格小于 strength[i] 的最近元素位置（不存在时为 -1）\r\n        var right = new int[n]; // right[i] 为右侧小于等于 strength[i] 的最近元素位置（不存在时为 n）\r\n        Arrays.fill(right, n);\r\n        var st = new ArrayDeque<Integer>();\r\n        st.push(-1); // 哨兵\r\n        for (var i = 0; i < n; i++) {\r\n            while (st.size() > 1 && strength[st.peek()] >= strength[i])\r\n                right[st.pop()] = i;\r\n            left[i] = st.peek();\r\n            st.push(i);\r\n        }\r\n\r\n        var s = 0L; // 前缀和\r\n        var ss = new int[n + 2]; // 前缀和的前缀和\r\n        for (var i = 1; i <= n; ++i) {\r\n            s += strength[i - 1];\r\n            ss[i + 1] = (int) ((ss[i] + s) % mod); // 注意取模后，下面计算两个 ss 相减，结果可能为负\r\n        }\r\n\r\n        var ans = 0L;\r\n        for (var i = 0; i < n; ++i) {\r\n            int l = left[i] + 1, r = right[i] - 1; // [l,r] 左闭右闭\r\n            var tot = ((long) (i - l + 1) * (ss[r + 2] - ss[i + 1]) - (long) (r - i + 1) * (ss[i + 1] - ss[l])) % mod;\r\n            ans = (ans + strength[i] * tot) % mod; // 累加贡献\r\n        }\r\n        return (int) (ans + mod) % mod; // 防止算出负数\r\n    }\r\n}\r\n```\r\n\r\n```C++ [sol1-C++]\r\nclass Solution {\r\npublic:\r\n    int totalStrength(vector<int> &strength) {\r\n        const int mod = 1e9 + 7;\r\n\r\n        int n = strength.size();\r\n        vector<int> left(n, -1); // left[i] 为左侧严格小于 strength[i] 的最近元素位置（不存在时为 -1）\r\n        vector<int> right(n, n); // right[i] 为右侧小于等于 strength[i] 的最近元素位置（不存在时为 n）\r\n        stack<int> st;\r\n        for (int i = 0; i < n; ++i) {\r\n            while (!st.empty() && strength[st.top()] >= strength[i]) {\r\n                right[st.top()] = i;\r\n                st.pop();\r\n            }\r\n            if (!st.empty()) left[i] = st.top();\r\n            st.push(i);\r\n        }\r\n\r\n        long s = 0L; // 前缀和\r\n        vector<int> ss(n + 2); // 前缀和的前缀和\r\n        for (int i = 1; i <= n; ++i) {\r\n            s += strength[i - 1];\r\n            ss[i + 1] = (ss[i] + s) % mod; // 注意取模后，下面计算两个 ss 相减，结果可能为负\r\n        }\r\n\r\n        int ans = 0;\r\n        for (int i = 0; i < n; ++i) {\r\n            long l = left[i] + 1, r = right[i] - 1; // [l,r] 左闭右闭\r\n            long tot = ((i - l + 1) * (ss[r + 2] - ss[i + 1]) - (r - i + 1) * (ss[i + 1] - ss[l])) % mod;\r\n            ans = (ans + strength[i] * tot) % mod; // 累加贡献\r\n        }\r\n        return (ans + mod) % mod; // 防止算出负数\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc totalStrength(strength []int) (ans int) {\r\n\tconst mod int = 1e9 + 7\r\n\r\n\tn := len(strength)\r\n\tleft := make([]int, n)  // left[i] 为左侧严格小于 strength[i] 的最近元素位置（不存在时为 -1）\r\n\tright := make([]int, n) // right[i] 为右侧小于等于 strength[i] 的最近元素位置（不存在时为 n）\r\n\tfor i := range right {\r\n\t\tright[i] = n\r\n\t}\r\n\tst := []int{-1}\r\n\tfor i, v := range strength {\r\n\t\tfor len(st) > 1 && strength[st[len(st)-1]] >= v {\r\n\t\t\tright[st[len(st)-1]] = i\r\n\t\t\tst = st[:len(st)-1]\r\n\t\t}\r\n\t\tleft[i] = st[len(st)-1]\r\n\t\tst = append(st, i)\r\n\t}\r\n\r\n\ts := 0 // 前缀和\r\n\tss := make([]int, n+2) // 前缀和的前缀和\r\n\tfor i, v := range strength {\r\n\t\ts += v\r\n\t\tss[i+2] = (ss[i+1] + s) % mod // 注意取模后，下面计算两个 ss 相减，结果可能为负\r\n\t}\r\n\tfor i, v := range strength {\r\n\t\tl, r := left[i]+1, right[i]-1 // [l,r] 左闭右闭\r\n\t\ttot := ((i-l+1)*(ss[r+2]-ss[i+1]) - (r-i+1)*(ss[i+1]-ss[l])) % mod\r\n\t\tans = (ans + v*tot) % mod // 累加贡献\r\n\t}\r\n\treturn (ans + mod) % mod // 防止算出负数\r\n}\r\n```\r\n\r\n#### 复杂度分析\r\n\r\n- 时间复杂度：$O(n)$。\r\n- 空间复杂度：$O(n)$。\r\n\r\n#### 相似题目 \r\n\r\n- [907. 子数组的最小值之和](https://leetcode.cn/problems/sum-of-subarray-minimums/)\r\n- [1508. 子数组和排序后的区间和](https://leetcode.cn/problems/range-sum-of-sorted-subarray-sums/)\r\n- [1856. 子数组最小乘积的最大值](https://leetcode.cn/problems/maximum-subarray-min-product/)\r\n- [2104. 子数组范围和](https://leetcode.cn/problems/sum-of-subarray-ranges/)"
}