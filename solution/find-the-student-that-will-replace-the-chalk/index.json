{
	"titleSlug": "find-the-student-that-will-replace-the-chalk",
	"slug": "zhao-dao-xu-yao-bu-chong-fen-bi-de-xue-s-qrn1",
	"url": "https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/solution/zhao-dao-xu-yao-bu-chong-fen-bi-de-xue-s-qrn1/",
	"content": "#### 方法一：优化的模拟\n\n**思路与算法**\n\n学生消耗粉笔的过程是重复的。记每一轮消耗粉笔的总量为 $\\textit{total}$，它等于数组 $\\textit{chalk}$ 的元素之和。因此，我们可以将粉笔数量 $k$ 对 $\\textit{total}$ 进行取模，求得余数 $k'$ 以方便后续计算。由于 $k'$ 一定小于 $\\textit{total}$，因此我们只需要至多遍历一遍数组 $\\textit{chalk}$，同时模拟 $k'$ 减小的过程，即可以得到需要补充粉笔的学生编号。\n\n**细节**\n\n由于 $\\textit{total}$ 可能会超过 $32$ 位有符号整数的范围，因此对于一些整数类型有范围的语言，为了避免溢出，需要使用 $64$ 位整数存储 $\\textit{total}$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int chalkReplacer(vector<int>& chalk, int k) {\n        int n = chalk.size();\n        long long total = accumulate(chalk.begin(), chalk.end(), 0LL);\n        k %= total;\n        int res = -1;\n        for (int i = 0; i < n; ++i) {\n            if (chalk[i] > k) {\n                res = i;\n                break;\n            }\n            k -= chalk[i];\n        }\n        return res;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int chalkReplacer(int[] chalk, int k) {\n        int n = chalk.length;\n        long total = 0;\n        for (int num : chalk) {\n            total += num;\n        }\n        k %= total;\n        int res = -1;\n        for (int i = 0; i < n; ++i) {\n            if (chalk[i] > k) {\n                res = i;\n                break;\n            }\n            k -= chalk[i];\n        }\n        return res;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int ChalkReplacer(int[] chalk, int k) {\n        int n = chalk.Length;\n        long total = 0;\n        foreach (int num in chalk) {\n            total += num;\n        }\n        if (k >= total) {\n            k %= (int) total;\n        }\n        int res = -1;\n        for (int i = 0; i < n; ++i) {\n            if (chalk[i] > k) {\n                res = i;\n                break;\n            }\n            k -= chalk[i];\n        }\n        return res;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def chalkReplacer(self, chalk: List[int], k: int) -> int:\n        total = sum(chalk)\n        k %= total\n        res = -1\n        for i, cnt in enumerate(chalk):\n            if cnt > k:\n                res = i\n                break\n            k -= cnt\n        return res\n```\n\n```JavaScript [sol1-JavaScript]\nvar chalkReplacer = function(chalk, k) {\n    const n = chalk.length;\n    let total = 0;\n    for (const num of chalk) {\n        total += num;\n    }\n    k %= total;\n    let res = -1;\n    for (let i = 0; i < n; ++i) {\n        if (chalk[i] > k) {\n            res = i;\n            break;\n        }\n        k -= chalk[i];\n    }\n    return res;\n};\n```\n\n```go [sol1-Golang]\nfunc chalkReplacer(chalk []int, k int) int {\n    total := 0\n    for _, v := range chalk {\n        total += v\n    }\n    k %= total\n    for i, c := range chalk {\n        if k < c {\n            return i\n        }\n        k -= c\n    }\n    return 0\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{chalk}$ 的长度。我们最多遍历数组 $\\textit{chalk}$ 两次，第一次求出粉笔的总量 $\\textit{total}$，第二次找出答案。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：前缀和 + 二分查找\n\n**思路与算法**\n\n对于方法一中的第二次遍历，我们也可以使用二分查找进行加速。\n\n在对数组 $\\textit{chalk}$ 的遍历过程中，我们可以求出其前缀和，记为数组 $\\textit{pre}$。那么需要补充粉笔的学生编号 $i'$ 是**最小的**满足 $\\textit{pre}[i] > k'$ 的下标 $i'$，可以通过二分查找在 $O(\\log n)$ 的时间内找出。\n\n**细节**\n\n由于前缀和数组中的元素可能会超过 $32$ 位整数的范围，因此不能直接在原数组上计算并更新前缀和。但可以注意到的是，本题中 $k \\leq 10^9$，因此在计算前缀和数组的过程中，如果超过了 $k$，说明我们找到了需要补充粉笔的学生编号，此时就无需继续计算下去，那么也就不会超过 $32$ 位整数的范围了。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int chalkReplacer(vector<int>& chalk, int k) {\n        int n = chalk.size();\n        if (chalk[0] > k) {\n            return 0;\n        }\n        for (int i = 1; i < n; ++i) {\n            chalk[i] += chalk[i - 1];\n            if (chalk[i] > k) {\n                return i;\n            }\n        }\n\n        k %= chalk.back();\n        return upper_bound(chalk.begin(), chalk.end(), k) - chalk.begin();\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int chalkReplacer(int[] chalk, int k) {\n        int n = chalk.length;\n        if (chalk[0] > k) {\n            return 0;\n        }\n        for (int i = 1; i < n; ++i) {\n            chalk[i] += chalk[i - 1];\n            if (chalk[i] > k) {\n                return i;\n            }\n        }\n\n        k %= chalk[n - 1];\n        return binarySearch(chalk, k);\n    }\n\n    public int binarySearch(int[] arr, int target) {\n        int low = 0, high = arr.length - 1;\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (arr[mid] <= target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int ChalkReplacer(int[] chalk, int k) {\n        int n = chalk.Length;\n        if (chalk[0] > k) {\n            return 0;\n        }\n        for (int i = 1; i < n; ++i) {\n            chalk[i] += chalk[i - 1];\n            if (chalk[i] > k) {\n                return i;\n            }\n        }\n\n        k %= chalk[n - 1];\n        return BinarySearch(chalk, k);\n    }\n\n    public int BinarySearch(int[] arr, int target) {\n        int low = 0, high = arr.Length - 1;\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (arr[mid] <= target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def chalkReplacer(self, chalk: List[int], k: int) -> int:\n        n = len(chalk)\n        if chalk[0] > k:\n            return 0\n        for i in range(1, n):\n            chalk[i] += chalk[i - 1]\n            if chalk[i] > k:\n                return i\n\n        k %= chalk[-1]\n        return bisect_right(chalk, k)\n```\n\n```JavaScript [sol2-JavaScript]\nvar chalkReplacer = function(chalk, k) {\n   const n = chalk.length;\n    if (chalk[0] > k) {\n        return 0;\n    }\n    for (let i = 1; i < n; ++i) {\n        chalk[i] += chalk[i - 1];\n        if (chalk[i] > k) {\n            return i;\n        }\n    }\n\n    k %= chalk[n - 1];\n    return binarySearch(chalk, k);\n};\n\nconst binarySearch = (arr, target) => {\n    let low = 0, high = arr.length - 1;\n    while (low < high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        if (arr[mid] <= target) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n```\n\n```go [sol2-Golang]\nfunc chalkReplacer(chalk []int, k int) int {\n    if chalk[0] > k {\n        return 0\n    }\n    n := len(chalk)\n    for i := 1; i < n; i++ {\n        chalk[i] += chalk[i-1]\n        if chalk[i] > k {\n            return i\n        }\n    }\n    k %= chalk[n-1]\n    return sort.SearchInts(chalk, k+1)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{chalk}$ 的长度。计算前缀和的时间复杂度为 $O(n)$，二分查找的时间复杂度为 $O(\\log n)$，因此总时间复杂度为 $O(n)$。\n\n- 空间复杂度：$O(1)$。"
}