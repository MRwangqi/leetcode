{
	"titleSlug": "minimum-number-of-days-to-make-m-bouquets",
	"slug": "zhi-zuo-m-shu-hua-suo-xu-de-zui-shao-tia-mxci",
	"url": "https://leetcode-cn.com/problems/minimum-number-of-days-to-make-m-bouquets/solution/zhi-zuo-m-shu-hua-suo-xu-de-zui-shao-tia-mxci/",
	"content": "#### 方法一：二分查找\n\n每束花需要 $k$ 朵花，需要制作 $m$ 束花，因此一共需要 $k \\times m$ 朵花。如果花园中的花朵数量少于 $k \\times m$，即数组 $\\textit{bloomDay}$ 的长度小于 $k \\times m$，则无法制作出指定数量的花束，返回 $-1$。如果数组 $\\textit{bloomDay}$ 的长度大于或等于 $k \\times m$，则一定可以制作出指定数量的花束。\n\n为了计算制作出指定数量的花束的最少天数，首先需要实现一个辅助函数用于判断在给定的天数内能否制作出指定数量的花束，辅助函数的参数除了 $\\textit{bloomDay}$、$m$ 和 $k$ 之外，还有一个参数 $\\textit{days}$ 表示指定天数。例如，当 $\\textit{bloomDay}=[1,10,3,10,2]$、$m=3$、$k=1$ 时，如果 $\\textit{days}=3$ 则辅助函数返回 $\\text{true}$，如果 $\\textit{days}=2$ 则辅助函数返回 $\\text{false}$。\n\n对于辅助函数的实现，可以遍历数组 $\\textit{bloomDay}$，计算其中的长度为 $k$ 且最大元素不超过 $\\textit{days}$ 的不重合的连续子数组的数量，如果符合要求的不重合的连续子数组的数量大于或等于 $m$ 则返回 $\\text{true}$，否则返回 $\\text{false}$。\n\n当 $\\textit{days}$ 很小的时候，辅助函数总是返回 $\\text{false}$，因为天数太少不能收齐 $m$ 个花束；当 $\\textit{days}$ 很大的时候，辅助函数总是返回 $\\text{true}$，如果给定序列可以制作出 $m$ 个花束。在 $\\textit{days}$ 慢慢变大的过程中，辅助函数的返回值会从 $\\text{false}$ 变成 $\\text{true}$，所以我们可以认为这个辅助函数是关于 $\\textit{days}$ 递增的，于是可以通过二分查找得到最少天数。在确保可以制作出指定数量的花束的情况下，所需的最少天数一定不会小于数组 $\\textit{bloomDay}$ 中的最小值，一定不会大于数组 $\\textit{bloomDay}$ 中的最大值，因此二分查找的初始值是 $\\textit{low}$ 等于数组 $\\textit{bloomDay}$ 中的最小值，$\\textit{high}$ 等于数组 $\\textit{bloomDay}$ 中的最大值。\n\n当 $\\textit{low}$ 和 $\\textit{high}$ 的值相等时，二分查找结束，此时 $\\textit{low}$ 的值即为最少天数。\n\n```Java [sol1-Java]\nclass Solution {\n    public int minDays(int[] bloomDay, int m, int k) {\n        if (m > bloomDay.length / k) {\n            return -1;\n        }\n        int low = Integer.MAX_VALUE, high = 0;\n        int length = bloomDay.length;\n        for (int i = 0; i < length; i++) {\n            low = Math.min(low, bloomDay[i]);\n            high = Math.max(high, bloomDay[i]);\n        }\n        while (low < high) {\n            int days = (high - low) / 2 + low;\n            if (canMake(bloomDay, days, m, k)) {\n                high = days;\n            } else {\n                low = days + 1;\n            }\n        }\n        return low;\n    }\n\n    public boolean canMake(int[] bloomDay, int days, int m, int k) {\n        int bouquets = 0;\n        int flowers = 0;\n        int length = bloomDay.length;\n        for (int i = 0; i < length && bouquets < m; i++) {\n            if (bloomDay[i] <= days) {\n                flowers++;\n                if (flowers == k) {\n                    bouquets++;\n                    flowers = 0;\n                }\n            } else {\n                flowers = 0;\n            }\n        }\n        return bouquets >= m;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minDays(vector<int>& bloomDay, int m, int k) {\n        if (m > bloomDay.size() / k) {\n            return -1;\n        }\n        int low = INT_MAX, high = 0;\n        int length = bloomDay.size();\n        for (int i = 0; i < length; i++) {\n            low = min(low, bloomDay[i]);\n            high = max(high, bloomDay[i]);\n        }\n        while (low < high) {\n            int days = (high - low) / 2 + low;\n            if (canMake(bloomDay, days, m, k)) {\n                high = days;\n            } else {\n                low = days + 1;\n            }\n        }\n        return low;\n    }\n\n    bool canMake(vector<int>& bloomDay, int days, int m, int k) {\n        int bouquets = 0;\n        int flowers = 0;\n        int length = bloomDay.size();\n        for (int i = 0; i < length && bouquets < m; i++) {\n            if (bloomDay[i] <= days) {\n                flowers++;\n                if (flowers == k) {\n                    bouquets++;\n                    flowers = 0;\n                }\n            } else {\n                flowers = 0;\n            }\n        }\n        return bouquets >= m;\n    }\n};\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MinDays(int[] bloomDay, int m, int k) {\n        if (m > bloomDay.Length / k) {\n            return -1;\n        }\n        int low = int.MaxValue, high = 0;\n        int length = bloomDay.Length;\n        for (int i = 0; i < length; i++) {\n            low = Math.Min(low, bloomDay[i]);\n            high = Math.Max(high, bloomDay[i]);\n        }\n        while (low < high) {\n            int days = (high - low) / 2 + low;\n            if (CanMake(bloomDay, days, m, k)) {\n                high = days;\n            } else {\n                low = days + 1;\n            }\n        }\n        return low;\n    }\n\n    public bool CanMake(int[] bloomDay, int days, int m, int k) {\n        int bouquets = 0;\n        int flowers = 0;\n        int length = bloomDay.Length;\n        for (int i = 0; i < length && bouquets < m; i++) {\n            if (bloomDay[i] <= days) {\n                flowers++;\n                if (flowers == k) {\n                    bouquets++;\n                    flowers = 0;\n                }\n            } else {\n                flowers = 0;\n            }\n        }\n        return bouquets >= m;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minDays = function(bloomDay, m, k) {\n    if (m > bloomDay.length / k) {\n        return -1;\n    }\n    let low = Math.min.apply(null, bloomDay), high = Math.max.apply(null, bloomDay);\n    while (low < high) {\n        const days = Math.floor((high - low) / 2) + low;\n        if (canMake(bloomDay, days, m, k)) {\n            high = days;\n        } else {\n            low = days + 1;\n        }\n    }\n    return low;\n};\n\nconst canMake = (bloomDay, days, m, k) => {\n    let bouquets = 0;\n    let flowers = 0;\n    const length = bloomDay.length;\n    for (let i = 0; i < length && bouquets < m; i++) {\n        if (bloomDay[i] <= days) {\n            flowers++;\n            if (flowers == k) {\n                bouquets++;\n                flowers = 0;\n            }\n        } else {\n            flowers = 0;\n        }\n    }\n    return bouquets >= m;\n}\n```\n\n```go [sol1-Golang]\nfunc minDays(bloomDay []int, m, k int) int {\n    if m > len(bloomDay)/k {\n        return -1\n    }\n    minDay, maxDay := math.MaxInt32, 0\n    for _, day := range bloomDay {\n        if day < minDay {\n            minDay = day\n        }\n        if day > maxDay {\n            maxDay = day\n        }\n    }\n    return minDay + sort.Search(maxDay-minDay, func(days int) bool {\n        days += minDay\n        flowers, bouquets := 0, 0\n        for _, d := range bloomDay {\n            if d > days {\n                flowers = 0\n            } else {\n                flowers++\n                if flowers == k {\n                    bouquets++\n                    flowers = 0\n                }\n            }\n        }\n        return bouquets >= m\n    })\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:\n        if m > len(bloomDay) / k:\n            return -1\n        \n        def canMake(days: int) -> bool:\n            bouquets = flowers = 0\n            for bloom in bloomDay:\n                if bloom <= days:\n                    flowers += 1\n                    if flowers == k:\n                        bouquets += 1\n                        if bouquets == m:\n                            break\n                        flowers = 0\n                else:\n                    flowers = 0\n            return bouquets == m\n        \n        low, high = min(bloomDay), max(bloomDay)\n        while low < high:\n            days = (low + high) // 2\n            if canMake(days):\n                high = days\n            else:\n                low = days + 1\n        return low\n```\n\n```C [sol1-C]\nbool canMake(int* bloomDay, int bloomDaySize, int days, int m, int k) {\n    int bouquets = 0;\n    int flowers = 0;\n    int length = bloomDaySize;\n    for (int i = 0; i < length && bouquets < m; i++) {\n        if (bloomDay[i] <= days) {\n            flowers++;\n            if (flowers == k) {\n                bouquets++;\n                flowers = 0;\n            }\n        } else {\n            flowers = 0;\n        }\n    }\n    return bouquets >= m;\n}\n\nint minDays(int* bloomDay, int bloomDaySize, int m, int k) {\n    if (m > bloomDaySize / k) {\n        return -1;\n    }\n    int low = INT_MAX, high = 0;\n    for (int i = 0; i < bloomDaySize; i++) {\n        low = fmin(low, bloomDay[i]);\n        high = fmax(high, bloomDay[i]);\n    }\n    while (low < high) {\n        int days = (high - low) / 2 + low;\n        if (canMake(bloomDay, bloomDaySize, days, m, k)) {\n            high = days;\n        } else {\n            low = days + 1;\n        }\n    }\n    return low;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log (\\textit{high} - \\textit{low}))$，其中 $n$ 是数组 $\\textit{bloomDay}$ 的长度，$\\textit{high}$ 和 $\\textit{low}$ 分别是数组 $\\textit{bloomDay}$ 中的最大值和最小值。\n  需要遍历数组 $\\textit{bloomDay}$ 得到其中的最大值 $\\textit{high}$ 和最小值 $\\textit{low}$，遍历的时间复杂度是 $O(n)$。\n  得到最大值 $\\textit{high}$ 和最小值 $\\textit{low}$ 之后，二分查找的迭代次数是 $O(\\log (\\textit{high} - \\textit{low}))$，每次判断是否能制作规定数量的花束的时间复杂度是 $O(n)$，因此二分查找的总时间复杂度是 $O(n \\log (\\textit{high} - \\textit{low}))$。\n  整个算法的时间复杂度是 $O(n)+O(n \\log (\\textit{high} - \\textit{low}))=O(n \\log (\\textit{high} - \\textit{low}))$。\n\n- 空间复杂度：$O(1)$。"
}