{
	"titleSlug": "design-add-and-search-words-data-structure",
	"slug": "tian-jia-yu-sou-suo-dan-ci-shu-ju-jie-go-n4ud",
	"url": "https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/solution/tian-jia-yu-sou-suo-dan-ci-shu-ju-jie-go-n4ud/",
	"content": "#### 方法一：字典树\n\n**预备知识**\n\n字典树（前缀树）是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。前缀树可以用 $O(|S|)$ 的时间复杂度完成如下操作，其中 $|S|$ 是插入字符串或查询前缀的长度：\n\n- 向字典树中插入字符串 $\\textit{word}$；\n\n- 查询字符串 $\\textit{word}$ 是否已经插入到字典树中。\n\n字典树的实现可以参考「[208. 实现 Trie (前缀树) 的官方题解](https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/shi-xian-trie-qian-zhui-shu-by-leetcode-ti500/)」。\n\n**思路和算法**\n\n根据题意，$\\texttt{WordDictionary}$ 类需要支持添加单词和搜索单词的操作，可以使用字典树实现。\n\n对于添加单词，将单词添加到字典树中即可。\n\n对于搜索单词，从字典树的根结点开始搜索。由于待搜索的单词可能包含点号，因此在搜索过程中需要考虑点号的处理。对于当前字符是字母和点号的情况，分别按照如下方式处理：\n\n- 如果当前字符是字母，则判断当前字符对应的子结点是否存在，如果子结点存在则移动到子结点，继续搜索下一个字符，如果子结点不存在则说明单词不存在，返回 $\\text{false}$；\n\n- 如果当前字符是点号，由于点号可以表示任何字母，因此需要对当前结点的所有非空子结点继续搜索下一个字符。\n\n重复上述步骤，直到返回 $\\text{false}$ 或搜索完给定单词的最后一个字符。\n\n如果搜索完给定的单词的最后一个字符，则当搜索到的最后一个结点的 $\\textit{isEnd}$ 为 $\\text{true}$ 时，给定的单词存在。\n\n特别地，当搜索到点号时，只要存在一个非空子结点可以搜索到给定的单词，即返回 $\\text{true}$。\n\n**代码**\n\n```Java [sol1-Java]\nclass WordDictionary {\n    private Trie root;\n\n    public WordDictionary() {\n        root = new Trie();\n    }\n    \n    public void addWord(String word) {\n        root.insert(word);\n    }\n    \n    public boolean search(String word) {\n        return dfs(word, 0, root);\n    }\n\n    private boolean dfs(String word, int index, Trie node) {\n        if (index == word.length()) {\n            return node.isEnd();\n        }\n        char ch = word.charAt(index);\n        if (Character.isLetter(ch)) {\n            int childIndex = ch - 'a';\n            Trie child = node.getChildren()[childIndex];\n            if (child != null && dfs(word, index + 1, child)) {\n                return true;\n            }\n        } else {\n            for (int i = 0; i < 26; i++) {\n                Trie child = node.getChildren()[i];\n                if (child != null && dfs(word, index + 1, child)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\nclass Trie {\n    private Trie[] children;\n    private boolean isEnd;\n\n    public Trie() {\n        children = new Trie[26];\n        isEnd = false;\n    }\n    \n    public void insert(String word) {\n        Trie node = this;\n        for (int i = 0; i < word.length(); i++) {\n            char ch = word.charAt(i);\n            int index = ch - 'a';\n            if (node.children[index] == null) {\n                node.children[index] = new Trie();\n            }\n            node = node.children[index];\n        }\n        node.isEnd = true;\n    }\n\n    public Trie[] getChildren() {\n        return children;\n    }\n\n    public boolean isEnd() {\n        return isEnd;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class WordDictionary {\n    private Trie root;\n\n    public WordDictionary() {\n        root = new Trie();\n    }\n    \n    public void AddWord(string word) {\n        root.Insert(word);\n    }\n    \n    public bool Search(string word) {\n        return DFS(word, 0, root);\n    }\n\n    private bool DFS(String word, int index, Trie node) {\n        if (index == word.Length) {\n            return node.IsEnd;\n        }\n        char ch = word[index];\n        if (char.IsLetter(ch)) {\n            int childIndex = ch - 'a';\n            Trie child = node.Children[childIndex];\n            if (child != null && DFS(word, index + 1, child)) {\n                return true;\n            }\n        } else {\n            for (int i = 0; i < 26; i++) {\n                Trie child = node.Children[i];\n                if (child != null && DFS(word, index + 1, child)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\nclass Trie {\n    public Trie[] Children { get; }\n    public bool IsEnd { get; set; }\n\n    public Trie() {\n        Children = new Trie[26];\n        IsEnd = false;\n    }\n    \n    public void Insert(String word) {\n        Trie node = this;\n        for (int i = 0; i < word.Length; i++) {\n            char ch = word[i];\n            int index = ch - 'a';\n            if (node.Children[index] == null) {\n                node.Children[index] = new Trie();\n            }\n            node = node.Children[index];\n        }\n        node.IsEnd = true;\n    }\n}\n```\n\n```C++ [sol1-C++]\nstruct TrieNode{\n    vector<TrieNode *> child;\n    bool isEnd;\n    TrieNode() {\n        this->child = vector<TrieNode *>(26,nullptr);\n        this->isEnd = false;\n    }\n};\n\nvoid insert(TrieNode * root, const string & word) {\n    TrieNode * node = root;\n    for (auto c : word) {\n        if (node->child[c - 'a'] == nullptr) {\n            node->child[c - 'a'] = new TrieNode();\n        }\n        node = node->child[c - 'a'];\n    }\n    node->isEnd = true;\n}\n\nclass WordDictionary {\npublic:\n    WordDictionary() {\n        trie = new TrieNode();\n    }\n    \n    void addWord(string word) {\n        insert(trie,word);\n    }\n    \n    bool search(string word) {\n        return dfs(word, 0, trie);\n    }\n\n    bool dfs(const string & word,int index,TrieNode * node) {\n　　　　if (index == word.size()) {\n            return node->isEnd;    \n        }\n        char ch = word[index];\n        if (ch >= 'a' && ch <= 'z') {\n            TrieNode * child = node->child[ch - 'a'];\n            if (child != nullptr && dfs(word, index + 1, child)) {\n                return true;\n            }\n        } else if (ch == '.') {\n            for (int i = 0; i < 26; i++) {\n                TrieNode * child = node->child[i];\n                if (child != nullptr && dfs(word, index + 1, child)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\nprivate:\n    TrieNode * trie;\n};\n```\n\n```go [sol1-Golang]\ntype TrieNode struct {\n    children [26]*TrieNode\n    isEnd    bool\n}\n\nfunc (t *TrieNode) Insert(word string) {\n    node := t\n    for _, ch := range word {\n        ch -= 'a'\n        if node.children[ch] == nil {\n            node.children[ch] = &TrieNode{}\n        }\n        node = node.children[ch]\n    }\n    node.isEnd = true\n}\n\ntype WordDictionary struct {\n    trieRoot *TrieNode\n}\n\nfunc Constructor() WordDictionary {\n    return WordDictionary{&TrieNode{}}\n}\n\nfunc (d *WordDictionary) AddWord(word string) {\n    d.trieRoot.Insert(word)\n}\n\nfunc (d *WordDictionary) Search(word string) bool {\n    var dfs func(int, *TrieNode) bool\n    dfs = func(index int, node *TrieNode) bool {\n        if index == len(word) {\n            return node.isEnd\n        }\n        ch := word[index]\n        if ch != '.' {\n            child := node.children[ch-'a']\n            if child != nil && dfs(index+1, child) {\n                return true\n            }\n        } else {\n            for i := range node.children {\n                child := node.children[i]\n                if child != nil && dfs(index+1, child) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n    return dfs(0, d.trieRoot)\n}\n```\n\n```Python [sol1-Python3]\nclass TrieNode:\n    def __init__(self):\n        self.children = [None] * 26\n        self.isEnd = False\n\n    def insert(self, word: str) -> None:\n        node = self\n        for ch in word:\n            ch = ord(ch) - ord('a')\n            if not node.children[ch]:\n                node.children[ch] = TrieNode()\n            node = node.children[ch]\n        node.isEnd = True\n\n\nclass WordDictionary:\n    def __init__(self):\n        self.trieRoot = TrieNode()\n\n    def addWord(self, word: str) -> None:\n        self.trieRoot.insert(word)\n\n    def search(self, word: str) -> bool:\n        def dfs(index: int, node: TrieNode) -> bool:\n            if index == len(word):\n                return node.isEnd\n            ch = word[index]\n            if ch != '.':\n                child = node.children[ord(ch) - ord('a')]\n                if child is not None and dfs(index + 1, child):\n                    return True\n            else:\n                for child in node.children:\n                    if child is not None and dfs(index + 1, child):\n                        return True\n            return False\n\n        return dfs(0, self.trieRoot)\n```\n\n```JavaScript [sol1-JavaScript]\nvar WordDictionary = function() {\n    this.trieRoot = new TrieNode();\n};\n\nWordDictionary.prototype.addWord = function(word) {\n    this.trieRoot.insert(word);\n};\n\nWordDictionary.prototype.search = function(word) {\n    const dfs = (index, node) => {\n        if (index === word.length) {\n            return node.isEnd;\n        }\n        const ch = word[index];\n        if (ch !== '.') {\n            const child = node.children[ch.charCodeAt() - 'a'.charCodeAt()]\n            if (child && dfs(index + 1, child)) {\n                return true;\n            }\n        } else {\n            for (const child of node.children) {\n                if (child && dfs(index + 1, child)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    return dfs(0, this.trieRoot);\n};\n\nclass TrieNode {\n    constructor() {\n        this.children = new Array(26).fill(0);\n        this.isEnd = false;\n    }\n\n    insert(word) {\n        let node = this;\n        for (let i = 0; i < word.length; i++) {\n            const ch = word[i];\n            const index = ch.charCodeAt() - 'a'.charCodeAt();\n            if (node.children[index] === 0) {\n                node.children[index] = new TrieNode();\n            }\n            node = node.children[index];\n        }\n        node.isEnd = true;\n    }\n\n    getChildren() {\n        return this.children;\n    }\n\n    isEnd() {\n        return this.isEnd;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：初始化为 $O(1)$，添加单词为 $O(|S|)$，搜索单词为 $O(|\\Sigma|^{|S|})$，其中 $|S|$ 是每次添加或搜索的单词的长度，$\\Sigma$ 是字符集，这道题中的字符集为全部小写英语字母，$|\\Sigma| = 26$。\n  最坏情况下，待搜索的单词中的每个字符都是点号，则每个字符都有 $|\\Sigma|$ 种可能。\n\n- 空间复杂度：$O(|T|\\cdot|\\Sigma|)$，其中 $|T|$ 是所有添加的单词的长度之和，$\\Sigma$ 是字符集，这道题中的字符集为全部小写英语字母，$|\\Sigma| = 26$。"
}