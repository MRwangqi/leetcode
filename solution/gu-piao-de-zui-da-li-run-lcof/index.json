{
	"titleSlug": "gu-piao-de-zui-da-li-run-lcof",
	"slug": "gu-piao-de-zui-da-li-run-by-leetcode-sol-0l1g",
	"url": "https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof/solution/gu-piao-de-zui-da-li-run-by-leetcode-sol-0l1g/",
	"content": "#### 解决方案\n\n我们需要找出给定数组中两个数字之间的最大差值（即，最大利润）。此外，第二个数字（卖出价格）必须大于第一个数字（买入价格）。\n\n形式上，对于每组 $i$ 和 $j$（其中 $j > i$）我们需要找出 $\\max(prices[j] - prices[i])$。\n\n#### 方法一：暴力法\n\n```Java [sol1-Java]\npublic class Solution {\n    public int maxProfit(int[] prices) {\n        int maxprofit = 0;\n        for (int i = 0; i < prices.length - 1; i++) {\n            for (int j = i + 1; j < prices.length; j++) {\n                int profit = prices[j] - prices[i];\n                if (profit > maxprofit) {\n                    maxprofit = profit;\n                }\n            }\n        }\n        return maxprofit;\n    }\n}\n```\n```python [sol1-Python3]\n# 此方法会超时\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ans = 0\n        for i in range(len(prices)):\n            for j in range(i + 1, len(prices)):\n                ans = max(ans, prices[j] - prices[i])\n        return ans\n```\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int n = (int)prices.size(), ans = 0;\n        for (int i = 0; i < n; ++i){\n            for (int j = i + 1; j < n; ++j) {\n                ans = max(ans, prices[j] - prices[i]);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxProfit = function(prices) {\n    let maxprofit = 0;\n    for (let i = 0; i < prices.length; i++) {\n        for (let j = i + 1; j < prices.length; j++) {\n            const profit = prices[j] - prices[i];\n            if (profit > maxprofit) {\n                maxprofit = profit;\n            }\n        }\n    }\n    return maxprofit;\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n^2)$。循环运行 $\\dfrac{n (n-1)}{2}$ 次。\n* 空间复杂度：$O(1)$。只使用了常数个变量。\n\n#### 方法二：一次遍历\n\n**算法**\n\n假设给定的数组为：`[7, 1, 5, 3, 6, 4]`\n\n如果我们在图表上绘制给定数组中的数字，我们将会得到：\n\n![Profit Graph](https://pic.leetcode-cn.com/cc4ef55d97cfef6f9215285c7573027c4b265c31101dd54e8555a7021c95c927-file_1555699418271){:width=\"400px\"}\n{:align=\"center\"}\n\n我们来假设自己来购买股票。随着时间的推移，每天我们都可以选择出售股票与否。那么，假设在第 `i` 天，如果我们要在今天卖股票，那么我们能赚多少钱呢？\n\n显然，如果我们真的在买卖股票，我们肯定会想：如果我是在历史最低点买的股票就好了！太好了，在题目中，我们只要用一个变量记录一个历史最低价格 `minprice`，我们就可以假设自己的股票是在那天买的。那么我们在第 `i` 天卖出股票能得到的利润就是 `prices[i] - minprice`。\n\n因此，我们只需要遍历价格数组一遍，记录历史最低点，然后在每一天考虑这么一个问题：如果我是在历史最低点买进的，那么我今天卖出能赚多少钱？当考虑完所有天数之时，我们就得到了最好的答案。\n\n```Java [sol2-Java]\npublic class Solution {\n    public int maxProfit(int prices[]) {\n        int minprice = Integer.MAX_VALUE;\n        int maxprofit = 0;\n        for (int i = 0; i < prices.length; i++) {\n            if (prices[i] < minprice) {\n                minprice = prices[i];\n            } else if (prices[i] - minprice > maxprofit) {\n                maxprofit = prices[i] - minprice;\n            }\n        }\n        return maxprofit;\n    }\n}\n```\n```python [sol2-Python3]\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        inf = int(1e9)\n        minprice = inf\n        maxprofit = 0\n        for price in prices:\n            maxprofit = max(price - minprice, maxprofit)\n            minprice = min(price, minprice)\n        return maxprofit\n```\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int inf = 1e9;\n        int minprice = inf, maxprofit = 0;\n        for (int price: prices) {\n            maxprofit = max(maxprofit, price - minprice);\n            minprice = min(price, minprice);\n        }\n        return maxprofit;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar maxProfit = function(prices) {\n    let minprice = Number.MAX_VALUE;\n    let maxprofit = 0;\n    for (const price of prices) {\n        maxprofit = Math.max(price - minprice, maxprofit);\n        minprice = Math.min(price, minprice);\n    }\n    return maxprofit;\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，只需要遍历一次。\n* 空间复杂度：$O(1)$，只使用了常数个变量。"
}