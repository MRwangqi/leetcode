{
	"titleSlug": "construct-binary-tree-from-preorder-and-postorder-traversal",
	"slug": "gen-ju-qian-xu-he-hou-xu-bian-li-gou-zao-er-cha-sh",
	"url": "https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/solution/gen-ju-qian-xu-he-hou-xu-bian-li-gou-zao-er-cha-sh/",
	"content": "#### 方法一：递归\n\n**思路**\n\n前序遍历为：\n\n* `(根结点) (前序遍历左分支) (前序遍历右分支)`\n\n而后序遍历为：\n\n* `(后序遍历左分支) (后序遍历右分支) (根结点)`\n\n例如，如果最终的二叉树可以被序列化的表述为 `[1, 2, 3, 4, 5, 6, 7]`，那么其前序遍历为 `[1] + [2, 4, 5] + [3, 6, 7]`，而后序遍历为 `[4, 5, 2] + [6, 7, 3] + [1]`.\n\n如果我们知道左分支有多少个结点，我们就可以对这些数组进行分组，并用递归生成树的每个分支。\n\n**算法**\n\n我们令左分支有 $L$ 个节点。我们知道左分支的头节点为 `pre[1]`，但它也出现在左分支的后序表示的最后。所以 `pre[1] = post[L-1]`（因为结点的值具有唯一性），因此 `L = post.indexOf(pre[1]) + 1`。\n\n现在在我们的递归步骤中，左分支由 `pre[1 : L+1]` 和 `post[0 : L]` 重新分支，而右分支将由 `pre[L+1 : N]` 和 `post[L : N-1]` 重新分支。\n\n```java [FhBbdzey-Java]\nclass Solution {\n    public TreeNode constructFromPrePost(int[] pre, int[] post) {\n        int N = pre.length;\n        if (N == 0) return null;\n        TreeNode root = new TreeNode(pre[0]);\n        if (N == 1) return root;\n\n        int L = 0;\n        for (int i = 0; i < N; ++i)\n            if (post[i] == pre[1])\n                L = i+1;\n\n        root.left = constructFromPrePost(Arrays.copyOfRange(pre, 1, L+1),\n                                         Arrays.copyOfRange(post, 0, L));\n        root.right = constructFromPrePost(Arrays.copyOfRange(pre, L+1, N),\n                                          Arrays.copyOfRange(post, L, N-1));\n        return root;\n    }\n}\n```\n```python [FhBbdzey-Python]\nclass Solution(object):\n    def constructFromPrePost(self, pre, post):\n        if not pre: return None\n        root = TreeNode(pre[0])\n        if len(pre) == 1: return root\n\n        L = post.index(pre[1]) + 1\n        root.left = self.constructFromPrePost(pre[1:L+1], post[:L])\n        root.right = self.constructFromPrePost(pre[L+1:], post[L:-1])\n        return root\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$，其中 $N$ 是结点的数量。\n* 空间复杂度：$O(N^2)$。\n\n\n\n\n\n\n---\n#### 方法二：递归（节约空间的变体）\n\n**说明**\n\n我们这里提出一个*方法一*的变体，使用索引指代子数组 `pre` 和 `post`，而不是通过那些子数组的副本。这里，`(i0, i1, N)` 指的是 `pre[i0:i0+N], post[i1:i1+N]`.\n\n```java [fsN6ns47-Java]\nclass Solution {\n    int[] pre, post;\n    public TreeNode constructFromPrePost(int[] pre, int[] post) {\n        this.pre = pre;\n        this.post = post;\n        return make(0, 0, pre.length);\n    }\n\n    public TreeNode make(int i0, int i1, int N) {\n        if (N == 0) return null;\n        TreeNode root = new TreeNode(pre[i0]);\n        if (N == 1) return root;\n\n        int L = 1;\n        for (; L < N; ++L)\n            if (post[i1 + L-1] == pre[i0 + 1])\n                break;\n\n        root.left = make(i0+1, i1, L);\n        root.right = make(i0+L+1, i1+L, N-1-L);\n        return root;\n    }\n}\n```\n```python [fsN6ns47-Python]\nclass Solution(object):\n    def constructFromPrePost(self, pre, post):\n        def make(i0, i1, N):\n            if N == 0: return None\n            root = TreeNode(pre[i0])\n            if N == 1: return root\n\n            for L in xrange(N):\n                if post[i1 + L - 1] == pre[i0 + 1]:\n                    break\n\n            root.left = make(i0 + 1, i1, L)\n            root.right = make(i0 + L + 1, i1 + L, N - 1 - L)\n            return root\n\n        return make(0, 0, len(pre))\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$，其中 $N$ 是结点的数目。\n\n* 空间复杂度：$O(N)$，答案所用去的空间。"
}