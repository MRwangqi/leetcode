{
	"titleSlug": "spiral-matrix-ii",
	"slug": "spiral-matrix-ii-mo-ni-fa-she-ding-bian-jie-qing-x",
	"url": "https://leetcode-cn.com/problems/spiral-matrix-ii/solution/spiral-matrix-ii-mo-ni-fa-she-ding-bian-jie-qing-x/",
	"content": "\r\n### 思路：\r\n- 生成一个 `n×n` 空矩阵 `mat`，随后模拟整个向内环绕的填入过程：\r\n    - 定义当前左右上下边界 `l,r,t,b`，初始值 `num = 1`，迭代终止值 `tar = n * n`；\r\n    - 当 `num <= tar` 时，始终按照 `从左到右` `从上到下` `从右到左` `从下到上` 填入顺序循环，每次填入后：\r\n        - 执行 `num += 1`：得到下一个需要填入的数字；\r\n        - 更新边界：例如从左到右填完后，上边界` t += 1`，相当于上边界向内缩 1。\r\n    - 使用`num <= tar`而不是`l < r || t < b`作为迭代条件，是为了解决当`n`为奇数时，矩阵中心数字无法在迭代过程中被填充的问题。\r\n- 最终返回 `mat` 即可。  \r\n\r\n![Picture1.png](https://pic.leetcode-cn.com/ccff416fa39887c938d36fec8e490e1861813d3bba7836eda941426f13420759-Picture1.png){:width=500}\r\n{:align=center}\r\n### 代码：\r\n\r\n```Java []\r\nclass Solution {\r\n    public int[][] generateMatrix(int n) {\r\n        int l = 0, r = n - 1, t = 0, b = n - 1;\r\n        int[][] mat = new int[n][n];\r\n        int num = 1, tar = n * n;\r\n        while(num <= tar){\r\n            for(int i = l; i <= r; i++) mat[t][i] = num++; // left to right.\r\n            t++;\r\n            for(int i = t; i <= b; i++) mat[i][r] = num++; // top to bottom.\r\n            r--;\r\n            for(int i = r; i >= l; i--) mat[b][i] = num++; // right to left.\r\n            b--;\r\n            for(int i = b; i >= t; i--) mat[i][l] = num++; // bottom to top.\r\n            l++;\r\n        }\r\n        return mat;\r\n    }\r\n}\r\n```\r\n```Python []\r\nclass Solution:\r\n    def generateMatrix(self, n: int) -> [[int]]:\r\n        l, r, t, b = 0, n - 1, 0, n - 1\r\n        mat = [[0 for _ in range(n)] for _ in range(n)]\r\n        num, tar = 1, n * n\r\n        while num <= tar:\r\n            for i in range(l, r + 1): # left to right\r\n                mat[t][i] = num\r\n                num += 1\r\n            t += 1\r\n            for i in range(t, b + 1): # top to bottom\r\n                mat[i][r] = num\r\n                num += 1\r\n            r -= 1\r\n            for i in range(r, l - 1, -1): # right to left\r\n                mat[b][i] = num\r\n                num += 1\r\n            b -= 1\r\n            for i in range(b, t - 1, -1): # bottom to top\r\n                mat[i][l] = num\r\n                num += 1\r\n            l += 1\r\n        return mat\r\n```"
}