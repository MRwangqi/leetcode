{
	"titleSlug": "n-th-tribonacci-number",
	"slug": "di-n-ge-tai-bo-na-qi-shu-by-leetcode-sol-kn16",
	"url": "https://leetcode-cn.com/problems/n-th-tribonacci-number/solution/di-n-ge-tai-bo-na-qi-shu-by-leetcode-sol-kn16/",
	"content": "#### 方法一：动态规划\n\n泰波那契数的边界条件是 $T(0)=0, T(1)=1, T(2)=1$。当 $n>2$ 时，每一项的和都等于前三项的和，因此有如下递推关系：\n\n$$\nT(n)=T(n-1)+T(n-2)+T(n-3)\n$$\n\n由于泰波那契数存在递推关系，因此可以使用动态规划求解。动态规划的状态转移方程即为上述递推关系，边界条件为 $T(0)$、$T(1)$ 和 $T(2)$。\n\n根据状态转移方程和边界条件，可以得到时间复杂度和空间复杂度都是 $O(n)$ 的实现。由于 $T(n)$ 只和前三项有关，因此可以使用「滚动数组思想」将空间复杂度优化成 $O(1)$。**如下的代码中给出的就是这种实现。**\n\n![fig1](https://assets.leetcode-cn.com/solution-static/1137/1137.gif)\n\n```Java [sol1-Java]\nclass Solution {\n    public int tribonacci(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n <= 2) {\n            return 1;\n        }\n        int p = 0, q = 0, r = 1, s = 1;\n        for (int i = 3; i <= n; ++i) {\n            p = q;\n            q = r;\n            r = s;\n            s = p + q + r;\n        }\n        return s;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int Tribonacci(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n <= 2) {\n            return 1;\n        }\n        int p = 0, q = 0, r = 1, s = 1;\n        for (int i = 3; i <= n; ++i) {\n            p = q;\n            q = r;\n            r = s;\n            s = p + q + r;\n        }\n        return s;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar tribonacci = function(n) {\n    if (n === 0) {\n        return 0;\n    }\n    if (n <= 2) {\n        return 1;\n    }\n    let p = 0, q = 0, r = 1, s = 1;\n    for (let i = 3; i <= n; ++i) {\n        p = q;\n        q = r;\n        r = s;\n        s = p + q + r;\n    }\n    return s;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def tribonacci(self, n: int) -> int:\n        if n == 0:\n            return 0\n        if n <= 2:\n            return 1\n        \n        p = 0\n        q = r = 1\n        for i in range(3, n + 1):\n            s = p + q + r\n            p, q, r = q, r, s\n        return s\n```\n\n```go [sol1-Golang]\nfunc tribonacci(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n <= 2 {\n        return 1\n    }\n    p, q, r, s := 0, 0, 1, 1\n    for i := 3; i <= n; i++ {\n        p = q\n        q = r\n        r = s\n        s = p + q + r\n    }\n    return s\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int tribonacci(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n <= 2) {\n            return 1;\n        }\n        int p = 0, q = 0, r = 1, s = 1;\n        for (int i = 3; i <= n; ++i) {\n            p = q;\n            q = r;\n            r = s;\n            s = p + q + r;\n        }\n        return s;\n    }\n};\n```\n\n```C [sol1-C]\nint tribonacci(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n <= 2) {\n        return 1;\n    }\n    int p = 0, q = 0, r = 1, s = 1;\n    for (int i = 3; i <= n; ++i) {\n        p = q;\n        q = r;\n        r = s;\n        s = p + q + r;\n    }\n    return s;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：矩阵快速幂\n\n方法一的时间复杂度是 $O(n)$。使用矩阵快速幂的方法可以降低时间复杂度。\n\n首先我们可以构建这样一个递推关系：\n\n$$\n\\left[\n\\begin{matrix}\n    1 & 1 & 1 \\\\\n    1 & 0 & 0 \\\\\n    0 & 1 & 0\n\\end{matrix}\n\\right]\n\\left[\n\\begin{matrix}\n    T(n) \\\\\n    T(n - 1) \\\\\n    T(n - 2)\n\\end{matrix}\n\\right] = \n\\left[\n\\begin{matrix}\n    T(n) + T(n - 1) + T(n - 2) \\\\\n    T(n) \\\\\n    T(n - 1)\n\\end{matrix}\n\\right] = \n\\left[\n\\begin{matrix}\n    T(n + 1) \\\\\n    T(n) \\\\\n    T(n - 1)\n\\end{matrix}\n\\right]\n$$\n\n因此：\n\n$$\n\\left[\n\\begin{matrix}\n    T(n + 2) \\\\\n    T(n + 1) \\\\\n    T(n)\n\\end{matrix}\n\\right] = \n\\left[\n\\begin{matrix}\n    1 & 1 & 1 \\\\\n    1 & 0 & 0 \\\\\n    0 & 1 & 0\n\\end{matrix}\n\\right]^n\n\\left[\n\\begin{matrix}\n    T(2) \\\\\n    T(1) \\\\\n    T(0)\n\\end{matrix}\n\\right]\n$$\n\n令：\n\n$$\nM = \\left[\n\\begin{matrix}\n    1 & 1 & 1 \\\\\n    1 & 0 & 0 \\\\\n    0 & 1 & 0\n\\end{matrix}\n\\right]\n$$\n\n因此只要我们能快速计算矩阵 $M$ 的 $n$ 次幂，就可以得到 $T(n)$ 的值。如果直接求取 $M^n$，时间复杂度是 $O(n)$，可以定义矩阵乘法，然后用快速幂算法来加速这里 $M^n$ 的求取。\n\n```Java [sol2-Java]\nclass Solution {\n    public int tribonacci(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n <= 2) {\n            return 1;\n        }\n        int[][] q = {{1, 1, 1}, {1, 0, 0}, {0, 1, 0}};\n        int[][] res = pow(q, n);\n        return res[0][2];\n    }\n\n    public int[][] pow(int[][] a, int n) {\n        int[][] ret = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                ret = multiply(ret, a);\n            }\n            n >>= 1;\n            a = multiply(a, a);\n        }\n        return ret;\n    }\n\n    public int[][] multiply(int[][] a, int[][] b) {\n        int[][] c = new int[3][3];\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j] + a[i][2] * b[2][j];\n            }\n        }\n        return c;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int Tribonacci(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n <= 2) {\n            return 1;\n        }\n        int[,] q = {{1, 1, 1}, {1, 0, 0}, {0, 1, 0}};\n        int[,] res = Pow(q, n);\n        return res[0, 2];\n    }\n\n    public int[,] Pow(int[,] a, int n) {\n        int[,] ret = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                ret = Multiply(ret, a);\n            }\n            n >>= 1;\n            a = Multiply(a, a);\n        }\n        return ret;\n    }\n\n    public int[,] Multiply(int[,] a, int[,] b) {\n        int[,] c = new int[3, 3];\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                c[i, j] = a[i, 0] * b[0, j] + a[i, 1] * b[1, j] + a[i, 2] * b[2, j];\n            }\n        }\n        return c;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar tribonacci = function(n) {\n    if (n === 0) {\n        return 0;\n    }\n    if (n <= 2) {\n        return 1;\n    }\n    const q = [[1, 1, 1], [1, 0, 0], [0, 1, 0]];\n    const res = pow(q, n);\n    return res[0][2];\n};\n\nconst pow = (a, n) => {\n    let ret = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n    while (n > 0) {\n        if ((n & 1) === 1) {\n            ret = multiply(ret, a);\n        }\n        n >>= 1;\n        a = multiply(a, a);\n    }\n    return ret;\n}\n\nconst multiply = (a, b) => {\n    const c = new Array(3).fill(0).map(() => new Array(3).fill(0));\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j] + a[i][2] * b[2][j];\n        }\n    }\n    return c;\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def tribonacci(self, n: int) -> int:\n        if n == 0:\n            return 0\n        if n <= 2:\n            return 1\n        \n        def multiply(a: List[List[int]], b: List[List[int]]) -> List[List[int]]:\n            c = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n            for i in range(3):\n                for j in range(3):\n                    c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j] + a[i][2] * b[2][j]\n            return c\n\n        def matrix_pow(a: List[List[int]], n: int) -> List[List[int]]:\n            ret = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n            while n > 0:\n                if n & 1:\n                    ret = multiply(ret, a)\n                n >>= 1\n                a = multiply(a, a)\n            return ret\n        \n        q = [[1, 1, 1], [1, 0, 0], [0, 1, 0]]\n        res = matrix_pow(q, n)\n        return res[0][2]\n```\n\n```go [sol2-Golang]\ntype matrix [3][3]int\n\nfunc (a matrix) mul(b matrix) matrix {\n    c := matrix{}\n    for i, row := range a {\n        for j := range b[0] {\n            for k, v := range row {\n                c[i][j] += v * b[k][j]\n            }\n        }\n    }\n    return c\n}\n\nfunc (a matrix) pow(n int) matrix {\n    res := matrix{}\n    for i := range res {\n        res[i][i] = 1\n    }\n    for ; n > 0; n >>= 1 {\n        if n&1 > 0 {\n            res = res.mul(a)\n        }\n        a = a.mul(a)\n    }\n    return res\n}\n\nfunc tribonacci(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n <= 2 {\n        return 1\n    }\n    m := matrix{\n        {1, 1, 1},\n        {1, 0, 0},\n        {0, 1, 0},\n    }\n    res := m.pow(n)\n    return res[0][2]\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int tribonacci(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n <= 2) {\n            return 1;\n        }\n        vector<vector<long>> q = {{1, 1, 1}, {1, 0, 0}, {0, 1, 0}};\n        vector<vector<long>> res = pow(q, n);\n        return res[0][2];\n    }\n\n    vector<vector<long>> pow(vector<vector<long>>& a, long n) {\n        vector<vector<long>> ret = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                ret = multiply(ret, a);\n            }\n            n >>= 1;\n            a = multiply(a, a);\n        }\n        return ret;\n    }\n\n    vector<vector<long>> multiply(vector<vector<long>>& a, vector<vector<long>>& b) {\n        vector<vector<long>> c(3, vector<long>(3));\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j] + a[i][2] * b[2][j];\n            }\n        }\n        return c;\n    }\n};\n```\n\n```C [sol2-C]\nstruct Matrix {\n    long mat[3][3];\n};\n\nstruct Matrix multiply(struct Matrix* a, struct Matrix* b) {\n    struct Matrix c;\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            c.mat[i][j] = a->mat[i][0] * b->mat[0][j] + a->mat[i][1] * b->mat[1][j] + a->mat[i][2] * b->mat[2][j];\n        }\n    }\n    return c;\n};\n\nstruct Matrix qpow(struct Matrix* a, long n) {\n    struct Matrix ret = {{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}};\n    while (n > 0) {\n        if ((n & 1) == 1) {\n            ret = multiply(&ret, a);\n        }\n        n >>= 1;\n        *a = multiply(a, a);\n    }\n    return ret;\n}\n\nint tribonacci(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n <= 2) {\n        return 1;\n    }\n    struct Matrix q = {{{1, 1, 1}, {1, 0, 0}, {0, 1, 0}}};\n    struct Matrix res = qpow(&q, n);\n    return res.mat[0][2];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$。\n\n- 空间复杂度：$O(1)$。"
}