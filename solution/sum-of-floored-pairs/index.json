{
	"titleSlug": "sum-of-floored-pairs",
	"slug": "xiang-xia-qu-zheng-shu-dui-he-by-leetcod-u3eg",
	"url": "https://leetcode-cn.com/problems/sum-of-floored-pairs/solution/xiang-xia-qu-zheng-shu-dui-he-by-leetcod-u3eg/",
	"content": "#### 方法一：逆向思维\n\n**提示 $1$**\n\n一种常规的思路是枚举数组 $\\textit{nums}$ 中的两个元素 $x$ 和 $y$，计算 $\\lfloor \\dfrac{x}{y} \\rfloor$ 并求和。但这样做的时间复杂度为 $O(n^2)$，会超出时间限制。\n\n与其枚举 $x$ 和 $y$，我们不妨枚举 $y$ 和 $\\lfloor \\dfrac{x}{y} \\rfloor$。\n\n**提示 $2$**\n\n令 $d = \\lfloor \\dfrac{x}{y} \\rfloor$。如果我们枚举 $y$ 和 $d$，那么满足要求的 $x$ 应当在：\n\n$$\nd \\cdot y \\leq x < (d+1) \\cdot y\n$$\n\n的范围内。\n\n如果我们能统计出该范围内 $x$ 的个数，那么将其乘以 $d$ 再乘以 $y$ 出现的次数，将它们进行求和即可得到最终的答案。\n\n**思路与算法**\n\n我们首先用 $\\textit{cnt}[x]$ 统计元素 $x$ 在 $\\textit{nums}$ 中出现的次数。记 $\\textit{upper}$ 为数组 $\\textit{nums}$ 中元素的最大值。\n\n随后我们使用两重循环分别枚举 $y$ 和 $d$。其中枚举 $y$ 的循环的范围为 $[1, \\textit{upper}]$，枚举 $d$ 的循环的范围为 $[1, \\lfloor \\dfrac{\\textit{upper}}{y} \\rfloor]$。根据提示 $2$，满足要求的 $x$ 的数量为：\n\n$$\n\\sum_{x=d \\cdot y}^{\\min \\{ (d+1) \\cdot y-1, \\textit{upper} \\}} \\textit{cnt}[x]\n$$\n\n虽然 $x$ 的上界是 $(d+1)\\cdot y - 1$，但是它显然也不能超过 $\\textit{upper}$。由于这一段求和的下标范围 $x$ 是连续的，因此我们可以预处理出数组 $\\textit{cnt}$ 的前缀和，记：\n\n$$\n\\textit{pre}[i] = \\sum_{x=1}^i \\textit{cnt}[i]\n$$\n\n那么上式可以变为：\n\n$$\n\\textit{pre}\\big[\\min \\{ (d+1) \\cdot y-1, \\textit{upper} \\}\\big] - \\textit{pre}[d \\cdot y - 1]\n$$\n\n就可以在 $O(1)$ 的时间求出上式的值。\n\n这样一来，将上式乘以 $\\textit{cnt}[y] \\cdot d$，再随着两重循环进行求和即可得到最终的答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int mod = 1000000007;\n    \n    using LL = long long;\n\npublic:\n    int sumOfFlooredPairs(vector<int>& nums) {\n        // 元素最大值\n        int upper = *max_element(nums.begin(), nums.end());\n        vector<int> cnt(upper + 1);\n        for (int num: nums) {\n            ++cnt[num];\n        }\n        // 预处理前缀和\n        vector<int> pre(upper + 1);\n        for (int i = 1; i <= upper; ++i) {\n            pre[i] = pre[i - 1] + cnt[i];\n        }\n        \n        LL ans = 0;\n        for (int y = 1; y <= upper; ++y) {\n            // 一个小优化，如果数组中没有 y 可以跳过\n            if (cnt[y]) {\n                for (int d = 1; d * y <= upper; ++d) {\n                    ans += (LL)cnt[y] * d * (pre[min((d + 1) * y - 1, upper)] - pre[d * y - 1]);\n                }\n            }\n        }\n        return ans % mod;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sumOfFlooredPairs(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        \n        # 元素最大值\n        upper = max(nums)\n        cnt = [0] * (upper + 1)\n        for num in nums:\n            cnt[num] += 1\n        # 预处理前缀和\n        pre = [0] * (upper + 1)\n        for i in range(1, upper + 1):\n            pre[i] = pre[i - 1] + cnt[i]\n        \n        ans = 0\n        for y in range(1, upper + 1):\n            # 一个小优化，如果数组中没有 y 可以跳过\n            if cnt[y]:\n                d = 1\n                while d * y <= upper:\n                    ans += cnt[y] * d * (pre[min((d + 1) * y - 1, upper)] - pre[d * y - 1])\n                    d += 1\n        return ans % mod\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + C\\log C)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度，$C$ 是数组 $\\textit{nums}$ 中的元素最大值，在本题中 $C \\leq 2\\cdot 10^5$。\n\n    - 计算数组 $\\textit{cnt}$ 以及预处理前缀和数组 $\\textit{pre}$ 需要的时间为 $O(n + C)$；\n\n    - 在使用两重循环枚举 $y$ 和 $d$ 时，循环执行的次数为：\n\n        $$\n        \\sum_{y=1}^\\textit{C} \\sum_{d=1}^{\\lfloor C/y \\rfloor} 1 = O\\left(\\sum_{y=1}^\\textit{C} \\frac{C}{y} \\right)\n        $$\n\n        为调和级数，其趋近于 $O(C \\log C)$。\n    \n    因此总时间复杂度为 $O(n + C\\log C)$。\n\n- 空间复杂度：$O(C)$，即为数组 $\\textit{cnt}$ 和 $\\textit{pre}$ 需要使用的空间。"
}