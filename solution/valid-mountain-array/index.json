{
	"titleSlug": "valid-mountain-array",
	"slug": "you-xiao-de-shan-mai-shu-zu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/valid-mountain-array/solution/you-xiao-de-shan-mai-shu-zu-by-leetcode-solution/",
	"content": "#### 方法一：线性扫描\n\n按题意模拟即可。我们从数组的最左侧开始向右扫描，直到找到第一个不满足 $\\textit{arr}[i] < \\textit{arr}[i + 1]$ 的下标 $i$，那么 $i$ 就是这个数组的最高点的下标。如果 $i = 0$ 或者不存在这样的 $i$（即整个数组都是单调递增的），那么就返回 $\\text{false}$。否则从 $i$ 开始继续向右扫描，判断接下来的的下标 $j$ 是否都满足 $\\textit{arr}[j] > \\textit{arr}[j + 1]$，若都满足就返回 $\\text{true}$，否则返回 $\\text{false}$。\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean validMountainArray(int[] arr) {\n        int N = arr.length;\n        int i = 0;\n\n        // 递增扫描\n        while (i + 1 < N && arr[i] < arr[i + 1]) {\n            i++;\n        }\n\n        // 最高点不能是数组的第一个位置或最后一个位置\n        if (i == 0 || i == N - 1) {\n            return false;\n        }\n\n        // 递减扫描\n        while (i + 1 < N && arr[i] > arr[i + 1]) {\n            i++;\n        }\n\n        return i == N - 1;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        N = len(arr)\n        i = 0\n\n        # 递增扫描\n        while i + 1 < N and arr[i] < arr[i + 1]:\n            i += 1\n\n        # 最高点不能是数组的第一个位置或最后一个位置\n        if i == 0 or i == N - 1:\n            return False\n\n        # 递减扫描\n        while i + 1 < N and arr[i] > arr[i + 1]:\n            i += 1\n\n        return i == N - 1\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool validMountainArray(vector<int>& arr) {\n        int N = arr.size();\n        int i = 0;\n\n        // 递增扫描\n        while (i + 1 < N && arr[i] < arr[i + 1]) {\n            i++;\n        }\n\n        // 最高点不能是数组的第一个位置或最后一个位置\n        if (i == 0 || i == N - 1) {\n            return false;\n        }\n\n        // 递减扫描\n        while (i + 1 < N && arr[i] > arr[i + 1]) {\n            i++;\n        }\n\n        return i == N - 1;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar validMountainArray = function(arr) {\n    const N = arr.length;\n    let i = 0;\n\n    // 递增扫描\n    while (i + 1 < N && arr[i] < arr[i + 1]) {\n        i++;\n    }\n\n    // 最高点不能是数组的第一个位置或最后一个位置\n    if (i === 0 || i === N - 1) {\n        return false;\n    }\n\n    // 递减扫描\n    while (i + 1 < N && arr[i] > arr[i + 1]) {\n        i++;\n    }\n\n    return i === N - 1;\n};\n```\n\n```Golang [sol1-Golang]\nfunc validMountainArray(arr []int) bool {\n    i, n := 0, len(arr)\n\n    // 递增扫描\n    for ; i+1 < n && arr[i] < arr[i+1]; i++ {\n    }\n\n    // 最高点不能是数组的第一个位置或最后一个位置\n    if i == 0 || i == n-1 {\n        return false\n    }\n\n    // 递减扫描\n    for ; i+1 < n && arr[i] > arr[i+1]; i++ {\n    }\n\n    return i == n-1\n}\n```\n\n```C [sol1-C]\nbool validMountainArray(int* arr, int arrSize) {\n    int i = 0;\n\n    // 递增扫描\n    while (i + 1 < arrSize && arr[i] < arr[i + 1]) {\n        i++;\n    }\n\n    // 最高点不能是数组的第一个位置或最后一个位置\n    if (i == 0 || i == arrSize - 1) {\n        return false;\n    }\n\n    // 递减扫描\n    while (i + 1 < arrSize && arr[i] > arr[i + 1]) {\n        i++;\n    }\n\n    return i == arrSize - 1;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是数组 $\\textit{arr}$ 的长度。\n\n* 空间复杂度：$O(1)$。"
}