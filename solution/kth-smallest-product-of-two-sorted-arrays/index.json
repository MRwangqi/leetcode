{
	"titleSlug": "kth-smallest-product-of-two-sorted-arrays",
	"slug": "yi-ti-san-jie-shuang-zhi-zhen-jie-bu-den-sqsu",
	"url": "https://leetcode-cn.com/problems/kth-smallest-product-of-two-sorted-arrays/solution/yi-ti-san-jie-shuang-zhi-zhen-jie-bu-den-sqsu/",
	"content": "### 解法框架：二分查找\r\n\r\n做过类似题目（[668. 乘法表中第k小的数](https://leetcode-cn.com/problems/kth-smallest-number-in-multiplication-table/) 或者 [719. 找出第 k 小的距离对](https://leetcode-cn.com/problems/find-k-th-smallest-pair-distance/)）的不难发现这题的解法是二分查找。首先令 $f(x) =$ 满足 $nums_1[i] * nums_2[j] \\le x$ 的数对个数，显然 $f(x)$ 是关于 $x$ 递增的，因此可以进行二分查找，找到第一个满足 $f(x) \\ge k$ 的 $x$ 即可。\r\n\r\n下面的给出三种求 $f(x)$ 的解法。\r\n\r\n### 解法一：双指针 — 分类讨论\r\n在类似题目 [668. 乘法表中第k小的数](https://leetcode-cn.com/problems/kth-smallest-number-in-multiplication-table/) 和 [719. 找出第 k 小的距离对](https://leetcode-cn.com/problems/find-k-th-smallest-pair-distance/) 中，经典的解法是双指针，将单次 check 的时间复杂度降低到了 $O(n)$。那么这个题目呢？\r\n\r\n首先，我们把 $nums_1$ 分成 $neg_1$ 和 $pos_1$，分别表示 $nums_1$ 的 **负数部分** 和 **非负数部分**；\r\n把 $nums_2$ 分成 $neg_2$ 和 $pos_2$，分别表示 $nums_2$ 的 **负数部分** 和 **非负数部分**。\r\n\r\n一图胜千言，下面用一幅图来解释双指针遍历的各种边界条件。\r\n- **情形一：**$nums_1[i] \\ge 0$， $nums_2[j] \\ge 0$，分别对应 $pos_1$ 和 $pos_2$；\r\n\r\n- **情形二：**$nums_1[i] < 0$， $nums_2[j] \\ge 0$，分别对应 $neg_1$ 和 $pos_2$；\r\n\r\n- **情形三：**$nums_1[i] \\ge 0$， $nums_2[j] < 0$，分别对应 $pos_1$ 和 $neg_2$；\r\n\r\n- **情形四：**$nums_1[i] < 0$， $nums_2[j] < 0$，分别对应 $neg_1$ 和 $neg_2$。\r\n\r\n![image.png](https://pic.leetcode-cn.com/1634479959-JGNSre-image.png)\r\n\r\n**代码**\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    long long kthSmallestProduct(vector<int>& nums1, vector<int>& nums2, long long k) {\r\n        vector<int> neg1, pos1, neg2, pos2;\r\n        for(int v : nums1) (v < 0)? neg1.push_back(v) : pos1.push_back(v);\r\n        for(int v : nums2) (v < 0)? neg2.push_back(v) : pos2.push_back(v);\r\n\r\n        long long l = -1e10, r = 1e10;\r\n        while(l < r) {\r\n            long long m = (l + r) >> 1;\r\n            long long cur = 0;\r\n            for(int i = 0, j = (int)pos2.size() - 1; i < pos1.size(); ++i) {\r\n                while(j >= 0 && 1ll * pos1[i] * pos2[j] > m) --j;\r\n                cur += j + 1;\r\n            }\r\n            for(int i = 0, j = 0; i < neg1.size(); ++i) {\r\n                while(j < pos2.size() && 1ll * neg1[i] * pos2[j] > m) ++j;\r\n                cur += (int)pos2.size() - j;\r\n            }\r\n            for(int i = 0, j = 0; i < pos1.size(); ++i) {\r\n                while(j < neg2.size() && 1ll * pos1[i] * neg2[j] <= m) ++j;\r\n                cur += j;\r\n            }\r\n            for(int i = 0, j = (int)neg2.size() - 1; i < neg1.size(); ++i) {\r\n                while(j >= 0 && 1ll * neg1[i] * neg2[j] <= m) --j;\r\n                cur += (int)neg2.size() - 1 - j;\r\n            }\r\n            if(cur < k) l = m + 1;\r\n            else r = m;\r\n        }\r\n\r\n        return l;\r\n    }\r\n};\r\n```\r\n\r\n**如果不想思考那么多复杂的边界条件，那么下面这种双指针方法的思考量较小，可以一试。**\r\n\r\n### 解法一点五：双指针 — 等价转换\r\n上面的分类讨论之所以麻烦，关键在于数字有正有负，需要分 4 种情况讨论。**如果我们可以将 4 种情况都转化为一种情况呢？**\r\n答案是可以。\r\n- 如果 $nums_1[i] < 0, nums_2[j] \\ge 0$，则 $nums_1[i] \\times nums_2[j] \\le x$ \r\n等价于 $(-nums_1[i]) \\times nums_2[j] \\ge x$\r\n- 如果 $nums_1[i] \\ge 0, nums_2[j] < 0$，则 $nums_1[i] \\times nums_2[j] \\le x$ \r\n等价于 $nums_1[i] \\times (-nums_2[j]) \\ge x$\r\n- 如果 $nums_1[i] \\ge 0, nums_2[j] < 0$，则 $nums_1[i] \\times nums_2[j] \\le x$ \r\n等价于 $(-nums_1[i]) \\times (-nums_2[j]) \\le x$\r\n\r\n这样我们就将有负数的情形二、三、四转化为全是非负整数的情形一了。**注意，由于负数取反后，大小关系发生了逆转，所以需要将数组反转，以保持递增的顺序。**\r\n\r\n**代码**\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    long long calc(vector<int>& a, vector<int>& b, long long x, bool greater) {\r\n        long long res = 0;\r\n        if(!a.size() || !b.size()) return 0;\r\n        for(int i = 0, j = (int)b.size() - 1, k = (int)b.size() - 1; i < a.size(); ++i) {\r\n            while(j >= 0 && 1ll * a[i] * b[j] > x) --j;\r\n            while(k >= 0 && 1ll * a[i] * b[k] >= x) --k;\r\n            if(greater) res += (int)b.size() - 1 - k;\r\n            else res += j + 1;\r\n        }\r\n        return res;\r\n    }\r\n    long long kthSmallestProduct(vector<int>& nums1, vector<int>& nums2, long long k) {\r\n        vector<int> neg1, pos1, neg2, pos2;\r\n        for(int v : nums1) (v < 0)? neg1.push_back(-v) : pos1.push_back(v);\r\n        for(int v : nums2) (v < 0)? neg2.push_back(-v) : pos2.push_back(v);\r\n        reverse(neg1.begin(), neg1.end());\r\n        reverse(neg2.begin(), neg2.end());\r\n\r\n        long long l = -1e10, r = 1e10;\r\n        while(l < r) {\r\n            long long m = (l + r) >> 1, cur = 0;\r\n            cur += calc(pos1, pos2, m, false);\r\n            cur += calc(neg1, pos2, -m, true);\r\n            cur += calc(pos1, neg2, -m, true);\r\n            cur += calc(neg1, neg2, m, false);\r\n            if(cur < k) l = m + 1;\r\n            else r = m;\r\n        }\r\n\r\n        return l;\r\n    }\r\n};\r\n```\r\n\r\n### 解法二：解不等式 + 嵌套二分查找\r\n\r\n我们可以首先在 $nums_1$ 枚举数字 $a$，然后找出 $nums_2$ 中满足 $ab \\le x$ 的数字的 $b$ 的个数即可。\r\n\r\n如果 $a > 0$，则不等式 $ab \\le x$ 成立的条件是 $\\displaystyle{b \\le \\left\\lfloor \\frac{x}{a} \\right\\rfloor}$（向下取整）；\r\n\r\n如果 $a < 0$，则不等式 $ab \\le x$ 成立的条件是 $\\displaystyle{b \\ge \\left\\lceil \\frac{x}{a} \\right\\rceil}$（向上取整）；\r\n\r\n$a = 0$ 的情况比较特殊，此时若 $x \\ge 0$，则 $ab \\le x$ 恒成立；否则 $ab \\le x$ 恒不成立。\r\n\r\n由于 $nums_2$ 已经排好序，故我们对于 $nums_1$ 中的每个 $a$，只需要在 $nums_2$ 中二分查找小于等于（或大于等于）$x$ 的数量即可。\r\n\r\n**细节 + 小知识**\r\n\r\n如何实现向下取整呢？直接用整数除法 $\\texttt{a/b}$ 不行吗？不幸的是，实际上 C/C++ 的除法实现是 **向 0 取整** 的。例如 $\\texttt{-1 / 2}$ 的值是 $0$，而不是 $-1$。因此需要稍微改变一下思路。\r\n思路一：采用浮点数 + floor 库函数实现向下取整；顺带用 ceil 库函数实现向上取整。\r\n```c++\r\nlong long floorDiv(long long x, long long y) {\r\n    return floor(x / (double)y + 1e-7);\r\n}\r\nlong long ceilDiv(long long x, long long y) {\r\n    return ceil(x / (double)y - 1e-7);\r\n}\r\n```\r\n思路二：避免浮点数运算的实现：\r\n```c++\r\nlong long floorDiv(long long x, long long y) {\r\n    if(y < 0) x = -x, y = -y;\r\n    if(x < 0) return (x - (y - 1)) / y;\r\n    return x / y;\r\n}\r\nlong long ceilDiv(long long x, long long y) {\r\n    if(y < 0) x = -x, y = -y;\r\n    if(x < 0) return x / y;\r\n    return (x + (y - 1)) / y;\r\n}\r\n```\r\n\r\n**最终代码**\r\n```\r\nclass Solution {\r\npublic:\r\n    long long floorDiv(long long x, long long y) {\r\n        if(y < 0) x = -x, y = -y;\r\n        if(x < 0) return (x - (y - 1)) / y;\r\n        return x / y;\r\n    }\r\n    long long ceilDiv(long long x, long long y) {\r\n        if(y < 0) x = -x, y = -y;\r\n        if(x < 0) return x / y;\r\n        return (x + (y - 1)) / y;\r\n    }\r\n    long long kthSmallestProduct(vector<int>& nums1, vector<int>& nums2, long long k) {\r\n        long long l = -1e10, r = 1e10;\r\n        while(l < r) {\r\n            long long m = (l + r) >> 1;\r\n            long long cur = 0;\r\n            for(int v : nums1) {\r\n                if(v < 0) {\r\n                    cur += nums2.end() - lower_bound(nums2.begin(), nums2.end(), ceilDiv(m, v));\r\n                } else if(v == 0) {\r\n                    cur += (m >= 0)? nums2.size() : 0;\r\n                } else {\r\n                    cur += upper_bound(nums2.begin(), nums2.end(), floorDiv(m, v)) - nums2.begin();\r\n                }\r\n            }\r\n            if(cur < k) l = m + 1;\r\n            else r = m;\r\n        }\r\n        return l;\r\n    }\r\n};\r\n```\r\n\r\n### 解法三：前缀和\r\n解法二中，我们也可以不用嵌套二分查找。注意到 $-10^5 \\le nums_1[i], nums_2[i] \\le 10^5$，我们完全可以开辟足够大的空间来统计 $nums_2$ 中各个数字的数量，然后采用前缀和的方式来统计 $nums_2$ 中 $\\le x$ 的数字数目，这样可以免去二分查找。\r\n\r\n**代码**\r\n```c++\r\nclass Solution {\r\npublic:\r\n    long long sums[200005] = {0};\r\n    long long floorDiv(long long x, long long y) {\r\n        if(y < 0) x = -x, y = -y;\r\n        if(x < 0) return (x - (y - 1)) / y;\r\n        return x / y;\r\n    }\r\n    long long ceilDiv(long long x, long long y) {\r\n        if(y < 0) x = -x, y = -y;\r\n        if(x < 0) return x / y;\r\n        return (x + (y - 1)) / y;\r\n    }\r\n    long long kthSmallestProduct(vector<int>& nums1, vector<int>& nums2, long long k) {\r\n        for(int v : nums2) sums[v + 100000]++;\r\n        for(int i = 1; i <= 200000; ++i) sums[i] += sums[i-1];\r\n\r\n        auto sum = [&](long long x) -> long long {\r\n            if(x < -100000) return 0;\r\n            if(x > 100000) return sums[200000];\r\n            return sums[x + 100000];\r\n        };\r\n\r\n        long long l = -1e10, r = 1e10;\r\n        while(l < r) {\r\n            long long m = (l + r) >> 1;\r\n            \r\n            long long cnt = 0;\r\n            for(int v : nums1) {\r\n                if(v < 0) cnt += sum(100000) - sum(ceilDiv(m, v) - 1);\r\n                if(v == 0 && m >= 0) cnt += nums2.size();\r\n                if(v > 0) cnt += sum(floorDiv(m, v));\r\n            }\r\n\r\n            if(cnt < k) l = m + 1;\r\n            else r = m;\r\n        }\r\n\r\n        return l;\r\n    }\r\n};\r\n```"
}