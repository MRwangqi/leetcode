{
	"titleSlug": "path-with-maximum-probability",
	"slug": "gai-lu-zui-da-de-lu-jing-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/path-with-maximum-probability/solution/gai-lu-zui-da-de-lu-jing-by-leetcode-solution/",
	"content": "#### 写在前面\n\n本题需要用到单源最短路径算法 `Dijkstra`，现在让我们回顾该算法，其主要思想是贪心，具体地说：\n\n> 将所有节点分成两类：已确定从起点到当前点的最短路长度的节点，以及未确定从起点到当前点的最短路长度的节点（下面简称「未确定节点」和「已确定节点」）。\n>\n> 每次从「未确定节点」中取一个与起点距离最短的点，将它归类为「已确定节点」，并用它「更新」从起点到其他所有「未确定节点」的距离。直到所有点都被归类为「已确定节点」。\n>\n> 用节点 $A$「更新」节点 $B$ 的意思是，用起点到节点 $A$ 的最短路长度加上从节点 $A$ 到节点 $B$ 的边的长度，去比较起点到节点 $B$ 的最短路长度，如果前者小于后者，就用前者更新后者。这种操作也被叫做「松弛」。\n\n这里暗含的信息是：每次选择「未确定节点」时，起点到它的最短路径的长度可以被确定。\n\n可以这样理解，因为我们已经用了每一个「已确定节点」更新过了当前节点，无需再次更新（因为一个点不能多次到达）。而当前节点已经是所有「未确定节点」中与起点距离最短的点，不可能被其它「未确定节点」更新。所以当前节点可以被归类为「已确定节点」。\n\n> 给定的图必须是正边权图，否则「未确定节点」有可能更新当前节点，这也是 `Dijkstra` 不能处理负权图的原因。\n\n#### 方法一：Dijkstra 算法\n\n**思路及算法**\n\n本题是一种变种的最短路径问题。特殊点在于，我们选取的每一条边对答案的贡献是以相乘的形式，而不是相加的形式。\n\n为什么当前图能使用 `Dijkstra` 算法呢？因为该图的边权都是位于区间 $[0,1]$ 的小数（概率），即沿着一条边移动无法让边权积增大，只会减小或不变。而我们要求的是最大边权积，这符合了 `Dijkstra` 算法的思想和要求。严谨的证明见「正确性证明」部分。\n\n普通的 `Dijkstra` 算法是通过枚举来寻找「未确定节点」中与起点距离最近的点。在实际实现中，我们可以使用优先队列优化这一过程的时间复杂度。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\n        vector<vector<pair<double, int>>> graph(n);\n        for (int i = 0; i < edges.size(); i++) {\n            auto& e = edges[i];\n            graph[e[0]].emplace_back(succProb[i], e[1]);\n            graph[e[1]].emplace_back(succProb[i], e[0]);\n        }\n\n        priority_queue<pair<double, int>> que;\n        vector<double> prob(n, 0);\n\n        que.emplace(1, start);\n        prob[start] = 1;\n        while (!que.empty()) {\n            auto [pr, node] = que.top();\n            que.pop();\n            if (pr < prob[node]) {\n                continue;\n            }\n            for (auto& [prNext, nodeNext] : graph[node]) {\n                if (prob[nodeNext] < prob[node] * prNext) {\n                    prob[nodeNext] = prob[node] * prNext;\n                    que.emplace(prob[nodeNext], nodeNext);\n                }\n            }\n        }\n        return prob[end];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {\n        List<List<Pair>> graph = new ArrayList<List<Pair>>();\n        for (int i = 0; i < n; i++) {\n            graph.add(new ArrayList<Pair>());\n        }\n        for (int i = 0; i < edges.length; i++) {\n            int[] e = edges[i];\n            graph.get(e[0]).add(new Pair(succProb[i], e[1]));\n            graph.get(e[1]).add(new Pair(succProb[i], e[0]));\n        }\n\n        PriorityQueue<Pair> que = new PriorityQueue<Pair>();\n        double[] prob = new double[n];\n\n        que.offer(new Pair(1, start));\n        prob[start] = 1;\n        while (!que.isEmpty()) {\n            Pair pair = que.poll();\n            double pr = pair.probability;\n            int node = pair.node;\n            if (pr < prob[node]) {\n                continue;\n            }\n            for (Pair pairNext : graph.get(node)) {\n                double prNext = pairNext.probability;\n                int nodeNext = pairNext.node;\n                if (prob[nodeNext] < prob[node] * prNext) {\n                    prob[nodeNext] = prob[node] * prNext;\n                    que.offer(new Pair(prob[nodeNext], nodeNext));\n                }\n            }\n        }\n        return prob[end];\n    }\n}\n\nclass Pair implements Comparable<Pair> {\n    double probability;\n    int node;\n\n    public Pair(double probability, int node) {\n        this.probability = probability;\n        this.node = node;\n    }\n\n    public int compareTo(Pair pair2) {\n        if (this.probability == pair2.probability) {\n            return this.node - pair2.node;\n        } else {\n            return this.probability - pair2.probability > 0 ? -1 : 1;\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start: int, end: int) -> float:\n        graph = collections.defaultdict(list)\n        for i, (x, y) in enumerate(edges):\n            graph[x].append((succProb[i], y))\n            graph[y].append((succProb[i], x))\n        \n        que = [(-1.0, start)]\n        prob = [0.0] * n\n        prob[start] = 1.0\n\n        while que:\n            pr, node = heapq.heappop(que)\n            pr = -pr\n            if pr < prob[node]:\n                continue\n            for prNext, nodeNext in graph[node]:\n                if prob[nodeNext] < prob[node] * prNext:\n                    prob[nodeNext] = prob[node] * prNext\n                    heapq.heappush(que, (-prob[nodeNext], nodeNext))\n        \n        return prob[end]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\log m)$，其中 $m$ 是图中边的数量。如果不使用任何优化，时间复杂度是 $O(mn)$，其中 $n$ 是图中点的数量。使用不同的数据结构优化，将会表现出不同的时间复杂度：\n  - 优先队列（例如 `C++` 中的 `priority_queue`）优化：$O(m \\log m)$；\n  - 手写堆优化：$O(m \\log n)$；\n  - 线段树优化：$O(m \\log n)$；\n  - 斐波那契堆优化：$O(n \\log n + m)$。\n\n-  空间复杂度：$O(m)$，其中 $m$ 是图中边的数量。\n\n**正确性证明**\n\n对原图 $G$ 中的每条边权取对数，这样就得到了一个边权在 $(-\\infty ,0]$ 中的图 $G'$，图 $G$ 中「从起点到终点**成功概率最大**」的路径对应了图 $G'$ 中「从起点到终点**边权和最大**」的路径。将图 $G'$ 的边权取相反数得到图 $G''$，它的边权在 $[0, \\infty)$ 中，这样图 $G'$ 中「从起点到终点**边权和最大**」的路径变成了图 $G''$ 中「从起点到终点**边权和最小**」的路径。由于图 $G''$ 中没有负权边，因此可以使用 `Dijkstra` 算法找出「从起点到终点**边权和最小**」的路径，这样也就找出了图 $G$ 中「从起点到终点**成功概率最大**」的路径。"
}