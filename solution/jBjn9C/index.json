{
	"titleSlug": "jBjn9C",
	"slug": "shu-ju-liu-de-di-k-da-shu-zhi-by-leetcod-11n3",
	"url": "https://leetcode-cn.com/problems/jBjn9C/solution/shu-ju-liu-de-di-k-da-shu-zhi-by-leetcod-11n3/",
	"content": "#### 方法一：优先队列\n\n我们可以使用一个大小为 $k$ 的优先队列来存储前 $k$ 大的元素，其中优先队列的队头为队列中最小的元素，也就是第 $k$ 大的元素。\n\n在单次插入的操作中，我们首先将元素 $\\textit{val}$ 加入到优先队列中。如果此时优先队列的大小大于 $k$，我们需要将优先队列的队头元素弹出，以保证优先队列的大小为 $k$。\n\n```C++ [sol1-C++]\nclass KthLargest {\npublic:\n    priority_queue<int, vector<int>, greater<int>> q;\n    int k;\n    KthLargest(int k, vector<int>& nums) {\n        this->k = k;\n        for (auto& x: nums) {\n            add(x);\n        }\n    }\n    \n    int add(int val) {\n        q.push(val);\n        if (q.size() > k) {\n            q.pop();\n        }\n        return q.top();\n    }\n};\n```\n\n```Java [sol1-Java]\nclass KthLargest {\n    PriorityQueue<Integer> pq;\n    int k;\n\n    public KthLargest(int k, int[] nums) {\n        this.k = k;\n        pq = new PriorityQueue<Integer>();\n        for (int x : nums) {\n            add(x);\n        }\n    }\n    \n    public int add(int val) {\n        pq.offer(val);\n        if (pq.size() > k) {\n            pq.poll();\n        }\n        return pq.peek();\n    }\n}\n```\n\n```go [sol1-Golang]\ntype KthLargest struct {\n    sort.IntSlice\n    k int\n}\n\nfunc Constructor(k int, nums []int) KthLargest {\n    kl := KthLargest{k: k}\n    for _, val := range nums {\n        kl.Add(val)\n    }\n    return kl\n}\n\nfunc (kl *KthLargest) Push(v interface{}) {\n    kl.IntSlice = append(kl.IntSlice, v.(int))\n}\n\nfunc (kl *KthLargest) Pop() interface{} {\n    a := kl.IntSlice\n    v := a[len(a)-1]\n    kl.IntSlice = a[:len(a)-1]\n    return v\n}\n\nfunc (kl *KthLargest) Add(val int) int {\n    heap.Push(kl, val)\n    if kl.Len() > kl.k {\n        heap.Pop(kl)\n    }\n    return kl.IntSlice[0]\n}\n```\n\n```C [sol1-C]\nstruct Heap {\n    int* heap;\n    int heapSize;\n    bool (*cmp)(int, int);\n};\n\nvoid init(struct Heap* obj, int n, bool (*cmp)(int, int)) {\n    obj->heap = malloc(sizeof(int) * (n + 1));\n    obj->heapSize = 0;\n    obj->cmp = cmp;\n}\n\nbool cmp(int a, int b) {\n    return a > b;\n}\n\nvoid swap(int* a, int* b) {\n    int tmp = *a;\n    *a = *b, *b = tmp;\n}\n\nvoid push(struct Heap* obj, int x) {\n    int p = ++(obj->heapSize), q = p >> 1;\n    obj->heap[p] = x;\n    while (q) {\n        if (!obj->cmp(obj->heap[q], obj->heap[p])) {\n            break;\n        }\n        swap(&(obj->heap[q]), &(obj->heap[p]));\n        p = q, q = p >> 1;\n    }\n}\n\nvoid pop(struct Heap* obj) {\n    swap(&(obj->heap[1]), &(obj->heap[(obj->heapSize)--]));\n    int p = 1, q = p << 1;\n    while (q <= obj->heapSize) {\n        if (q + 1 <= obj->heapSize) {\n            if (obj->cmp(obj->heap[q], obj->heap[q + 1])) {\n                q++;\n            }\n        }\n        if (!obj->cmp(obj->heap[p], obj->heap[q])) {\n            break;\n        }\n        swap(&(obj->heap[q]), &(obj->heap[p]));\n        p = q, q = p << 1;\n    }\n}\n\nint top(struct Heap* obj) {\n    return obj->heap[1];\n}\n\ntypedef struct {\n    struct Heap* heap;\n    int maxSize;\n} KthLargest;\n\nKthLargest* kthLargestCreate(int k, int* nums, int numsSize) {\n    KthLargest* ret = malloc(sizeof(KthLargest));\n    ret->heap = malloc(sizeof(struct Heap));\n    init(ret->heap, k + 1, cmp);\n    ret->maxSize = k;\n    for (int i = 0; i < numsSize; i++) {\n        kthLargestAdd(ret, nums[i]);\n    }\n    return ret;\n}\n\nint kthLargestAdd(KthLargest* obj, int val) {\n    push(obj->heap, val);\n    if (obj->heap->heapSize > obj->maxSize) {\n        pop(obj->heap);\n    }\n    return top(obj->heap);\n}\n\nvoid kthLargestFree(KthLargest* obj) {\n    free(obj->heap->heap);\n    free(obj->heap);\n    free(obj);\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar KthLargest = function(k, nums) {\n    this.k = k;\n    this.heap = new MinHeap();\n    for (const x of nums) {\n        this.add(x);\n    }\n};\n\nKthLargest.prototype.add = function(val) {\n    this.heap.offer(val);\n    if (this.heap.size() > this.k) {\n        this.heap.poll();\n    }\n    return this.heap.peek();\n};\n\nclass MinHeap {\n    constructor(data = []) {\n        this.data = data;\n        this.comparator = (a, b) => a - b;\n        this.heapify();\n    }\n\n    heapify() {\n        if (this.size() < 2) return;\n        for (let i = 1; i < this.size(); i++) {\n        this.bubbleUp(i);\n        }\n    }\n\n    peek() {\n        if (this.size() === 0) return null;\n        return this.data[0];\n    }\n\n    offer(value) {\n        this.data.push(value);\n        this.bubbleUp(this.size() - 1);\n    }\n\n    poll() {\n        if (this.size() === 0) {\n            return null;\n        }\n        const result = this.data[0];\n        const last = this.data.pop();\n        if (this.size() !== 0) {\n            this.data[0] = last;\n            this.bubbleDown(0);\n        }\n        return result;\n    }\n\n    bubbleUp(index) {\n        while (index > 0) {\n            const parentIndex = (index - 1) >> 1;\n            if (this.comparator(this.data[index], this.data[parentIndex]) < 0) {\n                this.swap(index, parentIndex);\n                index = parentIndex;\n            } else {\n                break;\n            }\n        }\n    }\n\n    bubbleDown(index) {\n        const lastIndex = this.size() - 1;\n        while (true) {\n            const leftIndex = index * 2 + 1;\n            const rightIndex = index * 2 + 2;\n            let findIndex = index;\n            if (\n                leftIndex <= lastIndex &&\n                this.comparator(this.data[leftIndex], this.data[findIndex]) < 0\n            ) {\n                findIndex = leftIndex;\n            }\n            if (\n                rightIndex <= lastIndex &&\n                this.comparator(this.data[rightIndex], this.data[findIndex]) < 0\n            ) {\n                findIndex = rightIndex;\n            }\n            if (index !== findIndex) {\n                this.swap(index, findIndex);\n                index = findIndex;\n            } else {\n                break;\n            }\n        }\n    }\n\n  swap(index1, index2) {\n        [this.data[index1], this.data[index2]] = [this.data[index2], this.data[index1]];\n    }\n\n    size() {\n        return this.data.length;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：\n\n  - 初始化时间复杂度为：$O(n \\log k)$ ，其中 $n$ 为初始化时 $\\textit{nums}$ 的长度；\n\n  - 单次插入时间复杂度为：$O(\\log k)$。\n\n- 空间复杂度：$O(k)$。需要使用优先队列存储前 $k$ 大的元素。"
}