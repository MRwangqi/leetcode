{
	"titleSlug": "merge-two-binary-trees",
	"slug": "he-bing-er-cha-shu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/merge-two-binary-trees/solution/he-bing-er-cha-shu-by-leetcode-solution/",
	"content": "#### 方法一：深度优先搜索\n\n可以使用深度优先搜索合并两个二叉树。从根节点开始同时遍历两个二叉树，并将对应的节点进行合并。\n\n两个二叉树的对应节点可能存在以下三种情况，对于每种情况使用不同的合并方式。\n\n- 如果两个二叉树的对应节点都为空，则合并后的二叉树的对应节点也为空；\n\n- 如果两个二叉树的对应节点只有一个为空，则合并后的二叉树的对应节点为其中的非空节点；\n\n- 如果两个二叉树的对应节点都不为空，则合并后的二叉树的对应节点的值为两个二叉树的对应节点的值之和，此时需要显性合并两个节点。\n\n对一个节点进行合并之后，还要对该节点的左右子树分别进行合并。这是一个递归的过程。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/617/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/617/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/617/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/617/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/617/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/617/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/617/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/617/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/617/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/617/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/617/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/617/12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/617/13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/617/14.png),![ppt15](https://assets.leetcode-cn.com/solution-static/617/15.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\n        if (t1 == null) {\n            return t2;\n        }\n        if (t2 == null) {\n            return t1;\n        }\n        TreeNode merged = new TreeNode(t1.val + t2.val);\n        merged.left = mergeTrees(t1.left, t2.left);\n        merged.right = mergeTrees(t1.right, t2.right);\n        return merged;\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n        if (t1 == nullptr) {\n            return t2;\n        }\n        if (t2 == nullptr) {\n            return t1;\n        }\n        auto merged = new TreeNode(t1->val + t2->val);\n        merged->left = mergeTrees(t1->left, t2->left);\n        merged->right = mergeTrees(t1->right, t2->right);\n        return merged;\n    }\n};\n```\n\n```Golang [sol1-Golang]\nfunc mergeTrees(t1, t2 *TreeNode) *TreeNode {\n    if t1 == nil {\n        return t2\n    }\n    if t2 == nil {\n        return t1\n    }\n    t1.Val += t2.Val\n    t1.Left = mergeTrees(t1.Left, t2.Left)\n    t1.Right = mergeTrees(t1.Right, t2.Right)\n    return t1\n}\n```\n\n```C [sol1-C]\nstruct TreeNode* mergeTrees(struct TreeNode* t1, struct TreeNode* t2) {\n    if (t1 == NULL) {\n        return t2;\n    }\n    if (t2 == NULL) {\n        return t1;\n    }\n    struct TreeNode* merged = malloc(sizeof(struct TreeNode));\n    merged->val = t1->val + t2->val;\n    merged->left = mergeTrees(t1->left, t2->left);\n    merged->right = mergeTrees(t1->right, t2->right);\n    return merged;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\n        if not t1:\n            return t2\n        if not t2:\n            return t1\n        \n        merged = TreeNode(t1.val + t2.val)\n        merged.left = self.mergeTrees(t1.left, t2.left)\n        merged.right = self.mergeTrees(t1.right, t2.right)\n        return merged\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\min(m,n))$，其中 $m$ 和 $n$ 分别是两个二叉树的节点个数。对两个二叉树同时进行深度优先搜索，只有当两个二叉树中的对应节点都不为空时才会对该节点进行显性合并操作，因此被访问到的节点数不会超过较小的二叉树的节点数。\n\n- 空间复杂度：$O(\\min(m,n))$，其中 $m$ 和 $n$ 分别是两个二叉树的节点个数。空间复杂度取决于递归调用的层数，递归调用的层数不会超过较小的二叉树的最大高度，最坏情况下，二叉树的高度等于节点数。\n\n#### 方法二：广度优先搜索\n\n也可以使用广度优先搜索合并两个二叉树。首先判断两个二叉树是否为空，如果两个二叉树都为空，则合并后的二叉树也为空，如果只有一个二叉树为空，则合并后的二叉树为另一个非空的二叉树。\n\n如果两个二叉树都不为空，则首先计算合并后的根节点的值，然后从合并后的二叉树与两个原始二叉树的根节点开始广度优先搜索，从根节点开始同时遍历每个二叉树，并将对应的节点进行合并。\n\n使用三个队列分别存储合并后的二叉树的节点以及两个原始二叉树的节点。初始时将每个二叉树的根节点分别加入相应的队列。每次从每个队列中取出一个节点，判断两个原始二叉树的节点的左右子节点是否为空。如果两个原始二叉树的当前节点中至少有一个节点的左子节点不为空，则合并后的二叉树的对应节点的左子节点也不为空。对于右子节点同理。\n\n如果合并后的二叉树的左子节点不为空，则需要根据两个原始二叉树的左子节点计算合并后的二叉树的左子节点以及整个左子树。考虑以下两种情况：\n\n- 如果两个原始二叉树的左子节点都不为空，则合并后的二叉树的左子节点的值为两个原始二叉树的左子节点的值之和，在创建合并后的二叉树的左子节点之后，将每个二叉树中的左子节点都加入相应的队列；\n\n- 如果两个原始二叉树的左子节点有一个为空，即有一个原始二叉树的左子树为空，则合并后的二叉树的左子树即为另一个原始二叉树的左子树，此时也不需要对非空左子树继续遍历，因此不需要将左子节点加入队列。\n\n对于右子节点和右子树，处理方法与左子节点和左子树相同。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/617/2_1.png),![fig2](https://assets.leetcode-cn.com/solution-static/617/2_2.png),![fig3](https://assets.leetcode-cn.com/solution-static/617/2_3.png),![fig4](https://assets.leetcode-cn.com/solution-static/617/2_4.png),![fig5](https://assets.leetcode-cn.com/solution-static/617/2_5.png),![fig6](https://assets.leetcode-cn.com/solution-static/617/2_6.png),![fig7](https://assets.leetcode-cn.com/solution-static/617/2_7.png),![fig8](https://assets.leetcode-cn.com/solution-static/617/2_8.png),![fig9](https://assets.leetcode-cn.com/solution-static/617/2_9.png),![fig10](https://assets.leetcode-cn.com/solution-static/617/2_10.png),![fig11](https://assets.leetcode-cn.com/solution-static/617/2_11.png),![fig12](https://assets.leetcode-cn.com/solution-static/617/2_12.png),![fig13](https://assets.leetcode-cn.com/solution-static/617/2_13.png)>\n\n```Java [sol2-Java]\nclass Solution {\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\n        if (t1 == null) {\n            return t2;\n        }\n        if (t2 == null) {\n            return t1;\n        }\n        TreeNode merged = new TreeNode(t1.val + t2.val);\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        Queue<TreeNode> queue1 = new LinkedList<TreeNode>();\n        Queue<TreeNode> queue2 = new LinkedList<TreeNode>();\n        queue.offer(merged);\n        queue1.offer(t1);\n        queue2.offer(t2);\n        while (!queue1.isEmpty() && !queue2.isEmpty()) {\n            TreeNode node = queue.poll(), node1 = queue1.poll(), node2 = queue2.poll();\n            TreeNode left1 = node1.left, left2 = node2.left, right1 = node1.right, right2 = node2.right;\n            if (left1 != null || left2 != null) {\n                if (left1 != null && left2 != null) {\n                    TreeNode left = new TreeNode(left1.val + left2.val);\n                    node.left = left;\n                    queue.offer(left);\n                    queue1.offer(left1);\n                    queue2.offer(left2);\n                } else if (left1 != null) {\n                    node.left = left1;\n                } else if (left2 != null) {\n                    node.left = left2;\n                }\n            }\n            if (right1 != null || right2 != null) {\n                if (right1 != null && right2 != null) {\n                    TreeNode right = new TreeNode(right1.val + right2.val);\n                    node.right = right;\n                    queue.offer(right);\n                    queue1.offer(right1);\n                    queue2.offer(right2);\n                } else if (right1 != null) {\n                    node.right = right1;\n                } else {\n                    node.right = right2;\n                }\n            }\n        }\n        return merged;\n    }\n}\n```\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\n        if (t1 == nullptr) {\n            return t2;\n        }\n        if (t2 == nullptr) {\n            return t1;\n        }\n        auto merged = new TreeNode(t1->val + t2->val);\n        auto q = queue<TreeNode*>();\n        auto queue1 = queue<TreeNode*>();\n        auto queue2 = queue<TreeNode*>();\n        q.push(merged);\n        queue1.push(t1);\n        queue2.push(t2);\n        while (!queue1.empty() && !queue2.empty()) {\n            auto node = q.front(), node1 = queue1.front(), node2 = queue2.front();\n            q.pop();\n            queue1.pop();\n            queue2.pop();\n            auto left1 = node1->left, left2 = node2->left, right1 = node1->right, right2 = node2->right;\n            if (left1 != nullptr || left2 != nullptr) {\n                if (left1 != nullptr && left2 != nullptr) {\n                    auto left = new TreeNode(left1->val + left2->val);\n                    node->left = left;\n                    q.push(left);\n                    queue1.push(left1);\n                    queue2.push(left2);\n                } else if (left1 != nullptr) {\n                    node->left = left1;\n                } else if (left2 != nullptr) {\n                    node->left = left2;\n                }\n            }\n            if (right1 != nullptr || right2 != nullptr) {\n                if (right1 != nullptr && right2 != nullptr) {\n                    auto right = new TreeNode(right1->val + right2->val);\n                    node->right = right;\n                    q.push(right);\n                    queue1.push(right1);\n                    queue2.push(right2);\n                } else if (right1 != nullptr) {\n                    node->right = right1;\n                } else {\n                    node->right = right2;\n                }\n            }\n        }\n        return merged;\n    }\n};\n```\n\n```Golang [sol2-Golang]\nfunc mergeTrees(t1, t2 *TreeNode) *TreeNode {\n    if t1 == nil {\n        return t2\n    }\n    if t2 == nil {\n        return t1\n    }\n    merged := &TreeNode{Val: t1.Val + t2.Val}\n    queue := []*TreeNode{merged}\n    queue1 := []*TreeNode{t1}\n    queue2 := []*TreeNode{t2}\n    for len(queue1) > 0 && len(queue2) > 0 {\n        node := queue[0]\n        queue = queue[1:]\n        node1 := queue1[0]\n        queue1 = queue1[1:]\n        node2 := queue2[0]\n        queue2 = queue2[1:]\n        left1, right1 := node1.Left, node1.Right\n        left2, right2 := node2.Left, node2.Right\n        if left1 != nil || left2 != nil {\n            if left1 != nil && left2 != nil {\n                left := &TreeNode{Val: left1.Val + left2.Val}\n                node.Left = left\n                queue = append(queue, left)\n                queue1 = append(queue1, left1)\n                queue2 = append(queue2, left2)\n            } else if left1 != nil {\n                node.Left = left1\n            } else { // left2 != nil\n                node.Left = left2\n            }\n        }\n        if right1 != nil || right2 != nil {\n            if right1 != nil && right2 != nil {\n                right := &TreeNode{Val: right1.Val + right2.Val}\n                node.Right = right\n                queue = append(queue, right)\n                queue1 = append(queue1, right1)\n                queue2 = append(queue2, right2)\n            } else if right1 != nil {\n                node.Right = right1\n            } else { // right2 != nil\n                node.Right = right2\n            }\n        }\n    }\n    return merged\n}\n```\n\n```C [sol2-C]\nstruct TreeNode* mergeTrees(struct TreeNode* t1, struct TreeNode* t2) {\n    if (t1 == NULL) {\n        return t2;\n    }\n    if (t2 == NULL) {\n        return t1;\n    }\n    struct TreeNode* merged = malloc(sizeof(struct TreeNode));\n    merged->val = t1->val + t2->val;\n    struct TreeNode** q = malloc(sizeof(struct TreeNode*) * 2001);\n    struct TreeNode** queue1 = malloc(sizeof(struct TreeNode*) * 2001);\n    struct TreeNode** queue2 = malloc(sizeof(struct TreeNode*) * 2001);\n    int qleft = 0, qright = 0;\n    q[qright] = merged;\n    queue1[qright] = t1;\n    queue2[qright] = t2;\n    qright++;\n    while (qleft < qright) {\n        struct TreeNode *node = q[qleft], *node1 = queue1[qleft], *node2 = queue2[qleft];\n        qleft++;\n        struct TreeNode *left1 = node1->left, *left2 = node2->left, *right1 = node1->right, *right2 = node2->right;\n        if (left1 != NULL || left2 != NULL) {\n            if (left1 != NULL && left2 != NULL) {\n                struct TreeNode* left = malloc(sizeof(struct TreeNode));\n                left->val = left1->val + left2->val;\n                node->left = left;\n                q[qright] = left;\n                queue1[qright] = left1;\n                queue2[qright] = left2;\n                qright++;\n            } else if (left1 != NULL) {\n                node->left = left1;\n            } else if (left2 != NULL) {\n                node->left = left2;\n            }\n        } else {\n            node->left = NULL;\n        }\n        if (right1 != NULL || right2 != NULL) {\n            if (right1 != NULL && right2 != NULL) {\n                struct TreeNode* right = malloc(sizeof(struct TreeNode));\n                right->val = right1->val + right2->val;\n                node->right = right;\n                q[qright] = right;\n                queue1[qright] = right1;\n                queue2[qright] = right2;\n                qright++;\n            } else if (right1 != NULL) {\n                node->right = right1;\n            } else {\n                node->right = right2;\n            }\n        } else {\n            node->right = NULL;\n        }\n    }\n    return merged;\n}\n```\n\n```Python [sol2-Python3]\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\n        if not t1:\n            return t2\n        if not t2:\n            return t1\n        \n        merged = TreeNode(t1.val + t2.val)\n        queue = collections.deque([merged])\n        queue1 = collections.deque([t1])\n        queue2 = collections.deque([t2])\n\n        while queue1 and queue2:\n            node = queue.popleft()\n            node1 = queue1.popleft()\n            node2 = queue2.popleft()\n            left1, right1 = node1.left, node1.right\n            left2, right2 = node2.left, node2.right\n            if left1 or left2:\n                if left1 and left2:\n                    left = TreeNode(left1.val + left2.val)\n                    node.left = left\n                    queue.append(left)\n                    queue1.append(left1)\n                    queue2.append(left2)\n                elif left1:\n                    node.left = left1\n                elif left2:\n                    node.left = left2\n            if right1 or right2:\n                if right1 and right2:\n                    right = TreeNode(right1.val + right2.val)\n                    node.right = right\n                    queue.append(right)\n                    queue1.append(right1)\n                    queue2.append(right2)\n                elif right1:\n                    node.right = right1\n                elif right2:\n                    node.right = right2\n        \n        return merged\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\min(m,n))$，其中 $m$ 和 $n$ 分别是两个二叉树的节点个数。对两个二叉树同时进行广度优先搜索，只有当两个二叉树中的对应节点都不为空时才会访问到该节点，因此被访问到的节点数不会超过较小的二叉树的节点数。\n\n- 空间复杂度：$O(\\min(m,n))$，其中 $m$ 和 $n$ 分别是两个二叉树的节点个数。空间复杂度取决于队列中的元素个数，队列中的元素个数不会超过较小的二叉树的节点数。"
}