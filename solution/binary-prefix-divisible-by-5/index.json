{
	"titleSlug": "binary-prefix-divisible-by-5",
	"slug": "ke-bei-5-zheng-chu-de-er-jin-zhi-qian-zh-asih",
	"url": "https://leetcode-cn.com/problems/binary-prefix-divisible-by-5/solution/ke-bei-5-zheng-chu-de-er-jin-zhi-qian-zh-asih/",
	"content": "#### 方法一：遍历\n\n令 $\\textit{num}_i$ 为数组 $\\textit{nums}$ 从下标 $0$ 到下标 $i$ 的前缀表示的二进制数，则有 $\\textit{num}_0=\\textit{nums}[0]$。当 $i>0$ 时，有 $\\textit{num}_i=\\textit{num}_{i-1} \\times 2+\\textit{nums}[i]$。令 $n$ 为数组 $\\textit{nums}$ 的长度，则对于 $0 \\le i<n$，可以依次计算每个 $\\textit{num}_i$ 的值。对于每个 $\\textit{num}_i$ 的值，判断其是否可以被 $5$ 整除，即可得到答案。\n\n考虑到数组 $\\textit{nums}$ 可能很长，如果每次都保留 $\\textit{num}_i$ 的值，则可能导致溢出。由于只需要知道每个 $\\textit{num}_i$ 是否可以被 $5$ 整除，因此在计算过程中只需要保留余数即可。\n\n令 $\\textit{remain}_i$ 表示计算到下标 $i$ 时的除以 $5$ 的余数，则有 $\\textit{remain}_0=\\textit{nums}[0]$（显然 $\\textit{nums}[0]$ 一定小于 $5$），当 $i>0$ 时，有 $\\textit{remain}_i=(\\textit{remain}_{i-1} \\times 2+\\textit{nums}[i])\\bmod 5$，判断每个 $\\textit{remain}_i$ 是否为 $0$ 即可。由于 $\\textit{remain}_i$ 一定小于 $5$，因此不会溢出。\n\n如何证明判断 $\\textit{remain}_i$ 是否为 $0$ 可以得到正确的结果？可以通过数学归纳法证明。\n\n当 $i=0$ 时，由于 $\\textit{num}_0=\\textit{nums}[0]<5$，因此 $\\textit{remain}_0=\\textit{num}_0$，$\\textit{remain}_0=\\textit{num}_0\\bmod 5$ 成立。\n\n当 $i>0$ 时，假设 $\\textit{remain}_{i-1}=\\textit{num}_{i-1}\\bmod 5$ 成立，考虑 $\\textit{num}_i\\bmod 5$ 和 $\\textit{remain}_i$ 的值：\n\n$$\n\\begin{aligned}\n\\textit{num}_i\\bmod 5=&(\\textit{num}_{i-1} \\times 2+\\textit{nums}[i])\\bmod 5 \\\\\n=&(\\textit{num}_{i-1} \\times 2)\\bmod 5+\\textit{nums}[i]\\bmod 5 \\\\\n\\\\\n\\textit{remain}_i=&(\\textit{remain}_{i-1} \\times 2+\\textit{nums}[i])\\bmod 5 \\\\\n=&(\\textit{num}_{i-1}\\bmod 5 \\times 2+\\textit{nums}[i])\\bmod 5 \\\\\n=&(\\textit{num}_{i-1}\\bmod 5 \\times 2)\\bmod 5+\\textit{nums}[i]\\bmod 5 \\\\\n=&(\\textit{num}_{i-1} \\times 2)\\bmod 5+\\textit{nums}[i]\\bmod 5\n\\end{aligned}\n$$\n\n因此有 $\\textit{remain}_i=\\textit{num}_i\\bmod 5$ 成立。\n\n由此可得，对任意 $0 \\le i<n$，都有 $\\textit{remain}_i=\\textit{num}_i\\bmod 5$，因此计算 $\\textit{remain}_i$ 即可得到正确的结果。\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Boolean> prefixesDivBy5(int[] nums) {\n        List<Boolean> answer = new ArrayList<Boolean>();\n        int prefix = 0;\n        int length = nums.length;\n        for (int i = 0; i < length; i++) {\n            prefix = ((prefix << 1) + nums[i]) % 5;\n            answer.add(prefix == 0);\n        }\n        return answer;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<bool> prefixesDivBy5(vector<int>& nums) {\n        vector<bool> answer;\n        int prefix = 0;\n        int length = nums.size();\n        for (int i = 0; i < length; i++) {\n            prefix = ((prefix << 1) + nums[i]) % 5;\n            answer.emplace_back(prefix == 0);\n        }\n        return answer;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar prefixesDivBy5 = function(nums) {\n    const answer = [];\n    let prefix = 0;\n    const length = nums.length;\n    for (let i = 0; i < length; i++) {\n        prefix = ((prefix << 1) + nums[i]) % 5;\n        answer.push(prefix === 0);\n    }\n    return answer;\n};\n```\n\n```Python [sol1-Python]\nclass Solution:\n    def prefixesDivBy5(self, nums: List[int]) -> List[bool]:\n        answer = list()\n        prefix = 0\n        for num in nums:\n            prefix = ((prefix << 1) + num) % 5\n            answer.append(prefix == 0)\n        return answer\n```\n\n```go [sol1-Golang]\nfunc prefixesDivBy5(nums []int) []bool {\n    ans := make([]bool, len(nums))\n    x := 0\n    for i, v := range nums {\n        x = (x<<1 | v) % 5\n        ans[i] = x == 0\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nbool* prefixesDivBy5(int* nums, int numsSize, int* returnSize) {\n    *returnSize = numsSize;\n    bool* answer = malloc(sizeof(bool) * numsSize);\n    int prefix = 0;\n    for (int i = 0; i < numsSize; i++) {\n        prefix = ((prefix << 1) + nums[i]) % 5;\n        answer[i] = prefix == 0;\n    }\n    return answer;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。需要遍历数组一次并计算前缀。\n\n- 空间复杂度：$O(1)$。除了返回值以外，额外使用的空间为常数。"
}