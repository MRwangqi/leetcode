{
	"titleSlug": "slowest-key",
	"slug": "an-jian-chi-xu-shi-jian-zui-chang-de-jia-yn7u",
	"url": "https://leetcode-cn.com/problems/slowest-key/solution/an-jian-chi-xu-shi-jian-zui-chang-de-jia-yn7u/",
	"content": "#### 方法一：一次遍历\n\n对于 $0 \\le i < n$，第 $i$ 个按下的键是 $\\textit{keysPressed}[i]$，按键持续时间是 $\\textit{releaseTimes}[i] - \\textit{releaseTimes}[i - 1]$，这里规定 $\\textit{releaseTimes}[-1] = 0$，因为第 $0$ 个键在时间 $0$ 被按下。\n\n为了得到按键持续时间最长的键，需要遍历 $\\textit{keysPressed}$ 和 $\\textit{releaseTimes}$，计算每个按键持续的时间并记录按键持续的最长时间和对应的按键。\n\n为了避免处理下标越界问题，首先记录第 $0$ 个按键，按键持续时间是 $\\textit{releaseTimes}[0]$，按下的键是 $\\textit{keysPressed}[0]$，将其记为按键持续的最长时间和对应的按键。然后遍历其余的按键，对于每个按键，当以下两个条件之一成立时，使用当前按键更新按键持续的最长时间和对应的按键：\n\n- 当前按键持续时间大于按键持续的最长时间；\n\n- 当前按键持续时间等于按键持续的最长时间且当前按键大于按键持续时间最长的键。\n\n遍历结束之后，即可得到按键持续时间最长的键。\n\n```Java [sol1-Java]\nclass Solution {\n    public char slowestKey(int[] releaseTimes, String keysPressed) {\n        int n = releaseTimes.length;\n        char ans = keysPressed.charAt(0);\n        int maxTime = releaseTimes[0];\n        for (int i = 1; i < n; i++) {\n            char key = keysPressed.charAt(i);\n            int time = releaseTimes[i] - releaseTimes[i - 1];\n            if (time > maxTime || (time == maxTime && key > ans)) {\n                ans = key;\n                maxTime = time;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public char SlowestKey(int[] releaseTimes, string keysPressed) {\n        int n = releaseTimes.Length;\n        char ans = keysPressed[0];\n        int maxTime = releaseTimes[0];\n        for (int i = 1; i < n; i++) {\n            char key = keysPressed[i];\n            int time = releaseTimes[i] - releaseTimes[i - 1];\n            if (time > maxTime || (time == maxTime && key > ans)) {\n                ans = key;\n                maxTime = time;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    char slowestKey(vector<int>& releaseTimes, string keysPressed) {\n        int n = releaseTimes.size();\n        char ans = keysPressed[0];\n        int maxTime = releaseTimes[0];\n        for (int i = 1; i < n; i++) {\n            char key = keysPressed[i];\n            int time = releaseTimes[i] - releaseTimes[i - 1];\n            if (time > maxTime || (time == maxTime && key > ans)) {\n                ans = key;\n                maxTime = time;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```C [sol1-C]\nchar slowestKey(int* releaseTimes, int releaseTimesSize, char * keysPressed){\n    char ans = keysPressed[0];\n    int maxTime = releaseTimes[0];\n    for (int i = 1; i < releaseTimesSize; i++) {\n        char key = keysPressed[i];\n        int time = releaseTimes[i] - releaseTimes[i - 1];\n        if (time > maxTime || (time == maxTime && key > ans)) {\n            ans = key;\n            maxTime = time;\n        }\n    }\n    return ans;\n}\n```\n\n```go [sol1-Golang]\nfunc slowestKey(releaseTimes []int, keysPressed string) byte {\n    ans := keysPressed[0]\n    maxTime := releaseTimes[0]\n    for i := 1; i < len(keysPressed); i++ {\n        key := keysPressed[i]\n        time := releaseTimes[i] - releaseTimes[i-1]\n        if time > maxTime || time == maxTime && key > ans {\n            ans = key\n            maxTime = time\n        }\n    }\n    return ans\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def slowestKey(self, releaseTimes: List[int], keysPressed: str) -> str:\n        ans = keysPressed[0]\n        maxTime = releaseTimes[0]\n        for i in range(1, len(keysPressed)):\n            key = keysPressed[i]\n            time = releaseTimes[i] - releaseTimes[i - 1]\n            if time > maxTime or time == maxTime and key > ans:\n                ans = key\n                maxTime = time\n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar slowestKey = function(releaseTimes, keysPressed) {\n    const n = releaseTimes.length;\n    let ans = keysPressed[0];\n    let maxTime = releaseTimes[0];\n    for (let i = 1; i < n; i++) {\n        const key = keysPressed[i];\n        const time = releaseTimes[i] - releaseTimes[i - 1];\n        if (time > maxTime || (time === maxTime && key > ans)) {\n            ans = key;\n            maxTime = time;\n        }\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{releaseTimes}$ 和字符串 $\\textit{keysPressed}$ 的长度。需要同时遍历数组和字符串一次。\n\n- 空间复杂度：$O(1)$。"
}