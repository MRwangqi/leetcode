{
	"titleSlug": "find-the-distance-value-between-two-arrays",
	"slug": "liang-ge-shu-zu-jian-de-ju-chi-zhi-by-leetcode-sol",
	"url": "https://leetcode-cn.com/problems/find-the-distance-value-between-two-arrays/solution/liang-ge-shu-zu-jian-de-ju-chi-zhi-by-leetcode-sol/",
	"content": "#### 方法一：模拟\n\n**思路**\n\n按照题意模拟：对于 `arr1` 数组中的每一个元素 $x_i$，枚举数组 `arr2` 中的每一个元素 $y_j$，检查是否对于每一个 $y_j$ 都有 $|x_i - y_j| > d$，如果是，就将答案增加 $1$。\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {\n        int cnt = 0;\n        for (auto &x: arr1) {\n            bool ok = true;\n            for (auto &y: arr2) {\n                ok &= (abs(x - y) > d);\n            }\n            cnt += ok;\n        }\n        return cnt;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {\n        int cnt = 0;\n        for (int x : arr1) {\n            boolean ok = true;\n            for (int y : arr2) {\n                ok &= Math.abs(x - y) > d;\n            }\n            cnt += ok ? 1 : 0;\n        }\n        return cnt;\n    }\n}\n```\n\n```python [sol1-Python3]\nclass Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        cnt = 0\n        for x in arr1:\n            if all(abs(x - y) > d for y in arr2):\n                cnt += 1\n        return cnt\n```\n\n**复杂度分析**\n\n假设 `arr1` 中元素个数为 $n$，`arr2` 中元素个数为 $m$。 \n\n- 时间复杂度：从代码可以看出这里的渐进时间复杂度是 $O(n \\times m)$。\n\n- 空间复杂度：这里没有使用任何的辅助空间，故渐进空间复杂度为 $O(1)$。\n\n\n#### 方法二：二分查找\n\n**思路**\n\n在上一种方法中，要知道是否每一个 $y_j$ 是不是满足 $|x_i - y_j| > d$，我们枚举了所有 $y_j$。实际上我们只要找到大于等于 $x_i$ 的第一个 $y_j$ 和小于 $x$ 的第一个 $y_j$，看看它们满不满足这个性质就可以了。\n\n我们可以对 `arr2` 进行排序，然后对于 `arr1` 中的每个元素 $x_i$，在 `arr2` 中二分寻找上述的两个 $y_j$，如果这两个元素满足性质，则所有元素都满足性质，将答案增加 $1$。\n\n代码如下。\n\n**代码**\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {\n        sort(arr2.begin(), arr2.end());\n        int cnt = 0;\n        for (auto &x: arr1) {\n            unsigned p = lower_bound(arr2.begin(), arr2.end(), x) - arr2.begin();\n            bool ok = true;\n            if (p < arr2.size()) {\n                ok &= (arr2[p] - x > d);\n            }\n            if (p - 1 >= 0 && p - 1 <= arr2.size()) {\n                ok &= (x - arr2[p - 1] > d);\n            }\n            cnt += ok;\n        }\n        return cnt;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {\n        Arrays.sort(arr2);\n        int cnt = 0;\n        for (int x : arr1) {\n            int p = binarySearch(arr2, x);\n            boolean ok = true;\n            if (p < arr2.length) {\n                ok &= arr2[p] - x > d;\n            }\n            if (p - 1 >= 0 && p - 1 <= arr2.length) {\n                ok &= x - arr2[p - 1] > d;\n            }\n            cnt += ok ? 1 : 0;\n        }\n        return cnt;\n    }\n\n    public int binarySearch(int[] arr, int target) {\n        int low = 0, high = arr.length - 1;\n        if (arr[high] < target) {\n            return high + 1;\n        }\n        while (low < high) {\n            int mid = (high - low) / 2 + low;\n            if (arr[mid] < target) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n```\n\n```python [sol2-Python3]\nclass Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr2.sort()\n        cnt = 0\n        for x in arr1:\n            p = bisect.bisect_left(arr2, x)\n            if p == len(arr2) or abs(x - arr2[p]) > d:\n                if p == 0 or abs(x - arr2[p - 1]) > d:\n                    cnt += 1\n        return cnt\n```\n\n**复杂度分析**\n\n假设 `arr1` 中元素个数为 $n$，`arr2` 中元素个数为 $m$。 \n\n- 时间复杂度：给 `arr2` 排序的时间代价是 $O(m \\log m)$，对于 `arr1` 中的每个元素都在 `arr2` 中二分的时间代价是 $O(n \\log m)$，故渐进时间复杂度为 $O((n + m) \\log m)$。\n\n- 空间复杂度：这里没有使用任何的辅助空间，故渐进空间复杂度为 $O(1)$。"
}