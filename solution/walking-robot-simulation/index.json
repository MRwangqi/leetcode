{
	"titleSlug": "walking-robot-simulation",
	"slug": "mo-ni-xing-zou-ji-qi-ren-by-leetcode",
	"url": "https://leetcode-cn.com/problems/walking-robot-simulation/solution/mo-ni-xing-zou-ji-qi-ren-by-leetcode/",
	"content": "#### 方法：情景模拟\n\n**思路**\n\n我们将一步步模拟机器人的路径。由于最多只有 90000 步，这足以通过给定的输入限制。\n\n**算法**\n\n我们将会存储机器人的位置和方向。如果机器人得到转弯的指令，我们就更新方向；否则就沿给定的方向走指定的步数。\n\n必须注意使用 `集合 Set` 作为对障碍物使用的数据结构，以便我们可以有效地检查下一步是否受阻。如果不这样做，我们检查 `该点是障碍点吗` 可能会慢大约 10000 倍。\n\n在某些语言中，我们需要将每个障碍物的坐标编码为 `长整型 long` 数据，以便它可以放入 `集合 Set` 数据结构中。或者，我们也可以将坐标编码为 `字符串 string`。\n\n```cpp [K9UpZpS5-C++]\nclass Solution {\npublic:\n    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {\n        int dx[4] = {0, 1, 0, -1};\n        int dy[4] = {1, 0, -1, 0};\n        int x = 0, y = 0, di = 0;\n\n        unordered_set<pair<int, int>> obstacleSet;\n        for (vector<int> obstacle: obstacles)\n            obstacleSet.insert(make_pair(obstacle[0], obstacle[1]));\n\n        int ans = 0;\n        for (int cmd: commands) {\n            if (cmd == -2)\n                di = (di + 3) % 4;\n            else if (cmd == -1)\n                di = (di + 1) % 4;\n            else {\n                for (int k = 0; k < cmd; ++k) {\n                    int nx = x + dx[di];\n                    int ny = y + dy[di];\n                    if (obstacleSet.find(make_pair(nx, ny)) == obstacleSet.end()) {\n                        x = nx;\n                        y = ny;\n                        ans = max(ans, x*x + y*y);\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n```\n```java [K9UpZpS5-Java]\nclass Solution {\n    public int robotSim(int[] commands, int[][] obstacles) {\n        int[] dx = new int[]{0, 1, 0, -1};\n        int[] dy = new int[]{1, 0, -1, 0};\n        int x = 0, y = 0, di = 0;\n\n        // Encode obstacles (x, y) as (x+30000) * (2^16) + (y+30000)\n        Set<Long> obstacleSet = new HashSet();\n        for (int[] obstacle: obstacles) {\n            long ox = (long) obstacle[0] + 30000;\n            long oy = (long) obstacle[1] + 30000;\n            obstacleSet.add((ox << 16) + oy);\n        }\n\n        int ans = 0;\n        for (int cmd: commands) {\n            if (cmd == -2)  //left\n                di = (di + 3) % 4;\n            else if (cmd == -1)  //right\n                di = (di + 1) % 4;\n            else {\n                for (int k = 0; k < cmd; ++k) {\n                    int nx = x + dx[di];\n                    int ny = y + dy[di];\n                    long code = (((long) nx + 30000) << 16) + ((long) ny + 30000);\n                    if (!obstacleSet.contains(code)) {\n                        x = nx;\n                        y = ny;\n                        ans = Math.max(ans, x*x + y*y);\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n}\n```\n```python [K9UpZpS5-Python]\nclass Solution(object):\n    def robotSim(self, commands, obstacles):\n        dx = [0, 1, 0, -1]\n        dy = [1, 0, -1, 0]\n        x = y = di = 0\n        obstacleSet = set(map(tuple, obstacles))\n        ans = 0\n\n        for cmd in commands:\n            if cmd == -2:  #left\n                di = (di - 1) % 4\n            elif cmd == -1:  #right\n                di = (di + 1) % 4\n            else:\n                for k in xrange(cmd):\n                    if (x+dx[di], y+dy[di]) not in obstacleSet:\n                        x += dx[di]\n                        y += dy[di]\n                        ans = max(ans, x*x + y*y)\n\n        return ans\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N + K)$，其中 $N, K$ 分别是 `commands` 和 `obstacles` 的长度。\n* 空间复杂度：$O(K)$，用于存储 `obstacleSet` 而使用的空间。"
}