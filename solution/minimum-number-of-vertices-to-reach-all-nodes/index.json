{
	"titleSlug": "minimum-number-of-vertices-to-reach-all-nodes",
	"slug": "ke-yi-dao-da-suo-you-dian-de-zui-shao-dian-shu-m-2",
	"url": "https://leetcode-cn.com/problems/minimum-number-of-vertices-to-reach-all-nodes/solution/ke-yi-dao-da-suo-you-dian-de-zui-shao-dian-shu-m-2/",
	"content": "#### 方法一：寻找入度为零的节点\n\n对于任意节点 $x$，如果其入度不为零，则一定存在节点 $y$ 指向节点 $x$，从节点 $y$ 出发即可到达节点 $y$ 和节点 $x$，因此如果从节点 $y$ 出发，节点 $x$ 和节点 $y$ 都可以到达，且从节点 $y$ 出发可以到达的节点比从节点 $x$ 出发可以到达的节点更多。\n\n由于给定的图是**有向无环图**，基于上述分析可知，对于任意入度不为零的节点 $x$，一定存在另一个节点 $z$，使得从节点 $z$ 出发可以到达节点 $x$。为了获得最小的点集，只有入度为零的节点才应该加入最小的点集。\n\n+ 由于入度为零的节点必须从其自身出发才能到达该节点，从别的节点出发都无法到达该节点，因此最小的点集必须包含所有入度为零的节点。\n+ 因为入度不为零的点总可以由某个入度为零的点到达，所以这些点不包括在最小的合法点集当中。\n+ 因此，我们得到「最小的点集使得从这些点出发能到达图中所有点」就是入度为零的所有点的集合。\n\n如何判断一个节点的入度是否为零呢？在有向图中，一个节点的入度等于以该节点为终点的有向边的数量，因此一个节点的入度为零，当且仅当对于任何有向边，该节点都不是有向边的终点。\n\n因此，可以遍历所有的边，使用集合存储所有有向边的终点，集合中的所有节点即为入度不为零的节点，剩下的所有节点即为入度为零的节点。\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {\n        List<Integer> ans = new ArrayList<Integer>();\n        Set<Integer> endSet = new HashSet<Integer>();\n        for (List<Integer> edge : edges) {\n            endSet.add(edge.get(1));\n        }\n        for (int i = 0; i < n; i++) {\n            if (!endSet.contains(i)) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& edges) {\n        auto ans = vector<int>();\n        auto endSet = unordered_set<int>();\n        for (auto edge : edges) {\n            endSet.insert(edge[1]);\n        }\n        for (int i = 0; i < n; i++) {\n            if (endSet.find(i) == endSet.end()) {\n                ans.push_back(i);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -> List[int]:\n        endSet = set(y for x, y in edges)\n        ans = [i for i in range(n) if i not in endSet]\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m+n)$，其中 $m$ 是图中的边数量，$n$ 是图中的节点数量。需要遍历所有的边获得入度不为零的节点，然后遍历所有的节点保留入度为零的节点。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是图中的节点数量。需要使用一个集合存储入度不为零的节点，集合中的节点数不会超过 $n$。"
}