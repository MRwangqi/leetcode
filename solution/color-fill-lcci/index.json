{
	"titleSlug": "color-fill-lcci",
	"slug": "yan-se-tian-chong-by-leetcode-solution-ejum",
	"url": "https://leetcode-cn.com/problems/color-fill-lcci/solution/yan-se-tian-chong-by-leetcode-solution-ejum/",
	"content": "#### 前言\n\n本题要求将给定的二维数组中指定的「色块」染成另一种颜色。「色块」的定义是：直接或间接相邻的同色方格构成的整体。\n\n可以发现，「色块」就是被不同颜色的方格包围的一个同色岛屿。我们从色块中任意一个地方开始，利用广度优先搜索或深度优先搜索即可遍历整个岛屿。\n\n注意：当目标颜色和初始颜色相同时，我们无需对原数组进行修改。\n\n#### 方法一：广度优先搜索\n\n**思路及算法**\n\n我们从给定的起点开始，进行广度优先搜索。每次搜索到一个方格时，如果其与初始位置的方格颜色相同，就将该方格加入队列，并将该方格的颜色更新，以防止重复入队。\n\n注意：因为初始位置的颜色会被修改，所以我们需要保存初始位置的颜色，以便于之后的更新操作。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    const int dx[4] = {1, 0, 0, -1};\n    const int dy[4] = {0, 1, -1, 0};\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {\n        int currColor = image[sr][sc];\n        if (currColor == newColor) {\n            return image;\n\t\t}\n        int n = image.size(), m = image[0].size();\n        queue<pair<int, int>> que;\n        que.emplace(sr, sc);\n        image[sr][sc] = newColor;\n        while (!que.empty()) {\n            int x = que.front().first, y = que.front().second;\n            que.pop();\n            for (int i = 0; i < 4; i++) {\n                int mx = x + dx[i], my = y + dy[i];\n                if (mx >= 0 && mx < n && my >= 0 && my < m && image[mx][my] == currColor) {\n                    que.emplace(mx, my);\n                    image[mx][my] = newColor;\n                }\n            }\n        }\n        return image;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int[] dx = {1, 0, 0, -1};\n    int[] dy = {0, 1, -1, 0};\n\n    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {\n        int currColor = image[sr][sc];\n        if (currColor == newColor) {\n            return image;\n        }\n        int n = image.length, m = image[0].length;\n        Queue<int[]> queue = new LinkedList<int[]>();\n        queue.offer(new int[]{sr, sc});\n        image[sr][sc] = newColor;\n        while (!queue.isEmpty()) {\n            int[] cell = queue.poll();\n            int x = cell[0], y = cell[1];\n            for (int i = 0; i < 4; i++) {\n                int mx = x + dx[i], my = y + dy[i];\n                if (mx >= 0 && mx < n && my >= 0 && my < m && image[mx][my] == currColor) {\n                    queue.offer(new int[]{mx, my});\n                    image[mx][my] = newColor;\n                }\n            }\n        }\n        return image;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:\n        currColor = image[sr][sc]\n        if currColor == newColor:\n            return image\n        \n        n, m = len(image), len(image[0])\n        que = collections.deque([(sr, sc)])\n        image[sr][sc] = newColor\n        while que:\n            x, y = que.popleft()\n            for mx, my in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]:\n                if 0 <= mx < n and 0 <= my < m and image[mx][my] == currColor:\n                    que.append((mx, my))\n                    image[mx][my] = newColor\n        \n        return image\n```\n\n```C [sol1-C]\nconst int dx[4] = {1, 0, 0, -1};\nconst int dy[4] = {0, 1, -1, 0};\n\nint** floodFill(int** image, int imageSize, int* imageColSize, int sr, int sc, int newColor, int* returnSize, int** returnColumnSizes) {\n    int n = imageSize, m = imageColSize[0];\n    *returnSize = n;\n    for (int i = 0; i < n; i++) {\n        (*returnColumnSizes)[i] = m;\n    }\n    int currColor = image[sr][sc];\n    if (currColor == newColor) {\n        return image;\n    }\n    int que[n * m][2];\n    int l = 0, r = 0;\n    que[r][0] = sr, que[r++][1] = sc;\n    image[sr][sc] = newColor;\n    while (l < r) {\n        int x = que[l][0], y = que[l++][1];\n        for (int i = 0; i < 4; i++) {\n            int mx = x + dx[i], my = y + dy[i];\n            if (mx >= 0 && mx < n && my >= 0 && my < m && image[mx][my] == currColor) {\n                que[r][0] = mx, que[r++][1] = my;\n                image[mx][my] = newColor;\n            }\n        }\n    }\n    return image;\n}\n```\n\n```golang [sol1-Golang]\nvar (\n    dx = []int{1, 0, 0, -1}\n    dy = []int{0, 1, -1, 0}\n)\n\nfunc floodFill(image [][]int, sr int, sc int, newColor int) [][]int {\n    currColor := image[sr][sc]\n    if currColor == newColor {\n        return image\n    }\n    n, m := len(image), len(image[0])\n    queue := [][]int{}\n    queue = append(queue, []int{sr, sc})\n    image[sr][sc] = newColor\n    for i := 0; i < len(queue); i++ {\n        cell := queue[i]\n        for j := 0; j < 4; j++ {\n            mx, my := cell[0] + dx[j], cell[1] + dy[j]\n            if mx >= 0 && mx < n && my >= 0 && my < m && image[mx][my] == currColor {\n                queue = append(queue, []int{mx, my})\n                image[mx][my] = newColor\n            }\n        }\n    }\n    return image\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\times m)$，其中 $n$ 和 $m$ 分别是二维数组的行数和列数。最坏情况下需要遍历所有的方格一次。\n\n- 空间复杂度：$O(n\\times m)$，其中 $n$ 和 $m$ 分别是二维数组的行数和列数。主要为队列的开销。\n\n#### 方法二：深度优先搜索\n\n**思路及算法**\n\n我们从给定的起点开始，进行深度优先搜索。每次搜索到一个方格时，如果其与初始位置的方格颜色相同，就将该方格的颜色更新，以防止重复搜索；如果不相同，则进行回溯。\n\n注意：因为初始位置的颜色会被修改，所以我们需要保存初始位置的颜色，以便于之后的更新操作。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    const int dx[4] = {1, 0, 0, -1};\n    const int dy[4] = {0, 1, -1, 0};\n    void dfs(vector<vector<int>>& image, int x, int y, int color, int newColor) {\n        if (image[x][y] == color) {\n            image[x][y] = newColor;\n            for (int i = 0; i < 4; i++) {\n                int mx = x + dx[i], my = y + dy[i];\n                if (mx >= 0 && mx < image.size() && my >= 0 && my < image[0].size()) {\n                    dfs(image, mx, my, color, newColor);\n                }\n            }\n        }\n    }\n\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {\n        int currColor = image[sr][sc];\n        if (currColor != newColor) {\n            dfs(image, sr, sc, currColor, newColor);\n        }\n        return image;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    int[] dx = {1, 0, 0, -1};\n    int[] dy = {0, 1, -1, 0};\n\n    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {\n        int currColor = image[sr][sc];\n        if (currColor != newColor) {\n            dfs(image, sr, sc, currColor, newColor);\n        }\n        return image;\n    }\n\n    public void dfs(int[][] image, int x, int y, int color, int newColor) {\n        if (image[x][y] == color) {\n            image[x][y] = newColor;\n            for (int i = 0; i < 4; i++) {\n                int mx = x + dx[i], my = y + dy[i];\n                if (mx >= 0 && mx < image.length && my >= 0 && my < image[0].length) {\n                    dfs(image, mx, my, color, newColor);\n                }\n            }\n        }\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -> List[List[int]]:\n        n, m = len(image), len(image[0])\n        currColor = image[sr][sc]\n\n        def dfs(x: int, y: int):\n            if image[x][y] == currColor:\n                image[x][y] = newColor\n                for mx, my in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]:\n                    if 0 <= mx < n and 0 <= my < m and image[mx][my] == currColor:\n                        dfs(mx, my)\n\n        if currColor != newColor:\n            dfs(sr, sc)\n        return image\n```\n\n```C [sol2-C]\nconst int dx[4] = {1, 0, 0, -1};\nconst int dy[4] = {0, 1, -1, 0};\n\nint n, m;\n\nvoid dfs(int** image, int x, int y, int color, int newColor) {\n    if (image[x][y] == color) {\n        image[x][y] = newColor;\n        for (int i = 0; i < 4; i++) {\n            int mx = x + dx[i], my = y + dy[i];\n            if (mx >= 0 && mx < n && my >= 0 && my < m) {\n                dfs(image, mx, my, color, newColor);\n            }\n        }\n    }\n}\n\nint** floodFill(int** image, int imageSize, int* imageColSize, int sr, int sc, int newColor, int* returnSize, int** returnColumnSizes) {\n    n = imageSize, m = imageColSize[0];\n    *returnSize = n;\n    for (int i = 0; i < n; i++) {\n        (*returnColumnSizes)[i] = m;\n    }\n    int currColor = image[sr][sc];\n    if (currColor != newColor) {\n        dfs(image, sr, sc, currColor, newColor);\n    }\n    return image;\n}\n```\n\n```golang [sol2-Golang]\nvar (\n    dx = []int{1, 0, 0, -1}\n    dy = []int{0, 1, -1, 0}\n)\n\nfunc floodFill(image [][]int, sr int, sc int, newColor int) [][]int {\n    currColor := image[sr][sc]\n    if currColor != newColor {\n        dfs(image, sr, sc, currColor, newColor)\n    }\n    return image\n}\n\nfunc dfs(image [][]int, x, y, color, newColor int) {\n    if image[x][y] == color {\n        image[x][y] = newColor\n        for i := 0; i < 4; i++ {\n            mx, my := x + dx[i], y + dy[i]\n            if mx >= 0 && mx < len(image) && my >= 0 && my < len(image[0]) {\n                dfs(image, mx, my, color, newColor)\n            }\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\times m)$，其中 $n$ 和 $m$ 分别是二维数组的行数和列数。最坏情况下需要遍历所有的方格一次。\n\n- 空间复杂度：$O(n\\times m)$，其中 $n$ 和 $m$ 分别是二维数组的行数和列数。主要为栈空间的开销。"
}