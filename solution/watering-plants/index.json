{
	"titleSlug": "watering-plants",
	"slug": "gei-zhi-wu-jiao-shui-by-leetcode-solutio-y84o",
	"url": "https://leetcode-cn.com/problems/watering-plants/solution/gei-zhi-wu-jiao-shui-by-leetcode-solutio-y84o/",
	"content": "#### 方法一：维护剩余的水量\n\n**思路与算法**\n\n我们可以模拟浇水的过程。\n\n我们使用一个变量 $\\textit{rest}$ 维护剩余的水量。当我们从第 $i-1$ 株植物到达第 $i$ 株植物时：\n\n- 如果 $\\textit{rest} \\geq \\textit{plants}[i]$，那么我们可以完成浇水，需要的步数就是从 $i-1$ 到 $i$ 的 $1$ 步；\n\n- 如果 $\\textit{rest} < \\textit{plants}[i]$，那么我们无法完成浇水，必须要返回河边装满水罐，需要的步数为：\n\n    - 从 $i-1$ 到 $-1$ 的 $i$ 步；\n\n    - 从 $-1$ 到 $i$ 的 $i+1$ 步。\n\n    总计 $2i + 1$ 步。\n\n当我们模拟完成所有 $n$ 株植物的浇水过程之后，就可以返回总步数作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int wateringPlants(vector<int>& plants, int capacity) {\n        int n = plants.size();\n        int ans = 0;\n        int rest = capacity;\n        for (int i = 0; i < n; ++i) {\n            if (rest >= plants[i]) {\n                ++ans;\n                rest -= plants[i];\n            }\n            else {\n                ans += i * 2 + 1;\n                rest = capacity - plants[i];\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def wateringPlants(self, plants: List[int], capacity: int) -> int:\n        ans, rest = 0, capacity\n\n        for i, plant in enumerate(plants):\n            if rest >= plants[i]:\n                ans += 1\n                rest -= plants[i]\n            else:\n                ans += i * 2 + 1\n                rest = capacity - plants[i]\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。\n\n- 空间复杂度：$O(1)$。"
}