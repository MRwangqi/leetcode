{
	"titleSlug": "count-ways-to-make-array-with-product",
	"slug": "shu-lun-zu-he-ru-men-by-heltion-1whx",
	"url": "https://leetcode-cn.com/problems/count-ways-to-make-array-with-product/solution/shu-lun-zu-he-ru-men-by-heltion-1whx/",
	"content": "对$k$进行质因数分解:$k=\\displaystyle\\prod_{i=1}^mp_i^{r_i}$.\r\n设数组中第$j$个数为$a_j$,且$a_j=\\displaystyle\\prod_{i=1}^mp_i^{r_{ij}}$,那么对每个$i=1,\\cdots,m$,有$\\displaystyle\\sum_{j=1}^nr_{ij}=r_i$.\r\n由于每个方程是相互独立的,如果记方程$\\displaystyle\\sum_{j=1}^nr_{j}=r$的非负整数解数量为$w(n,r)$,根据乘法原理答案为$k=\\displaystyle\\prod_{i=1}^mw(n,r_i)$.\r\n\r\n记$n,k$的最大值分别为$N,K$,询问数量为$Q$.\r\n\r\n第一个问题:如何对$k$进行质因数分解\r\n第一种做法是单独考虑每个$k$,用每个小于$\\sqrt k$的数试除$k$,那么需要$O(\\sqrt k)$的时间.\r\n第二种做法是用筛法预处理,那么需要$O(K\\log\\log K)$的预处理时间.\r\n\r\n第二个问题:如何求解$w(n,r)$,注意到$r=O(\\log k)$.\r\n第一种做法是使用动态规划,根据$c_n$是否为$0$可以得到$w(n,r)=w(n,r-1)+w(n-1,r)$,需要$O(N\\log K)$的时间.\r\n第二种做法是用插板法考虑组合意义,可以得到$w(n,r)=\\binom{n+r-1}{r}$.\r\n可以不作任何预处理直接计算组合数,复杂度为$O(\\min(n,r)\\log\\text{mod})$.\r\n也可以$O(N+\\log K)$预处理阶乘及其逆元,然后$O(1)$计算组合数.\r\n\r\n参考代码\r\n1.不使用任何预处理进行计算,复杂度为$O(Q(\\sqrt K+\\log K\\log\\text{mod})$.\r\n```C++\r\nconstexpr int mod = 1'000'000'007;\r\nint power(int a, int r){\r\n    int res = 1;\r\n    for(; r; r >>= 1, a = 1LL * a * a % mod)\r\n        if(r & 1) res = 1LL * res * a % mod;\r\n    return res;\r\n}\r\nint inv(int n){\r\n    return power(n, mod - 2);\r\n}\r\nint C(int m, int n){\r\n    int res = 1;\r\n    for(int i = 0; i < n; i += 1) res = 1LL * res * (m - i) % mod;\r\n    for(int i = 1; i <= n; i += 1) res = 1LL * res * inv(i) % mod;\r\n    return res;\r\n}\r\nclass Solution {\r\npublic:\r\n    vector<int> waysToFillArray(vector<vector<int>>& queries) {\r\n        vector<int> res;\r\n        for(auto v : queries){\r\n            int n = v[0], k = v[1], ans = 1;\r\n            for(int i = 2, r; i * i <= k; i += 1)\r\n                if(k % i == 0){\r\n                    for(r = 0; k % i == 0; k /= i) r += 1;\r\n                    ans = 1LL * ans * C(n + r - 1, r) % mod;\r\n                }\r\n            if(k > 1) ans = 1LL * ans * n % mod;\r\n            res.push_back(ans);\r\n        }\r\n        return res;\r\n    }\r\n};\r\n```\r\n2.尽可能使用预处理,复杂度为$O(K\\log\\log K+N+Q\\log K)$.\r\n```C++\r\nconstexpr int mod = 1'000'000'007;\r\nconstexpr int maxn = 10000 + 13;\r\nint f[maxn], g[maxn];\r\nvector<int> rs[maxn];\r\nint C(int m, int n){\r\n    return 1LL * f[m] * g[n] % mod * g[m - n] % mod;\r\n}\r\nclass Solution {\r\npublic:\r\n    vector<int> waysToFillArray(vector<vector<int>>& queries) {\r\n        if(f[0] != 1){\r\n            for(int i = 0; i < maxn; i += 1) f[i] = i ? 1LL * f[i - 1] * i % mod : 1;\r\n            for(int i = 1; i < maxn; i += 1) g[i] = i == 1 ? 1 : 1LL * (mod - mod / i) * g[mod % i] % mod;\r\n            for(int i = 0; i < maxn; i += 1) g[i] = g[i] ? 1LL * g[i - 1] * g[i] % mod : 1;\r\n            for(int i = 2; i < maxn; i += 1){\r\n                if(rs[i].empty()){\r\n                    for(int j = i; j < maxn; j += i){\r\n                        rs[j].push_back(0);\r\n                        for(int k = j; k % i == 0; k /= i) rs[j].back() += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vector<int> res;\r\n        for(auto v : queries){\r\n            int n = v[0], k = v[1], ans = 1;\r\n            for(int r : rs[k]) ans = 1LL * ans * C(n + r - 1, r) % mod;\r\n            res.push_back(ans);\r\n        }\r\n        return res;\r\n    }\r\n};\r\n```"
}