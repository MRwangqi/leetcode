{
	"titleSlug": "minimum-sum-of-squared-difference",
	"slug": "by-endlesscheng-5qmk",
	"url": "https://leetcode-cn.com/problems/minimum-sum-of-squared-difference/solution/by-endlesscheng-5qmk/",
	"content": "本题 [视频讲解](https://www.bilibili.com/video/BV1Le4y1R7xu) 已出炉，欢迎点赞三连~ \r\n\r\n---\r\n\r\n根据题意，在 $\\textit{nums}_1[i]$ 上 $+1$，等价于在 $\\textit{nums}_2[i]$ 上 $-1$，反之亦然。\r\n\r\n定义 $a[i]=|\\textit{nums}_1[i]-\\textit{nums}_2[i]|$，$k=k_1+k_2$，则原问题可以转换成：\r\n\r\n> 对数组 $a$ 执行至多 $k$ 次 $-1$ 操作，能得到的 $\\sum a[i]^2$ 的最小值。\r\n\r\n对于两个数，先把大的 $-1$ 会更优。我们可以将 $a$ 从大往小排序，然后从左到右遍历 $a$，同时更新剩余操作次数 $k$。\r\n\r\n当遍历至 $a[i]$ 时，$a[0]$ 到 $a[i-1]$ 均已减小至 $a[i]$，我们需要判断 $k$ 次操作能否让 $a[0]$ 到 $a[i]$ 全部减小至 $a[i+1]$，即比较 $k$ 与所需次数 $c = (i + 1)  (a[i] - a[i+1])$ 的大小：\r\n\r\n- 如果 $c<k$，那么从 $a[0]$ 到 $a[i]$ 均可以减小至 $a[i+1]$，更新 $k=k-c$。\r\n- 如果 $c\\ge k$，那么从 $a[0]$ 到 $a[i]$ 中：\r\n   - 有 $k \\bmod (i+1)$ 个元素可以额外减小 $\\left\\lfloor\\dfrac{k}{i+1}\\right\\rfloor+1$；\r\n   - 有 $i+1-k \\bmod (i+1)$ 个元素可以额外减小 $\\left\\lfloor\\dfrac{k}{i+1}\\right\\rfloor$。\r\n后续无法继续减小，应退出循环。\r\n\r\n代码实现时，可以在 $a$ 末尾加一个哨兵 $0$，减少边界判断。\r\n\r\n#### 复杂度分析\r\n\r\n- 时间复杂度：$O(n\\log n)$。瓶颈在排序上。\r\n- 空间复杂度：$O(1)$。忽略排序的栈开销和哨兵的开销。\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def minSumSquareDiff(self, a: List[int], nums2: List[int], k1: int, k2: int) -> int:\r\n        ans, k = 0, k1 + k2\r\n        for i in range(len(a)):\r\n            a[i] = abs(a[i] - nums2[i])\r\n            ans += a[i] * a[i]\r\n        if sum(a) <= k:\r\n            return 0  # 所有 a[i] 均可为 0\r\n        a.sort(reverse=True)\r\n        a.append(0)  # 哨兵\r\n        for i, v in enumerate(a):\r\n            ans -= v * v\r\n            j = i + 1\r\n            c = j * (v - a[j])\r\n            if c < k:\r\n                k -= c\r\n                continue\r\n            v -= k // j\r\n            return ans + k % j * (v - 1) * (v - 1) + (j - k % j) * v * v\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    public long minSumSquareDiff(int[] a, int[] nums2, int k1, int k2) {\r\n        int n = a.length, k = k1 + k2;\r\n        long ans = 0L, sum = 0L;\r\n        for (var i = 0; i < n; ++i) {\r\n            a[i] = Math.abs(a[i] - nums2[i]);\r\n            sum += a[i];\r\n            ans += (long) a[i] * a[i];\r\n        }\r\n        if (sum <= k) return 0; // 所有 a[i] 均可为 0\r\n        Arrays.sort(a);\r\n        for (var i = n - 1; ; --i) {\r\n            var m = n - i;\r\n            long v = a[i], c = m * (v - (i > 0 ? a[i - 1] : 0));\r\n            ans -= v * v;\r\n            if (c < k) {\r\n                k -= c;\r\n                continue;\r\n            }\r\n            v -= k / m;\r\n            return ans + k % m * (v - 1) * (v - 1) + (m - k % m) * v * v;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```cpp [sol1-C++]\r\nclass Solution {\r\npublic:\r\n    long long minSumSquareDiff(vector<int> &a, vector<int> &nums2, int k1, int k2) {\r\n        int n = a.size(), k = k1 + k2;\r\n        long ans = 0L, sum = 0L;\r\n        for (int i = 0; i < n; ++i) {\r\n            a[i] = abs(a[i] - nums2[i]);\r\n            sum += a[i];\r\n            ans += (long) a[i] * a[i];\r\n        }\r\n        if (sum <= k) return 0; // 所有 a[i] 均可为 0\r\n        sort(a.begin(), a.end(), greater<int>());\r\n        a.push_back(0); // 哨兵\r\n        for (int i = 0;; ++i) {\r\n            long j = i + 1, v = a[i], c = j * (v - a[j]);\r\n            ans -= v * v;\r\n            if (c < k) {\r\n                k -= c;\r\n                continue;\r\n            }\r\n            v -= k / j;\r\n            return ans + k % j * (v - 1) * (v - 1) + (j - k % j) * v * v;\r\n        }\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc minSumSquareDiff(a, nums2 []int, k1, k2 int) int64 {\r\n\tans, sum := 0, 0\r\n\tfor i, v := range a {\r\n\t\ta[i] = abs(v - nums2[i])\r\n\t\tsum += a[i]\r\n\t\tans += a[i] * a[i]\r\n\t}\r\n\tk := k1 + k2\r\n\tif sum <= k {\r\n\t\treturn 0 // 所有 a[i] 均可为 0\r\n\t}\r\n\tsort.Sort(sort.Reverse(sort.IntSlice(a)))\r\n\ta = append(a, 0) // 哨兵\r\n\tfor i, v := range a {\r\n\t\ti++\r\n\t\tans -= v * v\r\n\t\tif c := i * (v - a[i]); c < k {\r\n\t\t\tk -= c\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tv -= k / i\r\n\t\tans += k%i*(v-1)*(v-1) + (i-k%i)*v*v\r\n\t\tbreak\r\n\t}\r\n\treturn int64(ans)\r\n}\r\n\r\nfunc abs(x int) int { if x < 0 { return -x }; return x }\r\n```\r\n"
}