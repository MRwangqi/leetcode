{
	"titleSlug": "remove-nth-node-from-end-of-list",
	"slug": "shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-b-61",
	"url": "https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-b-61/",
	"content": "### 📺 视频题解  \n![19. 删除链表的倒数第N个节点.mp4](801f6caa-3449-4117-885d-6dd33c117534)\n\n### 📖 文字题解\n#### 前言\n\n在对链表进行操作时，一种常用的技巧是添加一个哑节点（dummy node），它的 $\\textit{next}$ 指针指向链表的头节点。这样一来，我们就不需要对头节点进行特殊的判断了。\n\n例如，在本题中，如果我们要删除节点 $y$，我们需要知道节点 $y$ 的前驱节点 $x$，并将 $x$ 的指针指向 $y$ 的后继节点。但由于头节点不存在前驱节点，因此我们需要在删除头节点时进行特殊判断。但如果我们添加了哑节点，那么头节点的前驱节点就是哑节点本身，此时我们就只需要考虑通用的情况即可。\n\n特别地，在某些语言中，由于需要自行对内存进行管理。因此在实际的面试中，对于「是否需要释放被删除节点对应的空间」这一问题，我们需要和面试官进行积极的沟通以达成一致。下面的代码中默认不释放空间。\n\n#### 方法一：计算链表长度\n\n**思路与算法**\n\n一种容易想到的方法是，我们首先从头节点开始对链表进行一次遍历，得到链表的长度 $L$。随后我们再从头节点开始对链表进行一次遍历，当遍历到第 $L-n+1$ 个节点时，它就是我们需要删除的节点。\n\n> 为了与题目中的 $n$ 保持一致，节点的编号从 $1$ 开始，头节点为编号 $1$ 的节点。\n\n为了方便删除操作，我们可以从哑节点开始遍历 $L-n+1$ 个节点。当遍历到第 $L-n+1$ 个节点时，**它的下一个节点**就是我们需要删除的节点，这样我们只需要修改一次指针，就能完成删除操作。\n\n![p1](https://assets.leetcode-cn.com/solution-static/19/p1.png)\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int getLength(ListNode* head) {\n        int length = 0;\n        while (head) {\n            ++length;\n            head = head->next;\n        }\n        return length;\n    }\n\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0, head);\n        int length = getLength(head);\n        ListNode* cur = dummy;\n        for (int i = 1; i < length - n + 1; ++i) {\n            cur = cur->next;\n        }\n        cur->next = cur->next->next;\n        ListNode* ans = dummy->next;\n        delete dummy;\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummy = new ListNode(0, head);\n        int length = getLength(head);\n        ListNode cur = dummy;\n        for (int i = 1; i < length - n + 1; ++i) {\n            cur = cur.next;\n        }\n        cur.next = cur.next.next;\n        ListNode ans = dummy.next;\n        return ans;\n    }\n\n    public int getLength(ListNode head) {\n        int length = 0;\n        while (head != null) {\n            ++length;\n            head = head.next;\n        }\n        return length;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        def getLength(head: ListNode) -> int:\n            length = 0\n            while head:\n                length += 1\n                head = head.next\n            return length\n        \n        dummy = ListNode(0, head)\n        length = getLength(head)\n        cur = dummy\n        for i in range(1, length - n + 1):\n            cur = cur.next\n        cur.next = cur.next.next\n        return dummy.next\n```\n\n```Golang [sol1-Golang]\nfunc getLength(head *ListNode) (length int) {\n    for ; head != nil; head = head.Next {\n        length++\n    }\n    return\n}\n\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    length := getLength(head)\n    dummy := &ListNode{0, head}\n    cur := dummy\n    for i := 0; i < length-n; i++ {\n        cur = cur.Next\n    }\n    cur.Next = cur.Next.Next\n    return dummy.Next\n}\n```\n\n```C [sol1-C]\nint getLength(struct ListNode* head) {\n    int length = 0;\n    while (head) {\n        ++length;\n        head = head->next;\n    }\n    return length;\n}\n\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n) {\n    struct ListNode* dummy = malloc(sizeof(struct ListNode));\n    dummy->val = 0, dummy->next = head;\n    int length = getLength(head);\n    struct ListNode* cur = dummy;\n    for (int i = 1; i < length - n + 1; ++i) {\n        cur = cur->next;\n    }\n    cur->next = cur->next->next;\n    struct ListNode* ans = dummy->next;\n    free(dummy);\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(L)$，其中 $L$ 是链表的长度。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：栈\n\n**思路与算法**\n\n我们也可以在遍历链表的同时将所有节点依次入栈。根据栈「先进后出」的原则，我们弹出栈的第 $n$ 个节点就是需要删除的节点，并且目前栈顶的节点就是待删除节点的前驱节点。这样一来，删除操作就变得十分方便了。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/19/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/19/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/19/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/19/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/19/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/19/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/19/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/19/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/19/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/19/10.png)>\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0, head);\n        stack<ListNode*> stk;\n        ListNode* cur = dummy;\n        while (cur) {\n            stk.push(cur);\n            cur = cur->next;\n        }\n        for (int i = 0; i < n; ++i) {\n            stk.pop();\n        }\n        ListNode* prev = stk.top();\n        prev->next = prev->next->next;\n        ListNode* ans = dummy->next;\n        delete dummy;\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummy = new ListNode(0, head);\n        Deque<ListNode> stack = new LinkedList<ListNode>();\n        ListNode cur = dummy;\n        while (cur != null) {\n            stack.push(cur);\n            cur = cur.next;\n        }\n        for (int i = 0; i < n; ++i) {\n            stack.pop();\n        }\n        ListNode prev = stack.peek();\n        prev.next = prev.next.next;\n        ListNode ans = dummy.next;\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        dummy = ListNode(0, head)\n        stack = list()\n        cur = dummy\n        while cur:\n            stack.append(cur)\n            cur = cur.next\n        \n        for i in range(n):\n            stack.pop()\n\n        prev = stack[-1]\n        prev.next = prev.next.next\n        return dummy.next\n```\n\n```Golang [sol2-Golang]\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    nodes := []*ListNode{}\n    dummy := &ListNode{0, head}\n    for node := dummy; node != nil; node = node.Next {\n        nodes = append(nodes, node)\n    }\n    prev := nodes[len(nodes)-1-n]\n    prev.Next = prev.Next.Next\n    return dummy.Next\n}\n```\n\n```C [sol2-C]\nstruct Stack {\n    struct ListNode* val;\n    struct Stack* next;\n};\n\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n) {\n    struct ListNode* dummy = malloc(sizeof(struct ListNode));\n    dummy->val = 0, dummy->next = head;\n    struct Stack* stk = NULL;\n    struct ListNode* cur = dummy;\n    while (cur) {\n        struct Stack* tmp = malloc(sizeof(struct Stack));\n        tmp->val = cur, tmp->next = stk;\n        stk = tmp;\n        cur = cur->next;\n    }\n    for (int i = 0; i < n; ++i) {\n        struct Stack* tmp = stk->next;\n        free(stk);\n        stk = tmp;\n    }\n    struct ListNode* prev = stk->val;\n    prev->next = prev->next->next;\n    struct ListNode* ans = dummy->next;\n    free(dummy);\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(L)$，其中 $L$ 是链表的长度。\n\n- 空间复杂度：$O(L)$，其中 $L$ 是链表的长度。主要为栈的开销。\n\n#### 方法三：双指针\n\n**思路与算法**\n\n我们也可以在不预处理出链表的长度，以及使用常数空间的前提下解决本题。\n\n由于我们需要找到倒数第 $n$ 个节点，因此我们可以使用两个指针 $\\textit{first}$ 和 $\\textit{second}$ 同时对链表进行遍历，并且 $\\textit{first}$ 比 $\\textit{second}$ 超前 $n$ 个节点。当 $\\textit{first}$ 遍历到链表的末尾时，$\\textit{second}$ 就恰好处于倒数第 $n$ 个节点。\n\n具体地，初始时 $\\textit{first}$ 和 $\\textit{second}$ 均指向头节点。我们首先使用 $\\textit{first}$ 对链表进行遍历，遍历的次数为 $n$。此时，$\\textit{first}$ 和 $\\textit{second}$ 之间间隔了 $n-1$ 个节点，即 $\\textit{first}$ 比 $\\textit{second}$ 超前了 $n$ 个节点。\n\n在这之后，我们同时使用 $\\textit{first}$ 和 $\\textit{second}$ 对链表进行遍历。当 $\\textit{first}$ 遍历到链表的末尾（即 $\\textit{first}$ 为空指针）时，$\\textit{second}$ 恰好指向倒数第 $n$ 个节点。\n\n根据方法一和方法二，如果我们能够得到的是倒数第 $n$ 个节点的前驱节点而不是倒数第 $n$ 个节点的话，删除操作会更加方便。因此我们可以考虑在初始时将 $\\textit{second}$ 指向哑节点，其余的操作步骤不变。这样一来，当 $\\textit{first}$ 遍历到链表的末尾时，$\\textit{second}$ 的**下一个节点**就是我们需要删除的节点。\n\n![p3](https://assets.leetcode-cn.com/solution-static/19/p3.png)\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0, head);\n        ListNode* first = head;\n        ListNode* second = dummy;\n        for (int i = 0; i < n; ++i) {\n            first = first->next;\n        }\n        while (first) {\n            first = first->next;\n            second = second->next;\n        }\n        second->next = second->next->next;\n        ListNode* ans = dummy->next;\n        delete dummy;\n        return ans;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummy = new ListNode(0, head);\n        ListNode first = head;\n        ListNode second = dummy;\n        for (int i = 0; i < n; ++i) {\n            first = first.next;\n        }\n        while (first != null) {\n            first = first.next;\n            second = second.next;\n        }\n        second.next = second.next.next;\n        ListNode ans = dummy.next;\n        return ans;\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        dummy = ListNode(0, head)\n        first = head\n        second = dummy\n        for i in range(n):\n            first = first.next\n\n        while first:\n            first = first.next\n            second = second.next\n        \n        second.next = second.next.next\n        return dummy.next\n```\n\n```Golang [sol3-Golang]\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    dummy := &ListNode{0, head}\n    first, second := head, dummy\n    for i := 0; i < n; i++ {\n        first = first.Next\n    }\n    for ; first != nil; first = first.Next {\n        second = second.Next\n    }\n    second.Next = second.Next.Next\n    return dummy.Next\n}\n```\n\n```C [sol3-C]\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n) {\n    struct ListNode* dummy = malloc(sizeof(struct ListNode));\n    dummy->val = 0, dummy->next = head;\n    struct ListNode* first = head;\n    struct ListNode* second = dummy;\n    for (int i = 0; i < n; ++i) {\n        first = first->next;\n    }\n    while (first) {\n        first = first->next;\n        second = second->next;\n    }\n    second->next = second->next->next;\n    struct ListNode* ans = dummy->next;\n    free(dummy);\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(L)$，其中 $L$ 是链表的长度。\n\n- 空间复杂度：$O(1)$。"
}