{
	"titleSlug": "reshape-the-matrix",
	"slug": "zhong-su-ju-zhen-by-leetcode-solution-gt0g",
	"url": "https://leetcode-cn.com/problems/reshape-the-matrix/solution/zhong-su-ju-zhen-by-leetcode-solution-gt0g/",
	"content": "#### 方法一：二维数组的一维表示\n\n**思路与算法**\n\n对于一个行数为 $m$，列数为 $n$，行列下标都从 $0$ 开始编号的二维数组，我们可以通过下面的方式，将其中的每个元素 $(i, j)$ 映射到整数域内，并且它们按照行优先的顺序一一对应着 $[0, mn)$ 中的每一个整数。形象化地来说，我们把这个二维数组「排扁」成了一个一维数组。如果读者对机器学习有一定了解，可以知道这就是 $\\texttt{flatten}$ 操作。\n\n这样的映射即为：\n\n$$\n(i, j) \\to i \\times n+j\n$$\n\n同样地，我们可以将整数 $x$ 映射回其在矩阵中的下标，即\n\n$$\n\\begin{cases}\ni = x ~/~ n \\\\\nj = x ~\\%~ n\n\\end{cases}\n$$\n\n其中 $/$ 表示整数除法，$\\%$ 表示取模运算。\n\n那么题目需要我们做的事情相当于：\n\n- 将二维数组 $\\textit{nums}$ 映射成一个一维数组；\n\n- 将这个一维数组映射回 $r$ 行 $c$ 列的二维数组。\n\n我们当然可以直接使用一个一维数组进行过渡，但我们也可以直接从二维数组 $\\textit{nums}$ 得到 $r$ 行 $c$ 列的重塑矩阵：\n\n- 设 $\\textit{nums}$ 本身为 $m$ 行 $n$ 列，如果 $mn \\neq rc$，那么二者包含的元素个数不相同，因此无法进行重塑；\n\n- 否则，对于 $x \\in [0, mn)$，第 $x$ 个元素在 $\\textit{nums}$ 中对应的下标为 $(x ~/~ n, x~\\%~ n)$，而在新的重塑矩阵中对应的下标为 $(x ~/~ c, x~\\%~ c)$。我们直接进行赋值即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {\n        int m = nums.size();\n        int n = nums[0].size();\n        if (m * n != r * c) {\n            return nums;\n        }\n\n        vector<vector<int>> ans(r, vector<int>(c));\n        for (int x = 0; x < m * n; ++x) {\n            ans[x / c][x % c] = nums[x / n][x % n];\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[][] matrixReshape(int[][] nums, int r, int c) {\n        int m = nums.length;\n        int n = nums[0].length;\n        if (m * n != r * c) {\n            return nums;\n        }\n\n        int[][] ans = new int[r][c];\n        for (int x = 0; x < m * n; ++x) {\n            ans[x / c][x % c] = nums[x / n][x % n];\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def matrixReshape(self, nums: List[List[int]], r: int, c: int) -> List[List[int]]:\n        m, n = len(nums), len(nums[0])\n        if m * n != r * c:\n            return nums\n        \n        ans = [[0] * c for _ in range(r)]\n        for x in range(m * n):\n            ans[x // c][x % c] = nums[x // n][x % n]\n        \n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar matrixReshape = function(nums, r, c) {\n    const m = nums.length;\n    const n = nums[0].length;\n    if (m * n != r * c) {\n        return nums;\n    }\n\n    const ans = new Array(r).fill(0).map(() => new Array(c).fill(0));\n    for (let x = 0; x < m * n; ++x) {\n        ans[Math.floor(x / c)][x % c] = nums[Math.floor(x / n)][x % n];\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc matrixReshape(nums [][]int, r int, c int) [][]int {\n    n, m := len(nums), len(nums[0])\n    if n*m != r*c {\n        return nums\n    }\n    ans := make([][]int, r)\n    for i := range ans {\n        ans[i] = make([]int, c)\n    }\n    for i := 0; i < n*m; i++ {\n        ans[i/c][i%c] = nums[i/m][i%m]\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nint** matrixReshape(int** nums, int numsSize, int* numsColSize, int r, int c, int* returnSize, int** returnColumnSizes) {\n    int m = numsSize;\n    int n = numsColSize[0];\n    if (m * n != r * c) {\n        *returnSize = numsSize;\n        *returnColumnSizes = numsColSize;\n        return nums;\n    }\n    *returnSize = r;\n    *returnColumnSizes = malloc(sizeof(int) * r);\n    int** ans = malloc(sizeof(int*) * r);\n\n    for (int i = 0; i < r; i++) {\n        (*returnColumnSizes)[i] = c;\n        ans[i] = malloc(sizeof(int) * c);\n    }\n    for (int x = 0; x < m * n; ++x) {\n        ans[x / c][x % c] = nums[x / n][x % n];\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(rc)$。这里的时间复杂度是在重塑矩阵成功的前提下的时间复杂度，否则当 $mn \\neq rc$ 时，$\\texttt{C++}$ 语言中返回的是原数组的一份拷贝，本质上需要的时间复杂度为 $O(mn)$，而其余语言可以直接返回原数组的对象，需要的时间复杂度仅为 $O(1)$。\n\n- 空间复杂度：$O(1)$。这里的空间复杂度不包含返回的重塑矩阵需要的空间。"
}