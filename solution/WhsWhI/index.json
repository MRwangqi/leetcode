{
	"titleSlug": "WhsWhI",
	"slug": "zui-chang-lian-xu-xu-lie-by-leetcode-sol-z8jk",
	"url": "https://leetcode-cn.com/problems/WhsWhI/solution/zui-chang-lian-xu-xu-lie-by-leetcode-sol-z8jk/",
	"content": "#### 方法一：哈希表\n\n**思路和算法**\n\n我们考虑枚举数组中的每个数 $x$，考虑以其为起点，不断尝试匹配 $x+1, x+2, \\cdots$ 是否存在，假设最长匹配到了 $x+y$，那么以 $x$ 为起点的最长连续序列即为 $x, x+1, x+2, \\cdots, x+y$，其长度为 $y+1$，我们不断枚举并更新答案即可。\n\n对于匹配的过程，暴力的方法是 $O(n)$ 遍历数组去看是否存在这个数，但其实更高效的方法是用一个哈希表存储数组中的数，这样查看一个数是否存在即能优化至 $O(1)$ 的时间复杂度。\n\n仅仅是这样我们的算法时间复杂度最坏情况下还是会达到 $O(n^2)$（即外层需要枚举 $O(n)$ 个数，内层需要暴力匹配 $O(n)$ 次），无法满足题目的要求。但仔细分析这个过程，我们会发现其中执行了很多不必要的枚举，如果已知有一个 $x, x+1, x+2, \\cdots, x+y$ 的连续序列，而我们却重新从 $x+1$，$x+2$ 或者是 $x+y$ 处开始尝试匹配，那么得到的结果肯定不会优于枚举 $x$ 为起点的答案，因此我们在外层循环的时候碰到这种情况跳过即可。\n\n那么怎么判断是否跳过呢？由于我们要枚举的数 $x$ 一定是在数组中不存在前驱数 $x-1$ 的，不然按照上面的分析我们会从 $x-1$ 开始尝试匹配，因此我们每次在哈希表中检查是否存在 $x-1$ 即能判断是否需要跳过了。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/1.PNG),![fig2](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/2.PNG),![fig3](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/3.PNG),![fig4](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/4.PNG),![fig5](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/5.PNG),![fig6](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/6.PNG),![fig7](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/7.PNG),![fig8](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/8.PNG),![fig9](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/9.PNG),![fig10](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/10.PNG),![fig11](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/11.PNG),![fig12](https://assets.leetcode-cn.com/solution-static/jianzhi_II_119/12.PNG)>\n\n增加了判断跳过的逻辑之后，时间复杂度是多少呢？外层循环需要 $O(n)$ 的时间复杂度，只有当一个数是连续序列的第一个数的情况下才会进入内层循环，然后在内层循环中匹配连续序列中的数，因此数组中的每个数只会进入内层循环一次。根据上述分析可知，总时间复杂度为 $O(n)$，符合题目要求。\n\n```Java [sol1-Java]\nclass Solution {\n    public int longestConsecutive(int[] nums) {\n        Set<Integer> num_set = new HashSet<Integer>();\n        for (int num : nums) {\n            num_set.add(num);\n        }\n\n        int longestStreak = 0;\n\n        for (int num : num_set) {\n            if (!num_set.contains(num - 1)) {\n                int currentNum = num;\n                int currentStreak = 1;\n\n                while (num_set.contains(currentNum + 1)) {\n                    currentNum += 1;\n                    currentStreak += 1;\n                }\n\n                longestStreak = Math.max(longestStreak, currentStreak);\n            }\n        }\n\n        return longestStreak;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        longest_streak = 0\n        num_set = set(nums)\n\n        for num in num_set:\n            if num - 1 not in num_set:\n                current_num = num\n                current_streak = 1\n\n                while current_num + 1 in num_set:\n                    current_num += 1\n                    current_streak += 1\n\n                longest_streak = max(longest_streak, current_streak)\n\n        return longest_streak\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        unordered_set<int> num_set;\n        for (const int& num : nums) {\n            num_set.insert(num);\n        }\n\n        int longestStreak = 0;\n\n        for (const int& num : num_set) {\n            if (!num_set.count(num - 1)) {\n                int currentNum = num;\n                int currentStreak = 1;\n\n                while (num_set.count(currentNum + 1)) {\n                    currentNum += 1;\n                    currentStreak += 1;\n                }\n\n                longestStreak = max(longestStreak, currentStreak);\n            }\n        }\n\n        return longestStreak;           \n    }\n};\n```\n\n```TypeScript [sol1-TypeScript]\nvar longestConsecutive = function(nums: number[]): number {\n    let num_set: Set<number> = new Set();\n    for (const num of nums) {\n        num_set.add(num);\n    }\n\n    let longestStreak = 0;\n\n    for (const num of num_set) {\n        if (!num_set.has(num - 1)) {\n            let currentNum = num;\n            let currentStreak = 1;\n\n            while (num_set.has(currentNum + 1)) {\n                currentNum += 1;\n                currentStreak += 1;\n            }\n\n            longestStreak = Math.max(longestStreak, currentStreak);\n        }\n    }\n\n    return longestStreak;   \n};\n```\n\n```golang [sol1-Golang]\nfunc longestConsecutive(nums []int) int {\n    numSet := map[int]bool{}\n    for _, num := range nums {\n        numSet[num] = true\n    }\n    longestStreak := 0\n    for num := range numSet {\n        if !numSet[num-1] {\n            currentNum := num\n            currentStreak := 1\n            for numSet[currentNum+1] {\n                currentNum++\n                currentStreak++\n            }\n            if longestStreak < currentStreak {\n                longestStreak = currentStreak\n            }\n        }\n    }\n    return longestStreak\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组的长度。具体分析已在上面正文中给出。\n\n- 空间复杂度：$O(n)$。哈希表存储数组中所有的数需要 $O(n)$ 的空间。"
}