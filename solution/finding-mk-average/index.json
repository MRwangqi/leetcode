{
	"titleSlug": "finding-mk-average",
	"slug": "c-san-ge-multiset-jian-dan-mo-ni-by-newh-y4q9",
	"url": "https://leetcode-cn.com/problems/finding-mk-average/solution/c-san-ge-multiset-jian-dan-mo-ni-by-newh-y4q9/",
	"content": "### 解题思路\r\n\r\n维护 3 个 multiset：lower（保存最小的 $k$ 个数）、middle（中间的数）、upper（保存最大的 $k$ 个数）。\r\n\r\n#### 插入操作\r\n\r\n- 如果 $num \\leq \\max(lower)$，则在 $lower$ 中插入 $num$\r\n- 如果 $num \\geq \\min (upper)$，则在 $upper$ 中插入 $num$\r\n- 否则，在 $middle$ 中插入 $num$\r\n\r\n如果插入后，$lower$ 或 $upper$ 中的元素多于 $k$ 个，则向 $middle$ 中 转移 元素\r\n\r\n操作过程中维护 $middle$ 的元素和 $sum$\r\n\r\n#### 删除操作\r\n\r\n- 设删除的元素为 $d$\r\n- $d$ 一定存在于 $lower$ 或 $middle$ 或 $upper$ 中的一个或多个集合中\r\n- 择一删除即可\r\n\r\n如果删除后，$lower$ 或 $upper$ 中的元素少于 $k$ 个，则从 $middle$ 中 索取 元素\r\n\r\n操作过程中维护 $middle$ 的元素和 $sum$\r\n\r\n#### 平均值操作\r\n\r\n平均值 = $sum / (m - 2\\cdot k)$ （向下取整）。\r\n\r\n### 代码（400ms）\r\n\r\n```cpp\r\nclass MKAverage {\r\npublic:\r\n    long long m, k, sum = 0;\r\n    multiset<int> lower, middle, upper;\r\n    queue<int> nums;\r\n    \r\n    MKAverage(int m, int k) {\r\n        this->m = m;\r\n        this->k = k;\r\n    }\r\n    \r\n    void shiftLeft(multiset<int>& l, multiset<int>& r) {\r\n        l.insert(*r.begin());\r\n        r.erase(r.begin());\r\n    }\r\n    \r\n    void shiftRight(multiset<int>& l, multiset<int>& r) {\r\n        r.insert(*l.rbegin());\r\n        l.erase(--l.end());\r\n    }\r\n    \r\n    void addElement(int num) {\r\n        nums.push(num);\r\n        \r\n        if(lower.size() && *lower.rbegin() >= num) lower.insert(num);\r\n        else if(upper.size() && *upper.begin() <= num) upper.insert(num);\r\n        else middle.insert(num), sum += num;\r\n        \r\n        while(lower.size() > k) sum += *lower.rbegin(), shiftRight(lower, middle);\r\n        while(upper.size() > k) sum += *upper.begin(), shiftLeft(middle, upper);\r\n        \r\n        if(nums.size() > m) {\r\n            int d = nums.front(); nums.pop();\r\n            if(lower.find(d) != lower.end()) lower.erase(lower.find(d));\r\n            else if(middle.find(d) != middle.end()) middle.erase(middle.find(d)), sum -= d;\r\n            else upper.erase(upper.find(d));\r\n        }\r\n        \r\n        if(nums.size() >= m) {\r\n            while(lower.size() < k) sum -= *middle.begin(), shiftLeft(lower, middle);\r\n            while(upper.size() < k) sum -= *middle.rbegin(), shiftRight(middle, upper);\r\n        }\r\n    }\r\n    \r\n    int calculateMKAverage() {\r\n        if(nums.size() < m) return -1;\r\n        return sum / (m - 2*k);\r\n    }\r\n};\r\n```\r\n\r\n"
}