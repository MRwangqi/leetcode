{
	"titleSlug": "burst-balloons",
	"slug": "chuo-qi-qiu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/burst-balloons/solution/chuo-qi-qiu-by-leetcode-solution/",
	"content": "#### 前言\n\n为了方便处理，我们对 $\\textit{nums}$ 数组稍作处理，将其两边各加上题目中假设存在的 $\\textit{nums}[-1]$ 和 $\\textit{nums}[n]$ ，并保存在 $\\textit{val}$ 数组中，即 $\\textit{val}[i]=\\textit{nums}[i-1]$ 。之所以这样处理是为了处理 $\\textit{nums}[-1]$ ，防止下标越界。\n\n下文中的区间均指数组 $\\textit{val}$ 上的区间。\n\n#### 方法一：记忆化搜索\n\n**思路及算法**\n\n我们观察戳气球的操作，发现这会导致两个气球从不相邻变成相邻，使得后续操作难以处理。于是我们倒过来看这些操作，将全过程看作是每次添加一个气球。\n\n我们定义方法 $\\textit{solve}$，令 $\\textit{solve}(i,j)$ 表示将开区间 $(i,j)$ 内的位置全部填满气球能够得到的最多硬币数。由于是开区间，因此区间两端的气球的编号就是 $i$ 和 $j$，对应着 $\\textit{val}[i]$ 和 $\\textit{val}[j]$。\n\n* 当 $i \\geq j-1$ 时，开区间中没有气球，$\\textit{solve}(i,j)$ 的值为 $0$；\n\n* 当 $i < j-1$ 时，我们枚举开区间 $(i,j)$ 内的全部位置 $\\textit{mid}$，令 $\\textit{mid}$ 为当前区间第一个添加的气球，该操作能得到的硬币数为 $\\textit{val}[i] \\times \\textit{val}[\\textit{mid}] \\times val[j]$。同时我们递归地计算分割出的两区间对 $\\textit{solve}(i,j)$ 的贡献，这三项之和的最大值，即为 $\\textit{solve}(i,j)$ 的值。这样问题就转化为求 $\\textit{solve}(i,\\textit{mid})$ 和 $\\textit{solve}(\\textit{mid},j)$ ，可以写出方程：\n\n$$\n\\textit{solve}(i,j)=\n\\begin{cases}{}\n\\displaystyle \\max_{\\textit{mid} = i + 1}^{j - 1}val[i] \\times \\textit{val}[\\textit{mid}] \\times \\textit{val}[j] + \\textit{solve}(i, \\textit{mid}) + \\textit{solve}(\\textit{mid}, j) ,&i < j - 1 \\\\\n0, & i \\geq j - 1\n\\end{cases}\n$$\n\n为了防止重复计算，我们存储 $\\textit{solve}$ 的结果，使用记忆化搜索的方法优化时间复杂度。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/312/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/312/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/312/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/312/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/312/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/312/6.png)>\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<vector<int>> rec;\n    vector<int> val;\n\npublic:\n    int solve(int left, int right) {\n        if (left >= right - 1) {\n            return 0;\n        }\n        if (rec[left][right] != -1) {\n            return rec[left][right];\n        }\n        for (int i = left + 1; i < right; i++) {\n            int sum = val[left] * val[i] * val[right];\n            sum += solve(left, i) + solve(i, right);\n            rec[left][right] = max(rec[left][right], sum);\n        }\n        return rec[left][right];\n    }\n\n    int maxCoins(vector<int>& nums) {\n        int n = nums.size();\n        val.resize(n + 2);\n        for (int i = 1; i <= n; i++) {\n            val[i] = nums[i - 1];\n        }\n        val[0] = val[n + 1] = 1;\n        rec.resize(n + 2, vector<int>(n + 2, -1));\n        return solve(0, n + 1);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[][] rec;\n    public int[] val;\n\n    public int maxCoins(int[] nums) {\n        int n = nums.length;\n        val = new int[n + 2];\n        for (int i = 1; i <= n; i++) {\n            val[i] = nums[i - 1];\n        }\n        val[0] = val[n + 1] = 1;\n        rec = new int[n + 2][n + 2];\n        for (int i = 0; i <= n + 1; i++) {\n            Arrays.fill(rec[i], -1);\n        }\n        return solve(0, n + 1);\n    }\n\n    public int solve(int left, int right) {\n        if (left >= right - 1) {\n            return 0;\n        }\n        if (rec[left][right] != -1) {\n            return rec[left][right];\n        }\n        for (int i = left + 1; i < right; i++) {\n            int sum = val[left] * val[i] * val[right];\n            sum += solve(left, i) + solve(i, right);\n            rec[left][right] = Math.max(rec[left][right], sum);\n        }\n        return rec[left][right];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        n = len(nums)\n        val = [1] + nums + [1]\n        \n        @lru_cache(None)\n        def solve(left: int, right: int) -> int:\n            if left >= right - 1:\n                return 0\n            \n            best = 0\n            for i in range(left + 1, right):\n                total = val[left] * val[i] * val[right]\n                total += solve(left, i) + solve(i, right)\n                best = max(best, total)\n            \n            return best\n\n        return solve(0, n + 1)\n```\n\n```golang [sol1-Golang]\nfunc maxCoins(nums []int) int {\n    n := len(nums)\n    val := make([]int, n + 2)\n    for i := 1; i <= n; i++ {\n        val[i] = nums[i - 1]\n    }\n    val[0], val[n+1] = 1, 1\n    rec := make([][]int, n + 2)\n    for i := 0; i < len(rec); i++ {\n        rec[i] = make([]int, n + 2)\n        for j := 0; j < len(rec[i]); j++ {\n            rec[i][j] = -1\n        }\n    }\n    return solve(0, n + 1, val, rec)\n}\n\nfunc solve(left, right int, val []int, rec [][]int) int {\n    if left >= right - 1 {\n        return 0\n    }\n    if rec[left][right] != -1 {\n        return rec[left][right]\n    }\n    for i := left + 1; i < right; i++ {\n        sum := val[left] * val[i] * val[right]\n        sum += solve(left, i, val, rec) + solve(i, right, val, rec)\n        rec[left][right] = max(rec[left][right], sum)\n    }\n    return rec[left][right]\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n```C [sol1-C]\nint rec[502][502];\nint val[502];\nint solve(int left, int right) {\n    if (left >= right - 1) {\n        return 0;\n    }\n    if (rec[left][right] != -1) {\n        return rec[left][right];\n    }\n    for (int i = left + 1; i < right; i++) {\n        int sum = val[left] * val[i] * val[right];\n        sum += solve(left, i) + solve(i, right);\n        rec[left][right] = fmax(rec[left][right], sum);\n    }\n    return rec[left][right];\n}\n\nint maxCoins(int* nums, int numsSize) {\n    memset(rec, -1, sizeof(rec));\n    val[0] = val[numsSize + 1] = 1;\n    for (int i = 1; i <= numsSize; i++) {\n        val[i] = nums[i - 1];\n    }\n\n    return solve(0, numsSize + 1);\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n^3)$，其中 $n$ 是气球数量。区间数为 $n^2$，区间迭代复杂度为 $O(n)$，最终复杂度为 $O(n^2 \\times n) = O(n^3)$。\n\n* 空间复杂度：$O(n^2)$，其中 $n$ 是气球数量。缓存大小为区间的个数。\n\n#### 方法二：动态规划\n\n**思路及算法**\n\n按照方法一的思路，我们发现我们可以通过变换计算顺序，从「自顶向下」的记忆化搜索变为「自底向上」的动态规划。\n\n令 $dp[i][j]$ 表示填满开区间 $(i,j)$ 能得到的最多硬币数，那么边界条件是 $i \\geq j-1$，此时有 $dp[i][j]=0$。\n\n可以写出状态转移方程：\n\n$$\ndp[i][j]=\n\\begin{cases}{}\n\\displaystyle \\max_{k = i + 1}^{j - 1}val[i] \\times val[k] \\times val[j] + dp[i][k] + dp[k][j] ,&i < j - 1 \\\\\n0, & i \\geq j - 1\n\\end{cases}\n$$\n\n最终答案即为 $dp[0][n+1]$。实现时要注意到动态规划的次序。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxCoins(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<int>> rec(n + 2, vector<int>(n + 2));\n        vector<int> val(n + 2);\n        val[0] = val[n + 1] = 1;\n        for (int i = 1; i <= n; i++) {\n            val[i] = nums[i - 1];\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = i + 2; j <= n + 1; j++) {\n                for (int k = i + 1; k < j; k++) {\n                    int sum = val[i] * val[k] * val[j];\n                    sum += rec[i][k] + rec[k][j];\n                    rec[i][j] = max(rec[i][j], sum);\n                }\n            }\n        }\n        return rec[0][n + 1];\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int maxCoins(int[] nums) {\n        int n = nums.length;\n        int[][] rec = new int[n + 2][n + 2];\n        int[] val = new int[n + 2];\n        val[0] = val[n + 1] = 1;\n        for (int i = 1; i <= n; i++) {\n            val[i] = nums[i - 1];\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = i + 2; j <= n + 1; j++) {\n                for (int k = i + 1; k < j; k++) {\n                    int sum = val[i] * val[k] * val[j];\n                    sum += rec[i][k] + rec[k][j];\n                    rec[i][j] = Math.max(rec[i][j], sum);\n                }\n            }\n        }\n        return rec[0][n + 1];\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        n = len(nums)\n        rec = [[0] * (n + 2) for _ in range(n + 2)]\n        val = [1] + nums + [1]\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 2, n + 2):\n                for k in range(i + 1, j):\n                    total = val[i] * val[k] * val[j]\n                    total += rec[i][k] + rec[k][j]\n                    rec[i][j] = max(rec[i][j], total)\n        \n        return rec[0][n + 1]\n```\n\n```golang [sol2-Golang]\nfunc maxCoins(nums []int) int {\n    n := len(nums)\n    rec := make([][]int, n + 2)\n    for i := 0; i < n + 2; i++ {\n        rec[i] = make([]int, n + 2)\n    }\n    val := make([]int, n + 2)\n    val[0], val[n+1] = 1, 1\n    for i := 1; i <= n; i++ {\n        val[i] = nums[i-1]\n    }\n    for i := n - 1; i >= 0; i-- {\n        for j := i + 2; j <= n + 1; j++ {\n            for k := i + 1; k < j; k++ {\n                sum := val[i] * val[k] * val[j]\n                sum += rec[i][k] + rec[k][j]\n                rec[i][j] = max(rec[i][j], sum)\n            }\n        }\n    }\n    return rec[0][n+1]\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n```C [sol2-C]\nint maxCoins(int* nums, int numsSize) {\n    int rec[numsSize + 2][numsSize + 2];\n    memset(rec, 0, sizeof(rec));\n    int val[numsSize + 2];\n    val[0] = val[numsSize + 1] = 1;\n    for (int i = 1; i <= numsSize; i++) {\n        val[i] = nums[i - 1];\n    }\n    for (int i = numsSize - 1; i >= 0; i--) {\n        for (int j = i + 2; j <= numsSize + 1; j++) {\n            for (int k = i + 1; k < j; k++) {\n                int sum = val[i] * val[k] * val[j];\n                sum += rec[i][k] + rec[k][j];\n                rec[i][j] = fmax(rec[i][j], sum);\n            }\n        }\n    }\n    return rec[0][numsSize + 1];\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n^3)$，其中 $n$ 是气球数量。状态数为 $n^2$，状态转移复杂度为 $O(n)$，最终复杂度为 $O(n^2 \\times n) = O(n^3)$。\n\n* 空间复杂度：$O(n^2)$，其中 $n$ 是气球数量。"
}