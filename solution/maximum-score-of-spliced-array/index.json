{
	"titleSlug": "maximum-score-of-spliced-array",
	"slug": "by-endlesscheng-fm8l",
	"url": "https://leetcode-cn.com/problems/maximum-score-of-spliced-array/solution/by-endlesscheng-fm8l/",
	"content": "本题 [视频讲解](https://www.bilibili.com/video/BV1pW4y1r7xs) 已出炉，欢迎点赞三连~\r\n\r\n---\r\n\r\n设 $s_1 = \\sum\\limits_{i}\\textit{nums}_1[i]$。\r\n\r\n交换 $[\\textit{left},\\textit{right}]$ 范围内的元素后，对于 $\\textit{nums}'_1$ 有\r\n\r\n$$\r\n\\sum\\limits_{i}\\textit{nums}'_1[i] = s_1 - (\\textit{nums}_1[\\textit{left}] + \\cdots + \\textit{nums}_1[\\textit{right}]) + (\\textit{nums}_2[\\textit{left}] + \\cdots + \\textit{nums}_2[\\textit{right}])\r\n$$\r\n\r\n合并相同下标，等号右侧变形为\r\n\r\n$$\r\ns_1 + (\\textit{nums}_2[\\textit{left}]-\\textit{nums}_1[\\textit{left}]) + \\cdots + (\\textit{nums}_2[\\textit{right}]-\\textit{nums}_1[\\textit{right}])\r\n$$\r\n\r\n设 $\\textit{diff}[i] = \\textit{nums}_2[i]-\\textit{nums}_1[i]$，上式变为\r\n\r\n$$\r\ns_1 + \\textit{diff}[\\textit{left}] + \\cdots + \\textit{diff}[\\textit{right}]\r\n$$\r\n\r\n为了最大化上式，我们需要最大化 $\\textit{diff}$ 数组的 [53. 最大子数组和](https://leetcode.cn/problems/maximum-subarray/)（允许子数组为空）。\r\n\r\n对于 $\\textit{nums}_2$ 也同理，求这两者的最大值，即为答案。\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def solve(self, nums1: List[int], nums2: List[int]) -> int:\r\n        maxSum = s = 0\r\n        for x, y in zip(nums1, nums2):\r\n            s += y - x\r\n            if s < 0: s = 0\r\n            if s > maxSum: maxSum = s\r\n        return sum(nums1) + maxSum\r\n\r\n    def maximumsSplicedArray(self, nums1: List[int], nums2: List[int]) -> int:\r\n        return max(self.solve(nums1, nums2), self.solve(nums2, nums1))\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    public int maximumsSplicedArray(int[] nums1, int[] nums2) {\r\n        return Math.max(solve(nums1, nums2), solve(nums2, nums1));\r\n    }\r\n\r\n    int solve(int[] nums1, int[] nums2) {\r\n        int s1 = 0, maxSum = 0;\r\n        for (int i = 0, s = 0; i < nums1.length; ++i) {\r\n            s1 += nums1[i];\r\n            s = Math.max(s + nums2[i] - nums1[i], 0);\r\n            maxSum = Math.max(maxSum, s);\r\n        }\r\n        return s1 + maxSum;\r\n    }\r\n}\r\n```\r\n\r\n```cpp [sol1-C++]\r\nclass Solution {\r\n    int solve(vector<int> &nums1, vector<int> &nums2) {\r\n        int s1 = 0, maxSum = 0;\r\n        for (int i = 0, s = 0; i < nums1.size(); ++i) {\r\n            s1 += nums1[i];\r\n            s = max(s + nums2[i] - nums1[i], 0);\r\n            maxSum = max(maxSum, s);\r\n        }\r\n        return s1 + maxSum;\r\n    }\r\n\r\npublic:\r\n    int maximumsSplicedArray(vector<int> &nums1, vector<int> &nums2) {\r\n        return max(solve(nums1, nums2), solve(nums2, nums1));\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc solve(nums1, nums2 []int) int {\r\n\ts1, maxSum, s := 0, 0, 0\r\n\tfor i, x := range nums1 {\r\n\t\ts1 += x\r\n\t\ts = max(s+nums2[i]-x, 0)\r\n\t\tmaxSum = max(maxSum, s)\r\n\t}\r\n\treturn s1 + maxSum\r\n}\r\n\r\nfunc maximumsSplicedArray(nums1, nums2 []int) int {\r\n\treturn max(solve(nums1, nums2), solve(nums2, nums1))\r\n}\r\n\r\nfunc max(a, b int) int { if b > a { return b }; return a }\r\n```\r\n\r\n#### 复杂度分析\r\n\r\n- 时间复杂度：$O(n)$。\r\n- 空间复杂度：$O(1)$。仅需要几个额外的变量。\r\n"
}