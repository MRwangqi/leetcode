{
	"titleSlug": "text-justification",
	"slug": "text-justification-by-ikaruga",
	"url": "https://leetcode-cn.com/problems/text-justification/solution/text-justification-by-ikaruga/",
	"content": "### 思路\r\n1. 先取出一行能够容纳的单词，将这些单词根据规则填入一行\r\n\r\n2. 计算出**额外空格**的数量 `spaceCount`，**额外空格**就是正常书写用不到的空格\r\n    21. 由总长度算起\r\n    22. 除去每个单词末尾必须的空格，为了统一处理可以在结尾虚拟加上一个长度\r\n    23. 除去所有单词的长度\r\n\r\n![图片.png](https://pic.leetcode-cn.com/76ce03022426fbad207b21c669fd2f68ed311f1d743bad78896dbff4aff572bd-%E5%9B%BE%E7%89%87.png)\r\n\r\n\r\n3. 按照单词的间隙数量 `wordCount - 1`，对**额外空格平均分布**\r\n    > **平均分布**可查看 【[另一篇题解](https://leetcode-cn.com/circle/discuss/eXOcnD/view/SecVmv/)】，简单来说就是商和余数的计算\r\n    31. 对于每个词填充之后，需要填充的空格数量等于 `spaceSuffix + spaceAvg + ((i - bg) < spaceExtra)`\r\n        `spaceSuffix` 【单词尾部固定的空格】\r\n        `spaceAvg` 【**额外空格**的平均值，每个间隙都要填入 spaceAvg 个空格】\r\n        `((i - bg) < spaceExtra)` 【**额外空格**的余数，前 spaceExtra 个间隙需要多 1 个空格】\r\n    \r\n![图片.png](https://pic.leetcode-cn.com/a423b03e2bc1a130ec2282c398a8089c0906d731db73b5d80d42190276bc7a33-%E5%9B%BE%E7%89%87.png)\r\n\r\n4. 特殊处理\r\n    41. 一行只有一个单词，单词左对齐，右侧填满空格\r\n    42. 最后一行，所有单词左对齐，中间只有一个空格，最后一个单词右侧填满空格\r\n\r\n\r\n### 答题\r\n```C++ []\r\n    string fillWords(vector<string>& words, int bg, int ed, int maxWidth, bool lastLine = false)\r\n    {\r\n        int wordCount = ed - bg + 1;\r\n        int spaceCount = maxWidth + 1 - wordCount;  // 除去每个单词尾部空格， + 1 是最后一个单词的尾部空格的特殊处理\r\n        for (int i = bg; i <= ed; i++)\r\n        {\r\n            spaceCount -= words[i].size();  // 除去所有单词的长度\r\n        }\r\n\r\n        int spaceSuffix = 1;    // 词尾空格\r\n        int spaceAvg = (wordCount == 1) ? 1 : spaceCount / (wordCount - 1);     // 额外空格的平均值\r\n        int spaceExtra = (wordCount == 1) ? 0 : spaceCount % (wordCount - 1);   // 额外空格的余数\r\n\r\n        string ans;\r\n        for (int i = bg; i < ed; i++)\r\n        {\r\n            ans += words[i];    // 填入单词\r\n            if (lastLine)   // 特殊处理最后一行\r\n            {\r\n                fill_n(back_inserter(ans), 1, ' ');\r\n                continue;\r\n            }\r\n            fill_n(back_inserter(ans), spaceSuffix + spaceAvg + ((i - bg) < spaceExtra), ' ');  // 根据计算结果补上空格\r\n        }\r\n        ans += words[ed];   // 填入最后一个单词\r\n        fill_n(back_inserter(ans), maxWidth - ans.size(), ' '); // 补上这一行最后的空格\r\n        return ans;\r\n    }\r\n\r\n    vector<string> fullJustify(vector<string>& words, int maxWidth) \r\n    {\r\n        vector<string> ans;\r\n        int cnt = 0;\r\n        int bg = 0;\r\n        for (int i = 0; i < words.size(); i++)\r\n        {\r\n            cnt += words[i].size() + 1;\r\n\r\n            if (i + 1 == words.size() || cnt + words[i + 1].size() > maxWidth)\r\n            {   // 如果是最后一个单词，或者加上下一个词就超过长度了，即可凑成一行\r\n                ans.push_back(fillWords(words, bg, i, maxWidth, i + 1 == words.size()));\r\n                bg = i + 1;\r\n                cnt = 0;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n```\r\n```C++ []\r\n    string fillWords(vector<string>& words, int bg, int ed, int maxWidth, bool lastLine = false)\r\n    {\r\n        int wordCount = ed - bg + 1;\r\n        int spaceCount = maxWidth + 1 - wordCount;\r\n        for (int i = bg; i <= ed; i++)\r\n        {\r\n            spaceCount -= words[i].size();\r\n        }\r\n\r\n        int spaceSuffix = 1;\r\n        int spaceAvg = (wordCount == 1) ? 1 : spaceCount / (wordCount - 1);\r\n        int spaceExtra = (wordCount == 1) ? 0 : spaceCount % (wordCount - 1);\r\n\r\n        string ans;\r\n        for (int i = bg; i < ed; i++)\r\n        {\r\n            ans += words[i];\r\n            if (lastLine)\r\n            {\r\n                fill_n(back_inserter(ans), 1, ' ');\r\n                continue;\r\n            }\r\n            fill_n(back_inserter(ans), spaceSuffix + spaceAvg + ((i - bg) < spaceExtra), ' ');\r\n        }\r\n        ans += words[ed];\r\n        fill_n(back_inserter(ans), maxWidth - ans.size(), ' ');\r\n        return ans;\r\n    }\r\n\r\n    vector<string> fullJustify(vector<string>& words, int maxWidth) \r\n    {\r\n        vector<string> ans;\r\n        int cnt = 0;\r\n        int bg = 0;\r\n        for (int i = 0; i < words.size(); i++)\r\n        {\r\n            cnt += words[i].size() + 1;\r\n\r\n            if (i + 1 == words.size() || cnt + words[i + 1].size() > maxWidth)\r\n            {\r\n                ans.push_back(fillWords(words, bg, i, maxWidth, i + 1 == words.size()));\r\n                bg = i + 1;\r\n                cnt = 0;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n```\r\n\r\n\r\n### 执行时间\r\n![图片.png](https://pic.leetcode-cn.com/6e384d6a79d0173c9cc2d2e0a7af64e401307726076f87f4c7dfdf00d873d646-%E5%9B%BE%E7%89%87.png)\r\n\r\n\r\n\r\n\r\n### 致谢\r\n\r\n感谢您的观看，希望对您有帮助，欢迎热烈的交流！  \r\n\r\n**如果感觉还不错就点个赞吧~**\r\n"
}