{
	"titleSlug": "mean-of-array-after-removing-some-elements",
	"slug": "shan-chu-mou-xie-yuan-su-hou-de-shu-zu-j-8r8c",
	"url": "https://leetcode-cn.com/problems/mean-of-array-after-removing-some-elements/solution/shan-chu-mou-xie-yuan-su-hou-de-shu-zu-j-8r8c/",
	"content": "#### 方法一：排序\n\n设元素数目为 $n$，我们先对整数数组 $\\textit{arr}$ 从小到大进行排序，然后对区间 $\\big [ \\dfrac{n}{20}, \\dfrac{19n}{20} \\big )$ 内的元素进行求和，得到未删除元素的求和结果 $\\textit{partialSum}$，返回均值 $\\dfrac{\\textit{partialSum}}{0.9n}$ 。\n\n```Python [sol1-Python3]\nclass Solution:\n    def trimMean(self, arr: List[int]) -> float:\n        arr.sort()\n        n = len(arr)\n        return sum(arr[n // 20: -n // 20]) / (n * 0.9)\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    double trimMean(vector<int>& arr) {\n        int n = arr.size();\n        sort(arr.begin(), arr.end());\n        int partialSum = accumulate(arr.begin() + n / 20, arr.begin() + (19 * n / 20), 0);\n        return partialSum / (n * 0.9);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public double trimMean(int[] arr) {\n        int n = arr.length;\n        Arrays.sort(arr);\n        int partialSum = 0;\n        for (int i = n / 20; i < 19 * n / 20; i++) {\n            partialSum += arr[i];\n        }\n        return partialSum / (n * 0.9);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public double TrimMean(int[] arr) {\n        int n = arr.Length;\n        Array.Sort(arr);\n        int partialSum = 0;\n        for (int i = n / 20; i < 19 * n / 20; i++) {\n            partialSum += arr[i];\n        }\n        return partialSum / (n * 0.9);\n    }\n}\n```\n\n```C [sol1-C]\nstatic inline int cmp(const void *pa, const void *pb) {\n    return *(int *)pa - *(int *)pb;\n}\n\ndouble trimMean(int* arr, int arrSize){\n    qsort(arr, arrSize, sizeof(int), cmp);\n    int partialSum = 0;\n    for (int i = arrSize / 20; i < (19 * arrSize / 20); i++) {\n        partialSum += arr[i];\n    }\n    return partialSum / (arrSize * 0.9);\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar trimMean = function(arr) {\n    const n = arr.length;\n    arr.sort((a, b) => a - b);\n    let partialSum = 0;\n    for (let i = n / 20; i < 19 * n / 20; i++) {\n        partialSum += arr[i];\n    }\n    return partialSum / (n * 0.9);\n};\n```\n\n```go [sol1-Golang]\nfunc trimMean(arr []int) float64 {\n    sort.Ints(arr)\n    n := len(arr)\n    sum := 0\n    for _, x := range arr[n/20 : 19*n/20] {\n        sum += x\n    }\n    return float64(sum*10) / float64(n*9)\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。\n\n+ 空间复杂度：$O(\\log n)$。排序需要 $O(\\log n)$ 的栈空间。"
}