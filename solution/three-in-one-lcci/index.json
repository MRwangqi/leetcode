{
	"titleSlug": "three-in-one-lcci",
	"slug": "by-dai-v3-evnm",
	"url": "https://leetcode-cn.com/problems/three-in-one-lcci/solution/by-dai-v3-evnm/",
	"content": "思路:\n- 使用一个二维数组模拟三个栈.\n- 分别创建三个栈顶指针,每一个栈顶指针只能管理属于它的栈\n- 其次就是进行posh,pop,peek,isEmpty操作\n    - posh操作就是向栈顶添加元素\n    - pop操作就是抛出栈顶元素\n    - peek操作就是查看栈顶元素\n    - isEmpty操作就是查看栈是否为空\n----------------\n未简化的代码:\n```Java []\nclass TripleInOne {\n    private final int STACK_SIZE;   //栈大小\n    private int[] index;    //当前栈的栈顶指针\n    private int[][] stack;  //栈\n\n    public TripleInOne(int stackSize) {     //初始化操作\n        this.STACK_SIZE=stackSize;\n        this.index=new int[]{-1,-1,-1};\n        this.stack=new int[3][STACK_SIZE];\n    }\n\n    public void push(int stackNum, int value) {\n        if(index[stackNum]+1<STACK_SIZE){     //判断当前栈是否已满\n            stack[stackNum][++index[stackNum]]=value;     //向栈内添加元素\n            //index[stackNum]++;      //栈顶指针上移一位\n        }\n    }\n\n    public int pop(int stackNum) {\n        if(isEmpty(stackNum)){    //判断当前栈是否已空\n            return -1;\n        }\n        //index[stackNum]--;      //将栈顶指针向下移一位\n        return stack[stackNum][index[stackNum]--];    //返回抛出的元素\n    }\n\n    public int peek(int stackNum) {\n        if(isEmpty(stackNum)){    //判断当前栈是否已空\n            return -1;\n        }\n        return stack[stackNum][index[stackNum]];      //返回栈顶元素\n    }\n\n    public boolean isEmpty(int stackNum) {\n        return index[stackNum]==-1;     //判断当前栈是否已空\n    }\n}\n```\n-----------\n已简化的代码:\n```Java []\nclass TripleInOne {\n    private final int STACK_SIZE;   //栈大小\n    private int[] index;    //当前栈的栈顶指针\n    private int[][] stack;  //栈\n\n    public TripleInOne(int stackSize) {     //初始化操作\n        this.STACK_SIZE=stackSize;\n        this.index=new int[]{-1,-1,-1};\n        this.stack=new int[3][STACK_SIZE];\n    }\n\n    public void push(int stackNum, int value) {\n        if(index[stackNum]+1<STACK_SIZE){     //判断当前栈是否已满\n            stack[stackNum][++index[stackNum]]=value;     //向栈内添加元素\n        }\n    }\n\n    public int pop(int stackNum) {\n        return isEmpty(stackNum)?-1:stack[stackNum][index[stackNum]--];\n    }\n\n    public int peek(int stackNum) {\n        return isEmpty(stackNum)?-1:stack[stackNum][index[stackNum]];\n    }\n\n    public boolean isEmpty(int stackNum) {\n        return index[stackNum]==-1;     //判断当前栈是否已空\n    }\n}\n```\n"
}