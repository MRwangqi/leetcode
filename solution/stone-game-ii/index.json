{
	"titleSlug": "stone-game-ii",
	"slug": "java-dong-tai-gui-hua-qing-xi-yi-dong-17xing-by-lg",
	"url": "https://leetcode-cn.com/problems/stone-game-ii/solution/java-dong-tai-gui-hua-qing-xi-yi-dong-17xing-by-lg/",
	"content": "# 思路\n本题很明显要用记忆化搜索或者动态规划来求解，如果直接使用动态规划的话，我们要想清楚有哪些子状态需要存储。\n\n首先一定要存储的是取到**某一个位置**时，已经得到的最大值或者后面能得到的最大值，但是光有位置是不够的，相同的位置有不同数量的堆可以取，所以我们还需存储**当前的M值**。\n\n由于本题中的状态是从后往前递推的，如：假如最后只剩一堆，一定能算出来最佳方案，但是剩很多堆时不好算（依赖后面的状态）。所以我们选择从后往前递推。\n\n# 递推公式\n有了思路之后，我们就能很方便地定义dp数组了：\n\n**dp[i][j]表示剩余[i : len - 1]堆时，M = j的情况下，先取的人能获得的最多石子数**\n\n1. i + 2M >= len, dp[i][M] = sum[i : len - 1], 剩下的堆数能够直接全部取走，那么最优的情况就是剩下的石子总和\n2. i + 2M < len, dp[i][M] = max(dp[i][M], sum[i : len - 1] - dp[i + x][max(M, x)]), 其中 1 <= x <= 2M，剩下的堆数不能全部取走，那么最优情况就是让下一个人取的更少。对于我所有的x取值，下一个人从x开始取起，M变为max(M, x)，所以下一个人能取dp[i + x][max(M, x)]，我最多能取sum[i : len - 1] - dp[i + x][max(M, x)]。\n\n# 示例演示\n对于piles = [2,7,9,4,4]，我们可以得到下图所示的dp数组，结果为dp[0][1]\n![image.png](https://pic.leetcode-cn.com/27f0f8e5f8fb09bad12163e6bd3cfa22300144a626032199e29b8c66d37fb615-image.png)\n是不是非常清晰呢\n\n# 代码\n有了递推公式之后，代码就很好写了：\n```java []\npublic int stoneGameII(int[] piles) {\n    int len = piles.length, sum = 0;\n    int[][] dp = new int[len][len + 1];\n    for (int i = len - 1; i >= 0; i--) {\n        sum += piles[i];\n        for (int M = 1; M <= len; M++) {\n            if (i + 2 * M >= len) {\n                dp[i][M] = sum;\n            } else {\n                for (int x = 1; x <= 2 * M; x++) {\n                    dp[i][M] = Math.max(dp[i][M], sum - dp[i + x][Math.max(M, x)]);\n                }\n            }\n        }\n    }\n    return dp[0][1];\n}\n```\n\n\n"
}