{
	"titleSlug": "reverse-string-ii",
	"slug": "fan-zhuan-zi-fu-chuan-ii-by-leetcode-sol-ua7s",
	"url": "https://leetcode-cn.com/problems/reverse-string-ii/solution/fan-zhuan-zi-fu-chuan-ii-by-leetcode-sol-ua7s/",
	"content": "#### 方法一：模拟\n\n我们直接按题意进行模拟：反转每个下标从 $2k$ 的倍数开始的，长度为 $k$ 的子串。若该子串长度不足 $k$，则反转整个子串。\n\n```Python [sol1-Python3]\nclass Solution:\n    def reverseStr(self, s: str, k: int) -> str:\n        t = list(s)\n        for i in range(0, len(t), 2 * k):\n            t[i: i + k] = reversed(t[i: i + k])\n        return \"\".join(t)\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string reverseStr(string s, int k) {\n        int n = s.length();\n        for (int i = 0; i < n; i += 2 * k) {\n            reverse(s.begin() + i, s.begin() + min(i + k, n));\n        }\n        return s;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String reverseStr(String s, int k) {\n        int n = s.length();\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < n; i += 2 * k) {\n            reverse(arr, i, Math.min(i + k, n) - 1);\n        }\n        return new String(arr);\n    }\n\n    public void reverse(char[] arr, int left, int right) {\n        while (left < right) {\n            char temp = arr[left];\n            arr[left] = arr[right];\n            arr[right] = temp;\n            left++;\n            right--;\n        }\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string ReverseStr(string s, int k) {\n        int n = s.Length;\n        char[] arr = s.ToCharArray();\n        for (int i = 0; i < n; i += 2 * k) {\n            Reverse(arr, i, Math.Min(i + k, n) - 1);\n        }\n        return new string(arr);\n    }\n\n    public void Reverse(char[] arr, int left, int right) {\n        while (left < right) {\n            char temp = arr[left];\n            arr[left] = arr[right];\n            arr[right] = temp;\n            left++;\n            right--;\n        }\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc reverseStr(s string, k int) string {\n    t := []byte(s)\n    for i := 0; i < len(s); i += 2 * k {\n        sub := t[i:min(i+k, len(s))]\n        for j, n := 0, len(sub); j < n/2; j++ {\n            sub[j], sub[n-1-j] = sub[n-1-j], sub[j]\n        }\n    }\n    return string(t)\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar reverseStr = function(s, k) {\n    const n = s.length;\n    const arr = Array.from(s);\n    for (let i = 0; i < n; i += 2 * k) {\n        reverse(arr, i, Math.min(i + k, n) - 1);\n    }\n    return arr.join('');\n};\n\nconst reverse = (arr, left, right) => {\n    while (left < right) {\n        const temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n        left++;\n        right--;\n    }\n}\n```\n\n```C [sol1-C]\nvoid swap(char* a, char* b) {\n    char tmp = *a;\n    *a = *b, *b = tmp;\n}\n\nvoid reverse(char* l, char* r) {\n    while (l < r) {\n        swap(l++, --r);\n    }\n}\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n\nchar* reverseStr(char* s, int k) {\n    int n = strlen(s);\n    for (int i = 0; i < n; i += 2 * k) {\n        reverse(&s[i], &s[min(i + k, n)]);\n    }\n    return s;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度。\n\n- 空间复杂度：$O(1)$ 或 $O(n)$，取决于使用的语言中字符串类型的性质。如果字符串是可修改的，那么我们可以直接在原字符串上修改，空间复杂度为 $O(1)$，否则需要使用 $O(n)$ 的空间将字符串临时转换为可以修改的数据结构（例如数组），空间复杂度为 $O(n)$。"
}