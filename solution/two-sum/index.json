{
	"titleSlug": "two-sum",
	"slug": "liang-shu-zhi-he-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/",
	"content": "### 📺 视频题解  \n![1.两数之和.mp4](4547de8a-5963-4caf-9281-c22ee751ab12)\n\n### 📖 文字题解\n#### 方法一：暴力枚举\n\n**思路及算法**\n\n最容易想到的方法是枚举数组中的每一个数 `x`，寻找数组中是否存在 `target - x`。\n\n当我们使用遍历整个数组的方式寻找 `target - x` 时，需要注意到每一个位于 `x` 之前的元素都已经和 `x` 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 `x` 后面的元素中寻找 `target - x`。\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int n = nums.length;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (nums[i] + nums[j] == target) {\n                    return new int[]{i, j};\n                }\n            }\n        }\n        return new int[0];\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (nums[i] + nums[j] == target) {\n                    return {i, j};\n                }\n            }\n        }\n        return {};\n    }\n};\n```\n\n```C [sol1-C]\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    for (int i = 0; i < numsSize; ++i) {\n        for (int j = i + 1; j < numsSize; ++j) {\n            if (nums[i] + nums[j] == target) {\n                int* ret = malloc(sizeof(int) * 2);\n                ret[0] = i, ret[1] = j;\n                *returnSize = 2;\n                return ret;\n            }\n        }\n    }\n    *returnSize = 0;\n    return NULL;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        n = len(nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        \n        return []\n```\n\n```Golang [sol1-Golang]\nfunc twoSum(nums []int, target int) []int {\n    for i, x := range nums {\n        for j := i + 1; j < len(nums); j++ {\n            if x+nums[j] == target {\n                return []int{i, j}\n            }\n        }\n    }\n    return nil\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N^2)$，其中 $N$ 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：哈希表\n\n**思路及算法**\n\n注意到方法一的时间复杂度较高的原因是寻找 `target - x` 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。\n\n使用哈希表，可以将寻找 `target - x` 的时间复杂度降低到从 $O(N)$ 降低到 $O(1)$。\n\n这样我们创建一个哈希表，对于每一个 `x`，我们首先查询哈希表中是否存在 `target - x`，然后将 `x` 插入到哈希表中，即可保证不会让 `x` 和自己匹配。\n\n**代码**\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> hashtable = new HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.length; ++i) {\n            if (hashtable.containsKey(target - nums[i])) {\n                return new int[]{hashtable.get(target - nums[i]), i};\n            }\n            hashtable.put(nums[i], i);\n        }\n        return new int[0];\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> hashtable;\n        for (int i = 0; i < nums.size(); ++i) {\n            auto it = hashtable.find(target - nums[i]);\n            if (it != hashtable.end()) {\n                return {it->second, i};\n            }\n            hashtable[nums[i]] = i;\n        }\n        return {};\n    }\n};\n```\n\n```C [sol2-C]\nstruct hashTable {\n    int key;\n    int val;\n    UT_hash_handle hh;\n};\n\nstruct hashTable* hashtable;\n\nstruct hashTable* find(int ikey) {\n    struct hashTable* tmp;\n    HASH_FIND_INT(hashtable, &ikey, tmp);\n    return tmp;\n}\n\nvoid insert(int ikey, int ival) {\n    struct hashTable* it = find(ikey);\n    if (it == NULL) {\n        struct hashTable* tmp = malloc(sizeof(struct hashTable));\n        tmp->key = ikey, tmp->val = ival;\n        HASH_ADD_INT(hashtable, key, tmp);\n    } else {\n        it->val = ival;\n    }\n}\n\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    hashtable = NULL;\n    for (int i = 0; i < numsSize; i++) {\n        struct hashTable* it = find(target - nums[i]);\n        if (it != NULL) {\n            int* ret = malloc(sizeof(int) * 2);\n            ret[0] = it->val, ret[1] = i;\n            *returnSize = 2;\n            return ret;\n        }\n        insert(nums[i], i);\n    }\n    *returnSize = 0;\n    return NULL;\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        hashtable = dict()\n        for i, num in enumerate(nums):\n            if target - num in hashtable:\n                return [hashtable[target - num], i]\n            hashtable[nums[i]] = i\n        return []\n```\n\n```Golang [sol2-Golang]\nfunc twoSum(nums []int, target int) []int {\n    hashTable := map[int]int{}\n    for i, x := range nums {\n        if p, ok := hashTable[target-x]; ok {\n            return []int{p, i}\n        }\n        hashTable[x] = i\n    }\n    return nil\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是数组中的元素数量。对于每一个元素 `x`，我们可以 $O(1)$ 地寻找 `target - x`。\n\n- 空间复杂度：$O(N)$，其中 $N$ 是数组中的元素数量。主要为哈希表的开销。\n"
}