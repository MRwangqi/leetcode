{
	"titleSlug": "valid-triangle-number",
	"slug": "you-xiao-san-jiao-xing-de-ge-shu-by-leet-t2td",
	"url": "https://leetcode-cn.com/problems/valid-triangle-number/solution/you-xiao-san-jiao-xing-de-ge-shu-by-leet-t2td/",
	"content": "#### 方法一：排序 + 二分查找\n\n**思路与算法**\n\n对于正整数 $a, b, c$，它们可以作为三角形的三条边，当且仅当：\n\n$$\n\\begin{cases}\na + b > c \\\\\na + c > b \\\\\nb + c > a\n\\end{cases}\n$$\n\n均成立。如果我们将三条边进行升序排序，使它们满足 $a \\leq b \\leq c$，那么 $a + c > b$ 和 $b + c > a$ 使一定成立的，我们只需要保证 $a + b > c$。\n\n因此，我们可以将数组 $\\textit{nums}$ 进行升序排序，随后使用二重循环枚举 $a$ 和 $b$。设 $a = \\textit{nums}[i], b = \\textit{nums}[j]$，为了防止重复统计答案，我们需要保证 $i < j$。剩余的边 $c$ 需要满足 $c < \\textit{nums}[i] + \\textit{nums}[j]$，我们可以在 $[j + 1, n - 1]$ 的下标范围内使用二分查找（其中 $n$ 是数组 $\\textit{nums}$ 的长度），找出最大的满足 $\\textit{nums}[k] < \\textit{nums}[i] + \\textit{nums}[j]$ 的下标 $k$，这样一来，在 $[j + 1, k]$ 范围内的下标都可以作为边 $c$ 的下标，我们将该范围的长度 $k - j$ 累加入答案。\n\n当枚举完成后，我们返回累加的答案即可。\n\n**细节**\n\n注意到题目描述中 $\\textit{nums}$ 包含的元素为**非负整数**，即除了正整数以外，$\\textit{nums}$ 还会包含 $0$。但如果我们将 $\\textit{nums}$ 进行升序排序，那么在枚举 $a$ 和 $b$ 时出现了 $0$，那么 $\\textit{nums}[i]$ 一定为 $0$。此时，边 $c$ 需要满足 $c < \\textit{nums}[i] + \\textit{nums}[j] = \\textit{nums}[j]$，而下标在 $[j + 1, n - 1]$ 范围内的元素一定都是大于等于 $\\textit{nums}[j]$ 的，因此二分查找会失败。若二分查找失败，我们可以令 $k = j$，此时对应的范围长度 $k - j = 0$，我们也就保证了答案的正确性。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int triangleNumber(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                int left = j + 1, right = n - 1, k = j;\n                while (left <= right) {\n                    int mid = (left + right) / 2;\n                    if (nums[mid] < nums[i] + nums[j]) {\n                        k = mid;\n                        left = mid + 1;\n                    }\n                    else {\n                        right = mid - 1;\n                    }\n                }\n                ans += k - j;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int triangleNumber(int[] nums) {\n        int n = nums.length;\n        Arrays.sort(nums);\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                int left = j + 1, right = n - 1, k = j;\n                while (left <= right) {\n                    int mid = (left + right) / 2;\n                    if (nums[mid] < nums[i] + nums[j]) {\n                        k = mid;\n                        left = mid + 1;\n                    } else {\n                        right = mid - 1;\n                    }\n                }\n                ans += k - j;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int TriangleNumber(int[] nums) {\n        int n = nums.Length;\n        Array.Sort(nums);\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                int left = j + 1, right = n - 1, k = j;\n                while (left <= right) {\n                    int mid = (left + right) / 2;\n                    if (nums[mid] < nums[i] + nums[j]) {\n                        k = mid;\n                        left = mid + 1;\n                    } else {\n                        right = mid - 1;\n                    }\n                }\n                ans += k - j;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        nums.sort()\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                left, right, k = j + 1, n - 1, j\n                while left <= right:\n                    mid = (left + right) // 2\n                    if nums[mid] < nums[i] + nums[j]:\n                        k = mid\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                ans += k - j\n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar triangleNumber = function(nums) {\n    const n = nums.length;\n    nums.sort((a, b) => a - b);\n    let ans = 0;\n    for (let i = 0; i < n; ++i) {\n        for (let j = i + 1; j < n; ++j) {\n            let left = j + 1, right = n - 1, k = j;\n            while (left <= right) {\n                const mid = Math.floor((left + right) / 2);\n                if (nums[mid] < nums[i] + nums[j]) {\n                    k = mid;\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n            ans += k - j;\n        }\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc triangleNumber(nums []int) (ans int) {\n    sort.Ints(nums)\n    for i, v := range nums {\n        for j := i + 1; j < len(nums); j++ {\n            ans += sort.SearchInts(nums[j+1:], v+nums[j])\n        }\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint cmp(int *a, int *b) {\n    return *a - *b;\n}\n\nint triangleNumber(int* nums, int numsSize) {\n    qsort(nums, numsSize, sizeof(int), cmp);\n    int ans = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        for (int j = i + 1; j < numsSize; ++j) {\n            int left = j + 1, right = numsSize - 1, k = j;\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                if (nums[mid] < nums[i] + nums[j]) {\n                    k = mid;\n                    left = mid + 1;\n                }\n                else {\n                    right = mid - 1;\n                }\n            }\n            ans += k - j;\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2 \\log n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。我们需要 $O(n \\log n)$ 的时间对数组 $\\textit{nums}$ 进行排序，随后需要 $O(n^2 \\log n)$ 的时间使用二重循环枚举 $a, b$ 的下标以及使用二分查找得到 $c$ 的下标范围。\n\n- 空间复杂度：$O(\\log n)$，即为排序需要的栈空间。\n\n#### 方法二：排序 + 双指针\n\n**思路与算法**\n\n我们可以对方法一进行优化。\n\n我们将当 $a = \\textit{nums}[i], b = \\textit{nums}[j]$ 时，最大的满足 $\\textit{nums}[k] < \\textit{nums}[i] + \\textit{nums}[j]$ 的下标 $k$ 记为 $k_{i, j}$。可以发现，如果我们固定 $i$，那么随着 $j$ 的递增，不等式右侧 $\\textit{nums}[i] + \\textit{nums}[j]$ 也是递增的，因此 $k_{i, j}$ 也是递增的。\n\n这样一来，我们就可以将 $j$ 和 $k$ 看成两个同向（递增）移动的指针，将方法一进行如下的优化：\n\n- 我们使用一重循环枚举 $i$。当 $i$ 固定时，我们使用双指针同时维护 $j$ 和 $k$，它们的初始值均为 $i$；\n\n- 我们每一次将 $j$ 向右移动一个位置，即 $j \\leftarrow j+1$，并尝试不断向右移动 $k$，使得 $k$ 是最大的满足 $\\textit{nums}[k] < \\textit{nums}[i] + \\textit{nums}[j]$ 的下标。我们将 $\\max(k - j, 0)$ 累加入答案。\n\n当枚举完成后，我们返回累加的答案即可。\n\n**细节**\n\n与方法一中「二分查找的失败」类似，方法二的双指针中，也会出现不存在满足 $\\textit{nums}[k] < \\textit{nums}[i] + \\textit{nums}[j]$ 的下标的情况。此时，指针 $k$ 不会出现在指针 $j$ 的右侧，即 $k - j \\leq 0$，因此我们需要将 $k - j$ 与 $0$ 中的较大值累加入答案，防止错误的负数出现。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int triangleNumber(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            int k = i;\n            for (int j = i + 1; j < n; ++j) {\n                while (k + 1 < n && nums[k + 1] < nums[i] + nums[j]) {\n                    ++k;\n                }\n                ans += max(k - j, 0);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int triangleNumber(int[] nums) {\n        int n = nums.length;\n        Arrays.sort(nums);\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            int k = i;\n            for (int j = i + 1; j < n; ++j) {\n                while (k + 1 < n && nums[k + 1] < nums[i] + nums[j]) {\n                    ++k;\n                }\n                ans += Math.max(k - j, 0);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int TriangleNumber(int[] nums) {\n        int n = nums.Length;\n        Array.Sort(nums);\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            int k = i;\n            for (int j = i + 1; j < n; ++j) {\n                while (k + 1 < n && nums[k + 1] < nums[i] + nums[j]) {\n                    ++k;\n                }\n                ans += Math.Max(k - j, 0);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        nums.sort()\n        ans = 0\n        for i in range(n):\n            k = i\n            for j in range(i + 1, n):\n                while k + 1 < n and nums[k + 1] < nums[i] + nums[j]:\n                    k += 1\n                ans += max(k - j, 0)\n        return ans\n```\n\n```JavaScript [sol2-JavaScript]\nvar triangleNumber = function(nums) {\n    const n = nums.length;\n    nums.sort((a, b) => a - b);\n    let ans = 0;\n    for (let i = 0; i < n; ++i) {\n        let k = i;\n        for (let j = i + 1; j < n; ++j) {\n            while (k + 1 < n && nums[k + 1] < nums[i] + nums[j]) {\n                ++k;\n            }\n            ans += Math.max(k - j, 0);\n        }\n    }\n    return ans;\n};\n```\n\n```go [sol2-Golang]\nfunc triangleNumber(nums []int) (ans int) {\n    n := len(nums)\n    sort.Ints(nums)\n    for i, v := range nums {\n        k := i\n        for j := i + 1; j < n; j++ {\n            for k+1 < n && nums[k+1] < v+nums[j] {\n                k++\n            }\n            ans += max(k-j, 0)\n        }\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol2-C]\nint cmp(int *a, int *b) {\n    return *a - *b;\n}\n\nint triangleNumber(int* nums, int numsSize) {\n    qsort(nums, numsSize, sizeof(int), cmp);\n    int ans = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        int k = i;\n        for (int j = i + 1; j < numsSize; ++j) {\n            while (k + 1 < numsSize && nums[k + 1] < nums[i] + nums[j]) {\n                ++k;\n            }\n            ans += fmax(k - j, 0);\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。我们需要 $O(n \\log n)$ 的时间对数组 $\\textit{nums}$ 进行排序，随后需要 $O(n^2)$ 的时间使用一重循环枚举 $a$ 的下标以及使用双指针维护 $b, c$ 的下标。\n\n- 空间复杂度：$O(\\log n)$，即为排序需要的栈空间。"
}