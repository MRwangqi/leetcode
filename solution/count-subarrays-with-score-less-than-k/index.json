{
	"titleSlug": "count-subarrays-with-score-less-than-k",
	"slug": "by-endlesscheng-b120",
	"url": "https://leetcode-cn.com/problems/count-subarrays-with-score-less-than-k/solution/by-endlesscheng-b120/",
	"content": "双指针使用前提：\r\n\r\n1. 子数组（连续）；\r\n2. 有单调性。本题元素均为正数，这意味着只要某个子数组满足题目要求，在该子数组内的更短的子数组同样也满足题目要求。\r\n\r\n做法：枚举子数组右端点，去看对应的合法左端点的个数，那么根据上面的前提 2，我们需要求出合法左端点的最小值。\r\n\r\n#### 复杂度分析\r\n\r\n- 时间复杂度：$O(n)$，其中 $n$ 是 $\\textit{nums}$ 的长度。\r\n- 空间复杂度：$O(1)$。仅需要几个额外的变量。\r\n\r\n```Python [sol1-Python3]\r\nclass Solution:\r\n    def countSubarrays(self, nums: List[int], k: int) -> int:\r\n        ans = s = left = 0\r\n        for right, num in enumerate(nums):\r\n            s += num\r\n            while s * (right - left + 1) >= k:\r\n                s -= nums[left]\r\n                left += 1\r\n            ans += right - left + 1\r\n        return ans\r\n```\r\n\r\n```java [sol1-Java]\r\nclass Solution {\r\n    public long countSubarrays(int[] nums, long k) {\r\n        long ans = 0L, sum = 0L;\r\n        for (int left = 0, right = 0; right < nums.length; right++) {\r\n            sum += nums[right];\r\n            while (sum * (right - left + 1) >= k)\r\n                sum -= nums[left++];\r\n            ans += right - left + 1;\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n```\r\n\r\n```C++ [sol1-C++]\r\nclass Solution {\r\npublic:\r\n    long long countSubarrays(vector<int> &nums, long long k) {\r\n        long ans = 0L, sum = 0L;\r\n        for (int left = 0, right = 0; right < nums.size(); ++right) {\r\n            sum += nums[right];\r\n            while (sum * (right - left + 1) >= k)\r\n                sum -= nums[left++];\r\n            ans += right - left + 1;\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc countSubarrays(nums []int, k int64) (ans int64) {\r\n\tsum, left := int64(0), 0\r\n\tfor right, num := range nums {\r\n\t\tsum += int64(num)\r\n\t\tfor sum*int64(right-left+1) >= k {\r\n\t\t\tsum -= int64(nums[left])\r\n\t\t\tleft++\r\n\t\t}\r\n\t\tans += int64(right - left + 1)\r\n\t}\r\n\treturn\r\n}\r\n```\r\n\r\n"
}