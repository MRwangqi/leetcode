{
	"titleSlug": "shopping-offers",
	"slug": "da-li-bao-by-leetcode-solution-p1ww",
	"url": "https://leetcode-cn.com/problems/shopping-offers/solution/da-li-bao-by-leetcode-solution-p1ww/",
	"content": "#### 方法一：记忆化搜索\n\n**思路**\n\n首先，我们过滤掉不需要计算的大礼包。\n\n如果大礼包完全没有优惠（大礼包的价格大于等于原价购买大礼包内所有物品的价格），或者大礼包内不包含任何的物品，那么购买这些大礼包不可能使整体价格降低。因此，我们可以不考虑这些大礼包，并将它们过滤掉，以提高效率和方便编码。\n\n因为题目规定了「不能购买超出购物清单指定数量的物品」，所以只要我们购买过滤后的大礼包，都一定可以令整体价格降低。\n\n然后，我们计算满足购物清单所需花费的最低价格。\n\n因为 $1 \\le \\textit{needs} \\le 6$ 和 $0 \\le needs[i] \\le 10$，所以最多只有 $11^6 = 1771561$ 种不同的购物清单 $\\textit{needs}$。我们可以将所有可能的购物清单作为状态，并考虑这些状态之间相互转移的方法。\n\n用 $\\textit{dp}[\\textit{needs}]$ 表示满足购物清单 $\\textit{needs}$ 所需花费的最低价格。在进行状态转移时，我们考虑在满足购物清单 $\\textit{needs}$ 时的最后一次购买；其中，将原价购买购物清单中的所有物品也视作一次购买。具体地，有以下两种情况：\n\n- 第一种情况是购买大礼包，此时状态转移方程为：\n\n  $$\n  \\textit{dp}[\\textit{needs}] = \\min_{i \\in K} \\{\\textit{price}_i + \\textit{dp}[\\textit{needs} - \\textit{needs}_i]\\}\n  $$\n\n  其中，$K$ 表示所有可以购买的大礼包的下标集合，$i$ 表示其中一个大礼包的下标，$\\textit{price}_i$ 表示第 $i$ 个大礼包的价格，$\\textit{needs}_i$ 表示大礼包中包含的物品清单，$\\textit{needs} - \\textit{needs}_i$ 表示购物清单 $\\textit{needs}$ 减去第 $i$ 个大礼包中包含的物品清单后剩余的物品清单。\n\n- 第二种情况是不购买任何大礼包，原价购买购物清单中的所有物品，此时 $\\textit{dp}[\\textit{needs}]$ 可以直接求出。\n\n$\\textit{dp}[\\textit{needs}]$ 为这两种情况的最小值。\n\n**算法**\n\n因为大礼包中可能包含多个物品，所以并不是所有状态都可以得到。因此，我们使用记忆化搜索而不是完全遍历的方法，来计算出满足每个购物清单 $\\textit{needs}$  所需花费的最低价格。\n\n具体地，在计算满足当前购物清单 $\\textit{cur\\_needs}$ 所需花费的最低价格 $\\textit{min\\_price}$ 时，我们可以采用如下方法：\n\n- 将 $\\textit{min\\_price}$ 初始化为原价购买购物清单 $\\textit{cur\\_needs}$ 中的所有物品的花费；\n\n- 逐个遍历所有可以购买的大礼包，不妨设当前遍历的大礼包为 $\\textit{cur\\_special}$，其价格为 $\\textit{special\\_price}$：\n\n  - 计算购买大礼包 $\\textit{cur\\_special}$ 后新的购物清单 $\\textit{nxt\\_needs}$，并递归地计算满足购物清单 $\\textit{nxt\\_needs}$ 所需花费的最低价格 $\\textit{nxt\\_price}$；\n\n  - 计算满足当前购物清单 $\\textit{cur\\_needs}$ 所需花费的最低价格 $\\textit{cur\\_price} = \\textit{special\\_price} + \\textit{nxt\\_price}$；\n\n  - 如果 $\\textit{cur\\_price} < \\textit{min\\_price}$，则将 $\\textit{min\\_price}$ 更新为 $\\textit{cur\\_price}$。\n\n- 返回计算满足购物清单 $\\textit{cur\\_needs}$ 所需花费的最低价格 $\\textit{min\\_price}$。\n\n**细节**\n\n我们也可以考虑使用状态压缩的方法来存储购物清单 $\\textit{needs}$。但是因为购物清单中每种物品都可能有 $[0,10]$ 个，使用状态压缩需要设计一个相对复杂的方法来解决计算状态变化以及比较状态大小的问题，性价比较低，所以在这里不使用状态压缩的方法，感兴趣的读者可以自行实现。\n\n**代码**\n\n```Python [sol1-Python3]\nfrom functools import lru_cache\n\nclass Solution:\n    def shoppingOffers(self, price: List[int], special: List[List[int]], needs: List[int]) -> int:\n        n = len(price)\n\n        # 过滤不需要计算的大礼包，只保留需要计算的大礼包\n        filter_special = []\n        for sp in special:\n            if sum(sp[i] for i in range(n)) > 0 and sum(sp[i] * price[i] for i in range(n)) > sp[-1]:\n                filter_special.append(sp)\n\n        # 记忆化搜索计算满足购物清单所需花费的最低价格\n        @lru_cache(None)\n        def dfs(cur_needs):\n            # 不购买任何大礼包，原价购买购物清单中的所有物品\n            min_price = sum(need * price[i] for i, need in enumerate(cur_needs))\n            for cur_special in filter_special:\n                special_price = cur_special[-1]\n                nxt_needs = []\n                for i in range(n):\n                    if cur_special[i] > cur_needs[i]:  # 不能购买超出购物清单指定数量的物品\n                        break\n                    nxt_needs.append(cur_needs[i] - cur_special[i])\n                if len(nxt_needs) == n:  # 大礼包可以购买\n                    min_price = min(min_price, dfs(tuple(nxt_needs)) + special_price)\n            return min_price\n\n        return dfs(tuple(needs))\n```\n\n```Java [sol1-Java]\nclass Solution {\n    Map<List<Integer>, Integer> memo = new HashMap<List<Integer>, Integer>();\n\n    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {\n        int n = price.size();\n\n        // 过滤不需要计算的大礼包，只保留需要计算的大礼包\n        List<List<Integer>> filterSpecial = new ArrayList<List<Integer>>();\n        for (List<Integer> sp : special) {\n            int totalCount = 0, totalPrice = 0;\n            for (int i = 0; i < n; ++i) {\n                totalCount += sp.get(i);\n                totalPrice += sp.get(i) * price.get(i);\n            }\n            if (totalCount > 0 && totalPrice > sp.get(n)) {\n                filterSpecial.add(sp);\n            }\n        }\n\n        return dfs(price, special, needs, filterSpecial, n);\n    }\n\n    // 记忆化搜索计算满足购物清单所需花费的最低价格\n    public int dfs(List<Integer> price, List<List<Integer>> special, List<Integer> curNeeds, List<List<Integer>> filterSpecial, int n) {\n        if (!memo.containsKey(curNeeds)) {\n            int minPrice = 0;\n            for (int i = 0; i < n; ++i) {\n                minPrice += curNeeds.get(i) * price.get(i); // 不购买任何大礼包，原价购买购物清单中的所有物品\n            }\n            for (List<Integer> curSpecial : filterSpecial) {\n                int specialPrice = curSpecial.get(n);\n                List<Integer> nxtNeeds = new ArrayList<Integer>();\n                for (int i = 0; i < n; ++i) {\n                    if (curSpecial.get(i) > curNeeds.get(i)) { // 不能购买超出购物清单指定数量的物品\n                        break;\n                    }\n                    nxtNeeds.add(curNeeds.get(i) - curSpecial.get(i));\n                }\n                if (nxtNeeds.size() == n) { // 大礼包可以购买\n                    minPrice = Math.min(minPrice, dfs(price, special, nxtNeeds, filterSpecial, n) + specialPrice);\n                }\n            }\n            memo.put(curNeeds, minPrice);\n        }\n        return memo.get(curNeeds);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    Dictionary<IList<int>, int> memo = new Dictionary<IList<int>, int>();\n\n    public int ShoppingOffers(IList<int> price, IList<IList<int>> special, IList<int> needs) {\n        int n = price.Count;\n\n        // 过滤不需要计算的大礼包，只保留需要计算的大礼包\n        IList<IList<int>> filterSpecial = new List<IList<int>>();\n        foreach (IList<int> sp in special) {\n            int totalCount = 0, totalPrice = 0;\n            for (int i = 0; i < n; ++i) {\n                totalCount += sp[i];\n                totalPrice += sp[i] * price[i];\n            }\n            if (totalCount > 0 && totalPrice > sp[n]) {\n                filterSpecial.Add(sp);\n            }\n        }\n\n        return DFS(price, special, needs, filterSpecial, n);\n    }\n\n    // 记忆化搜索计算满足购物清单所需花费的最低价格\n    public int DFS(IList<int> price, IList<IList<int>> special, IList<int> curNeeds, IList<IList<int>> filterSpecial, int n) {\n        if (!memo.ContainsKey(curNeeds)) {\n            int minPrice = 0;\n            for (int i = 0; i < n; ++i) {\n                minPrice += curNeeds[i] * price[i]; // 不购买任何大礼包，原价购买购物清单中的所有物品\n            }\n            foreach (IList<int> curSpecial in filterSpecial) {\n                int specialPrice = curSpecial[n];\n                IList<int> nxtNeeds = new List<int>();\n                for (int i = 0; i < n; ++i) {\n                    if (curSpecial[i] > curNeeds[i]) { // 不能购买超出购物清单指定数量的物品\n                        break;\n                    }\n                    nxtNeeds.Add(curNeeds[i] - curSpecial[i]);\n                }\n                if (nxtNeeds.Count == n) { // 大礼包可以购买\n                    minPrice = Math.Min(minPrice, DFS(price, special, nxtNeeds, filterSpecial, n) + specialPrice);\n                }\n            }\n            memo.Add(curNeeds, minPrice);\n        }\n        return memo[curNeeds];\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    map<vector<int>, int> memo;\n\n    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {\n        int n = price.size();\n\n        // 过滤不需要计算的大礼包，只保留需要计算的大礼包\n        vector<vector<int>> filterSpecial;\n        for (auto & sp : special) {\n            int totalCount = 0, totalPrice = 0;\n            for (int i = 0; i < n; ++i) {\n                totalCount += sp[i];\n                totalPrice += sp[i] * price[i];\n            }\n            if (totalCount > 0 && totalPrice > sp[n]) {\n                filterSpecial.emplace_back(sp);\n            }\n        }\n\n        return dfs(price, special, needs, filterSpecial, n);\n    }\n\n    // 记忆化搜索计算满足购物清单所需花费的最低价格\n    int dfs(vector<int> price,const vector<vector<int>> & special, vector<int> curNeeds, vector<vector<int>> & filterSpecial, int n) {\n        if (!memo.count(curNeeds)) {\n            int minPrice = 0;\n            for (int i = 0; i < n; ++i) {\n                minPrice += curNeeds[i] * price[i]; // 不购买任何大礼包，原价购买购物清单中的所有物品\n            }\n            for (auto & curSpecial : filterSpecial) {\n                int specialPrice = curSpecial[n];\n                vector<int> nxtNeeds;\n                for (int i = 0; i < n; ++i) {\n                    if (curSpecial[i] > curNeeds[i]) { // 不能购买超出购物清单指定数量的物品\n                        break;\n                    }\n                    nxtNeeds.emplace_back(curNeeds[i] - curSpecial[i]);\n                }\n                if (nxtNeeds.size() == n) { // 大礼包可以购买\n                    minPrice = min(minPrice, dfs(price, special, nxtNeeds, filterSpecial, n) + specialPrice);\n                }\n            }\n            memo[curNeeds] = minPrice;\n        }\n        return memo[curNeeds];\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar shoppingOffers = function(price, special, needs) {\n    const memo = new Map();\n\n    // 记忆化搜索计算满足购物清单所需花费的最低价格\n    const dfs = (price, special, curNeeds, filterSpecial, n) => {\n        if (!memo.has(curNeeds)) {\n            let minPrice = 0;\n            for (let i = 0; i < n; ++i) {\n                minPrice += curNeeds[i] * price[i]; // 不购买任何大礼包，原价购买购物清单中的所有物品\n            }\n            for (const curSpecial of filterSpecial) {\n                const specialPrice = curSpecial[n];\n                const nxtNeeds = [];\n                for (let i = 0; i < n; ++i) {\n                    if (curSpecial[i] > curNeeds[i]) { // 不能购买超出购物清单指定数量的物品\n                        break;\n                    }\n                    nxtNeeds.push(curNeeds[i] - curSpecial[i]);\n                }\n                if (nxtNeeds.length === n) { // 大礼包可以购买\n                    minPrice = Math.min(minPrice, dfs(price, special, nxtNeeds, filterSpecial, n) + specialPrice);\n                }\n            }\n            memo.set(curNeeds, minPrice);\n        }\n        return memo.get(curNeeds);\n    }\n\n    const n = price.length;\n\n    // 过滤不需要计算的大礼包，只保留需要计算的大礼包\n    const filterSpecial = [];\n    for (const sp of special) {\n        let totalCount = 0, totalPrice = 0;\n        for (let i = 0; i < n; ++i) {\n            totalCount += sp[i];\n            totalPrice += sp[i] * price[i];\n        }\n        if (totalCount > 0 && totalPrice > sp[n]) {\n            filterSpecial.push(sp);\n        }\n    }\n\n    return dfs(price, special, needs, filterSpecial, n);\n};\n```\n\n```go [sol1-Golang]\nfunc shoppingOffers(price []int, special [][]int, needs []int) int {\n    n := len(price)\n\n    // 过滤不需要计算的大礼包，只保留需要计算的大礼包\n    filterSpecial := [][]int{}\n    for _, s := range special {\n        totalCount, totalPrice := 0, 0\n        for i, c := range s[:n] {\n            totalCount += c\n            totalPrice += c * price[i]\n        }\n        if totalCount > 0 && totalPrice > s[n] {\n            filterSpecial = append(filterSpecial, s)\n        }\n    }\n\n    // 记忆化搜索计算满足购物清单所需花费的最低价格\n    dp := map[string]int{}\n    var dfs func([]byte) int\n    dfs = func(curNeeds []byte) (minPrice int) {\n        if res, has := dp[string(curNeeds)]; has {\n            return res\n        }\n        for i, p := range price {\n            minPrice += int(curNeeds[i]) * p // 不购买任何大礼包，原价购买购物清单中的所有物品\n        }\n        nextNeeds := make([]byte, n)\n    outer:\n        for _, s := range filterSpecial {\n            for i, need := range curNeeds {\n                if need < byte(s[i]) { // 不能购买超出购物清单指定数量的物品\n                    continue outer\n                }\n                nextNeeds[i] = need - byte(s[i])\n            }\n            minPrice = min(minPrice, dfs(nextNeeds)+s[n])\n        }\n        dp[string(curNeeds)] = minPrice\n        return\n    }\n\n    curNeeds := make([]byte, n)\n    for i, need := range needs {\n        curNeeds[i] = byte(need)\n    }\n    return dfs(curNeeds)\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\times k \\times m^n)$，其中 $k$ 表示大礼包的数量，$m$ 表示每种物品的需求量的可能情况数（等于最大需求量加 $1$），$n$ 表示物品数量。我们最多需要处理 $m^n$ 个状态，每个状态需要遍历 $k$ 种大礼包的情况，每个大礼包需要遍历 $n$ 种商品以检查大礼包是否可以购买。\n\n- 空间复杂度：$O(n \\times m^n)$，用于存储记忆化搜索中 $m^n$ 个状态的计算结果，每个状态需要存储 $n$ 个商品的需求量。"
}