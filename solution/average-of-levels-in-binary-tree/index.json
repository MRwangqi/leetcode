{
	"titleSlug": "average-of-levels-in-binary-tree",
	"slug": "er-cha-shu-de-ceng-ping-jun-zhi-by-leetcode-soluti",
	"url": "https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/solution/er-cha-shu-de-ceng-ping-jun-zhi-by-leetcode-soluti/",
	"content": "#### 方法一：深度优先搜索\n\n使用深度优先搜索计算二叉树的层平均值，需要维护两个数组，$\\textit{counts}$ 用于存储二叉树的每一层的节点数，$\\textit{sums}$ 用于存储二叉树的每一层的节点值之和。搜索过程中需要记录当前节点所在层，如果访问到的节点在第 $i$ 层，则将 $\\textit{counts}[i]$ 的值加 $1$，并将该节点的值加到 $\\textit{sums}[i]$。\n\n遍历结束之后，第 $i$ 层的平均值即为 $\\textit{sums}[i] / \\textit{counts}[i]$。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/637/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/637/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/637/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/637/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/637/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/637/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/637/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/637/8.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Double> averageOfLevels(TreeNode root) {\n        List<Integer> counts = new ArrayList<Integer>();\n        List<Double> sums = new ArrayList<Double>();\n        dfs(root, 0, counts, sums);\n        List<Double> averages = new ArrayList<Double>();\n        int size = sums.size();\n        for (int i = 0; i < size; i++) {\n            averages.add(sums.get(i) / counts.get(i));\n        }\n        return averages;\n    }\n\n    public void dfs(TreeNode root, int level, List<Integer> counts, List<Double> sums) {\n        if (root == null) {\n            return;\n        }\n        if (level < sums.size()) {\n            sums.set(level, sums.get(level) + root.val);\n            counts.set(level, counts.get(level) + 1);\n        } else {\n            sums.add(1.0 * root.val);\n            counts.add(1);\n        }\n        dfs(root.left, level + 1, counts, sums);\n        dfs(root.right, level + 1, counts, sums);\n    }\n}\n```\n\n```Golang [sol1-Golang]\ntype data struct{ sum, count int }\n\nfunc averageOfLevels(root *TreeNode) []float64 {\n    levelData := []data{}\n    var dfs func(node *TreeNode, level int)\n    dfs = func(node *TreeNode, level int) {\n        if node == nil {\n            return\n        }\n        if level < len(levelData) {\n            levelData[level].sum += node.Val\n            levelData[level].count++\n        } else {\n            levelData = append(levelData, data{node.Val, 1})\n        }\n        dfs(node.Left, level+1)\n        dfs(node.Right, level+1)\n    }\n    dfs(root, 0)\n\n    averages := make([]float64, len(levelData))\n    for i, d := range levelData {\n        averages[i] = float64(d.sum) / float64(d.count)\n    }\n    return averages\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<double> averageOfLevels(TreeNode* root) {\n        auto counts = vector<int>();\n        auto sums = vector<double>();\n        dfs(root, 0, counts, sums);\n        auto averages = vector<double>();\n        int size = sums.size();\n        for (int i = 0; i < size; i++) {\n            averages.push_back(sums[i] / counts[i]);\n        }\n        return averages;\n    }\n\n    void dfs(TreeNode* root, int level, vector<int> &counts, vector<double> &sums) {\n        if (root == nullptr) {\n            return;\n        }\n        if (level < sums.size()) {\n            sums[level] += root->val;\n            counts[level] += 1;\n        } else {\n            sums.push_back(1.0 * root->val);\n            counts.push_back(1);\n        }\n        dfs(root->left, level + 1, counts, sums);\n        dfs(root->right, level + 1, counts, sums);\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def averageOfLevels(self, root: TreeNode) -> List[float]:\n        def dfs(root: TreeNode, level: int):\n            if not root:\n                return\n            if level < len(totals):\n                totals[level] += root.val\n                counts[level] += 1\n            else:\n                totals.append(root.val)\n                counts.append(1)\n            dfs(root.left, level + 1)\n            dfs(root.right, level + 1)\n\n        counts = list()\n        totals = list()\n        dfs(root, 0)\n        return [total / count for total, count in zip(totals, counts)]\n```\n\n```C [sol1-C]\nint countsSize;\nint sumsSize;\n\nvoid dfs(struct TreeNode* root, int level, int* counts, double* sums) {\n    if (root == NULL) {\n        return;\n    }\n    if (level < sumsSize) {\n        sums[level] += root->val;\n        counts[level] += 1;\n    } else {\n        sums[sumsSize++] = (double)root->val;\n        counts[countsSize++] = 1;\n    }\n    dfs(root->left, level + 1, counts, sums);\n    dfs(root->right, level + 1, counts, sums);\n}\n\ndouble* averageOfLevels(struct TreeNode* root, int* returnSize) {\n    countsSize = sumsSize = 0;\n    int* counts = malloc(sizeof(int) * 1001);\n    double* sums = malloc(sizeof(double) * 1001);\n    dfs(root, 0, counts, sums);\n    double* averages = malloc(sizeof(double) * 1001);\n    *returnSize = sumsSize;\n    for (int i = 0; i < sumsSize; i++) {\n        averages[i] = sums[i] / counts[i];\n    }\n    return averages;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树中的节点个数。\n  深度优先搜索需要对每个节点访问一次，对于每个节点，维护两个数组的时间复杂度都是 $O(1)$，因此深度优先搜索的时间复杂度是 $O(n)$。\n  遍历结束之后计算每层的平均值的时间复杂度是 $O(h)$，其中 $h$ 是二叉树的高度，任何情况下都满足 $h \\le n$。\n  因此总时间复杂度是 $O(n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树中的节点个数。空间复杂度取决于两个数组的大小和递归调用的层数，两个数组的大小都等于二叉树的高度，递归调用的层数不会超过二叉树的高度，最坏情况下，二叉树的高度等于节点个数。\n\n#### 方法二：广度优先搜索\n\n也可以使用广度优先搜索计算二叉树的层平均值。从根节点开始搜索，每一轮遍历同一层的全部节点，计算该层的节点数以及该层的节点值之和，然后计算该层的平均值。\n\n如何确保每一轮遍历的是同一层的全部节点呢？我们可以借鉴层次遍历的做法，广度优先搜索使用队列存储待访问节点，只要确保在每一轮遍历时，队列中的节点是同一层的全部节点即可。具体做法如下：\n\n- 初始时，将根节点加入队列；\n\n- 每一轮遍历时，将队列中的节点全部取出，计算这些节点的数量以及它们的节点值之和，并计算这些节点的平均值，然后将这些节点的全部非空子节点加入队列，重复上述操作直到队列为空，遍历结束。\n\n由于初始时队列中只有根节点，满足队列中的节点是同一层的全部节点，每一轮遍历时都会将队列中的当前层节点全部取出，并将下一层的全部节点加入队列，因此可以确保每一轮遍历的是同一层的全部节点。\n\n具体实现方面，可以在每一轮遍历之前获得队列中的节点数量 $\\textit{size}$，遍历时只遍历 $\\textit{size}$ 个节点，即可满足每一轮遍历的是同一层的全部节点。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/637/2_1.png),![fig2](https://assets.leetcode-cn.com/solution-static/637/2_2.png),![fig3](https://assets.leetcode-cn.com/solution-static/637/2_3.png),![fig4](https://assets.leetcode-cn.com/solution-static/637/2_4.png),![fig5](https://assets.leetcode-cn.com/solution-static/637/2_5.png),![fig6](https://assets.leetcode-cn.com/solution-static/637/2_6.png),![fig7](https://assets.leetcode-cn.com/solution-static/637/2_7.png),![fig8](https://assets.leetcode-cn.com/solution-static/637/2_8.png),![fig9](https://assets.leetcode-cn.com/solution-static/637/2_9.png),![fig10](https://assets.leetcode-cn.com/solution-static/637/2_10.png),![fig11](https://assets.leetcode-cn.com/solution-static/637/2_11.png),![fig12](https://assets.leetcode-cn.com/solution-static/637/2_12.png),![fig13](https://assets.leetcode-cn.com/solution-static/637/2_13.png),![fig14](https://assets.leetcode-cn.com/solution-static/637/2_14.png)>\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Double> averageOfLevels(TreeNode root) {\n        List<Double> averages = new ArrayList<Double>();\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            double sum = 0;\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                sum += node.val;\n                TreeNode left = node.left, right = node.right;\n                if (left != null) {\n                    queue.offer(left);\n                }\n                if (right != null) {\n                    queue.offer(right);\n                }\n            }\n            averages.add(sum / size);\n        }\n        return averages;\n    }\n}\n```\n\n```Golang [sol2-Golang]\nfunc averageOfLevels(root *TreeNode) (averages []float64) {\n    nextLevel := []*TreeNode{root}\n    for len(nextLevel) > 0 {\n        sum := 0\n        curLevel := nextLevel\n        nextLevel = nil\n        for _, node := range curLevel {\n            sum += node.Val\n            if node.Left != nil {\n                nextLevel = append(nextLevel, node.Left)\n            }\n            if node.Right != nil {\n                nextLevel = append(nextLevel, node.Right)\n            }\n        }\n        averages = append(averages, float64(sum)/float64(len(curLevel)))\n    }\n    return\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<double> averageOfLevels(TreeNode* root) {\n        auto averages = vector<double>();\n        auto q = queue<TreeNode*>();\n        q.push(root);\n        while (!q.empty()) {\n            double sum = 0;\n            int size = q.size();\n            for (int i = 0; i < size; i++) {\n                auto node = q.front();\n                q.pop();\n                sum += node->val;\n                auto left = node->left, right = node->right;\n                if (left != nullptr) {\n                    q.push(left);\n                }\n                if (right != nullptr) {\n                    q.push(right);\n                }\n            }\n            averages.push_back(sum / size);\n        }\n        return averages;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def averageOfLevels(self, root: TreeNode) -> List[float]:\n        averages = list()\n        queue = collections.deque([root])\n        while queue:\n            total = 0\n            size = len(queue)\n            for _ in range(size):\n                node = queue.popleft()\n                total += node.val\n                left, right = node.left, node.right\n                if left:\n                    queue.append(left)\n                if right:\n                    queue.append(right)\n            averages.append(total / size)\n        return averages\n```\n\n```C [sol2-C]\ndouble* averageOfLevels(struct TreeNode* root, int* returnSize) {\n    double* averages = malloc(sizeof(double) * 1001);\n    struct TreeNode** q = malloc(sizeof(struct TreeNode*) * 10001);\n    *returnSize = 0;\n\n    int qleft = 0, qright = 0;\n    q[qright++] = root;\n    while (qleft < qright) {\n        double sum = 0;\n        int size = qright - qleft;\n        for (int i = 0; i < size; i++) {\n            struct TreeNode* node = q[qleft++];\n            sum += node->val;\n            struct TreeNode *left = node->left, *right = node->right;\n            if (left != NULL) {\n                q[qright++] = left;\n            }\n            if (right != NULL) {\n                q[qright++] = right;\n            }\n        }\n        averages[(*returnSize)++] = sum / size;\n    }\n    return averages;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉树中的节点个数。\n  广度优先搜索需要对每个节点访问一次，时间复杂度是 $O(n)$。\n  需要对二叉树的每一层计算平均值，时间复杂度是 $O(h)$，其中 $h$ 是二叉树的高度，任何情况下都满足 $h \\le n$。\n  因此总时间复杂度是 $O(n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是二叉树中的节点个数。空间复杂度取决于队列开销，队列中的节点个数不会超过 $n$。"
}