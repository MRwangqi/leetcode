{
	"titleSlug": "count-the-repetitions",
	"slug": "tong-ji-zhong-fu-ge-shu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/count-the-repetitions/solution/tong-ji-zhong-fu-ge-shu-by-leetcode-solution/",
	"content": "### 📺 视频题解\n\n![...66.统计重复个数.mp4](9aa26c7b-c83a-4a44-826e-f1d2d002e35f)\n\n### 📖 文字题解\n#### 方法一：找出循环节\n\n**思路**\n\n由于题目中的 `n1` 和 `n2` 都很大，因此我们无法真正把 `S1 = [s1, n1]` 和 `S2 = [s2, n2]` 都显式地表示出来。由于这两个字符串都是不断循环的，因此我们可以考虑找出 `S2` 在 `S1` 中出现的循环节，如果我们找到了循环节，那么我们就可以很快算出 `S2` 在 `S1` 中出现了多少次了。\n\n有些读者可能对循环节这个概念会有些陌生，这个概念我们可以类比无限循环小数，如果从小数部分的某一位起向右进行到某一位止的一节数字「循环」出现，首尾衔接，称这种小数为「无限循环小数」，这一节数字称为「无限循环小数」。比如对于 `3.56789789789...` 这个无限循环小数，它的小数部分就是以 `789` 为一个「循环节」在无限循环，且开头可能会有部分不循环的部分，这个数字中即为 `56`。\n\n那么回到这题，我们可以将不断循环的 `s2` 组成的字符串类比作上面小数部分，去找是否存在一个子串，即「循环节」，满足不断在 `S2` 中循环，且这个循环节能对应固定数量的 `s1` 。如下图所示，在第一次出现后，`S2` 的子串 `bdadc` 构成一个循环节：之后 `bdadc` 的每次出现都需要有相应的两段 `s1`。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/466_fig1.png)\n\n\n当我们找出循环节后，我们即可知道一个循环节内包含 `s1` 的数量，以及在循环节出现前的 `s1` 的数量，这样就可以在 $O(1)$ 的时间内，通过简单的运算求出 `s2` 在 `S1` 中出现的次数了。当然，由于 `S1` 中 `s1` 的数量 `n1` 是有限的，因此可能会存在循环节最后一个部分没有完全匹配，如上图最后会单独剩一个 `s1` 出来无法完全匹配完循环节，这部分我们需要单独拿出来遍历处理统计。\n\n有些读者可能会怀疑循环节是否一定存在，这里我们给出的答案是肯定的，根据[鸽笼原理](https://baike.baidu.com/item/鸽笼)，我们最多只要找过 `|s2| + 1` 个 `s1`，就一定会出现循环节。\n\n**算法**\n\n我们设计一个哈希表 `recall` ：哈希表 `recall` 以 `s2` 字符串的下标 `index` 为索引，存储匹配至第 `s1cnt` 个 `s1` 的末尾，当前匹配到第 `s2cnt` 个 `s2` 中的第 `index` 个字符时， 已经匹配过的`s1` 的个数 `s1cnt` 和 `s2` 的个数 `s2cnt` 。\n\n我们在每次遍历至 `s1` 的末尾时根据当前匹配到的 `s2` 中的位置 `index` 查看哈希表中的对应位置，如果哈希表中对应的位置 `index` 已经存储元素，则说明我们找到了循环节。循环节的长度可以用当前已经匹配的 `s1` 与 `s2` 的数量减去上次出现时经过的数量（即哈希表中存储的值）来得到。\n\n然后我们就可以通过简单的运算求出所有构成循环节的 `s2` 的数量，对于不参与循环节部分的 `s1`，直接遍历计算即可，具体实现以及一些细节边界的处理请看下文的代码。\n\n```Python [sol1-Python3]\nclass Solution:\n    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:\n        if n1 == 0:\n            return 0\n        s1cnt, index, s2cnt = 0, 0, 0\n        # recall 是我们用来找循环节的变量，它是一个哈希映射\n        # 我们如何找循环节？假设我们遍历了 s1cnt 个 s1，此时匹配到了第 s2cnt 个 s2 中的第 index 个字符\n        # 如果我们之前遍历了 s1cnt' 个 s1 时，匹配到的是第 s2cnt' 个 s2 中同样的第 index 个字符，那么就有循环节了\n        # 我们用 (s1cnt', s2cnt', index) 和 (s1cnt, s2cnt, index) 表示两次包含相同 index 的匹配结果\n        # 那么哈希映射中的键就是 index，值就是 (s1cnt', s2cnt') 这个二元组\n        # 循环节就是；\n        #    - 前 s1cnt' 个 s1 包含了 s2cnt' 个 s2\n        #    - 以后的每 (s1cnt - s1cnt') 个 s1 包含了 (s2cnt - s2cnt') 个 s2\n        # 那么还会剩下 (n1 - s1cnt') % (s1cnt - s1cnt') 个 s1, 我们对这些与 s2 进行暴力匹配\n        # 注意 s2 要从第 index 个字符开始匹配\n        recall = dict()\n        while True:\n            # 我们多遍历一个 s1，看看能不能找到循环节\n            s1cnt += 1\n            for ch in s1:\n                if ch == s2[index]:\n                    index += 1\n                    if index == len(s2):\n                        s2cnt, index = s2cnt + 1, 0\n            # 还没有找到循环节，所有的 s1 就用完了\n            if s1cnt == n1:\n                return s2cnt // n2\n            # 出现了之前的 index，表示找到了循环节\n            if index in recall:\n                s1cnt_prime, s2cnt_prime = recall[index]\n                # 前 s1cnt' 个 s1 包含了 s2cnt' 个 s2\n                pre_loop = (s1cnt_prime, s2cnt_prime)\n                # 以后的每 (s1cnt - s1cnt') 个 s1 包含了 (s2cnt - s2cnt') 个 s2\n                in_loop = (s1cnt - s1cnt_prime, s2cnt - s2cnt_prime)\n                break\n            else:\n                recall[index] = (s1cnt, s2cnt)\n\n        # ans 存储的是 S1 包含的 s2 的数量，考虑的之前的 pre_loop 和 in_loop\n        ans = pre_loop[1] + (n1 - pre_loop[0]) // in_loop[0] * in_loop[1]\n        # S1 的末尾还剩下一些 s1，我们暴力进行匹配\n        rest = (n1 - pre_loop[0]) % in_loop[0]\n        for i in range(rest):\n            for ch in s1:\n                if ch == s2[index]:\n                    index += 1\n                    if index == len(s2):\n                        ans, index = ans + 1, 0\n        # S1 包含 ans 个 s2，那么就包含 ans / n2 个 S2\n        return ans // n2\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int getMaxRepetitions(string s1, int n1, string s2, int n2) {\n        if (n1 == 0) {\n            return 0;\n        }\n        int s1cnt = 0, index = 0, s2cnt = 0;\n        // recall 是我们用来找循环节的变量，它是一个哈希映射\n        // 我们如何找循环节？假设我们遍历了 s1cnt 个 s1，此时匹配到了第 s2cnt 个 s2 中的第 index 个字符\n        // 如果我们之前遍历了 s1cnt' 个 s1 时，匹配到的是第 s2cnt' 个 s2 中同样的第 index 个字符，那么就有循环节了\n        // 我们用 (s1cnt', s2cnt', index) 和 (s1cnt, s2cnt, index) 表示两次包含相同 index 的匹配结果\n        // 那么哈希映射中的键就是 index，值就是 (s1cnt', s2cnt') 这个二元组\n        // 循环节就是；\n        //    - 前 s1cnt' 个 s1 包含了 s2cnt' 个 s2\n        //    - 以后的每 (s1cnt - s1cnt') 个 s1 包含了 (s2cnt - s2cnt') 个 s2\n        // 那么还会剩下 (n1 - s1cnt') % (s1cnt - s1cnt') 个 s1, 我们对这些与 s2 进行暴力匹配\n        // 注意 s2 要从第 index 个字符开始匹配\n        unordered_map<int, pair<int, int>> recall;\n        pair<int, int> pre_loop, in_loop;\n        while (true) {\n            // 我们多遍历一个 s1，看看能不能找到循环节\n            ++s1cnt;\n            for (char ch: s1) {\n                if (ch == s2[index]) {\n                    index += 1;\n                    if (index == s2.size()) {\n                        ++s2cnt;\n                        index = 0;\n                    }\n                }\n            }\n            // 还没有找到循环节，所有的 s1 就用完了\n            if (s1cnt == n1) {\n                return s2cnt / n2;\n            }\n            // 出现了之前的 index，表示找到了循环节\n            if (recall.count(index)) {\n                auto [s1cnt_prime, s2cnt_prime] = recall[index];\n                // 前 s1cnt' 个 s1 包含了 s2cnt' 个 s2\n                pre_loop = {s1cnt_prime, s2cnt_prime};\n                // 以后的每 (s1cnt - s1cnt') 个 s1 包含了 (s2cnt - s2cnt') 个 s2\n                in_loop = {s1cnt - s1cnt_prime, s2cnt - s2cnt_prime};\n                break;\n            } else {\n                recall[index] = {s1cnt, s2cnt};\n            }\n        }\n        // ans 存储的是 S1 包含的 s2 的数量，考虑的之前的 pre_loop 和 in_loop\n        int ans = pre_loop.second + (n1 - pre_loop.first) / in_loop.first * in_loop.second;\n        // S1 的末尾还剩下一些 s1，我们暴力进行匹配\n        int rest = (n1 - pre_loop.first) % in_loop.first;\n        for (int i = 0; i < rest; ++i) {\n            for (char ch: s1) {\n                if (ch == s2[index]) {\n                    ++index;\n                    if (index == s2.size()) {\n                        ++ans;\n                        index = 0;\n                    }\n                }\n            }\n        }\n        // S1 包含 ans 个 s2，那么就包含 ans / n2 个 S2\n        return ans / n2;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {\n        if (n1 == 0) {\n            return 0;\n        }\n        int s1cnt = 0, index = 0, s2cnt = 0;\n        // recall 是我们用来找循环节的变量，它是一个哈希映射\n        // 我们如何找循环节？假设我们遍历了 s1cnt 个 s1，此时匹配到了第 s2cnt 个 s2 中的第 index 个字符\n        // 如果我们之前遍历了 s1cnt' 个 s1 时，匹配到的是第 s2cnt' 个 s2 中同样的第 index 个字符，那么就有循环节了\n        // 我们用 (s1cnt', s2cnt', index) 和 (s1cnt, s2cnt, index) 表示两次包含相同 index 的匹配结果\n        // 那么哈希映射中的键就是 index，值就是 (s1cnt', s2cnt') 这个二元组\n        // 循环节就是；\n        //    - 前 s1cnt' 个 s1 包含了 s2cnt' 个 s2\n        //    - 以后的每 (s1cnt - s1cnt') 个 s1 包含了 (s2cnt - s2cnt') 个 s2\n        // 那么还会剩下 (n1 - s1cnt') % (s1cnt - s1cnt') 个 s1, 我们对这些与 s2 进行暴力匹配\n        // 注意 s2 要从第 index 个字符开始匹配\n        Map<Integer, int[]> recall = new HashMap<Integer, int[]>();\n        int[] preLoop = new int[2];\n        int[] inLoop = new int[2];\n        while (true) {\n            // 我们多遍历一个 s1，看看能不能找到循环节\n            ++s1cnt;\n            for (int i = 0; i < s1.length(); ++i) {\n                char ch = s1.charAt(i);\n                if (ch == s2.charAt(index)) {\n                    index += 1;\n                    if (index == s2.length()) {\n                        ++s2cnt;\n                        index = 0;\n                    }\n                }\n            }\n            // 还没有找到循环节，所有的 s1 就用完了\n            if (s1cnt == n1) {\n                return s2cnt / n2;\n            }\n            // 出现了之前的 index，表示找到了循环节\n            if (recall.containsKey(index)) {\n                int[] value = recall.get(index);\n                int s1cntPrime = value[0];\n                int s2cntPrime = value[1];\n                // 前 s1cnt' 个 s1 包含了 s2cnt' 个 s2\n                preLoop = new int[]{s1cntPrime, s2cntPrime};\n                // 以后的每 (s1cnt - s1cnt') 个 s1 包含了 (s2cnt - s2cnt') 个 s2\n                inLoop = new int[]{s1cnt - s1cntPrime, s2cnt - s2cntPrime};\n                break;\n            } else {\n                recall.put(index, new int[]{s1cnt, s2cnt});\n            }\n        }\n        // ans 存储的是 S1 包含的 s2 的数量，考虑的之前的 preLoop 和 inLoop\n        int ans = preLoop[1] + (n1 - preLoop[0]) / inLoop[0] * inLoop[1];\n        // S1 的末尾还剩下一些 s1，我们暴力进行匹配\n        int rest = (n1 - preLoop[0]) % inLoop[0];\n        for (int i = 0; i < rest; ++i) {\n            for (int j = 0; j < s1.length(); ++j) {\n                char ch = s1.charAt(j);\n                if (ch == s2.charAt(index)) {\n                    ++index;\n                    if (index == s2.length()) {\n                        ++ans;\n                        index = 0;\n                    }\n                }\n            }\n        }\n        // S1 包含 ans 个 s2，那么就包含 ans / n2 个 S2\n        return ans / n2;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(|s1| \\times |s2|)$。我们最多找过 $|s2| + 1$ 个 $s1$，就可以找到循环节，最坏情况下需要遍历的字符数量级为 $O(|s1| \\times |s2|)$。\n\n* 空间复杂度：$O(|s2|)$。我们建立的哈希表大小等于 $s2$ 的长度。"
}