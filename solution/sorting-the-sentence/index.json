{
	"titleSlug": "sorting-the-sentence",
	"slug": "jiang-ju-zi-pai-xu-by-leetcode-solution-wnts",
	"url": "https://leetcode-cn.com/problems/sorting-the-sentence/solution/jiang-ju-zi-pai-xu-by-leetcode-solution-wnts/",
	"content": "#### 方法一：维护有序的单词数组\n\n**思路与算法**\n\n我们用字符串数组 $\\textit{arr}$ 来保存每个位置的单词，并遍历乱序字符串 $s$。每当遍历到数字时，我们会将数字前的单词填入 $\\textit{arr}$ 的对应位置。\n\n与此同时，我们统计单词的数量。最终，我们按要求从 $\\textit{arr}$ 中构造顺序的句子并返回。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string sortSentence(string s) {\n        vector<string> arr(9);   // 单词数组\n        string tmp = \"\";   // 当前单词\n        int n = 0;   // 单词数量\n        // 遍历字符串\n        for (auto c: s){\n            if (c >= '0' && c <= '9'){\n                // 如果为数字，计算对应的单词数组下标，将单词放入对应位置，并清空当前单词\n                // 数组下标为 0 开头，位置索引为 1 开头\n                arr[c-'0'-1] = tmp;\n                tmp.clear();\n                ++n;\n            }\n            else if (c != ' '){\n                // 如果为字母，更新当前单词\n                tmp.push_back(c);\n            }\n        }\n        string res = arr[0];   // 原本顺序的句子 \n        for (int i = 1; i < n; ++i){\n            res += \" \" + arr[i];\n        }\n        return res;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sortSentence(self, s: str) -> str:\n        s = s.split()\n        n = len(s)   # 单词数量\n        arr = [\"\" for _ in range(n)]   # 单词数组\n        for wd in s:\n            # 计算位置索引对应的单词数组下标，并将单词放入对应位置\n            # 数组下标为 0 开头，位置索引为 1 开头\n            arr[int(wd[-1])-1] = wd[:-1]\n        return \" \".join(arr)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m)$，其中 $m$ 为 $s$ 的长度。遍历字符串、维护单词数组、输出结果的时间复杂度均为 $O(m)$。\n\n- 空间复杂度：$O(m)$，其中 $m$ 为 $s$ 的长度。即为建立并维护单词数组所需的空间。"
}