{
	"titleSlug": "corporate-flight-bookings",
	"slug": "hang-ban-yu-ding-tong-ji-by-leetcode-sol-5pv8",
	"url": "https://leetcode-cn.com/problems/corporate-flight-bookings/solution/hang-ban-yu-ding-tong-ji-by-leetcode-sol-5pv8/",
	"content": "#### 方法一：差分\n\n注意到一个预订记录实际上代表了一个区间的增量。我们的任务是将这些增量叠加得到答案。因此，我们可以使用差分解决本题。\n\n差分数组对应的概念是前缀和数组，对于数组 $[1,2,2,4]$，其差分数组为 $[1,1,0,2]$，差分数组的第 $i$ 个数即为原数组的第 $i-1$ 个元素和第 $i$ 个元素的差值，也就是说我们对差分数组求前缀和即可得到原数组。\n\n差分数组的性质是，当我们希望对原数组的某一个区间 $[l,r]$ 施加一个增量$\\textit{inc}$ 时，差分数组 $d$ 对应的改变是：$d[l]$ 增加 $\\textit{inc}$，$d[r+1]$ 减少 $\\textit{inc}$。这样对于区间的修改就变为了对于两个位置的修改。并且这种修改是可以叠加的，即当我们多次对原数组的不同区间施加不同的增量，我们只要按规则修改差分数组即可。\n\n在本题中，我们可以遍历给定的预定记录数组，每次 $O(1)$ 地完成对差分数组的修改即可。当我们完成了差分数组的修改，只需要最后求出差分数组的前缀和即可得到目标数组。\n\n注意本题中日期从 $1$ 开始，因此我们需要相应的调整数组下标对应关系，对于预定记录 $\\textit{booking}=[l,r,\\textit{inc}]$，我们需要让 $d[l-1]$ 增加 $\\textit{inc}$，$d[r]$ 减少 $\\textit{inc}$。特别地，当 $r$ 为 $n$ 时，我们无需修改 $d[r]$，因为这个位置溢出了下标范围。如果求前缀和时考虑该位置，那么该位置对应的前缀和值必定为 $0$。读者们可以自行思考原因，以加深对差分数组的理解。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> corpFlightBookings(vector<vector<int>>& bookings, int n) {\n        vector<int> nums(n);\n        for (auto& booking : bookings) {\n            nums[booking[0] - 1] += booking[2];\n            if (booking[1] < n) {\n                nums[booking[1]] -= booking[2];\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            nums[i] += nums[i - 1];\n        }\n        return nums;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] corpFlightBookings(int[][] bookings, int n) {\n        int[] nums = new int[n];\n        for (int[] booking : bookings) {\n            nums[booking[0] - 1] += booking[2];\n            if (booking[1] < n) {\n                nums[booking[1]] -= booking[2];\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            nums[i] += nums[i - 1];\n        }\n        return nums;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] CorpFlightBookings(int[][] bookings, int n) {\n        int[] nums = new int[n];\n        foreach (int[] booking in bookings) {\n            nums[booking[0] - 1] += booking[2];\n            if (booking[1] < n) {\n                nums[booking[1]] -= booking[2];\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            nums[i] += nums[i - 1];\n        }\n        return nums;\n    }\n}\n```\n\n```C [sol1-C]\nint* corpFlightBookings(int** bookings, int bookingsSize, int* bookingsColSize, int n, int* returnSize) {\n    int* nums = malloc(sizeof(int) * n);\n    memset(nums, 0, sizeof(int) * n);\n    *returnSize = n;\n    for (int i = 0; i < bookingsSize; i++) {\n        nums[bookings[i][0] - 1] += bookings[i][2];\n        if (bookings[i][1] < n) {\n            nums[bookings[i][1]] -= bookings[i][2];\n        }\n    }\n    for (int i = 1; i < n; i++) {\n        nums[i] += nums[i - 1];\n    }\n    return nums;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar corpFlightBookings = function(bookings, n) {\n    const nums = new Array(n).fill(0);\n    for (const booking of bookings) {\n        nums[booking[0] - 1] += booking[2];\n        if (booking[1] < n) {\n            nums[booking[1]] -= booking[2];\n        }\n    }\n    for (let i = 1; i < n; i++) {\n        nums[i] += nums[i - 1];\n    }\n    return nums;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:\n        nums = [0] * n\n        for left, right, inc in bookings:\n            nums[left - 1] += inc\n            if right < n:\n                nums[right] -= inc\n    \n        for i in range(1, n):\n            nums[i] += nums[i - 1]\n        \n        return nums\n```\n\n```go [sol1-Golang]\nfunc corpFlightBookings(bookings [][]int, n int) []int {\n    nums := make([]int, n)\n    for _, booking := range bookings {\n        nums[booking[0]-1] += booking[2]\n        if booking[1] < n {\n            nums[booking[1]] -= booking[2]\n        }\n    }\n    for i := 1; i < n; i++ {\n        nums[i] += nums[i-1]\n    }\n    return nums\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n+m)$，其中 $n$ 为要求的数组长度，$m$ 为预定记录的数量。我们需要对于每一条预定记录处理一次差分数组，并最后对差分数组求前缀和。\n\n- 空间复杂度：$O(1)$。我们只需要常数的空间保存若干变量，注意返回值不计入空间复杂度。"
}