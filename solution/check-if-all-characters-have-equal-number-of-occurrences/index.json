{
	"titleSlug": "check-if-all-characters-have-equal-number-of-occurrences",
	"slug": "jian-cha-shi-fou-suo-you-zi-fu-chu-xian-k9bi1",
	"url": "https://leetcode-cn.com/problems/check-if-all-characters-have-equal-number-of-occurrences/solution/jian-cha-shi-fou-suo-you-zi-fu-chu-xian-k9bi1/",
	"content": "#### 方法一：统计每个字符的频数\n\n**思路与算法**\n\n首先，我们遍历字符串 $s$，并用哈希表 $\\textit{freq}$ 统计每个字符的频数。随后，我们需要检查哈希表 $\\textit{freq}$ 中每个字符的频数是否相等。\n\n我们可以计算出满足要求时每个字符的理论频数 $\\textit{occ} = \\textit{s.size}() / \\textit{freq.size}()$，并比较 $\\textit{freq}$ 中每个字符的频数是否与 $\\textit{occ}$ 相等。如果全部相等，那么说明符合要求，此时应返回 $\\texttt{true}$ 作为答案，反之亦然。\n\n为了避免无法整除产生浮点数与整数的比较，我们可以在计算 $\\textit{occ}$ 时用整除来代替除法，此时该判断方法依旧有效。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool areOccurrencesEqual(string s) {\n        unordered_map<char, int> freq;   // 每个字符的实际频数\n        for (const char ch : s){\n            if (!freq.count(ch)){\n                freq[ch] = 0;\n            }\n            ++freq[ch];\n        }\n        int occ = s.size() / freq.size();   // 每个字符的理论频数\n        for (auto&& [_, v] : freq){\n            if (v != occ){\n                return false;\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Python [sol1-Python3]\nfrom collections import Counter\n\nclass Solution:\n    def areOccurrencesEqual(self, s: str) -> bool:\n        freq = Counter(s)   # 每个字符的实际频数\n        occ = len(s) // len(freq)    # 每个字符的理论频数\n        return all(v == occ for v in freq.values())\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + |\\Sigma|)$，其中 $n$ 为 $s$ 的长度，$|\\Sigma|$ 为字符集的大小。遍历 $s$ 生成字符频数哈希表的时间复杂度为 $O(n)$，遍历所有频数判断是否相等的时间复杂度为 $O(|\\Sigma|)$。\n\n- 空间复杂度：$O(|\\Sigma|)$，即为字符频数哈希表和频数哈希集合的空间复杂度。"
}