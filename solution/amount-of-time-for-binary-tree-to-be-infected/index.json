{
	"titleSlug": "amount-of-time-for-binary-tree-to-be-infected",
	"slug": "dfs-bfs-by-endlesscheng-48cz",
	"url": "https://leetcode-cn.com/problems/amount-of-time-for-binary-tree-to-be-infected/solution/dfs-bfs-by-endlesscheng-48cz/",
	"content": "本题 [视频讲解](https://www.bilibili.com/video/BV1md4y1P75q) 已出炉，欢迎点赞三连，在评论区分享你对这场周赛的看法~\r\n \r\n---\r\n\r\nDFS 求出 $\\textit{start}$ 的位置和每个点的父节点，然后用 BFS 求答案。\r\n\r\n#### 相似题目\r\n\r\n- [863. 二叉树中所有距离为 K 的结点](https://leetcode.cn/problems/all-nodes-distance-k-in-binary-tree/)\r\n\r\n```py [sol1-Python3]\r\nclass Solution:\r\n    def amountOfTime(self, root: Optional[TreeNode], start: int) -> int:\r\n        parents = {}\r\n        def dfs(node: Optional[TreeNode], pa: Optional[TreeNode]) -> None:\r\n            if node is None: return\r\n            if node.val == start: self.start = node\r\n            parents[node] = pa\r\n            dfs(node.left, node)\r\n            dfs(node.right, node)\r\n        dfs(root, None)\r\n\r\n        ans = -1\r\n        vis = {None, self.start}\r\n        q = [self.start]\r\n        while q:\r\n            ans += 1\r\n            tmp = q\r\n            q = []\r\n            for node in tmp:\r\n                for x in node.left, node.right, parents[node]:\r\n                    if x not in vis:\r\n                        vis.add(x)\r\n                        q.append(x)\r\n        return ans\r\n```\r\n\r\n```go [sol1-Go]\r\nfunc amountOfTime(root *TreeNode, start int) int {\r\n\tvar st *TreeNode\r\n\tparents := map[*TreeNode]*TreeNode{}\r\n\tvar dfs func(*TreeNode, *TreeNode)\r\n\tdfs = func(node, pa *TreeNode) {\r\n\t\tif node == nil {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif node.Val == start {\r\n\t\t\tst = node\r\n\t\t}\r\n\t\tparents[node] = pa\r\n\t\tdfs(node.Left, node)\r\n\t\tdfs(node.Right, node)\r\n\t}\r\n\tdfs(root, nil)\r\n\r\n\tans := -1\r\n\tvis := map[*TreeNode]bool{nil: true, st: true}\r\n\tfor q := []*TreeNode{st}; len(q) > 0; ans++ {\r\n\t\ttmp := q\r\n\t\tq = nil\r\n\t\tfor _, node := range tmp {\r\n\t\t\tif node != nil {\r\n\t\t\t\tif !vis[node.Left] {\r\n\t\t\t\t\tvis[node.Left] = true\r\n\t\t\t\t\tq = append(q, node.Left)\r\n\t\t\t\t}\r\n\t\t\t\tif !vis[node.Right] {\r\n\t\t\t\t\tvis[node.Right] = true\r\n\t\t\t\t\tq = append(q, node.Right)\r\n\t\t\t\t}\r\n\t\t\t\tif p := parents[node]; !vis[p] {\r\n\t\t\t\t\tvis[p] = true\r\n\t\t\t\t\tq = append(q, p)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn ans\r\n}\r\n```"
}