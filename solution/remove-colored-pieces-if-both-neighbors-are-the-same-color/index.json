{
	"titleSlug": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
	"slug": "ru-guo-xiang-lin-liang-ge-yan-se-jun-xia-rfbk",
	"url": "https://leetcode-cn.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/solution/ru-guo-xiang-lin-liang-ge-yan-se-jun-xia-rfbk/",
	"content": "#### 方法一：贪心\n\n**思路**\n\n根据题意，当 $\\textit{colors}$ 中有一串连续的长度为 $L_\\text{A}$ 的 $\\text{A}$ 时，$\\text{Alice}$ 可以删除中间的 $L_\\text{A}-2$ 个 $\\text{A}$，而不能删除两边的 $2$ 个 $\\text{A}$。并且 $\\text{Bob}$ 删除 $\\text{B}$ 的操作，不会影响 $\\text{Alice}$ 删除 $L_\\text{A}$ 的操作。\n\n同理，当 $\\textit{colors}$ 中有一串连续的长度为 $L_\\text{B}$ 的 $\\text{B}$ 时，$\\text{Bob}$ 可以删除中间的 $L_\\text{B}-2$ 个 $\\text{B}$，而不能删除两边的 $2$ 个 $\\text{B}$。并且 $\\text{Alice}$ 删除 $\\text{A}$ 的操作，不会影响 $\\text{Bob}$ 删除 $L_\\text{B}$ 的操作。\n\n根据这两个结论，我们可以分别计算出 $\\text{Alice}$ 和 $\\text{Bob}$ 的操作数。当 $\\text{Alice}$ 的操作数大于 $\\text{Bob}$ 的操作数时，$\\text{Alice}$ 获胜；否则，$\\text{Bob}$ 获胜。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def winnerOfGame(self, colors: str) -> bool:\n        freq = [0, 0]\n        cur, cnt = 'C', 0\n        for c in colors:\n            if c != cur:\n                cur = c\n                cnt = 1\n            else:\n                cnt += 1\n                if cnt >= 3:\n                    freq[ord(cur) - ord('A')] += 1\n        return freq[0] > freq[1]\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean winnerOfGame(String colors) {\n        int[] freq = {0, 0};\n        char cur = 'C';\n        int cnt = 0;\n        for (int i = 0; i < colors.length(); i++) {\n            char c = colors.charAt(i);\n            if (c != cur) {\n                cur = c;\n                cnt = 1;\n            } else {\n                cnt += 1;\n                if (cnt >= 3) {\n                    freq[cur - 'A'] += 1;\n                }\n            }\n        }            \n        return freq[0] > freq[1];\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool WinnerOfGame(string colors) {\n        int[] freq = {0, 0};\n        char cur = 'C';\n        int cnt = 0;\n        foreach (char c in colors) {\n            if (c != cur) {\n                cur = c;\n                cnt = 1;\n            } else {\n                cnt += 1;\n                if (cnt >= 3) {\n                    freq[cur - 'A'] += 1;\n                }\n            }\n        }            \n        return freq[0] > freq[1];\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool winnerOfGame(string colors) {\n        int freq[2] = {0, 0};\n        char cur = 'C';\n        int cnt = 0;\n        for (char c : colors) {\n            if (c != cur) {\n                cur = c;\n                cnt = 1;\n            } else if (++cnt >= 3) {\n                ++freq[cur - 'A'];\n            }\n        }            \n        return freq[0] > freq[1];\n    }\n};\n```\n\n```C [sol1-C]\nbool winnerOfGame(char * colors){\n    int freq[2] = {0, 0};\n    char cur = 'C';\n    int cnt = 0;\n    int len = strlen(colors);\n    for (int i = 0; i < len; i++) {\n        char c = colors[i];\n        if (c != cur) {\n            cur = c;\n            cnt = 1;\n        } else {\n            cnt += 1;\n            if (cnt >= 3) {\n                freq[cur - 'A'] += 1;\n            }\n        }\n    }       \n    return freq[0] > freq[1];\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar winnerOfGame = function(colors) {\n    const freq = [0, 0];\n    let cur = 'C';\n    let cnt = 0;\n    for (let i = 0; i < colors.length; i++) {\n        const c = colors[i];\n        if (c !== cur) {\n            cur = c;\n            cnt = 1;\n        } else {\n            cnt += 1;\n            if (cnt >= 3) {\n                freq[cur.charCodeAt() - 'A'.charCodeAt()] += 1;\n            }\n        }\n    }            \n    return freq[0] > freq[1];\n};\n```\n\n```go [sol1-Golang]\nfunc winnerOfGame(colors string) bool {\n    freq := [2]int{}\n    cur, cnt := 'C', 0\n    for _, c := range colors {\n        if c != cur {\n            cur, cnt = c, 1\n        } else {\n            cnt++\n            if cnt >= 3 {\n                freq[cur-'A']++\n            }\n        }\n    }\n    return freq[0] > freq[1]\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是 $\\textit{colors}$ 的长度。需要遍历 $\\textit{colors}$ 来统计 $\\text{Alice}$ 和 $\\text{Bob}$ 可以移动的次数。\n\n- 空间复杂度：$O(1)$。仅需要常数空间。"
}