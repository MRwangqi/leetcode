{
	"titleSlug": "WNC0Lk",
	"slug": "er-cha-shu-de-you-ce-shi-tu-by-leetcode-ucmya",
	"url": "https://leetcode-cn.com/problems/WNC0Lk/solution/er-cha-shu-de-you-ce-shi-tu-by-leetcode-ucmya/",
	"content": "#### 前言\n\n由于树的形状无法提前知晓，不可能设计出优于 $O(n)$ 的算法。因此，我们应该试着寻找线性时间解。带着这个想法，我们来考虑一些同等有效的方案。\n\n#### 方法一：深度优先搜索\n\n**思路**\n\n我们对树进行深度优先搜索，在搜索过程中，我们总是先访问右子树。那么对于每一层来说，我们在这层见到的第一个结点一定是最右边的结点。\n\n**算法**\n\n这样一来，我们可以存储在每个深度访问的第一个结点，一旦我们知道了树的层数，就可以得到最终的结果数组。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/jianzhi_II_046/fig1.png)\n\n上图表示了问题的一个实例。红色结点自上而下组成答案，边缘以访问顺序标号。\n\n```Python [sol1-Python3]\nclass Solution:\n    def rightSideView(self, root: TreeNode) -> List[int]:\n        rightmost_value_at_depth = dict() # 深度为索引，存放节点的值\n        max_depth = -1\n\n        stack = [(root, 0)]\n        while stack:\n            node, depth = stack.pop()\n\n            if node is not None:\n                # 维护二叉树的最大深度\n                max_depth = max(max_depth, depth)\n\n                # 如果不存在对应深度的节点我们才插入\n                rightmost_value_at_depth.setdefault(depth, node.val)\n\n                stack.append((node.left, depth + 1))\n                stack.append((node.right, depth + 1))\n\n        return [rightmost_value_at_depth[depth] for depth in range(max_depth + 1)]\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        Map<Integer, Integer> rightmostValueAtDepth = new HashMap<Integer, Integer>();\n        int max_depth = -1;\n\n        Deque<TreeNode> nodeStack = new ArrayDeque<TreeNode>();\n        Deque<Integer> depthStack = new ArrayDeque<Integer>();\n        nodeStack.push(root);\n        depthStack.push(0);\n\n        while (!nodeStack.isEmpty()) {\n            TreeNode node = nodeStack.pop();\n            int depth = depthStack.pop();\n\n            if (node != null) {\n            \t// 维护二叉树的最大深度\n                max_depth = Math.max(max_depth, depth);\n\n                // 如果不存在对应深度的节点我们才插入\n                if (!rightmostValueAtDepth.containsKey(depth)) {\n                    rightmostValueAtDepth.put(depth, node.val);\n                }\n\n                nodeStack.push(node.left);\n                nodeStack.push(node.right);\n                depthStack.push(depth + 1);\n                depthStack.push(depth + 1);\n            }\n        }\n\n        List<Integer> rightView = new ArrayList<Integer>();\n        for (int depth = 0; depth <= max_depth; depth++) {\n            rightView.add(rightmostValueAtDepth.get(depth));\n        }\n\n        return rightView;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n        unordered_map<int, int> rightmostValueAtDepth;\n        int max_depth = -1;\n\n        stack<TreeNode*> nodeStack;\n        stack<int> depthStack;\n        nodeStack.push(root);\n        depthStack.push(0);\n\n        while (!nodeStack.empty()) {\n            TreeNode* node = nodeStack.top();nodeStack.pop();\n            int depth = depthStack.top();depthStack.pop();\n\n            if (node != NULL) {\n            \t// 维护二叉树的最大深度\n                max_depth = max(max_depth, depth);\n\n                // 如果不存在对应深度的节点我们才插入\n                if (rightmostValueAtDepth.find(depth) == rightmostValueAtDepth.end()) {\n                    rightmostValueAtDepth[depth] =  node -> val;\n                }\n\n                nodeStack.push(node -> left);\n                nodeStack.push(node -> right);\n                depthStack.push(depth + 1);\n                depthStack.push(depth + 1);\n            }\n        }\n\n        vector<int> rightView;\n        for (int depth = 0; depth <= max_depth; ++depth) {\n            rightView.push_back(rightmostValueAtDepth[depth]);\n        }\n\n        return rightView;\n    }\n};\n```\n**复杂度分析**\n\n* 时间复杂度 : $O(n)$。深度优先搜索最多访问每个结点一次，因此是线性复杂度。\n\n* 空间复杂度 : $O(n)$。最坏情况下，栈内会包含接近树高度的结点数量，占用 ${O}(n)$ 的空间。\n\n#### 方法二：广度优先搜索\n\n**思路**\n\n我们可以对二叉树进行层次遍历，那么对于每层来说，最右边的结点一定是最后被遍历到的。二叉树的层次遍历可以用广度优先搜索实现。\n\n**算法**\n\n执行广度优先搜索，左结点排在右结点之前，这样，我们对每一层都从左到右访问。因此，只保留每个深度最后访问的结点，我们就可以在遍历完整棵树后得到每个深度最右的结点。除了将栈改成队列，并去除了 `rightmost_value_at_depth` 之前的检查外，算法没有别的改动。\n\n![fig2](https://assets.leetcode-cn.com/solution-static/jianzhi_II_046/fig2.png)\n\n上图表示了同一个示例，红色结点自上而下组成答案，边缘以访问顺序标号。\n\n```Python [sol2-Python3]\nclass Solution:\n    def rightSideView(self, root: TreeNode) -> List[int]:\n        rightmost_value_at_depth = dict() # 深度为索引，存放节点的值\n        max_depth = -1\n\n        queue = deque([(root, 0)])\n        while queue:\n            node, depth = queue.popleft()\n\n            if node is not None:\n                # 维护二叉树的最大深度\n                max_depth = max(max_depth, depth)\n\n                # 由于每一层最后一个访问到的节点才是我们要的答案，因此不断更新对应深度的信息即可\n                rightmost_value_at_depth[depth] = node.val\n\n                queue.append((node.left, depth + 1))\n                queue.append((node.right, depth + 1))\n\n        return [rightmost_value_at_depth[depth] for depth in range(max_depth + 1)]\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        Map<Integer, Integer> rightmostValueAtDepth = new HashMap<Integer, Integer>();\n        int max_depth = -1;\n\n        Queue<TreeNode> nodeQueue = new ArrayDeque<TreeNode>();\n        Queue<Integer> depthQueue = new ArrayDeque<Integer>();\n        nodeQueue.add(root);\n        depthQueue.add(0);\n\n        while (!nodeQueue.isEmpty()) {\n            TreeNode node = nodeQueue.remove();\n            int depth = depthQueue.remove();\n\n            if (node != null) {\n            \t// 维护二叉树的最大深度\n                max_depth = Math.max(max_depth, depth);\n\n                // 由于每一层最后一个访问到的节点才是我们要的答案，因此不断更新对应深度的信息即可\n                rightmostValueAtDepth.put(depth, node.val);\n\n                nodeQueue.add(node.left);\n                nodeQueue.add(node.right);\n                depthQueue.add(depth + 1);\n                depthQueue.add(depth + 1);\n            }\n        }\n\n        List<Integer> rightView = new ArrayList<Integer>();\n        for (int depth = 0; depth <= max_depth; depth++) {\n            rightView.add(rightmostValueAtDepth.get(depth));\n        }\n\n        return rightView;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n        unordered_map<int, int> rightmostValueAtDepth;\n        int max_depth = -1;\n\n        queue<TreeNode*> nodeQueue;\n        queue<int> depthQueue;\n        nodeQueue.push(root);\n        depthQueue.push(0);\n\n        while (!nodeQueue.empty()) {\n            TreeNode* node = nodeQueue.front();nodeQueue.pop();\n            int depth = depthQueue.front();depthQueue.pop();\n\n            if (node != NULL) {\n            \t// 维护二叉树的最大深度\n                max_depth = max(max_depth, depth);\n\n                // 由于每一层最后一个访问到的节点才是我们要的答案，因此不断更新对应深度的信息即可\n                rightmostValueAtDepth[depth] =  node -> val;\n\n                nodeQueue.push(node -> left);\n                nodeQueue.push(node -> right);\n                depthQueue.push(depth + 1);\n                depthQueue.push(depth + 1);\n            }\n        }\n\n        vector<int> rightView;\n        for (int depth = 0; depth <= max_depth; ++depth) {\n            rightView.push_back(rightmostValueAtDepth[depth]);\n        }\n\n        return rightView;\n    }\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度 : ${O}(n)$。 每个节点最多进队列一次，出队列一次，因此广度优先搜索的复杂度为线性。\n\n* 空间复杂度 : ${O}(n)$。每个节点最多进队列一次，所以队列长度最大不不超过 $n$，所以这里的空间代价为 $O(n)$。\n\n---\n\n**注释**\n\n[`deque`](https://docs.python.org/3/library/collections.html#collections.deque) 数据类型来自于[`collections`](https://docs.python.org/3/library/collections.html) 模块，支持从头和尾部的常数时间 append/pop 操作。若使用 Python 的 `list`，通过 `list.pop(0)` 去除头部会消耗 $O(n)$ 的时间。"
}