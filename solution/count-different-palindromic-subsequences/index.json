{
	"titleSlug": "count-different-palindromic-subsequences",
	"slug": "tong-ji-bu-tong-hui-wen-zi-xu-lie-by-lee-7slg",
	"url": "https://leetcode-cn.com/problems/count-different-palindromic-subsequences/solution/tong-ji-bu-tong-hui-wen-zi-xu-lie-by-lee-7slg/",
	"content": "#### 方法一：动态规划（使用三维数组）\n\n**思路与算法**\n\n显然每一个「回文序列」都满足开头和结尾的字符相同。那么我们设给定字符串为 $s$，长度为 $n$，状态 $\\textit{dp}(x,i,j)$ 表示在字符串区间 $s[i:j]$ 中以字符 $x$ 为开头和结尾的不同「回文序列」总数，其中 $s[i:j]$ 表示字符串 $s$ 从下标 $i$ 到下标 $j$ 的子串（包含下标 $i$ 和下标 $j$）。那么最终我们需要求的答案就转化为了 $(\\sum_{i=0}^C\\textit{dp}(x_i,0,n-1)) \\bmod 1000000007$，其中 $x_i \\in S$，$S$ 为题目给定的的字符集合，$C$ 为该字符集合的大小。\n\n我们思考如何求解各个状态：\n\n1. 当 $s[i]=x$ 且 $s[j]=x$ 时，那么对于 $s[i+1:j-1]$ 中的任意一个「回文序列」在头尾加上字符 $x$ 都会生成一个新的以字符 $x$ 为开头结尾的「回文序列」，并加上 $xx$ 和 $x$ 两个单独的「回文序列」。下式中，由于 $x_k$ 不同的「回文序列」一定互不相同，因此可以直接累加，无需考虑去重。\n   $$\\textit{dp}(x,i,j) = 2 + \\sum_{k=0}^C{\\textit{dp}(x_k,i + 1,j - 1)}$$\n2. 当 $s[i]=x$ 且 $s[j] \\neq x$ 时，那么 $\\textit{dp}(x,i,j)$ 等价于 $\\textit{dp}(x,i,j-1)$。\n   $$\\textit{dp}(x,i,j) = \\textit{dp}(x,i,j-1)$$\n3. 当 $s[i] \\neq x$ 且 $s[j]=x$ 时，那么 $\\textit{dp}(x,i,j)$ 等价于 $\\textit{dp}(x,i+1,j)$。\n   $$\\textit{dp}(x,i,j) = \\textit{dp}(x,i+1,j)$$\n4. 当 $s[i] \\neq x$ 且 $s[j] \\neq x$ 时，那么 $\\textit{dp}(x,i,j)$ 等价于 $\\textit{dp}(x,i+1,j-1)$。\n   $$\\textit{dp}(x,i,j) = \\textit{dp}(x,i+1,j-1)$$\n\n上文的讨论是建立在字符串长度大于 $\\text{1}$ 的前提上的，我们还需要考虑动态规划的边界条件，即字符串长度为 $\\text{1}$ 或者不存在的情况。对于长度为 $\\text{1}$ 的字符串，它显然只有本身这一个「回文序列」。对于字符串不存在的情况，那么肯定不存在任何「回文序列」子串。因此我们就可以写出动态规划的边界条件：\n\n$$\n\\textit{dp}(c,i,j) = \\begin{cases}\n1, & i = j \\And s[i] = c \\\\\n0, & i = j \\And s[i] \\ne c \\\\\n0, & i > j \\\\\n\\end{cases}\n$$\n\n可以看到每一个区间上的求解都与其小区间的求解有关，所以我们可以采用「自底向上」的编码方式来实现求解过程。最终返回 $(\\sum_{i=0}^C\\textit{dp}(x_i,0,n-1)) \\bmod 1000000007$ 即可。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        MOD = 10 ** 9 + 7\n        n = len(s)\n        dp = [[[0] * n for _ in range(n)] for _ in range(4)]\n        for i, c in enumerate(s):\n            dp[ord(c) - ord('a')][i][i] = 1\n\n        for sz in range(2, n + 1):\n            for j in range(sz - 1, n):\n                i = j - sz + 1\n                for k, c in enumerate(\"abcd\"):\n                    if s[i] == c and s[j] == c:\n                        dp[k][i][j] = (2 + sum(d[i + 1][j - 1] for d in dp)) % MOD\n                    elif s[i] == c:\n                        dp[k][i][j] = dp[k][i][j - 1]\n                    elif s[j] == c:\n                        dp[k][i][j] = dp[k][i + 1][j]\n                    else:\n                        dp[k][i][j] = dp[k][i + 1][j - 1]\n        return sum(d[0][n - 1] for d in dp) % MOD\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    const int MOD = 1e9 + 7;\n\n    int countPalindromicSubsequences(string &s) {\n        int n = s.size();\n        vector<vector<vector<int>>> dp(4, vector<vector<int>>(n, vector<int>(n, 0)));\n        for (int i = 0; i < n; i++) {\n            dp[s[i] - 'a'][i][i] = 1;\n        }\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0, j = len - 1; j < n; i++, j++) {\n                for (char c = 'a', k = 0; c <= 'd'; c++, k++) {\n                    if (s[i] == c && s[j] == c) {\n                        dp[k][i][j] = (2LL + dp[0][i + 1][j - 1] + dp[1][i + 1][j - 1] + dp[2][i + 1][j - 1] + dp[3][i + 1][j - 1]) % MOD;\n                    } else if (s[i] == c) {\n                        dp[k][i][j] = dp[k][i][j - 1];\n                    } else if (s[j] == c) {\n                        dp[k][i][j] = dp[k][i + 1][j];\n                    } else {\n                        dp[k][i][j] = dp[k][i + 1][j - 1];\n                    }\n                }\n            }\n        }\n\n        int res = 0;\n        for (int i = 0; i < 4; i++) {\n            res = (res + dp[i][0][n - 1]) % MOD;\n        }\n        return res;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countPalindromicSubsequences(String s) {\n        final int MOD = 1000000007;\n        int n = s.length();\n        int[][][] dp = new int[4][n][n];\n        for (int i = 0; i < n; i++) {\n            dp[s.charAt(i) - 'a'][i][i] = 1;\n        }\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i + len <= n; i++) {\n                int j = i + len - 1;\n                for (char c = 'a'; c <= 'd'; c++) {\n                    int k = c - 'a';\n                    if (s.charAt(i) == c && s.charAt(j) == c) {\n                        dp[k][i][j] = (2 + (dp[0][i + 1][j - 1] + dp[1][i + 1][j - 1]) % MOD + (dp[2][i + 1][j - 1] + dp[3][i + 1][j - 1]) % MOD) % MOD;\n                    } else if (s.charAt(i) == c) {\n                        dp[k][i][j] = dp[k][i][j - 1];\n                    } else if (s.charAt(j) == c) {\n                        dp[k][i][j] = dp[k][i + 1][j];\n                    } else {\n                        dp[k][i][j] = dp[k][i + 1][j - 1];\n                    }\n                }\n            }\n        }\n\n        int res = 0;\n        for (int i = 0; i < 4; i++) {\n            res = (res + dp[i][0][n - 1]) % MOD;\n        }\n        return res;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int CountPalindromicSubsequences(string s) {\n        const int MOD = 1000000007;\n        int n = s.Length;\n        int[,,] dp = new int[4, n, n];\n        for (int i = 0; i < n; i++) {\n            dp[s[i] - 'a', i, i] = 1;\n        }\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i + len <= n; i++) {\n                int j = i + len - 1;\n                for (char c = 'a'; c <= 'd'; c++) {\n                    int k = c - 'a';\n                    if (s[i] == c && s[j] == c) {\n                        dp[k, i, j] = (2 + (dp[0, i + 1, j - 1] + dp[1, i + 1, j - 1]) % MOD + (dp[2, i + 1, j - 1] + dp[3, i + 1, j - 1]) % MOD) % MOD;\n                    } else if (s[i] == c) {\n                        dp[k, i, j] = dp[k, i, j - 1];\n                    } else if (s[j] == c) {\n                        dp[k, i, j] = dp[k, i + 1, j];\n                    } else {\n                        dp[k, i, j] = dp[k, i + 1, j - 1];\n                    }\n                }\n            }\n        }\n\n        int res = 0;\n        for (int i = 0; i < 4; i++) {\n            res = (res + dp[i, 0, n - 1]) % MOD;\n        }\n        return res;\n    }\n}\n```\n\n```C [sol1-C]\n#define MOD 1000000007\n\nint countPalindromicSubsequences(char * s){\n    int n = strlen(s);\n    int **dp[4];\n    for (int i = 0; i < 4; i++) {\n        dp[i] = (int **)malloc(sizeof(int *) * n);\n        for (int j = 0; j < n; j++) {\n            dp[i][j] = (int *)malloc(sizeof(int) * n);\n            memset(dp[i][j], 0, sizeof(int) * n);\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        dp[s[i] - 'a'][i][i] = 1;\n    }\n\n    for (int len = 2; len <= n; len++) {\n        for (int i = 0; i + len <= n; i++) {\n            int j = i + len - 1;\n            for (char c = 'a', k = 0; c <= 'd'; c++, k++) {\n                if (s[i] == c && s[j] == c) {\n                    dp[k][i][j] = (2LL + dp[0][i + 1][j - 1] + dp[1][i + 1][j - 1] + dp[2][i + 1][j - 1] + dp[3][i + 1][j - 1]) % MOD;\n                } else if (s[i] == c) {\n                    dp[k][i][j] = dp[k][i][j - 1];\n                } else if (s[j] == c) {\n                    dp[k][i][j] = dp[k][i + 1][j];\n                } else {\n                    dp[k][i][j] = dp[k][i + 1][j - 1];\n                }\n            }\n        }\n    }\n\n    int res = 0;\n    for (int i = 0; i < 4; i++) {\n        res = (res + dp[i][0][n - 1]) % MOD;\n        for (int j = 0; j < n; ++j) {\n            free(dp[i][j]);\n        }\n        free(dp[i]);\n    }\n    return res;\n}\n```\n\n```go [sol1-Golang]\nfunc countPalindromicSubsequences(s string) (ans int) {\n    const mod int = 1e9 + 7\n    n := len(s)\n    dp := [4][][]int{}\n    for i := range dp {\n        dp[i] = make([][]int, n)\n        for j := range dp[i] {\n            dp[i][j] = make([]int, n)\n        }\n    }\n    for i, c := range s {\n        dp[c-'a'][i][i] = 1\n    }\n\n    for sz := 2; sz <= n; sz++ {\n        for i, j := 0, sz-1; j < n; i++ {\n            for k, c := 0, byte('a'); k < 4; k++ {\n                if s[i] == c && s[j] == c {\n                    dp[k][i][j] = (2 + dp[0][i+1][j-1] + dp[1][i+1][j-1] + dp[2][i+1][j-1] + dp[3][i+1][j-1]) % mod\n                } else if s[i] == c {\n                    dp[k][i][j] = dp[k][i][j-1]\n                } else if s[j] == c {\n                    dp[k][i][j] = dp[k][i+1][j]\n                } else {\n                    dp[k][i][j] = dp[k][i+1][j-1]\n                }\n                c++\n            }\n            j++\n        }\n    }\n\n    for _, d := range dp {\n        ans += d[0][n-1]\n    }\n    return ans % mod\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar countPalindromicSubsequences = function(s) {\n    const MOD = 1000000007;\n    const n = s.length;\n    const dp = new Array(4).fill(0).map(() => new Array(n).fill(0).map(() => new Array(n).fill(0)));\n    for (let i = 0; i < n; i++) {\n        dp[s[i].charCodeAt() - 'a'.charCodeAt()][i][i] = 1;\n    }\n\n    for (let len = 2; len <= n; len++) {\n        for (let i = 0; i + len <= n; i++) {\n            let j = i + len - 1;\n            for (const c of ['a', 'b', 'c', 'd']) {\n                const k = c.charCodeAt() - 'a'.charCodeAt();\n                if (s[i] === c && s[j] === c) {\n                    dp[k][i][j] = (2 + (dp[0][i + 1][j - 1] + dp[1][i + 1][j - 1]) % MOD + (dp[2][i + 1][j - 1] + dp[3][i + 1][j - 1]) % MOD) % MOD;\n                } else if (s[i] === c) {\n                    dp[k][i][j] = dp[k][i][j - 1];\n                } else if (s[j] === c) {\n                    dp[k][i][j] = dp[k][i + 1][j];\n                } else {\n                    dp[k][i][j] = dp[k][i + 1][j - 1];\n                }\n            }\n        }\n    }\n\n    let res = 0;\n    for (let i = 0; i < 4; i++) {\n        res = (res + dp[i][0][n - 1]) % MOD;\n    }\n    return res;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(C^2 \\times n^2)$，其中 $n$ 为字符串 $s$ 的长度，$C$ 为字符串 $s$ 中的字符集大小，在本题中 $C = 4$。时间复杂度主要取决于需要求解的状态数 $C \\times n^2$。在最坏的情况下，当整个字符串只有一个字符的情况下，每一个状态的求解需要 $O(C)$ 的时间开销，所以总的时间复杂度为 $O(C^2 \\times n^2)$。\n\n- 空间复杂度：$O(C \\times n^2)$，其中 $n$ 为字符串 $s$ 的长度，$C$ 为字符串 $s$ 中的字符集大小，在本题中 $C = 4$。空间复杂度主要取决于动态规划模型中状态的总数。\n\n#### 方法二：动态规划（使用二维数组）\n\n**思路与算法**\n\n在方法一中我们是以在某一个区间上，以某一个字符作为开头结尾的「回文序列」个数来作为状态来进行求解。而可以看到每一个状态的求解其实都只和开头和结尾都相同的区间有关。比如计算 $\\textit{dp}(x,i,j)$，当 $s[i] \\ne x$ 或者 $s[j] \\ne x$ 时，$i$ 会向右移动到第一个满足 $s[i] = x$ 的位置，$j$ 会向左移动到第一个满足 $s[j] = x$ 的位置。\n\n所以我们重新定义 $\\textit{dp}(i,j)$ 来表示字符串区间 $s[i:j]$ 中的不同的回文序列个数。我们思考此时如何求解各个状态：\n\n1. 当 $s[i] = s[j] = x$ 时，那么对于 $s[i+1:j-1]$ 中的任意一个「回文序列」在头尾加上字符 $x$ 都会生成一个新的以字符 $x$ 为开头结尾的「回文序列」，并加上 $xx$ 和 $x$ 两个单独的「回文序列」。那么新生成的「回文序列」个数就是 $2 + \\textit{dp}(i+1,j-1)$，此时总的「回文序列」个数就是 $2 + \\textit{dp}(i+1,j-1) \\times 2$，然后我们分析总的「回文序列」中是否有重复的「回文序列」。\n   首先我们思考什么情况才会产生重复的「回文序列」：当 $s[i:j]$ 中存在区间 $s[\\textit{low}:\\textit{high}]$ 使得 $s[\\textit{low}] = s[\\textit{high}]$ 且 $s[\\textit{low}] = s[i]$ 时，对于 $s[\\textit{low}+1:\\textit{high}-1]$ 区间中的任意「回文序列」在求解 $\\textit{dp}(\\textit{low},\\textit{high})$ 时都会与 $s[\\textit{low}]$ 和 $s[\\textit{high}]$ 生成新的回文序列，而这些「回文序列」就是此时总的「回文序列」中重复的「回文序列」。所以我们只要找到最大的区间 $s[\\textit{low}:\\textit{high}]$，然后减去 $\\textit{dp}(low+1,high-1)$ 即可。不过需要注意当最大区间大小为 $1$ 时，此时重复的只有 $x$ 那么只需要减去 $1$ 即可。\n\n   $$\n   \\textit{dp}(i,j) = \\begin{cases}\n   2 + \\textit{dp}(i+1,j-1) \\times 2, & low > high \\\\\n   1 + \\textit{dp}(i+1,j-1) \\times 2, & low = high \\\\\n   \\textit{dp}(i+1,j-1) \\times 2 - \\textit{dp}(low+1,high-1), & low < high \\\\\n   \\end{cases}\n   $$\n\n   为了快速求得 $\\textit{low}$ 和 $\\textit{high}$，我们可以设 $\\textit{next}(i,x)$ 表示从 $s[i]$ 开始往后下一个字符 $x$ 所在的位置，如果不存在则为 $n$，设 $\\textit{pre}(i,x)$ 表示从 $s[i]$ 开始往前下一个字符 $x$ 所在的位置，如果不存在则为 $-1$。那么我们可以在 $O(C \\times n)$ 的时间复杂度预处理得到 $\\textit{next}$ 和 $\\textit{pre}$ 数组。这样每次就可以在 $O(1)$ 的时间开销内得到对应的 $\\textit{low}$ 和 $\\textit{high}$。\n\n2. 当 $s[i] \\ne s[j]$ 时，根据**容斥原理**可得区间 $s[i:j]$ 内的「回文序列」的个数是区间 $s[i+1:j]$ 内的「回文序列」的个数加上区间 $s[i:j-1]$ 内的「回文序列」的个数然后减去公共区间 $s[i+1:j-1]$ 内的「回文序列」的个数:\n   $$\\textit{dp}(i,j) = \\textit{dp}(i,j-1) + \\textit{dp}(i+1,j) - \\textit{dp}(i+1,j-1)$$\n\n上文的讨论是建立在字符串长度大于 $\\text{1}$ 的前提上的，我们还需要考虑动态规划的边界条件，即字符串长度为 $\\text{1}$ 或者不存在的情况。对于长度为 $\\text{1}$ 的字符串，它显然只有本身这一个「回文序列」。对于字符串不存在的情况，那么肯定不存在任何「回文序列」字串。因此我们就可以写出动态规划的边界条件：\n\n$$\n\\textit{dp}(i,j) = \\begin{cases}\n1, & i = j\\\\\n0, & i > j\\\\\n\\end{cases}\n$$\n\n可以看到每一个区间上的求解都与其小区间的求解有关，所以我们可以采用「自底向上」的编码方式来实现求解过程。最终返回 $\\textit{dp}(0,n-1) \\bmod 1000000007$ 即可。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        MOD = 10 ** 9 + 7\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        next = [[0] * 4 for _ in range(n)]\n        pre = [[0] * 4 for _ in range(n)]\n\n        for i in range(n):\n            dp[i][i] = 1\n\n        pos = [-1] * 4\n\n        for i in range(n):\n            for c in range(4):\n                pre[i][c] = pos[c]\n            pos[ord(s[i]) - ord('a')] = i\n\n        pos[0] = pos[1] = pos[2] = pos[3] = n\n\n        for i in range(n - 1, -1, -1):\n            for c in range(4):\n                next[i][c] = pos[c]\n            pos[ord(s[i]) - ord('a')] = i\n\n        for sz in range(2, n + 1):\n            for j in range(sz - 1, n):\n                i = j - sz + 1\n                if s[i] == s[j]:\n                    low, high = next[i][ord(s[i]) - ord('a')], pre[j][ord(s[i]) - ord('a')]\n                    if low > high:\n                        dp[i][j] = (2 + dp[i + 1][j - 1] * 2) % MOD\n                    elif low == high:\n                        dp[i][j] = (1 + dp[i + 1][j - 1] * 2) % MOD\n                    else:\n                        dp[i][j] = (dp[i + 1][j - 1] * 2 - dp[low + 1][high - 1]) % MOD\n                else:\n                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]) % MOD\n        return dp[0][n - 1]\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    const int MOD = 1e9 + 7;\n\n    int countPalindromicSubsequences(string s) {\n        int n = s.size();\n        vector<vector<int>> dp(n, vector<int>(n));\n        vector<vector<int>> next(n, vector<int>(4));\n        vector<vector<int>> pre(n, vector<int>(4));\n\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n\n        vector<int> pos(4, -1);\n\n        for (int i = 0; i < n; i++) {\n            for (int c = 0; c < 4; c++) {\n                pre[i][c] = pos[c];\n            }\n            pos[s[i] - 'a'] = i;\n        }\n\n        pos[0] = pos[1] = pos[2] = pos[3] = n;\n\n        for (int i = n - 1; i >= 0; i--) {\n            for (int c = 0; c < 4; c++) {\n                next[i][c] = pos[c];\n            }\n            pos[s[i] - 'a'] = i;\n        }\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i + len <= n; i++) {\n                int j = i + len - 1;\n                if (s[i] == s[j]) {\n                    int low = next[i][s[i] - 'a'];\n                    int high = pre[j][s[i] - 'a'];\n                    if (low > high) {\n                        dp[i][j] = (2 + dp[i + 1][j - 1] * 2) % MOD;\n                    } else if (low == high) {\n                        dp[i][j] = (1 + dp[i + 1][j - 1] * 2) % MOD;\n                    } else {\n                        dp[i][j] = (0LL + dp[i + 1][j - 1] * 2 - dp[low + 1][high - 1] + MOD) % MOD;\n                    }\n                } else {\n                    dp[i][j] = (0LL + dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] + MOD) % MOD;\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int countPalindromicSubsequences(String s) {\n        final int MOD = 1000000007;\n        int n = s.length();\n        int[][] dp = new int[n][n];\n        int[][] next = new int[n][4];\n        int[][] pre = new int[n][4];\n\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n\n        int[] pos = new int[4];\n        Arrays.fill(pos, -1);\n\n        for (int i = 0; i < n; i++) {\n            for (int c = 0; c < 4; c++) {\n                pre[i][c] = pos[c];\n            }\n            pos[s.charAt(i) - 'a'] = i;\n        }\n\n        pos[0] = pos[1] = pos[2] = pos[3] = n;\n\n        for (int i = n - 1; i >= 0; i--) {\n            for (int c = 0; c < 4; c++) {\n                next[i][c] = pos[c];\n            }\n            pos[s.charAt(i) - 'a'] = i;\n        }\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i + len <= n; i++) {\n                int j = i + len - 1;\n                if (s.charAt(i) == s.charAt(j)) {\n                    int low = next[i][s.charAt(i) - 'a'];\n                    int high = pre[j][s.charAt(i) - 'a'];\n                    if (low > high) {\n                        dp[i][j] = (2 + dp[i + 1][j - 1] * 2) % MOD;\n                    } else if (low == high) {\n                        dp[i][j] = (1 + dp[i + 1][j - 1] * 2) % MOD;\n                    } else {\n                        dp[i][j] = (dp[i + 1][j - 1] * 2 % MOD - dp[low + 1][high - 1] + MOD) % MOD;\n                    }\n                } else {\n                    dp[i][j] = ((dp[i + 1][j] + dp[i][j - 1]) % MOD - dp[i + 1][j - 1] + MOD) % MOD;\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int CountPalindromicSubsequences(string s) {\n        const int MOD = 1000000007;\n        int n = s.Length;\n        int[,] dp = new int[n, n];\n        int[,] next = new int[n, 4];\n        int[,] pre = new int[n, 4];\n\n        for (int i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n\n        int[] pos = new int[4];\n        Array.Fill(pos, -1);\n\n        for (int i = 0; i < n; i++) {\n            for (int c = 0; c < 4; c++) {\n                pre[i, c] = pos[c];\n            }\n            pos[s[i] - 'a'] = i;\n        }\n\n        pos[0] = pos[1] = pos[2] = pos[3] = n;\n\n        for (int i = n - 1; i >= 0; i--) {\n            for (int c = 0; c < 4; c++) {\n                next[i, c] = pos[c];\n            }\n            pos[s[i] - 'a'] = i;\n        }\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i + len <= n; i++) {\n                int j = i + len - 1;\n                if (s[i] == s[j]) {\n                    int low = next[i, s[i] - 'a'];\n                    int high = pre[j, s[i] - 'a'];\n                    if (low > high) {\n                        dp[i, j] = (2 + dp[i + 1, j - 1] * 2) % MOD;\n                    } else if (low == high) {\n                        dp[i, j] = (1 + dp[i + 1, j - 1] * 2) % MOD;\n                    } else {\n                        dp[i, j] = (dp[i + 1, j - 1] * 2 % MOD - dp[low + 1, high - 1] + MOD) % MOD;\n                    }\n                } else {\n                    dp[i, j] = ((dp[i + 1, j] + dp[i, j - 1]) % MOD - dp[i + 1, j - 1] + MOD) % MOD;\n                }\n            }\n        }\n\n        return dp[0, n - 1];\n    }\n}\n```\n\n```C [sol2-C]\n#define MOD 1000000007\n\nint countPalindromicSubsequences(char * s){\n    int n = strlen(s);\n    int **dp = NULL;\n    dp = (int **)malloc(sizeof(int *) * n);\n    int **next = NULL;\n    next = (int **)malloc(sizeof(int *) * n);\n    int **pre = NULL;\n    pre = (int **)malloc(sizeof(int *) * n);\n    for (int i = 0; i < n; i++) {\n        dp[i] = (int *)malloc(sizeof(int) * n);\n        memset(dp[i], 0, sizeof(int) * n);\n        dp[i][i] = 1;\n        next[i] = (int *)malloc(sizeof(int) * 4);\n        pre[i] = (int *)malloc(sizeof(int) * 4);\n    }\n\n    int pos[4];\n    pos[0] = pos[1] = pos[2] = pos[3] = -1;\n\n    for (int i = 0; i < n; i++) {\n        for (int c = 0; c < 4; c++) {\n            pre[i][c] = pos[c];\n        }\n        pos[s[i] - 'a'] = i;\n    }\n\n    pos[0] = pos[1] = pos[2] = pos[3] = n;\n\n    for (int i = n - 1; i >= 0; i--) {\n        for (int c = 0; c < 4; c++) {\n            next[i][c] = pos[c];\n        }\n        pos[s[i] - 'a'] = i;\n    }\n\n    for (int len = 2; len <= n; len++) {\n        for (int i = 0; i + len <= n; i++) {\n            int j = i + len - 1;\n            if (s[i] == s[j]) {\n                int low = next[i][s[i] - 'a'];\n                int high = pre[j][s[i] - 'a'];\n                if (low > high) {\n                    dp[i][j] = (2 + dp[i + 1][j - 1] * 2) % MOD;\n                } else if (low == high) {\n                    dp[i][j] = (1 + dp[i + 1][j - 1] * 2) % MOD;\n                } else {\n                    dp[i][j] = (0LL + dp[i + 1][j - 1] * 2 - dp[low + 1][high - 1] + MOD) % MOD;\n                }\n            } else {\n                dp[i][j] = (0LL + dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] + MOD) % MOD;\n            }\n        }\n    }\n\n    int res = dp[0][n - 1];\n    for (int i = 0; i < n; i++) {\n        free(dp[i]);\n    }\n    free(dp);\n    return res;\n}\n```\n\n```go [sol2-Golang]\nfunc countPalindromicSubsequences(s string) (ans int) {\n    const mod int = 1e9 + 7\n    n := len(s)\n    dp := make([][]int, n)\n    next := make([][]int, n)\n    pre := make([][]int, n)\n    for i := range dp {\n        dp[i] = make([]int, n)\n        dp[i][i] = 1\n        next[i] = make([]int, 4)\n        pre[i] = make([]int, 4)\n    }\n\n    pos := make([]int, 4)\n    for i := 0; i < 4; i++ {\n        pos[i] = -1\n    }\n\n    for i := 0; i < n; i++ {\n        for c := 0; c < 4; c++ {\n            pre[i][c] = pos[c]\n        }\n        pos[s[i]-'a'] = i\n    }\n\n    for i := 0; i < 4; i++ {\n        pos[i] = n\n    }\n\n    for i := n-1; i >= 0; i-- {\n        for c := 0; c < 4; c++ {\n            next[i][c] = pos[c]\n        }\n        pos[s[i]-'a'] = i\n    }\n\n    for sz := 2; sz <= n; sz++ {\n        for i, j := 0, sz-1; j < n; i++ {\n            if s[i] == s[j] {\n                low, high := next[i][s[i]-'a'], pre[j][s[i]-'a']\n                if low > high {\n                    dp[i][j] = (2 + dp[i+1][j-1]*2) % mod\n                } else if low == high {\n                    dp[i][j] = (1 + dp[i+1][j-1]*2) % mod\n                } else {\n                    dp[i][j] = (dp[i+1][j-1]*2 - dp[low+1][high-1] + mod) % mod\n                }\n            } else {\n                dp[i][j] = (dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1] + mod) % mod\n            }\n            j++\n        }\n    }\n\n    return dp[0][n-1]\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar countPalindromicSubsequences = function(s) {\n    const MOD = 1000000007;\n    const n = s.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    const next = new Array(n).fill(0).map(() => new Array(4).fill(0));\n    const pre = new Array(n).fill(0).map(() => new Array(4).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    const pos = new Array(n);\n    pos[0] = pos[1] = pos[2] = pos[3] = -1;\n\n    for (let i = 0; i < n; i++) {\n        for (let c = 0; c < 4; c++) {\n            pre[i][c] = pos[c];\n        }\n        pos[s[i].charCodeAt() - 'a'.charCodeAt()] = i;\n    }\n\n    pos[0] = pos[1] = pos[2] = pos[3] = n;\n\n    for (let i = n - 1; i >= 0; i--) {\n        for (let c = 0; c < 4; c++) {\n            next[i][c] = pos[c];\n        }\n        pos[s[i].charCodeAt() - 'a'.charCodeAt()] = i;\n    }\n\n    for (let len = 2; len <= n; len++) {\n        for (let i = 0; i + len <= n; i++) {\n            let j = i + len - 1;\n            if (s[i] === s[j]) {\n                let low = next[i][s[i].charCodeAt() - 'a'.charCodeAt()];\n                let high = pre[j][s[i].charCodeAt() - 'a'.charCodeAt()];\n                if (low > high) {\n                    dp[i][j] = (2 + dp[i + 1][j - 1] * 2) % MOD;\n                } else if (low === high) {\n                    dp[i][j] = (1 + dp[i + 1][j - 1] * 2) % MOD;\n                } else {\n                    dp[i][j] = (dp[i + 1][j - 1] * 2 % MOD - dp[low + 1][high - 1] + MOD) % MOD;\n                }\n            } else {\n                dp[i][j] = ((dp[i + 1][j] + dp[i][j - 1]) % MOD - dp[i + 1][j - 1] + MOD) % MOD;\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 为字符串 $s$ 的长度。在预处理 $\\textit{next}$ 和 $\\textit{pre}$ 数组时的开销为 $O(C \\times n)$，每次求 $\\textit{low}$ 和 $\\textit{high}$ 的开销为 $O(1)$，所以总的时间复杂度主要取决于需要求解的状态数 $n^2$。\n\n- 空间复杂度：$O(n^2)$，其中 $n$ 为字符串 $s$ 的长度。空间复杂度主要取决于动态规划模型中状态的总数。"
}