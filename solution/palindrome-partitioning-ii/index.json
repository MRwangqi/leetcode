{
	"titleSlug": "palindrome-partitioning-ii",
	"slug": "fen-ge-hui-wen-chuan-ii-by-leetcode-solu-norx",
	"url": "https://leetcode-cn.com/problems/palindrome-partitioning-ii/solution/fen-ge-hui-wen-chuan-ii-by-leetcode-solu-norx/",
	"content": "#### 方法一：动态规划\n\n**思路与算法**\n\n设 $f[i]$ 表示字符串的前缀 $s[0..i]$ 的**最少**分割次数。要想得出 $f[i]$ 的值，我们可以考虑枚举 $s[0..i]$ 分割出的最后一个回文串，这样我们就可以写出状态转移方程：\n\n$$\nf[i] = \\min_{0 \\leq j < i} \\{ f[j] \\} + 1, \\quad 其中 ~ s[j+1..i] ~是一个回文串\n$$\n\n即我们枚举最后一个回文串的起始位置 $j+1$，保证 $s[j+1..i]$ 是一个回文串，那么 $f[i]$ 就可以从 $f[j]$ 转移而来，附加 $1$ 次额外的分割次数。\n\n注意到上面的状态转移方程中，我们还少考虑了一种情况，即 $s[0..i]$ 本身就是一个回文串。此时其不需要进行任何分割，即：\n\n$$\nf[i] = 0\n$$\n\n那么我们如何知道 $s[j+1..i]$ 或者 $s[0..i]$ 是否为回文串呢？我们可以使用与「[131. 分割回文串的官方题解](https://leetcode-cn.com/problems/palindrome-partitioning/solution/fen-ge-hui-wen-chuan-by-leetcode-solutio-6jkv/)」中相同的预处理方法，将字符串 $s$ 的每个子串是否为回文串预先计算出来，即：\n\n> 设 $g(i, j)$ 表示 $s[i..j]$ 是否为回文串，那么有状态转移方程：\n>\n>   $$\n>   g(i, j) = \\begin{cases}\n>   \\texttt{True}, & \\quad i \\geq j \\\\\n>   g(i+1,j-1) \\wedge (s[i]=s[j]), & \\quad \\text{otherwise}\n>   \\end{cases}\n>   $$\n>\n>   其中 $\\wedge$ 表示逻辑与运算，即 $s[i..j]$ 为回文串，当且仅当其为空串（$i>j$），其长度为 $1$（$i=j$），或者首尾字符相同且 $s[i+1..j-1]$ 为回文串。\n\n这样一来，我们只需要 $O(1)$ 的时间就可以判断任意 $s[i..j]$ 是否为回文串了。通过动态规划计算出所有的 $f$ 值之后，最终的答案即为 $f[n-1]$，其中 $n$ 是字符串 $s$ 的长度。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minCut(string s) {\n        int n = s.size();\n        vector<vector<int>> g(n, vector<int>(n, true));\n\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i + 1; j < n; ++j) {\n                g[i][j] = (s[i] == s[j]) && g[i + 1][j - 1];\n            }\n        }\n\n        vector<int> f(n, INT_MAX);\n        for (int i = 0; i < n; ++i) {\n            if (g[0][i]) {\n                f[i] = 0;\n            }\n            else {\n                for (int j = 0; j < i; ++j) {\n                    if (g[j + 1][i]) {\n                        f[i] = min(f[i], f[j] + 1);\n                    }\n                }\n            }\n        }\n\n        return f[n - 1];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minCut(String s) {\n        int n = s.length();\n        boolean[][] g = new boolean[n][n];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(g[i], true);\n        }\n\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = i + 1; j < n; ++j) {\n                g[i][j] = s.charAt(i) == s.charAt(j) && g[i + 1][j - 1];\n            }\n        }\n\n        int[] f = new int[n];\n        Arrays.fill(f, Integer.MAX_VALUE);\n        for (int i = 0; i < n; ++i) {\n            if (g[0][i]) {\n                f[i] = 0;\n            } else {\n                for (int j = 0; j < i; ++j) {\n                    if (g[j + 1][i]) {\n                        f[i] = Math.min(f[i], f[j] + 1);\n                    }\n                }\n            }\n        }\n\n        return f[n - 1];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        g = [[True] * n for _ in range(n)]\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = (s[i] == s[j]) and g[i + 1][j - 1]\n\n        f = [float(\"inf\")] * n\n        for i in range(n):\n            if g[0][i]:\n                f[i] = 0\n            else:\n                for j in range(i):\n                    if g[j + 1][i]:\n                        f[i] = min(f[i], f[j] + 1)\n        \n        return f[n - 1]\n```\n\n```JavaScript [sol1-JavaScript]\nvar minCut = function(s) {\n    const n = s.length;\n    const g = new Array(n).fill(0).map(() => new Array(n).fill(true));\n\n    for (let i = n - 1; i >= 0; --i) {\n        for (let j = i + 1; j < n; ++j) {\n            g[i][j] = s[i] == s[j] && g[i + 1][j - 1];\n        }\n    }\n\n    const f = new Array(n).fill(Number.MAX_SAFE_INTEGER);\n    for (let i = 0; i < n; ++i) {\n        if (g[0][i]) {\n            f[i] = 0;\n        } else {\n            for (let j = 0; j < i; ++j) {\n                if (g[j + 1][i]) {\n                    f[i] = Math.min(f[i], f[j] + 1);\n                }\n            }\n        }\n    }\n\n    return f[n - 1];\n};\n```\n\n```go [sol1-Golang]\nfunc minCut(s string) int {\n    n := len(s)\n    g := make([][]bool, n)\n    for i := range g {\n        g[i] = make([]bool, n)\n        for j := range g[i] {\n            g[i][j] = true\n        }\n    }\n    for i := n - 1; i >= 0; i-- {\n        for j := i + 1; j < n; j++ {\n            g[i][j] = s[i] == s[j] && g[i+1][j-1]\n        }\n    }\n\n    f := make([]int, n)\n    for i := range f {\n        if g[0][i] {\n            continue\n        }\n        f[i] = math.MaxInt64\n        for j := 0; j < i; j++ {\n            if g[j+1][i] && f[j]+1 < f[i] {\n                f[i] = f[j] + 1\n            }\n        }\n    }\n    return f[n-1]\n}\n```\n\n```C [sol1-C]\nint minCut(char* s) {\n    int n = strlen(s);\n    bool g[n][n];\n    memset(g, 1, sizeof(g));\n\n    for (int i = n - 1; i >= 0; --i) {\n        for (int j = i + 1; j < n; ++j) {\n            g[i][j] = (s[i] == s[j]) && g[i + 1][j - 1];\n        }\n    }\n\n    int f[n];\n    for (int i = 0; i < n; ++i) {\n        f[i] = INT_MAX;\n    }\n    for (int i = 0; i < n; ++i) {\n        if (g[0][i]) {\n            f[i] = 0;\n        } else {\n            for (int j = 0; j < i; ++j) {\n                if (g[j + 1][i]) {\n                    f[i] = fmin(f[i], f[j] + 1);\n                }\n            }\n        }\n    }\n\n    return f[n - 1];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是字符串 $s$ 的长度。预处理计算 $g$ 和动态规划计算 $f$ 的时间复杂度均为 $O(n^2)$。\n\n- 空间复杂度：$O(n^2)$，数组 $g$ 需要使用 $O(n^2)$ 的空间，数组 $f$ 需要使用 $O(n)$ 的空间。"
}