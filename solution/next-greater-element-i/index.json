{
	"titleSlug": "next-greater-element-i",
	"slug": "xia-yi-ge-geng-da-yuan-su-i-by-leetcode-bfcoj",
	"url": "https://leetcode-cn.com/problems/next-greater-element-i/solution/xia-yi-ge-geng-da-yuan-su-i-by-leetcode-bfcoj/",
	"content": "#### 方法一：暴力\n\n**思路和算法**\n\n根据题意，我们发现 $\\textit{nums}_1$ 是一个查询数组，逐个查询 $\\textit{nums}_2$ 中元素右边的第一个更大的值。因此，我们可以暴力地逐个计算 $\\textit{nums}_1$ 中的每个元素值 $\\textit{nums}_1[i]$ 在 $\\textit{nums}_2$ 中对应位置的右边的第一个比 $\\textit{nums}_1[i]$ 大的元素值。具体地，我们使用如下方法：\n\n- 初始化与 $\\textit{nums}_1$ 等长的查询数组 $\\textit{res}$。\n\n- 遍历 $\\textit{nums}_1$ 中的所有元素，不妨设当前遍历到元素为 $\\textit{nums}_1[i]$：\n  - 从前向后遍历 $\\textit{nums}_2$ 中的元素，直至找到 $\\textit{nums}_2[j] = \\textit{nums}_1[i]$；\n\n  - 从 $j+1$ 开始继续向后遍历，直至找到 $\\textit{nums}_2[k] > \\textit{nums}_2[j]$，其中 $k \\ge j+1$；\n\n  - 如果找到了 $\\textit{nums}_2[k]$，则将 $\\textit{res}[i]$ 置为 $\\textit{nums}_2[k]$，否则将 $\\textit{res}[i]$ 置为 $-1$。\n\n-  查询数组 $\\textit{res}$ 即为最终结果。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        m, n = len(nums1), len(nums2)\n        res = [0] * m\n        for i in range(m):\n            j = nums2.index(nums1[i])\n            k = j + 1\n            while k < n and nums2[k] < nums2[j]:\n                k += 1\n            res[i] = nums2[k] if k < n else -1\n        return res\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] nextGreaterElement(int[] nums1, int[] nums2) {\n        int m = nums1.length, n = nums2.length;\n        int[] res = new int[m];\n        for (int i = 0; i < m; ++i) {\n            int j = 0;\n            while (j < n && nums2[j] != nums1[i]) {\n                ++j;\n            }\n            int k = j + 1;\n            while (k < n && nums2[k] < nums2[j]) {\n                ++k;\n            }\n            res[i] = k < n ? nums2[k] : -1;\n        }\n        return res;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] NextGreaterElement(int[] nums1, int[] nums2) {\n        int m = nums1.Length, n = nums2.Length;\n        int[] res = new int[m];\n        for (int i = 0; i < m; ++i) {\n            int j = 0;\n            while (j < n && nums2[j] != nums1[i]) {\n                ++j;\n            }\n            int k = j + 1;\n            while (k < n && nums2[k] < nums2[j]) {\n                ++k;\n            }\n            res[i] = k < n ? nums2[k] : -1;\n        }\n        return res;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {\n        int m = nums1.size();\n        int n = nums2.size();\n        vector<int> res(m);\n        for (int i = 0; i < m; ++i) {\n            int j = 0;\n            while (j < n && nums2[j] != nums1[i]) {\n                ++j;\n            }\n            int k = j + 1;\n            while (k < n && nums2[k] < nums2[j]) {\n                ++k;\n            }\n            res[i] = k < n ? nums2[k] : -1;\n        }\n        return res;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar nextGreaterElement = function(nums1, nums2) {\n    const m = nums1.length, n = nums2.length;\n    const res = new Array(m).fill(0);\n    for (let i = 0; i < m; ++i) {\n        let j = 0;\n        while (j < n && nums2[j] !== nums1[i]) {\n            ++j;\n        }\n        let k = j + 1;\n        while (k < n && nums2[k] < nums2[j]) {\n            ++k;\n        }\n        res[i] = k < n ? nums2[k] : -1;\n    }\n    return res;\n};\n```\n\n```go [sol1-Golang]\nfunc nextGreaterElement(nums1, nums2 []int) []int {\n    m, n := len(nums1), len(nums2)\n    res := make([]int, m)\n    for i, num := range nums1 {\n        j := 0\n        for j < n && nums2[j] != num {\n            j++\n        }\n        k := j + 1\n        for k < n && nums2[k] < nums2[j] {\n            k++\n        }\n        if k < n {\n            res[i] = nums2[k]\n        } else {\n            res[i] = -1\n        }\n    }\n    return res\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 是 $\\textit{nums}_1$ 的长度，$n$ 是 $\\textit{nums}_2$ 的长度。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：单调栈 + 哈希表\n\n**思路**\n\n我们可以先预处理 $\\textit{nums}_2$，使查询 $\\textit{nums}_1$ 中的每个元素在 $\\textit{nums}_2$ 中对应位置的右边的第一个更大的元素值时不需要再遍历 $\\textit{nums}_2$。于是，我们将题目分解为两个子问题：\n\n- 第 $1$ 个子问题：如何更高效地计算 $\\textit{nums}_2$ 中每个元素右边的第一个更大的值；\n\n- 第 $2$ 个子问题：如何存储第 $1$ 个子问题的结果。\n\n**算法**\n\n我们可以使用单调栈来解决第 $1$ 个子问题。倒序遍历 $\\textit{nums}_2$，并用单调栈中维护当前位置右边的更大的元素列表，从栈底到栈顶的元素是单调递减的。\n\n具体地，每次我们移动到数组中一个新的位置 $i$，就将当前单调栈中所有小于 $\\textit{nums}_2[i]$ 的元素弹出单调栈，当前位置右边的第一个更大的元素即为栈顶元素，如果栈为空则说明当前位置右边没有更大的元素。随后我们将位置 $i$ 的元素入栈。\n\n可以结合以下例子来理解。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/496/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/496/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/496/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/496/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/496/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/496/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/496/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/496/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/496/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/496/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/496/11.png),![fig12](https://assets.leetcode-cn.com/solution-static/496/12.png),![fig13](https://assets.leetcode-cn.com/solution-static/496/13.png)>\n\n因为题目规定了 $\\textit{nums}_2$ 是没有重复元素的，所以我们可以使用哈希表来解决第 $2$ 个子问题，将元素值与其右边第一个更大的元素值的对应关系存入哈希表。\n\n**细节**\n\n因为在这道题中我们只需要用到 $\\textit{nums}_2$ 中元素的顺序而不需要用到下标，所以栈中直接存储 $\\textit{nums}_2$ 中元素的值即可。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        res = {}\n        stack = []\n        for num in reversed(nums2):\n            while stack and num >= stack[-1]:\n                stack.pop()\n            res[num] = stack[-1] if stack else -1\n            stack.append(num)\n        return [res[num] for num in nums1]\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] nextGreaterElement(int[] nums1, int[] nums2) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n        for (int i = nums2.length - 1; i >= 0; --i) {\n            int num = nums2[i];\n            while (!stack.isEmpty() && num >= stack.peek()) {\n                stack.pop();\n            }\n            map.put(num, stack.isEmpty() ? -1 : stack.peek());\n            stack.push(num);\n        }\n        int[] res = new int[nums1.length];\n        for (int i = 0; i < nums1.length; ++i) {\n            res[i] = map.get(nums1[i]);\n        }\n        return res;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int[] NextGreaterElement(int[] nums1, int[] nums2) {\n        Dictionary<int, int> dictionary = new Dictionary<int, int>();\n        Stack<int> stack = new Stack<int>();\n        for (int i = nums2.Length - 1; i >= 0; --i) {\n            int num = nums2[i];\n            while (stack.Count > 0 && num >= stack.Peek()) {\n                stack.Pop();\n            }\n            dictionary.Add(num, stack.Count > 0 ? stack.Peek() : -1);\n            stack.Push(num);\n        }\n        int[] res = new int[nums1.Length];\n        for (int i = 0; i < nums1.Length; ++i) {\n            res[i] = dictionary[nums1[i]];\n        }\n        return res;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {\n        unordered_map<int,int> hashmap;\n        stack<int> st;\n        for (int i = nums2.size() - 1; i >= 0; --i) {\n            int num = nums2[i];\n            while (!st.empty() && num >= st.top()) {\n                st.pop();\n            }\n            hashmap[num] = st.empty() ? -1 : st.top();\n            st.push(num);\n        }\n        vector<int> res(nums1.size());\n        for (int i = 0; i < nums1.size(); ++i) {\n            res[i] = hashmap[nums1[i]];\n        }\n        return res;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar nextGreaterElement = function(nums1, nums2) {\n    const map = new Map();\n    const stack = [];\n    for (let i = nums2.length - 1; i >= 0; --i) {\n        const num = nums2[i];\n        while (stack.length && num >= stack[stack.length - 1]) {\n            stack.pop();\n        }\n        map.set(num, stack.length ? stack[stack.length - 1] : -1);\n        stack.push(num);\n    }\n    const res = new Array(nums1.length).fill(0).map((_, i) => map.get(nums1[i]));\n    return res;\n};\n```\n\n```go [sol2-Golang]\nfunc nextGreaterElement(nums1, nums2 []int) []int {\n    mp := map[int]int{}\n    stack := []int{}\n    for i := len(nums2) - 1; i >= 0; i-- {\n        num := nums2[i]\n        for len(stack) > 0 && num >= stack[len(stack)-1] {\n            stack = stack[:len(stack)-1]\n        }\n        if len(stack) > 0 {\n            mp[num] = stack[len(stack)-1]\n        } else {\n            mp[num] = -1\n        }\n        stack = append(stack, num)\n    }\n    res := make([]int, len(nums1))\n    for i, num := range nums1 {\n        res[i] = mp[num]\n    }\n    return res\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m + n)$，其中 $m$ 是 $\\textit{nums}_1$ 的长度，$n$ 是 $\\textit{nums}_2$ 的长度。我们需要遍历 $\\textit{nums}_2$ 以计算 $\\textit{nums}_2$ 中每个元素右边的第一个更大的值；需要遍历 $\\textit{nums}_1$ 以生成查询结果。\n\n- 空间复杂度：$O(n)$，用于存储哈希表。"
}