{
	"titleSlug": "most-visited-sector-in-a-circular-track",
	"slug": "yuan-xing-sai-dao-shang-jing-guo-ci-shu-zui-duo--2",
	"url": "https://leetcode-cn.com/problems/most-visited-sector-in-a-circular-track/solution/yuan-xing-sai-dao-shang-jing-guo-ci-shu-zui-duo--2/",
	"content": "#### 方法一：模拟\n\n**思路与算法**\n\n由于马拉松全程只会按照同一个方向跑，中间不论跑了多少圈，对所有扇区的经过次数的贡献都是相同的。因此此题的答案仅与起点和终点相关。从起点沿着逆时针方向走到终点的这部分扇区，就是经过次数最多的扇区。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> mostVisited(int n, vector<int>& rounds) {\n        vector<int> ret;\n        int size = rounds.size();\n        int start = rounds[0], end = rounds[size - 1];\n        if (start <= end) {\n            for (int i = start; i <= end; i++) {\n                ret.push_back(i);\n            }\n        } else { // 由于题目要求按扇区大小排序，因此我们要将区间分成两部分\n            for (int i = 1; i <= end; i++) {\n                ret.push_back(i);\n            }\n            for (int i = start; i <= n; i++) {\n                ret.push_back(i);\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> mostVisited(int n, int[] rounds) {\n        List<Integer> ret = new ArrayList<Integer>();\n        int length = rounds.length;\n        int start = rounds[0], end = rounds[length - 1];\n        if (start <= end) {\n            for (int i = start; i <= end; i++) {\n                ret.add(i);\n            }\n        } else { // 由于题目要求按扇区大小排序，因此我们要将区间分成两部分\n            for (int i = 1; i <= end; i++) {\n                ret.add(i);\n            }\n            for (int i = start; i <= n; i++) {\n                ret.add(i);\n            }\n        }\n        return ret;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar mostVisited = function(n, rounds) {\n    const ret = [];\n    const size = rounds.length;\n    const start = rounds[0], end = rounds[size - 1];\n    if (start <= end) {\n        for (let i = start; i <= end; i++) {\n            ret.push(i);\n        }\n    } else { // 由于题目要求按扇区大小排序，因此我们要将区间分成两部分\n        for (let i = 1; i <= end; i++) {\n            ret.push(i);\n        }\n        for (let i = start; i <= n; i++) {\n            ret.push(i);\n        }\n    }\n    return ret;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def mostVisited(self, n: int, rounds: List[int]) -> List[int]:\n        start, end = rounds[0], rounds[-1]\n        if start <= end:\n            return list(range(start, end + 1))\n        else:\n            leftPart = range(1, end + 1)\n            rightPart = range(start, n + 1)\n            return list(itertools.chain(leftPart, rightPart))\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$。起点和终点之间最多相距 $N-1$ 个扇区。\n\n- 空间复杂度：$O(1)$。除答案数组外，我们只需常数的空间来存放若干变量。"
}