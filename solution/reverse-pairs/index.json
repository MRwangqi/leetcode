{
	"titleSlug": "reverse-pairs",
	"slug": "fan-zhuan-dui-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/reverse-pairs/solution/fan-zhuan-dui-by-leetcode-solution/",
	"content": "#### 前言\n\n本题与「[327. 区间和的个数](https://leetcode-cn.com/problems/count-of-range-sum/)」非常相像。\n\n在 327 题中，我们要对前缀和数组的每一个元素 $\\textit{preSum}[i]$，找出所有位于 $i$ 左侧的下标 $j$ 的数量，要求 $j$ 满足 $\\textit{preSum}[j] \\in [\\textit{preSum}[i]-\\textit{upper}, \\textit{preSum}[i]-\\textit{lower}]$。而在此题中，我们则要对数组中的每一个元素 $\\textit{sum}[i]$，找出位于 $i$ 左侧，且满足 $\\textit{nums}[j] > 2\\cdot \\textit{nums}[i]$ 的下标 $j$。\n\n不难发现，二者都是要对数组中的每一个元素，统计「在它左侧，且取值位于某个区间」的元素数量。两个问题唯一的区别仅仅在于取值区间的不同，因此可以用相似的方法解决这两个问题。\n\n在「[327 题的题解：区间和的个数](https://leetcode-cn.com/problems/count-of-range-sum/solution/qu-jian-he-de-ge-shu-by-leetcode-solution/)」中，我们介绍了归并排序、线段树、树状数组以及平衡搜索树等多种解法。对于本题，我们只给出基于归并排序与树状数组的方法，感兴趣的读者可以参照前面给出的链接，自行完成其他方法的代码。\n\n#### 方法一：归并排序\n\n**思路及解法**\n\n在归并排序的过程中，假设对于数组 $\\textit{nums}[l..r]$ 而言，我们已经分别求出了子数组 $\\textit{nums}[l..m]$ 与 $\\textit{nums}[m+1..r]$ 的翻转对数目，**并已将两个子数组分别排好序**，则 $\\textit{nums}[l..r]$ 中的翻转对数目，就等于两个子数组的翻转对数目之和，加上左右端点分别位于两个子数组的翻转对数目。\n\n我们可以为两个数组分别维护指针 $i,j$。对于任意给定的 $i$ 而言，我们不断地向右移动 $j$，直到 $\\textit{nums}[i] \\le 2\\cdot \\textit{nums}[j]$。此时，意味着以 $i$ 为左端点的翻转对数量为 $j-m-1$。随后，我们再将 $i$ 向右移动一个单位，并用相同的方式计算以 $i$ 为左端点的翻转对数量。不断重复这样的过程，就能够求出所有左右端点分别位于两个子数组的翻转对数目。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int reversePairsRecursive(vector<int>& nums, int left, int right) {\n        if (left == right) {\n            return 0;\n        } else {\n            int mid = (left + right) / 2;\n            int n1 = reversePairsRecursive(nums, left, mid);\n            int n2 = reversePairsRecursive(nums, mid + 1, right);\n            int ret = n1 + n2;\n\n            // 首先统计下标对的数量\n            int i = left;\n            int j = mid + 1;\n            while (i <= mid) {\n                while (j <= right && (long long)nums[i] > 2 * (long long)nums[j]) j++;\n                ret += (j - mid - 1);\n                i++;\n            }\n\n            // 随后合并两个排序数组\n            vector<int> sorted(right - left + 1);\n            int p1 = left, p2 = mid + 1;\n            int p = 0;\n            while (p1 <= mid || p2 <= right) {\n                if (p1 > mid) {\n                    sorted[p++] = nums[p2++];\n                } else if (p2 > right) {\n                    sorted[p++] = nums[p1++];\n                } else {\n                    if (nums[p1] < nums[p2]) {\n                        sorted[p++] = nums[p1++];\n                    } else {\n                        sorted[p++] = nums[p2++];\n                    }\n                }\n            }\n            for (int i = 0; i < sorted.size(); i++) {\n                nums[left + i] = sorted[i];\n            }\n            return ret;\n        }\n    }\n\n    int reversePairs(vector<int>& nums) {\n        if (nums.size() == 0) return 0;\n        return reversePairsRecursive(nums, 0, nums.size() - 1);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int reversePairs(int[] nums) {\n        if (nums.length == 0) {\n            return 0;\n        }\n        return reversePairsRecursive(nums, 0, nums.length - 1);\n    }\n\n    public int reversePairsRecursive(int[] nums, int left, int right) {\n        if (left == right) {\n            return 0;\n        } else {\n            int mid = (left + right) / 2;\n            int n1 = reversePairsRecursive(nums, left, mid);\n            int n2 = reversePairsRecursive(nums, mid + 1, right);\n            int ret = n1 + n2;\n\n            // 首先统计下标对的数量\n            int i = left;\n            int j = mid + 1;\n            while (i <= mid) {\n                while (j <= right && (long) nums[i] > 2 * (long) nums[j]) {\n                    j++;\n                }\n                ret += j - mid - 1;\n                i++;\n            }\n\n            // 随后合并两个排序数组\n            int[] sorted = new int[right - left + 1];\n            int p1 = left, p2 = mid + 1;\n            int p = 0;\n            while (p1 <= mid || p2 <= right) {\n                if (p1 > mid) {\n                    sorted[p++] = nums[p2++];\n                } else if (p2 > right) {\n                    sorted[p++] = nums[p1++];\n                } else {\n                    if (nums[p1] < nums[p2]) {\n                        sorted[p++] = nums[p1++];\n                    } else {\n                        sorted[p++] = nums[p2++];\n                    }\n                }\n            }\n            for (int k = 0; k < sorted.length; k++) {\n                nums[left + k] = sorted[k];\n            }\n            return ret;\n        }\n    }\n}\n```\n\n```Golang [sol1-Golang]\nfunc reversePairs(nums []int) int {\n    n := len(nums)\n    if n <= 1 {\n        return 0\n    }\n\n    n1 := append([]int(nil), nums[:n/2]...)\n    n2 := append([]int(nil), nums[n/2:]...)\n    cnt := reversePairs(n1) + reversePairs(n2) // 递归完毕后，n1 和 n2 均为有序\n\n    // 统计重要翻转对 (i,j) 的数量\n    // 由于 n1 和 n2 均为有序，可以用两个指针同时遍历\n    j := 0\n    for _, v := range n1 {\n        for j < len(n2) && v > 2*n2[j] {\n            j++\n        }\n        cnt += j\n    }\n\n    // n1 和 n2 归并填入 nums\n    p1, p2 := 0, 0\n    for i := range nums {\n        if p1 < len(n1) && (p2 == len(n2) || n1[p1] <= n2[p2]) {\n            nums[i] = n1[p1]\n            p1++\n        } else {\n            nums[i] = n2[p2]\n            p2++\n        }\n    }\n    return cnt\n}\n```\n\n```C [sol1-C]\nint reversePairsRecursive(int* nums, int left, int right) {\n    if (left == right) {\n        return 0;\n    } else {\n        int mid = (left + right) / 2;\n        int n1 = reversePairsRecursive(nums, left, mid);\n        int n2 = reversePairsRecursive(nums, mid + 1, right);\n        int ret = n1 + n2;\n\n        // 首先统计下标对的数量\n        int i = left;\n        int j = mid + 1;\n        while (i <= mid) {\n            while (j <= right && (long long)nums[i] > 2 * (long long)nums[j]) j++;\n            ret += (j - mid - 1);\n            i++;\n        }\n\n        // 随后合并两个排序数组\n        int sorted[right - left + 1];\n        int p1 = left, p2 = mid + 1;\n        int p = 0;\n        while (p1 <= mid || p2 <= right) {\n            if (p1 > mid) {\n                sorted[p++] = nums[p2++];\n            } else if (p2 > right) {\n                sorted[p++] = nums[p1++];\n            } else {\n                if (nums[p1] < nums[p2]) {\n                    sorted[p++] = nums[p1++];\n                } else {\n                    sorted[p++] = nums[p2++];\n                }\n            }\n        }\n        for (int i = 0; i < right - left + 1; i++) {\n            nums[left + i] = sorted[i];\n        }\n        return ret;\n    }\n}\n\nint reversePairs(int* nums, int numsSize) {\n    if (numsSize == 0) {\n        return 0;\n    }\n    return reversePairsRecursive(nums, 0, numsSize - 1);\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar reversePairs = function(nums) {\n    if (nums.length === 0) {\n        return 0;\n    }\n    return reversePairsRecursive(nums, 0, nums.length - 1);\n};\n\nconst reversePairsRecursive = (nums, left, right) => {\n    if (left === right) {\n        return 0;\n    } else {\n        const mid = Math.floor((left + right) / 2);\n        const n1 = reversePairsRecursive(nums, left, mid);\n        const n2 = reversePairsRecursive(nums, mid + 1, right);\n        let ret = n1 + n2;\n\n        let i = left;\n        let j = mid + 1;\n        while (i <= mid) {\n            while (j <= right && nums[i] > 2 * nums[j]) {\n                j++;\n            }\n            ret += j - mid - 1;\n            i++;\n        }\n\n        const sorted = new Array(right - left + 1);\n        let p1 = left, p2 = mid + 1;\n        let p = 0;\n        while (p1 <= mid || p2 <= right) {\n            if (p1 > mid) {\n                sorted[p++] = nums[p2++];\n            } else if (p2 > right) {\n                sorted[p++] = nums[p1++];\n            } else {\n                if (nums[p1] < nums[p2]) {\n                    sorted[p++] = nums[p1++];\n                } else {\n                    sorted[p++] = nums[p2++];\n                }\n            }\n        }\n        for (let k = 0; k < sorted.length; k++) {\n            nums[left + k] = sorted[k];\n        }\n        return ret;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\log N)$，其中 $N$ 为数组的长度。\n\n- 空间复杂度：$O(N)$，其中 $N$ 为数组的长度。\n\n#### 方法二：树状数组\n\n**思路及解法**\n\n树状数组支持的基本查询为求出 $[1, \\textit{val}]$ 之间的整数数量。因此，对于 $\\textit{nums}[i]$ 而言，我们首先查询 $[1,2\\cdot\\textit{nums}[i]]$ 的数量，再求出 $[1,\\textit{maxValue}]$ 的数量（其中 $\\textit{maxValue}$ 为数组中最大元素的二倍）。二者相减，就能够得到以 $i$ 为右端点的翻转对数量。\n\n由于数组中整数的范围可能很大，故在使用树状数组解法之前，需要利用哈希表将所有可能出现的整数，映射到连续的整数区间内。\n\n**代码**\n\n```C++ [sol2-C++]\nclass BIT {\nprivate:\n    vector<int> tree;\n    int n;\n\npublic:\n    BIT(int _n) : n(_n), tree(_n + 1) {}\n\n    static constexpr int lowbit(int x) {\n        return x & (-x);\n    }\n\n    void update(int x, int d) {\n        while (x <= n) {\n            tree[x] += d;\n            x += lowbit(x);\n        }\n    }\n\n    int query(int x) const {\n        int ans = 0;\n        while (x) {\n            ans += tree[x];\n            x -= lowbit(x);\n        }\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    int reversePairs(vector<int>& nums) {\n        set<long long> allNumbers;\n        for (int x : nums) {\n            allNumbers.insert(x);\n            allNumbers.insert((long long)x * 2);\n        }\n        // 利用哈希表进行离散化\n        unordered_map<long long, int> values;\n        int idx = 0;\n        for (long long x : allNumbers) {\n            values[x] = ++idx;\n        }\n\n        int ret = 0;\n        BIT bit(values.size());\n        for (int i = 0; i < nums.size(); i++) {\n            int left = values[(long long)nums[i] * 2], right = values.size();\n            ret += bit.query(right) - bit.query(left);\n            bit.update(values[nums[i]], 1);\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int reversePairs(int[] nums) {\n        Set<Long> allNumbers = new TreeSet<Long>();\n        for (int x : nums) {\n            allNumbers.add((long) x);\n            allNumbers.add((long) x * 2);\n        }\n        // 利用哈希表进行离散化\n        Map<Long, Integer> values = new HashMap<Long, Integer>();\n        int idx = 0;\n        for (long x : allNumbers) {\n            values.put(x, idx);\n            idx++;\n        }\n\n        int ret = 0;\n        BIT bit = new BIT(values.size());\n        for (int i = 0; i < nums.length; i++) {\n            int left = values.get((long) nums[i] * 2), right = values.size() - 1;\n            ret += bit.query(right + 1) - bit.query(left + 1);\n            bit.update(values.get((long) nums[i]) + 1, 1);\n        }\n        return ret;\n    }\n}\n\nclass BIT {\n    int[] tree;\n    int n;\n\n    public BIT(int n) {\n        this.n = n;\n        this.tree = new int[n + 1];\n    }\n\n    public static int lowbit(int x) {\n        return x & (-x);\n    }\n\n    public void update(int x, int d) {\n        while (x <= n) {\n            tree[x] += d;\n            x += lowbit(x);\n        }\n    }\n\n    public int query(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans += tree[x];\n            x -= lowbit(x);\n        }\n        return ans;\n    }\n}\n```\n\n```Golang [sol2-Golang]\ntype fenwick struct {\n    tree []int\n}\n\nfunc newFenwickTree(n int) fenwick {\n    return fenwick{make([]int, n+1)}\n}\n\nfunc (f fenwick) add(i int) {\n    for ; i < len(f.tree); i += i & -i {\n        f.tree[i]++\n    }\n}\n\nfunc (f fenwick) sum(i int) (res int) {\n    for ; i > 0; i &= i - 1 {\n        res += f.tree[i]\n    }\n    return\n}\n\nfunc reversePairs(nums []int) (cnt int) {\n    n := len(nums)\n    if n <= 1 {\n        return\n    }\n\n    // 离散化所有下面统计时会出现的元素\n    allNums := make([]int, 0, 2*n)\n    for _, v := range nums {\n        allNums = append(allNums, v, 2*v)\n    }\n    sort.Ints(allNums)\n    k := 1\n    kth := map[int]int{allNums[0]: k}\n    for i := 1; i < 2*n; i++ {\n        if allNums[i] != allNums[i-1] {\n            k++\n            kth[allNums[i]] = k\n        }\n    }\n\n    t := newFenwickTree(k)\n    for i, v := range nums {\n        // 统计之前插入了多少个比 2*v 大的数\n        cnt += i - t.sum(kth[2*v])\n        t.add(kth[v])\n    }\n    return\n}\n```\n\n```C [sol2-C]\nint lowbit(int x) {\n    return x & (-x);\n}\n\nvoid update(int* tree, int treeSize, int x, int d) {\n    while (x <= treeSize) {\n        tree[x] += d;\n        x += lowbit(x);\n    }\n}\n\nint query(int* tree, int x) {\n    int ans = 0;\n    while (x) {\n        ans += tree[x];\n        x -= lowbit(x);\n    }\n    return ans;\n}\n\nint cmp(void* _a, void* _b) {\n    long long a = *((long long*)_a), b = *((long long*)_b);\n    return a < b ? -1 : 1;\n}\n\nint lower_bound(long long* a, int aSize, long long target) {\n    int left = 0, right = aSize;\n    while (left < right) {\n        int mid = (left + right) / 2;\n        if (a[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\nint discrete(int* nums, int numsSize, int* ret) {\n    long long rec[numsSize * 2];\n    for (int i = 0; i < numsSize; i++) {\n        rec[i * 2] = nums[i], rec[i * 2 + 1] = (long long)nums[i] * 2;\n    }\n    qsort(rec, numsSize * 2, sizeof(long long), cmp);\n    int retSize = 0;\n    for (int i = 0; i < numsSize * 2; i++) {\n        if (retSize == 0 || rec[retSize - 1] != rec[i]) {\n            rec[retSize++] = rec[i];\n        }\n    }\n    for (int i = 0; i < numsSize; i++) {\n        ret[i * 2] = lower_bound(rec, retSize, nums[i]) + 1;\n        ret[i * 2 + 1] = lower_bound(rec, retSize, (long long)nums[i] * 2) + 1;\n    }\n    return retSize;\n}\n\nint reversePairs(int* nums, int numsSize) {\n    if (numsSize == 0) {\n        return 0;\n    }\n\n    int values[numsSize * 2];\n    int valuesSize = discrete(nums, numsSize, values);\n    int ret = 0;\n    int tree[valuesSize + 2];\n    memset(tree, 0, sizeof(tree));\n    for (int i = 0; i < numsSize; i++) {\n        int left = values[i * 2 + 1], right = valuesSize + 1;\n        ret += query(tree, right) - query(tree, left);\n        update(tree, valuesSize + 1, values[i * 2], 1);\n    }\n    return ret;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar reversePairs = function(nums) {\n    const allNumbers = Array.from(\n        new Set([...nums, ...nums.map(x => 2 * x)]\n        .sort((x, y) => x - y))\n    );\n    // 利用哈希表进行优化\n    const values = new Map();\n    let idx = 0;\n    allNumbers.forEach(x => values.set(x, ++idx));\n\n    let ret = 0;\n    const bit = new BIT(values.size);\n    for (let i = 0; i < nums.length; i++) {\n        let left = values.get(nums[i] * 2), right = values.size;\n        ret += bit.query(right) - bit.query(left);\n        bit.update(values.get(nums[i]), 1);\n    }\n    return ret;\n};\n\nlet BIT = class {\n    constructor(n) {\n        this.n = n;\n        this.tree = new Array(n + 1).fill(0);\n    }\n\n    lowbit(x) {\n        return x & (-x);\n    }\n\n    update(x, d) {\n        while (x <= this.n) {\n            this.tree[x] += d;\n            x += this.lowbit(x);\n        }\n    }\n\n    query(x) {\n        let ans = 0;\n        while (x > 0) {\n            ans += this.tree[x];\n            x -= this.lowbit(x);\n        }\n        return ans;\n    }\n}\n\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\log N)$，其中 $N$ 为数组的长度。\n\n- 空间复杂度：$O(N)$，其中 $N$ 为数组的长度。"
}