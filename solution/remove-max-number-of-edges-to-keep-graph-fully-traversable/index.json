{
	"titleSlug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
	"slug": "bao-zheng-tu-ke-wan-quan-bian-li-by-leet-mtrw",
	"url": "https://leetcode-cn.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/solution/bao-zheng-tu-ke-wan-quan-bian-li-by-leet-mtrw/",
	"content": "#### 方法一：并查集\n\n**思路与算法**\n\n我们称类型 $1, 2, 3$ 的边分别为「Alice 独占边」「Bob 独占边」以及「公共边」。\n\n首先我们需要思考什么样的图是可以被 Alice 和 Bob 完全遍历的。对于 Alice 而言，她可以经过的边是「Alice 独占边」以及「公共边」，由于她需要能够从任意节点到达任意节点，那么就说明：\n\n> 当图中仅有「Alice 独占边」以及「公共边」时，整个图是连通的，即整个图只包含一个连通分量。\n\n同理，对于 Bob 而言，当图中仅有「Bob 独占边」以及「公共边」时，整个图也要是连通的。\n\n由于题目描述中希望我们删除**最多数目**的边，这等价于保留**最少数目**的边。换句话说，我们可以从一个仅包含 $n$ 个节点（而没有边）的无向图开始，逐步添加边，使得满足上述的要求。\n\n那么我们应该按照什么策略来添加边呢？直觉告诉我们，「公共边」的重要性大于「Alice 独占边」以及「Bob 独占边」，因为「公共边」是 Alice 和 Bob 都可以使用的，而他们各自的独占边却不能给对方使用。「公共边」的重要性也是可以证明的：\n\n> 对于一条连接了两个**不同**的连通分量的「公共边」而言，如果我们不保留这条公共边，那么 Alice 和 Bob 就无法往返这两个连通分量，即他们分别需要使用各自的独占边。因此，Alice 需要一条连接这两个连通分量的独占边，Bob 同样也需要一条连接这两个连通分量的独占边，那么一共需要两条边，这就严格不优于直接使用一条连接这两个连通分量的「公共边」了。\n\n因此，我们可以遵从优先添加「公共边」的策略。具体地，我们遍历每一条「公共边」，对于其连接的的两个节点：\n\n- 如果这两个节点在同一个连通分量中，那么添加这条「公共边」是无意义的；\n\n- 如果这两个节点不在同一个连通分量中，我们就可以（并且一定）添加这条「公共边」，然后合并这两个节点所在的连通分量。\n\n这就提示了我们使用**并查集**来维护整个图的连通性，上述的策略只需要用到并查集的「查询」和「合并」这两个最基础的操作。\n\n在处理完了所有的「公共边」之后，我们需要处理他们各自的独占边，而方法也与添加「公共边」类似。我们将当前的并查集复制一份，一份交给 Alice，一份交给 Bob。随后 Alice 不断地向并查集中添加「Alice 独占边」，Bob 不断地向并查集中添加「Bob 独占边」。在处理完了所有的独占边之后，如果这两个并查集都只包含一个连通分量，那么就说明 Alice 和 Bob 都可以遍历整个无向图。\n\n**细节**\n\n在使用并查集进行合并的过程中，我们每遇到一次失败的合并操作（即需要合并的两个点属于同一个连通分量），那么就说明当前这条边可以被删除，将答案增加 $1$。\n\n**代码**\n\n```C++ [sol1-C++]\n// 并查集模板\nclass UnionFind {\npublic:\n    vector<int> parent;\n    vector<int> size;\n    int n;\n    // 当前连通分量数目\n    int setCount;\n    \npublic:\n    UnionFind(int _n): n(_n), setCount(_n), parent(_n), size(_n, 1) {\n        iota(parent.begin(), parent.end(), 0);\n    }\n    \n    int findset(int x) {\n        return parent[x] == x ? x : parent[x] = findset(parent[x]);\n    }\n    \n    bool unite(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        if (x == y) {\n            return false;\n        }\n        if (size[x] < size[y]) {\n            swap(x, y);\n        }\n        parent[y] = x;\n        size[x] += size[y];\n        --setCount;\n        return true;\n    }\n    \n    bool connected(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        return x == y;\n    }\n};\n\nclass Solution {\npublic:\n    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {\n        UnionFind ufa(n), ufb(n);\n        int ans = 0;\n\n        // 节点编号改为从 0 开始\n        for (auto& edge: edges) {\n            --edge[1];\n            --edge[2];\n        }\n\n        // 公共边\n        for (const auto& edge: edges) {\n            if (edge[0] == 3) {\n                if (!ufa.unite(edge[1], edge[2])) {\n                    ++ans;\n                }\n                else {\n                    ufb.unite(edge[1], edge[2]);\n                }\n            }\n        }\n\n        // 独占边\n        for (const auto& edge: edges) {\n            if (edge[0] == 1) {\n                // Alice 独占边\n                if (!ufa.unite(edge[1], edge[2])) {\n                    ++ans;\n                }\n            }\n            else if (edge[0] == 2) {\n                // Bob 独占边\n                if (!ufb.unite(edge[1], edge[2])) {\n                    ++ans;\n                }\n            }\n        }\n\n        if (ufa.setCount != 1 || ufb.setCount != 1) {\n            return -1;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxNumEdgesToRemove(int n, int[][] edges) {\n        UnionFind ufa = new UnionFind(n);\n        UnionFind ufb = new UnionFind(n);\n        int ans = 0;\n\n        // 节点编号改为从 0 开始\n        for (int[] edge : edges) {\n            --edge[1];\n            --edge[2];\n        }\n\n        // 公共边\n        for (int[] edge : edges) {\n            if (edge[0] == 3) {\n                if (!ufa.unite(edge[1], edge[2])) {\n                    ++ans;\n                } else {\n                    ufb.unite(edge[1], edge[2]);\n                }\n            }\n        }\n\n        // 独占边\n        for (int[] edge : edges) {\n            if (edge[0] == 1) {\n                // Alice 独占边\n                if (!ufa.unite(edge[1], edge[2])) {\n                    ++ans;\n                }\n            } else if (edge[0] == 2) {\n                // Bob 独占边\n                if (!ufb.unite(edge[1], edge[2])) {\n                    ++ans;\n                }\n            }\n        }\n\n        if (ufa.setCount != 1 || ufb.setCount != 1) {\n            return -1;\n        }\n        return ans;\n    }\n}\n\n// 并查集模板\nclass UnionFind {\n    int[] parent;\n    int[] size;\n    int n;\n    // 当前连通分量数目\n    int setCount;\n\n    public UnionFind(int n) {\n        this.n = n;\n        this.setCount = n;\n        this.parent = new int[n];\n        this.size = new int[n];\n        Arrays.fill(size, 1);\n        for (int i = 0; i < n; ++i) {\n            parent[i] = i;\n        }\n    }\n    \n    public int findset(int x) {\n        return parent[x] == x ? x : (parent[x] = findset(parent[x]));\n    }\n    \n    public boolean unite(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        if (x == y) {\n            return false;\n        }\n        if (size[x] < size[y]) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        parent[y] = x;\n        size[x] += size[y];\n        --setCount;\n        return true;\n    }\n    \n    public boolean connected(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        return x == y;\n    }\n}\n```\n\n```Python [sol1-Python3]\n# 并查集模板\nclass UnionFind:\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.n = n\n        # 当前连通分量数目\n        self.setCount = n\n    \n    def findset(self, x: int) -> int:\n        if self.parent[x] == x:\n            return x\n        self.parent[x] = self.findset(self.parent[x])\n        return self.parent[x]\n    \n    def unite(self, x: int, y: int) -> bool:\n        x, y = self.findset(x), self.findset(y)\n        if x == y:\n            return False\n        if self.size[x] < self.size[y]:\n            x, y = y, x\n        self.parent[y] = x\n        self.size[x] += self.size[y]\n        self.setCount -= 1\n        return True\n    \n    def connected(self, x: int, y: int) -> bool:\n        x, y = self.findset(x), self.findset(y)\n        return x == y\n\nclass Solution:\n    def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:\n        ufa, ufb = UnionFind(n), UnionFind(n)\n        ans = 0\n        \n        # 节点编号改为从 0 开始\n        for edge in edges:\n            edge[1] -= 1\n            edge[2] -= 1\n\n        # 公共边\n        for t, u, v in edges:\n            if t == 3:\n                if not ufa.unite(u, v):\n                    ans += 1\n                else:\n                    ufb.unite(u, v)\n\n        # 独占边\n        for t, u, v in edges:\n            if t == 1:\n                # Alice 独占边\n                if not ufa.unite(u, v):\n                    ans += 1\n            elif t == 2:\n                # Bob 独占边\n                if not ufb.unite(u, v):\n                    ans += 1\n\n        if ufa.setCount != 1 or ufb.setCount != 1:\n            return -1\n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\n// 并查集模板\nclass UnionFind {\n    constructor (n) {\n        this.parent = new Array(n).fill(0).map((element, index) => index);\n        this.size = new Array(n).fill(1);\n        // 当前连通分量数目\n        this.setCount = n;\n    }\n\n    findset (x) {\n        if (this.parent[x] === x) {\n            return x;\n        }\n        this.parent[x] = this.findset(this.parent[x]);\n        return this.parent[x];\n    }\n\n    unite (a, b) {\n        let x = this.findset(a), y = this.findset(b);\n        if (x === y) {\n            return false;\n        }\n        if (this.size[x] < this.size[y]) {\n            [x, y] = [y, x];\n        }\n        this.parent[y] = x;\n        this.size[x] += this.size[y];\n        this.setCount -= 1;\n        return true;\n    }\n\n    connected (a, b) {\n        const x = this.findset(a), y = this.findset(b);\n        return x === y;\n    }\n}\n\nvar maxNumEdgesToRemove = function(n, edges) {\n    const ufa = new UnionFind(n), ufb = new UnionFind(n);\n    let ans = 0;\n\n    // 节点编号改为从 0 开始\n    for (const edge of edges) {\n        edge[1] -= 1;\n        edge[2] -= 1;\n    }\n    // 公共边\n    for (const [t, u, v] of edges) {\n        if (t === 3) {\n            if (!ufa.unite(u, v)) {\n                ans += 1;\n            } else {\n                ufb.unite(u, v);\n            }\n        }\n    }\n    // 独占边\n    for (const [t, u, v] of edges) {\n        if (t === 1) {\n            // Alice 独占边\n            if (!ufa.unite(u, v)) {\n                ans += 1;\n            }\n        } else if (t === 2) {\n            // Bob 独占边\n            if (!ufb.unite(u, v)) {\n                ans += 1;\n            }\n        }\n    }\n    if (ufa.setCount !== 1 || ufb.setCount !== 1) {\n        return -1;\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\ntype unionFind struct {\n    parent, size []int\n    setCount     int // 当前连通分量数目\n}\n\nfunc newUnionFind(n int) *unionFind {\n    parent := make([]int, n)\n    size := make([]int, n)\n    for i := range parent {\n        parent[i] = i\n        size[i] = 1\n    }\n    return &unionFind{parent, size, n}\n}\n\nfunc (uf *unionFind) find(x int) int {\n    if uf.parent[x] != x {\n        uf.parent[x] = uf.find(uf.parent[x])\n    }\n    return uf.parent[x]\n}\n\nfunc (uf *unionFind) union(x, y int) bool {\n    fx, fy := uf.find(x), uf.find(y)\n    if fx == fy {\n        return false\n    }\n    if uf.size[fx] < uf.size[fy] {\n        fx, fy = fy, fx\n    }\n    uf.size[fx] += uf.size[fy]\n    uf.parent[fy] = fx\n    uf.setCount--\n    return true\n}\n\nfunc (uf *unionFind) inSameSet(x, y int) bool {\n    return uf.find(x) == uf.find(y)\n}\n\nfunc maxNumEdgesToRemove(n int, edges [][]int) int {\n    ans := len(edges)\n    alice, bob := newUnionFind(n), newUnionFind(n)\n    for _, e := range edges {\n        x, y := e[1]-1, e[2]-1\n        if e[0] == 3 && (!alice.inSameSet(x, y) || !bob.inSameSet(x, y)) {\n            // 保留这条公共边\n            alice.union(x, y)\n            bob.union(x, y)\n            ans--\n        }\n    }\n    uf := [2]*unionFind{alice, bob}\n    for _, e := range edges {\n        if tp := e[0]; tp < 3 && uf[tp-1].union(e[1]-1, e[2]-1) {\n            // 保留这条独占边\n            ans--\n        }\n    }\n    if alice.setCount > 1 || bob.setCount > 1 {\n        return -1\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nvoid swap(int* a, int* b) {\n    int tmp = *a;\n    *a = *b, *b = tmp;\n}\n\nstruct DisjointSetUnion {\n    int *f, *size;\n    int n, setCount;\n};\n\nvoid initDSU(struct DisjointSetUnion* obj, int n) {\n    obj->f = malloc(sizeof(int) * n);\n    obj->size = malloc(sizeof(int) * n);\n    obj->n = n;\n    obj->setCount = n;\n    for (int i = 0; i < n; i++) {\n        obj->f[i] = i;\n        obj->size[i] = 1;\n    }\n}\n\nint find(struct DisjointSetUnion* obj, int x) {\n    return obj->f[x] == x ? x : (obj->f[x] = find(obj, obj->f[x]));\n}\n\nint unionSet(struct DisjointSetUnion* obj, int x, int y) {\n    int fx = find(obj, x), fy = find(obj, y);\n    if (fx == fy) {\n        return false;\n    }\n    if (obj->size[fx] < obj->size[fy]) {\n        swap(&fx, &fy);\n    }\n    obj->size[fx] += obj->size[fy];\n    obj->f[fy] = fx;\n    obj->setCount--;\n    return true;\n}\n\nint maxNumEdgesToRemove(int n, int** edges, int edgesSize, int* edgesColSize) {\n    struct DisjointSetUnion* ufa = malloc(sizeof(struct DisjointSetUnion));\n    initDSU(ufa, n);\n    struct DisjointSetUnion* ufb = malloc(sizeof(struct DisjointSetUnion));\n    initDSU(ufb, n);\n    int ans = 0;\n\n    // 节点编号改为从 0 开始\n    for (int i = 0; i < edgesSize; i++) {\n        edges[i][1]--;\n        edges[i][2]--;\n    }\n\n    // 公共边\n    for (int i = 0; i < edgesSize; i++) {\n        if (edges[i][0] == 3) {\n            if (!unionSet(ufa, edges[i][1], edges[i][2])) {\n                ++ans;\n            } else {\n                unionSet(ufb, edges[i][1], edges[i][2]);\n            }\n        }\n    }\n\n    // 独占边\n    for (int i = 0; i < edgesSize; i++) {\n        if (edges[i][0] == 1) {\n            // Alice 独占边\n            if (!unionSet(ufa, edges[i][1], edges[i][2])) {\n                ++ans;\n            }\n        } else if (edges[i][0] == 2) {\n            // Bob 独占边\n            if (!unionSet(ufb, edges[i][1], edges[i][2])) {\n                ++ans;\n            }\n        }\n    }\n\n    if (ufa->setCount != 1 || ufb->setCount != 1) {\n        return -1;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\cdot \\alpha(n))$，其中 $m$ 是数组 $\\textit{edges}$ 的长度，$\\alpha$ 是阿克曼函数的反函数。\n\n- 空间复杂度：$O(n)$，即为并查集需要使用的空间。"
}