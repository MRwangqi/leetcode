{
	"titleSlug": "sparse-similarity-lcci",
	"slug": "dao-by-mindexercise-ehyo",
	"url": "https://leetcode-cn.com/problems/sparse-similarity-lcci/solution/dao-by-mindexercise-ehyo/",
	"content": "### 解题思路\n![image.png](https://pic.leetcode-cn.com/1658715727-MapmHL-image.png)\n\n\n### 代码\n\n```golang\nfunc computeSimilarities(docs [][]int) []string {\n    ans := []string{}\n\n    for _, doc := range docs {\n        sort.Ints(doc)\n    }\n\n    mp := make(map[int][]int)\n\n    for i, doc := range docs {\n        for _, w := range doc {\n            if _, e := mp[w]; !e {\n                mp[w] = []int{}\n            }\n            mp[w] = append(mp[w], i)\n        }\n    }\n\n    d2d := make(map[int]map[int]int)\n    for _, darr := range mp {\n        sort.Ints(darr)\n        for i := 0; i < len(darr) - 1; i ++ {\n            for j := i + 1; j < len(darr); j ++ {\n                if _, e := d2d[darr[i]]; !e {\n                    d2d[darr[i]] = make(map[int]int)\n                }\n                d2d[darr[i]][darr[j]] ++ \n            }\n        }\n    }\n\n    for i := range docs {\n        for j := i + 1; j < len(docs); j ++ {\n            if _, e := d2d[i][j]; e {\n                res := float64(d2d[i][j]) / float64((len(docs[i]) + len(docs[j])) - d2d[i][j])\n                ans = append(ans, strconv.Itoa(i) + \",\" + strconv.Itoa(j) + \": \" + fmt.Sprintf(\"%.4f\", res + 1e-9))\n            }\n        }\n    }\n\n    return ans\n}\n```"
}