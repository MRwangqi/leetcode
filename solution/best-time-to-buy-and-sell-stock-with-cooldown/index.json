{
	"titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
	"slug": "zui-jia-mai-mai-gu-piao-shi-ji-han-leng-dong-qi-4",
	"url": "https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/solution/zui-jia-mai-mai-gu-piao-shi-ji-han-leng-dong-qi-4/",
	"content": "#### 前言\n\n对于力扣平台上的股票类型的题目：\n\n- [121. 买卖股票的最佳时机](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/)\n\n- [122. 买卖股票的最佳时机 II](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/)\n\n- [123. 买卖股票的最佳时机 III](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/)\n\n- [188. 买卖股票的最佳时机 IV](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/)\n\n- （本题）[309. 最佳买卖股票时机含冷冻期](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/)\n\n- [714. 买卖股票的最佳时机含手续费](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/)\n\n- [剑指 Offer 63. 股票的最大利润](https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof/)\n\n一种常用的方法是将「买入」和「卖出」分开进行考虑：「买入」为负收益，而「卖出」为正收益。在初入股市时，你只有「买入」的权利，只能获得负收益。而当你「买入」之后，你就有了「卖出」的权利，可以获得正收益。显然，我们需要尽可能地降低负收益而提高正收益，因此我们的目标总是将收益值最大化。因此，我们可以使用动态规划的方法，维护在股市中每一天结束后可以获得的「累计最大收益」，并以此进行状态转移，得到最终的答案。\n\n#### 方法一：动态规划\n\n**思路与算法**\n\n我们用 $f[i]$ 表示**第 $i$ 天结束之后**的「累计最大收益」。根据题目描述，由于我们最多只能同时买入（持有）一支股票，并且卖出股票后有冷冻期的限制，因此我们会有三种不同的状态：\n\n- 我们目前持有一支股票，对应的「累计最大收益」记为 $f[i][0]$；\n\n- 我们目前不持有任何股票，并且处于冷冻期中，对应的「累计最大收益」记为 $f[i][1]$；\n\n- 我们目前不持有任何股票，并且不处于冷冻期中，对应的「累计最大收益」记为 $f[i][2]$。\n\n> **这里的「处于冷冻期」指的是在第 $i$ 天结束之后的状态。也就是说：如果第 $i$ 天结束之后处于冷冻期，那么第 $i+1$ 天无法买入股票。**\n\n如何进行状态转移呢？在第 $i$ 天时，我们可以在不违反规则的前提下进行「买入」或者「卖出」操作，此时第 $i$ 天的状态会从第 $i-1$ 天的状态转移而来；我们也可以不进行任何操作，此时第 $i$ 天的状态就等同于第 $i-1$ 天的状态。那么我们分别对这三种状态进行分析：\n\n- 对于 $f[i][0]$，我们目前持有的这一支股票可以是在第 $i-1$ 天就已经持有的，对应的状态为 $f[i-1][0]$；或者是第 $i$ 天买入的，那么第 $i-1$ 天就不能持有股票并且不处于冷冻期中，对应的状态为 $f[i-1][2]$ 加上买入股票的负收益 ${\\it prices}[i]$。因此状态转移方程为：\n\n    $$\n    f[i][0] = \\max(f[i-1][0], f[i-1][2] - {\\it prices}[i])\n    $$\n\n- 对于 $f[i][1]$，我们在第 $i$ 天结束之后处于冷冻期的原因是在当天卖出了股票，那么说明在第 $i-1$ 天时我们必须持有一支股票，对应的状态为 $f[i-1][0]$ 加上卖出股票的正收益 ${\\it prices}[i]$。因此状态转移方程为：\n\n    $$\n    f[i][1] = f[i-1][0] + {\\it prices}[i]\n    $$\n\n- 对于 $f[i][2]$，我们在第 $i$ 天结束之后不持有任何股票并且不处于冷冻期，说明当天没有进行任何操作，即第 $i-1$ 天时不持有任何股票：如果处于冷冻期，对应的状态为 $f[i-1][1]$；如果不处于冷冻期，对应的状态为 $f[i-1][2]$。因此状态转移方程为：\n\n    $$\n    f[i][2] = \\max(f[i-1][1], f[i-1][2])\n    $$\n\n这样我们就得到了所有的状态转移方程。如果一共有 $n$ 天，那么最终的答案即为：\n\n$$\n\\max(f[n-1][0], f[n-1][1], f[n-1][2])\n$$\n\n注意到如果在最后一天（第 $n-1$ 天）结束之后，手上仍然持有股票，那么显然是没有任何意义的。因此更加精确地，最终的答案实际上是 $f[n-1][1]$ 和 $f[n-1][2]$ 中的较大值，即：\n\n$$\n\\max(f[n-1][1], f[n-1][2])\n$$\n\n**细节**\n\n我们可以将第 $0$ 天的情况作为动态规划中的边界条件：\n\n$$\n\\begin{cases}\nf[0][0] &= -{\\it prices}[0] \\\\\nf[0][1] &= 0 \\\\\nf[0][2] &= 0\n\\end{cases}\n$$\n\n在第 $0$ 天时，如果持有股票，那么只能是在第 $0$ 天买入的，对应负收益 $-{\\it prices}[0]$；如果不持有股票，那么收益为零。注意到第 $0$ 天实际上是不存在处于冷冻期的情况的，但我们仍然可以将对应的状态 $f[0][1]$ 置为零，这其中的原因留给读者进行思考。\n\n这样我们就可以从第 $1$ 天开始，根据上面的状态转移方程进行进行动态规划，直到计算出第 $n-1$ 天的结果。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if (prices.empty()) {\n            return 0;\n        }\n\n        int n = prices.size();\n        // f[i][0]: 手上持有股票的最大收益\n        // f[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益\n        // f[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益\n        vector<vector<int>> f(n, vector<int>(3));\n        f[0][0] = -prices[0];\n        for (int i = 1; i < n; ++i) {\n            f[i][0] = max(f[i - 1][0], f[i - 1][2] - prices[i]);\n            f[i][1] = f[i - 1][0] + prices[i];\n            f[i][2] = max(f[i - 1][1], f[i - 1][2]);\n        }\n        return max(f[n - 1][1], f[n - 1][2]);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxProfit(int[] prices) {\n        if (prices.length == 0) {\n            return 0;\n        }\n\n        int n = prices.length;\n        // f[i][0]: 手上持有股票的最大收益\n        // f[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益\n        // f[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益\n        int[][] f = new int[n][3];\n        f[0][0] = -prices[0];\n        for (int i = 1; i < n; ++i) {\n            f[i][0] = Math.max(f[i - 1][0], f[i - 1][2] - prices[i]);\n            f[i][1] = f[i - 1][0] + prices[i];\n            f[i][2] = Math.max(f[i - 1][1], f[i - 1][2]);\n        }\n        return Math.max(f[n - 1][1], f[n - 1][2]);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices:\n            return 0\n        \n        n = len(prices)\n        # f[i][0]: 手上持有股票的最大收益\n        # f[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益\n        # f[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益\n        f = [[-prices[0], 0, 0]] + [[0] * 3 for _ in range(n - 1)]\n        for i in range(1, n):\n            f[i][0] = max(f[i - 1][0], f[i - 1][2] - prices[i])\n            f[i][1] = f[i - 1][0] + prices[i]\n            f[i][2] = max(f[i - 1][1], f[i - 1][2])\n        \n        return max(f[n - 1][1], f[n - 1][2])\n```\n\n```C [sol1-C]\nint maxProfit(int* prices, int pricesSize) {\n    if (pricesSize == 0) {\n        return 0;\n    }\n\n    // f[i][0]: 手上持有股票的最大收益\n    // f[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益\n    // f[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益\n    int f[pricesSize][3];\n    f[0][0] = -prices[0];\n    f[0][1] = f[0][2] = 0;\n    for (int i = 1; i < pricesSize; ++i) {\n        f[i][0] = fmax(f[i - 1][0], f[i - 1][2] - prices[i]);\n        f[i][1] = f[i - 1][0] + prices[i];\n        f[i][2] = fmax(f[i - 1][1], f[i - 1][2]);\n    }\n    return fmax(f[pricesSize - 1][1], f[pricesSize - 1][2]);\n}\n```\n\n```golang [sol1-Golang]\nfunc maxProfit(prices []int) int {\n    if len(prices) == 0 {\n        return 0\n    }\n    n := len(prices)\n    // f[i][0]: 手上持有股票的最大收益\n    // f[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益\n    // f[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益\n    f := make([][3]int, n)\n    f[0][0] = -prices[0]\n    for i := 1; i < n; i++ {\n        f[i][0] = max(f[i-1][0], f[i-1][2] - prices[i])\n        f[i][1] = f[i-1][0] + prices[i]\n        f[i][2] = max(f[i-1][1], f[i-1][2]) \n    }\n    return max(f[n-1][1], f[n-1][2])\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n**空间优化**\n\n注意到上面的状态转移方程中，$f[i][..]$ 只与 $f[i-1][..]$ 有关，而与 $f[i-2][..]$ 及之前的所有状态都无关，因此我们不必存储这些无关的状态。也就是说，我们只需要将 $f[i-1][0]$，$f[i-1][1]$，$f[i-1][2]$ 存放在三个变量中，通过它们计算出 $f[i][0]$，$f[i][1]$，$f[i][2]$ 并存回对应的变量，以便于第 $i+1$ 天的状态转移即可。 \n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if (prices.empty()) {\n            return 0;\n        }\n\n        int n = prices.size();\n        int f0 = -prices[0];\n        int f1 = 0;\n        int f2 = 0;\n        for (int i = 1; i < n; ++i) {\n            int newf0 = max(f0, f2 - prices[i]);\n            int newf1 = f0 + prices[i];\n            int newf2 = max(f1, f2);\n            f0 = newf0;\n            f1 = newf1;\n            f2 = newf2;\n        }\n\n        return max(f1, f2);\n    }\n};\n```\n\n```C++ [sol2-C++11]\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if (prices.empty()) {\n            return 0;\n        }\n\n        int n = prices.size();\n        int f0 = -prices[0];\n        int f1 = 0;\n        int f2 = 0;\n        for (int i = 1; i < n; ++i) {\n            tie(f0, f1, f2) = make_tuple(max(f0, f2 - prices[i]), f0 + prices[i], max(f1, f2));\n        }\n\n        return max(f1, f2);\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int maxProfit(int[] prices) {\n        if (prices.length == 0) {\n            return 0;\n        }\n\n        int n = prices.length;\n        int f0 = -prices[0];\n        int f1 = 0;\n        int f2 = 0;\n        for (int i = 1; i < n; ++i) {\n            int newf0 = Math.max(f0, f2 - prices[i]);\n            int newf1 = f0 + prices[i];\n            int newf2 = Math.max(f1, f2);\n            f0 = newf0;\n            f1 = newf1;\n            f2 = newf2;\n        }\n\n        return Math.max(f1, f2);\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        if not prices:\n            return 0\n        \n        n = len(prices)\n        f0, f1, f2 = -prices[0], 0, 0\n        for i in range(1, n):\n            newf0 = max(f0, f2 - prices[i])\n            newf1 = f0 + prices[i]\n            newf2 = max(f1, f2)\n            f0, f1, f2 = newf0, newf1, newf2\n        \n        return max(f1, f2)\n```\n\n```C [sol2-C]\nint maxProfit(int* prices, int pricesSize) {\n    if (pricesSize == 0) {\n        return 0;\n    }\n\n    int f0 = -prices[0];\n    int f1 = 0;\n    int f2 = 0;\n    for (int i = 1; i < pricesSize; ++i) {\n        int newf0 = fmax(f0, f2 - prices[i]);\n        int newf1 = f0 + prices[i];\n        int newf2 = fmax(f1, f2);\n        f0 = newf0;\n        f1 = newf1;\n        f2 = newf2;\n    }\n\n    return fmax(f1, f2);\n}\n```\n\n```golang [sol2-Golang]\nfunc maxProfit(prices []int) int {\n    if len(prices) == 0 {\n        return 0\n    }\n    n := len(prices)\n    f0, f1, f2 := -prices[0], 0, 0\n    for i := 1; i < n; i++ {\n        newf0 := max(f0, f2 - prices[i])\n        newf1 := f0 + prices[i]\n        newf2 := max(f1, f2)\n        f0, f1, f2 = newf0, newf1, newf2\n    }\n    return max(f1, f2)\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组 ${\\it prices}$ 的长度。\n\n- 空间复杂度：$O(n)$。我们需要 $3n$ 的空间存储动态规划中的所有状态，对应的空间复杂度为 $O(n)$。如果使用空间优化，空间复杂度可以优化至 $O(1)$。"
}