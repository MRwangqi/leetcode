{
	"titleSlug": "sum-of-left-leaves",
	"slug": "zuo-xie-zi-zhi-he-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/sum-of-left-leaves/solution/zuo-xie-zi-zhi-he-by-leetcode-solution/",
	"content": "#### 前言\n\n一个节点为「左叶子」节点，当且仅当它是某个节点的左子节点，并且它是一个叶子结点。因此我们可以考虑对整棵树进行遍历，当我们遍历到节点 $\\textit{node}$ 时，如果它的左子节点是一个叶子结点，那么就将它的左子节点的值累加计入答案。\n\n遍历整棵树的方法有深度优先搜索和广度优先搜索，下面分别给出了实现代码。\n\n#### 方法一：深度优先搜索\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isLeafNode(TreeNode* node) {\n        return !node->left && !node->right;\n    }\n\n    int dfs(TreeNode* node) {\n        int ans = 0;\n        if (node->left) {\n            ans += isLeafNode(node->left) ? node->left->val : dfs(node->left);\n        }\n        if (node->right && !isLeafNode(node->right)) {\n            ans += dfs(node->right);\n        }\n        return ans;\n    }\n\n    int sumOfLeftLeaves(TreeNode* root) {\n        return root ? dfs(root) : 0;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int sumOfLeftLeaves(TreeNode root) {\n        return root != null ? dfs(root) : 0;\n    }\n\n    public int dfs(TreeNode node) {\n        int ans = 0;\n        if (node.left != null) {\n            ans += isLeafNode(node.left) ? node.left.val : dfs(node.left);\n        }\n        if (node.right != null && !isLeafNode(node.right)) {\n            ans += dfs(node.right);\n        }\n        return ans;\n    }\n\n    public boolean isLeafNode(TreeNode node) {\n        return node.left == null && node.right == null;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sumOfLeftLeaves(self, root: TreeNode) -> int:\n        isLeafNode = lambda node: not node.left and not node.right\n\n        def dfs(node: TreeNode) -> int:\n            ans = 0\n            if node.left:\n                ans += node.left.val if isLeafNode(node.left) else dfs(node.left)\n            if node.right and not isLeafNode(node.right):\n                ans += dfs(node.right)\n            return ans\n        \n        return dfs(root) if root else 0\n```\n\n```Golang [sol1-Golang]\nfunc isLeafNode(node *TreeNode) bool {\n    return node.Left == nil && node.Right == nil\n}\n\nfunc dfs(node *TreeNode) (ans int) {\n    if node.Left != nil {\n        if isLeafNode(node.Left) {\n            ans += node.Left.Val\n        } else {\n            ans += dfs(node.Left)\n        }\n    }\n    if node.Right != nil && !isLeafNode(node.Right) {\n        ans += dfs(node.Right)\n    }\n    return\n}\n\nfunc sumOfLeftLeaves(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    return dfs(root)\n}\n```\n\n```C [sol1-C]\nbool isLeafNode(struct TreeNode *node) {\n    return !node->left && !node->right;\n}\n\nint dfs(struct TreeNode *node) {\n    int ans = 0;\n    if (node->left) {\n        ans += isLeafNode(node->left) ? node->left->val : dfs(node->left);\n    }\n    if (node->right && !isLeafNode(node->right)) {\n        ans += dfs(node->right);\n    }\n    return ans;\n}\n\nint sumOfLeftLeaves(struct TreeNode *root) {\n    return root ? dfs(root) : 0;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是树中的节点个数。\n\n- 空间复杂度：$O(n)$。空间复杂度与深度优先搜索使用的栈的最大深度相关。在最坏的情况下，树呈现链式结构，深度为 $O(n)$，对应的空间复杂度也为 $O(n)$。\n\n#### 方法二：广度优先搜索\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool isLeafNode(TreeNode* node) {\n        return !node->left && !node->right;\n    }\n\n    int sumOfLeftLeaves(TreeNode* root) {\n        if (!root) {\n            return 0;\n        }\n\n        queue<TreeNode*> q;\n        q.push(root);\n        int ans = 0;\n        while (!q.empty()) {\n            TreeNode* node = q.front();\n            q.pop();\n            if (node->left) {\n                if (isLeafNode(node->left)) {\n                    ans += node->left->val;\n                }\n                else {\n                    q.push(node->left);\n                }\n            }\n            if (node->right) {\n                if (!isLeafNode(node->right)) {\n                    q.push(node->right);\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```C++ [sol2-C++17]\nclass Solution {\npublic:\n    bool isLeafNode(TreeNode* node) {\n        return !node->left && !node->right;\n    }\n\n    int sumOfLeftLeaves(TreeNode* root) {\n        if (!root) {\n            return 0;\n        }\n\n        queue q{deque{root}};\n        int ans = 0;\n        while (!q.empty()) {\n            TreeNode* node = q.front();\n            q.pop();\n            if (node->left) {\n                if (isLeafNode(node->left)) {\n                    ans += node->left->val;\n                }\n                else {\n                    q.push(node->left);\n                }\n            }\n            if (node->right) {\n                if (!isLeafNode(node->right)) {\n                    q.push(node->right);\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int sumOfLeftLeaves(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.offer(root);\n        int ans = 0;\n        while (!queue.isEmpty()) {\n            TreeNode node = queue.poll();\n            if (node.left != null) {\n                if (isLeafNode(node.left)) {\n                    ans += node.left.val;\n                } else {\n                    queue.offer(node.left);\n                }\n            }\n            if (node.right != null) {\n                if (!isLeafNode(node.right)) {\n                    queue.offer(node.right);\n                }\n            }\n        }\n        return ans;\n    }\n\n    public boolean isLeafNode(TreeNode node) {\n        return node.left == null && node.right == null;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def sumOfLeftLeaves(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        \n        isLeafNode = lambda node: not node.left and not node.right\n        q = collections.deque([root])\n        ans = 0\n\n        while q:\n            node = q.popleft()\n            if node.left:\n                if isLeafNode(node.left):\n                    ans += node.left.val\n                else:\n                    q.append(node.left)\n            if node.right:\n                if not isLeafNode(node.right):\n                    q.append(node.right)\n        \n        return ans\n```\n\n```Golang [sol2-Golang]\nfunc isLeafNode(node *TreeNode) bool {\n    return node.Left == nil && node.Right == nil\n}\n\nfunc sumOfLeftLeaves(root *TreeNode) (ans int) {\n    if root == nil {\n        return\n    }\n    q := []*TreeNode{root}\n    for len(q) > 0 {\n        node := q[0]\n        q = q[1:]\n        if node.Left != nil {\n            if isLeafNode(node.Left) {\n                ans += node.Left.Val\n            } else {\n                q = append(q, node.Left)\n            }\n        }\n        if node.Right != nil && !isLeafNode(node.Right) {\n            q = append(q, node.Right)\n        }\n    }\n    return\n}\n```\n\n```C [sol2-C]\nbool isLeafNode(struct TreeNode *node) {\n    return !node->left && !node->right;\n}\n\nint sumOfLeftLeaves(struct TreeNode *root) {\n    if (!root) {\n        return 0;\n    }\n    struct TreeNode **q = malloc(sizeof(struct TreeNode *) * 2001);\n    int left = 0, right = 0;\n    q[right++] = root;\n    int ans = 0;\n    while (left < right) {\n        struct TreeNode *node = q[left++];\n        if (node->left) {\n            if (isLeafNode(node->left)) {\n                ans += node->left->val;\n            } else {\n                q[right++] = node->left;\n            }\n        }\n        if (node->right) {\n            if (!isLeafNode(node->right)) {\n                q[right++] = node->right;\n            }\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是树中的节点个数。\n\n- 空间复杂度：$O(n)$。空间复杂度与广度优先搜索使用的队列需要的容量相关，为 $O(n)$。"
}