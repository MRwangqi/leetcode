{
	"titleSlug": "out-of-boundary-paths",
	"slug": "chu-jie-de-lu-jing-shu-by-leetcode-solut-l9dw",
	"url": "https://leetcode-cn.com/problems/out-of-boundary-paths/solution/chu-jie-de-lu-jing-shu-by-leetcode-solut-l9dw/",
	"content": "#### 方法一：动态规划\n\n可以使用动态规划计算出界的路径数。\n\n动态规划的状态由移动次数、行和列决定，定义 $\\textit{dp}[i][j][k]$ 表示球移动 $i$ 次之后位于坐标 $(j, k)$ 的路径数量。当 $i=0$ 时，球一定位于起始坐标 $(\\textit{startRow}, \\textit{startColumn})$，因此动态规划的边界情况是：$\\textit{dp}[0][\\textit{startRow}][\\textit{startColumn}]=1$，当 $(j, k) \\ne (\\textit{startRow}, \\textit{startColumn})$ 时有 $\\textit{dp}[0][j][k]=0$。\n\n如果球移动了 $i$ 次之后位于坐标 $(j, k)$，且 $i < \\textit{maxMove}$，$0 \\le j < m$，$0 \\le k < n$，则移动第 $i+1$ 次之后，球一定位于和坐标 $(j, k)$ 相邻的一个坐标，记为 $(j', k')$。\n\n- 当 $0 \\le j' < m$ 且 $0 \\le k' < n$ 时，球在移动 $i+1$ 次之后没有出界，将 $\\textit{dp}[i][j][k]$ 的值加到 $\\textit{dp}[i+1][j'][k']$；\n\n- 否则，球在第 $i+1$ 次移动之后出界，将 $\\textit{dp}[i][j][k]$ 的值加到出界的路径数。\n\n由于最多可以移动的次数是 $\\textit{maxMove}$，因此遍历 $0 \\le i < \\textit{maxMove}$，根据 $\\textit{dp}[i][][]$ 计算 $\\textit{dp}[i+1][][]$ 的值以及出界的路径数，即可得到最多移动 $\\textit{maxMove}$ 次的情况下的出界的路径数。\n\n根据上述思路，可以得到时间复杂度和空间复杂度都是 $O(\\textit{maxMove} \\times m \\times n)$ 的实现。\n\n```Java [sol11-Java]\nclass Solution {\n    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n        final int MOD = 1000000007;\n        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        int outCounts = 0;\n        int[][][] dp = new int[maxMove + 1][m][n];\n        dp[0][startRow][startColumn] = 1;\n        for (int i = 0; i < maxMove; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < n; k++) {\n                    int count = dp[i][j][k];\n                    if (count > 0) {\n                        for (int[] direction : directions) {\n                            int j1 = j + direction[0], k1 = k + direction[1];\n                            if (j1 >= 0 && j1 < m && k1 >= 0 && k1 < n) {\n                                dp[i + 1][j1][k1] = (dp[i + 1][j1][k1] + count) % MOD;\n                            } else {\n                                outCounts = (outCounts + count) % MOD;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return outCounts;\n    }\n}\n```\n\n```C# [sol11-C#]\npublic class Solution {\n    public int FindPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n        const int MOD = 1000000007;\n        int[][] directions = new int[][] {\n            new int[]{-1, 0},\n            new int[]{1, 0},\n            new int[]{0, -1},\n            new int[]{0, 1}\n        };\n        int outCounts = 0;\n        int[,,] dp = new int[maxMove + 1, m, n];\n        dp[0, startRow, startColumn] = 1;\n        for (int i = 0; i < maxMove; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < n; k++) {\n                    int count = dp[i, j, k];\n                    if (count > 0) {\n                        foreach (int[] direction in directions) {\n                            int j1 = j + direction[0], k1 = k + direction[1];\n                            if (j1 >= 0 && j1 < m && k1 >= 0 && k1 < n) {\n                                dp[i + 1, j1, k1] = (dp[i + 1, j1, k1] + count) % MOD;\n                            } else {\n                                outCounts = (outCounts + count) % MOD;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return outCounts;\n    }\n}\n```\n\n```Python [sol11-Python3]\nclass Solution:\n    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:\n        MOD = 10**9 + 7\n\n        outCounts = 0\n        dp = [[[0] * n for _ in range(m)] for _ in range(maxMove + 1)]\n        dp[0][startRow][startColumn] = 1\n        for i in range(maxMove):\n            for j in range(m):\n                for k in range(n):\n                    if dp[i][j][k] > 0:\n                        for j1, k1 in [(j - 1, k), (j + 1, k), (j, k - 1), (j, k + 1)]:\n                            if 0 <= j1 < m and 0 <= k1 < n:\n                                dp[i + 1][j1][k1] = (dp[i + 1][j1][k1] + dp[i][j][k]) % MOD\n                            else:\n                                outCounts = (outCounts + dp[i][j][k]) % MOD\n        \n        return outCounts\n```\n\n```go [sol11-Golang]\nconst mod int = 1e9 + 7\nvar dirs = []struct{ x, y int }{{-1, 0}, {1, 0}, {0, -1}, {0, 1}} // 上下左右\n\nfunc findPaths(m, n, maxMove, startRow, startColumn int) (ans int) {\n    dp := make([][][]int, maxMove+1)\n    for i := range dp {\n        dp[i] = make([][]int, m)\n        for j := range dp[i] {\n            dp[i][j] = make([]int, n)\n        }\n    }\n    dp[0][startRow][startColumn] = 1\n    for i := 0; i < maxMove; i++ {\n        for j := 0; j < m; j++ {\n            for k := 0; k < n; k++ {\n                count := dp[i][j][k]\n                if count > 0 {\n                    for _, dir := range dirs {\n                        j1, k1 := j+dir.x, k+dir.y\n                        if j1 >= 0 && j1 < m && k1 >= 0 && k1 < n {\n                            dp[i+1][j1][k1] = (dp[i+1][j1][k1] + count) % mod\n                        } else {\n                            ans = (ans + count) % mod\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return\n}\n```\n\n```C++ [sol11-C++]\nclass Solution {\npublic:\n    static constexpr int MOD = 1'000'000'007;\n\n    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n        vector<vector<int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        int outCounts = 0;\n        vector<vector<vector<int>>> dp(maxMove + 1, vector<vector<int>>(m, vector<int>(n)));\n        dp[0][startRow][startColumn] = 1;\n        for (int i = 0; i < maxMove; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < n; k++) {\n                    int count = dp[i][j][k];\n                    if (count > 0) {\n                        for (auto &direction : directions) {\n                            int j1 = j + direction[0], k1 = k + direction[1];\n                            if (j1 >= 0 && j1 < m && k1 >= 0 && k1 < n) {\n                                dp[i + 1][j1][k1] = (dp[i + 1][j1][k1] + count) % MOD;\n                            } else {\n                                outCounts = (outCounts + count) % MOD;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return outCounts;\n    }\n};\n```\n\n```C [sol11-C]\nint MOD = 1000000007;\n\nint findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n    int directions[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    int outCounts = 0;\n\n    int dp[maxMove + 1][m][n];\n    memset(dp, 0, sizeof(dp));\n    dp[0][startRow][startColumn] = 1;\n    for (int i = 0; i < maxMove; i++) {\n        for (int j = 0; j < m; j++) {\n            for (int k = 0; k < n; k++) {\n                int count = dp[i][j][k];\n                if (count > 0) {\n                    for (int s = 0; s < 4; s++) {\n                        int j1 = j + directions[s][0], k1 = k + directions[s][1];\n                        if (j1 >= 0 && j1 < m && k1 >= 0 && k1 < n) {\n                            dp[i + 1][j1][k1] = (dp[i + 1][j1][k1] + count) % MOD;\n                        } else {\n                            outCounts = (outCounts + count) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return outCounts;\n}\n```\n\n注意到 $\\textit{dp}[i][][]$ 只在计算 $\\textit{dp}[i+1][][]$ 时会用到，因此可以将 $\\textit{dp}$ 中的移动次数的维度省略，将空间复杂度优化到 $O(m \\times n)$。\n\n```Java [sol12-Java]\nclass Solution {\n    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n        final int MOD = 1000000007;\n        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        int outCounts = 0;\n        int[][] dp = new int[m][n];\n        dp[startRow][startColumn] = 1;\n        for (int i = 0; i < maxMove; i++) {\n            int[][] dpNew = new int[m][n];\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < n; k++) {\n                    int count = dp[j][k];\n                    if (count > 0) {\n                        for (int[] direction : directions) {\n                            int j1 = j + direction[0], k1 = k + direction[1];\n                            if (j1 >= 0 && j1 < m && k1 >= 0 && k1 < n) {\n                                dpNew[j1][k1] = (dpNew[j1][k1] + count) % MOD;\n                            } else {\n                                outCounts = (outCounts + count) % MOD;\n                            }\n                        }\n                    }\n                }\n            }\n            dp = dpNew;\n        }\n        return outCounts;\n    }\n}\n```\n\n```C# [sol12-C#]\npublic class Solution {\n    public int FindPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n        const int MOD = 1000000007;\n        int[][] directions = new int[][] {\n            new int[]{-1, 0},\n            new int[]{1, 0},\n            new int[]{0, -1},\n            new int[]{0, 1}\n        };\n        int outCounts = 0;\n        int[,] dp = new int[m, n];\n        dp[startRow, startColumn] = 1;\n        for (int i = 0; i < maxMove; i++) {\n            int[,] dpNew = new int[m, n];\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < n; k++) {\n                    int count = dp[j, k];\n                    if (count > 0) {\n                        foreach (int[] direction in directions) {\n                            int j1 = j + direction[0], k1 = k + direction[1];\n                            if (j1 >= 0 && j1 < m && k1 >= 0 && k1 < n) {\n                                dpNew[j1, k1] = (dpNew[j1, k1] + count) % MOD;\n                            } else {\n                                outCounts = (outCounts + count) % MOD;\n                            }\n                        }\n                    }\n                }\n            }\n            dp = dpNew;\n        }\n        return outCounts;\n    }\n}\n```\n\n```JavaScript [sol12-JavaScript]\nvar findPaths = function(m, n, maxMove, startRow, startColumn) {\n    const MOD = 1000000007;\n    const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let outCounts = 0;\n    let dp = new Array(m).fill(0).map(() => new Array(n).fill(0));\n    dp[startRow][startColumn] = 1;\n    for (let i = 0; i < maxMove; i++) {\n        const dpNew = new Array(m).fill(0).map(() => new Array(n).fill(0));\n        for (let j = 0; j < m; j++) {\n            for (let k = 0; k < n; k++) {\n                const count = dp[j][k];\n                if (count > 0) {\n                    for (const direction of directions) {\n                        let j1 = j + direction[0], k1 = k + direction[1];\n                        if (j1 >= 0 && j1 < m && k1 >= 0 && k1 < n) {\n                            dpNew[j1][k1] = (dpNew[j1][k1] + count) % MOD;\n                        } else {\n                            outCounts = (outCounts + count) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n        dp = dpNew;\n    }\n    return outCounts;\n};\n```\n\n```Python [sol12-Python3]\nclass Solution:\n    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:\n        MOD = 10**9 + 7\n\n        outCounts = 0\n        dp = [[0] * n for _ in range(m)]\n        dp[startRow][startColumn] = 1\n        for i in range(maxMove):\n            dpNew = [[0] * n for _ in range(m)]\n            for j in range(m):\n                for k in range(n):\n                    if dp[j][k] > 0:\n                        for j1, k1 in [(j - 1, k), (j + 1, k), (j, k - 1), (j, k + 1)]:\n                            if 0 <= j1 < m and 0 <= k1 < n:\n                                dpNew[j1][k1] = (dpNew[j1][k1] + dp[j][k]) % MOD\n                            else:\n                                outCounts = (outCounts + dp[j][k]) % MOD\n            dp = dpNew\n        \n        return outCounts\n```\n\n```go [sol12-Golang]\nconst mod int = 1e9 + 7\nvar dirs = []struct{ x, y int }{{-1, 0}, {1, 0}, {0, -1}, {0, 1}} // 上下左右\n\nfunc findPaths(m, n, maxMove, startRow, startColumn int) (ans int) {\n    dp := make([][]int, m)\n    for i := range dp {\n        dp[i] = make([]int, n)\n    }\n    dp[startRow][startColumn] = 1\n    for i := 0; i < maxMove; i++ {\n        dpNew := make([][]int, m)\n        for j := range dpNew {\n            dpNew[j] = make([]int, n)\n        }\n        for j := 0; j < m; j++ {\n            for k := 0; k < n; k++ {\n                count := dp[j][k]\n                if count > 0 {\n                    for _, dir := range dirs {\n                        j1, k1 := j+dir.x, k+dir.y\n                        if j1 >= 0 && j1 < m && k1 >= 0 && k1 < n {\n                            dpNew[j1][k1] = (dpNew[j1][k1] + count) % mod\n                        } else {\n                            ans = (ans + count) % mod\n                        }\n                    }\n                }\n            }\n        }\n        dp = dpNew\n    }\n    return\n}\n```\n\n```C++ [sol12-C++]\nclass Solution {\npublic:\n    static constexpr int MOD = 1'000'000'007;\n\n    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n        vector<vector<int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        int outCounts = 0;\n        vector<vector<int>> dp(m, vector<int>(n));\n        dp[startRow][startColumn] = 1;\n        for (int i = 0; i < maxMove; i++) {\n            vector<vector<int>> dpNew(m, vector<int>(n));\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < n; k++) {\n                    int count = dp[j][k];\n                    if (count > 0) {\n                        for (auto& direction : directions) {\n                            int j1 = j + direction[0], k1 = k + direction[1];\n                            if (j1 >= 0 && j1 < m && k1 >= 0 && k1 < n) {\n                                dpNew[j1][k1] = (dpNew[j1][k1] + count) % MOD;\n                            } else {\n                                outCounts = (outCounts + count) % MOD;\n                            }\n                        }\n                    }\n                }\n            }\n            dp = dpNew;\n        }\n        return outCounts;\n    }\n};\n```\n\n```C [sol12-C]\nint MOD = 1000000007;\n\nint findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n    int directions[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n    int outCounts = 0;\n\n    int dp[m][n];\n    memset(dp, 0, sizeof(dp));\n    dp[startRow][startColumn] = 1;\n    for (int i = 0; i < maxMove; i++) {\n        int dpNew[m][n];\n        memset(dpNew, 0, sizeof(dpNew));\n        for (int j = 0; j < m; j++) {\n            for (int k = 0; k < n; k++) {\n                int count = dp[j][k];\n                if (count > 0) {\n                    for (int s = 0; s < 4; s++) {\n                        int j1 = j + directions[s][0], k1 = k + directions[s][1];\n                        if (j1 >= 0 && j1 < m && k1 >= 0 && k1 < n) {\n                            dpNew[j1][k1] = (dpNew[j1][k1] + count) % MOD;\n                        } else {\n                            outCounts = (outCounts + count) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n        memcpy(dp, dpNew, sizeof(dp));\n    }\n    return outCounts;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\textit{maxMove} \\times m \\times n)$。动态规划需要遍历的状态数是 $O(\\textit{maxMove} \\times m \\times n)$，对于每个状态，计算后续状态以及出界的路径数的时间都是 $O(1)$。\n\n- 空间复杂度：$O(m \\times n)$。使用空间优化的实现，空间复杂度是 $O(m \\times n)$。"
}