{
	"titleSlug": "ZVAVXX",
	"slug": "cheng-ji-xiao-yu-k-de-zi-shu-zu-by-leetc-xqx8",
	"url": "https://leetcode-cn.com/problems/ZVAVXX/solution/cheng-ji-xiao-yu-k-de-zi-shu-zu-by-leetc-xqx8/",
	"content": "#### 方法一：二分查找\n\n**思路与算法**\n\n子数组 $[i, j]$ 的元素乘积小于 $k$，即 $\\prod_{l=i}^{j} \\textit{nums}[l] \\lt k$。\n\n+ $k = 0$\n\n    由于元素均为正数，所有子数组乘积均大于 $0$，因此乘积小于 $0$ 的子数组的数目为 $0$。\n\n+ $k > 0$\n\n    我们在计算子数组 $[i, j]$ 的元素乘积 $\\prod_{l=i}^{j} \\textit{nums}[l]$ 时，会出现整型溢出的情况。为了避免整型溢出，我们将不等式两边取对数得 $\\log \\prod_{l=i}^{j} \\textit{nums}[l] = \\sum_{l=i}^{j} \\log \\textit{nums}[l] \\lt \\log k$，因此「子数组 $[i, j]$ 的元素乘积小于 $k$」等价于「子数组 $[i, j]$ 的元素对数和小于 $\\log k$」。\n\n    我们预处理出数组的元素对数前缀和 $\\textit{logPrefix}$，即 $\\textit{logPrefix}[i + 1] = \\sum_{l=0}^{i} \\log \\textit{nums}[l]$。因为 $\\textit{nums}$ 是正整数数组，所以 $\\textit{logPrefix}$ 是非递减的。\n\n    枚举子数组的右端点 $j$，在 $\\textit{logPrefix}$ 的区间 $[0, j]$ 内二分查找满足 $\\textit{logPrefix}[j + 1] - \\textit{logPrefix}[l] \\lt \\log k$ 即 $\\textit{logPrefix}[l] \\gt \\textit{logPrefix}[j + 1] - \\log k$ 的最小下标 $l$，那么以 $j$ 为右端点且元素乘积小于 $k$ 的子数组数目为 $j + 1 - l$。返回所有数目之和。\n\n    > $\\texttt{double}$ 类型只能保证 $15$ 位有效数字是精确的。为了避免计算带来的误差，我们将不等式 $\\textit{logPrefix}[l] \\gt \\textit{logPrefix}[j + 1] - \\log k$ 的右边加上 $10^{-10}$（题目中的 $\\texttt{double}$ 数值整数部分的数字不超过 $5$ 个），即 $\\textit{logPrefix}[l] \\gt \\textit{logPrefix}[j + 1] - \\log k + 10^{-10}$，从而防止不等式两边数值相等却被判定为大于的情况。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:\n        if k == 0:\n            return 0\n        ans, n = 0, len(nums)\n        logPrefix = [0] * (n + 1)\n        for i, num in enumerate(nums):\n            logPrefix[i + 1] = logPrefix[i] + log(num)\n        logK = log(k)\n        for j in range(1, n + 1):\n            l = bisect_right(logPrefix, logPrefix[j] - logK + 1e-10, 0, j)\n            ans += j - l\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numSubarrayProductLessThanK(vector<int>& nums, int k) {\n        if (k == 0) {\n            return 0;\n        }\n        int n = nums.size();\n        vector<double> logPrefix(n + 1);\n        for (int i = 0; i < n; i++) {\n            logPrefix[i + 1] = logPrefix[i] + log(nums[i]);\n        }\n        double logk = log(k);\n        int ret = 0;\n        for (int j = 0; j < n; j++) {\n            int l = upper_bound(logPrefix.begin(), logPrefix.begin() + j + 1, logPrefix[j + 1] - log(k) + 1e-10) - logPrefix.begin();\n            ret += j + 1 - l;\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int numSubarrayProductLessThanK(int[] nums, int k) {\n        if (k == 0) {\n            return 0;\n        }\n        int n = nums.length;\n        double[] logPrefix = new double[n + 1];\n        for (int i = 0; i < n; i++) {\n            logPrefix[i + 1] = logPrefix[i] + Math.log(nums[i]);\n        }\n        double logk = Math.log(k);\n        int ret = 0;\n        for (int j = 0; j < n; j++) {\n            int l = 0;\n            int r = j + 1;\n            int idx = j + 1;\n            double val = logPrefix[j + 1] - logk + 1e-10;\n            while (l <= r) {\n                int mid = (l + r) / 2;\n                if (logPrefix[mid] > val) {\n                    idx = mid;\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            }\n            ret += j + 1 - idx;\n        }\n        return ret;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int NumSubarrayProductLessThanK(int[] nums, int k) {\n        if (k == 0) {\n            return 0;\n        }\n        int n = nums.Length;\n        double[] logPrefix = new double[n + 1];\n        for (int i = 0; i < n; i++) {\n            logPrefix[i + 1] = logPrefix[i] + Math.Log(nums[i]);\n        }\n        double logk = Math.Log(k);\n        int ret = 0;\n        for (int j = 0; j < n; j++) {\n            int l = 0;\n            int r = j + 1;\n            int idx = j + 1;\n            double val = logPrefix[j + 1] - logk + 1e-10;\n            while (l <= r) {\n                int mid = (l + r) / 2;\n                if (logPrefix[mid] > val) {\n                    idx = mid;\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            }\n            ret += j + 1 - idx;\n        }\n        return ret;\n    }\n}\n```\n\n```C [sol1-C]\nint numSubarrayProductLessThanK(int* nums, int numsSize, int k){\n    if (k == 0) {\n        return 0;\n    }\n    double *logPrefix = (double *)malloc(sizeof(double) * (numsSize + 1));\n    for (int i = 0; i < numsSize; i++) {\n        logPrefix[i + 1] = logPrefix[i] + log(nums[i]);\n    }\n    double logk = log(k);\n    int ret = 0;\n    for (int j = 0; j < numsSize; j++) {\n        int l = 0;\n        int r = j + 1;\n        int idx = j + 1;\n        double val = logPrefix[j + 1] - logk + 1e-10;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (logPrefix[mid] > val) {\n                idx = mid;\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        ret += j + 1 - idx;\n    }\n    free(logPrefix);\n    return ret;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar numSubarrayProductLessThanK = function(nums, k) {\n    if (k === 0) {\n        return 0;\n    }\n    const n = nums.length;\n    const logPrefix = new Array(n + 1).fill(0);\n    for (let i = 0; i < n; i++) {\n        logPrefix[i + 1] = logPrefix[i] + Math.log(nums[i]);\n    }\n    const logk = Math.log(k);\n    let ret = 0;\n    for (let j = 0; j < n; j++) {\n        let l = 0;\n        let r = j + 1;\n        let idx = j + 1;\n        const val = logPrefix[j + 1] - logk + 1e-10;\n        while (l <= r) {\n            const mid = Math.floor((l + r) / 2);\n            if (logPrefix[mid] > val) {\n                idx = mid;\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        ret += j + 1 - idx;\n    }\n    return ret;\n};\n```\n\n```go [sol1-Golang]\nfunc numSubarrayProductLessThanK(nums []int, k int) (ans int) {\n    if k == 0 {\n        return\n    }\n    n := len(nums)\n    logPrefix := make([]float64, n+1)\n    for i, num := range nums {\n        logPrefix[i+1] = logPrefix[i] + math.Log(float64(num))\n    }\n    logK := math.Log(float64(k))\n    for j := 1; j <= n; j++ {\n        l := sort.SearchFloat64s(logPrefix[:j], logPrefix[j]-logK+1e-10)\n        ans += j - l\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。预处理数组 $\\textit{logPrefix}$ 需要 $O(n)$，枚举加二分查找需要 $O(n \\log n)$。\n\n+ 空间复杂度：$O(n)$。保存数组 $\\textit{logPrefix}$ 需要 $O(n)$ 的空间。\n\n#### 方法二：滑动窗口\n\n**思路与算法**\n\n我们固定子数组 $[i, j]$ 的右端点 $j$ 时，显然左端点 $i$ 越大，子数组元素乘积越小。对于子数组 $[i, j]$，当左端点 $i \\ge l_1$ 时，所有子数组的元素乘积都小于 $k$，当左端点 $i \\lt l_1$ 时，所有子数组的元素乘积都大于等于 $k$。那么对于右端点为 $j + 1$ 的所有子数组，它的左端点 $i$ 就不需要从 $0$ 开始枚举，因为对于所有 $i \\lt l_1$ 的子数组，它们的元素乘积都大于等于 $k$。我们只要从 $i = l_1$ 处开始枚举，直到子数组 $i = l_2$ 时子数组 $[l_2, j + 1]$ 的元素乘积小于 $k$，那么左端点 $i \\ge l_2$ 所有子数组的元素乘积都小于 $k$。\n\n根据上面的分析，我们枚举子数组的右端点 $j$，并且左端点从 $i = 0$ 开始，用 $\\textit{prod}$ 记录子数组 $[i, j]$ 的元素乘积。每枚举一个右端点 $j$，如果当前子数组元素乘积 $\\textit{prod}$ 大于等于 $k$，那么我们右移左端点 $i$ 直到满足当前子数组元素乘积小于 $k$ 或者 $i > j$，那么元素乘积小于 $k$ 的子数组数目为 $j - i + 1$。返回所有数目之和。\n\n> $\\textit{prod}$ 的值始终不超过 $k \\times \\max_l \\{\\textit{nums}[l] \\}$，因此无需担心整型溢出的问题。\n\n**代码**\n\n```Python [sol2-Python3]\nclass Solution:\n    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:\n        ans, prod, i = 0, 1, 0\n        for j, num in enumerate(nums):\n            prod *= num\n            while i <= j and prod >= k:\n                prod //= nums[i]\n                i += 1\n            ans += j - i + 1\n        return ans\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int numSubarrayProductLessThanK(vector<int>& nums, int k) {\n        int n = nums.size(), ret = 0;\n        int prod = 1, i = 0;\n        for (int j = 0; j < n; j++) {\n            prod *= nums[j];\n            while (i <= j && prod >= k) {\n                prod /= nums[i];\n                i++;\n            }\n            ret += j - i + 1;\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int numSubarrayProductLessThanK(int[] nums, int k) {\n        int n = nums.length, ret = 0;\n        int prod = 1, i = 0;\n        for (int j = 0; j < n; j++) {\n            prod *= nums[j];\n            while (i <= j && prod >= k) {\n                prod /= nums[i];\n                i++;\n            }\n            ret += j - i + 1;\n        }\n        return ret;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int NumSubarrayProductLessThanK(int[] nums, int k) {\n        int n = nums.Length, ret = 0;\n        int prod = 1, i = 0;\n        for (int j = 0; j < n; j++) {\n            prod *= nums[j];\n            while (i <= j && prod >= k) {\n                prod /= nums[i];\n                i++;\n            }\n            ret += j - i + 1;\n        }\n        return ret;\n    }\n}\n```\n\n```C [sol2-C]\nint numSubarrayProductLessThanK(int* nums, int numsSize, int k){\n    int ret = 0;\n    int prod = 1, i = 0;\n    for (int j = 0; j < numsSize; j++) {\n        prod *= nums[j];\n        while (i <= j && prod >= k) {\n            prod /= nums[i];\n            i++;\n        }\n        ret += j - i + 1;\n    }\n    return ret;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar numSubarrayProductLessThanK = function(nums, k) {\n    let n = nums.length, ret = 0;\n    let prod = 1, i = 0;\n    for (let j = 0; j < n; j++) {\n        prod *= nums[j];\n        while (i <= j && prod >= k) {\n            prod /= nums[i];\n            i++;\n        }\n        ret += j - i + 1;\n    }\n    return ret;\n};\n```\n\n```go [sol2-Golang]\nfunc numSubarrayProductLessThanK(nums []int, k int) (ans int) {\n    prod, i := 1, 0\n    for j, num := range nums {\n        prod *= num\n        for ; i <= j && prod >= k; i++ {\n            prod /= nums[i]\n        }\n        ans += j - i + 1\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。两个端点 $i$ 和 $j$ 的增加次数都不超过 $n$。\n\n+ 空间复杂度：$O(1)$。"
}