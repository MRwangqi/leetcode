{
	"titleSlug": "largest-local-values-in-a-matrix",
	"slug": "mo-ni-by-mumu-ok-mxco",
	"url": "https://leetcode-cn.com/problems/largest-local-values-in-a-matrix/solution/mo-ni-by-mumu-ok-mxco/",
	"content": "# 解题思路\r\n**简单模拟**\r\n题目要求返回一个 (n - 2) * (n - 2)大小的矩阵。\r\n这里额外开辟一个二维数组ans, 大小为(n - 2) * (n - 2), 由于 1 <= grid[i][j] <= 100, 所以这里可以给ans每个元素初始化为0。\r\n\r\n**遍历**\r\n在findMax中, (a, b) 其实为所对应的3 * 3矩阵的左上角。而这个矩阵也就是题目所要求的:grid 中以 i + 1 行和 j + 1 列为中心的 3 x 3 矩阵。遍历得出最大值, 并记录在ans数组中。\r\n\r\n![image.png](https://pic.leetcode-cn.com/1666072762-YNyWFv-image.png)\r\n\r\n\r\n``` javascript\r\n/**\r\n * @param {number[][]} grid\r\n * @return {number[][]}\r\n */\r\nvar largestLocal = function (grid) {\r\n  const n = grid.length     // 获取矩阵大小\r\n  // 初始化一个大小 (n - 2) * (n - 2) 的矩阵\r\n  const ans = new Array(n - 2).fill(0).map(() => new Array(n - 2).fill(0))\r\n  // 遍历矩阵 grid\r\n  for (let i = 0; i < n - 2; ++i) {\r\n    for (let j = 0; j < n - 2; ++j) {\r\n      // 将最大值记录\r\n      ans[i][j] = findMax(grid, i, j)\r\n    }\r\n  }\r\n  return ans\r\n\r\n  // 以(a, b)为对应的矩阵左上角来寻找这个3 * 3矩阵中的最大值\r\n  function findMax(arr, a, b) {\r\n    let max = 0 // 最大值\r\n    for (let i = a; i <= a + 2; ++i) {\r\n      for (let j = b; j <= b + 2; ++j) {\r\n        max = Math.max(max, arr[i][j])\r\n      }\r\n    }\r\n    return max\r\n  }\r\n};\r\n```\r\n\r\n# 时间复杂度 \r\nO(2 * n ^ 2) \r\n\r\n# 空间复杂度 \r\n额外使用一个二维数组.\r\nO(n ^ 2)"
}