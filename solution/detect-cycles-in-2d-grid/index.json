{
	"titleSlug": "detect-cycles-in-2d-grid",
	"slug": "er-wei-wang-ge-tu-zhong-tan-ce-huan-by-leetcode-so",
	"url": "https://leetcode-cn.com/problems/detect-cycles-in-2d-grid/solution/er-wei-wang-ge-tu-zhong-tan-ce-huan-by-leetcode-so/",
	"content": "#### 前言\n\n对于大小为 $m \\times n$ 的网格数组 $\\textit{grid}$，如果我们将其中的每个位置看成一个节点，任意两个上下左右相邻且值相同的节点之间有一条无向边，那么 $\\textit{grid}$ 中的一个环就对应着我们构造出的图中的一个环。因此，我们只需要判断图中是否有环即可。\n\n常用的判断无向图中是否有环的方法有深度优先搜索和广度优先搜索，但这里我们会介绍一种基于并查集的判断方法。\n\n#### 方法一：并查集\n\n**思路与算法**\n\n使用并查集判断无向图中是否有环的方法非常简洁且直观：\n\n- 对于图中的任意一条边 $(x, y)$，我们将 $x$ 和 $y$ 对应的集合合并。如果 $x$ 和 $y$ 已经属于同一集合，那么说明 $x$ 和 $y$ 已经连通，在边 $(x, y)$ 的帮助下，图中会形成一个环。\n\n这样一来，我们只要遍历图中的每一条边并进行上述的操作即可。具体的方法是，我们遍历数组 $\\textit{grid}$ 中的每一个位置，如果该位置与其上方或左侧的值相同，那么就有了一条边，并将这两个位置进行合并。这样的方法可以保证每一条边的两个节点只会被合并一次。\n\n由于并查集是一维的数据结构，而数组 $\\textit{grid}$ 是二维的。因此对于数组中的每个位置 $(i, j)$，我们可以用 $i \\times n + j$ 将其映射至一维空间中：\n\n- $(i, j)$ 上方的位置对应着 $(i - 1) \\times n + j$；\n\n- $(i, j)$ 左侧的位置对应着 $i \\times n + j - 1$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass UnionFind {\npublic:\n    vector<int> parent;\n    vector<int> size;\n    int n;\n    int setCount;\n    \npublic:\n    UnionFind(int _n): n(_n), setCount(_n), parent(_n), size(_n, 1) {\n        iota(parent.begin(), parent.end(), 0);\n    }\n    \n    int findset(int x) {\n        return parent[x] == x ? x : parent[x] = findset(parent[x]);\n    }\n    \n    void unite(int x, int y) {\n        if (size[x] < size[y]) {\n            swap(x, y);\n        }\n        parent[y] = x;\n        size[x] += size[y];\n        --setCount;\n    }\n    \n    bool findAndUnite(int x, int y) {\n        int parentX = findset(x);\n        int parentY = findset(y);\n        if (parentX != parentY) {\n            unite(parentX, parentY);\n            return true;\n        }\n        return false;\n    }\n};\n\nclass Solution {\npublic:\n    bool containsCycle(vector<vector<char>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        UnionFind uf(m * n);\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i > 0 && grid[i][j] == grid[i - 1][j]) {\n                    if (!uf.findAndUnite(i * n + j, (i - 1) * n + j)) {\n                        return true;\n                    }\n                }\n                if (j > 0 && grid[i][j] == grid[i][j - 1]) {\n                    if (!uf.findAndUnite(i * n + j, i * n + j - 1)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean containsCycle(char[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        UnionFind uf = new UnionFind(m * n);\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i > 0 && grid[i][j] == grid[i - 1][j]) {\n                    if (!uf.findAndUnite(i * n + j, (i - 1) * n + j)) {\n                        return true;\n                    }\n                }\n                if (j > 0 && grid[i][j] == grid[i][j - 1]) {\n                    if (!uf.findAndUnite(i * n + j, i * n + j - 1)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\nclass UnionFind {\n    int[] parent;\n    int[] size;\n    int n;\n    int setCount;\n\n    public UnionFind(int n) {\n        parent = new int[n];\n        for (int i = 0; i < n; ++i) {\n            parent[i] = i;\n        }\n        size = new int[n];\n        Arrays.fill(size, 1);\n        this.n = n;\n        setCount = n;\n    }\n\n    public int findset(int x) {\n        return parent[x] == x ? x : (parent[x] = findset(parent[x]));\n    }\n\n    public void unite(int x, int y) {\n        if (size[x] < size[y]) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        parent[y] = x;\n        size[x] += size[y];\n        --setCount;\n    }\n\n    public boolean findAndUnite(int x, int y) {\n        int parentX = findset(x);\n        int parentY = findset(y);\n        if (parentX != parentY) {\n            unite(parentX, parentY);\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass UnionFind:\n    def __init__(self, n: int):\n        self.n = n\n        self.setCount = n\n        self.parent = list(range(n))\n        self.size = [1] * n\n    \n    def findset(self, x: int) -> int:\n        if self.parent[x] == x:\n            return x\n        self.parent[x] = self.findset(self.parent[x])\n        return self.parent[x]\n    \n    def unite(self, x: int, y: int):\n        if self.size[x] < self.size[y]:\n            x, y = y, x\n        self.parent[y] = x\n        self.size[x] += self.size[y]\n        self.setCount -= 1\n    \n    def findAndUnite(self, x: int, y: int) -> bool:\n        parentX, parentY = self.findset(x), self.findset(y)\n        if parentX != parentY:\n            self.unite(parentX, parentY)\n            return True\n        return False\n\nclass Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:\n        m, n = len(grid), len(grid[0])\n        uf = UnionFind(m * n)\n        for i in range(m):\n            for j in range(n):\n                if i > 0 and grid[i][j] == grid[i - 1][j]:\n                    if not uf.findAndUnite(i * n + j, (i - 1) * n + j):\n                        return True\n                if j > 0 and grid[i][j] == grid[i][j - 1]:\n                    if not uf.findAndUnite(i * n + j, i * n + j - 1):\n                        return True\n        return False\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn \\cdot \\alpha(mn))$。上述代码中的并查集使用了路径压缩（path compression）以及按秩合并（union by size/rank）优化，单次合并操作的均摊时间复杂度为 $\\alpha(mn)$。每一个位置最多进行两次合并操作，因此总时间复杂度为 $O(mn \\cdot \\alpha(mn))$。\n\n- 空间复杂度：$O(mn)$，即为并查集使用的空间。"
}