{
	"titleSlug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
	"slug": "zui-duo-k-ci-jiao-huan-xiang-lin-shu-wei-hou-de-da",
	"url": "https://leetcode-cn.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits/solution/zui-duo-k-ci-jiao-huan-xiang-lin-shu-wei-hou-de-da/",
	"content": "#### 前言\n\n给定一个长度为 $n$ 的数组 $a$，设计一种数据结构，支持如下的操作：\n\n- 「单点修改」：输入下标 $x$ 和增量 $d$，将 $a[x]$ 增加 $d$；\n\n- 「区间查询」：输入下标 $x$ 和 $y$，求出 $a[x]$ 到 $a[y]$ 的和，即：\n\n    $$\n    \\sum_{i=x}^y a[i]\n    $$\n\n我们需要使得两个操作的时间复杂度尽可能小。「树状数组」就是一种符合条件的数据结构，它能够在 $O(\\log n)$ 的时间完成「单点修改」和「区间查询」操作。\n\n在本题中，我们就需要使用到树状数组。由于树状数组的设计与实现不是本题解的重点，因此这里不会对树状数组本身进行讲解，读者可以自行查阅资料进行学习。\n\n#### 方法一：贪心算法\n\n**思路**\n\n在对字符串 $\\textit{num}$ 进行数位交换的过程中，它的长度（数位的个数）不会发生变化。因此，**数值**最小的整数就等价于**字典序**最小的整数。\n\n要想得到在 $k$ 次交换内**字典序**最小的整数，我们可以「贪心」地从 $\\textit{num}$ 的最高位开始考虑，即希望 $\\textit{num}$ 的最高位尽可能小。我们可以依次枚举 $0 \\sim 9$，对于当前枚举到的数位 $x$，判断是否可以将某个位置上的 $x$ 通过最多 $k$ 次交换移动到最高位。由于每一次交换只能交换相邻位置的两个数字，因此将一个距离最高位为 $s$ 的数位移动到最高位，需要 $s$ 次交换操作。例如当 $\\textit{num} = 97620$ 时，$0$ 与最高位的距离为 $4$，我们可以通过 $4$ 次交换操作把 $0$ 移动到最高位：\n\n```\n 9  7  6  2 [0]\n 9  7  6 [0] 2\n 9  7 [0] 6  2\n 9 [0] 7  6  2\n[0] 9  7  6  2\n```\n\n这样的交换操作相当于把 $0$ 移动到最高位，同时将 $0$ 之前的所有数位向后移动了一位。\n\n如果有多个 $x$ 与最高位的距离小于等于 $k$，那么我们该如何进行选择呢？直观来看，我们应该选择最近的那个 $x$，这样需要交换的次数就最少。\n\n我们接下来考虑次高位。与最高位类似，我们选择最小的数位 $x$，使得它与次高位的距离不超过 $k'$，其中 $k'$ 是 $k$ 扣除最高位交换后的剩余次数。考虑上面 $\\textit{num} = 97620$ 的例子，此时我们应当选择 $x=2$ 交换至次高位。然而我们发现，**经过第一次的交换操作，$2$ 所在的位置发生了变化**！在 $\\textit{num}$ 中，$2$ 与次高位的距离为 $2$，而将 $0$ 交换至最高位后，$2$ 与次高位的距离增加了 $1$，变为 $3$。这是因为 $0$ 从 $2$ 的后面「转移」到了 $2$ 的前面，使得 $2$ 向后移动了一位。因此，**$x$ 实际所在的位置，等于 $x$ 初始时在 $\\textit{num}$ 中的位置，加上 $x$ 后面发生交换的数位个数**。这里的「$x$ 后面发生交换的数位个数」，就可以使用树状数组进行维护。\n\n因此，我们从高到低考虑每一位，对于每一位找出距离该位置小于等于 $k$（剩余的交换次数）且最小的数位，记录该数位的位置、完成交换并更新 $k$ 值。注意到如果我们枚举到了恰好在这一位上的那个数位，计算出的距离为 $0$，同样小于等于 $k$。因此我们总能找到一个满足要求的数位进行交换。\n\n**算法**\n\n对于未接触过树状数组的读者来说，本题有较大的难度。这里我们给出解决本题的算法框架：\n\n- 我们用 $\\textit{pos}[x]$ 按照从高位到低位的顺序，存放所有 $x$ 在 $\\textit{num}$ 中出现的位置；\n\n- 我们从高到低遍历每一个位置。对于位置 $i$，我们从小到大枚举交换的数位 $x$。$\\textit{pos}[x]$ 中的首元素即为与当前位置距离最近的 $x$ 的位置：\n\n    - 记 $u$ 为 $\\textit{pos}[x]$ 中的首元素，那么 $\\textit{num}[u]$（也就是 $x$）当前实际所在的位置，等于 $u$ 加上 $u$ 后面发现交换的数位个数。我们使用树状数组查询区间 $[u+1, n]$，得到结果 $\\textit{behind}$，其中 $n$ 是 $\\textit{num}$ 的长度。那么 $\\textit{num}[u]$ 与位置 $i$ 的实际距离即为 $u + \\textit{behind} - i$。\n\n    - 如果该距离小于等于 $k$，那么我们就可以将 $x$ 交换到位置 $i$。我们使用树状数组更新单点 $u$，将对应的值增加 $1$，表示该位置的数位发生了交换。随后我们还需要更新 $k$ 值以及将 $u$ 从 $\\textit{pos}$ 中移除。\n\n- 在遍历结束后，我们就得到了答案。\n\n> 注意：树状数组的下标一般从 $1$ 开始，而给定的字符串 $\\textit{num}$ 的下标从 $0$ 开始，因此需要设置 $1$ 的下标偏移量。\n\n**代码**\n\n```C++ [sol1-C++]\nclass BIT {\nprivate:\n    vector<int> tree;\n    int n;\n\npublic:\n    BIT(int _n): n(_n), tree(_n + 1) {}\n\n    static int lowbit(int x) {\n        return x & (-x);\n    }\n    \n    void update(int x) {\n        while (x <= n) {\n            ++tree[x];\n            x += lowbit(x);\n        }\n    }\n\n    int query(int x) const {\n        int ans = 0;\n        while (x) {\n            ans += tree[x];\n            x -= lowbit(x);\n        }\n        return ans;\n    }\n\n    int query(int x, int y) const {\n        return query(y) - query(x - 1);\n    }\n};\n\nclass Solution {\npublic:\n    string minInteger(string num, int k) {\n        int n = num.size();\n        vector<queue<int>> pos(10);\n        for (int i = 0; i < n; ++i) {\n            pos[num[i] - '0'].push(i + 1);\n        }\n        string ans;\n        BIT bit(n);\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j < 10; ++j) {\n                if (!pos[j].empty()) {\n                    int behind = bit.query(pos[j].front() + 1, n);\n                    int dist = pos[j].front() + behind - i;\n                    if (dist <= k) {\n                        bit.update(pos[j].front());\n                        pos[j].pop();\n                        ans += (j + '0');\n                        k -= dist;\n                        break;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String minInteger(String num, int k) {\n        int n = num.length();\n        Queue<Integer>[] pos = new Queue[10];\n        for (int i = 0; i < 10; ++i) {\n            pos[i] = new LinkedList<Integer>();\n        }\n        for (int i = 0; i < n; ++i) {\n            pos[num.charAt(i) - '0'].offer(i + 1);\n        }\n        StringBuffer ans = new StringBuffer();\n        BIT bit = new BIT(n);\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j < 10; ++j) {\n                if (!pos[j].isEmpty()) {\n                    int behind = bit.query(pos[j].peek() + 1, n);\n                    int dist = pos[j].peek() + behind - i;\n                    if (dist <= k) {\n                        bit.update(pos[j].poll());\n                        ans.append(j);\n                        k -= dist;\n                        break;\n                    }\n                }\n            }\n        }\n        return ans.toString();\n    }\n}\n\nclass BIT {\n    int n;\n    int[] tree;\n\n    public BIT(int n) {\n        this.n = n;\n        this.tree = new int[n + 1];\n    }\n\n    public static int lowbit(int x) {\n        return x & (-x);\n    }\n\n    public void update(int x) {\n        while (x <= n) {\n            ++tree[x];\n            x += lowbit(x);\n        }\n    }\n\n    public int query(int x) {\n        int ans = 0;\n        while (x > 0) {\n            ans += tree[x];\n            x -= lowbit(x);\n        }\n        return ans;\n    }\n\n    public int query(int x, int y) {\n        return query(y) - query(x - 1);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass BIT:\n    def __init__(self, n: int):\n        self.n = n\n        self.tree = [0] * (n + 1)\n    \n    @staticmethod\n    def lowbit(x: int) -> int:\n        return x & (-x)\n    \n    def update(self, x: int):\n        while x <= self.n:\n            self.tree[x] += 1\n            x += BIT.lowbit(x)\n    \n    def query(self, x: int) -> int:\n        ans = 0\n        while x > 0:\n            ans += self.tree[x]\n            x -= BIT.lowbit(x)\n        return ans\n\n    def queryRange(self, x: int, y: int) -> int:\n        return self.query(y) - self.query(x - 1)\n\n\nclass Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        n = len(num)\n        pos = [list() for _ in range(10)]\n        for i in range(n - 1, -1, -1):\n            pos[ord(num[i]) - ord('0')].append(i + 1)\n        \n        ans = \"\"\n        bit = BIT(n)\n        for i in range(1, n + 1):\n            for j in range(10):\n                if pos[j]:\n                    behind = bit.queryRange(pos[j][-1] + 1, n)\n                    dist = pos[j][-1] + behind - i\n                    if dist <= k:\n                        bit.update(pos[j][-1])\n                        pos[j].pop()\n                        ans += str(j)\n                        k -= dist\n                        break\n        \n        return ans\n```\n\n```C [sol1-C]\n#include <math.h>\n#include <string.h>\n\nint lowbit(int x) { return x & (-x); }\n\nvoid update(int* tree, int x, int n) {\n    while (x <= n) {\n        ++tree[x];\n        x += lowbit(x);\n    }\n}\n\nint query_pre(int* tree, int x) {\n    int ans = 0;\n    while (x) {\n        ans += tree[x];\n        x -= lowbit(x);\n    }\n    return ans;\n}\n\nint query(int* tree, int x, int y) {\n    return query_pre(tree, y) - query_pre(tree, x - 1);\n}\n\nchar* minInteger(char* num, int k) {\n    int n = strlen(num);\n    int* tree = (int*)malloc(sizeof(int) * (n + 1));\n    memset(tree, 0, sizeof(int) * (n + 1));\n\n    int** pos = (int**)malloc(sizeof(int*) * 10);\n    for (int i = 0; i < 10; i++) {\n        pos[i] = (int*)malloc(sizeof(int) * (n + 1));\n    }\n\n    int* len = (int*)malloc(sizeof(int) * 10);\n    memset(len, 0, sizeof(int) * 10);\n    int* add = (int*)malloc(sizeof(int) * 10);\n    memset(add, 0, sizeof(int) * 10);\n\n    for (int i = 0; i < n; ++i) {\n        pos[num[i] - '0'][len[num[i] - '0']++] = i + 1;\n    }\n    char* ans = (char*)malloc(sizeof(char) * (n + 1));\n    ans[n] = '\\0';\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 0; j < 10; ++j) {\n            if (add[j] < len[j]) {\n                int behind = query(tree, pos[j][add[j]] + 1, n);\n                int dist = pos[j][add[j]] + behind - i;\n                if (dist <= k) {\n                    update(tree, pos[j][add[j]], n);\n                    add[j]++;\n                    ans[i - 1] = (j + '0');\n                    k -= dist;\n                    break;\n                }\n            }\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是字符串 $\\textit{num}$ 的长度。遍历位置的时间复杂度为 $O(n)$，枚举数位的时间复杂度为 $O(10)=O(1)$，树状数组「单点修改」和「区间查询」操作的时间复杂度均为 $O(\\log n)$，相乘即可得到总时间复杂度 $O(n \\log n)$。\n\n- 空间复杂度：$O(n)$。除了返回的答案之外，数组 $\\textit{pos}$ 以及树状数组需要的空间均为 $O(n)$。"
}