{
	"titleSlug": "defuse-the-bomb",
	"slug": "chai-zha-dan-by-leetcode-solution-01x3",
	"url": "https://leetcode-cn.com/problems/defuse-the-bomb/solution/chai-zha-dan-by-leetcode-solution-01x3/",
	"content": "#### 方法一：滑动窗口\n\n**思路与算法**\n\n题目给定了一个长度为 $n$ 的循环数组 $\\textit{code}$，和密钥 $k$，我们需要通过 $\\textit{code}$ 和 $k$ 来计算正确的密码：\n\n- 当 $k = 0$ 时：对于原数组中的每一个数需要用 $0$ 来替代。\n- 当 $k > 0$ 时：对于原数组中的每一个数用该数之后的连续 $k$ 的数字来替代。\n- 当 $k < 0$ 时：对于原数组中的每一个数用该数之前的连续 $k$ 的数字来替代。\n\n1. 当 $k = 0$ 时将 $\\textit{code}$ 中元素全部置零返回即可。\n2. 当 $k \\ne 0$ 时：为了说明和编码方便，我们将原数组进行拼接操作 $\\textit{code} = \\textit{code} + \\textit{code}$，并记 $\\textit{code}[i,j]$ 表示区间 $[\\textit{code}_i,\\textit{code}_{i+1},\\cdots,\\textit{code}_j]$。然后我们用 $l_i$，$r_i$ 来对应 $\\textit{code}[i]$ 解密需要的数组区间的左右端点，此时对于 $\\forall i \\in [0,n)$ 有 $l_i + 1 = l_{i + 1}$，$r_i + 1 = r_{i + 1}$ 成立，那么我们只需要在从左往右遍历的过程中维护 $\\textit{code}[l_i,r_i]$ 的和即可。如果不进行拼接，我们也仅需要在维护区间端点时进行取模映射操作，即 $l_{i+1} = (l_i + 1) \\pmod n$，$r_{i+1} = (r_i + 1) \\pmod n$，使空间复杂度降到 $O(1)$。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def decrypt(self, code: List[int], k: int) -> List[int]:\n        if k == 0:\n            return [0] * len(code)\n        res = []\n        n = len(code)\n        code += code\n        if k > 0:\n            l, r = 1, k\n        else:\n            l, r = n + k, n - 1\n        w = sum(code[l:r+1])\n        for i in range(n):\n            res.append(w)\n            w -= code[l]\n            w += code[r + 1]\n            l, r = l + 1, r + 1\n        return res\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] decrypt(int[] code, int k) {\n        int n = code.length;\n        if (k == 0) {\n            return new int[n];\n        }\n        int[] res = new int[n];\n        int[] newCode = new int[n * 2];\n        System.arraycopy(code, 0, newCode, 0, n);\n        System.arraycopy(code, 0, newCode, n, n);\n        code = newCode;\n        int l = k > 0 ? 1 : n + k;\n        int r = k > 0 ? k : n - 1;\n        int w = 0;\n        for (int i = l; i <= r; i++) {\n            w += code[i];\n        }\n        for (int i = 0; i < n; i++) {\n            res[i] = w;\n            w -= code[l];\n            w += code[r + 1];\n            l++;\n            r++;\n        }\n        return res;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] Decrypt(int[] code, int k) {\n        int n = code.Length;\n        if (k == 0) {\n            return new int[n];\n        }\n        int[] res = new int[n];\n        int[] newCode = new int[n * 2];\n        Array.Copy(code, 0, newCode, 0, n);\n        Array.Copy(code, 0, newCode, n, n);\n        code = newCode;\n        int l = k > 0 ? 1 : n + k;\n        int r = k > 0 ? k : n - 1;\n        int w = 0;\n        for (int i = l; i <= r; i++) {\n            w += code[i];\n        }\n        for (int i = 0; i < n; i++) {\n            res[i] = w;\n            w -= code[l];\n            w += code[r + 1];\n            l++;\n            r++;\n        }\n        return res;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> decrypt(vector<int>& code, int k) {\n        int n = code.size();\n        vector<int> res(n);\n        if (k == 0) {\n            return res;\n        }\n        code.resize(n * 2);\n        copy(code.begin(), code.begin() + n, code.begin() + n);\n        int l = k > 0 ? 1 : n + k;\n        int r = k > 0 ? k : n - 1;\n        int w = 0;\n        for (int i = l; i <= r; i++) {\n            w += code[i];\n        }\n        for (int i = 0; i < n; i++) {\n            res[i] = w;\n            w -= code[l];\n            w += code[r + 1];\n            l++;\n            r++;\n        }\n        return res;\n    }\n};\n```\n\n```C [sol1-C]\nint* decrypt(int* code, int codeSize, int k, int* returnSize) {\n    int *newCode = (int *)malloc(sizeof(int) * codeSize * 2);\n    memcpy(newCode, code, sizeof(int) * codeSize);\n    memcpy(newCode + codeSize, code, sizeof(int) * codeSize);\n    int *res = (int *)malloc(sizeof(int) * codeSize);\n    memset(res, 0, sizeof(int) * codeSize);\n    *returnSize = codeSize;\n    code = newCode;\n    if (k == 0) {\n        return res;\n    }\n    int l = k > 0 ? 1 : codeSize + k;\n    int r = k > 0 ? k : codeSize - 1;\n    int w = 0;\n    for (int i = l; i <= r; i++) {\n        w += code[i];\n    }\n    for (int i = 0; i < codeSize; i++) {\n        res[i] = w;\n        w -= code[l];\n        w += code[r + 1];\n        l++;\n        r++;\n    }\n    free(code);\n    return res;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar decrypt = function(code, k) {\n    const n = code.length;\n    if (k === 0) {\n        return new Array(n).fill(0);\n    }\n    const res = new Array(n).fill(0);\n    const newCode = new Array(n * 2).fill(0).map((_, idx) => {\n        return code[idx % code.length];\n    });\n    code = newCode;\n    let l = k > 0 ? 1 : n + k;\n    let r = k > 0 ? k : n - 1;\n    let w = 0;\n    for (let i = l; i <= r; i++) {\n        w += code[i];\n    }\n    for (let i = 0; i < n; i++) {\n        res[i] = w;\n        w -= code[l];\n        w += code[r + 1];\n        l++;\n        r++;\n    }\n    return res;\n};\n```\n\n```go [sol1-Golang]\nfunc decrypt(code []int, k int) []int {\n    n := len(code)\n    ans := make([]int, n)\n    if k == 0 {\n        return ans\n    }\n    code = append(code, code...)\n    l, r := 1, k\n    if k < 0 {\n        l, r = n+k, n-1\n    }\n    sum := 0\n    for _, v := range code[l : r+1] {\n        sum += v\n    }\n    for i := range ans {\n        ans[i] = sum\n        sum -= code[l]\n        sum += code[r+1]\n        l, r = l+1, r+1\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组 $\\textit{code}$ 的长度。\n- 空间复杂度：$O(n)$，其中 $n$ 为数组 $\\textit{code}$ 的长度，主要为数组拼接后的空间开销，也可以通过取模映射操作来将空间复杂度降到 $O(1)$。"
}