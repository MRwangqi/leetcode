{
	"titleSlug": "maximum-depth-of-n-ary-tree",
	"slug": "n-cha-shu-de-zui-da-shen-du-by-leetcode-n7qtv",
	"url": "https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/solution/n-cha-shu-de-zui-da-shen-du-by-leetcode-n7qtv/",
	"content": "#### 前言\n\n「[104. 二叉树的最大深度](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree)」要求计算二叉树的最大深度，这道题是第 104 题的推广，从二叉树推广到 $N$ 叉树。\n\n建议读者先阅读「[104. 二叉树的最大深度的官方题解](https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/er-cha-shu-de-zui-da-shen-du-by-leetcode-solution)」，了解如何计算二叉树的最大深度，然后再阅读这篇题解。\n\n#### 方法一：深度优先搜索\n\n如果根节点有 $N$ 个子节点，则这 $N$ 个子节点对应 $N$ 个子树。记 $N$ 个子树的最大深度中的最大值为 $\\textit{maxChildDepth}$，则该 $N$ 叉树的最大深度为 $\\textit{maxChildDepth} + 1$。\n\n每个子树的最大深度又可以以同样的方式进行计算。因此我们可以用「深度优先搜索」的方法计算 $N$ 叉树的最大深度。具体而言，在计算当前 $N$ 叉树的最大深度时，可以先递归计算出其每个子树的最大深度，然后在 $O(1)$ 的时间内计算出当前 $N$ 叉树的最大深度。递归在访问到空节点时退出。\n\n```Java [sol1-Java]\nclass Solution {\n    public int maxDepth(Node root) {\n        if (root == null) {\n            return 0;\n        }\n        int maxChildDepth = 0;\n        List<Node> children = root.children;\n        for (Node child : children) {\n            int childDepth = maxDepth(child);\n            maxChildDepth = Math.max(maxChildDepth, childDepth);\n        }\n        return maxChildDepth + 1;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MaxDepth(Node root) {\n        if (root == null) {\n            return 0;\n        }\n        int maxChildDepth = 0;\n        IList<Node> children = root.children;\n        foreach (Node child in children) {\n            int childDepth = MaxDepth(child);\n            maxChildDepth = Math.Max(maxChildDepth, childDepth);\n        }\n        return maxChildDepth + 1;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxDepth(Node* root) {\n        if (root == nullptr) {\n            return 0;\n        }\n        int maxChildDepth = 0;\n        vector<Node *> children = root->children;\n        for (auto child : children) {\n            int childDepth = maxDepth(child);\n            maxChildDepth = max(maxChildDepth, childDepth);\n        }\n        return maxChildDepth + 1;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxDepth = function(root) {\n    if (!root) {\n        return 0;\n    }\n    let maxChildDepth = 0;\n    const children = root.children;\n    for (const child of children) {\n        const childDepth = maxDepth(child);\n        maxChildDepth = Math.max(maxChildDepth, childDepth);\n    }\n    return maxChildDepth + 1;\n};\n```\n\n```go [sol1-Golang]\nfunc maxDepth(root *Node) int {\n    if root == nil {\n        return 0\n    }\n    maxChildDepth := 0\n    for _, child := range root.Children {\n        if childDepth := maxDepth(child); childDepth > maxChildDepth {\n            maxChildDepth = childDepth\n        }\n    }\n    return maxChildDepth + 1\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxDepth(self, root: 'Node') -> int:\n        return max((self.maxDepth(child) for child in root.children), default=0) + 1 if root else 0\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $N$ 叉树节点的个数。每个节点在递归中只被遍历一次。\n\n- 空间复杂度：$O(\\textit{height})$，其中 $\\textit{height}$ 表示 $N$ 叉树的高度。递归函数需要栈空间，而栈空间取决于递归的深度，因此空间复杂度等价于 $N$ 叉树的高度。\n\n#### 方法二：广度优先搜索\n\n我们也可以用「广度优先搜索」的方法来解决这道题目，但我们需要对其进行一些修改，此时我们广度优先搜索的队列里存放的是「当前层的所有节点」。每次拓展下一层的时候，不同于广度优先搜索的每次只从队列里拿出一个节点，我们需要将队列里的所有节点都拿出来进行拓展，这样能保证每次拓展完的时候队列里存放的是当前层的所有节点，即我们是一层一层地进行拓展。最后我们用一个变量 $\\textit{ans}$ 来维护拓展的次数，该 $N$ 叉树的最大深度即为 $\\textit{ans}$。\n\n```Java [sol2-Java]\nclass Solution {\n    public int maxDepth(Node root) {\n        if (root == null) {\n            return 0;\n        }\n        Queue<Node> queue = new LinkedList<Node>();\n        queue.offer(root);\n        int ans = 0;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            while (size > 0) {\n                Node node = queue.poll();\n                List<Node> children = node.children;\n                for (Node child : children) {\n                    queue.offer(child);\n                }\n                size--;\n            }\n            ans++;\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int MaxDepth(Node root) {\n        if (root == null) {\n            return 0;\n        }\n        Queue<Node> queue = new Queue<Node>();\n        queue.Enqueue(root);\n        int ans = 0;\n        while (queue.Count > 0) {\n            int size = queue.Count;\n            while (size > 0) {\n                Node node = queue.Dequeue();\n                IList<Node> children = node.children;\n                foreach (Node child in children) {\n                    queue.Enqueue(child);\n                }\n                size--;\n            }\n            ans++;\n        }\n        return ans;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxDepth(Node* root) {\n        if (root == nullptr) {\n            return 0;\n        }\n        queue<Node *> qu;\n        qu.push(root);\n        int ans = 0;\n        while (!qu.empty()) {\n            int size = qu.size();\n            while (size > 0) {\n                Node * node = qu.front();\n                qu.pop();\n                vector<Node *> children = node->children;\n                for (auto child : children) {\n                    qu.push(child);\n                }\n                size--;\n            }\n            ans++;\n        }\n        return ans;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar maxDepth = function(root) {\n    if (!root) {\n        return 0;\n    }\n    const queue = [];\n    queue.push(root);\n    let ans = 0;\n    while (queue.length) {\n        let size = queue.length;\n        while (size > 0) {\n            const node = queue.shift();\n            const children = node.children;\n            for (const child of children) {\n                queue.push(child);\n            }\n            size--;\n        }\n        ans++;\n    }\n    return ans;\n};\n```\n\n```go [sol2-Golang]\nfunc maxDepth(root *Node) (ans int) {\n    if root == nil {\n        return\n    }\n    queue := []*Node{root}\n    for len(queue) > 0 {\n        q := queue\n        queue = nil\n        for _, node := range q {\n            queue = append(queue, node.Children...)\n        }\n        ans++\n    }\n    return\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def maxDepth(self, root: 'Node') -> int:\n        if root is None:\n            return 0\n        ans = 0\n        queue = [root]\n        while queue:\n            queue = [child for node in queue for child in node.children]\n            ans += 1\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $N$ 叉树的节点个数。与方法一同样的分析，每个节点只会被访问一次。\n\n- 空间复杂度：此方法空间的消耗取决于队列存储的元素数量，其在最坏情况下会达到 $O(n)$。"
}