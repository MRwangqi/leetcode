{
	"titleSlug": "most-stones-removed-with-same-row-or-column",
	"slug": "947-yi-chu-zui-duo-de-tong-xing-huo-tong-ezha",
	"url": "https://leetcode-cn.com/problems/most-stones-removed-with-same-row-or-column/solution/947-yi-chu-zui-duo-de-tong-xing-huo-tong-ezha/",
	"content": "### 📺 视频讲解 \n\n>力扣君温馨小贴士：觉得视频时间长的扣友，可以在视频右下角的「设置」按钮处选择 1.5 倍速或者 2 倍速观看。\n\n![...移除最多的同行或同列石头 (1).mp4](99502bc2-5af6-4613-8f41-9b45c97ff335)\n\n### 📖 文字解析\n\n把二维坐标平面上的石头想象成图的顶点，如果两个石头横坐标相同、或者纵坐标相同，在它们之间形成一条边。\n\n![image.png](https://pic.leetcode-cn.com/1610632356-qpNmlU-image.png)\n\n根据可以移除石头的规则：如果一块石头的 **同行或者同列** 上有其他石头存在，那么就可以移除这块石头。可以发现：**一定可以把一个连通图里的所有顶点根据这个规则删到只剩下一个顶点**。\n\n为什么这么说呢？既然这些顶点在一个连通图里，可以通过遍历的方式（深度优先遍历或者广度优先遍历）遍历到这个连通图的所有顶点。那么就可以按照遍历的方式 **逆向** 移除石头，最后只剩下一块石头。所以：**最多可以移除的石头的个数 = 所有石头的个数 - 连通分量的个数**。\n\n题目没有让我们给出具体移除石头的方案，可以考虑使用并查集。\n\n### 方法：并查集\n\n删到最后，留在图中的顶点一定位于不同的行和不同的列。因此，并查集里的元素是 **描述「横坐标」和「纵坐标」的数值**。因此我们需要遍历数组 `stones`，将每个 `stone` 的横坐标和纵坐标在并查集中进行合并。理解合并的语义十分重要。\n\n#### 「合并」的语义\n\n「合并」的语义是：所有横坐标为 `x` 的石头和所有纵坐标为 `y` 的石头都属于同一个连通分量。\n\n#### 并查集里如何区分横纵坐标\n\n然而会遇到这样一个问题：石头的位置是「有序数对（二维）」，并查集的底层是「一维数组」，我们在并查集里应该如何区分横纵坐标呢？\n\n例如：如果一块石头的坐标为 `[3, 3]` ，那么所有横坐标为 `3` 的石头和所有纵坐标为 `3` 的石头都在一个连通分量中，但是我们需要在并查集里区分「横坐标」和「纵坐标」，它们在并查集里不能相等，根据题目的提示 $0 <= x_i, y_i <= 10^4$，可以把其中一个坐标 **映射** 到另一个与 `[0, 10000]` 不重合的区间，可以的做法是把横坐标全部减去 $10001$ 或者全部加上 $10001$，或者按位取反（`[0, 10000]` 里的 $32$ 位整数，最高位变成 $1$ 以后，一定不在 `[0, 10000]` 里）。\n\n在并查集里我们需要维护连通分量的个数，新创建顶点的时候连通分量加 $1$；合并不在同一个连通分量中的两个并查集的时候，连通分量减 $1$。\n\n**参考代码**：\n\n\n\n```Java []\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Solution {\n\n    public int removeStones(int[][] stones) {\n        UnionFind unionFind = new UnionFind();\n\n        for (int[] stone : stones) {\n            // 下面这三种写法任选其一\n            // unionFind.union(~stone[0], stone[1]);\n            // unionFind.union(stone[0] - 10001, stone[1]);\n            unionFind.union(stone[0] + 10001, stone[1]);\n        }\n        return stones.length - unionFind.getCount();\n    }\n\n    private class UnionFind {\n\n        private Map<Integer, Integer> parent;\n        private int count;\n\n        public UnionFind() {\n            this.parent = new HashMap<>();\n            this.count = 0;\n        }\n\n        public int getCount() {\n            return count;\n        }\n\n        public int find(int x) {\n            if (!parent.containsKey(x)) {\n                parent.put(x, x);\n                // 并查集集中新加入一个结点，结点的父亲结点是它自己，所以连通分量的总数 +1\n                count++;\n            }\n\n            if (x != parent.get(x)) {\n                parent.put(x, find(parent.get(x)));\n            }\n            return parent.get(x);\n        }\n\n        public void union(int x, int y) {\n            int rootX = find(x);\n            int rootY = find(y);\n            if (rootX == rootY) {\n                return;\n            }\n\n            parent.put(rootX, rootY);\n            // 两个连通分量合并成为一个，连通分量的总数 -1\n            count--;\n        }\n    }\n}\n```\n\n\n**复杂度分析**：\n\n\n- 时间复杂度：$O(n \\log(A))$，其中 $n$ 为石子的数量，$A$ 是数组 `stones` 里横纵坐标不同值的总数；\n- 空间复杂度：$O(A)$，并查集的底层哈希表的长度为 $A$。\n\n"
}