{
	"titleSlug": "count-good-triplets",
	"slug": "tong-ji-hao-san-yuan-zu-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/count-good-triplets/solution/tong-ji-hao-san-yuan-zu-by-leetcode-solution/",
	"content": "#### 方法一：枚举\n\n**思路与算法**\n\n用 $O(n^3)$ 的循环依次枚举所有的 $(i, j, k)$，这里 $0 \\leq i < j < k < {\\rm arr.length}$，对于每组 $(i, j, k)$，判断 ${\\rm arr}[i]$、${\\rm arr}[j]$、${\\rm arr}[k]$ 是否满足条件。\n\n最终统计出所有满足条件的三元组的数量。\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    int countGoodTriplets(vector<int>& arr, int a, int b, int c) {\n        int n = arr.size(), cnt = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                for (int k = j + 1; k < n; ++k) {\n                    if (abs(arr[i] - arr[j]) <= a && abs(arr[j] - arr[k]) <= b && abs(arr[i] - arr[k]) <= c) {\n                        ++cnt;\n                    }\n                }\n            }\n        }\n        return cnt;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countGoodTriplets(int[] arr, int a, int b, int c) {\n        int n = arr.length, cnt = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                for (int k = j + 1; k < n; ++k) {\n                    if (Math.abs(arr[i] - arr[j]) <= a && Math.abs(arr[j] - arr[k]) <= b && Math.abs(arr[i] - arr[k]) <= c) {\n                        ++cnt;\n                    }\n                }\n            }\n        }\n        return cnt;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar countGoodTriplets = function(arr, a, b, c) {\n    const n = arr.length;\n    let cnt = 0;\n    for (let i = 0; i < n; ++i) {\n        for (let j = i + 1; j < n; ++j) {\n            for (let k = j + 1; k < n; ++k) {\n                if (Math.abs(arr[i] - arr[j]) <= a && Math.abs(arr[j] - arr[k]) <= b && Math.abs(arr[i] - arr[k]) <= c) {\n                    ++cnt;\n                }\n            }\n        }\n    }\n    return cnt;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        n = len(arr)\n        cnt = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                        cnt += 1\n        return cnt\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n^3)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。\n\n+ 空间复杂度：$O(1)$。\n\n#### 方法二：枚举优化\n\n**思路与算法**\n\n我们考虑 $O(n^2)$ 枚举满足 $|\\rm arr[j]-\\rm arr[k]|\\le b$ 的二元组 $(j,k)$，统计这个二元组下有多少 $i$ 满足条件。由题目已知 $i$ 的限制条件为 $|\\rm arr[i]-\\rm arr[j]|\\le a \\ \\&\\&\\ |\\rm arr[i]-\\rm arr[k]|\\le c$，我们可以拆开绝对值，得到符合条件的值一定是 $[\\rm arr[j]-a,\\rm arr[j]+a]$ 和 $[\\rm arr[k]-c,\\rm arr[k]+c]$ 两个区间的交集，我们记为 $[l,r]$。因此，在枚举 $(j,k)$ 这个二元组的时候，我们只需要快速统计出满足 $i<j$ 且 $\\rm arr[i]$ 的值域范围在 $[l,r]$ 的 $i$ 的个数即可。\n\n很容易想到维护一个 $\\rm arr[i]$ 频次数组的前缀和 $\\rm sum$，对于一个二元组 $(j,k)$，我们可以 $O(1)$ 得到答案为 $\\rm sum[r]-\\rm sum[l-1]$。考虑怎么维护保证当前频次数组存的数的下标符合 $i<j$ 的限制，我们只要从小到大枚举 $j$，每次 $j$ 移动指针加一的时候，将 $\\rm arr[j]$ 的值更新到 $\\rm sum$ 数组中即可，这样能保证枚举到 $j$ 的时候 $\\rm sum$ 数组里存的值的下标满足限制。\n\n 「将 $\\rm arr[j]$ 的值更新到 $\\rm sum$ 数组中」这个操作在本方法中是暴力更新，因为数组的值域上限很小，有能力的读者可以考虑怎么在进一步优化这一部分的复杂度，可以从离散化或者树状数组的角度考虑，这里不再赘述。\n\n**代码**\n\n```cpp [sol2-C++]\nclass Solution {\npublic:\n    int countGoodTriplets(vector<int>& arr, int a, int b, int c) {\n        int ans = 0, n = arr.size();\n        vector<int> sum(1001, 0);\n        for (int j = 0; j < n; ++j) {\n            for (int k = j + 1; k < n; ++k) {\n                if (abs(arr[j] - arr[k]) <= b) {\n                    int lj = arr[j] - a, rj = arr[j] + a;\n                    int lk = arr[k] - c, rk = arr[k] + c;\n                    int l = max(0, max(lj, lk)), r = min(1000, min(rj, rk));\n                    if (l <= r) {\n                        if (l == 0) {\n                            ans += sum[r];\n                        }\n                        else {\n                            ans += sum[r] - sum[l - 1];\n                        }\n                    }\n                }\n            }\n            for (int k = arr[j]; k <= 1000; ++k) {\n                ++sum[k];\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int countGoodTriplets(int[] arr, int a, int b, int c) {\n        int ans = 0, n = arr.length;\n        int[] sum = new int[1001];\n        for (int j = 0; j < n; ++j) {\n            for (int k = j + 1 ; k < n; ++k) {\n                if (Math.abs(arr[j] - arr[k]) <= b) {\n                    int lj = arr[j] - a, rj = arr[j] + a;\n                    int lk = arr[k] - c, rk = arr[k] + c;\n                    int l = Math.max(0, Math.max(lj, lk)), r = Math.min(1000, Math.min(rj, rk));\n                    if (l <= r) {\n                        if (l == 0) {\n                            ans += sum[r];\n                        }\n                        else {\n                            ans += sum[r] - sum[l - 1];\n                        }\n                    }\n                }\n            }\n            for (int k = arr[j]; k <= 1000; ++k) {\n                ++sum[k];\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar countGoodTriplets = function(arr, a, b, c) {\n    const n = arr.length, sum = new Array(1001).fill(0);\n    let ans = 0;\n    for (let j = 0; j < n; ++j) {\n        for (let k = j + 1; k < n; ++k) {\n            if (Math.abs(arr[j] - arr[k]) <= b) {\n                const lj = arr[j] - a, rj = arr[j] + a;\n                const lk = arr[k] - c, rk = arr[k] + c;\n                const l = Math.max(0, Math.max(lj, lk)), r = Math.min(1000, Math.min(rj, rk));\n                if (l <= r) {\n                    if (l === 0) {\n                        ans += sum[r];\n                    }\n                    else {\n                        ans += sum[r] - sum[l - 1];\n                    }\n                }\n            }\n        }\n        for (let k = arr[j]; k <= 1000; ++k) {\n            sum[k] += 1;\n        }\n    }\n    return ans;\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ans = 0\n        n = len(arr)\n        total = [0] * 1001\n        for j in range(n):\n            for k in range(j + 1, n):\n                if abs(arr[j] - arr[k]) <= b:\n                    lj, rj = arr[j] - a, arr[j] + a\n                    lk, rk = arr[k] - c, arr[k] + c\n                    l = max(0, lj, lk)\n                    r = min(1000, rj, rk)\n                    if l <= r:\n                        ans += total[r] if l == 0 else total[r] - total[l - 1]\n            for k in range(arr[j], 1001):\n                total[k] += 1\n        \n        return ans\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n^2+nS)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度，$S$ 为数组的值域上限，这里为 $1000$。\n\n+ 空间复杂度：$O(S)$。我们需要 $O(S)$ 的空间维护 $\\rm arr[i]$ 频次数组的前缀和。"
}