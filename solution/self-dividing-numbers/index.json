{
	"titleSlug": "self-dividing-numbers",
	"slug": "zi-chu-shu-by-leetcode-solution-820g",
	"url": "https://leetcode-cn.com/problems/self-dividing-numbers/solution/zi-chu-shu-by-leetcode-solution-820g/",
	"content": "#### 方法一：直接判断\n\n遍历范围 $[\\textit{left}, \\textit{right}]$ 内的所有整数，分别判断每个整数是否为自除数。\n\n根据自除数的定义，如果一个整数不包含 $0$ 且能被它包含的每一位数整除，则该整数是自除数。判断一个整数是否为自除数的方法是遍历整数的每一位，判断每一位数是否为 $0$ 以及是否可以整除该整数。\n\n遍历整数的每一位的方法是，每次将当前整数对 $10$ 取模即可得到当前整数的最后一位，然后将整数除以 $10$。重复该操作，直到当前整数变成 $0$ 时即遍历了整数的每一位。\n\n```Python [sol1-Python3]\nclass Solution:\n    def selfDividingNumbers(self, left: int, right: int) -> List[int]:\n        def isSelfDividing(num: int) -> bool:\n            x = num\n            while x:\n                x, d = divmod(x, 10)\n                if d == 0 or num % d:\n                    return False\n            return True\n        return [i for i in range(left, right + 1) if isSelfDividing(i)]\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> selfDividingNumbers(int left, int right) {\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i = left; i <= right; i++) {\n            if (isSelfDividing(i)) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n\n    public boolean isSelfDividing(int num) {\n        int temp = num;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit == 0 || num % digit != 0) {\n                return false;\n            }\n            temp /= 10;\n        }\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<int> SelfDividingNumbers(int left, int right) {\n        IList<int> ans = new List<int>();\n        for (int i = left; i <= right; i++) {\n            if (IsSelfDividing(i)) {\n                ans.Add(i);\n            }\n        }\n        return ans;\n    }\n\n    public bool IsSelfDividing(int num) {\n        int temp = num;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit == 0 || num % digit != 0) {\n                return false;\n            }\n            temp /= 10;\n        }\n        return true;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isSelfDividing(int num) {\n        int temp = num;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit == 0 || num % digit != 0) {\n                return false;\n            }\n            temp /= 10;\n        }\n        return true;\n    }\n\n    vector<int> selfDividingNumbers(int left, int right) {\n        vector<int> ans;\n        for (int i = left; i <= right; i++) {\n            if (isSelfDividing(i)) {\n                ans.emplace_back(i);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```C [sol1-C]\nbool isSelfDividing(int num) {\n    int temp = num;\n    while (temp > 0) {\n        int digit = temp % 10;\n        if (digit == 0 || num % digit != 0) {\n            return false;\n        }\n        temp /= 10;\n    }\n    return true;\n}\n\nint* selfDividingNumbers(int left, int right, int* returnSize){\n    int * ans = (int *)malloc(sizeof(int) * (right - left + 1));\n    int pos = 0;\n    for (int i = left; i <= right; i++) {\n        if (isSelfDividing(i)) {\n            ans[pos++] = i;\n        }\n    }\n    *returnSize = pos;\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar selfDividingNumbers = function(left, right) {\n    const ans = [];\n    for (let i = left; i <= right; i++) {\n        if (isSelfDividing(i)) {\n            ans.push(i);\n        }\n    }\n    return ans;\n}\n\nconst isSelfDividing = (num) => {\n    let temp = num;\n    while (temp > 0) {\n        const digit = temp % 10;\n        if (digit === 0 || num % digit !== 0) {\n            return false;\n        }\n        temp = Math.floor(temp / 10);\n    }\n    return true;\n};\n```\n\n```go [sol1-Golang]\nfunc isSelfDividing(num int) bool {\n    for x := num; x > 0; x /= 10 {\n        if d := x % 10; d == 0 || num%d != 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc selfDividingNumbers(left, right int) (ans []int) {\n    for i := left; i <= right; i++ {\n        if isSelfDividing(i) {\n            ans = append(ans, i)\n        }\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log \\textit{right})$，其中 $n$ 是范围内的整数个数，$\\textit{right}$ 是范围内的最大整数。对于范围内的每个整数，需要 $O(\\log \\textit{right})$ 的时间判断是否为自除数。\n\n- 空间复杂度：$O(1)$。除了返回值以外，使用的额外空间为 $O(1)$。"
}