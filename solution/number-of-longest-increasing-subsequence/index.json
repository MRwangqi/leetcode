{
	"titleSlug": "number-of-longest-increasing-subsequence",
	"slug": "zui-chang-di-zeng-zi-xu-lie-de-ge-shu-by-w12f",
	"url": "https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/solution/zui-chang-di-zeng-zi-xu-lie-de-ge-shu-by-w12f/",
	"content": "#### 前言\n\n本题是「[300. 最长递增子序列](https://leetcode-cn.com/problems/longest-increasing-subsequence/)」的进阶版本，建议读者在掌握该题做法后继续阅读。\n\n#### 方法一：动态规划\n\n**思路与算法**\n\n定义 $\\textit{dp}[i]$ 表示以 $\\textit{nums}[i]$ 结尾的最长上升子序列的长度，$\\textit{cnt}[i]$ 表示以 $\\textit{nums}[i]$ 结尾的最长上升子序列的个数。设 $\\textit{nums}$ 的最长上升子序列的长度为 $\\textit{maxLen}$，那么答案为所有满足 $\\textit{dp}[i]=\\textit{maxLen}$ 的 $i$ 所对应的 $\\textit{cnt}[i]$ 之和。\n\n我们从小到大计算 $\\textit{dp}$ 数组的值，在计算 $\\textit{dp}[i]$ 之前，我们已经计算出 $\\textit{dp}[0 \\ldots i-1]$ 的值，则状态转移方程为：\n\n$$\n\\textit{dp}[i] = \\max(\\textit{dp}[j]) + 1, \\text{其中} \\, 0 \\leq j < i \\, \\text{且} \\, \\textit{num}[j]<\\textit{num}[i]\n$$\n\n即考虑往 $\\textit{dp}[0 \\ldots i-1]$ 中最长的上升子序列后面再加一个 $\\textit{nums}[i]$。由于 $\\textit{dp}[j]$ 代表 $\\textit{nums}[0 \\ldots j]$ 中以 $\\textit{nums}[j]$ 结尾的最长上升子序列，所以如果能从 $\\textit{dp}[j]$ 这个状态转移过来，那么 $\\textit{nums}[i]$ 必然要大于 $\\textit{nums}[j]$，才能将 $\\textit{nums}[i]$ 放在 $\\textit{nums}[j]$ 后面以形成更长的上升子序列。\n\n对于 $\\textit{cnt}[i]$，其等于所有满足 $\\textit{dp}[j]+1=\\textit{dp}[i]$ 的 $\\textit{cnt}[j]$ 之和。在代码实现时，我们可以在计算 $\\textit{dp}[i]$ 的同时统计 $\\textit{cnt}[i]$ 的值。\n\n```Python [sol1-Python3]\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        n, max_len, ans = len(nums), 0, 0\n        dp = [0] * n\n        cnt = [0] * n\n        for i, x in enumerate(nums):\n            dp[i] = 1\n            cnt[i] = 1\n            for j in range(i):\n                if x > nums[j]:\n                    if dp[j] + 1 > dp[i]:\n                        dp[i] = dp[j] + 1\n                        cnt[i] = cnt[j]  # 重置计数\n                    elif dp[j] + 1 == dp[i]:\n                        cnt[i] += cnt[j]\n            if dp[i] > max_len:\n                max_len = dp[i]\n                ans = cnt[i]  # 重置计数\n            elif dp[i] == max_len:\n                ans += cnt[i]\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findNumberOfLIS(vector<int> &nums) {\n        int n = nums.size(), maxLen = 0, ans = 0;\n        vector<int> dp(n), cnt(n);\n        for (int i = 0; i < n; ++i) {\n            dp[i] = 1;\n            cnt[i] = 1;\n            for (int j = 0; j < i; ++j) {\n                if (nums[i] > nums[j]) {\n                    if (dp[j] + 1 > dp[i]) {\n                        dp[i] = dp[j] + 1;\n                        cnt[i] = cnt[j]; // 重置计数\n                    } else if (dp[j] + 1 == dp[i]) {\n                        cnt[i] += cnt[j];\n                    }\n                }\n            }\n            if (dp[i] > maxLen) {\n                maxLen = dp[i];\n                ans = cnt[i]; // 重置计数\n            } else if (dp[i] == maxLen) {\n                ans += cnt[i];\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findNumberOfLIS(int[] nums) {\n        int n = nums.length, maxLen = 0, ans = 0;\n        int[] dp = new int[n];\n        int[] cnt = new int[n];\n        for (int i = 0; i < n; ++i) {\n            dp[i] = 1;\n            cnt[i] = 1;\n            for (int j = 0; j < i; ++j) {\n                if (nums[i] > nums[j]) {\n                    if (dp[j] + 1 > dp[i]) {\n                        dp[i] = dp[j] + 1;\n                        cnt[i] = cnt[j]; // 重置计数\n                    } else if (dp[j] + 1 == dp[i]) {\n                        cnt[i] += cnt[j];\n                    }\n                }\n            }\n            if (dp[i] > maxLen) {\n                maxLen = dp[i];\n                ans = cnt[i]; // 重置计数\n            } else if (dp[i] == maxLen) {\n                ans += cnt[i];\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int FindNumberOfLIS(int[] nums) {\n        int n = nums.Length, maxLen = 0, ans = 0;\n        int[] dp = new int[n];\n        int[] cnt = new int[n];\n        for (int i = 0; i < n; ++i) {\n            dp[i] = 1;\n            cnt[i] = 1;\n            for (int j = 0; j < i; ++j) {\n                if (nums[i] > nums[j]) {\n                    if (dp[j] + 1 > dp[i]) {\n                        dp[i] = dp[j] + 1;\n                        cnt[i] = cnt[j]; // 重置计数\n                    } else if (dp[j] + 1 == dp[i]) {\n                        cnt[i] += cnt[j];\n                    }\n                }\n            }\n            if (dp[i] > maxLen) {\n                maxLen = dp[i];\n                ans = cnt[i]; // 重置计数\n            } else if (dp[i] == maxLen) {\n                ans += cnt[i];\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc findNumberOfLIS(nums []int) (ans int) {\n    maxLen := 0\n    n := len(nums)\n    dp := make([]int, n)\n    cnt := make([]int, n)\n    for i, x := range nums {\n        dp[i] = 1\n        cnt[i] = 1\n        for j, y := range nums[:i] {\n            if x > y {\n                if dp[j]+1 > dp[i] {\n                    dp[i] = dp[j] + 1\n                    cnt[i] = cnt[j] // 重置计数\n                } else if dp[j]+1 == dp[i] {\n                    cnt[i] += cnt[j]\n                }\n            }\n        }\n        if dp[i] > maxLen {\n            maxLen = dp[i]\n            ans = cnt[i] // 重置计数\n        } else if dp[i] == maxLen {\n            ans += cnt[i]\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findNumberOfLIS = function(nums) {\n    let n = nums.length, maxLen = 0, ans = 0;\n    const dp = new Array(n).fill(0);\n    const cnt = new Array(n).fill(0);\n    for (let i = 0; i < n; ++i) {\n        dp[i] = 1;\n        cnt[i] = 1;\n        for (let j = 0; j < i; ++j) {\n            if (nums[i] > nums[j]) {\n                if (dp[j] + 1 > dp[i]) {\n                    dp[i] = dp[j] + 1;\n                    cnt[i] = cnt[j]; // 重置计数\n                } else if (dp[j] + 1 === dp[i]) {\n                    cnt[i] += cnt[j];\n                }\n            }\n        }\n        if (dp[i] > maxLen) {\n            maxLen = dp[i];\n            ans = cnt[i]; // 重置计数\n        } else if (dp[i] === maxLen) {\n            ans += cnt[i];\n        }\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(n)$。\n\n#### 方法二：贪心 + 前缀和 + 二分查找\n\n下文在「[300. 最长递增子序列的官方题解](https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/)」的方法二上进行扩展，请读者在了解该方法后继续阅读。\n\n我们将数组 $d$ 扩展成一个二维数组，其中 $d[i]$ 数组表示所有能成为长度为 $i$ 的最长上升子序列的末尾元素的值。具体地，我们将更新 $d[i]=\\textit{nums}[j]$ 这一操作替换成将 $\\textit{nums}[j]$ 置于 $d[i]$ 数组末尾。这样 $d[i]$ 中就保留了历史信息，且 $d[i]$ 中的元素是有序的（单调非增）。\n\n类似地，我们也可以定义一个二维数组 $\\textit{cnt}$，其中 $\\textit{cnt}[i][j]$ 记录了以 $d[i][j]$ 为结尾的最长上升子序列的个数。为了计算 $\\textit{cnt}[i][j]$，我们可以考察 $d[i-1]$ 和 $\\textit{cnt}[i-1]$，将所有满足 $d[i-1][k]<d[i][j]$ 的 $\\textit{cnt}[i-1][k]$ 累加到 $\\textit{cnt}[i][j]$，这样最终答案就是 $\\textit{cnt}[\\textit{maxLen}]$ 的所有元素之和。\n\n在代码实现时，由于 $d[i]$ 中的元素是有序的，我们可以二分得到最小的满足 $d[i-1][k]<d[i][j]$ 的下标 $k$。另一处优化是将 $\\textit{cnt}$ 改为其前缀和，并在开头填上 $0$，此时 $d[i][j]$ 对应的最长上升子序列的个数就是 $\\textit{cnt}[i-1][-1]-\\textit{cnt}[i-1][k]$，这里 $[-1]$ 表示数组的最后一个元素。\n\n```Python [sol2-Python3]\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        d, cnt = [], []\n        for v in nums:\n            i = bisect(len(d), lambda i: d[i][-1] >= v)\n            c = 1\n            if i > 0:\n                k = bisect(len(d[i - 1]), lambda k: d[i - 1][k] < v)\n                c = cnt[i - 1][-1] - cnt[i - 1][k]\n            if i == len(d):\n                d.append([v])\n                cnt.append([0, c])\n            else:\n                d[i].append(v)\n                cnt[i].append(cnt[i][-1] + c)\n        return cnt[-1][-1]\n\ndef bisect(n: int, f: Callable[[int], bool]) -> int:\n    l, r = 0, n\n    while l < r:\n        mid = (l + r) // 2\n        if f(mid):\n            r = mid\n        else:\n            l = mid + 1\n    return l\n```\n\n```C++ [sol2-C++]\nclass Solution {\n    int binarySearch(int n, function<bool(int)> f) {\n        int l = 0, r = n;\n        while (l < r) {\n            int mid = (l + r) / 2;\n            if (f(mid)) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n\npublic:\n    int findNumberOfLIS(vector<int> &nums) {\n        vector<vector<int>> d, cnt;\n        for (int v : nums) {\n            int i = binarySearch(d.size(), [&](int i) { return d[i].back() >= v; });\n            int c = 1;\n            if (i > 0) {\n                int k = binarySearch(d[i - 1].size(), [&](int k) { return d[i - 1][k] < v; });\n                c = cnt[i - 1].back() - cnt[i - 1][k];\n            }\n            if (i == d.size()) {\n                d.push_back({v});\n                cnt.push_back({0, c});\n            } else {\n                d[i].push_back(v);\n                cnt[i].push_back(cnt[i].back() + c);\n            }\n        }\n        return cnt.back().back();\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int findNumberOfLIS(int[] nums) {\n        List<List<Integer>> d = new ArrayList<List<Integer>>();\n        List<List<Integer>> cnt = new ArrayList<List<Integer>>();\n        for (int v : nums) {\n            int i = binarySearch1(d.size(), d, v);\n            int c = 1;\n            if (i > 0) {\n                int k = binarySearch2(d.get(i - 1).size(), d.get(i - 1), v);\n                c = cnt.get(i - 1).get(cnt.get(i - 1).size() - 1) - cnt.get(i - 1).get(k);\n            }\n            if (i == d.size()) {\n                List<Integer> dList = new ArrayList<Integer>();\n                dList.add(v);\n                d.add(dList);\n                List<Integer> cntList = new ArrayList<Integer>();\n                cntList.add(0);\n                cntList.add(c);\n                cnt.add(cntList);\n            } else {\n                d.get(i).add(v);\n                int cntSize = cnt.get(i).size();\n                cnt.get(i).add(cnt.get(i).get(cntSize - 1) + c);\n            }\n        }\n\n        int size1 = cnt.size(), size2 = cnt.get(size1 - 1).size();\n        return cnt.get(size1 - 1).get(size2 - 1);\n    }\n\n    public int binarySearch1(int n, List<List<Integer>> d, int target) {\n        int l = 0, r = n;\n        while (l < r) {\n            int mid = (l + r) / 2;\n            List<Integer> list = d.get(mid);\n            if (list.get(list.size() - 1) >= target) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n\n    public int binarySearch2(int n, List<Integer> list, int target) {\n        int l = 0, r = n;\n        while (l < r) {\n            int mid = (l + r) / 2;\n            if (list.get(mid) < target) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int FindNumberOfLIS(int[] nums) {\n        IList<IList<int>> d = new List<IList<int>>();\n        IList<IList<int>> cnt = new List<IList<int>>();\n        foreach (int v in nums) {\n            int i = BinarySearch1(d.Count, d, v);\n            int c = 1;\n            if (i > 0) {\n                int k = BinarySearch2(d[i - 1].Count, d[i - 1], v);\n                c = cnt[i - 1][cnt[i - 1].Count - 1] - cnt[i - 1][k];\n            }\n            if (i == d.Count) {\n                IList<int> dIList = new List<int>();\n                dIList.Add(v);\n                d.Add(dIList);\n                IList<int> cntIList = new List<int>();\n                cntIList.Add(0);\n                cntIList.Add(c);\n                cnt.Add(cntIList);\n            } else {\n                d[i].Add(v);\n                int cntSize = cnt[i].Count;\n                cnt[i].Add(cnt[i][cntSize - 1] + c);\n            }\n        }\n\n        int count1 = cnt.Count, count2 = cnt[count1 - 1].Count;\n        return cnt[count1 - 1][count2 - 1];\n    }\n\n    public int BinarySearch1(int n, IList<IList<int>> d, int target) {\n        int l = 0, r = n;\n        while (l < r) {\n            int mid = (l + r) / 2;\n            IList<int> list = d[mid];\n            if (list[list.Count - 1] >= target) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n\n    public int BinarySearch2(int n, IList<int> list, int target) {\n        int l = 0, r = n;\n        while (l < r) {\n            int mid = (l + r) / 2;\n            if (list[mid] < target) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc findNumberOfLIS(nums []int) int {\n    d := [][]int{}\n    cnt := [][]int{}\n    for _, v := range nums {\n        i := sort.Search(len(d), func(i int) bool { return d[i][len(d[i])-1] >= v })\n        c := 1\n        if i > 0 {\n            k := sort.Search(len(d[i-1]), func(k int) bool { return d[i-1][k] < v })\n            c = cnt[i-1][len(cnt[i-1])-1] - cnt[i-1][k]\n        }\n        if i == len(d) {\n            d = append(d, []int{v})\n            cnt = append(cnt, []int{0, c})\n        } else {\n            d[i] = append(d[i], v)\n            cnt[i] = append(cnt[i], cnt[i][len(cnt[i])-1]+c)\n        }\n    }\n    c := cnt[len(cnt)-1]\n    return c[len(c)-1]\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findNumberOfLIS = function(nums) {\n    const d = [];\n    const cnt = [];\n    for (const v of nums) {\n        const i = binarySearch1(d.length, d, v);\n        let c = 1;\n        if (i > 0) {\n            const k = binarySearch2(d[i - 1].length, d[i - 1], v);\n            c = cnt[i - 1][cnt[i - 1].length - 1] - cnt[i - 1][k];\n            \n            // console.log(cnt, i)\n        }\n        if (i === d.length) {\n            const dList = [];\n            dList.push(v);\n            d.push(dList);\n            const cntList = [];\n            cntList.push(0);\n            cntList.push(c);\n            cnt.push(cntList);\n        } else {\n            d[i].push(v);\n            const cntSize = cnt[i].length;\n            cnt[i].push(cnt[i][cntSize - 1] + c);\n        }\n    }\n\n    const size1 = cnt.length, size2 = cnt[size1 - 1].length;\n    return cnt[size1 - 1][size2 - 1];\n}\n\nconst binarySearch1 = (n, d, target) => {\n    let l = 0, r = n;\n    while (l < r) {\n        const mid = Math.floor((l + r) / 2);\n        const list = d[mid];\n        if (list[list.length - 1] >= target) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;\n}\n\nconst binarySearch2 = (n, list, target) => {\n    let l = 0, r = n;\n    while (l < r) {\n        const mid = Math.floor((l + r) / 2);\n        if (list[mid] < target) {\n            r = mid;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。对 $\\textit{nums}$ 中的每个元素我们需要执行至多两次二分查找，每次耗时 $O(\\log n)$，因此时间复杂度为 $O(n\\log n)$。\n\n- 空间复杂度：$O(n)$。"
}