{
	"titleSlug": "reverse-words-in-a-string",
	"slug": "fan-zhuan-zi-fu-chuan-li-de-dan-ci-by-leetcode-sol",
	"url": "https://leetcode-cn.com/problems/reverse-words-in-a-string/solution/fan-zhuan-zi-fu-chuan-li-de-dan-ci-by-leetcode-sol/",
	"content": "### 📺 视频题解  \n\n![151. 翻转字符串里的单词.mp4](ce25c066-61cc-4629-aff8-1fccdb42816d)\n\n### 📖 文字题解\n\n#### 方法一：使用语言特性\n\n**思路和算法**\n\n很多语言对字符串提供了 `split`（拆分），`reverse`（翻转）和 `join`（连接）等方法，因此我们可以简单的调用内置的 API 完成操作：\n\n1. 使用 `split` 将字符串按空格分割成字符串数组；\n2. 使用 `reverse` 将字符串数组进行反转；\n3. 使用 `join` 方法将字符串数组拼成一个字符串。\n\n![fig](https://pic.leetcode-cn.com/Figures/151/fun2.png)\n\n```Python [sol1-Python3]\nclass Solution:\n    def reverseWords(self, s: str) -> str:\n        return \" \".join(reversed(s.split()))\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String reverseWords(String s) {\n        // 除去开头和末尾的空白字符\n        s = s.trim();\n        // 正则匹配连续的空白字符作为分隔符分割\n        List<String> wordList = Arrays.asList(s.split(\"\\\\s+\"));\n        Collections.reverse(wordList);\n        return String.join(\" \", wordList);\n    }\n}\n```\n```JavaScript [sol1-JavaScript]\nvar reverseWords = function(s) {\n    return s.trim().split(/\\s+/).reverse().join(' ');\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 为输入字符串的长度。\n\n* 空间复杂度：$O(n)$，用来存储字符串分割之后的结果。\n\n#### 方法二：自行编写对应的函数\n\n**思路和算法**\n\n我们也可以不使用语言中的 API，而是自己编写对应的函数。在不同语言中，这些函数实现是不一样的，主要的差别是有些语言的字符串不可变（如 Java 和 Python)，有些语言的字符串可变（如 C++)。\n\n对于字符串不可变的语言，首先得把字符串转化成其他可变的数据结构，同时还需要在转化的过程中去除空格。\n\n![fig](https://pic.leetcode-cn.com/Figures/151/reverse_whole2.png)\n\n对于字符串可变的语言，就不需要再额外开辟空间了，直接在字符串上原地实现。在这种情况下，反转字符和去除空格可以一起完成。\n\n![fig](https://pic.leetcode-cn.com/Figures/151/mutable2.png)\n\n```Python [sol2-Python3]\nclass Solution:\n    def trim_spaces(self, s: str) -> list:\n        left, right = 0, len(s) - 1\n        # 去掉字符串开头的空白字符\n        while left <= right and s[left] == ' ':\n            left += 1\n        \n        # 去掉字符串末尾的空白字符\n        while left <= right and s[right] == ' ':\n            right -= 1\n        \n        # 将字符串间多余的空白字符去除\n        output = []\n        while left <= right:\n            if s[left] != ' ':\n                output.append(s[left])\n            elif output[-1] != ' ':\n                output.append(s[left])\n            left += 1\n        \n        return output\n            \n    def reverse(self, l: list, left: int, right: int) -> None:\n        while left < right:\n            l[left], l[right] = l[right], l[left]\n            left, right = left + 1, right - 1\n            \n    def reverse_each_word(self, l: list) -> None:\n        n = len(l)\n        start = end = 0\n        \n        while start < n:\n            # 循环至单词的末尾\n            while end < n and l[end] != ' ':\n                end += 1\n            # 翻转单词\n            self.reverse(l, start, end - 1)\n            # 更新start，去找下一个单词\n            start = end + 1\n            end += 1\n                \n    def reverseWords(self, s: str) -> str:\n        l = self.trim_spaces(s)\n        \n        # 翻转字符串\n        self.reverse(l, 0, len(l) - 1)\n        \n        # 翻转每个单词\n        self.reverse_each_word(l)\n        \n        return ''.join(l)\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public String reverseWords(String s) {\n        StringBuilder sb = trimSpaces(s);\n\n        // 翻转字符串\n        reverse(sb, 0, sb.length() - 1);\n\n        // 翻转每个单词\n        reverseEachWord(sb);\n\n        return sb.toString();\n    }\n\n    public StringBuilder trimSpaces(String s) {\n        int left = 0, right = s.length() - 1;\n        // 去掉字符串开头的空白字符\n        while (left <= right && s.charAt(left) == ' ') {\n            ++left;\n        }\n\n        // 去掉字符串末尾的空白字符\n        while (left <= right && s.charAt(right) == ' ') {\n            --right;\n        }\n\n        // 将字符串间多余的空白字符去除\n        StringBuilder sb = new StringBuilder();\n        while (left <= right) {\n            char c = s.charAt(left);\n\n            if (c != ' ') {\n                sb.append(c);\n            } else if (sb.charAt(sb.length() - 1) != ' ') {\n                sb.append(c);\n            }\n\n            ++left;\n        }\n        return sb;\n    }\n\n    public void reverse(StringBuilder sb, int left, int right) {\n        while (left < right) {\n            char tmp = sb.charAt(left);\n            sb.setCharAt(left++, sb.charAt(right));\n            sb.setCharAt(right--, tmp);\n        }\n    }\n\n    public void reverseEachWord(StringBuilder sb) {\n        int n = sb.length();\n        int start = 0, end = 0;\n\n        while (start < n) {\n            // 循环至单词的末尾\n            while (end < n && sb.charAt(end) != ' ') {\n                ++end;\n            }\n            // 翻转单词\n            reverse(sb, start, end - 1);\n            // 更新start，去找下一个单词\n            start = end + 1;\n            ++end;\n        }\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    string reverseWords(string s) {\n        // 反转整个字符串\n        reverse(s.begin(), s.end());\n\n        int n = s.size();\n        int idx = 0;\n        for (int start = 0; start < n; ++start) {\n            if (s[start] != ' ') {\n                // 填一个空白字符然后将idx移动到下一个单词的开头位置\n                if (idx != 0) s[idx++] = ' ';\n\n                // 循环遍历至单词的末尾\n                int end = start;\n                while (end < n && s[end] != ' ') s[idx++] = s[end++];\n\n                // 反转整个单词\n                reverse(s.begin() + idx - (end - start), s.begin() + idx);\n\n                // 更新start，去找下一个单词\n                start = end;\n            }\n        }\n        s.erase(s.begin() + idx, s.end());\n        return s;\n    }\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 为输入字符串的长度。\n\n* 空间复杂度：`Java` 和 `Python` 的方法需要 $O(n)$ 的空间来存储字符串，而 `C++` 方法只需要 $O(1)$ 的额外空间来存放若干变量。\n\n#### 方法三：双端队列\n\n**思路和算法**\n\n由于双端队列支持从队列头部插入的方法，因此我们可以沿着字符串一个一个单词处理，然后将单词压入队列的头部，再将队列转成字符串即可。\n\n![fig](https://pic.leetcode-cn.com/Figures/151/deque2.png)\n\n```Python [sol3-Python3]\nclass Solution:\n    def reverseWords(self, s: str) -> str:\n        left, right = 0, len(s) - 1\n        # 去掉字符串开头的空白字符\n        while left <= right and s[left] == ' ':\n            left += 1\n        \n        # 去掉字符串末尾的空白字符\n        while left <= right and s[right] == ' ':\n            right -= 1\n            \n        d, word = collections.deque(), []\n        # 将单词 push 到队列的头部\n        while left <= right:\n            if s[left] == ' ' and word:\n                d.appendleft(''.join(word))\n                word = []\n            elif s[left] != ' ':\n                word.append(s[left])\n            left += 1\n        d.appendleft(''.join(word))\n        \n        return ' '.join(d)\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public String reverseWords(String s) {\n        int left = 0, right = s.length() - 1;\n        // 去掉字符串开头的空白字符\n        while (left <= right && s.charAt(left) == ' ') {\n            ++left;\n        }\n\n        // 去掉字符串末尾的空白字符\n        while (left <= right && s.charAt(right) == ' ') {\n            --right;\n        }\n\n        Deque<String> d = new ArrayDeque<String>();\n        StringBuilder word = new StringBuilder();\n        \n        while (left <= right) {\n            char c = s.charAt(left);\n            if ((word.length() != 0) && (c == ' ')) {\n                // 将单词 push 到队列的头部\n                d.offerFirst(word.toString());\n                word.setLength(0);\n            } else if (c != ' ') {\n                word.append(c);\n            }\n            ++left;\n        }\n        d.offerFirst(word.toString());\n\n        return String.join(\" \", d);\n    }\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    string reverseWords(string s) {\n        int left = 0, right = s.size() - 1;\n        // 去掉字符串开头的空白字符\n        while (left <= right && s[left] == ' ') ++left;\n\n        // 去掉字符串末尾的空白字符\n        while (left <= right && s[right] == ' ') --right;\n\n        deque<string> d;\n        string word;\n\n        while (left <= right) {\n            char c = s[left];\n            if (word.size() && c == ' ') {\n                // 将单词 push 到队列的头部\n                d.push_front(move(word));\n                word = \"\";\n            }\n            else if (c != ' ') {\n                word += c;\n            }\n            ++left;\n        }\n        d.push_front(move(word));\n        \n        string ans;\n        while (!d.empty()) {\n            ans += d.front();\n            d.pop_front();\n            if (!d.empty()) ans += ' ';\n        }\n        return ans;\n    }\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 为输入字符串的长度。\n\n* 空间复杂度：$O(n)$，双端队列存储单词需要 $O(n)$ 的空间。"
}