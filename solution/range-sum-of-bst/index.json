{
	"titleSlug": "range-sum-of-bst",
	"slug": "er-cha-sou-suo-shu-de-fan-wei-he-by-leet-rpq7",
	"url": "https://leetcode-cn.com/problems/range-sum-of-bst/solution/er-cha-sou-suo-shu-de-fan-wei-he-by-leet-rpq7/",
	"content": "#### 方法一：深度优先搜索\n\n**思路**\n\n按深度优先搜索的顺序计算范围和。记当前子树根节点为 $\\textit{root}$，分以下四种情况讨论：\n\n1. $\\textit{root}$ 节点为空\n\n   返回 $0$。\n\n2. $\\textit{root}$ 节点的值大于 $\\textit{high}$\n\n   由于二叉搜索树右子树上所有节点的值均大于根节点的值，即均大于 $\\textit{high}$，故无需考虑右子树，返回左子树的范围和。\n\n3. $\\textit{root}$ 节点的值小于 $\\textit{low}$\n\n   由于二叉搜索树左子树上所有节点的值均小于根节点的值，即均小于 $\\textit{low}$，故无需考虑左子树，返回右子树的范围和。\n\n4. $\\textit{root}$ 节点的值在 $[\\textit{low},\\textit{high}]$ 范围内\n\n   此时应返回 $\\textit{root}$ 节点的值、左子树的范围和、右子树的范围和这三者之和。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int rangeSumBST(TreeNode *root, int low, int high) {\n        if (root == nullptr) {\n            return 0;\n        }\n        if (root->val > high) {\n            return rangeSumBST(root->left, low, high);\n        }\n        if (root->val < low) {\n            return rangeSumBST(root->right, low, high);\n        }\n        return root->val + rangeSumBST(root->left, low, high) + rangeSumBST(root->right, low, high);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int rangeSumBST(TreeNode root, int low, int high) {\n        if (root == null) {\n            return 0;\n        }\n        if (root.val > high) {\n            return rangeSumBST(root.left, low, high);\n        }\n        if (root.val < low) {\n            return rangeSumBST(root.right, low, high);\n        }\n        return root.val + rangeSumBST(root.left, low, high) + rangeSumBST(root.right, low, high);\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc rangeSumBST(root *TreeNode, low, high int) int {\n    if root == nil {\n        return 0\n    }\n    if root.Val > high {\n        return rangeSumBST(root.Left, low, high)\n    }\n    if root.Val < low {\n        return rangeSumBST(root.Right, low, high)\n    }\n    return root.Val + rangeSumBST(root.Left, low, high) + rangeSumBST(root.Right, low, high)\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar rangeSumBST = function(root, low, high) {\n    if (!root) {\n        return 0;\n    }\n    if (root.val > high) {\n        return rangeSumBST(root.left, low, high);\n    }\n    if (root.val < low) {\n        return rangeSumBST(root.right, low, high);\n    }\n    return root.val + rangeSumBST(root.left, low, high) + rangeSumBST(root.right, low, high);\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def rangeSumBST(self, root: TreeNode, low: int, high: int) -> int:\n        if not root:\n            return 0\n        if root.val > high:\n            return self.rangeSumBST(root.left, low, high)\n        if root.val < low:\n            return self.rangeSumBST(root.right, low, high)\n        return root.val + self.rangeSumBST(root.left, low, high) + self.rangeSumBST(root.right, low, high)\n```\n\n```C [sol1-C]\nint rangeSumBST(struct TreeNode *root, int low, int high) {\n    if (root == NULL) {\n        return 0;\n    }\n    if (root->val > high) {\n        return rangeSumBST(root->left, low, high);\n    }\n    if (root->val < low) {\n        return rangeSumBST(root->right, low, high);\n    }\n    return root->val + rangeSumBST(root->left, low, high) + rangeSumBST(root->right, low, high);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉搜索树的节点数。\n\n- 空间复杂度：$O(n)$。空间复杂度主要取决于栈空间的开销。\n\n#### 方法二：广度优先搜索\n\n**思路**\n\n使用广度优先搜索的方法，用一个队列 $q$ 存储需要计算的节点。每次取出队首节点时，若节点为空则跳过该节点，否则按方法一中给出的大小关系来决定加入队列的子节点。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int rangeSumBST(TreeNode *root, int low, int high) {\n        int sum = 0;\n        queue<TreeNode*> q({root});\n        while (!q.empty()) {\n            auto node = q.front();\n            q.pop();\n            if (node == nullptr) {\n                continue;\n            }\n            if (node->val > high) {\n                q.push(node->left);\n            } else if (node->val < low) {\n                q.push(node->right);\n            } else {\n                sum += node->val;\n                q.push(node->left);\n                q.push(node->right);\n            }\n        }\n        return sum;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int rangeSumBST(TreeNode root, int low, int high) {\n        int sum = 0;\n        Queue<TreeNode> q = new LinkedList<TreeNode>();\n        q.offer(root);\n        while (!q.isEmpty()) {\n            TreeNode node = q.poll();\n            if (node == null) {\n                continue;\n            }\n            if (node.val > high) {\n                q.offer(node.left);\n            } else if (node.val < low) {\n                q.offer(node.right);\n            } else {\n                sum += node.val;\n                q.offer(node.left);\n                q.offer(node.right);\n            }\n        }\n        return sum;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc rangeSumBST(root *TreeNode, low, high int) (sum int) {\n    q := []*TreeNode{root}\n    for len(q) > 0 {\n        node := q[0]\n        q = q[1:]\n        if node == nil {\n            continue\n        }\n        if node.Val > high {\n            q = append(q, node.Left)\n        } else if node.Val < low {\n            q = append(q, node.Right)\n        } else {\n            sum += node.Val\n            q = append(q, node.Left, node.Right)\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar rangeSumBST = function(root, low, high) {\n    let sum = 0;\n    const q = [root];\n    while (q.length) {\n        const node = q.shift();\n        if (!node) {\n            continue;\n        }\n        if (node.val > high) {\n            q.push(node.left);\n        } else if (node.val < low) {\n            q.push(node.right);\n        } else {\n            sum += node.val;\n            q.push(node.left);\n            q.push(node.right);\n        }\n    }\n    return sum;\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def rangeSumBST(self, root: TreeNode, low: int, high: int) -> int:\n        total = 0\n        q = collections.deque([root])\n        while q:\n            node = q.popleft()\n            if not node:\n                continue\n            if node.val > high:\n                q.append(node.left)\n            elif node.val < low:\n                q.append(node.right)\n            else:\n                total += node.val\n                q.append(node.left)\n                q.append(node.right)\n\n        return total\n```\n\n```C [sol2-C]\nint rangeSumBST(struct TreeNode *root, int low, int high) {\n    int sum = 0;\n    struct TreeNode *q[40000];\n    int left = 0, right = 0;\n    q[right++] = root;\n    while (left < right) {\n        struct TreeNode *node = q[left++];\n        if (node == NULL) {\n            continue;\n        }\n        if (node->val > high) {\n            q[right++] = node->left;\n        } else if (node->val < low) {\n            q[right++] = node->right;\n        } else {\n            sum += node->val;\n            q[right++] = node->left;\n            q[right++] = node->right;\n        }\n    }\n    return sum;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是二叉搜索树的节点数。\n\n- 空间复杂度：$O(n)$。空间复杂度主要取决于队列的空间。\n\n---\n# [📚 好读书？读好书！让时间更有价值| 世界读书日](https://leetcode-cn.com/circle/discuss/12QtuI/)\n4 月 22 日至 4 月 28 日，进入「[学习](https://leetcode-cn.com/leetbook/)」，完成页面右上角的「让时间更有价值」限时阅读任务，可获得「2021 读书日纪念勋章」。更多活动详情戳上方标题了解更多👆\n#### 今日学习任务：\n- 图解背包问题\n[完成阅读 9.1 背包问题](https://leetcode-cn.com/leetbook/read/grokking-algorithms/raw9o5/)\n- 图解背包问题 FAQ\n[完成阅读 9.2 背包问题 FAQ](https://leetcode-cn.com/leetbook/read/grokking-algorithms/radh96/)"
}