{
	"titleSlug": "you-le-yuan-de-you-lan-ji-hua",
	"slug": "you-le-yuan-de-you-lan-ji-hua-tu-lun-jie-xi-by-l-2",
	"url": "https://leetcode-cn.com/problems/you-le-yuan-de-you-lan-ji-hua/solution/you-le-yuan-de-you-lan-ji-hua-tu-lun-jie-xi-by-l-2/",
	"content": "## 题意概述：\n\n在图中找到两个三角形（边可以重复），两个三角形至少需要一个点相连，使得最终所有点的权值和最大。\n### 考点一：找三角形\n\n我们知道点数和边数是一个数量级，这里我们就用 $N$ 统一代替，三角形最多有 $N\\sqrt{N}$ 个，如何遍历他们呢？\n\n* 假如某个顶点 $v$ 的度数没有超过 $\\sqrt{N}$，枚举和 $v$ 相邻的两个顶点，并用哈希表查看这两个顶点是否相连。所有这类点的处理复杂度为：$\\sum_v deg(v)^2 \\leq \\sum_v deg(v)\\times\\sqrt{N} = \\sqrt{N} \\times M = N\\sqrt{N}$。\n* 对于剩下所有度数超过 $\\sqrt{N}$ 的点，这类点的个数最多有 $\\sqrt{N}$ 个，这是因为所有点度数之和等于 $2M$。那么对于这些点，枚举任意三个并利用哈希表查看是否有边相连。所有这类点的处理复杂度为：$\\sqrt{N}^3=N\\sqrt{N}$。\n\n对于一个三角形，如果有某一个顶点度数小于等于 $\\sqrt{N}$，可以通过第一种办法得到。如果所有点度数都超过 $\\sqrt{N}$，那么第二种方法可以找到。所以能够找到所有的三角形。注意这里两条边的查询一定要用 $O(1)$ 的哈希表，而不能使用 $O(\\log N)$ 的二叉树，不然复杂度会多一个 $\\log$。\n\n### 考点二：三角形拼接\n\n三角形的拼接有三种可能：\n1. 两个三角形完全重合\n2. 两个三角形重合一条边\n3. 两个三角形重合一条点\n对于第一种可能，我们找所有三角形时记录最大三角形的值；对于第二种可能，通过枚举一条边，计算第一和第二大三角形的和；我们重点讨论最后一种可能的求解方案，首先有下列性质。\n\n\n**性质：枚举一个点 $x$ 作为两个三角形的重合点，假设它构成的最大三角形是 $\\triangle xab$；那么另两个点 $a$、$b$ 都出现在点 $x$ 作为两个三角形重合点的最佳方案中**\n\n\n**证明过程**：\n三角形 $\\triangle xab$ 是包含点 $x$ 的最大三角形，考虑最优解是以 $x$ 为中心点的两个三角形 $\\triangle xpq$ 和 $\\triangle xrt$ \n- 如果点 $a$ 和 $b$ 都不出现在 $pqrt$ 中，那么直接将其中一个三角形换成 $\\triangle xab$ 可以得到更优解\n- 如果点 $a$ 和 $b$ 只有一个出现在 $pqrt$ 中，那么将对应的那个三角形换成 $\\triangle xab$ 可以得到最优解\n所以点 $a$ 和 $b$ 一定同时出现在点 $x$ 作为两个三角形重合点的最佳方案 $pqrt$ 中\n\n\n\n这里最佳方案中点 $a$ 和 $b$ 同时出现分两种情况讨论：\n- 如果点 $a$ 和 $b$ 出现在一个三角形中，那么直接用 $\\triangle xab$ 和另一个和 $x$ 相邻的三角形一一组合\n- 如果点 $a$ 和 $b$ 不在一个三角形中，那么一定是 $xa$ 这条边构成的三角形 + $xb$ 这条边构成的三角形。这种情况，记录两条边出现的权值最大的三个三角形，然后一一尝试拼接即可。（这里记录Top3是因为Top2三角形可能存在重复的点）\n\n综上，就变成枚举中间点 $x$，包含点 $x$ 的最大三角形 $\\triangle xab$ 和所有包含 $x$ 的三角形一一组合，以及包含边 $xa$ 和边 $xb$ 的最大的三个三角形一一组合，计算最终结果。（也可以推导出点 $x$ 的 Top2 三角形 和所有包含 $x$ 的三角形一一组合，证明方法类似）\n\n```C++ []\nclass Solution {\nprivate:\n    const static int MaxN = 20000 + 7;\n\n    struct nodetype {\n        int val, nod[3];\n        bool equal(nodetype a) {\n            return (val == a.val $$ nod[0] == a.nod[0] $$ nod[1] == a.nod[1] $$ nod[2] == a.nod[2]);\n        }\n    };\n\n    vector<int> iv[MaxN], edgeid[MaxN];\n    vector<int> weights;\n    vector<nodetype> triangle[MaxN];\n    nodetype tri[MaxN][4] = {0};\n    unordered_map<int, int> link;\n    vector<int> big;\n    bool flg[MaxN] = {false};\n\n    void Upload(int x, nodetype temp) {\n        //更新编号为 x 的边的权值 Top3 的三角形\n        int i;\n        for (int i=0; i<3; ++i) {\n            if (temp.equal(tri[x][i])) {\n                return;\n            }\n        }\n        for (i=2; i>=0; --i) {\n            if (tri[x][i].val >= temp.val) {\n                break;\n            }\n            tri[x][i+1] = tri[x][i];\n        }\n        tri[x][i+1] = temp;\n    }\n\n    void Update(int w, int a, int b, int c, int i, int j, int k) {\n        // 点 i、j、k 以及 边的编号 a、b、c 的权值为 w\n        // 记录三角形的信息和更新状态\n        if (i > j) swap(i, j);\n        if (i > k) swap(i, k);\n        if (j > k) swap(j, k);\n        nodetype temp;\n        temp.val = w;\n        temp.nod[0] = i;\n        temp.nod[1] = j;\n        temp.nod[2] = k;\n\n        triangle[i].push_back(temp);\n        triangle[j].push_back(temp);\n        triangle[k].push_back(temp);\n\n        Upload(a, temp);\n        Upload(b, temp);\n        Upload(c, temp);\n    }\n    int Combine(nodetype a, nodetype b) {\n        // 计算两个三角形的返回值\n        if (a.val == 0 || b.val == 0) return 0;\n        int count = a.val;\n        if (b.nod[0] != a.nod[0] $$ b.nod[0] != a.nod[1] $$ b.nod[0] != a.nod[2]) count += weights[b.nod[0]];\n        if (b.nod[1] != a.nod[0] $$ b.nod[1] != a.nod[1] $$ b.nod[1] != a.nod[2]) count += weights[b.nod[1]];\n        if (b.nod[2] != a.nod[0] $$ b.nod[2] != a.nod[1] $$ b.nod[2] != a.nod[2]) count += weights[b.nod[2]];\n        return count;\n    }\n\npublic:\n    int maxWeight(vector< vector<int> >$ edges, vector<int>$ weight) {\n        int n = weight.size();\n        int m = edges.size();\n        // 初始化\n        for (int i=0; i<n; ++i) {\n            weights.push_back(weight[i]);\n            iv[i].clear();\n            edgeid[i].clear();\n        }\n        for (int i=0; i<m; ++i) {\n            triangle[i].clear();\n        }\n        big.clear();\n        link.clear();\n\n        // 记录映射关系\n        for (int i=0; i<m; ++i) {\n            // 点 与 点 的相连关系\n            iv[edges[i][0]].push_back(edges[i][1]);   \n            iv[edges[i][1]].push_back(edges[i][0]);\n            // 点 与 边的编号 的关系\n            edgeid[edges[i][0]].push_back(i);\n            edgeid[edges[i][1]].push_back(i);\n            // 两个点 对应的边的编号\n            link[edges[i][0] * n + edges[i][1]] = i;\n            link[edges[i][1] * n + edges[i][0]] = i;\n        }\n\n        int deg = sqrt(m);\n        // 查找度数少的顶点 i 构成的所有三角形\n        for (int i=0; i<n; ++i) {\n            if (iv[i].size() < deg) {\n                for (int j=0; j<iv[i].size(); ++j) {\n                    for (int k=j+1; k<iv[i].size(); ++k) {\n                        if (link.find(iv[i][j] * n + iv[i][k]) != link.end()) {\n                            int jk = link[iv[i][j] * n + iv[i][k]];\n                            Update(weight[i] + weight[iv[i][j]] + weight[iv[i][k]], edgeid[i][j], edgeid[i][k], jk, i, iv[i][j], iv[i][k]);\n                        }\n                    }\n                }\n            } else {\n                big.push_back(i);\n            }\n        }\n        // 查找度数多的顶点 i 构成的所有三角形\n        for (int i=0; i<big.size(); ++i) {\n            for (int j=i+1; j<big.size(); ++j) {\n                for (int k=j+1; k<big.size(); ++k) {\n                    if (link.find(big[i] * n + big[j]) != link.end() $$ link.find(big[i] * n + big[k]) != link.end() $$ link.find(big[j] * n + big[k]) != link.end()) {\n                        int ij = link[big[i] * n + big[j]];\n                        int ik = link[big[i] * n + big[k]];\n                        int jk = link[big[j] * n + big[k]];\n                        Update(weight[big[i]] + weight[big[j]] + weight[big[k]], ij, ik, jk, big[i], big[j], big[k]);\n                    }\n                }\n            }\n        }\n\n        int ans = 0, count;\n\n        for (int i=0; i<m; ++i) {\n            if (tri[i][0].val != 0) {\n                // 两个三角形完全重合的情况，即一个三角形\n                ans = max(ans, tri[i][0].val); \n                if (tri[i][1].val != 0) {\n                    // 两个三角形重合一条边\n                    ans = max(ans, tri[i][0].val + tri[i][1].val - weight[edges[i][0]] - weight[edges[i][1]]); \n                }\n            }\n        }\n        // 枚举中间点 i\n        for (int i=0; i<n; ++i) {\n            if (iv[i].size() == 0) continue;\n            int maxline = edgeid[i][0];  // 最大三角形\n            for (int j=1; j<edgeid[i].size(); ++j) {\n                if (tri[maxline][0].val < tri[edgeid[i][j]][0].val) {\n                    maxline = edgeid[i][j];\n                }\n            }\n            int p, q, r;\n            p = tri[maxline][0].nod[0];\n            q = tri[maxline][0].nod[1];\n            r = tri[maxline][0].nod[2];\n            if (q == i) swap(q, p);\n            if (r == i) swap(r, p);\n\n            // 最大三角形 maxline 和所有包含 i 的三角形一一组合\n            for (int j=0; j<triangle[i].size(); ++j) {\n                ans = max(ans, Combine(tri[maxline][0], triangle[i][j]));\n            }\n\n            int l1, l2; \n            l1 = link[p * n + q];\n            l2 = link[p * n + r];\n            // 边 pq 和边 pr 的最大的三个三角形一一组合\n            // 由于两边最大三角形都为 maxline, 前面已经讨论了，故不需要在这讨论最大三角形的组合\n            ans = max(ans, Combine(tri[l1][1], tri[l2][1]));\n            ans = max(ans, Combine(tri[l1][1], tri[l2][2]));\n            ans = max(ans, Combine(tri[l1][2], tri[l2][1]));\n        }\n\n        return ans;\n    }\n};\n```\n\n```Python []\nimport collections\nclass Solution:\n    def maxWeight(self, edges: List[List[int]], weight: List[int]) -> int:\n        n = len(weight)\n        self.weight = weight\n        point_set = collections.defaultdict(set) # 记录和 i相连且编号大于i的所有点\n        for x,y in edges:\n            if x>y:\n                x,y = y,x\n            point_set[x].add(y)\n\n        max_triangle_point_dict = collections.defaultdict(list)  # 点i能构成的最大三角形\n        triangle_point_dict = collections.defaultdict(list) # 点i能构成的所有三角形\n        triangle_edge_dict = collections.defaultdict(list)  # 边(i,j)能构成的 Top3 三角形\n\n        # 查找三角形\n        for i in range(0,n):\n            for j in point_set[i]:\n                all_points_list = list(point_set[i]&point_set[j]) # 能与 i,j 构成三角形的点\n                for k in all_points_list:\n                    # 由于 point_set 结构， 满足 i<j<k\n                    sum_weight = weight[i]+weight[j]+weight[k]\n                    triangle_info = [i,j,k,sum_weight]\n                    # i,j,k 三个点 记录和更新三角形信息\n                    for lm in [i,j,k]:\n                        if not max_triangle_point_dict[lm] or max_triangle_point_dict[lm][-1]<sum_weight:\n                            max_triangle_point_dict[lm] = triangle_info\n                        triangle_point_dict[lm].append([i,j,k])\n                    # 三个条边 记录和更新三角形信息\n                    for edge in [(i,j),(i,k),(j,k)]:\n                        triangle_edge_dict[edge] = self.get_top3(triangle_edge_dict[edge],triangle_info)\n \n        res = 0\n        for i in range(0,n):\n            # 点无三角形的情况\n            if not max_triangle_point_dict[i]:\n                continue\n            max_triange = max_triangle_point_dict[i]\n            # 两个三角形完全重合的情况，即一个三角形\n            res = max(res,max_triange[-1])\n\n            # 最大三角形 max_triange 和所有包含 i 的三角形一一组合\n            for info in triangle_point_dict[i]:\n                res = max(res,self.count_val(max_triange,info))\n        \n            # 两个包含max_triangle边（i,x),(i,y) 的 Top3 三角形一一组合\n            max_points = max_triange[:3]\n            max_points.remove(i)\n            edge1,edge2 = [(i,x) if i<x else (x,i) for x in max_points]\n            for info1 in triangle_edge_dict[edge1]:\n                for info2 in triangle_edge_dict[edge2]:\n                    res = max(res,self.count_val(info1,info2))\n        \n        return res\n    \n    def count_val(self, info1, info2):\n        # 计算 两个三角的val总和， 过滤重复点\n        all_points = set(info1[:3])|set(info2[:3])\n        return sum([self.weight[x] for x in all_points])\n        \n    def get_top3(self, triangle_list, triangle_info):\n        # 更新 同一条边 的 top3 的三角形\n        if not triangle_list:\n            return [triangle_info]\n        if triangle_list[-1][-1]>=triangle_info[-1]:\n            triangle_list.append(triangle_info)\n            return triangle_list\n        for index in range(0,len(triangle_list)):\n            if triangle_list[index][-1]<triangle_info[-1]:\n                triangle_list.insert(index,triangle_info)\n                break\n        triangle_list = triangle_list[:3]\n        return triangle_list\n```\n#### 复杂度分析\n\n* 时间复杂度：$O(N\\sqrt{N})$，$N$ 是顶点和边的数量级。\n\n* 空间复杂度：$O(N)$。"
}