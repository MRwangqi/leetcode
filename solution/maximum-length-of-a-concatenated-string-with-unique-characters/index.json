{
	"titleSlug": "maximum-length-of-a-concatenated-string-with-unique-characters",
	"slug": "chuan-lian-zi-fu-chuan-de-zui-da-chang-d-g6gk",
	"url": "https://leetcode-cn.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/solution/chuan-lian-zi-fu-chuan-de-zui-da-chang-d-g6gk/",
	"content": "#### 方法一：回溯 + 位运算\n\n我们需要计算可行解的长度，至于可行解具体是什么，以及可行解中各个字符的顺序我们是不用考虑的。因此构成可行解的每个字符串均可以视作一个字符集合，且集合不含重复元素。\n\n由于构成可行解的字符串仅包含小写字母，且无重复元素，我们可以用一个二进制数来表示该字符串的字符集合，二进制的第 $i$ 位为 $1$ 表示字符集合中含有第 $i$ 个小写字母，为 $0$ 表示字符集合中不含有第 $i$ 个小写字母。\n\n由于包含重复字母的字符串无法参与构成可行解，因此遍历 $\\textit{arr}$，从中筛选出无重复字母的字符串，将其对应二进制数加入一数组，记作 $\\textit{masks}$。\n\n接下来，使用回溯法来解决本问题：\n\n- 我们用 $\\text{backtrack}(\\textit{pos}, \\textit{mask})$ 表示递归的函数，其中 $\\textit{pos}$ 表示我们当前递归到了数组 $\\textit{masks}$ 中的第 $\\textit{pos}$ 个数，$\\textit{mask}$ 表示当前连接得到的字符串对应二进制数为 $\\textit{mask}$；\n\n- 对于第 $\\textit{pos}$ 个数，我们有两种方法：选或者不选。如果 $\\textit{mask}$ 和 $\\textit{masks}[\\textit{pos}]$ 无公共元素，则可以选这个数，此时我们调用 $\\text{backtrack}(\\textit{pos}+1, \\textit{mask}\\ |\\ \\textit{masks}[\\textit{pos}])$ 进行递归。如果我们不选这个数，那么我们调用 $\\text{backtrack}(\\textit{pos}+1, \\textit{mask})$ 进行递归。\n\n- 记 $\\textit{masks}$ 的长度为 $n$，当 $\\textit{pos}=n$ 时，计算 $\\textit{mask}$ 中 $1$ 的个数，即为可行解的长度，用其更新可行解的最长长度。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxLength(vector<string> &arr) {\n        vector<int> masks;\n        for (string &s : arr) {\n            int mask = 0;\n            for (char ch : s) {\n                ch -= 'a';\n                if ((mask >> ch) & 1) { // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                    mask = 0;\n                    break;\n                }\n                mask |= 1 << ch; // 将 ch 加入 mask 中\n            }\n            if (mask > 0) {\n                masks.push_back(mask);\n            }\n        }\n\n        int ans = 0;\n        function<void(int, int)> backtrack = [&](int pos, int mask) {\n            if (pos == masks.size()) {\n                ans = max(ans, __builtin_popcount(mask));\n                return;\n            }\n            if ((mask & masks[pos]) == 0) { // mask 和 masks[pos] 无公共元素\n                backtrack(pos + 1, mask | masks[pos]);\n            }\n            backtrack(pos + 1, mask);\n        };\n        backtrack(0, 0);\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    int ans = 0;\n\n    public int maxLength(List<String> arr) {\n        List<Integer> masks = new ArrayList<Integer>();\n        for (String s : arr) {\n            int mask = 0;\n            for (int i = 0; i < s.length(); ++i) {\n                int ch = s.charAt(i) - 'a';\n                if (((mask >> ch) & 1) != 0) { // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                    mask = 0;\n                    break;\n                }\n                mask |= 1 << ch; // 将 ch 加入 mask 中\n            }\n            if (mask > 0) {\n                masks.add(mask);\n            }\n        }\n\n        backtrack(masks, 0, 0);\n        return ans;\n    }\n\n    public void backtrack(List<Integer> masks, int pos, int mask) {\n        if (pos == masks.size()) {\n            ans = Math.max(ans, Integer.bitCount(mask));\n            return;\n        }\n        if ((mask & masks.get(pos)) == 0) { // mask 和 masks[pos] 无公共元素\n            backtrack(masks, pos + 1, mask | masks.get(pos));\n        }\n        backtrack(masks, pos + 1, mask);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    int ans = 0;\n\n    public int MaxLength(IList<string> arr) {\n        IList<int> masks = new List<int>();\n        foreach (string s in arr) {\n            int mask = 0;\n            foreach (char c in s) {\n                int ch = c - 'a';\n                if (((mask >> ch) & 1) != 0) { // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                    mask = 0;\n                    break;\n                }\n                mask |= 1 << ch; // 将 ch 加入 mask 中\n            }\n            if (mask > 0) {\n                masks.Add(mask);\n            }\n        }\n\n        Backtrack(masks, 0, 0);\n        return ans;\n    }\n\n    public void Backtrack(IList<int> masks, int pos, int mask) {\n        if (pos == masks.Count) {\n            ans = Math.Max(ans, BitCount(mask));\n            return;\n        }\n        if ((mask & masks[pos]) == 0) { // mask 和 masks[pos] 无公共元素\n            Backtrack(masks, pos + 1, mask | masks[pos]);\n        }\n        Backtrack(masks, pos + 1, mask);\n    }\n\n    private static int BitCount(int i) {\n        i = i - ((i >> 1) & 0x55555555);\n        i = (i & 0x33333333) + ((i >> 2) & 0x33333333);\n        i = (i + (i >> 4)) & 0x0f0f0f0f;\n        i = i + (i >> 8);\n        i = i + (i >> 16);\n        return i & 0x3f;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc maxLength(arr []string) (ans int) {\n    masks := []int{}\nouter:\n    for _, s := range arr {\n        mask := 0\n        for _, ch := range s {\n            ch -= 'a'\n            if mask>>ch&1 > 0 { // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                continue outer\n            }\n            mask |= 1 << ch // 将 ch 加入 mask 中\n        }\n        masks = append(masks, mask)\n    }\n\n    var backtrack func(int, int)\n    backtrack = func(pos, mask int) {\n        if pos == len(masks) {\n            ans = max(ans, bits.OnesCount(uint(mask)))\n            return\n        }\n        if mask&masks[pos] == 0 { // mask 和 masks[pos] 无公共元素\n            backtrack(pos+1, mask|masks[pos])\n        }\n        backtrack(pos+1, mask)\n    }\n    backtrack(0, 0)\n    return\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol1-C]\nint ans;\n\nvoid backtrack(int* masks, int masksSize, int pos, int mask) {\n    if (pos == masksSize) {\n        ans = fmax(ans, __builtin_popcount(mask));\n        return;\n    }\n    if ((mask & masks[pos]) == 0) {  // mask 和 masks[pos] 无公共元素\n        backtrack(masks, masksSize, pos + 1, mask | masks[pos]);\n    }\n    backtrack(masks, masksSize, pos + 1, mask);\n}\n\nint maxLength(char** arr, int arrSize) {\n    ans = 0;\n    int masks[arrSize];\n    int masksSize = 0;\n    for (int i = 0; i < arrSize; ++i) {\n        int mask = 0;\n        int len = strlen(arr[i]);\n        for (int j = 0; j < len; ++j) {\n            int ch = arr[i][j] - 'a';\n            if (((mask >> ch) & 1) != 0) {  // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                mask = 0;\n                break;\n            }\n            mask |= 1 << ch;  // 将 ch 加入 mask 中\n        }\n        if (mask > 0) {\n            masks[masksSize++] = mask;\n        }\n    }\n\n    backtrack(masks, masksSize, 0, 0);\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar maxLength = function(arr) {\n    let ans = 0;\n    const masks = [];\n    for (const s of arr) {\n        let mask = 0;\n        for (let i = 0; i < s.length; ++i) {\n            const ch = s[i].charCodeAt() - 'a'.charCodeAt();\n            if (((mask >> ch) & 1) !== 0) { // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                mask = 0;\n                break;\n            }\n            mask |= 1 << ch; // 将 ch 加入 mask 中\n        }\n        if (mask > 0) {\n            masks.push(mask);\n        }\n    }\n\n    const backtrack = (masks, pos, mask) => {\n        if (pos === masks.length) {\n            ans = Math.max(ans, mask.toString(2).split('0').join('').length);\n            return;\n        }\n        if ((mask & masks[pos]) === 0) { // mask 和 masks[pos] 无公共元素\n            backtrack(masks, pos + 1, mask | masks[pos]);\n        }\n        backtrack(masks, pos + 1, mask);\n    }\n\n    backtrack(masks, 0, 0);\n    return ans;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxLength(self, arr: List[str]) -> int:\n        masks = list()\n        for s in arr:\n            mask = 0\n            for ch in s:\n                idx = ord(ch) - ord(\"a\")\n                if ((mask >> idx) & 1):   # // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                    mask = 0\n                    break\n                mask |= 1 << idx   # 将 ch 加入 mask 中\n            if mask > 0:\n                masks.append(mask)\n\n        ans = 0\n\n        def backtrack(pos: int, mask: int) -> None:\n            if pos == len(masks):\n                nonlocal ans\n                ans = max(ans, bin(mask).count(\"1\"))\n                return\n            \n            if (mask & masks[pos]) == 0:   # mask 和 masks[pos] 无公共元素\n                backtrack(pos + 1, mask | masks[pos])\n            backtrack(pos + 1, mask)\n        \n        backtrack(0, 0)\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(|\\Sigma|+2^n)$。其中 $|\\Sigma|$ 是 $\\textit{arr}$ 中所有字符串的长度之和，$n$ 是 $\\textit{arr}$ 的长度。遍历所有字符串需要 $O(|\\Sigma|)$，回溯时由于每个元素有选或不选两种情况，最坏情况下会有 $2^n$ 种组合方式。因此总的时间复杂度为 $O(|\\Sigma|+2^n)$。\n\n- 空间复杂度：$O(n)$。\n\n#### 方法二：迭代 + 位运算\n\n我们可以遍历 $\\textit{arr}$，维护前 $i$ 个字符串构成的可行解集合，记作 $\\textit{masks}$。初始时，可行解集合仅包含一个空字符串。\n\n若 $\\textit{arr}[i+1]$ 中无重复字符，则将其与 $\\textit{masks}$ 中的字符串连接，若连接后仍无重复字符，则将连接后的新字符串加入到 $\\textit{masks}$ 中，这样我们就得到了前 $i+1$ 个字符串构成的可行解集合。\n\n遍历结束后，$\\textit{masks}$ 即为 $\\textit{arr}$ 构成的所有可行解，求出其中最长的可行解，即为答案。\n\n代码实现时，我们沿用方法一，用二进制数表示字符串，并在得到新字符串的同时更新可行解长度最大值。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxLength(vector<string> &arr) {\n        int ans = 0;\n        vector<int> masks = {0};\n        for (string &s : arr) {\n            int mask = 0;\n            for (char ch : s) {\n                ch -= 'a';\n                if ((mask >> ch) & 1) { // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                    mask = 0;\n                    break;\n                }\n                mask |= 1 << ch; // 将 ch 加入 mask 中\n            }\n            if (mask == 0) {\n                continue;\n            }\n            int n = masks.size();\n            for (int i = 0; i < n; ++i) {\n                int m = masks[i];\n                if ((m & mask) == 0) { // m 和 mask 无公共元素\n                    masks.push_back(m | mask);\n                    ans = max(ans, __builtin_popcount(m | mask));\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int maxLength(List<String> arr) {\n        int ans = 0;\n        List<Integer> masks = new ArrayList<Integer>();\n        masks.add(0);\n        for (String s : arr) {\n            int mask = 0;\n            for (int i = 0; i < s.length(); ++i) {\n                int ch = s.charAt(i) - 'a';\n                if (((mask >> ch) & 1) != 0) { // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                    mask = 0;\n                    break;\n                }\n                mask |= 1 << ch; // 将 ch 加入 mask 中\n            }\n            if (mask == 0) {\n                continue;\n            }\n            int n = masks.size();\n            for (int i = 0; i < n; ++i) {\n                int m = masks.get(i);\n                if ((m & mask) == 0) { // m 和 mask 无公共元素\n                    masks.add(m | mask);\n                    ans = Math.max(ans, Integer.bitCount(m | mask));\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int MaxLength(IList<string> arr) {\n        int ans = 0;\n        IList<int> masks = new List<int>();\n        masks.Add(0);\n        foreach (string s in arr) {\n            int mask = 0;\n            foreach (char c in s) {\n                int ch = c - 'a';\n                if (((mask >> ch) & 1) != 0) { // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                    mask = 0;\n                    break;\n                }\n                mask |= 1 << ch; // 将 ch 加入 mask 中\n            }\n            if (mask == 0) {\n                continue;\n            }\n            int n = masks.Count;\n            for (int i = 0; i < n; ++i) {\n                int m = masks[i];\n                if ((m & mask) == 0) { // m 和 mask 无公共元素\n                    masks.Add(m | mask);\n                    ans = Math.Max(ans, BitCount(m | mask));\n                }\n            }\n        }\n        return ans;\n    }\n\n    private static int BitCount(int i) {\n        i = i - ((i >> 1) & 0x55555555);\n        i = (i & 0x33333333) + ((i >> 2) & 0x33333333);\n        i = (i + (i >> 4)) & 0x0f0f0f0f;\n        i = i + (i >> 8);\n        i = i + (i >> 16);\n        return i & 0x3f;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc maxLength(arr []string) (ans int) {\n    masks := []int{0} // 0 对应空串\nouter:\n    for _, s := range arr {\n        mask := 0\n        for _, ch := range s {\n            ch -= 'a'\n            if mask>>ch&1 > 0 { // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                continue outer\n            }\n            mask |= 1 << ch // 将 ch 加入 mask 中\n        }\n        for _, m := range masks {\n            if m&mask == 0 { // m 和 mask 无公共元素\n                masks = append(masks, m|mask)\n                ans = max(ans, bits.OnesCount(uint(m|mask)))\n            }\n        }\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol2-C]\nint maxLength(char** arr, int arrSize) {\n    int ans = 0;\n    int masks[1 << arrSize], masksSize = 0;\n    masks[masksSize++] = 0;\n    for (int i = 0; i < arrSize; ++i) {\n        int mask = 0;\n        int len = strlen(arr[i]);\n        for (int j = 0; j < len; ++j) {\n            char ch = arr[i][j] - 'a';\n            if ((mask >> ch) & 1) {  // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                mask = 0;\n                break;\n            }\n            mask |= 1 << ch;  // 将 ch 加入 mask 中\n        }\n        if (mask == 0) {\n            continue;\n        }\n        int n = masksSize;\n        for (int j = 0; j < n; ++j) {\n            int m = masks[j];\n            if ((m & mask) == 0) {  // m 和 mask 无公共元素\n                masks[masksSize++] = m | mask;\n                ans = fmax(ans, __builtin_popcount(m | mask));\n            }\n        }\n    }\n    return ans;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar maxLength = function(arr) {\n    let ans = 0;\n    const masks = [0];\n    for (const s of arr) {\n        let mask = 0;\n        for (let i = 0; i < s.length; ++i) {\n            const ch = s[i].charCodeAt() - 'a'.charCodeAt();\n            if (((mask >> ch) & 1) !== 0) { // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                mask = 0;\n                break;\n            }\n            mask |= 1 << ch; // 将 ch 加入 mask 中\n        }\n        if (mask === 0) {\n            continue;\n        }\n        const n = masks.length;\n        for (let i = 0; i < n; ++i) {\n            const m = masks[i];\n            if ((m & mask) === 0) { // m 和 mask 无公共元素\n                masks.push(m | mask);\n                ans = Math.max(ans, (m | mask).toString(2).split('0').join('').length);\n            }\n        }\n    }\n    return ans;\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def maxLength(self, arr: List[str]) -> int:\n        ans = 0\n        masks = [0]\n        for s in arr:\n            mask = 0\n            for ch in s:\n                idx = ord(ch) - ord(\"a\")\n                if ((mask >> idx) & 1):   # // 若 mask 已有 ch，则说明 s 含有重复字母，无法构成可行解\n                    mask = 0\n                    break\n                mask |= 1 << idx   # 将 ch 加入 mask 中\n            if mask == 0:\n                continue\n            \n            n = len(masks)\n            for i in range(n):\n                m = masks[i]\n                if (m & mask) == 0:   # m 和 mask 无公共元素\n                    masks.append(m | mask)\n                    ans = max(ans, bin(m | mask).count(\"1\"))\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(|\\Sigma|+2^n)$。其中 $|\\Sigma|$ 是 $\\textit{arr}$ 中所有字符串的长度之和，$n$ 是 $\\textit{arr}$ 的长度。遍历所有字符串需要 $O(|\\Sigma|)$，每次循环会将 $\\textit{masks}$ 的大小增加至多一倍，因此总的时间复杂度为 $O(|\\Sigma|+2^0+2^1+...+2^{n-1})=O(|\\Sigma|+2^n)$。\n\n- 空间复杂度：$O(2^n)$。由于最坏情况下 $\\textit{arr}$ 的所有子集都能构成可行解，这有 $2^n$ 个，这种情况下遍历结束后的 $\\textit{masks}$ 的长度为 $2^n$，因此空间复杂度为 $O(2^n)$。"
}