{
	"titleSlug": "minimum-adjacent-swaps-for-k-consecutive-ones",
	"slug": "hua-by-yu-le-1-06yo",
	"url": "https://leetcode-cn.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones/solution/hua-by-yu-le-1-06yo/",
	"content": "### 解题思路\n用`pos`数组记录原数组中所有1对应的下标，相邻1之间的移动次数等于对应下标之差再-1，也就是0的个数。\n维护一个长度为k的固定滑窗，计算窗口中需要移动的次数，获取其中的最小值。\n具体例子可以看代码注释，很详细。\n\n**为啥需要两边向中间移动？**\n\n实际上是数学中的一个绝对值不等式：`|x - a| + |x - b| >= |a - b|`，当且仅当，`x=(b-a)/2`，即`[a, b]`中点时，等号成立。 \n\n具体可以参考个题:[462. 最少移动次数使数组元素相等 II](https://leetcode.cn/problems/minimum-moves-to-equal-array-elements-ii/)\n\n### 代码\n\n![image.png](https://pic.leetcode-cn.com/1660648879-kxaNQK-image.png)\n\n\n\n```java\nclass Solution {\n    \n    public int minMoves(int[] nums, int k) {\n        int n = nums.length;\n        int[] pos = new int[n];\n        int index = 0;\n        // 例如：[1,0,0,1,0,1,1,1,0,1,1] => [0,3,5,6,7,9,10]\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == 1) {\n                pos[index++] = i;\n            }\n        }\n        int ans = 0, count = 0, mid = k / 2;\n        // 定长滑窗模板: \n        // 1.计算第一个长度为k的窗口, k = 5, pos[i] - pos[i - 1] - 1表示相邻1之间0的个数 \n        // [0,3,5,6,7] => (3-0-1)*1 + (5-3-1)*2 + (6-5-1)*2 + (7-6-1)*1 = 4\n        for (int i = 1; i < k; i++) {\n            count += (pos[i] - pos[i - 1] - 1) * Math.min(i, k - i);\n        }\n        ans = count;\n        // 2.窗口按步长滑动 [0,3,5,6,7] => [3,5,6,7,9]\n        // [0,3,5,6,7] => (3-0-1)*1 + (5-3-1)*2 + (6-5-1)*2 + (7-6-1)*1 = 4\n        // [3,5,6,7,9] =>             (5-3-1)*1 + (6-5-1)*2 + (7-6-1)*2 + (9-7-1)*1 = 2\n        // 通过对比发现：count -= (3-0-1)*1 + (5-3-1)*1 + (6-5-1)*0 = 3 - 0 + 5 - 3 + 1 + 1= 5 - 0 + 2\n        //             count += (7-6-1)*1 + (9-7-1)*1 = 7 - 6 + 9 - 7 - 1 - 1 = 9 - 6 - 2\n        // 类似于差分和前缀和的关系，加减2相互抵消，所以最后结果与窗口内两端点和中位数有关\n        for (int i = k; i < index; i++) {\n            count -= pos[i - k + mid] - pos[i - k]; // 上个区间中位数下标 - 上个区间左端点\n            count += pos[i] - pos[i - mid]; // 当前区间右端点 - 当前区间中位数\n            ans = Math.min(ans, count);\n        }\n        return ans;\n    }\n}\n```"
}