{
	"titleSlug": "smallest-subtree-with-all-the-deepest-nodes",
	"slug": "ju-you-suo-you-zui-shen-jie-dian-de-zui-xiao-zi-sh",
	"url": "https://leetcode-cn.com/problems/smallest-subtree-with-all-the-deepest-nodes/solution/ju-you-suo-you-zui-shen-jie-dian-de-zui-xiao-zi-sh/",
	"content": "#### 方法一： 两次深度优先搜索\n\n**思路**\n\n最直白的做法，先做一次深度优先搜索标记所有节点的深度来找到最深的节点，再做一次深度优先搜索用回溯法找最小子树。定义第二次深度优先搜索方法为 `answer(node)`，每次递归有以下四种情况需要处理：\n\n* 如果 `node` 没有左右子树，返回 `node`。 \n\n* 如果 `node` 左右子树的后代中都有最深节点，返回 `node`。\n\n* 如果只有左子树或右子树中有且拥有所有的最深节点，返回这棵子树的根节点（即 `node` 的左/右孩子）。\n\n* 否则，当前子树中不存在答案。\n\n**算法**\n\n先做一次深度优先搜索标记所有节点的深度，再做一次深度优先搜索找到最终答案。\n\n```java [solution1-Java]\nclass Solution {\n    Map<TreeNode, Integer> depth;\n    int max_depth;\n    public TreeNode subtreeWithAllDeepest(TreeNode root) {\n        depth = new HashMap();\n        depth.put(null, -1);\n        dfs(root, null);\n        max_depth = -1;\n        for (Integer d: depth.values())\n            max_depth = Math.max(max_depth, d);\n\n        return answer(root);\n    }\n\n    public void dfs(TreeNode node, TreeNode parent) {\n        if (node != null) {\n            depth.put(node, depth.get(parent) + 1);\n            dfs(node.left, node);\n            dfs(node.right, node);\n        }\n    }\n\n    public TreeNode answer(TreeNode node) {\n        if (node == null || depth.get(node) == max_depth)\n            return node;\n        TreeNode L = answer(node.left),\n                 R = answer(node.right);\n        if (L != null && R != null) return node;\n        if (L != null) return L;\n        if (R != null) return R;\n        return null;\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def subtreeWithAllDeepest(self, root):\n        # Tag each node with it's depth.\n        depth = {None: -1}\n        def dfs(node, parent = None):\n            if node:\n                depth[node] = depth[parent] + 1\n                dfs(node.left, node)\n                dfs(node.right, node)\n        dfs(root)\n\n        max_depth = max(depth.itervalues())\n\n        def answer(node):\n            # Return the answer for the subtree at node.\n            if not node or depth.get(node, None) == max_depth:\n                return node\n            L, R = answer(node.left), answer(node.right)\n            return node if L and R else L or R\n\n        return answer(root)\n```\n\n\n**复杂度分析**\n\n* 时间复杂度： $O(N)$，其中 $N$ 为树的大小。\n\n* 空间复杂度： $O(N)$。\n\n#### 方法二： 一次深度优先搜索\n\n**思路**\n\n可以把 **方法一** 中两次深度优先搜索合并成一次，定义方法 `dfs(node)`，与方法一中不同的是 `dfs(node)` 返回两个值，子树中的答案和 `node` 节点到最深节点的距离。\n\n**算法**\n\n`dfs(node)` 返回的结果有两个部分：\n* `Result.node`：包含所有最深节点的最小子树的根节点。 \n* `Result.dist`：`node` 到最深节点的距离。\n\n分别计算 `dfs(node)` 的两个返回结果：\n\n* 对于 `Result.node`：\n\n    * 如果只有一个 `childResult` 具有最深节点，返回 `childResult.node`。\n\n    * 如果两个孩子都有最深节点，返回 `node`。\n\n* `Result.dist` 为 `childResult.dist` 加 `1`。\n\n```java [solution2-Java]\nclass Solution {\n    public TreeNode subtreeWithAllDeepest(TreeNode root) {\n        return dfs(root).node;\n    }\n\n    // Return the result of the subtree at this node.\n    public Result dfs(TreeNode node) {\n        if (node == null) return new Result(null, 0);\n        Result L = dfs(node.left),\n               R = dfs(node.right);\n        if (L.dist > R.dist) return new Result(L.node, L.dist + 1);\n        if (L.dist < R.dist) return new Result(R.node, R.dist + 1);\n        return new Result(node, L.dist + 1);\n    }\n}\n\n/**\n * The result of a subtree is:\n *       Result.node: the largest depth node that is equal to or\n *                    an ancestor of all the deepest nodes of this subtree.\n *       Result.dist: the number of nodes in the path from the root\n *                    of this subtree, to the deepest node in this subtree.\n */\nclass Result {\n    TreeNode node;\n    int dist;\n    Result(TreeNode n, int d) {\n        node = n;\n        dist = d;\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution(object):\n    def subtreeWithAllDeepest(self, root):\n        # The result of a subtree is:\n        # Result.node: the largest depth node that is equal to or\n        #              an ancestor of all the deepest nodes of this subtree.\n        # Result.dist: the number of nodes in the path from the root\n        #              of this subtree, to the deepest node in this subtree.\n        Result = collections.namedtuple(\"Result\", (\"node\", \"dist\"))\n        def dfs(node):\n            # Return the result of the subtree at this node.\n            if not node: return Result(None, 0)\n            L, R = dfs(node.left), dfs(node.right)\n            if L.dist > R.dist: return Result(L.node, L.dist + 1)\n            if L.dist < R.dist: return Result(R.node, R.dist + 1)\n            return Result(node, L.dist + 1)\n\n        return dfs(root).node\n```\n\n\n**复杂度分析**\n\n* 时间复杂度： $O(N)$，其中 $N$ 为树的大小。\n\n* 空间复杂度： $O(N)$。"
}