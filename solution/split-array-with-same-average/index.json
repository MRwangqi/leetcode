{
	"titleSlug": "split-array-with-same-average",
	"slug": "shu-zu-de-jun-zhi-fen-ge-by-leetcode",
	"url": "https://leetcode-cn.com/problems/split-array-with-same-average/solution/shu-zu-de-jun-zhi-fen-ge-by-leetcode/",
	"content": "#### 方法一：折半搜索\n\n假设我们在数组 `B` 中放了 `K` 个数，数组 `C` 中放了 `N - K` 个数，它们的平均值相等，即 `sum(B) / K = sum(C) / (N - K)`，那么有\n\n```\nsum(B) * (N - K) = sum(C) * K\n==> sum(B) * N = (sum(B) + sum(C)) * K\n==> sum(B) / K = (sum(B) + sum(C)) / N\n==> sum(B) / K = sum(A) / N\n```\n\n即 `B` 的平均值与 `A` 的平均值相等。因此我们可以将 `A` 中的每个元素减去它们的平均值，这样 `A` 的平均值变为 `0`。此时我们的问题变成：找出若干个元素组成集合 `B`，这些元素的和为 `0`。\n\n一个容易想到的思路是，`N` 个元素中取出若干个有 `2^N` 种方法（即每个元素取或不取），我们依次判断每种方法选出的元素之和是否为 `0`。但题目中的 `N` 可以达到 `30`，`2^N` 会非常大。因此我们考虑将数组平均分成两部分 `A0` 和 `A1`，它们均含有 `N/2` 个元素（不失一般性，这里假设 `N` 为偶数。如果 `N` 为奇数，在 `A0` 中多放一个元素即可），此时这两个数组分别有 `2^(N/2)` 种选择的方法。设 `A0` 中所有选择的方法得到的元素之和的集合为 `left`，`A1` 中所有选择的方法得到的元素之和的集合为 `right`，那么我们只需要在 `left` 中找出一个 `x`，使得 `right` 中包含 `-x`，那么就找到了一种和为 `0` 的方法。需要注意的是，我们不能同时选择 `A0` 和 `A1` 中的所有元素，这样 `C` 就为空了。\n\n此外，“将 `A` 中每个元素减去它们的平均值” 这一步会引入浮点数，可能会导致判断的时候出现误差。一种解决方案是使用分数代替浮点数，但这样代码编写起来较为麻烦。更好的解决方案是先将 `A` 中的每个元素乘以 `A` 的长度，这样它们的平均值一定为整数。\n\n```Java [sol1]\nimport java.awt.Point;\n\nclass Solution {\n    public boolean splitArraySameAverage(int[] A) {\n        int N = A.length;\n        int S = 0;\n        for (int x: A) S += x;\n        if (N == 1) return false;\n\n        int g = gcd(S, N);\n        Point mu = new Point(-(S/g), N/g);\n        // A[i] -> fracAdd(A[i], mu)\n        List<Point> A2 = new ArrayList();\n        for (int x: A)\n            A2.add(fracAdd(new Point(x, 1), mu));\n\n        Set<Point> left = new HashSet();\n        left.add(A2.get(0));\n        for (int i = 1; i < N/2; ++i) {\n            Set<Point> left2 = new HashSet();\n            Point z = A2.get(i);\n            left2.add(z);\n            for (Point p: left) {\n                left2.add(p);\n                left2.add(fracAdd(p, z));\n            }\n            left = left2;\n        }\n\n        if (left.contains(new Point(0, 1))) return true;\n\n        Set<Point> right = new HashSet();\n        right.add(A2.get(N-1));\n        for (int i = N/2; i < N-1; ++i) {\n            Set<Point> right2 = new HashSet();\n            Point z = A2.get(i);\n            right2.add(z);\n            for (Point p: right) {\n                right2.add(p);\n                right2.add(fracAdd(p, z));\n            }\n            right = right2;\n        }\n\n        if (right.contains(new Point(0, 1))) return true;\n\n        Point sleft = new Point(0, 1);\n        for (int i = 0; i < N/2; ++i)\n            sleft = fracAdd(sleft, A2.get(i));\n\n        Point sright = new Point(0, 1);\n        for (int i = N/2; i < N; ++i)\n            sright = fracAdd(sright, A2.get(i));\n\n        for (Point ha: left) {\n            Point ha2 = new Point(-ha.x, ha.y);\n            if (right.contains(ha2) && (!ha.equals(sleft) || !ha2.equals(sright)))\n                return true;\n        }\n        return false;\n    }\n\n    public Point fracAdd(Point A, Point B) {\n        int numer = A.x * B.y + B.x * A.y;\n        int denom = A.y * B.y;\n        int g = gcd(numer, denom);\n        numer /= g;\n        denom /= g;\n\n        if (denom < 0) {\n            numer *= -1;\n            denom *= -1;\n        }\n\n        return new Point(numer, denom);\n    }\n\n    public int gcd(int a, int b) {\n       if (b==0) return a;\n       return gcd(b, a%b);\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def splitArraySameAverage(self, A):\n        from fractions import Fraction\n        N = len(A)\n        S = sum(A)\n        A = [z - Fraction(S, N) for z in A]\n\n        if N == 1: return False\n\n        #Want zero subset sum\n        left = {A[0]}\n        for i in xrange(1, N/2):\n            left = {z + A[i] for z in left} | left | {A[i]}\n        if 0 in left: return True\n\n        right = {A[-1]}\n        for i in xrange(N/2, N-1):\n            right = {z + A[i] for z in right} | right | {A[i]}\n        if 0 in right: return True\n\n        sleft = sum(A[i] for i in xrange(N/2))\n        sright = sum(A[i] for i in xrange(N/2, N))\n\n        return any(-ha in right and (ha, -ha) != (sleft, sright) for ha in left)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(2^{N/2})$，其中 $N$ 是数组 `A` 的长度。\n\n* 空间复杂度：$O(2^{N/2})$。"
}