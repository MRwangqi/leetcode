{
	"titleSlug": "letter-combinations-of-a-phone-number",
	"slug": "dian-hua-hao-ma-de-zi-mu-zu-he-by-leetcode-solutio",
	"url": "https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/solution/dian-hua-hao-ma-de-zi-mu-zu-he-by-leetcode-solutio/",
	"content": "### 📺 视频题解  \n![17. 电话号码的字母组合.mp4](39fd9a55-a433-465b-8f79-4d8d43efaccc)\n\n### 📖 文字题解\n#### 方法一：回溯\n\n首先使用哈希表存储每个数字对应的所有可能的字母，然后进行回溯操作。\n\n回溯过程中维护一个字符串，表示已有的字母排列（如果未遍历完电话号码的所有数字，则已有的字母排列是不完整的）。该字符串初始为空。每次取电话号码的一位数字，从哈希表中获得该数字对应的所有可能的字母，并将其中的一个字母插入到已有的字母排列后面，然后继续处理电话号码的后一位数字，直到处理完电话号码中的所有数字，即得到一个完整的字母排列。然后进行回退操作，遍历其余的字母排列。\n\n回溯算法用于寻找所有的可行解，如果发现一个解不可行，则会舍弃不可行的解。在这道题中，由于每个数字对应的每个字母都可能进入字母组合，因此不存在不可行的解，直接穷举所有的解即可。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/17/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/17/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/17/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/17/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/17/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/17/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/17/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/17/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/17/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/17/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/17/11.png),![fig12](https://assets.leetcode-cn.com/solution-static/17/12.png),![fig13](https://assets.leetcode-cn.com/solution-static/17/13.png),![fig14](https://assets.leetcode-cn.com/solution-static/17/14.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public List<String> letterCombinations(String digits) {\n        List<String> combinations = new ArrayList<String>();\n        if (digits.length() == 0) {\n            return combinations;\n        }\n        Map<Character, String> phoneMap = new HashMap<Character, String>() {{\n            put('2', \"abc\");\n            put('3', \"def\");\n            put('4', \"ghi\");\n            put('5', \"jkl\");\n            put('6', \"mno\");\n            put('7', \"pqrs\");\n            put('8', \"tuv\");\n            put('9', \"wxyz\");\n        }};\n        backtrack(combinations, phoneMap, digits, 0, new StringBuffer());\n        return combinations;\n    }\n\n    public void backtrack(List<String> combinations, Map<Character, String> phoneMap, String digits, int index, StringBuffer combination) {\n        if (index == digits.length()) {\n            combinations.add(combination.toString());\n        } else {\n            char digit = digits.charAt(index);\n            String letters = phoneMap.get(digit);\n            int lettersCount = letters.length();\n            for (int i = 0; i < lettersCount; i++) {\n                combination.append(letters.charAt(i));\n                backtrack(combinations, phoneMap, digits, index + 1, combination);\n                combination.deleteCharAt(index);\n            }\n        }\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        vector<string> combinations;\n        if (digits.empty()) {\n            return combinations;\n        }\n        unordered_map<char, string> phoneMap{\n            {'2', \"abc\"},\n            {'3', \"def\"},\n            {'4', \"ghi\"},\n            {'5', \"jkl\"},\n            {'6', \"mno\"},\n            {'7', \"pqrs\"},\n            {'8', \"tuv\"},\n            {'9', \"wxyz\"}\n        };\n        string combination;\n        backtrack(combinations, phoneMap, digits, 0, combination);\n        return combinations;\n    }\n\n    void backtrack(vector<string>& combinations, const unordered_map<char, string>& phoneMap, const string& digits, int index, string& combination) {\n        if (index == digits.length()) {\n            combinations.push_back(combination);\n        } else {\n            char digit = digits[index];\n            const string& letters = phoneMap.at(digit);\n            for (const char& letter: letters) {\n                combination.push_back(letter);\n                backtrack(combinations, phoneMap, digits, index + 1, combination);\n                combination.pop_back();\n            }\n        }\n    }\n};\n```\n\n```golang [sol1-Golang]\nvar phoneMap map[string]string = map[string]string{\n    \"2\": \"abc\",\n    \"3\": \"def\",\n    \"4\": \"ghi\",\n    \"5\": \"jkl\",\n    \"6\": \"mno\",\n    \"7\": \"pqrs\",\n    \"8\": \"tuv\",\n    \"9\": \"wxyz\",\n}\n\nvar combinations []string\n\nfunc letterCombinations(digits string) []string {\n    if len(digits) == 0 {\n        return []string{}\n    }\n    combinations = []string{}\n    backtrack(digits, 0, \"\")\n    return combinations\n}\n\nfunc backtrack(digits string, index int, combination string) {\n    if index == len(digits) {\n        combinations = append(combinations, combination)\n    } else {\n        digit := string(digits[index])\n        letters := phoneMap[digit]\n        lettersCount := len(letters)\n        for i := 0; i < lettersCount; i++ {\n            backtrack(digits, index + 1, combination + string(letters[i]))\n        }\n    }\n}\n```\n\n```C [sol1-C]\nchar phoneMap[11][5] = {\"\\0\", \"\\0\", \"abc\\0\", \"def\\0\", \"ghi\\0\", \"jkl\\0\", \"mno\\0\", \"pqrs\\0\", \"tuv\\0\", \"wxyz\\0\"};\n\nchar* digits_tmp;\nint digits_size;\n\nchar** combinations;\nint combinations_size;\n\nchar* combination;\nint combination_size;\n\nvoid backtrack(int index) {\n    if (index == digits_size) {\n        char* tmp = malloc(sizeof(char) * (combination_size + 1));\n        memcpy(tmp, combination, sizeof(char) * (combination_size + 1));\n        combinations[combinations_size++] = tmp;\n    } else {\n        char digit = digits_tmp[index];\n        char* letters = phoneMap[digit - '0'];\n        int len = strlen(letters);\n        for (int i = 0; i < len; i++) {\n            combination[combination_size++] = letters[i];\n            combination[combination_size] = 0;\n            backtrack(index + 1);\n            combination[--combination_size] = 0;\n        }\n    }\n}\n\nchar** letterCombinations(char* digits, int* returnSize) {\n    combinations_size = combination_size = 0;\n    digits_tmp = digits;\n    digits_size = strlen(digits);\n    if (digits_size == 0) {\n        *returnSize = 0;\n        return combinations;\n    }\n    int num = 1;\n    for (int i = 0; i < digits_size; i++) num *= 4;\n    combinations = malloc(sizeof(char*) * num);\n    combination = malloc(sizeof(char*) * digits_size);\n    backtrack(0);\n    *returnSize = combinations_size;\n    return combinations;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return list()\n        \n        phoneMap = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\",\n        }\n\n        def backtrack(index: int):\n            if index == len(digits):\n                combinations.append(\"\".join(combination))\n            else:\n                digit = digits[index]\n                for letter in phoneMap[digit]:\n                    combination.append(letter)\n                    backtrack(index + 1)\n                    combination.pop()\n\n        combination = list()\n        combinations = list()\n        backtrack(0)\n        return combinations\n```\n\n```Python [sol1-Python3_oneliner]\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return list()\n        \n        phoneMap = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\",\n        }\n\n        groups = (phoneMap[digit] for digit in digits)\n        return [\"\".join(combination) for combination in itertools.product(*groups)]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(3^m \\times 4^n)$，其中 $m$ 是输入中对应 $3$ 个字母的数字个数（包括数字 $2$、$3$、$4$、$5$、$6$、$8$），$n$ 是输入中对应 $4$ 个字母的数字个数（包括数字 $7$、$9$），$m+n$ 是输入数字的总个数。当输入包含 $m$ 个对应 $3$ 个字母的数字和 $n$ 个对应 $4$ 个字母的数字时，不同的字母组合一共有 $3^m \\times 4^n$ 种，需要遍历每一种字母组合。\n\n- 空间复杂度：$O(m+n)$，其中 $m$ 是输入中对应 $3$ 个字母的数字个数，$n$ 是输入中对应 $4$ 个字母的数字个数，$m+n$ 是输入数字的总个数。除了返回值以外，空间复杂度主要取决于哈希表以及回溯过程中的递归调用层数，哈希表的大小与输入无关，可以看成常数，递归调用层数最大为 $m+n$。"
}