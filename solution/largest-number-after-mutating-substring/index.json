{
	"titleSlug": "largest-number-after-mutating-substring",
	"slug": "zi-zi-fu-chuan-tu-bian-hou-ke-neng-de-da-giig",
	"url": "https://leetcode-cn.com/problems/largest-number-after-mutating-substring/solution/zi-zi-fu-chuan-tu-bian-hou-ke-neng-de-da-giig/",
	"content": "#### 方法一：贪心\n\n**提示 $1$**\n\n为了使得子串突变后的数值最大，我们需要尽可能寻找突变后数值会**增大**的较高的位，并将该位作为突变子串的**左边界**。\n\n**提示 $1$ 解释**\n\n首先假设对于任意数位，突变前后数值一定会发生改变。那么考虑任意两个数位，较高的位突变所产生的改变量绝对值一定大于较低的位突变产生的改变量绝对值。因此，在这种情况下，为了使得子串突变后数值最大，我们需要将突变后数值会增大的最高数位作为突变子串的左边界。\n\n下面考虑存在某些数位突变前后数值不变的情况。显然，我们只需要考虑该位比之前得到的数位更高的情况，此时仅突变前者的改变量为 $0$，而仅突变后者的改变量大于 $0$。同时考虑到这两个数位之间可能存在突变后数值会减小的数位，因此前者作为左边界的最大改变量一定不会大于后者作为左边界的最大改变量，我们仍然需要将后者作为突变子串的左边界。\n\n**提示 $2$**\n\n确定了突变子串的左边界（如果存在）后，如果当前右边界的右侧相邻数位满足突变后数值**不减小**，则我们应当延伸**右边界**。\n\n**提示 $2$ 解释**\n\n考虑当前右边界的右侧相邻数位。此时会有三种情况：\n\n- 如果该数位突变后数值减小，那么无论在当前的基础上如何延伸右边界，延伸后整数的突变后数值一定小于延伸前的对应数值。\n\n- 如果该数位突变后增大，那么我们显然应当延伸右边界。\n\n- 如果该数位突变后不变，那么延伸右边界前后整数的突变后数值不会改变。但该数位右侧可能存在突变后数值增大的数位，因此我们应当延伸右边界。\n\n**思路与算法**\n\n我们从高位到低位（从左向右）遍历 $\\textit{num}$，并根据 **提示 $1$** 寻找第一个突变后数值会增大的数位作为突变子串的左边界。如果不存在，突变子串位空字符串，亦即不执行突变。\n\n在确定左边界后，此时右边界初始与左边界重合，我们根据 **提示 $2$** 尝试延伸突变子串的右边界。如果当前右边界右侧的数位满足突变后数值大于等于突变前数值，则我门将右边界延伸一位。\n\n我们可以在确定左边界与延伸右边界时对字符串进行修改，并在确定完成左右边界后返回该字符串作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string maximumNumber(string num, vector<int>& change) {\n        int n = num.size();\n        for (int i = 0; i < n; ++i){\n            // 寻找第一个突变后数值更大的位作为左边界\n            if (change[num[i]-'0'] > num[i] - '0'){\n                // 尝试更新右边界\n                while (i < n && change[num[i]-'0'] >= num[i] - '0'){\n                    num[i] = '0' + change[num[i]-'0'];\n                    ++i;\n                }\n                break;\n            }\n        }\n        return num;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maximumNumber(self, num: str, change: List[int]) -> str:\n        n = len(num)\n        num = list(num)\n        for i in range(n):\n            # 寻找第一个突变后数值更大的位作为左边界\n            if change[int(num[i])] > int(num[i]):\n                # 尝试更新右边界\n                while i < n and change[int(num[i])] >= int(num[i]):\n                    num[i] = str(change[int(num[i])])\n                    i += 1\n                break\n        return ''.join(num)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $\\textit{num}$ 的长度。即为一次遍历同时更新 $\\textit{num}$ 的时间复杂度。\n\n- 空间复杂度：由于不同语言的字符串实现与方法不同，空间复杂度也有所不同。对于 $\\texttt{C++}$ 解法，空间复杂度为 $O(1)$；而对于 $\\texttt{Python}$ 解法，空间复杂度为 $O(n)$。"
}