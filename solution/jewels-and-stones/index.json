{
	"titleSlug": "jewels-and-stones",
	"slug": "bao-shi-yu-shi-tou-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/jewels-and-stones/solution/bao-shi-yu-shi-tou-by-leetcode-solution/",
	"content": "#### 方法一：暴力\n\n**思路与算法**\n\n暴力法的思路很直观，遍历字符串 $\\textit{stones}$，对于 $\\textit{stones}$ 中的每个字符，遍历一次字符串 $\\textit{jewels}$，如果其和 $\\textit{jewels}$ 中的某一个字符相同，则是宝石。\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    public int numJewelsInStones(String jewels, String stones) {\n        int jewelsCount = 0;\n        int jewelsLength = jewels.length(), stonesLength = stones.length();\n        for (int i = 0; i < stonesLength; i++) {\n            char stone = stones.charAt(i);\n            for (int j = 0; j < jewelsLength; j++) {\n                char jewel = jewels.charAt(j);\n                if (stone == jewel) {\n                    jewelsCount++;\n                    break;\n                }\n            }\n        }\n        return jewelsCount;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n        return sum(s in jewels for s in stones)\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numJewelsInStones(string jewels, string stones) {\n        int jewelsCount = 0;\n        int jewelsLength = jewels.length(), stonesLength = stones.length();\n        for (int i = 0; i < stonesLength; i++) {\n            char stone = stones[i];\n            for (int j = 0; j < jewelsLength; j++) {\n                char jewel = jewels[j];\n                if (stone == jewel) {\n                    jewelsCount++;\n                    break;\n                }\n            }\n        }\n        return jewelsCount;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar numJewelsInStones = function(jewels, stones) {\n    jewels = jewels.split('');\n    return stones.split('').reduce((prev, val) => {\n        for (const ch of jewels) {\n            if (ch === val) {\n                return prev + 1;\n            }\n        }\n        return prev;\n    }, 0);\n};\n```\n\n```Golang [sol1-Golang]\nfunc numJewelsInStones(jewels string, stones string) int {\n    jewelsCount := 0\n    for _, s := range stones {\n        for _, j := range jewels {\n            if s == j {\n                jewelsCount++\n                break\n            }\n        }\n    }\n    return jewelsCount\n}\n```\n\n```C [sol1-C]\nint numJewelsInStones(char * jewels, char * stones) {\n    int jewelsCount = 0;\n    int jewelsLength = strlen(jewels), stonesLength = strlen(stones);\n    for (int i = 0; i < stonesLength; i++) {\n        char stone = stones[i];\n        for (int j = 0; j < jewelsLength; j++) {\n            char jewel = jewels[j];\n            if (stone == jewel) {\n                jewelsCount++;\n                break;\n            }\n        }\n    }\n    return jewelsCount;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 是字符串 $\\textit{jewels}$ 的长度，$n$ 是字符串 $\\textit{stones}$ 的长度。遍历字符串 $\\textit{stones}$ 的时间复杂度是 $O(n)$，对于 $\\textit{stones}$ 中的每个字符，需要遍历字符串 $\\textit{jewels}$ 判断是否是宝石，时间复杂度是 $O(m)$，因此总时间复杂度是 $O(mn)$。\n\n- 空间复杂度：$O(1)$。只需要维护常量的额外空间。\n\n#### 方法二：哈希集合\n\n**思路与算法**\n\n方法一中，对于字符串 $\\textit{stones}$ 中的每个字符，都需要遍历一次字符串 $\\textit{jewels}$，导致时间复杂度较高。如果使用哈希集合存储字符串 $\\textit{jewels}$ 中的宝石，则可以降低判断的时间复杂度。\n\n遍历字符串 $\\textit{jewels}$，使用哈希集合存储其中的字符，然后遍历字符串 $\\textit{stones}$，对于其中的每个字符，如果其在哈希集合中，则是宝石。\n\n**代码**\n\n```Java [sol2-Java]\nclass Solution {\n    public int numJewelsInStones(String jewels, String stones) {\n        int jewelsCount = 0;\n        Set<Character> jewelsSet = new HashSet<Character>();\n        int jewelsLength = jewels.length(), stonesLength = stones.length();\n        for (int i = 0; i < jewelsLength; i++) {\n            char jewel = jewels.charAt(i);\n            jewelsSet.add(jewel);\n        }\n        for (int i = 0; i < stonesLength; i++) {\n            char stone = stones.charAt(i);\n            if (jewelsSet.contains(stone)) {\n                jewelsCount++;\n            }\n        }\n        return jewelsCount;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n        jewelsSet = set(jewels)\n        return sum(s in jewelsSet for s in stones)\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int numJewelsInStones(string jewels, string stones) {\n        int jewelsCount = 0;\n        unordered_set<char> jewelsSet;\n        int jewelsLength = jewels.length(), stonesLength = stones.length();\n        for (int i = 0; i < jewelsLength; i++) {\n            char jewel = jewels[i];\n            jewelsSet.insert(jewel);\n        }\n        for (int i = 0; i < stonesLength; i++) {\n            char stone = stones[i];\n            if (jewelsSet.count(stone)) {\n                jewelsCount++;\n            }\n        }\n        return jewelsCount;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar numJewelsInStones = function(jewels, stones) {\n    const jewelsSet = new Set(jewels.split(''));\n    return stones.split('').reduce((prev, val) => {\n        return prev + jewelsSet.has(val);\n    }, 0);\n};\n```\n\n```Golang [sol2-Golang]\nfunc numJewelsInStones(jewels string, stones string) int {\n    jewelsCount := 0\n    jewelsSet := map[byte]bool{}\n    for i := range jewels {\n        jewelsSet[jewels[i]] = true\n    }\n    for i := range stones {\n        if jewelsSet[stones[i]] {\n            jewelsCount++\n        }\n    }\n    return jewelsCount\n}\n```\n\n```C [sol2-C]\nstruct HashTable {\n    int key;\n    UT_hash_handle hh;\n};\n\nstruct HashTable* jewelsSet;\n\nstruct HashTable* find(int ikey) {\n    struct HashTable* tmp = NULL;\n    HASH_FIND_INT(jewelsSet, &ikey, tmp);\n    return tmp;\n}\n\nvoid insert(int ikey) {\n    struct HashTable* rec = find(ikey);\n    if (rec == NULL) {\n        struct HashTable* tmp = malloc(sizeof(struct HashTable));\n        tmp->key = ikey;\n        HASH_ADD_INT(jewelsSet, key, tmp);\n    }\n}\n\nint numJewelsInStones(char * jewels, char * stones) {\n    int jewelsCount = 0;\n    jewelsSet = NULL;\n    int jewelsLength = strlen(jewels), stonesLength = strlen(stones);\n    for (int i = 0; i < jewelsLength; i++) {\n        char jewel = jewels[i];\n        insert(jewel);\n    }\n    for (int i = 0; i < stonesLength; i++) {\n        char stone = stones[i];\n        if (find(stone) != NULL) {\n            jewelsCount++;\n        }\n    }\n    return jewelsCount;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m+n)$，其中 $m$ 是字符串 $\\textit{jewels}$ 的长度，$n$ 是字符串 $\\textit{stones}$ 的长度。遍历字符串 $\\textit{jewels}$ 将其中的字符存储到哈希集合中，时间复杂度是 $O(m)$，然后遍历字符串 $\\textit{stones}$，对于 $\\textit{stones}$ 中的每个字符在 $O(1)$ 的时间内判断当前字符是否是宝石，时间复杂度是 $O(n)$，因此总时间复杂度是 $O(m+n)$。\n\n- 空间复杂度：$O(m)$，其中 $m$ 是字符串 $\\textit{jewels}$ 的长度。使用哈希集合存储字符串 $\\textit{jewels}$ 中的字符。"
}