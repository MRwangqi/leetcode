{
	"titleSlug": "cousins-in-binary-tree",
	"slug": "er-cha-shu-de-tang-xiong-di-jie-dian-by-mfh2d",
	"url": "https://leetcode-cn.com/problems/cousins-in-binary-tree/solution/er-cha-shu-de-tang-xiong-di-jie-dian-by-mfh2d/",
	"content": "#### 前言\n\n要想判断两个节点 $x$ 和 $y$ 是否为堂兄弟节点，我们就需要求出这两个节点分别的「深度」以及「父节点」。\n\n因此，我们可以从根节点开始，对树进行一次遍历，在遍历的过程中维护「深度」以及「父节点」这两个信息。当我们遍历到 $x$ 或 $y$ 节点时，就将信息记录下来；当这两个节点都遍历完成了以后，我们就可以退出遍历的过程，判断它们是否为堂兄弟节点了。\n\n常见的遍历方法有两种：深度优先搜索和广度优先搜索。\n\n#### 方法一：深度优先搜索\n\n**思路与算法**\n\n我们只需要在深度优先搜索的递归函数中增加表示「深度」以及「父节点」的两个参数即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    // x 的信息\n    int x;\n    TreeNode* x_parent;\n    int x_depth;\n    bool x_found = false;\n\n    // y 的信息\n    int y;\n    TreeNode* y_parent;\n    int y_depth;\n    bool y_found = false;\n\npublic:\n    void dfs(TreeNode* node, int depth, TreeNode* parent) {\n        if (!node) {\n            return;\n        }\n\n        if (node->val == x) {\n            tie(x_parent, x_depth, x_found) = tuple{parent, depth, true};\n        }\n        else if (node->val == y) {\n            tie(y_parent, y_depth, y_found) = tuple{parent, depth, true};\n        }\n\n        // 如果两个节点都找到了，就可以提前退出遍历\n        // 即使不提前退出，对最坏情况下的时间复杂度也不会有影响\n        if (x_found && y_found) {\n            return;\n        }\n\n        dfs(node->left, depth + 1, node);\n\n        if (x_found && y_found) {\n            return;\n        }\n\n        dfs(node->right, depth + 1, node);\n    }\n\n    bool isCousins(TreeNode* root, int x, int y) {\n        this->x = x;\n        this->y = y;\n        dfs(root, 0, nullptr);\n        return x_depth == y_depth && x_parent != y_parent;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    // x 的信息\n    int x;\n    TreeNode xParent;\n    int xDepth;\n    boolean xFound = false;\n\n    // y 的信息\n    int y;\n    TreeNode yParent;\n    int yDepth;\n    boolean yFound = false;\n\n    public boolean isCousins(TreeNode root, int x, int y) {\n        this.x = x;\n        this.y = y;\n        dfs(root, 0, null);\n        return xDepth == yDepth && xParent != yParent;\n    }\n\n    public void dfs(TreeNode node, int depth, TreeNode parent) {\n        if (node == null) {\n            return;\n        }\n\n        if (node.val == x) {\n            xParent = parent;\n            xDepth = depth;\n            xFound = true;\n        } else if (node.val == y) {\n            yParent = parent;\n            yDepth = depth;\n            yFound = true;\n        }\n\n        // 如果两个节点都找到了，就可以提前退出遍历\n        // 即使不提前退出，对最坏情况下的时间复杂度也不会有影响\n        if (xFound && yFound) {\n            return;\n        }\n\n        dfs(node.left, depth + 1, node);\n\n        if (xFound && yFound) {\n            return;\n        }\n\n        dfs(node.right, depth + 1, node);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    // x 的信息\n    int x;\n    TreeNode xParent;\n    int xDepth;\n    bool xFound = false;\n\n    // y 的信息\n    int y;\n    TreeNode yParent;\n    int yDepth;\n    bool yFound = false;\n\n    public bool IsCousins(TreeNode root, int x, int y) {\n        this.x = x;\n        this.y = y;\n        DFS(root, 0, null);\n        return xDepth == yDepth && xParent != yParent;\n    }\n\n    public void DFS(TreeNode node, int depth, TreeNode parent) {\n        if (node == null) {\n            return;\n        }\n\n        if (node.val == x) {\n            xParent = parent;\n            xDepth = depth;\n            xFound = true;\n        } else if (node.val == y) {\n            yParent = parent;\n            yDepth = depth;\n            yFound = true;\n        }\n\n        // 如果两个节点都找到了，就可以提前退出遍历\n        // 即使不提前退出，对最坏情况下的时间复杂度也不会有影响\n        if (xFound && yFound) {\n            return;\n        }\n\n        DFS(node.left, depth + 1, node);\n\n        if (xFound && yFound) {\n            return;\n        }\n\n        DFS(node.right, depth + 1, node);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:\n        # x 的信息\n        x_parent, x_depth, x_found = None, None, False\n        # y 的信息\n        y_parent, y_depth, y_found = None, None, False\n        \n        def dfs(node: TreeNode, depth: int, parent: TreeNode):\n            if not node:\n                return\n            \n            nonlocal x_parent, y_parent, x_depth, y_depth, x_found, y_found\n            \n            if node.val == x:\n                x_parent, x_depth, x_found = parent, depth, True\n            elif node.val == y:\n                y_parent, y_depth, y_found = parent, depth, True\n\n            # 如果两个节点都找到了，就可以提前退出遍历\n            # 即使不提前退出，对最坏情况下的时间复杂度也不会有影响\n            if x_found and y_found:\n                return\n\n            dfs(node.left, depth + 1, node)\n\n            if x_found and y_found:\n                return\n\n            dfs(node.right, depth + 1, node)\n\n        dfs(root, 0, None)\n        return x_depth == y_depth and x_parent != y_parent\n```\n\n```JavaScript [sol1-JavaScript]\nvar isCousins = function(root, x, y) {\n    // x 的信息\n    let x_parent = null, x_depth = null, x_found = false;\n    // y 的信息\n    let y_parent = null, y_depth = null, y_found = false;\n    \n    const dfs = (node, depth, parent) => {\n        if (!node) {\n            return;\n        }\n        if (node.val === x) {\n            [x_parent, x_depth, x_found] = [parent, depth, true];\n        } else if (node.val === y) {\n            [y_parent, y_depth, y_found] = [parent, depth, true];\n        }\n\n        // 如果两个节点都找到了，就可以提前退出遍历\n        // 即使不提前退出，对最坏情况下的时间复杂度也不会有影响\n        if (x_found && y_found) {\n            return;\n        }\n\n        dfs(node.left, depth + 1, node);\n\n        if (x_found && y_found) {\n            return;\n        }\n\n        dfs(node.right, depth + 1, node);\n    }\n    dfs(root, 0, null);\n    return x_depth === y_depth && x_parent !== y_parent;\n};\n```\n\n```go [sol1-Golang]\nfunc isCousins(root *TreeNode, x, y int) bool {\n    var xParent, yParent *TreeNode\n    var xDepth, yDepth int\n    var xFound, yFound bool\n\n    var dfs func(node, parent *TreeNode, depth int)\n    dfs = func(node, parent *TreeNode, depth int) {\n        if node == nil {\n            return\n        }\n\n        if node.Val == x {\n            xParent, xDepth, xFound = parent, depth, true\n        } else if node.Val == y {\n            yParent, yDepth, yFound = parent, depth, true\n        }\n\n        // 如果两个节点都找到了，就可以提前退出遍历\n        // 即使不提前退出，对最坏情况下的时间复杂度也不会有影响\n        if xFound && yFound {\n            return\n        }\n\n        dfs(node.Left, node, depth+1)\n\n        if xFound && yFound {\n            return\n        }\n\n        dfs(node.Right, node, depth+1)\n    }\n    dfs(root, nil, 0)\n\n    return xDepth == yDepth && xParent != yParent\n}\n```\n\n```C [sol1-C]\n// x 的信息\nint x_target;\nstruct TreeNode* x_parent;\nint x_depth;\nbool x_found;\n\n// y 的信息\nint y_target;\nstruct TreeNode* y_parent;\nint y_depth;\nbool y_found;\n\nvoid dfs(struct TreeNode* node, int depth, struct TreeNode* parent) {\n    if (!node) {\n        return;\n    }\n\n    if (node->val == x_target) {\n        x_parent = parent;\n        x_depth = depth;\n        x_found = true;\n    } else if (node->val == y_target) {\n        y_parent = parent;\n        y_depth = depth;\n        y_found = true;\n    }\n\n    // 如果两个节点都找到了，就可以提前退出遍历\n    // 即使不提前退出，对最坏情况下的时间复杂度也不会有影响\n    if (x_found && y_found) {\n        return;\n    }\n\n    dfs(node->left, depth + 1, node);\n\n    if (x_found && y_found) {\n        return;\n    }\n\n    dfs(node->right, depth + 1, node);\n}\n\nbool isCousins(struct TreeNode* root, int x, int y) {\n    x_target = x;\n    y_target = y;\n    x_found = false;\n    y_found = false;\n    dfs(root, 0, NULL);\n    return x_depth == y_depth && x_parent != y_parent;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是树中的节点个数。在最坏情况下，我们需要遍历整棵树，时间复杂度为 $O(n)$。\n\n- 空间复杂度：$O(n)$，即为深度优先搜索的过程中需要使用的栈空间。在最坏情况下，树呈现链状结构，递归的深度为 $O(n)$。\n\n#### 方法二：广度优先搜索\n\n**思路与算法**\n\n在广度优先搜索的过程中，每当我们从队首取出一个节点，它就会作为「父节点」，将最多两个子节点放入队尾。因此，除了节点以外，我们只需要在队列中额外存储「深度」的信息即可。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    // x 的信息\n    int x;\n    TreeNode* x_parent;\n    int x_depth;\n    bool x_found = false;\n\n    // y 的信息\n    int y;\n    TreeNode* y_parent;\n    int y_depth;\n    bool y_found = false;\n\npublic:\n    // 用来判断是否遍历到 x 或 y 的辅助函数\n    void update(TreeNode* node, TreeNode* parent, int depth) {\n        if (node->val == x) {\n            tie(x_parent, x_depth, x_found) = tuple{parent, depth, true};\n        }\n        else if (node->val == y) {\n            tie(y_parent, y_depth, y_found) = tuple{parent, depth, true};\n        }\n    }\n\n    bool isCousins(TreeNode* root, int x, int y) {\n        this->x = x;\n        this->y = y;\n        queue<pair<TreeNode*, int>> q;\n        q.emplace(root, 0);\n        update(root, nullptr, 0);\n\n        while (!q.empty()) {\n            auto&& [node, depth] = q.front();\n            if (node->left) {\n                q.emplace(node->left, depth + 1);\n                update(node->left, node, depth + 1);\n            }\n            if (node->right) {\n                q.emplace(node->right, depth + 1);\n                update(node->right, node, depth + 1);\n            }\n            if (x_found && y_found) {\n                break;\n            }\n            q.pop();\n        }\n\n        return x_depth == y_depth && x_parent != y_parent;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    // x 的信息\n    int x;\n    TreeNode xParent;\n    int xDepth;\n    boolean xFound = false;\n\n    // y 的信息\n    int y;\n    TreeNode yParent;\n    int yDepth;\n    boolean yFound = false;\n\n    public boolean isCousins(TreeNode root, int x, int y) {\n        this.x = x;\n        this.y = y;\n\n        Queue<TreeNode> nodeQueue = new LinkedList<TreeNode>();\n        Queue<Integer> depthQueue = new LinkedList<Integer>();\n        nodeQueue.offer(root);\n        depthQueue.offer(0);\n        update(root, null, 0);\n\n        while (!nodeQueue.isEmpty()) {\n            TreeNode node = nodeQueue.poll();\n            int depth = depthQueue.poll();\n            if (node.left != null) {\n                nodeQueue.offer(node.left);\n                depthQueue.offer(depth + 1);\n                update(node.left, node, depth + 1);\n            }\n            if (node.right != null) {\n                nodeQueue.offer(node.right);\n                depthQueue.offer(depth + 1);\n                update(node.right, node, depth + 1);\n            }\n            if (xFound && yFound) {\n                break;\n            }\n        }\n\n        return xDepth == yDepth && xParent != yParent;\n    }\n\n    // 用来判断是否遍历到 x 或 y 的辅助函数\n    public void update(TreeNode node, TreeNode parent, int depth) {\n        if (node.val == x) {\n            xParent = parent;\n            xDepth = depth;\n            xFound = true;\n        } else if (node.val == y) {\n            yParent = parent;\n            yDepth = depth;\n            yFound = true;\n        }\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    // x 的信息\n    int x;\n    TreeNode xParent;\n    int xDepth;\n    bool xFound = false;\n\n    // y 的信息\n    int y;\n    TreeNode yParent;\n    int yDepth;\n    bool yFound = false;\n\n    public bool IsCousins(TreeNode root, int x, int y) {\n        this.x = x;\n        this.y = y;\n\n        Queue<Tuple<TreeNode, int>> queue = new Queue<Tuple<TreeNode, int>>();\n        queue.Enqueue(new Tuple<TreeNode, int>(root, 0));\n        Update(root, null, 0);\n\n        while (queue.Count > 0) {\n            Tuple<TreeNode, int> tuple = queue.Dequeue();\n            TreeNode node = tuple.Item1;\n            int depth = tuple.Item2;\n            if (node.left != null) {\n                queue.Enqueue(new Tuple<TreeNode, int>(node.left, depth + 1));\n                Update(node.left, node, depth + 1);\n            }\n            if (node.right != null) {\n                queue.Enqueue(new Tuple<TreeNode, int>(node.right, depth + 1));\n                Update(node.right, node, depth + 1);\n            }\n            if (xFound && yFound) {\n                break;\n            }\n        }\n\n        return xDepth == yDepth && xParent != yParent;\n    }\n\n    // 用来判断是否遍历到 x 或 y 的辅助函数\n    public void Update(TreeNode node, TreeNode parent, int depth) {\n        if (node.val == x) {\n            xParent = parent;\n            xDepth = depth;\n            xFound = true;\n        } else if (node.val == y) {\n            yParent = parent;\n            yDepth = depth;\n            yFound = true;\n        }\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:\n        # x 的信息\n        x_parent, x_depth, x_found = None, None, False\n        # y 的信息\n        y_parent, y_depth, y_found = None, None, False\n        \n        # 用来判断是否遍历到 x 或 y 的辅助函数\n        def update(node: TreeNode, parent: TreeNode, depth: int):\n            if node.val == x:\n                nonlocal x_parent, x_depth, x_found\n                x_parent, x_depth, x_found = parent, depth, True\n            elif node.val == y:\n                nonlocal y_parent, y_depth, y_found\n                y_parent, y_depth, y_found = parent, depth, True\n\n        q = collections.deque([(root, 0)])\n        update(root, None, 0)\n\n        while q:\n            node, depth = q.popleft()\n            if node.left:\n                q.append((node.left, depth + 1))\n                update(node.left, node, depth + 1)\n            if node.right:\n                q.append((node.right, depth + 1))\n                update(node.right, node, depth + 1)\n            \n            if x_found and y_found:\n                break\n\n        return x_depth == y_depth and x_parent != y_parent\n```\n\n```JavaScript [sol2-JavaScript]\nvar isCousins = function(root, x, y) {\n    // x 的信息\n    let x_parent = null, x_depth = null, x_found = false;\n    // y 的信息\n    let y_parent = null, y_depth = null, y_found = false;\n    \n    // 用来判断是否遍历到 x 或 y 的辅助函数\n    const update = (node, parent, depth) => {\n        if (node.val === x) {\n            [x_parent, x_depth, x_found] = [parent, depth, true];\n        } else if (node.val === y) {\n            [y_parent, y_depth, y_found] = [parent, depth, true];\n        }\n    }\n\n    q = [[root, 0]];\n    update(root, null, 0);\n\n    while (q.length) {\n        const [node, depth] = q.shift()\n        if (node.left){\n            q.push([node.left, depth + 1]);\n            update(node.left, node, depth + 1);\n        }\n        if (node.right) {\n            q.push([node.right, depth + 1]);\n            update(node.right, node, depth + 1);\n        }\n        \n        if (x_found && y_found) {\n            break;\n        }\n    }\n\n    return x_depth === y_depth && x_parent !== y_parent;\n};\n```\n\n```go [sol2-Golang]\nfunc isCousins(root *TreeNode, x, y int) bool {\n    var xParent, yParent *TreeNode\n    var xDepth, yDepth int\n    var xFound, yFound bool\n\n    // 用来判断是否遍历到 x 或 y 的辅助函数\n    update := func(node, parent *TreeNode, depth int) {\n        if node.Val == x {\n            xParent, xDepth, xFound = parent, depth, true\n        } else if node.Val == y {\n            yParent, yDepth, yFound = parent, depth, true\n        }\n    }\n\n    type pair struct {\n        node  *TreeNode\n        depth int\n    }\n    q := []pair{{root, 0}}\n    update(root, nil, 0)\n    for len(q) > 0 && (!xFound || !yFound) {\n        node, depth := q[0].node, q[0].depth\n        q = q[1:]\n        if node.Left != nil {\n            q = append(q, pair{node.Left, depth + 1})\n            update(node.Left, node, depth+1)\n        }\n        if node.Right != nil {\n            q = append(q, pair{node.Right, depth + 1})\n            update(node.Right, node, depth+1)\n        }\n    }\n\n    return xDepth == yDepth && xParent != yParent\n}\n```\n\n```C [sol2-C]\n// x 的信息\nint x_target;\nstruct TreeNode* x_parent;\nint x_depth;\nbool x_found;\n\n// y 的信息\nint y_target;\nstruct TreeNode* y_parent;\nint y_depth;\nbool y_found;\n\n// 用来判断是否遍历到 x 或 y 的辅助函数\nvoid update(struct TreeNode* node, struct TreeNode* parent, int depth) {\n    if (node->val == x_target) {\n        x_parent = parent;\n        x_depth = depth;\n        x_found = true;\n    } else if (node->val == y_target) {\n        y_parent = parent;\n        y_depth = depth;\n        y_found = true;\n    }\n}\n\nstruct Node {\n    struct TreeNode* node;\n    int depth;\n};\n\nbool isCousins(struct TreeNode* root, int x, int y) {\n    x_target = x;\n    y_target = y;\n    x_found = false;\n    y_found = false;\n\n    struct Node q[100];\n    int left = 0, right = 0;\n    q[right++] = (struct Node){root, 0};\n    update(root, NULL, 0);\n\n    while (left < right) {\n        if (q[left].node->left) {\n            q[right++] = (struct Node){q[left].node->left, q[left].depth + 1};\n            update(q[left].node->left, q[left].node, q[left].depth + 1);\n        }\n        if (q[left].node->right) {\n            q[right++] = (struct Node){q[left].node->right, q[left].depth + 1};\n            update(q[left].node->right, q[left].node, q[left].depth + 1);\n        }\n        if (x_found && y_found) {\n            break;\n        }\n        left++;\n    }\n\n    return x_depth == y_depth && x_parent != y_parent;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是树中的节点个数。在最坏情况下，我们需要遍历整棵树，时间复杂度为 $O(n)$。\n\n- 空间复杂度：$O(n)$，即为广度优先搜索的过程中需要使用的队列空间。\n\n---\n## ✨扣友帮帮团 - 互动答疑\n\n[![讨论.jpg](https://pic.leetcode-cn.com/1621178600-MKHFrl-%E8%AE%A8%E8%AE%BA.jpg){:width=260px}](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/)\n\n\n即日起 - 5 月 30 日，点击 [这里](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/) 前往「[扣友帮帮团](https://leetcode-cn.com/topic/kou-you-bang-bang-tuan/discuss/latest/)」活动页，把你遇到的问题大胆地提出来，让扣友为你解答～\n\n### 🎁 奖励规则\n被采纳数量排名 1～3 名：「力扣极客套装」 *1 并将获得「力扣神秘应援团」内测资格\n被采纳数量排名 4～10 名：「力扣鼠标垫」 *1 并将获得「力扣神秘应援团」内测资格\n「诲人不倦」：活动期间「解惑者」只要有 1 个回答被采纳，即可获得 20 LeetCoins 奖励！\n「求知若渴」：活动期间「求知者」在活动页发起一次符合要求的疑问帖并至少采纳一次「解惑者」的回答，即可获得 20 LeetCoins 奖励！\n\n活动详情猛戳链接了解更多：[活动｜你有 BUG 我来帮 - 力扣互动答疑季](https://leetcode-cn.com/circle/discuss/xtliW6/)"
}