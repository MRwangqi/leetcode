{
	"titleSlug": "masking-personal-information",
	"slug": "yin-cang-ge-ren-xin-xi-by-leetcode",
	"url": "https://leetcode-cn.com/problems/masking-personal-information/solution/yin-cang-ge-ren-xin-xi-by-leetcode/",
	"content": "#### 方法一：模拟\n\n我们首先判断 `S` 是邮箱还是电话号码。显然，如果 `S` 中有字符 `'@'`，那么它是邮箱，否则它是电话号码。\n\n如果 `S` 是邮箱，我们将 `S` 的 `'@'` 之前的部分保留第一个和最后一个字符，中间用 `'*****'` 代替，并将整个字符串转换为小写。\n\n如果 `S` 是电话号码，我们只保留 `S` 中的所有数字。首先将最后 `10` 位本地号码变成 `'***-***-abcd'` 的形式，再判断 `S` 中是否有额外的国际号码。如果有，则将国际号码之前添加 `'+'` 号并加到本地号码的最前端。\n\n```Java [sol1]\nclass Solution {\n    public String maskPII(String S) {\n        int atIndex = S.indexOf('@');\n        if (atIndex >= 0) { // email\n            return (S.substring(0, 1) + \"*****\" + S.substring(atIndex - 1)).toLowerCase();\n        } else { // phone\n            String digits = S.replaceAll(\"\\\\D+\", \"\");\n            String local = \"***-***-\" + digits.substring(digits.length() - 4);\n            if (digits.length() == 10) return local;\n            String ans = \"+\";\n            for (int i = 0; i < digits.length() - 10; ++i)\n                ans += \"*\";\n            return ans + \"-\" + local;\n        }\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def maskPII(self, S):\n        if '@' in S: #email\n            first, after = S.split('@')\n            return \"{}*****{}@{}\".format(\n                first[0], first[-1], after).lower()\n\n        else: #phone\n            digits = filter(unicode.isdigit, S)\n            local = \"***-***-{}\".format(digits[-4:])\n            if len(digits) == 10:\n                return local\n            return \"+{}-\".format('*' * (len(digits) - 10)) + local\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是字符串 `S` 的长度。\n\n* 空间复杂度：$O(1)$。"
}