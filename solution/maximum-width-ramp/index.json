{
	"titleSlug": "maximum-width-ramp",
	"slug": "zui-da-kuan-du-po-by-leetcode",
	"url": "https://leetcode-cn.com/problems/maximum-width-ramp/solution/zui-da-kuan-du-po-by-leetcode/",
	"content": "#### 方法一：排序\n\n**思路与算法**\n\n对于每一个形如 `A[i] = v` 的元素，我们将其索引 `i` 按照对应值 `v` 排序之后的顺序写下。例如， `A[0] = 7, A[1] = 2, A[2] = 5, A[3] = 4`，我们应该这样顺序写下索引值 `i=1, i=3, i=2, i=0`。\n\n然后，当我们写下一个索引 `i` 的时候，我们可以得到候选的宽度答案 `i - min(indexes_previously_written)` （如果这个值是正数的话）。 我们可以用一个变量 `m` 记录已经写下的最小索引。\n\n```java [Kt7xRu2c-Java]\nclass Solution {\n    public int maxWidthRamp(int[] A) {\n        int N = A.length;\n        Integer[] B = new Integer[N];\n        for (int i = 0; i < N; ++i)\n            B[i] = i;\n\n        Arrays.sort(B, (i, j) -> ((Integer) A[i]).compareTo(A[j]));\n\n        int ans = 0;\n        int m = N;\n        for (int i: B) {\n            ans = Math.max(ans, i - m);\n            m = Math.min(m, i);\n        }\n\n        return ans;\n    }\n}\n```\n```python [Kt7xRu2c-Python]\nclass Solution(object):\n    def maxWidthRamp(self, A):\n        ans = 0\n        m = float('inf')\n        for i in sorted(range(len(A)), key = A.__getitem__):\n            ans = max(ans, i - m)\n            m = min(m, i)\n        return ans\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：  $O(N \\log N)$，其中 $N$ 是 `A` 的长度。\n\n* 空间复杂度：  $O(N)$，基于排序的实现方法。\n  \n\n  \n\n\n---\n#### 方法二：二分检索候选位置\n\n**思路**\n\n按照降序考虑 `i` ， 我们希望找到一个最大的 `j` 满足 `A[j] >= A[i]`（如果存在的话）。\n\n因此，候选的 `j` 应该是降序的：如果存在 `j1 < j2` 并且 `A[j1] <= A[j2]` ，那么我们一定会选择 `j2`。\n\n**算法**\n\n我们使用列表记录这些候选的 `j`。举一个例子，当 `A = [0,8,2,7,5]`，对于 `i = 0` 的候选列表应该是 `candidates = [(v=5, j=4), (v=7, j=3), (v=8, j=1)]`。我们要时刻维护候选列表 `candidates` 按照索引值降序，对应值升序。\n\n现在，我们可以使用二分检索的办法找到最大的索引  `j` 满足 `A[j] >= A[i]`：也就是列表中第一个满足 `v >= A[i]` 的那一项。\n\n```java [JNEANGt6-Java]\nimport java.awt.Point;\n\nclass Solution {\n    public int maxWidthRamp(int[] A) {\n        int N = A.length;\n\n        int ans = 0;\n        List<Point> candidates = new ArrayList();\n        candidates.add(new Point(A[N-1], N-1));\n\n        // candidates: i's decreasing, by increasing value of A[i]\n        for (int i = N-2; i >= 0; --i) {\n            // Find largest j in candidates with A[j] >= A[i]\n            int lo = 0, hi = candidates.size();\n            while (lo < hi) {\n                int mi = lo + (hi - lo) / 2;\n                if (candidates.get(mi).x < A[i])\n                    lo = mi + 1;\n                else\n                    hi = mi;\n            }\n\n            if (lo < candidates.size()) {\n                int j = candidates.get(lo).y;\n                ans = Math.max(ans, j - i);\n            } else {\n                candidates.add(new Point(A[i], i));\n            }\n        }\n        return ans;\n    }\n}\n```\n```python [JNEANGt6-Python]\nclass Solution(object):\n    def maxWidthRamp(self, A):\n        N = len(A)\n\n        ans = 0\n        candidates = [(A[N-1], N-1)]\n        # candidates: i's decreasing, by increasing value of A[i]\n        for i in xrange(N-2, -1, -1):\n            # Find largest j in candidates with A[j] >= A[i]\n            jx = bisect.bisect(candidates, (A[i],))\n            if jx < len(candidates):\n                ans = max(ans, candidates[jx][1] - i)\n            else:\n                candidates.append((A[i], i))\n\n        return ans\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：  $O(N \\log N)​$，其中 $N​$ 是数组 `A` 的长度。\n\n* 空间复杂度：  $O(N)$。\n  \n\n  \n"
}