{
	"titleSlug": "longest-common-prefix",
	"slug": "zui-chang-gong-gong-qian-zhui-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/longest-common-prefix/solution/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/",
	"content": "### 📺 视频题解 \n![...14 最长公共前缀 仲耀晖 3.mp4](8edae0a8-6480-4128-8244-9f10b83e7cf6)\n\n\n### 📖 文字题解\n#### 方法一：横向扫描\n\n用 $\\textit{LCP}(S_1 \\ldots S_n)$ 表示字符串 $S_1 \\ldots S_n$ 的最长公共前缀。\n\n可以得到以下结论：\n\n$$\n\\textit{LCP}(S_1 \\ldots S_n) = \\textit{LCP}(\\textit{LCP}(\\textit{LCP}(S_1, S_2),S_3),\\ldots S_n)\n$$\n\n基于该结论，可以得到一种查找字符串数组中的最长公共前缀的简单方法。依次遍历字符串数组中的每个字符串，对于每个遍历到的字符串，更新最长公共前缀，当遍历完所有的字符串以后，即可得到字符串数组中的最长公共前缀。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/14/14_fig1.png){:width=\"80%\"}\n\n如果在尚未遍历完所有的字符串时，最长公共前缀已经是空串，则最长公共前缀一定是空串，因此不需要继续遍历剩下的字符串，直接返回空串即可。\n\n```Java [sol1-Java]\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs == null || strs.length == 0) {\n            return \"\";\n        }\n        String prefix = strs[0];\n        int count = strs.length;\n        for (int i = 1; i < count; i++) {\n            prefix = longestCommonPrefix(prefix, strs[i]);\n            if (prefix.length() == 0) {\n                break;\n            }\n        }\n        return prefix;\n    }\n\n    public String longestCommonPrefix(String str1, String str2) {\n        int length = Math.min(str1.length(), str2.length());\n        int index = 0;\n        while (index < length && str1.charAt(index) == str2.charAt(index)) {\n            index++;\n        }\n        return str1.substring(0, index);\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if (!strs.size()) {\n            return \"\";\n        }\n        string prefix = strs[0];\n        int count = strs.size();\n        for (int i = 1; i < count; ++i) {\n            prefix = longestCommonPrefix(prefix, strs[i]);\n            if (!prefix.size()) {\n                break;\n            }\n        }\n        return prefix;\n    }\n\n    string longestCommonPrefix(const string& str1, const string& str2) {\n        int length = min(str1.size(), str2.size());\n        int index = 0;\n        while (index < length && str1[index] == str2[index]) {\n            ++index;\n        }\n        return str1.substr(0, index);\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n        \n        prefix, count = strs[0], len(strs)\n        for i in range(1, count):\n            prefix = self.lcp(prefix, strs[i])\n            if not prefix:\n                break\n        \n        return prefix\n\n    def lcp(self, str1, str2):\n        length, index = min(len(str1), len(str2)), 0\n        while index < length and str1[index] == str2[index]:\n            index += 1\n        return str1[:index]\n```\n\n```golang [sol1-Golang]\nfunc longestCommonPrefix(strs []string) string {\n    if len(strs) == 0 {\n        return \"\"\n    }\n    prefix := strs[0]\n    count := len(strs)\n    for i := 1; i < count; i++ {\n        prefix = lcp(prefix, strs[i])\n        if len(prefix) == 0 {\n            break\n        }\n    }\n    return prefix\n}\n\nfunc lcp(str1, str2 string) string {\n    length := min(len(str1), len(str2))\n    index := 0\n    for index < length && str1[index] == str2[index] {\n        index++\n    }\n    return str1[:index]\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 是字符串数组中的字符串的平均长度，$n$ 是字符串的数量。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。\n\n- 空间复杂度：$O(1)$。使用的额外空间复杂度为常数。\n\n#### 方法二：纵向扫描\n\n方法一是横向扫描，依次遍历每个字符串，更新最长公共前缀。另一种方法是纵向扫描。纵向扫描时，从前往后遍历所有字符串的每一列，比较相同列上的字符是否相同，如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，当前列之前的部分为最长公共前缀。\n\n![fig2](https://assets.leetcode-cn.com/solution-static/14/14_fig2.png){:width=\"70%\"}\n\n```Java [sol2-Java]\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs == null || strs.length == 0) {\n            return \"\";\n        }\n        int length = strs[0].length();\n        int count = strs.length;\n        for (int i = 0; i < length; i++) {\n            char c = strs[0].charAt(i);\n            for (int j = 1; j < count; j++) {\n                if (i == strs[j].length() || strs[j].charAt(i) != c) {\n                    return strs[0].substring(0, i);\n                }\n            }\n        }\n        return strs[0];\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if (!strs.size()) {\n            return \"\";\n        }\n        int length = strs[0].size();\n        int count = strs.size();\n        for (int i = 0; i < length; ++i) {\n            char c = strs[0][i];\n            for (int j = 1; j < count; ++j) {\n                if (i == strs[j].size() || strs[j][i] != c) {\n                    return strs[0].substr(0, i);\n                }\n            }\n        }\n        return strs[0];\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        if not strs:\n            return \"\"\n        \n        length, count = len(strs[0]), len(strs)\n        for i in range(length):\n            c = strs[0][i]\n            if any(i == len(strs[j]) or strs[j][i] != c for j in range(1, count)):\n                return strs[0][:i]\n        \n        return strs[0]\n```\n\n```golang [sol2-Golang]\nfunc longestCommonPrefix(strs []string) string {\n    if len(strs) == 0 {\n        return \"\"\n    }\n    for i := 0; i < len(strs[0]); i++ {\n        for j := 1; j < len(strs); j++ {\n            if i == len(strs[j]) || strs[j][i] != strs[0][i] {\n                return strs[0][:i]\n            }\n        }\n    }\n    return strs[0]\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 是字符串数组中的字符串的平均长度，$n$ 是字符串的数量。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。\n\n- 空间复杂度：$O(1)$。使用的额外空间复杂度为常数。\n\n#### 方法三：分治\n\n注意到 $\\textit{LCP}$ 的计算满足结合律，有以下结论：\n\n$$\n\\textit{LCP}(S_1 \\ldots S_n) = \\textit{LCP}(\\textit{LCP}(S_1 \\ldots S_k), \\textit{LCP} (S_{k+1} \\ldots S_n))\n$$\n\n其中 $\\textit{LCP}(S_1 \\ldots S_n)$ 是字符串 $S_1 \\ldots S_n$ 的最长公共前缀，$1 < k < n$。\n\n基于上述结论，可以使用分治法得到字符串数组中的最长公共前缀。对于问题 $\\textit{LCP}(S_i\\cdots S_j)$，可以分解成两个子问题 $\\textit{LCP}(S_i \\ldots S_{mid})$ 与 $\\textit{LCP}(S_{mid+1} \\ldots S_j)$，其中 $mid=\\frac{i+j}{2}$。对两个子问题分别求解，然后对两个子问题的解计算最长公共前缀，即为原问题的解。\n\n![fig3](https://assets.leetcode-cn.com/solution-static/14/14_fig3.png){:width=\"75%\"}\n\n```Java [sol3-Java]\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs == null || strs.length == 0) {\n            return \"\";\n        } else {\n            return longestCommonPrefix(strs, 0, strs.length - 1);\n        }\n    }\n\n    public String longestCommonPrefix(String[] strs, int start, int end) {\n        if (start == end) {\n            return strs[start];\n        } else {\n            int mid = (end - start) / 2 + start;\n            String lcpLeft = longestCommonPrefix(strs, start, mid);\n            String lcpRight = longestCommonPrefix(strs, mid + 1, end);\n            return commonPrefix(lcpLeft, lcpRight);\n        }\n    }\n\n    public String commonPrefix(String lcpLeft, String lcpRight) {\n        int minLength = Math.min(lcpLeft.length(), lcpRight.length());       \n        for (int i = 0; i < minLength; i++) {\n            if (lcpLeft.charAt(i) != lcpRight.charAt(i)) {\n                return lcpLeft.substring(0, i);\n            }\n        }\n        return lcpLeft.substring(0, minLength);\n    }\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if (!strs.size()) {\n            return \"\";\n        }\n        else {\n            return longestCommonPrefix(strs, 0, strs.size() - 1);\n        }\n    }\n\n    string longestCommonPrefix(const vector<string>& strs, int start, int end) {\n        if (start == end) {\n            return strs[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            string lcpLeft = longestCommonPrefix(strs, start, mid);\n            string lcpRight = longestCommonPrefix(strs, mid + 1, end);\n            return commonPrefix(lcpLeft, lcpRight);\n        }\n    }\n\n    string commonPrefix(const string& lcpLeft, const string& lcpRight) {\n        int minLength = min(lcpLeft.size(), lcpRight.size());\n        for (int i = 0; i < minLength; ++i) {\n            if (lcpLeft[i] != lcpRight[i]) {\n                return lcpLeft.substr(0, i);\n            }\n        }\n        return lcpLeft.substr(0, minLength);\n    }\n};\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        def lcp(start, end):\n            if start == end:\n                return strs[start]\n\n            mid = (start + end) // 2\n            lcpLeft, lcpRight = lcp(start, mid), lcp(mid + 1, end)\n            minLength = min(len(lcpLeft), len(lcpRight))\n            for i in range(minLength):\n                if lcpLeft[i] != lcpRight[i]:\n                    return lcpLeft[:i]\n\n            return lcpLeft[:minLength]\n\n        return \"\" if not strs else lcp(0, len(strs) - 1)\n```\n\n```golang [sol3-Golang]\nfunc longestCommonPrefix(strs []string) string {\n    if len(strs) == 0 {\n        return \"\"\n    }\n    var lcp func(int, int) string\n    lcp = func(start, end int) string {\n        if start == end {\n            return strs[start]\n        }\n        mid := (start + end) / 2\n        lcpLeft, lcpRight := lcp(start, mid), lcp(mid + 1, end)\n        minLength := min(len(lcpLeft), len(lcpRight))\n        for i := 0; i < minLength; i++ {\n            if lcpLeft[i] != lcpRight[i] {\n                return lcpLeft[:i]\n            }\n        }\n        return lcpLeft[:minLength]\n    }\n    return lcp(0, len(strs)-1)\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 是字符串数组中的字符串的平均长度，$n$ 是字符串的数量。时间复杂度的递推式是 $T(n)=2 \\cdot T(\\frac{n}{2})+O(m)$，通过计算可得 $T(n)=O(mn)$。\n\n- 空间复杂度：$O(m \\log n)$，其中 $m$ 是字符串数组中的字符串的平均长度，$n$ 是字符串的数量。空间复杂度主要取决于递归调用的层数，层数最大为 $\\log n$，每层需要 $m$ 的空间存储返回结果。\n\n#### 方法四：二分查找\n\n显然，最长公共前缀的长度不会超过字符串数组中的最短字符串的长度。用 $\\textit{minLength}$ 表示字符串数组中的最短字符串的长度，则可以在 $[0,\\textit{minLength}]$ 的范围内通过二分查找得到最长公共前缀的长度。每次取查找范围的中间值 $\\textit{mid}$，判断每个字符串的长度为 $\\textit{mid}$ 的前缀是否相同，如果相同则最长公共前缀的长度一定大于或等于 $\\textit{mid}$，如果不相同则最长公共前缀的长度一定小于 $\\textit{mid}$，通过上述方式将查找范围缩小一半，直到得到最长公共前缀的长度。\n\n![fig4](https://assets.leetcode-cn.com/solution-static/14/14_fig4.png){:width=\"80%\"}\n\n```Java [sol4-Java]\nclass Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs == null || strs.length == 0) {\n            return \"\";\n        }\n        int minLength = Integer.MAX_VALUE;\n        for (String str : strs) {\n            minLength = Math.min(minLength, str.length());\n        }\n        int low = 0, high = minLength;\n        while (low < high) {\n            int mid = (high - low + 1) / 2 + low;\n            if (isCommonPrefix(strs, mid)) {\n                low = mid;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return strs[0].substring(0, low);\n    }\n\n    public boolean isCommonPrefix(String[] strs, int length) {\n        String str0 = strs[0].substring(0, length);\n        int count = strs.length;\n        for (int i = 1; i < count; i++) {\n            String str = strs[i];\n            for (int j = 0; j < length; j++) {\n                if (str0.charAt(j) != str.charAt(j)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C++ [sol4-C++]\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if (!strs.size()) {\n            return \"\";\n        }\n        int minLength = min_element(strs.begin(), strs.end(), [](const string& s, const string& t) {return s.size() < t.size();})->size();\n        int low = 0, high = minLength;\n        while (low < high) {\n            int mid = (high - low + 1) / 2 + low;\n            if (isCommonPrefix(strs, mid)) {\n                low = mid;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        return strs[0].substr(0, low);\n    }\n\n    bool isCommonPrefix(const vector<string>& strs, int length) {\n        string str0 = strs[0].substr(0, length);\n        int count = strs.size();\n        for (int i = 1; i < count; ++i) {\n            string str = strs[i];\n            for (int j = 0; j < length; ++j) {\n                if (str0[j] != str[j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Python [sol4-Python3]\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -> str:\n        def isCommonPrefix(length):\n            str0, count = strs[0][:length], len(strs)\n            return all(strs[i][:length] == str0 for i in range(1, count))\n\n        if not strs:\n            return \"\"\n\n        minLength = min(len(s) for s in strs)\n        low, high = 0, minLength\n        while low < high:\n            mid = (high - low + 1) // 2 + low\n            if isCommonPrefix(mid):\n                low = mid\n            else:\n                high = mid - 1\n\n        return strs[0][:low]\n```\n\n```golang [sol4-Golang]\nfunc longestCommonPrefix(strs []string) string {\n    if len(strs) == 0 {\n        return \"\"\n    }\n\n    isCommonPrefix := func(length int) bool {\n        str0, count := strs[0][:length], len(strs)\n        for i := 1; i < count; i++ {\n            if strs[i][:length] != str0 {\n                return false\n            }\n        }\n        return true\n    }\n    minLength := len(strs[0])\n    for _, s := range strs {\n        if len(s) < minLength {\n            minLength = len(s)\n        }\n    }\n    low, high := 0, minLength\n    for low < high {\n        mid := (high - low + 1) / 2 + low\n        if isCommonPrefix(mid) {\n            low = mid\n        } else {\n            high = mid - 1\n        }\n    }\n    return strs[0][:low]\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn \\log m)$，其中 $m$ 是字符串数组中的字符串的最小长度，$n$ 是字符串的数量。二分查找的迭代执行次数是 $O(\\log m)$，每次迭代最多需要比较 $mn$ 个字符，因此总时间复杂度是 $O(mn \\log m)$。\n\n- 空间复杂度：$O(1)$。使用的额外空间复杂度为常数。"
}