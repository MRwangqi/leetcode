{
	"titleSlug": "fair-candy-swap",
	"slug": "gong-ping-de-tang-guo-jiao-huan-by-leetc-tlam",
	"url": "https://leetcode-cn.com/problems/fair-candy-swap/solution/gong-ping-de-tang-guo-jiao-huan-by-leetc-tlam/",
	"content": "#### 方法一：哈希表\n\n**思路及算法**\n\n记爱丽丝的糖果棒的总大小为 $\\textit{sumA}$，鲍勃的糖果棒的总大小为 $\\textit{sumB}$。设答案为 $\\{x,y\\}$，即爱丽丝的大小为 $x$ 的糖果棒与鲍勃的大小为 $y$ 的糖果棒交换，则有如下等式：\n\n$$\n\\textit{sumA} - x + y = \\textit{sumB} + x - y\n$$\n\n化简，得：\n\n$$\nx = y + \\frac{\\textit{sumA} - \\textit{sumB}}{2}\n$$\n\n即对于 $\\textit{bobSizes}$ 中的任意一个数 $y'$，只要 $\\textit{aliceSizes}$ 中存在一个数 $x'$，满足 $x' =  y' + \\dfrac{\\textit{sumA} - \\textit{sumB}}{2}$，那么 $\\{x',y'\\}$ 即为一组可行解。\n\n为了快速查询 $\\textit{aliceSizes}$ 中是否存在某个数，我们可以先将 $\\textit{aliceSizes}$ 中的数字存入哈希表中。然后遍历 $\\textit{bobSizes}$ 序列中的数 $y'$，在哈希表中查询是否有对应的 $x'$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> fairCandySwap(vector<int>& aliceSizes, vector<int>& bobSizes) {\n        int sumA = accumulate(aliceSizes.begin(), aliceSizes.end(), 0);\n        int sumB = accumulate(bobSizes.begin(), bobSizes.end(), 0);\n        int delta = (sumA - sumB) / 2;\n        unordered_set<int> rec(aliceSizes.begin(), aliceSizes.end());\n        vector<int> ans;\n        for (auto& y : bobSizes) {\n            int x = y + delta;\n            if (rec.count(x)) {\n                ans = vector<int>{x, y};\n                break;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] fairCandySwap(int[] aliceSizes, int[] bobSizes) {\n        int sumA = Arrays.stream(aliceSizes).sum();\n        int sumB = Arrays.stream(bobSizes).sum();\n        int delta = (sumA - sumB) / 2;\n        Set<Integer> rec = new HashSet<Integer>();\n        for (int num : aliceSizes) {\n            rec.add(num);\n        }\n        int[] ans = new int[2];\n        for (int y : bobSizes) {\n            int x = y + delta;\n            if (rec.contains(x)) {\n                ans[0] = x;\n                ans[1] = y;\n                break;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar fairCandySwap = function(aliceSizes, bobSizes) {\n    const sumA = _.sum(aliceSizes), sumB = _.sum(bobSizes);\n    const delta = Math.floor((sumA - sumB) / 2);\n    const rec = new Set(aliceSizes);\n    var ans;\n    for (const y of bobSizes) {\n        const x = y + delta;\n        if (rec.has(x)) {\n            ans = [x, y];\n            break;\n        }\n    }\n    return ans;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:\n        sumA, sumB = sum(aliceSizes), sum(bobSizes)\n        delta = (sumA - sumB) // 2\n        rec = set(aliceSizes)\n        ans = None\n        for y in bobSizes:\n            x = y + delta\n            if x in rec:\n                ans = [x, y]\n                break\n        return ans\n```\n\n```go [sol1-Golang]\nfunc fairCandySwap(aliceSizes []int, bobSizes []int) []int {\n    sumA := 0\n    setA := map[int]struct{}{}\n    for _, v := range aliceSizes {\n        sumA += v\n        setA[v] = struct{}{}\n    }\n    sumB := 0\n    for _, v := range bobSizes {\n        sumB += v\n    }\n    delta := (sumA - sumB) / 2\n    for i := 0; ; i++ {\n        y := bobSizes[i]\n        x := y + delta\n        if _, has := setA[x]; has {\n            return []int{x, y}\n        }\n    }\n}\n```\n\n```C [sol1-C]\nstruct HashTable {\n    int x;\n    UT_hash_handle hh;\n};\n\nint* fairCandySwap(int* aliceSizes, int aliceSizesSize, int* bobSizes, int bobSizesSize, int* returnSize) {\n    int sumA = 0, sumB = 0;\n    for (int i = 0; i < aliceSizesSize; i++) {\n        sumA += aliceSizes[i];\n    }\n    for (int i = 0; i < bobSizesSize; i++) {\n        sumB += bobSizes[i];\n    }\n    int delta = (sumA - sumB) / 2;\n    struct HashTable* hashTable = NULL;\n    for (int i = 0; i < aliceSizesSize; i++) {\n        struct HashTable* tmp;\n        HASH_FIND_INT(hashTable, &aliceSizes[i], tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct HashTable));\n            tmp->x = aliceSizes[i];\n            HASH_ADD_INT(hashTable, x, tmp);\n        }\n    }\n    int* ans = malloc(sizeof(int) * 2);\n    for (int i = 0; i < bobSizesSize; i++) {\n        int x = bobSizes[i] + delta;\n        struct HashTable* tmp;\n        HASH_FIND_INT(hashTable, &x, tmp);\n        if (tmp != NULL) {\n            ans[0] = x, ans[1] = bobSizes[i];\n            *returnSize = 2;\n            break;\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + m)$，其中 $n$ 是序列 $\\textit{aliceSizes}$ 的长度，$m$ 是序列 $\\textit{bobSizes}$ 的长度。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是序列 $\\textit{aliceSizes}$ 的长度。我们需要建立一个和序列 $\\textit{aliceSizes}$ 等大的哈希表。"
}