{
	"titleSlug": "kplEvH",
	"slug": "san-wei-shu-zu-ji-lu-cidian-by-jsjohnson-sgif",
	"url": "https://leetcode-cn.com/problems/kplEvH/solution/san-wei-shu-zu-ji-lu-cidian-by-jsjohnson-sgif/",
	"content": "### 解题思路\nBFS，三维数组，记录此点是否访问过\n\n### 代码\n\n```java\nclass Solution {\n    public int[][] bicycleYard(int[] pos, int[][] h, int[][] o) {\n        int n = h.length, m = h[0].length;\n        boolean[][][] f = new boolean[n][m][105];\n        /**\n        状态定义:\n        f[i][j][v]: 从pos到(i,j,v)是否访问过\n        */\n        int dx[] = new int[]{0, 1, 0, -1}, dy[] = new int[]{1, 0, -1, 0};\n        Queue<int[]> que = new LinkedList<>();\n        que.add(new int[]{pos[0], pos[1], 1});\n        while (!que.isEmpty()) {\n            int[] poll = que.poll();\n            int x = poll[0], y = poll[1], v = poll[2];\n            for (int i = 0; i < 4; i++) {\n                int a = x + dx[i], b = y + dy[i];\n                if (a < 0 || a >= n || b < 0 || b >= m) {\n                    continue;\n                }\n                if (a == pos[0] && b == pos[1]) {\n                    continue;\n                }\n                int s = v + h[x][y] - h[a][b] - o[a][b];\n                if (s > 0 && !f[a][b][s]) {\n                    f[a][b][s] = true;\n                    que.add(new int[]{a, b, s});\n                }\n            }\n        }\n        List<int[]> ret = new ArrayList<>();\n        f[pos[0]][pos[1]][1] = false;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (f[i][j][1]) {\n                    ret.add(new int[]{i, j});\n                }\n            }\n        }\n        return ret.toArray(new int[][]{});\n    }\n}\n```"
}