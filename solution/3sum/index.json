{
	"titleSlug": "3sum",
	"slug": "pai-xu-shuang-zhi-zhen-zhu-xing-jie-shi-python3-by",
	"url": "https://leetcode-cn.com/problems/3sum/solution/pai-xu-shuang-zhi-zhen-zhu-xing-jie-shi-python3-by/",
	"content": "### 排序 + 双指针\r\n本题的难点在于如何去除重复解。\r\n\r\n### 算法流程：\r\n\r\n 1. 特判，对于数组长度 $n$，如果数组为 $null$ 或者数组长度小于 $3$，返回 $[]$。\r\n 2. 对数组进行排序。\r\n 3. 遍历排序后数组：\r\n    - 若 $nums[i]>0$：因为已经排序好，所以后面不可能有三个数加和等于 $0$，直接返回结果。\r\n    - 对于重复元素：跳过，避免出现重复解\r\n    - 令左指针 $L=i+1$，右指针 $R=n-1$，当 $L<R$ 时，执行循环：\r\n      * 当 $nums[i]+nums[L]+nums[R]==0$，执行循环，判断左界和右界是否和下一位置重复，去除重复解。并同时将 $L,R$ 移到下一位置，寻找新的解\r\n      * 若和大于 $0$，说明 $nums[R]$ 太大，$R$ 左移\r\n      * 若和小于 $0$，说明 $nums[L]$ 太小，$L$ 右移\r\n### 复杂度分析\r\n\r\n - 时间复杂度：$O\\left(n^{2}\\right)$，数组排序 $O(N \\log N)$，遍历数组 $O\\left(n\\right)$，双指针遍历 $O\\left(n\\right)$，总体 $O(N \\log N)+O\\left(n\\right)*O\\left(n\\right)$，$O\\left(n^{2}\\right)$\r\n - 空间复杂度：$O(1)$\r\n\r\n```python [-Python3]\r\nclass Solution:\r\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\r\n        \r\n        n=len(nums)\r\n        res=[]\r\n        if(not nums or n<3):\r\n            return []\r\n        nums.sort()\r\n        res=[]\r\n        for i in range(n):\r\n            if(nums[i]>0):\r\n                return res\r\n            if(i>0 and nums[i]==nums[i-1]):\r\n                continue\r\n            L=i+1\r\n            R=n-1\r\n            while(L<R):\r\n                if(nums[i]+nums[L]+nums[R]==0):\r\n                    res.append([nums[i],nums[L],nums[R]])\r\n                    while(L<R and nums[L]==nums[L+1]):\r\n                        L=L+1\r\n                    while(L<R and nums[R]==nums[R-1]):\r\n                        R=R-1\r\n                    L=L+1\r\n                    R=R-1\r\n                elif(nums[i]+nums[L]+nums[R]>0):\r\n                    R=R-1\r\n                else:\r\n                    L=L+1\r\n        return res\r\n```"
}