{
	"titleSlug": "sum-of-all-odd-length-subarrays",
	"slug": "suo-you-qi-shu-chang-du-zi-shu-zu-de-he-yoaqu",
	"url": "https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/solution/suo-you-qi-shu-chang-du-zi-shu-zu-de-he-yoaqu/",
	"content": "#### 方法一：暴力\n\n最简单的方法是遍历数组 $\\textit{arr}$ 中的每个长度为奇数的子数组，计算这些子数组的和。由于只需要计算所有长度为奇数的子数组的和，不需要分别计算每个子数组的和，因此只需要维护一个变量 $\\textit{sum}$ 存储总和即可。\n\n实现方面，令数组 $\\textit{arr}$ 的长度为 $n$，子数组的开始下标为 $\\textit{start}$，长度为 $\\textit{length}$，结束下标为 $\\textit{end}$，则有 $0 \\le \\textit{start} \\le \\textit{end} < n$，$\\textit{length} = \\textit{end} - \\textit{start} + 1$ 为奇数。遍历符合上述条件的子数组，计算所有长度为奇数的子数组的和。\n\n```Java [sol1-Java]\nclass Solution {\n    public int sumOddLengthSubarrays(int[] arr) {\n        int sum = 0;\n        int n = arr.length;\n        for (int start = 0; start < n; start++) {\n            for (int length = 1; start + length <= n; length += 2) {\n                int end = start + length - 1;\n                for (int i = start; i <= end; i++) {\n                    sum += arr[i];\n                }\n            }\n        }\n        return sum;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int SumOddLengthSubarrays(int[] arr) {\n        int sum = 0;\n        int n = arr.Length;\n        for (int start = 0; start < n; start++) {\n            for (int length = 1; start + length <= n; length += 2) {\n                int end = start + length - 1;\n                for (int i = start; i <= end; i++) {\n                    sum += arr[i];\n                }\n            }\n        }\n        return sum;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int sumOddLengthSubarrays(vector<int>& arr) {\n        int sum = 0;\n        int n = arr.size();\n        for (int start = 0; start < n; start++) {\n            for (int length = 1; start + length <= n; length += 2) {\n                int end = start + length - 1;\n                for (int i = start; i <= end; i++) {\n                    sum += arr[i];\n                }\n            }\n        }\n        return sum;\n    }\n};\n```\n\n```C [sol1-C]\nint sumOddLengthSubarrays(int* arr, int arrSize) {\n    int sum = 0;\n    for (int start = 0; start < arrSize; start++) {\n        for (int length = 1; start + length <= arrSize; length += 2) {\n            int end = start + length - 1;\n            for (int i = start; i <= end; i++) {\n                sum += arr[i];\n            }\n        }\n    }\n    return sum;\n}\n```\n\n```go [sol1-Golang]\nfunc sumOddLengthSubarrays(arr []int) (sum int) {\n    n := len(arr)\n    for start := range arr {\n        for length := 1; start+length <= n; length += 2 {\n            for _, v := range arr[start : start+length] {\n                sum += v\n            }\n        }\n    }\n    return sum\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar sumOddLengthSubarrays = function(arr) {\n    let sum = 0;\n    const n = arr.length;\n    for (let start = 0; start < n; start++) {\n        for (let length = 1; start + length <= n; length += 2) {\n            const end = start + length - 1;\n            for (let i = start; i <= end; i++) {\n                sum += arr[i];\n            }\n        }\n    }\n    return sum;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        sum = 0\n        n = len(arr)\n        for start in range(n):\n            length = 1\n            while start + length <= n:\n                for v in arr[start:start + length]:\n                    sum += v\n                length += 2\n        return sum\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^3)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。长度为奇数的子数组的数量是 $O(n^2)$，对于每个子数组需要 $O(n)$ 的时间计算子数组的和，因此总时间复杂度是 $O(n^3)$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：前缀和\n\n方法一中，对于每个子数组需要使用 $O(n)$ 的时间计算子数组的和。如果能将计算每个子数组的和的时间复杂度从 $O(n)$ 降低到 $O(1)$，则能将总时间复杂度从 $O(n^3)$ 降低到 $O(n^2)$。\n\n为了在 $O(1)$ 的时间内得到每个子数组的和，可以使用前缀和。创建长度为 $n + 1$ 的前缀和数组 $\\textit{prefixSums}$，其中 $\\textit{prefixSums}[0] = 0$，当 $1 \\le i \\le n$ 时，$\\textit{prefixSums}[i]$ 表示数组 $\\textit{arr}$ 从下标 $0$ 到下标 $i - 1$ 的元素和。\n\n得到前缀和数组 $\\textit{prefixSums}$ 之后，对于 $0 \\le \\textit{start} \\le \\textit{end} < n$，数组 $\\textit{arr}$ 的下标范围 $[\\textit{start}, \\textit{end}]$ 的子数组的和为 $\\textit{prefixSums}[\\textit{end} + 1] - \\textit{prefixSums}[\\textit{start}]$，可以在 $O(1)$ 的时间内得到每个子数组的和。\n\n```Java [sol2-Java]\nclass Solution {\n    public int sumOddLengthSubarrays(int[] arr) {\n        int n = arr.length;\n        int[] prefixSums = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            prefixSums[i + 1] = prefixSums[i] + arr[i];\n        }\n        int sum = 0;\n        for (int start = 0; start < n; start++) {\n            for (int length = 1; start + length <= n; length += 2) {\n                int end = start + length - 1;\n                sum += prefixSums[end + 1] - prefixSums[start];\n            }\n        }\n        return sum;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int SumOddLengthSubarrays(int[] arr) {\n        int n = arr.Length;\n        int[] prefixSums = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            prefixSums[i + 1] = prefixSums[i] + arr[i];\n        }\n        int sum = 0;\n        for (int start = 0; start < n; start++) {\n            for (int length = 1; start + length <= n; length += 2) {\n                int end = start + length - 1;\n                sum += prefixSums[end + 1] - prefixSums[start];\n            }\n        }\n        return sum;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int sumOddLengthSubarrays(vector<int>& arr) {\n        int n = arr.size();\n        vector<int> prefixSums(n + 1);\n        for (int i = 0; i < n; i++) {\n            prefixSums[i + 1] = prefixSums[i] + arr[i];\n        }\n        int sum = 0;\n        for (int start = 0; start < n; start++) {\n            for (int length = 1; start + length <= n; length += 2) {\n                int end = start + length - 1;\n                sum += prefixSums[end + 1] - prefixSums[start];\n            }\n        }\n        return sum;\n    }\n};\n```\n\n```C [sol2-C]\nint sumOddLengthSubarrays(int* arr, int arrSize) {\n    int prefixSums[arrSize + 1];\n    prefixSums[0] = 0;\n    for (int i = 0; i < arrSize; i++) {\n        prefixSums[i + 1] = prefixSums[i] + arr[i];\n    }\n    int sum = 0;\n    for (int start = 0; start < arrSize; start++) {\n        for (int length = 1; start + length <= arrSize; length += 2) {\n            int end = start + length - 1;\n            sum += prefixSums[end + 1] - prefixSums[start];\n        }\n    }\n    return sum;\n}\n```\n\n```go [sol2-Golang]\nfunc sumOddLengthSubarrays(arr []int) (sum int) {\n    n := len(arr)\n    prefixSums := make([]int, n+1)\n    for i, v := range arr {\n        prefixSums[i+1] = prefixSums[i] + v\n    }\n    for start := range arr {\n        for length := 1; start+length <= n; length += 2 {\n            end := start + length - 1\n            sum += prefixSums[end+1] - prefixSums[start]\n        }\n    }\n    return sum\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar sumOddLengthSubarrays = function(arr) {\n    const n = arr.length;\n    const prefixSums = new Array(n + 1).fill(0);\n    for (let i = 0; i < n; i++) {\n        prefixSums[i + 1] = prefixSums[i] + arr[i];\n    }\n    let sum = 0;\n    for (let start = 0; start < n; start++) {\n        for (let length = 1; start + length <= n; length += 2) {\n            const end = start + length - 1;\n            sum += prefixSums[end + 1] - prefixSums[start];\n        }\n    }\n    return sum;\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        sum = 0\n        n = len(arr)\n        prefixSums = [0] * (n + 1)\n        for i, v in enumerate(arr):\n            prefixSums[i + 1] = prefixSums[i] + v\n        for start in range(n):\n            length = 1\n            while start + length <= n:\n                end = start + length - 1\n                sum += prefixSums[end + 1] - prefixSums[start]\n                length += 2\n        return sum\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。需要 $O(n)$ 的时间计算前缀和数组 $\\textit{prefixSums}$，长度为奇数的子数组的数量是 $O(n^2)$，对于每个子数组需要 $O(1)$ 的时间计算子数组的和，因此总时间复杂度是 $O(n^2)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。需要创建长度为 $n + 1$ 的前缀和数组 $\\textit{prefixSums}$。\n\n#### 方法三：数学\n\n方法一和方法二都是通过计算每个子数组的和得到所有奇数长度子数组的和。可以换一种思路，数组中的每个元素都会在一个或多个奇数长度的子数组中出现，如果可以计算出每个元素在多少个长度为奇数的子数组中出现，即可得到所有奇数长度子数组的和。\n\n对于元素 $\\textit{arr}[i]$，记其左边和右边的元素个数分别为 $\\textit{leftCount}$ 和 $\\textit{rightCount}$，则 $\\textit{leftCount} = i$，$\\textit{rightCount} = n - i - 1$。如果元素 $\\textit{arr}[i]$ 在一个长度为奇数的子数组中，则在该子数组中，元素 $\\textit{arr}[i]$ 的左边和右边的元素个数一定同为奇数或同为偶数（注意 $0$ 也是偶数）。\n\n- 当元素 $\\textit{arr}[i]$ 的左边和右边的元素个数同为奇数时，在区间 $[0, \\textit{leftCount}]$ 范围内的奇数有 $\\textit{leftOdd} = \\Big\\lfloor \\dfrac{\\textit{leftCount} + 1}{2} \\Big\\rfloor$ 个，在区间 $[0, \\textit{rightCount}]$ 范围内的奇数有 $\\textit{rightOdd} = \\Big\\lfloor \\dfrac{\\textit{rightCount} + 1}{2} \\Big\\rfloor$ 个，包含元素 $\\textit{arr}[i]$ 的子数组个数为 $\\textit{leftOdd} \\times \\textit{rightOdd}$；\n\n- 当元素 $\\textit{arr}[i]$ 的左边和右边的元素个数同为偶数时，在区间 $[0, \\textit{leftCount}]$ 范围内的偶数有 $\\textit{leftEven} = \\Big\\lfloor \\dfrac{\\textit{leftCount}}{2} \\Big\\rfloor + 1$ 个，在区间 $[0, \\textit{rightCount}]$ 范围内的偶数有 $\\textit{rightEven} = \\Big\\lfloor \\dfrac{\\textit{rightCount}}{2} \\Big\\rfloor + 1$ 个，包含元素 $\\textit{arr}[i]$ 的子数组个数为 $\\textit{leftEven} \\times \\textit{rightEven}$。\n\n根据上述分析可知，包含元素 $\\textit{arr}[i]$ 的奇数长度子数组个数为 $\\textit{leftOdd} \\times \\textit{rightOdd} + \\textit{leftEven} \\times \\textit{rightEven}$，因此元素 $\\textit{arr}[i]$ 对奇数长度子数组元素和的贡献为 $\\textit{arr}[i] \\times (\\textit{leftOdd} \\times \\textit{rightOdd} + \\textit{leftEven} \\times \\textit{rightEven})$。\n\n```Java [sol3-Java]\nclass Solution {\n    public int sumOddLengthSubarrays(int[] arr) {\n        int sum = 0;\n        int n = arr.length;\n        for (int i = 0; i < n; i++) {\n            int leftCount = i, rightCount = n - i - 1;\n            int leftOdd = (leftCount + 1) / 2;\n            int rightOdd = (rightCount + 1) / 2;\n            int leftEven = leftCount / 2 + 1;\n            int rightEven = rightCount / 2 + 1;\n            sum += arr[i] * (leftOdd * rightOdd + leftEven * rightEven);\n        }\n        return sum;\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public int SumOddLengthSubarrays(int[] arr) {\n        int sum = 0;\n        int n = arr.Length;\n        for (int i = 0; i < n; i++) {\n            int leftCount = i, rightCount = n - i - 1;\n            int leftOdd = (leftCount + 1) / 2;\n            int rightOdd = (rightCount + 1) / 2;\n            int leftEven = leftCount / 2 + 1;\n            int rightEven = rightCount / 2 + 1;\n            sum += arr[i] * (leftOdd * rightOdd + leftEven * rightEven);\n        }\n        return sum;\n    }\n}\n```\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int sumOddLengthSubarrays(vector<int>& arr) {\n        int sum = 0;\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            int leftCount = i, rightCount = n - i - 1;\n            int leftOdd = (leftCount + 1) / 2;\n            int rightOdd = (rightCount + 1) / 2;\n            int leftEven = leftCount / 2 + 1;\n            int rightEven = rightCount / 2 + 1;\n            sum += arr[i] * (leftOdd * rightOdd + leftEven * rightEven);\n        }\n        return sum;\n    }\n};\n```\n\n```C [sol3-C]\nint sumOddLengthSubarrays(int* arr, int arrSize) {\n    int sum = 0;\n    for (int i = 0; i < arrSize; i++) {\n        int leftCount = i, rightCount = arrSize - i - 1;\n        int leftOdd = (leftCount + 1) / 2;\n        int rightOdd = (rightCount + 1) / 2;\n        int leftEven = leftCount / 2 + 1;\n        int rightEven = rightCount / 2 + 1;\n        sum += arr[i] * (leftOdd * rightOdd + leftEven * rightEven);\n    }\n    return sum;\n}\n```\n\n```go [sol3-Golang]\nfunc sumOddLengthSubarrays(arr []int) (sum int) {\n    n := len(arr)\n    for i, v := range arr {\n        leftCount, rightCount := i, n-i-1\n        leftOdd := (leftCount + 1) / 2\n        rightOdd := (rightCount + 1) / 2\n        leftEven := leftCount/2 + 1\n        rightEven := rightCount/2 + 1\n        sum += v * (leftOdd*rightOdd + leftEven*rightEven)\n    }\n    return sum\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar sumOddLengthSubarrays = function(arr) {\n    let sum = 0;\n    const n = arr.length;\n    for (let i = 0; i < n; i++) {\n        const leftCount = i, rightCount = n - i - 1;\n        const leftOdd = Math.floor((leftCount + 1) / 2);\n        const rightOdd = Math.floor((rightCount + 1) / 2);\n        const leftEven = Math.floor(leftCount / 2) + 1;\n        const rightEven = Math.floor(rightCount / 2) + 1;\n        sum += arr[i] * (leftOdd * rightOdd + leftEven * rightEven);\n    }\n    return sum;\n};\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        sum = 0\n        n = len(arr)\n        for i, v in enumerate(arr):\n            leftCount, rightCount = i, n - i - 1\n            leftOdd = (leftCount + 1) // 2\n            rightOdd = (rightCount + 1) // 2\n            leftEven = leftCount // 2 + 1\n            rightEven = rightCount // 2 + 1\n            sum += v * (leftOdd * rightOdd + leftEven * rightEven)\n        return sum\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。需要遍历数组 $\\textit{arr}$ 一次，对于每个元素，需要 $O(1)$ 的时间计算该元素在奇数长度子数组的和中的贡献值，因此总时间复杂度是 $O(n)$。\n\n- 空间复杂度：$O(1)$。"
}