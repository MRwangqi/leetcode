{
	"titleSlug": "add-strings",
	"slug": "zi-fu-chuan-xiang-jia-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/add-strings/solution/zi-fu-chuan-xiang-jia-by-leetcode-solution/",
	"content": "#### 方法一：模拟\n\n**思路与算法**\n\n本题我们只需要对两个大整数模拟「竖式加法」的过程。竖式加法就是我们平常学习生活中常用的对两个整数相加的方法，回想一下我们在纸上对两个整数相加的操作，是不是如下图将相同数位对齐，从低到高逐位相加，如果当前位和超过 $10$，则向高位进一位？因此我们只要将这个过程用代码写出来即可。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/415/1.png){:width=\"50%\"}\n\n具体实现也不复杂，我们定义两个指针 $i$ 和 $j$ 分别指向 $\\textit{num}_1$ 和 $\\textit{num}_2$ 的末尾，即最低位，同时定义一个变量 $\\textit{add}$ 维护当前是否有进位，然后从末尾到开头逐位相加即可。你可能会想两个数字位数不同怎么处理，这里我们统一在指针当前下标处于负数的时候返回 $0$，等价于**对位数较短的数字进行了补零操作**，这样就可以除去两个数字位数不同情况的处理，具体可以看下面的代码。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string addStrings(string num1, string num2) {\n        int i = num1.length() - 1, j = num2.length() - 1, add = 0;\n        string ans = \"\";\n        while (i >= 0 || j >= 0 || add != 0) {\n            int x = i >= 0 ? num1[i] - '0' : 0;\n            int y = j >= 0 ? num2[j] - '0' : 0;\n            int result = x + y + add;\n            ans.push_back('0' + result % 10);\n            add = result / 10;\n            i -= 1;\n            j -= 1;\n        }\n        // 计算完以后的答案需要翻转过来\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String addStrings(String num1, String num2) {\n        int i = num1.length() - 1, j = num2.length() - 1, add = 0;\n        StringBuffer ans = new StringBuffer();\n        while (i >= 0 || j >= 0 || add != 0) {\n            int x = i >= 0 ? num1.charAt(i) - '0' : 0;\n            int y = j >= 0 ? num2.charAt(j) - '0' : 0;\n            int result = x + y + add;\n            ans.append(result % 10);\n            add = result / 10;\n            i--;\n            j--;\n        }\n        // 计算完以后的答案需要翻转过来\n        ans.reverse();\n        return ans.toString();\n    }\n}\n```\n\n```golang [sol1-Golang]\nfunc addStrings(num1 string, num2 string) string {\n    add := 0\n    ans := \"\"\n    for i, j := len(num1) - 1, len(num2) - 1; i >= 0 || j >= 0 || add != 0; i, j = i - 1, j - 1 {\n        var x, y int\n        if i >= 0 {\n            x = int(num1[i] - '0')\n        }\n        if j >= 0 {\n            y = int(num2[j] - '0')\n        }\n        result := x + y + add\n        ans = strconv.Itoa(result%10) + ans\n        add = result / 10\n    }\n    return ans\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar addStrings = function(num1, num2) {\n    let i = num1.length - 1, j = num2.length - 1, add = 0;\n    const ans = [];\n    while (i >= 0 || j >= 0 || add != 0) {\n        const x = i >= 0 ? num1.charAt(i) - '0' : 0;\n        const y = j >= 0 ? num2.charAt(j) - '0' : 0;\n        const result = x + y + add;\n        ans.push(result % 10);\n        add = Math.floor(result / 10);\n        i -= 1;\n        j -= 1;\n    }\n    return ans.reverse().join('');\n};\n```\n\n```C [sol1-C]\nchar* addStrings(char* num1, char* num2) {\n    int i = strlen(num1) - 1, j = strlen(num2) - 1, add = 0;\n    char* ans = (char*)malloc(sizeof(char) * (fmax(i, j) + 3));\n    int len = 0;\n    while (i >= 0 || j >= 0 || add != 0) {\n        int x = i >= 0 ? num1[i] - '0' : 0;\n        int y = j >= 0 ? num2[j] - '0' : 0;\n        int result = x + y + add;\n        ans[len++] = '0' + result % 10;\n        add = result / 10;\n        i--, j--;\n    }\n    // 计算完以后的答案需要翻转过来\n    for (int i = 0; 2 * i < len; i++) {\n        int t = ans[i];\n        ans[i] = ans[len - i - 1], ans[len - i - 1] = t;\n    }\n    ans[len++] = 0;\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\max(\\textit{len}_1,\\textit{len}_2))$，其中 $\\textit{len}_1=\\textit{num}_1.\\text{length}$，$\\textit{len}_2=\\textit{num}_2.\\text{length}$。竖式加法的次数取决于较大数的位数。\n- 空间复杂度：$O(1)$。除答案外我们只需要常数空间存放若干变量。在 Java 解法中使用到了 `StringBuffer`，故 Java 解法的空间复杂度为 $O(n)$。"
}