{
	"titleSlug": "beautiful-array",
	"slug": "piao-liang-shu-zu-by-leetcode",
	"url": "https://leetcode-cn.com/problems/beautiful-array/solution/piao-liang-shu-zu-by-leetcode/",
	"content": "#### 方法一：分治\n\n**分析**\n\n首先我们可以发现一个不错的性质，如果某个数组 $[a_1, a_2, \\cdots, a_n]$ 是漂亮的，那么对这个数组进行仿射变换，得到的新数组 $[ka_1+b, ka_2+b, \\cdots, ka_n+b]$ 也是漂亮的（其中 $k \\neq 0$）。那么我们就有了一个想法：将数组分成两部分 `left` 和 `right`，分别求出一个漂亮的数组，然后将它们进行仿射变换，使得不存在满足下面条件的三元组：\n\n* `A[k] * 2 = A[i] + A[j], i < k < j`；\n* `A[i]` 来自 `left` 部分，`A[j]` 来自 `right` 部分。\n\n可以发现，等式 `A[k] * 2 = A[i] + A[j]` 的左侧是一个偶数，右侧的两个元素分别来自两个部分。要想等式恒不成立，一个简单的办法就是让 `left` 部分的数都是奇数，`right` 部分的数都是偶数。\n\n因此我们将所有的奇数放在 `left` 部分，所有的偶数放在 `right` 部分，这样可以保证等式恒不成立。对于 `[1..N]` 的排列，`left` 部分包括 `(N + 1) / 2` 个奇数，`right` 部分包括 `N / 2` 个偶数。对于 `left` 部分，我们进行 `k = 1/2, b = 1/2` 的仿射变换，把这些奇数一一映射到不超过 `(N + 1) / 2` 的整数。对于 `right` 部分，我们进行 `k = 1/2, b = 0` 的仿射变换，把这些偶数一一映射到不超过 `N / 2` 的整数。经过映射，`left` 和 `right` 部分变成了和原问题一样，但规模减少一半的子问题，这样就可以使用分治算法解决了。\n\n**算法**\n\n在 `[1..N]` 中有 `(N + 1) / 2` 个奇数和 `N / 2` 个偶数。我们将其分治成两个子问题，其中一个为不超过 `(N + 1) / 2` 的整数，并映射到所有的奇数；另一个为不超过 `N / 2` 的整数，并映射到所有的偶数。\n\n```Java [sol1]\nclass Solution {\n    Map<Integer, int[]> memo;\n    public int[] beautifulArray(int N) {\n        memo = new HashMap();\n        return f(N);\n    }\n\n    public int[] f(int N) {\n        if (memo.containsKey(N))\n            return memo.get(N);\n\n        int[] ans = new int[N];\n        if (N == 1) {\n            ans[0] = 1;\n        } else {\n            int t = 0;\n            for (int x: f((N+1)/2))  // odds\n                ans[t++] = 2*x - 1;\n            for (int x: f(N/2))  // evens\n                ans[t++] = 2*x;\n        }\n        memo.put(N, ans);\n        return ans;\n    }\n}\n```\n\n```Python [sol1]\nclass Solution:\n    def beautifulArray(self, N):\n        memo = {1: [1]}\n        def f(N):\n            if N not in memo:\n                odds = f((N+1)/2)\n                evens = f(N/2)\n                memo[N] = [2*x-1 for x in odds] + [2*x for x in evens]\n            return memo[N]\n        return f(N)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log N)$，代码中的函数 `f` 执行的次数为 $O(\\log N)$，每次执行的时间复杂度为 $O(N)$。\n\n* 空间复杂度：$O(N \\log N)$。"
}