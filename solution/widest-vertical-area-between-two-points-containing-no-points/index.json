{
	"titleSlug": "widest-vertical-area-between-two-points-containing-no-points",
	"slug": "by-stormsunshine-7pml",
	"url": "https://leetcode-cn.com/problems/widest-vertical-area-between-two-points-containing-no-points/solution/by-stormsunshine-7pml/",
	"content": "# 解法\r\n\r\n## 思路和算法\r\n\r\n由于垂直区域的宽度只和每个点的横坐标有关，因此只需要知道每个点的横坐标即可计算最宽垂直区域的宽度。\r\n\r\n假设有两个点的横坐标分别是 $x_1$ 和 $x_2$，其中 $x_1 \\le x_2$，如果 $x_1$ 和 $x_2$ 之间的区域是不包含任何点的垂直区域，则其他任何点的横坐标 $x$ 都满足 $x \\le x_1$ 或 $x \\ge x_2$，即 $x_1 < x < x_2$ 的情况是不符合垂直区域的要求的。因此，需要将所有点的横坐标升序排序，排序后的横坐标中的相邻两个横坐标之间的区域是不包含任何点的垂直区域。\r\n\r\n将所有点的横坐标升序排序之后，遍历排序后的横坐标，对于每一对相邻的横坐标计算横坐标之差，即为这对相邻的横坐标之间的垂直区域的宽度。遍历结束之后，即可得到最宽垂直区域的宽度。\r\n\r\n## 代码\r\n\r\n```Java [sol1-Java]\r\nclass Solution {\r\n    public int maxWidthOfVerticalArea(int[][] points) {\r\n        int n = points.length;\r\n        int[] xVals = new int[n];\r\n        for (int i = 0; i < n; i++) {\r\n            xVals[i] = points[i][0];\r\n        }\r\n        Arrays.sort(xVals);\r\n        int maxWidth = 0;\r\n        for (int i = 1; i < n; i++) {\r\n            int width = xVals[i] - xVals[i - 1];\r\n            maxWidth = Math.max(maxWidth, width);\r\n        }\r\n        return maxWidth;\r\n    }\r\n}\r\n```\r\n\r\n```C# [sol1-C#]\r\npublic class Solution {\r\n    public int MaxWidthOfVerticalArea(int[][] points) {\r\n        int n = points.Length;\r\n        int[] xVals = new int[n];\r\n        for (int i = 0; i < n; i++) {\r\n            xVals[i] = points[i][0];\r\n        }\r\n        Array.Sort(xVals);\r\n        int maxWidth = 0;\r\n        for (int i = 1; i < n; i++) {\r\n            int width = xVals[i] - xVals[i - 1];\r\n            maxWidth = Math.Max(maxWidth, width);\r\n        }\r\n        return maxWidth;\r\n    }\r\n}\r\n```\r\n\r\n## 复杂度分析\r\n\r\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{points}$ 的长度。需要 $O(n)$ 的时间将每个点的横坐标填入新数组，对新数组排序需要 $O(n \\log n)$ 的时间，遍历排序后的新数组计算最宽垂直区域的宽度需要 $O(n)$ 的时间，时间复杂度是 $O(n \\log n)$。\r\n\r\n- 空间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{points}$ 的长度。新数组需要 $O(n)$ 的空间，对新数组排序需要 $O(\\log n)$ 的递归调用栈空间，空间复杂度是 $O(n)$。"
}