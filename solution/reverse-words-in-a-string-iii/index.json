{
	"titleSlug": "reverse-words-in-a-string-iii",
	"slug": "fan-zhuan-zi-fu-chuan-zhong-de-dan-ci-iii-by-lee-2",
	"url": "https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/solution/fan-zhuan-zi-fu-chuan-zhong-de-dan-ci-iii-by-lee-2/",
	"content": "#### 方法一：使用额外空间\n\n**思路与算法**\n\n开辟一个新字符串。然后从头到尾遍历原字符串，直到找到空格为止，此时找到了一个单词，并能得到单词的起止位置。随后，根据单词的起止位置，可以将该单词逆序放到新字符串当中。如此循环多次，直到遍历完原字符串，就能得到翻转后的结果。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string reverseWords(string s) {\n        string ret;\n        int length = s.length();\n        int i = 0;\n        while (i < length) {\n            int start = i;\n            while (i < length && s[i] != ' ') {\n                i++;\n            }\n            for (int p = start; p < i; p++) {\n                ret.push_back(s[start + i - 1 - p]);\n            }\n            while (i < length && s[i] == ' ') {\n                i++;\n                ret.push_back(' ');\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String reverseWords(String s) {\n        StringBuffer ret = new StringBuffer();\n        int length = s.length();\n        int i = 0;\n        while (i < length) {\n            int start = i;\n            while (i < length && s.charAt(i) != ' ') {\n                i++;\n            }\n            for (int p = start; p < i; p++) {\n                ret.append(s.charAt(start + i - 1 - p));\n            }\n            while (i < length && s.charAt(i) == ' ') {\n                i++;\n                ret.append(' ');\n            }\n        }\n        return ret.toString();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar reverseWords = function(s) {\n    const ret = [];\n    const length = s.length;\n    let i = 0;\n    while (i < length) {\n        let start = i;\n        while (i < length && s.charAt(i) != ' ') {\n            i++;\n        }\n        for (let p = start; p < i; p++) {\n            ret.push(s.charAt(start + i - 1 - p));\n        }\n        while (i < length && s.charAt(i) == ' ') {\n            i++;\n            ret.push(' ');\n        }\n    }\n    return ret.join('');\n};\n```\n\n```C [sol1-C]\nchar* reverseWords(char* s) {\n    int length = strlen(s);\n    char* ret = (char*)malloc(sizeof(char) * (length + 1));\n    ret[length] = 0;\n    int i = 0;\n    while (i < length) {\n        int start = i;\n        while (i < length && s[i] != ' ') {\n            i++;\n        }\n        for (int p = start; p < i; p++) {\n            ret[p] = s[start + i - 1 - p];\n        }\n        while (i < length && s[i] == ' ') {\n            ret[i] = ' ';\n            i++;\n        }\n    }\n    return ret;\n}\n```\n\n```golang [sol1-Golang]\nfunc reverseWords(s string) string {\n    length := len(s)\n    ret := []byte{}\n    for i := 0; i < length; {\n        start := i\n        for i < length && s[i] != ' ' {\n            i++\n        }\n        for p := start; p < i; p++ {\n            ret = append(ret, s[start + i - 1 - p])\n        }\n        for i < length && s[i] == ' ' {\n            i++\n            ret = append(ret, ' ')\n        }\n    }\n    return string(ret)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为字符串的长度。原字符串中的每个字符都会在 $O(1)$ 的时间内放入新字符串中。\n\n- 空间复杂度：$O(N)$。我们开辟了与原字符串等大的空间。\n\n#### 方法二：原地解法\n\n**思路与算法**\n\n此题也可以直接在原字符串上进行操作，避免额外的空间开销。当找到一个单词的时候，我们交换字符串第一个字符与倒数第一个字符，随后交换第二个字符与倒数第二个字符……如此反复，就可以在原空间上翻转单词。\n\n需要注意的是，原地解法在某些语言（比如 Java，JavaScript）中不适用，因为在这些语言中 `String` 类型是一个不可变的类型。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic: \n    string reverseWords(string s) {\n        int length = s.length();\n        int i = 0;\n        while (i < length) {\n            int start = i;\n            while (i < length && s[i] != ' ') {\n                i++;\n            }\n\n            int left = start, right = i - 1;\n            while (left < right) {\n                swap(s[left], s[right]);\n                left++;\n                right--;\n            }\n            while (i < length && s[i] == ' ') {\n                i++;\n            }\n        }\n        return s;\n    }\n};\n```\n\n```C [sol2-C]\nchar* reverseWords(char* s) {\n    int length = strlen(s);\n    int i = 0;\n    while (i < length) {\n        int start = i;\n        while (i < length && s[i] != ' ') {\n            i++;\n        }\n\n        int left = start, right = i - 1;\n        while (left < right) {\n            char tmp = s[left];\n            s[left] = s[right], s[right] = tmp;\n            left++;\n            right--;\n        }\n        while (i < length && s[i] == ' ') {\n            i++;\n        }\n    }\n    return s;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$。字符串中的每个字符要么在 $O(1)$ 的时间内被交换到相应的位置，要么因为是空格而保持不动。\n\n- 空间复杂度：$O(1)$。因为不需要开辟额外的数组。"
}