{
	"titleSlug": "the-number-of-weak-characters-in-the-game",
	"slug": "you-xi-zhong-ruo-jiao-se-de-shu-liang-by-3d2g",
	"url": "https://leetcode-cn.com/problems/the-number-of-weak-characters-in-the-game/solution/you-xi-zhong-ruo-jiao-se-de-shu-liang-by-3d2g/",
	"content": "#### 方法一：排序\n\n**思路**\n\n对于每个角色，我们需要判断是否存在一个攻击值和防御值都高于它的角色，从而确定该角色是否为弱角色。我们可以按角色的某个属性（比如攻击值）从大到小的顺序遍历，同时记录已经遍历过的角色防御值的最大值 $\\textit{maxDef}$。对于当前角色 $p$，如果 $p$ 的防御值严格小于 $\\textit{maxDef}$，那么说明存在防御值比 $p$ 高的角色（记作 $q$），如果此时 $q$ 的攻击值也严格大于 $p$，则可以确定 $p$ 为弱角色。\n\n如何保证当 $q$ 的防御值 $\\textit{maxDef}$ 严格大于 $p$ 的防御值时，$q$ 的攻击值一定大于 $p$ 的攻击值，这是比较难处理的一点，因为可能存在攻击值相同的角色。\n+ 最简单的处理办法就是将攻击值相同的角色进行单独分组，严格保证攻击值相同的角色被分到同一组，遍历时记录攻击值严格大于当前分组且防御值最大的角色 $q$。遍历当前分组时，如果发现角色 $p$ 的防御值严格小于 $q$ 的防御值，则此时可以肯定角色 $p$ 属于弱角色。\n+ 实际处理时，对于攻击值相同的角色，我们按照其防御值从小到大进行排序且按照攻击值从大到小开始遍历，这样就可以保证当前已经遍历过的最大防御值角色 $q$ 的防御值 $\\textit{maxDef}$ 严格大于当前角色 $p$ 的防御值时，则此时 $q$ 的攻击值一定严格大于 $p$ 的攻击值。因为相同的攻击值按照防御值从大到小进行排列，如果出现已经遍历过的角色 $q$ 的防御值大于 $p$ 的防御值，则此时我们可以肯定可以推理出角色 $q$ 与角色 $p$ 攻击值一定不相同。\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    public int numberOfWeakCharacters(int[][] properties) {\n        Arrays.sort(properties, (o1, o2) -> {\n            return o1[0] == o2[0] ? (o1[1] - o2[1]) : (o2[0] - o1[0]);\n        });\n        int maxDef = 0;\n        int ans = 0;\n        for (int[] p : properties) {\n            if (p[1] < maxDef) {\n                ans++;\n            } else {\n                maxDef = p[1];\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numberOfWeakCharacters(vector<vector<int>>& properties) {\n        sort(properties.begin(), properties.end(), [](const vector<int> & a, const vector<int> & b) {\n            return a[0] == b[0] ? (a[1] < b[1]) : (a[0] > b[0]);\n        });\n        \n        int maxDef = 0;\n        int ans = 0;\n        for (auto & p : properties) {\n            if (p[1] < maxDef) {\n                ans++;\n            } else {\n                maxDef = p[1];\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int NumberOfWeakCharacters(int[][] properties) {\n        Array.Sort(properties, (o1, o2) => {\n            return o1[0] == o2[0] ? (o1[1] - o2[1]) : (o2[0] - o1[0]);\n        });\n        int maxDef = 0;\n        int ans = 0;\n        foreach (int[] p in properties) {\n            if (p[1] < maxDef) {\n                ans++;\n            } else {\n                maxDef = p[1];\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:\n        properties.sort(key=lambda x: (-x[0], x[1]))\n        ans = 0\n        maxDef = 0\n        for _, def_ in properties:\n            if maxDef > def_:\n                ans += 1\n            else:\n                maxDef = max(maxDef, def_)\n        return ans\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n\nint cmp(const void * pa, const void *pb) {\n    int * a = *((int**)pa);\n    int * b = *((int**)pb);\n    return a[0] == b[0] ? (a[1] - b[1]) : (b[0] - a[0]);\n}\n\nint numberOfWeakCharacters(int** properties, int propertiesSize, int* propertiesColSize){\n    qsort(properties, propertiesSize, sizeof(int *), cmp);\n    int ans = 0;\n    int maxDef = 0;\n    for (int i = 0; i < propertiesSize; i++) {\n        if (properties[i][1] < maxDef) {\n            ans++;\n        } else {\n            maxDef = MAX(maxDef, properties[i][1]);\n        }\n    }\n    return ans;\n}\n```\n\n```go [sol1-Golang]\nfunc numberOfWeakCharacters(properties [][]int) (ans int) {\n    sort.Slice(properties, func(i, j int) bool {\n        p, q := properties[i], properties[j]\n        return p[0] > q[0] || p[0] == q[0] && p[1] < q[1]\n    })\n    maxDef := 0\n    for _, p := range properties {\n        if p[1] < maxDef {\n            ans++\n        } else {\n            maxDef = p[1]\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar numberOfWeakCharacters = function(properties) {\n    properties.sort((o1, o2) => {\n        return o1[0] === o2[0] ? (o1[1] - o2[1]) : (o2[0] - o1[0]);\n    });\n    let maxDef = 0;\n    let ans = 0;\n    for (const p of properties) {\n        if (p[1] < maxDef) {\n            ans++;\n        } else {\n            maxDef = p[1];\n        }\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 为数组的长度。排序的时间复杂度为 $O(n \\log n)$，遍历数组的时间为 $O(n)$，总的时间复杂度为 $O(n \\log n + n) = O(n \\log n)$。\n\n- 空间复杂度：$O(\\log n)$，其中 $n$ 为数组的长度。排序时使用的栈空间为 $O(\\log n)$。\n\n#### 方法二：单调栈\n\n**思路**\n\n对于角色 $p$，如果我们找到一个角色 $q$ 的防御值与攻击值都严格高于 $p$ 的攻击值和防御值，则我们认为角色 $p$ 为弱角色。\n+ 我们联想到使用单调递增栈的解法，单调递增栈中保证栈内所有的元素都按照从小到大进行排列。按照角色攻击值的大小从低到高依次遍历每个元素，使用单调递增栈保存所有角色的防御值，遍历时如果发现栈顶的角色 $p$ 的防御值小于当前的角色 $q$ 的防御值，则可以认为找到攻击值和防御值都严格大于 $p$ 的角色 $q$。\n+ 如果所有角色的攻击值都不相同，则上述的单调递增栈的解法比较简单，难点在于如何处理攻击值相同但防御值不同的角色比较问题。我们按照攻击值相同时防御值从大到小进行排序，这样即可保证攻击值相同但防御值不同时的角色在进行比较时不会产生计数。\n\n**代码**\n\n```Java [sol2-Java]\nclass Solution {\n    public int numberOfWeakCharacters(int[][] properties) {\n        Arrays.sort(properties, (o1, o2) -> {\n            return o1[0] == o2[0] ? (o2[1] - o1[1]) : (o1[0] - o2[0]);\n        });\n        int ans = 0;\n        Deque<Integer> st = new ArrayDeque<Integer>();\n        for (int[] p : properties) {\n            while (!st.isEmpty() && st.peek() < p[1]) {\n                st.pop();\n                ans++;\n            }\n            st.push(p[1]);\n        }\n        return ans;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int numberOfWeakCharacters(vector<vector<int>>& properties) {\n        sort(begin(properties), end(properties), [](const vector<int> & a, const vector<int> & b) {\n            return a[0] == b[0] ? (a[1] > b[1]) : (a[0] < b[0]);\n        });\n        stack<int> st;\n        int ans = 0;\n        for (auto & p: properties) {\n            while (!st.empty() && st.top() < p[1]) {\n                ++ans;\n                st.pop();\n            }\n            st.push(p[1]);\n        }\n        return ans;\n    }\n};\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int NumberOfWeakCharacters(int[][] properties) {\n        Array.Sort(properties, (o1, o2) => {\n            return o1[0] == o2[0] ? (o2[1] - o1[1]) : (o1[0] - o2[0]);\n        });\n        int ans = 0;\n        Stack<int> st = new Stack<int>();\n        foreach (int[] p in properties) {\n            while (st.Count > 0 && st.Peek() < p[1]) {\n                st.Pop();\n                ans++;\n            }\n            st.Push(p[1]);\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:\n        properties.sort(key = lambda x: (x[0], -x[1]))\n        ans = 0\n        st = []\n        for _, def_ in properties:\n            while st and st[-1] < def_:\n                st.pop()\n                ans += 1\n            st.append(def_)\n        return ans\n```\n\n```C [sol2-C]\nint cmp(const void * pa, const void *pb) {\n    int * a = *((int**)pa);\n    int * b = *((int**)pb);\n    return a[0] == b[0] ? (b[1] - a[1]) : (a[0] - b[0]);\n}\n\nint numberOfWeakCharacters(int** properties, int propertiesSize, int* propertiesColSize){\n    qsort(properties, propertiesSize, sizeof(int *), cmp);\n    int * stack = (int *)malloc(sizeof(int) * propertiesSize);\n    int ans = 0;\n    int stackSize = 0;\n    for (int i = 0; i < propertiesSize; i++) {\n        while (stackSize > 0 && stack[stackSize - 1] < properties[i][1]) {\n            stackSize--;\n            ans++;\n        }\n        stack[stackSize++] = properties[i][1];\n    }\n    free(stack);\n    return ans;\n}\n```\n\n```go [sol2-Golang]\nfunc numberOfWeakCharacters(properties [][]int) (ans int) {\n    sort.Slice(properties, func(i, j int) bool {\n        p, q := properties[i], properties[j]\n        return p[0] < q[0] || p[0] == q[0] && p[1] > q[1]\n    })\n    st := []int{}\n    for _, p := range properties {\n        for len(st) > 0 && st[len(st)-1] < p[1] {\n            st = st[:len(st)-1]\n            ans++\n        }\n        st = append(st, p[1])\n    }\n    return\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar numberOfWeakCharacters = function(properties) {\n    properties.sort((o1, o2) => {\n        return o1[0] === o2[0] ? (o2[1] - o1[1]) : (o1[0] - o2[0]);\n    });\n    let ans = 0;\n    const st = [];\n    for (const p of properties) {\n        while (st.length && st[st.length - 1] < p[1]) {\n            st.pop();\n            ans++;\n        }\n        st.push(p[1]);\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 为数组的长度。排序的时间复杂度为 $O(n \\log n)$，然后需要一次遍历的时间为 $O(n)$，总的时间复杂度 $O(n \\log n + n) = O(n \\log n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 为数组的长度。需要栈来保存中间变量。"
}