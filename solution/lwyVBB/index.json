{
	"titleSlug": "lwyVBB",
	"slug": "wai-xing-yu-yan-shi-fou-pai-xu-by-leetco-75e5",
	"url": "https://leetcode-cn.com/problems/lwyVBB/solution/wai-xing-yu-yan-shi-fou-pai-xu-by-leetco-75e5/",
	"content": "#### 方法一：直接遍历\n\n**思路与算法**\n\n题目要求按照给定的字母表 $\\textit{order}$ 的顺序，检测给定的字符串数组是否按照 $\\textit{order}$ 的字典升序排列，我们只需要依次检测 $\\textit{strs}$ 中的字符串前一个字符串和后一个字符串在给定的字母表下小的字典序即可。具体检测如下：\n\n+ 首先将给定的 $\\textit{order}$ 转化为字典序索引 $\\textit{index}$，$\\textit{index}[i]$ 表示字符 $i$ 在字母表 $\\textit{order}$ 的排序索引，$\\textit{index}[i] > \\textit{index}[j]$ 即表示字符 $i$ 在字母表中的字典序比字符 $j$ 的字典序大，$\\textit{index}[i] < \\textit{index}[j]$ 即表示字符 $i$ 在字母表中的字典序比字符 $j$ 的字典序小。\n\n+ 依次检测第 $i$ 个单词 $\\textit{strs}[i]$ 与第 $i-1$ 个单词 $\\textit{strs}[i-1]$ 的字典序大小，我们可以依次判断两个单词中从左到右每个字符的字典序大小，当第一次出现两个字符的字典序不同时，即可判断两个字符串的字典序的大小。\n\n+ 特殊情况需要处理，设 $\\textit{strs}[i]$ 的长度为 $m$，$\\textit{strs}[i]$ 的长度小于 $\\textit{strs}[i-1]$ 的长度且 $\\textit{strs}[i-1]$ 的前 $m$ 个字符与 $\\textit{strs}[i-1]$ 的前 $m$ 个字符相等，此时 $\\textit{strs}[i-1]$ 的字典序大于 $\\textit{strs}[i]$ 的字典序。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\n        index = {c: i for i, c in enumerate(order)}\n        return all(s <= t for s, t in pairwise([index[c] for c in word] for word in words))\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isAlienSorted(String[] words, String order) {\n        int[] index = new int[26];\n        for (int i = 0; i < order.length(); ++i) {\n            index[order.charAt(i) - 'a'] = i;\n        }\n        for (int i = 1; i < words.length; i++) {\n            boolean valid = false;\n            for (int j = 0; j < words[i - 1].length() && j < words[i].length(); j++) {\n                int prev = index[words[i - 1].charAt(j) - 'a'];\n                int curr = index[words[i].charAt(j) - 'a'];\n                if (prev < curr) {\n                    valid = true;\n                    break;\n                } else if (prev > curr) {\n                    return false;\n                }\n            }\n            if (!valid) {\n                /* 比较两个字符串的长度 */\n                if (words[i - 1].length() > words[i].length()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isAlienSorted(vector<string>& words, string order) {\n        vector<int> index(26);\n        for (int i = 0; i < order.size(); i++) {\n            index[order[i] - 'a'] = i;\n        }\n        for (int i = 1; i < words.size(); i++) {\n            bool valid = false;\n            for (int j = 0; j < words[i - 1].size() && j < words[i].size(); j++) {\n                int prev = index[words[i - 1][j] - 'a'];\n                int curr = index[words[i][j] - 'a'];\n                if (prev < curr) {\n                    valid = true;\n                    break;\n                } else if (prev > curr) {\n                    return false;\n                }\n            }\n            if (!valid) {\n                /* 比较两个字符串的长度 */\n                if (words[i - 1].size() > words[i].size()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool IsAlienSorted(string[] words, string order) {\n        int[] index = new int[26];\n        for (int i = 0; i < order.Length; ++i) {\n            index[order[i] - 'a'] = i;\n        }\n        for (int i = 1; i < words.Length; i++) {\n            bool valid = false;\n            for (int j = 0; j < words[i - 1].Length && j < words[i].Length; j++) {\n                int prev = index[words[i - 1][j] - 'a'];\n                int curr = index[words[i][j] - 'a'];\n                if (prev < curr) {\n                    valid = true;\n                    break;\n                } else if (prev > curr) {\n                    return false;\n                }\n            }\n            if (!valid) {\n                /* 比较两个字符串的长度 */\n                if (words[i - 1].Length > words[i].Length) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C [sol1-C]\nbool isAlienSorted(char ** words, int wordsSize, char * order){\n    int index[26];\n    int len = strlen(order);\n    for (int i = 0; i < len; i++) {\n        index[order[i] - 'a'] = i;\n    }\n    for (int i = 1; i < wordsSize; i++) {\n        bool valid = false;\n        int l1 = strlen(words[i - 1]);\n        int l2 = strlen(words[i]);\n        int n = l1 < l2 ? l1 : l2;\n        for (int j = 0; j < n; j++) {\n            int prev = index[words[i - 1][j] - 'a'];\n            int curr = index[words[i][j] - 'a'];\n            if (prev < curr) {\n                valid = true;\n                break;\n            } else if (prev > curr) {\n                return false;\n            }\n        }\n        if (!valid) {\n            /* 比较两个字符串的长度 */\n            if (l1 > l2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar isAlienSorted = function(words, order) {\n    const index = new Array(26).fill(0);\n    for (let i = 0; i < order.length; ++i) {\n        index[order[i].charCodeAt() - 'a'.charCodeAt()] = i;\n    }\n    for (let i = 1; i < words.length; i++) {\n        let valid = false;\n        for (let j = 0; j < words[i - 1].length && j < words[i].length; j++) {\n            let prev = index[words[i - 1][j].charCodeAt() - 'a'.charCodeAt()];\n            let curr = index[words[i][j].charCodeAt() - 'a'.charCodeAt()];\n            if (prev < curr) {\n                valid = true;\n                break;\n            } else if (prev > curr) {\n                return false;\n            }\n        }\n        if (!valid) {\n            /* 比较两个字符串的长度 */\n            if (words[i - 1].length > words[i].length) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n```\n\n```go [sol1-Golang]\nfunc isAlienSorted(words []string, order string) bool {\n    index := [26]int{}\n    for i, c := range order {\n        index[c-'a'] = i\n    }\nnext:\n    for i := 1; i < len(words); i++ {\n        for j := 0; j < len(words[i-1]) && j < len(words[i]); j++ {\n            pre, cur := index[words[i-1][j]-'a'], index[words[i][j]-'a']\n            if pre > cur {\n                return false\n            }\n            if pre < cur {\n                continue next\n            }\n        }\n        if len(words[i-1]) > len(words[i]) {\n            return false\n        }\n    }\n    return true\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m \\times n)$，其中 $m$ 为字符串数组的长度，$n$ 为数组中字符串的平均长度，每个字符串需要前一个字符串进行比较，因此时间复杂度为 $O(m \\times n)$。\n\n- 空间复杂度：$O(C)$。其中 $C$ 表示字母表的长度，需要存储字母表 $\\textit{order}$ 每个字符的字典序索引，题目中给定的字母表的长度为 $C = 26$。"
}