{
	"titleSlug": "repeated-dna-sequences",
	"slug": "zhong-fu-de-dnaxu-lie-by-leetcode-soluti-z8zn",
	"url": "https://leetcode-cn.com/problems/repeated-dna-sequences/solution/zhong-fu-de-dnaxu-lie-by-leetcode-soluti-z8zn/",
	"content": "#### 方法一：哈希表\n\n我们可以用一个哈希表统计 $s$ 所有长度为 $10$ 的子串的出现次数，返回所有出现次数超过 $10$ 的子串。\n\n代码实现时，可以一边遍历子串一边记录答案，为了不重复记录答案，我们只统计当前出现次数为 $2$ 的子串。\n\n```Python [sol1-Python3]\nL = 10\n\nclass Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        ans = []\n        cnt = defaultdict(int)\n        for i in range(len(s) - L + 1):\n            sub = s[i : i + L]\n            cnt[sub] += 1\n            if cnt[sub] == 2:\n                ans.append(sub)\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\n    const int L = 10;\npublic:\n    vector<string> findRepeatedDnaSequences(string s) {\n        vector<string> ans;\n        unordered_map<string, int> cnt;\n        int n = s.length();\n        for (int i = 0; i <= n - L; ++i) {\n            string sub = s.substr(i, L);\n            if (++cnt[sub] == 2) {\n                ans.push_back(sub);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    static final int L = 10;\n\n    public List<String> findRepeatedDnaSequences(String s) {\n        List<String> ans = new ArrayList<String>();\n        Map<String, Integer> cnt = new HashMap<String, Integer>();\n        int n = s.length();\n        for (int i = 0; i <= n - L; ++i) {\n            String sub = s.substring(i, i + L);\n            cnt.put(sub, cnt.getOrDefault(sub, 0) + 1);\n            if (cnt.get(sub) == 2) {\n                ans.add(sub);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    const int L = 10;\n\n    public IList<string> FindRepeatedDnaSequences(string s) {\n        IList<string> ans = new List<string>();\n        Dictionary<string, int> cnt = new Dictionary<string, int>();\n        int n = s.Length;\n        for (int i = 0; i <= n - L; ++i) {\n            string sub = s.Substring(i, L);\n            if (!cnt.ContainsKey(sub)) {\n                cnt.Add(sub, 1);\n            } else {\n                ++cnt[sub];\n            }\n            if (cnt[sub] == 2) {\n                ans.Add(sub);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nconst L = 10\n\nfunc findRepeatedDnaSequences(s string) (ans []string) {\n    cnt := map[string]int{}\n    for i := 0; i <= len(s)-L; i++ {\n        sub := s[i : i+L]\n        cnt[sub]++\n        if cnt[sub] == 2 {\n            ans = append(ans, sub)\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findRepeatedDnaSequences = function(s) {\n    const L = 10;\n    const ans = [];\n    const cnt = new Map();\n    const n = s.length;\n    for (let i = 0; i <= n - L; ++i) {\n        const sub = s.slice(i, i + L)\n        cnt.set(sub, (cnt.get(sub) || 0) + 1);\n        if (cnt.get(sub) === 2) {\n            ans.push(sub);\n        }\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(NL)$，其中 $N$ 是字符串 $\\textit{s}$ 的长度，$L=10$ 即目标子串的长度。\n\n- 空间复杂度：$O(NL)$。\n\n\n#### 方法二：哈希表 + 滑动窗口 + 位运算\n\n由于 $s$ 中只含有 $4$ 种字符，我们可以将每个字符用 $2$ 个比特表示，即：\n\n- $\\texttt{A}$ 表示为二进制 $\\texttt{00}$；\n- $\\texttt{C}$ 表示为二进制 $\\texttt{01}$；\n- $\\texttt{G}$ 表示为二进制 $\\texttt{10}$；\n- $\\texttt{T}$ 表示为二进制 $\\texttt{11}$。\n\n如此一来，一个长为 $10$ 的字符串就可以用 $20$ 个比特表示，而一个 $\\texttt{int}$ 整数有 $32$ 个比特，足够容纳该字符串，因此我们可以将 $s$ 的每个长为 $10$ 的子串用一个 $\\texttt{int}$ 整数表示（只用低 $20$ 位）。\n\n注意到上述字符串到整数的映射是一一映射，每个整数都对应着一个唯一的字符串，因此我们可以将方法一中的哈希表改为存储每个长为 $10$ 的子串的整数表示。\n\n如果我们对每个长为 $10$ 的子串都单独计算其整数表示，那么时间复杂度仍然和方法一一样为 $O(NL)$。为了优化时间复杂度，我们可以用一个大小固定为 $10$ 的滑动窗口来计算子串的整数表示。设当前滑动窗口对应的整数表示为 $x$，当我们要计算下一个子串时，就将滑动窗口向右移动一位，此时会有一个新的字符进入窗口，以及窗口最左边的字符离开窗口，这些操作对应的位运算，按计算顺序表示如下：\n\n- 滑动窗口向右移动一位：`x = x << 2`，由于每个字符用 $2$ 个比特表示，所以要左移 $2$ 位；\n- 一个新的字符 $\\textit{ch}$ 进入窗口：`x = x | bin[ch]`，这里 $\\textit{bin}[\\textit{ch}]$ 为字符 $\\textit{ch}$ 的对应二进制；\n- 窗口最左边的字符离开窗口：`x = x & ((1 << 20) - 1)`，由于我们只考虑 $x$ 的低 $20$ 位比特，需要将其余位置零，即与上 `(1 << 20) - 1`。\n\n将这三步合并，就可以用 $O(1)$ 的时间计算出下一个子串的整数表示，即 `x = ((x << 2) | bin[ch]) & ((1 << 20) - 1)`。\n\n```Python [sol2-Python3]\nL = 10\nbin = {'A': 0, 'C': 1, 'G': 2, 'T': 3}\n\nclass Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        n = len(s)\n        if n <= L:\n            return []\n        ans = []\n        x = 0\n        for ch in s[:L - 1]:\n            x = (x << 2) | bin[ch]\n        cnt = defaultdict(int)\n        for i in range(n - L + 1):\n            x = ((x << 2) | bin[s[i + L - 1]]) & ((1 << (L * 2)) - 1)\n            cnt[x] += 1\n            if cnt[x] == 2:\n                ans.append(s[i : i + L])\n        return ans\n```\n\n```C++ [sol2-C++]\nclass Solution {\n    const int L = 10;\n    unordered_map<char, int> bin = {{'A', 0}, {'C', 1}, {'G', 2}, {'T', 3}};\npublic:\n    vector<string> findRepeatedDnaSequences(string s) {\n        vector<string> ans;\n        int n = s.length();\n        if (n <= L) {\n            return ans;\n        }\n        int x = 0;\n        for (int i = 0; i < L - 1; ++i) {\n            x = (x << 2) | bin[s[i]];\n        }\n        unordered_map<int, int> cnt;\n        for (int i = 0; i <= n - L; ++i) {\n            x = ((x << 2) | bin[s[i + L - 1]]) & ((1 << (L * 2)) - 1);\n            if (++cnt[x] == 2) {\n                ans.push_back(s.substr(i, L));\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    static final int L = 10;\n    Map<Character, Integer> bin = new HashMap<Character, Integer>() {{\n        put('A', 0);\n        put('C', 1);\n        put('G', 2);\n        put('T', 3);\n    }};\n\n    public List<String> findRepeatedDnaSequences(String s) {\n        List<String> ans = new ArrayList<String>();\n        int n = s.length();\n        if (n <= L) {\n            return ans;\n        }\n        int x = 0;\n        for (int i = 0; i < L - 1; ++i) {\n            x = (x << 2) | bin.get(s.charAt(i));\n        }\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        for (int i = 0; i <= n - L; ++i) {\n            x = ((x << 2) | bin.get(s.charAt(i + L - 1))) & ((1 << (L * 2)) - 1);\n            cnt.put(x, cnt.getOrDefault(x, 0) + 1);\n            if (cnt.get(x) == 2) {\n                ans.add(s.substring(i, i + L));\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    const int L = 10;\n    Dictionary<char, int> bin = new Dictionary<char, int> {\n        {'A', 0}, {'C', 1}, {'G', 2}, {'T', 3}\n    };\n\n    public IList<string> FindRepeatedDnaSequences(string s) {\n        IList<string> ans = new List<string>();\n        int n = s.Length;\n        if (n <= L) {\n            return ans;\n        }\n        int x = 0;\n        for (int i = 0; i < L - 1; ++i) {\n            x = (x << 2) | bin[s[i]];\n        }\n        Dictionary<int, int> cnt = new Dictionary<int, int>();\n        for (int i = 0; i <= n - L; ++i) {\n            x = ((x << 2) | bin[s[i + L - 1]]) & ((1 << (L * 2)) - 1);\n            if (!cnt.ContainsKey(x)) {\n                cnt.Add(x, 1);\n            } else {\n                ++cnt[x];\n            }\n            if (cnt[x] == 2) {\n                ans.Add(s.Substring(i, L));\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol2-Golang]\nconst L = 10\nvar bin = map[byte]int{'A': 0, 'C': 1, 'G': 2, 'T': 3}\n\nfunc findRepeatedDnaSequences(s string) (ans []string) {\n    n := len(s)\n    if n <= L {\n        return\n    }\n    x := 0\n    for _, ch := range s[:L-1] {\n        x = x<<2 | bin[byte(ch)]\n    }\n    cnt := map[int]int{}\n    for i := 0; i <= n-L; i++ {\n        x = (x<<2 | bin[s[i+L-1]]) & (1<<(L*2) - 1)\n        cnt[x]++\n        if cnt[x] == 2 {\n            ans = append(ans, s[i:i+L])\n        }\n    }\n    return ans\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findRepeatedDnaSequences = function(s) {\n    const L = 10;\n    const bin = new Map();\n    bin.set('A', 0);\n    bin.set('C', 1);\n    bin.set('G', 2);\n    bin.set('T', 3);\n    \n    const ans = [];\n    const n = s.length;\n    if (n <= L) {\n        return ans;\n    }\n    let x = 0;\n    for (let i = 0; i < L - 1; ++i) {\n        x = (x << 2) | bin.get(s[i]);\n    }\n    const cnt = new Map();\n    for (let i = 0; i <= n - L; ++i) {\n        x = ((x << 2) | bin.get(s[i + L - 1])) & ((1 << (L * 2)) - 1);\n        cnt.set(x, (cnt.get(x) || 0) + 1);\n        if (cnt.get(x) === 2) {\n            ans.push(s.slice(i, i + L));\n        }\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是字符串 $\\textit{s}$ 的长度。\n\n- 空间复杂度：$O(N)$。"
}