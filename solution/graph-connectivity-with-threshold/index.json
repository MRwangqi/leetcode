{
	"titleSlug": "graph-connectivity-with-threshold",
	"slug": "dai-yu-zhi-de-tu-lian-tong-xing-by-zerotrac2",
	"url": "https://leetcode-cn.com/problems/graph-connectivity-with-threshold/solution/dai-yu-zhi-de-tu-lian-tong-xing-by-zerotrac2/",
	"content": "#### 前言\n\n看到「连通性」，我们很容易想到「并查集」这一数据结构。然而本题的图中如果有 $n$ 个点，那么边的数量在最坏情况下（即当 $\\textit{threshold} = 0$ 时）是 $O(n^2)$ 的，形成一个完全图，导致超出时间限制。\n\n然而我们可以这样想。\n\n假设我们考虑公因数 $z$，那么 $[1, n]$ 中有 $\\lfloor \\dfrac{n}{z} \\rfloor$ 个 $z$ 的倍数。这 $\\lfloor \\dfrac{n}{z} \\rfloor$ 个点两两之间存在一条边，那么我们需要添加的边数为 $O\\big((\\dfrac{n}{z})^2\\big)$。\n\n然而，**我们添加边的作用实际上只是为了维护整个图的连通性**，使得这 $\\lfloor \\dfrac{n}{z} \\rfloor$ 个点直接或者间接相连。因此，我们实际上只需要：\n\n- 连接第 $0$ 个点和第 $1$ 个点；\n- 连接第 $1$ 个点和第 $2$ 个点；\n- $\\cdots$\n- 连接第 $\\lfloor \\dfrac{n}{z} \\rfloor - 2$ 个点和第 $\\lfloor \\dfrac{n}{z} \\rfloor - 1$ 个点。\n\n也就是添加 $\\lfloor \\dfrac{n}{z} \\rfloor - 1 = O(\\dfrac{n}{z})$ 条边就行了！剩余我们没有添加的边都是「冗余」的。\n\n那么这样做在最坏情况下会添加多少条边呢？我们粗略地计算一下，即为下面这个求和公式：\n\n$$\n\\sum_{z=1}^n \\frac{n}{z} = n \\cdot \\sum_{z=1}^n \\frac{1}{z}\n$$\n\n右侧就是著名的[调和级数](https://baike.baidu.com/item/%E8%B0%83%E5%92%8C%E7%BA%A7%E6%95%B0)，可以证明调和级数的增长趋势是对数的，因此添加的边的数量为 $O(n \\log n)$。使用优化的并查集，单次操作的均摊时间复杂度是 $O(\\alpha(n))$ 的，因此整个算法：\n\n- 需要 $O(n \\log n \\cdot \\alpha(n))$ 的时间预处理出整个图的连通性；\n- 需要 $O(\\alpha(n))$ 的时间判断每一组询问是否是连通的。\n\n#### 方法一：并查集\n\n贴一下我常用的并查集模板：\n\n```C++ [uf-C++]\nclass UF {\npublic:\n    vector<int> fa;\n    vector<int> sz;\n    int n;\n    int comp_cnt;\n    \npublic:\n    UF(int _n): n(_n), comp_cnt(_n), fa(_n), sz(_n, 1) {\n        iota(fa.begin(), fa.end(), 0);\n    }\n    \n    int findset(int x) {\n        return fa[x] == x ? x : fa[x] = findset(fa[x]);\n    }\n    \n    void unite(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        if (x != y) {\n            if (sz[x] < sz[y]) {\n                swap(x, y);\n            }\n            fa[y] = x;\n            sz[x] += sz[y];\n            --comp_cnt;\n        }\n    }\n    \n    bool connected(int x, int y) {\n        x = findset(x);\n        y = findset(y);\n        return x == y;\n    }\n};\n```\n\n直接使用模板即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<bool> areConnected(int n, int threshold, vector<vector<int>>& queries) {\n        UF uf(n + 1);\n        // 枚举公因数\n        for (int z = threshold + 1; z <= n; ++z) {\n            // 枚举两个 z 的倍数的点并连接\n            for (int p = z, q = z * 2; q <= n; p += z, q += z) {\n                uf.unite(p, q);\n            }\n        }\n        \n        vector<bool> ans;\n        for (const auto& q: queries) {\n            int x = q[0];\n            int y = q[1];\n            ans.push_back(uf.connected(x, y));\n        }\n        return ans;\n    }\n};\n```\n\n#### 方法二：一些奇怪操作\n\n上面这个过程有点像质数筛法，我们可以将其替换成[埃氏筛法](https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95)，时间复杂度降低至 $O(n \\log\\log n \\cdot \\alpha(n))$。\n\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<bool> areConnected(int n, int threshold, vector<vector<int>>& queries) {\n        UF uf(n + 1);\n        vector<int> isPrime(n + 1, 1);\n        for (int z = threshold + 1; z <= n; ++z) {\n            if (isPrime[z]) {\n                for (int p = z, q = z * 2; q <= n; p += z, q += z) {\n                    isPrime[q] = false;\n                    uf.unite(p, q);\n                }\n            }\n        }\n        \n        vector<bool> ans;\n        for (const auto& q: queries) {\n            int x = q[0];\n            int y = q[1];\n            ans.push_back(uf.connected(x, y));\n        }\n        return ans;\n    }\n};\n```\n\n如果可以套用欧拉筛法（线性筛）的话，时间复杂度降低至 $O(n \\alpha(n))$，但是我没有想出来怎么做。暂时留个坑在这吧。"
}