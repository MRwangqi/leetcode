{
	"titleSlug": "rectangle-overlap",
	"slug": "ju-xing-zhong-die-by-leetcode-solution",
	"url": "https://leetcode-cn.com/problems/rectangle-overlap/solution/ju-xing-zhong-die-by-leetcode-solution/",
	"content": "#### 方法一：检查位置\n\n**思路**\n\n我们尝试分析在什么情况下，矩形 `rec1` 和 `rec2` 没有重叠。\n\n如果矩形 `rec1` 和 `rec2` 中至少有一个矩形的面积为 $0$，则一定没有重叠。\n\n当矩形 `rec1` 和 `rec2` 的面积都大于 $0$ 时，如果我们在平面中放置一个固定的矩形 `rec2`，那么矩形 `rec1` 必须要出现在 `rec2` 的「四周」，也就是说，矩形 `rec1` 需要满足以下四种情况中的至少一种：\n\n- 矩形 `rec1` 在矩形 `rec2` 的左侧；\n\n- 矩形 `rec1` 在矩形 `rec2` 的右侧；\n\n- 矩形 `rec1` 在矩形 `rec2` 的上方；\n\n- 矩形 `rec1` 在矩形 `rec2` 的下方。\n\n何为「左侧」？如果矩形 `rec1` 在矩形 `rec2` 的左侧，那就表示我们可以找到一条竖直的线（可以与矩形的边重合），使得矩形 `rec1` 和 `rec2` 被分在这条竖线的两侧。对于「右侧」、「上方」以及「下方」，它们的定义与「左侧」是类似的。\n\n**算法**\n\n首先判断矩形 `rec1` 和 `rec2` 的面积是否为 $0$。\n\n- 对于矩形 `rec1` 而言，其面积为 $0$ 当且仅当 `rec1[0] == rec1[2]` 或 `rec1[1] == rec1[3]`；\n\n- 对于矩形 `rec2` 而言，其面积为 $0$ 当且仅当 `rec2[0] == rec2[2]` 或 `rec2[1] == rec2[3]`。\n\n如果至少有一个矩形的面积为 $0$，则一定没有重叠。\n\n如果矩形 `rec1` 和 `rec2` 的面积都大于 $0$，则考虑两个矩形的位置。我们将上述四种情况翻译成代码。具体地，我们用 `(rec[0], rec[1])` 表示矩形的左下角，`(rec[2], rec[3])` 表示矩形的右上角，与题目描述一致。对于「左侧」，即矩形 `rec1` 在 `x` 轴上的最大值不能大于矩形 `rec2` 在 `x` 轴上最小值。对于「右侧」、「上方」以及「下方」同理。因此我们可以翻译成如下的代码：\n\n- 左侧：`rec1[2] <= rec2[0]`；\n\n- 右侧：`rec1[0] >= rec2[2]`；\n\n- 上方：`rec1[1] >= rec2[3]`；\n\n- 下方：`rec1[3] <= rec2[1]`。\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {\n        if (rec1[0] == rec1[2] || rec1[1] == rec1[3] || rec2[0] == rec2[2] || rec2[1] == rec2[3]) {\n            return false;\n        }\n        return !(rec1[2] <= rec2[0] ||   // left\n                 rec1[3] <= rec2[1] ||   // bottom\n                 rec1[0] >= rec2[2] ||   // right\n                 rec1[1] >= rec2[3]);    // top\n    }\n}\n```\n```Python [sol1-Python3]\nclass Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        if rec1[0] == rec1[2] or rec1[1] == rec1[3] or rec2[0] == rec2[2] or rec2[1] == rec2[3]:\n            return False\n        return not (rec1[2] <= rec2[0] or  # left\n                    rec1[3] <= rec2[1] or  # bottom\n                    rec1[0] >= rec2[2] or  # right\n                    rec1[1] >= rec2[3])    # top\n```\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isRectangleOverlap(vector<int>& rec1, vector<int>& rec2) {\n        if (rec1[0] == rec1[2] || rec1[1] == rec1[3] || rec2[0] == rec2[2] || rec2[1] == rec2[3]) {\n            return false;\n        }\n        return !(rec1[2] <= rec2[0] ||   // left\n                 rec1[3] <= rec2[1] ||   // bottom\n                 rec1[0] >= rec2[2] ||   // right\n                 rec1[1] >= rec2[3]);    // top\n    }\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。\n\n- 空间复杂度：$O(1)$，不需要额外的空间。\n\n#### 方法二：检查区域\n\n**思路**\n\n如果两个矩形重叠，那么它们重叠的区域一定也是一个矩形，那么这代表了两个矩形与 $x$ 轴平行的边（水平边）投影到 $x$ 轴上时会有交集，与 $y$ 轴平行的边（竖直边）投影到 $y$ 轴上时也会有交集。因此，我们可以将问题看作一维线段是否有交集的问题。\n\n**算法**\n\n矩形 `rec1` 和 `rec2` 的水平边投影到 $x$ 轴上的线段分别为 `(rec1[0], rec1[2])` 和 `(rec2[0], rec2[2])`。根据数学知识我们可以知道，当 `min(rec1[2], rec2[2]) > max(rec1[0], rec2[0])` 时，这两条线段有交集。对于矩形 `rec1` 和 `rec2` 的竖直边投影到 $y$ 轴上的线段，同理可以得到，当 `min(rec1[3], rec2[3]) > max(rec1[1], rec2[1])` 时，这两条线段有交集。\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {\n        return (Math.min(rec1[2], rec2[2]) > Math.max(rec1[0], rec2[0]) &&\n                Math.min(rec1[3], rec2[3]) > Math.max(rec1[1], rec2[1]));\n    }\n}\n```\n```Python [sol2-Python3]\nclass Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        def intersect(p_left, p_right, q_left, q_right):\n            return min(p_right, q_right) > max(p_left, q_left)\n        return (intersect(rec1[0], rec1[2], rec2[0], rec2[2]) and\n                intersect(rec1[1], rec1[3], rec2[1], rec2[3]))\n```\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool isRectangleOverlap(vector<int>& rec1, vector<int>& rec2) {\n        return (min(rec1[2], rec2[2]) > max(rec1[0], rec2[0]) &&\n                min(rec1[3], rec2[3]) > max(rec1[1], rec2[1]));\n    }\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。\n\n- 空间复杂度：$O(1)$，不需要额外的空间。"
}