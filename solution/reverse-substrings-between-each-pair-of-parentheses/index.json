{
	"titleSlug": "reverse-substrings-between-each-pair-of-parentheses",
	"slug": "fan-zhuan-mei-dui-gua-hao-jian-de-zi-chu-gwpv",
	"url": "https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/solution/fan-zhuan-mei-dui-gua-hao-jian-de-zi-chu-gwpv/",
	"content": "#### 方法一：栈\n\n**思路及算法**\n\n本题要求按照从括号内到外的顺序进行处理。如字符串 $\\texttt{(u(love)i)}$，首先处理内层括号，变为 $\\texttt{(uevoli)}$，然后处理外层括号，变为 $\\texttt{iloveu}$。\n\n对于括号序列相关的题目，通用的解法是使用递归或栈。本题中我们将使用栈解决。\n\n我们从左到右遍历该字符串，使用字符串 $\\textit{str}$ 记录当前层所遍历到的小写英文字母。对于当前遍历的字符：\n\n- 如果是左括号，将 $\\textit{str}$ 插入到栈中，并将 $\\textit{str}$ 置为空，进入下一层；\n\n- 如果是右括号，则说明遍历完了当前层，需要将 $\\textit{str}$ 反转，返回给上一层。具体地，将栈顶字符串弹出，然后将反转后的 $\\textit{str}$ 拼接到栈顶字符串末尾，将结果赋值给 $\\textit{str}$。\n\n- 如果是小写英文字母，将其加到 $\\textit{str}$ 末尾。\n\n注意到我们仅在遇到右括号时才进行字符串处理，这样可以保证我们是按照从括号内到外的顺序处理字符串。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string reverseParentheses(string s) {\n        stack<string> stk;\n        string str;\n        for (auto &ch : s) {\n            if (ch == '(') {\n                stk.push(str);\n                str = \"\";\n            } else if (ch == ')') {\n                reverse(str.begin(), str.end());\n                str = stk.top() + str;\n                stk.pop();\n            } else {\n                str.push_back(ch);\n            }\n        }\n        return str;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String reverseParentheses(String s) {\n        Deque<String> stack = new LinkedList<String>();\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == '(') {\n                stack.push(sb.toString());\n                sb.setLength(0);\n            } else if (ch == ')') {\n                sb.reverse();\n                sb.insert(0, stack.pop());\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string ReverseParentheses(string s) {\n        Stack<string> stack = new Stack<string>();\n        StringBuilder sb = new StringBuilder();\n        foreach (char ch in s) {\n            if (ch == '(') {\n                stack.Push(sb.ToString());\n                sb.Length = 0;\n            } else if (ch == ')') {\n                char[] arr = sb.ToString().ToCharArray();\n                sb.Length = 0;\n                for (int i = arr.Length - 1; i >= 0; i--) {\n                    sb.Append(arr[i]);\n                }\n                sb.Insert(0, stack.Pop());\n            } else {\n                sb.Append(ch);\n            }\n        }\n        return sb.ToString();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar reverseParentheses = function(s) {\n    const stk = [];\n    let str = '';\n    for (const ch of s) {\n        if (ch === '(') {\n            stk.push(str);\n            str = '';\n        } else if (ch === ')') {\n            str = str.split(\"\").reverse().join(\"\");\n            str = stk[stk.length - 1] + str;\n            stk.pop();\n        } else {\n            str += ch;\n        }\n    }\n    return str;\n};\n```\n\n```go [sol1-Golang]\nfunc reverseParentheses(s string) string {\n    stack := [][]byte{}\n    str := []byte{}\n    for i := range s {\n        if s[i] == '(' {\n            stack = append(stack, str)\n            str = []byte{}\n        } else if s[i] == ')' {\n            for j, n := 0, len(str); j < n/2; j++ {\n                str[j], str[n-1-j] = str[n-1-j], str[j]\n            }\n            str = append(stack[len(stack)-1], str...)\n            stack = stack[:len(stack)-1]\n        } else {\n            str = append(str, s[i])\n        }\n    }\n    return string(str)\n}\n```\n\n```C [sol1-C]\nvoid reverse(char* str, int strSize) {\n    for (int j = 0; j < strSize / 2; j++) {\n        char tmp = str[j];\n        str[j] = str[strSize - j - 1], str[strSize - j - 1] = tmp;\n    }\n}\n\nchar* reverseParentheses(char* s) {\n    int n = strlen(s);\n    char* stk[n];\n    int top = 0;\n    char* str = malloc(sizeof(char) * (n + 1));\n    str[0] = '\\0';\n    int strSize = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '(') {\n            stk[top] = malloc(sizeof(char) * (strSize + 1));\n            memcpy(stk[top], str, sizeof(char) * (strSize + 1));\n            top++;\n            str[0] = '\\0';\n            strSize = 0;\n        } else if (s[i] == ')') {\n            reverse(str, strSize);\n            int len = strlen(stk[top - 1]);\n            for (int j = strSize; j >= 0; j--) {\n                str[j + len] = str[j];\n            }\n            memcpy(str, stk[top - 1], sizeof(char) * len);\n            strSize += len;\n            top--;\n        } else {\n            str[strSize++] = s[i];\n            str[strSize] = '\\0';\n        }\n    }\n    return str;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 为字符串的长度。栈的最大深度为 $O(n)$，每一层处理的时间复杂度主要为反转的时间复杂度，为 $O(n)$，因此总时间复杂度为 $O(n^2)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 为字符串的长度。对于任意时刻，字符串中的任意一个字符至多只被栈中的一个位置包含一次。\n\n#### 方法二：预处理括号\n\n**思路及算法**\n\n我们可以将括号的反转理解为逆序地遍历括号，如下图：\n\n![fig1](https://assets.leetcode-cn.com/solution-static/1190/1.png)\n\n1. 第一步我们向右移动到左括号，此时我们跳跃到该左括号对应的右括号（进入了更深一层）；\n2. 第二到第三步我们在括号内部向左移动（完成了更深层的遍历）；\n3. 第四步我们向左移动到左括号，此时我们跳跃到该左括号对应的右括号（返回到上一层）；\n4. 第五步我们在括号外向右移动（继续遍历）。\n\n读者们可以自行尝试模拟两层乃至多层括号嵌套的移动方案，规律可以从当前的单层括号中总结出来。\n\n假设我们沿着某个方向移动，此时遇到了括号，那么我们只需要首先跳跃到该括号对应的另一个括号所在处，然后改变我们的移动方向即可。这个方案同时适用于遍历时进入更深一层，以及完成当前层的遍历后返回到上一层的方案。\n\n在实际代码中，我们需要预处理出每一个括号对应的另一个括号所在的位置，这一部分我们可以使用栈解决。当我们预处理完成后，即可在线性时间内完成遍历，遍历的字符串顺序即为反转后的字符串。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    string reverseParentheses(string s) {\n        int n = s.length();\n        vector<int> pair(n);\n        stack<int> stk;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '(') {\n                stk.push(i);\n            } else if (s[i] == ')') {\n                int j = stk.top();\n                stk.pop();\n                pair[i] = j, pair[j] = i;\n            }\n        }\n\n        string ret;\n        int index = 0, step = 1;\n        while (index < n) {\n            if (s[index] == '(' || s[index] == ')') {\n                index = pair[index];\n                step = -step;\n            } else {\n                ret.push_back(s[index]);\n            }\n            index += step;\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public String reverseParentheses(String s) {\n        int n = s.length();\n        int[] pair = new int[n];\n        Deque<Integer> stack = new LinkedList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '(') {\n                stack.push(i);\n            } else if (s.charAt(i) == ')') {\n                int j = stack.pop();\n                pair[i] = j;\n                pair[j] = i;\n            }\n        }\n\n        StringBuffer sb = new StringBuffer();\n        int index = 0, step = 1;\n        while (index < n) {\n            if (s.charAt(index) == '(' || s.charAt(index) == ')') {\n                index = pair[index];\n                step = -step;\n            } else {\n                sb.append(s.charAt(index));\n            }\n            index += step;\n        }\n        return sb.toString();\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public string ReverseParentheses(string s) {\n        int n = s.Length;\n        int[] pair = new int[n];\n        Stack<int> stack = new Stack<int>();\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '(') {\n                stack.Push(i);\n            } else if (s[i] == ')') {\n                int j = stack.Pop();\n                pair[i] = j;\n                pair[j] = i;\n            }\n        }\n\n        StringBuilder sb = new StringBuilder();\n        int index = 0, step = 1;\n        while (index < n) {\n            if (s[index] == '(' || s[index] == ')') {\n                index = pair[index];\n                step = -step;\n            } else {\n                sb.Append(s[index]);\n            }\n            index += step;\n        }\n        return sb.ToString();\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar reverseParentheses = function(s) {\n    const n = s.length;\n    const pair = new Array(n).fill(0);\n    const stack = [];\n    for (let i = 0; i < n; i++) {\n        if (s[i] === '(') {\n            stack.push(i);\n        } else if (s[i] == ')') {\n            const j = stack.pop();\n            pair[i] = j;\n            pair[j] = i;\n        }\n    }\n\n    const sb = [];\n    let index = 0, step = 1;\n    while (index < n) {\n        if (s[index] === '(' || s[index] === ')') {\n            index = pair[index];\n            step = -step;\n        } else {\n            sb.push(s[index]);\n        }\n        index += step;\n    }\n    return sb.join('');\n};\n```\n\n```go [sol2-Golang]\nfunc reverseParentheses(s string) string {\n    n := len(s)\n    pair := make([]int, n)\n    stack := []int{}\n    for i, b := range s {\n        if b == '(' {\n            stack = append(stack, i)\n        } else if b == ')' {\n            j := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            pair[i], pair[j] = j, i\n        }\n    }\n\n    ans := []byte{}\n    for i, step := 0, 1; i < n; i += step {\n        if s[i] == '(' || s[i] == ')' {\n            i = pair[i]\n            step = -step\n        } else {\n            ans = append(ans, s[i])\n        }\n    }\n    return string(ans)\n}\n```\n\n```C [sol2-C]\nchar* reverseParentheses(char* s) {\n    int n = strlen(s);\n    int pair[n];\n    memset(pair, 0, sizeof(pair));\n    int stk[n], top = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == '(') {\n            stk[top++] = i;\n        } else if (s[i] == ')') {\n            int j = stk[--top];\n            pair[i] = j, pair[j] = i;\n        }\n    }\n    char* ret = malloc(sizeof(char) * (n + 1));\n    int retSize = 0;\n    int index = 0, step = 1;\n    while (index < n) {\n        if (s[index] == '(' || s[index] == ')') {\n            index = pair[index];\n            step = -step;\n        } else {\n            ret[retSize++] = s[index];\n        }\n        index += step;\n    }\n    ret[retSize] = '\\0';\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为字符串的长度。预处理出括号的对应关系的序列的时间复杂度为 $O(n)$，遍历字符串的时间复杂度同样为 $O(n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 为字符串的长度。栈的大小不会超过 $n$，以及我们需要 $O(n)$ 的空间记录括号的对应关系。"
}