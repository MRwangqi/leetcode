{
	"titleSlug": "degree-of-an-array",
	"slug": "xiang-xi-fen-xi-ti-yi-yu-si-lu-jian-ji-d-nvdy",
	"url": "https://leetcode-cn.com/problems/degree-of-an-array/solution/xiang-xi-fen-xi-ti-yi-yu-si-lu-jian-ji-d-nvdy/",
	"content": "各位题友大家好！ 今天是 **[@负雪明烛](/u/fuxuemingzhu/)** 坚持日更的第 **27** 天。今天力扣上的每日一题是「[697. 数组的度](https://leetcode-cn.com/problems/degree-of-an-array/)」。\n\n### 理解题意\n\n今天题目比较晦涩，需要我来解释一下题目。\n\n\n- **数组的度：数组中各元素出现次数的最大值**。对于示例二 `[1,2,2,3,1,4,2]` ：数组中各元素出现的次数为： `1` 出现 2 次， `2` 出现 3 次， `3` 出现 1 次， `4` 出现 1 次，所以数组的**度**为 3（就是元素 `2` 出现的次数）。\n- 题目要求的是与 `nums` 拥有相同大小的**度**的**最短连续子数组**的长度。比如对于示例二 `[1,2,2,3,1,4,2]`，数组的度为 3，它的**度为 3 的**最短连续子数组是 `[2,2,3,1,4,2]` ，返回该子数组长度 6。\n\n### 解题思路\n\n\n本题可以按照两部分求解：\n\n- 先求原数组的度；\n- 再求与原数组相同**度**的最短子数组。\n\n\n### 求原数组的度\n\n\n求数组的度，本质还是求各个元素的出现次数，我们可以用 **字典（哈希表）**计数，字典的 key 是元素，value 是该元素出现的次数。因此，字典中所有 value 的最大值就是数组的**度 $degree$**。\n\n\n### 求与原数组相同度的最短子数组\n\n\n要求的子数组的**度**与原数组相同**度**的相同，那么该子数组中也得有 $degree$ 个重复的元素。比如对于示例二`[1,2,2,3,1,4,2]`，出现次数最多的元素是 2，它的出现次数为 3， 所以数组的度为 3；我们要求的子数组得有 3 个 2 ，所以最短的子数组是 [`2,2,3,1,4,2]`。注意到了吗？我们要求的最短子数组的起始和终止位置，由**出现次数最多的元素 第一次和最后一次出现的位置** 确定。\n\n\n另外，需要注意的是出现次数最多的元素可能不止一个，比如示例一`[1, 2, 2, 3, 1]`，数字 `1` 和数字 `2` 都出现了 2 次。此时，我们必须分别对每个出现次数为 `2` 的元素（即数字 `1` 和数字 `2` ）都求一次包含`2`个它的最短子数组的长度（分别为5和2），最终对所有最短子数组长度取 $min$，得到结果为 2。\n\n示例一的运行情况如下面动图所示：\n\n![697.gif](https://pic.leetcode-cn.com/1613783336-WPwXhi-697.gif)\n\n上面的动图对应的 PPT 在下面，可以点击观看。\n\n<![697.001.jpeg](https://pic.leetcode-cn.com/1613783353-nPABix-697.001.jpeg),![697.002.jpeg](https://pic.leetcode-cn.com/1613783353-DUWIIf-697.002.jpeg),![697.003.jpeg](https://pic.leetcode-cn.com/1613783353-xGhkhP-697.003.jpeg),![697.004.jpeg](https://pic.leetcode-cn.com/1613783353-uNOBvk-697.004.jpeg),![697.005.jpeg](https://pic.leetcode-cn.com/1613783353-fDZYzc-697.005.jpeg),![697.006.jpeg](https://pic.leetcode-cn.com/1613783353-iWZAPB-697.006.jpeg),![697.007.jpeg](https://pic.leetcode-cn.com/1613783353-RzpCvR-697.007.jpeg),![697.008.jpeg](https://pic.leetcode-cn.com/1613783353-XmBhUn-697.008.jpeg)>\n\n\n\n# 代码\n\n\n- 使用 `left` 和 `right` 分别保存了每个元素在数组中第一次出现的位置和最后一次出现的位置；使用 `counter` 保存每个元素出现的次数。\n- 数组的度 $degree$ 等于 `counter.values()` 的最大值；\n\n- 对`counter`再次遍历：\n  - 如果元素 `k` 出现的次数等于 $degree$，则找出元素 `k` 最后一次出现的位置 和 第一次出现的位置，计算两者之差+1，即为子数组长度。 \n  - 对所有出现次数等于 $degree$ 的子数组的最短长度，取 $min$。\n\n\n\n```Python []\nclass Solution:\n    def findShortestSubArray(self, nums: List[int]) -> int:\n        left, right = dict(), dict()\n        counter = collections.Counter()\n        for i, num in enumerate(nums):\n            if num not in left:\n                left[num] = i\n            right[num] = i\n            counter[num] += 1\n        degree = max(counter.values())\n        res = len(nums)\n        for k, v in counter.items():\n            if v == degree:\n                res = min(res, right[k] - left[k] + 1)\n        return res\n```\n```C++ []\nclass Solution {\npublic:\n    int findShortestSubArray(vector<int>& nums) {\n        unordered_map<int, int> left, right, counter;\n        int degree = 0;\n        for (int i = 0; i < nums.size(); ++i) {\n            if (!left.count(nums[i]))\n                left[nums[i]] = i;\n            right[nums[i]] = i;\n            counter[nums[i]] ++;\n            degree = max(degree, counter[nums[i]]);\n        }\n        int res = nums.size();\n        for (auto& kv : counter) {\n            if (kv.second == degree) {\n                res = min(res, right[kv.first] - left[kv.first] + 1);\n            }\n        }\n        return res;\n    }\n};\n```\n\n- 时间复杂度：$O(N)$，因为对数组遍历了一遍，对`counter` 遍历了两遍。\n- 空间复杂度：$O(N)$，因为 `counter` 在最坏情况下会跟 `nums` 的元素个数相等。\n\n### 刷题心得\n\n\n今天这个题目本身不难，写了这么长的题解是因为想法是很抽象的，找到最简洁易懂的表达方式是很难的。大家看题解主要是学习作者的思路，最重要的还是要形成自己的理解啊！\n\n-----\n\n\nOK，以上就是 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 写的今天题解的全部内容了，如果你觉得有帮助的话，**求赞、求关注、求收藏**。如果有疑问的话，请在下面评论，我会及时解答。\n\n\n**关注我**，你将不会错过我的精彩动画题解、面试题分享、组队刷题活动，进入主页 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 右侧有刷题组织，从此刷题不再孤单。\n\n\n祝大家牛年大吉！AC 多多，Offer 多多！我们明天再见！"
}