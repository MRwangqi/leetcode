{
	"titleSlug": "get-kth-magic-number-lcci",
	"slug": "di-k-ge-shu-by-leetcode-solution-vzp7",
	"url": "https://leetcode-cn.com/problems/get-kth-magic-number-lcci/solution/di-k-ge-shu-by-leetcode-solution-vzp7/",
	"content": "#### 方法一：最小堆\n\n要得到从小到大的第 $k$ 个数，可以使用**最小堆**实现。\n\n初始时堆为空。首先将最小的数 $1$ 加入堆。\n\n每次取出堆顶元素 $x$，则 $x$ 是堆中最小的数，由于 $3x, 5x, 7x$ 也是符合要求的数，因此将 $3x, 5x, 7x$ 加入堆。\n\n上述做法会导致堆中出现重复元素的情况。为了避免重复元素，可以使用哈希集合去重，避免相同元素多次加入堆。\n\n在排除重复元素的情况下，第 $k$ 次从最小堆中取出的元素即为第 $k$ 个数。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p1.png),![fig2](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p2.png),![fig3](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p3.png),![fig4](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p4.png),![fig5](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p5.png),![fig6](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p6.png),![fig7](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p7.png),![fig8](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p8.png),![fig9](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p9.png),![fig10](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p10.png),![fig11](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p11.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public int getKthMagicNumber(int k) {\n        int[] factors = {3, 5, 7};\n        Set<Long> seen = new HashSet<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        seen.add(1L);\n        heap.offer(1L);\n        int magic = 0;\n        for (int i = 0; i < k; i++) {\n            long curr = heap.poll();\n            magic = (int) curr;\n            for (int factor : factors) {\n                long next = curr * factor;\n                if (seen.add(next)) {\n                    heap.offer(next);\n                }\n            }\n        }\n        return magic;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int GetKthMagicNumber(int k) {\n        int[] factors = {3, 5, 7};\n        ISet<long> seen = new HashSet<long>();\n        PriorityQueue<long, long> heap = new PriorityQueue<long, long>();\n        seen.Add(1);\n        heap.Enqueue(1, 1);\n        int magic = 0;\n        for (int i = 0; i < k; i++) {\n            long curr = heap.Dequeue();\n            magic = (int) curr;\n            foreach (int factor in factors) {\n                long next = curr * factor;\n                if (seen.Add(next)) {\n                    heap.Enqueue(next, next);\n                }\n            }\n        }\n        return magic;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar getKthMagicNumber = function(k) {\n    const factors = [3, 5, 7];\n    const seen = new Set();\n    const heap = new MinHeap();\n    seen.add(1);\n    heap.insert(1);\n    let magic = 0;\n    for (let i = 0; i < k; i++) {\n        magic = heap.pop();\n        for (const factor of factors) {\n            const next = magic * factor;\n            if (!seen.has(next)) {\n                seen.add(next);\n                heap.insert(next);\n            }\n        }\n        \n    }\n    return magic;\n};\n\n// 最小堆\nclass MinHeap {\n    constructor() {\n        this.heap = [];\n    }\n\n    getParentIndex(i) {\n        return (i - 1) >> 1;\n    }\n\n    getLeftIndex(i) {\n        return i * 2 + 1;\n    }\n\n    getRightIndex(i) {\n        return i * 2 + 2;\n    }\n\n    shiftUp(index) {\n        if(index === 0) { return; }\n        const parentIndex = this.getParentIndex(index);\n        if(this.heap[parentIndex] > this.heap[index]){\n            this.swap(parentIndex, index);\n            this.shiftUp(parentIndex);\n        }  \n    }\n\n    swap(i1, i2) {\n        const temp = this.heap[i1];\n        this.heap[i1]= this.heap[i2];\n        this.heap[i2] = temp;\n    }\n\n    insert(value) {\n        this.heap.push(value);\n        this.shiftUp(this.heap.length - 1);\n    }\n\n    pop() {\n        this.heap[0] = this.heap.pop();\n        this.shiftDown(0);\n        return this.heap[0];\n    }\n\n    shiftDown(index) {\n        const leftIndex = this.getLeftIndex(index);\n        const rightIndex = this.getRightIndex(index);\n        if (this.heap[leftIndex] < this.heap[index]) {\n            this.swap(leftIndex, index);\n            this.shiftDown(leftIndex);\n        }\n        if (this.heap[rightIndex] < this.heap[index]){\n            this.swap(rightIndex, index);\n            this.shiftDown(rightIndex);\n        }\n    }\n\n    peek() {\n        return this.heap[0];\n    }\n\n    size() {\n        return this.heap.length;\n    }\n}\n```\n\n```go [sol1-Golang]\nvar factors = []int{3, 5, 7}\n\ntype hp struct{ sort.IntSlice }\nfunc (h *hp) Push(v interface{}) { h.IntSlice = append(h.IntSlice, v.(int)) }\nfunc (h *hp) Pop() interface{}   { a := h.IntSlice; v := a[len(a)-1]; h.IntSlice = a[:len(a)-1]; return v }\n\nfunc getKthMagicNumber(k int) int {\n    h := &hp{sort.IntSlice{1}}\n    seen := map[int]struct{}{1: {}}\n    for i := 1; ; i++ {\n        x := heap.Pop(h).(int)\n        if i == k {\n            return x\n        }\n        for _, f := range factors {\n            next := x * f\n            if _, has := seen[next]; !has {\n                heap.Push(h, next)\n                seen[next] = struct{}{}\n            }\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def getKthMagicNumber(self, k: int) -> int:\n        factors = [3, 5, 7]\n        seen = {1}\n        heap = [1]\n\n        for i in range(k - 1):\n            curr = heapq.heappop(heap)\n            for factor in factors:\n                if (nxt := curr * factor) not in seen:\n                    seen.add(nxt)\n                    heapq.heappush(heap, nxt)\n\n        return heapq.heappop(heap)\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int getKthMagicNumber(int k) {\n        vector<int> factors = {3, 5, 7};\n        unordered_set<long> seen;\n        priority_queue<long, vector<long>, greater<long>> heap;\n        seen.insert(1L);\n        heap.push(1L);\n        int magic = 0;\n        for (int i = 0; i < k; i++) {\n            long curr = heap.top();\n            heap.pop();\n            magic = (int)curr;\n            for (int factor : factors) {\n                long next = curr * factor;\n                if (!seen.count(next)) {\n                    seen.insert(next);\n                    heap.push(next);\n                }\n            }\n        }\n        return magic;\n    }\n};\n```\n\n```C [sol1-C]\n#define HASH_FIND_LONG(head, findint, out) HASH_FIND(hh, head, findint, sizeof(long), out)\n#define HASH_ADD_LONG(head, intfield, add) HASH_ADD(hh, head, intfield, sizeof(long), add)\n\nstruct HashTable {\n    long key;\n    UT_hash_handle hh;\n};\n\nvoid insert(struct HashTable** hashTable, long ikey) {\n    struct HashTable* tmp;\n    HASH_FIND_LONG(*hashTable, &ikey, tmp);\n    if (tmp == NULL) {\n        tmp = malloc(sizeof(struct HashTable));\n        tmp->key = ikey;\n        HASH_ADD_LONG(*hashTable, key, tmp);\n    }\n}\n\nbool count(struct HashTable** hashTable, long ikey) {\n    struct HashTable* tmp;\n    HASH_FIND_LONG(*hashTable, &ikey, tmp);\n    return tmp == NULL;\n}\n\nstruct Heap {\n    long* heap;\n    int heapSize;\n    bool (*cmp)(long, long);\n};\n\nvoid init(struct Heap* obj, int n, bool (*cmp)(long, long)) {\n    obj->heap = malloc(sizeof(long) * (k + 1));\n    obj->heapSize = 0;\n    obj->cmp = cmp;\n}\n\nbool cmp1(long a, long b) {\n    return a > b;\n}\n\nvoid swap(long* a, long* b) {\n    long tmp = *a;\n    *a = *b, *b = tmp;\n}\n\nvoid push(struct Heap* obj, long x) {\n    int p = ++(obj->heapSize), q = p >> 1;\n    obj->heap[p] = x;\n    while (q) {\n        if (!obj->cmp(obj->heap[q], obj->heap[p])) {\n            break;\n        }\n        swap(&(obj->heap[q]), &(obj->heap[p]));\n        p = q, q = p >> 1;\n    }\n}\n\nvoid pop(struct Heap* obj) {\n    swap(&(obj->heap[1]), &(obj->heap[(obj->heapSize)--]));\n    int p = 1, q = p << 1;\n    while (q <= obj->heapSize) {\n        if (q + 1 <= obj->heapSize) {\n            if (obj->cmp(obj->heap[q], obj->heap[q + 1])) {\n                q++;\n            }\n        }\n        if (!obj->cmp(obj->heap[p], obj->heap[q])) {\n            break;\n        }\n        swap(&(obj->heap[q]), &(obj->heap[p]));\n        p = q, q = p << 1;\n    }\n}\n\nlong top(struct Heap* obj) {\n    return obj->heap[1];\n}\n\nbool empty(struct Heap* obj) {\n    return obj->heapSize == 0;\n}\n\nint getKthMagicNumber(int k) {\n    int factors[3] = {3, 5, 7};\n    struct HashTable* hashTable = NULL;\n    insert(&hashTable, 1);\n    struct Heap* heap = malloc(sizeof(struct Heap));\n    init(heap, k * 3, cmp1);\n    push(heap, 1);\n    int magic = 0;\n    for (int i = 0; i < k; i++) {\n        long curr = top(heap);\n        pop(heap);\n        magic = (int)curr;\n        for (int i = 0; i < 3; i++) {\n            long next = curr * factors[i];\n            if (count(&hashTable, next)) {\n                insert(&hashTable, next);\n                push(heap, next);\n            }\n        }\n    }\n    return magic;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(k \\log k)$。得到第 $k$ 个数需要进行 $k$ 次循环，每次循环都要从最小堆中取出 $1$ 个元素以及向最小堆中加入最多 $3$ 个元素，因此每次循环的时间复杂度是 $O(\\log (3k) + 3 \\log (3k))=O(\\log k)$，总时间复杂度是 $O(k \\log k)$。\n\n- 空间复杂度：$O(k)$。空间复杂度主要取决于最小堆和哈希集合的大小，最小堆和哈希集合的大小都不会超过 $3k$。\n\n#### 方法二：动态规划\n\n方法一使用最小堆，会预先存储较多的数，维护最小堆的过程也导致时间复杂度较高。可以使用动态规划的方法进行优化。\n\n定义数组 $\\textit{dp}$，其中 $\\textit{dp}[i]$ 表示第 $i$ 个数，第 $k$ 个数即为 $\\textit{dp}[k]$。\n\n由于最小的数是 $1$，因此 $\\textit{dp}[1]=1$。\n\n如何得到其余的数呢？定义三个指针 $p_3,p_5,p_7$，表示下一个数是当前指针指向的数乘以对应的质因数。初始时，三个指针的值都是 $1$。\n\n当 $2 \\le i \\le k$ 时，令 $\\textit{dp}[i]=\\min(\\textit{dp}[p_3] \\times 3, \\textit{dp}[p_5] \\times 5, \\textit{dp}[p_7] \\times 7)$，然后分别比较 $\\textit{dp}[i]$ 和 $\\textit{dp}[p_3] \\times 3,\\textit{dp}[p_5] \\times 5,\\textit{dp}[p_7] \\times 7$ 是否相等，如果相等则将对应的指针加 $1$。\n\n**正确性证明**\n\n对于 $i>1$，在计算 $\\textit{dp}[i]$ 时，指针 $p_x(x \\in \\{3,5,7\\})$ 的含义是使得 $\\textit{dp}[j] \\times x>\\textit{dp}[i-1]$ 的最小的下标 $j$，即当 $j \\ge p_x$ 时 $\\textit{dp}[j] \\times x>\\textit{dp}[i-1]$，当 $j<p_x$ 时 $\\textit{dp}[j] \\times x \\le \\textit{dp}[i-1]$。\n\n因此，对于 $i>1$，在计算 $\\textit{dp}[i]$ 时，$\\textit{dp}[p_3] \\times 3,\\textit{dp}[p_5] \\times 5,\\textit{dp}[p_7] \\times 7$ 都大于 $\\textit{dp}[i-1]$，$\\textit{dp}[p_3-1] \\times 3,\\textit{dp}[p_5-1] \\times 5,\\textit{dp}[p_7-1] \\times 7$ 都小于或等于 $\\textit{dp}[i-1]$。令 $\\textit{dp}[i]=\\min(\\textit{dp}[p_3] \\times 3, \\textit{dp}[p_5] \\times 5, \\textit{dp}[p_7] \\times 7)$，则 $\\textit{dp}[i]>\\textit{dp}[i-1]$ 且 $\\textit{dp}[i]$ 是大于 $\\textit{dp}[i-1]$ 的最小的数。\n\n在计算 $\\textit{dp}[i]$ 之后，会更新三个指针 $p_3,p_5,p_7$，更新之后的指针将用于计算 $\\textit{dp}[i+1]$，同样满足 $\\textit{dp}[i+1]>\\textit{dp}[i]$ 且 $\\textit{dp}[i+1]$ 是大于 $\\textit{dp}[i]$ 的最小的数。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p12.png),![ppt2](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p13.png),![ppt3](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p14.png),![ppt4](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p15.png),![ppt5](https://assets.leetcode-cn.com/solution-static/jindian_17.09/p16.png)>\n\n```Java [sol2-Java]\nclass Solution {\n    public int getKthMagicNumber(int k) {\n        int[] dp = new int[k + 1];\n        dp[1] = 1;\n        int p3 = 1, p5 = 1, p7 = 1;\n        for (int i = 2; i <= k; i++) {\n            int num3 = dp[p3] * 3, num5 = dp[p5] * 5, num7 = dp[p7] * 7;\n            dp[i] = Math.min(Math.min(num3, num5), num7);\n            if (dp[i] == num3) {\n                p3++;\n            }\n            if (dp[i] == num5) {\n                p5++;\n            }\n            if (dp[i] == num7) {\n                p7++;\n            }\n        }\n        return dp[k];\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int GetKthMagicNumber(int k) {\n        int[] dp = new int[k + 1];\n        dp[1] = 1;\n        int p3 = 1, p5 = 1, p7 = 1;\n        for (int i = 2; i <= k; i++) {\n            int num3 = dp[p3] * 3, num5 = dp[p5] * 5, num7 = dp[p7] * 7;\n            dp[i] = Math.Min(Math.Min(num3, num5), num7);\n            if (dp[i] == num3) {\n                p3++;\n            }\n            if (dp[i] == num5) {\n                p5++;\n            }\n            if (dp[i] == num7) {\n                p7++;\n            }\n        }\n        return dp[k];\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar getKthMagicNumber = function(k) {\n    const dp = new Array(k + 1).fill(0);\n    dp[1] = 1;\n    let p3 = 1, p5 = 1, p7 = 1;\n    for (let i = 2; i <= k; i++) {\n        const num3 = dp[p3] * 3, num5 = dp[p5] * 5, num7 = dp[p7] * 7;\n        dp[i] = Math.min(Math.min(num3, num5), num7);\n        if (dp[i] === num3) {\n            p3++;\n        }\n        if (dp[i] === num5) {\n            p5++;\n        }\n        if (dp[i] === num7) {\n            p7++;\n        }\n    }\n    return dp[k];\n};\n```\n\n```go [sol2-Golang]\nfunc getKthMagicNumber(k int) int {\n    dp := make([]int, k+1)\n    dp[1] = 1\n    p3, p5, p7 := 1, 1, 1\n    for i := 2; i <= k; i++ {\n        x2, x3, x5 := dp[p3]*3, dp[p5]*5, dp[p7]*7\n        dp[i] = min(min(x2, x3), x5)\n        if dp[i] == x2 {\n            p3++\n        }\n        if dp[i] == x3 {\n            p5++\n        }\n        if dp[i] == x5 {\n            p7++\n        }\n    }\n    return dp[k]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def getKthMagicNumber(self, k: int) -> int:\n        dp = [0] * (k + 1)\n        dp[1] = 1\n        p3 = p5 = p7 = 1\n\n        for i in range(2, k + 1):\n            num3, num5, num7 = dp[p3] * 3, dp[p5] * 5, dp[p7] * 7\n            dp[i] = min(num3, num5, num7)\n            if dp[i] == num3:\n                p3 += 1\n            if dp[i] == num5:\n                p5 += 1\n            if dp[i] == num7:\n                p7 += 1\n        \n        return dp[k]\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int getKthMagicNumber(int k) {\n        vector<int> dp(k + 1);\n        dp[1] = 1;\n        int p3 = 1, p5 = 1, p7 = 1;\n        for (int i = 2; i <= k; i++) {\n            int num3 = dp[p3] * 3, num5 = dp[p5] * 5, num7 = dp[p7] * 7;\n            dp[i] = min(min(num3, num5), num7);\n            if (dp[i] == num3) {\n                p3++;\n            }\n            if (dp[i] == num5) {\n                p5++;\n            }\n            if (dp[i] == num7) {\n                p7++;\n            }\n        }\n        return dp[k];\n    }\n};\n```\n\n```C [sol2-C]\nint getKthMagicNumber(int k) {\n    int dp[k + 1];\n    dp[1] = 1;\n    int p3 = 1, p5 = 1, p7 = 1;\n    for (int i = 2; i <= k; i++) {\n        int num3 = dp[p3] * 3, num5 = dp[p5] * 5, num7 = dp[p7] * 7;\n        dp[i] = fmin(fmin(num3, num5), num7);\n        if (dp[i] == num3) {\n            p3++;\n        }\n        if (dp[i] == num5) {\n            p5++;\n        }\n        if (dp[i] == num7) {\n            p7++;\n        }\n    }\n    return dp[k];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(k)$。需要计算数组 $\\textit{dp}$ 中的 $k$ 个元素，每个元素的计算都可以在 $O(1)$ 的时间内完成。\n\n- 空间复杂度：$O(k)$。空间复杂度主要取决于数组 $\\textit{dp}$ 的大小。"
}