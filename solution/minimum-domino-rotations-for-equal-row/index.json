{
	"titleSlug": "minimum-domino-rotations-for-equal-row",
	"slug": "lian-xu-chai-xiang-tong-de-shu-zi-by-leetcode",
	"url": "https://leetcode-cn.com/problems/minimum-domino-rotations-for-equal-row/solution/lian-xu-chai-xiang-tong-de-shu-zi-by-leetcode/",
	"content": "#### 方法一：贪心\n\n**分析**\n\n我们随便选其中的一个多米诺骨牌，它的标号为 `i`，上半部分的数字为 `A[i]`，下半部分的数字为 `B[i]`。\n\n![bla](https://pic.leetcode-cn.com/Figures/1007/config.png){:width=500}\n{:align=center}    \n\n此时可能会有三种情况：\n\n1. 以数字 `A[i]` 作为基准，将 `A` 或 `B` 中的所有值都变为 `A[i]`。例如，下图中，我们选择了第 $0$ 个多米诺骨牌，这样可以将 `A` 中的所有值都变为 $2$。\n\n![bla](https://pic.leetcode-cn.com/Figures/1007/s1.png){:width=500}\n{:align=center}    \n\n2. 以数字 `B[i]` 作为基准，将 `A` 或 `B` 中的所有值都变为 `B[i]`。例如，下图中，我们选择了第 $1$ 个多米诺骨牌，这样可以将 `B` 中的所有值都变为 $2$。\n\n![bla](https://pic.leetcode-cn.com/Figures/1007/s2.png){:width=500}\n{:align=center}    \n\n3. 无论选择 `A[i]` 还是 `B[i]` 都没有办法将 `A` 或 `B` 中的所有值变为都相同。例如，下图中，我们选择了最后一个多米诺骨牌，无论是它的上半部分 $5$ 还是下半部分 $4$，都无法满足条件。\n\n![bla](https://pic.leetcode-cn.com/Figures/1007/s3.png){:width=500}\n{:align=center}    \n\n如果要满足第 $1$ 种或是第 $2$ 种情况，就必须存在一块多米诺骨牌，它的上半部分或者下半部分的数字 `x` 在所有其它的多米诺骨牌中都出现过。若该条件满足，则说明所有多米诺骨牌中都出现了数字 `x`。因此，我们只要选择任意一块多米诺骨牌，判断它的上半部分或下半部分的数字是否可以作为 `x` 即可。\n\n**算法**\n\n- 选择第一块多米诺骨牌，它包含两个数字 `A[0]` 和 `B[0]`；\n- 检查其余的多米诺骨牌中是否出现过 `A[0]`。如果都出现过，则求出最少的翻转次数，其为将 `A[0]` 全部翻到 `A` 和全部翻到 `B` 中的较少的次数。\n- 检查其余的多米诺骨牌中是否出现过 `B[0]`。如果都出现过，则求出最少的翻转次数，其为将 `B[0]` 全部翻到 `A` 和全部翻到 `B` 中的较少的次数。\n\n- 如果上述两次检查都失败，则返回 `-1`。\n\n```Python [sol1]\nclass Solution:        \n    def minDominoRotations(self, A: List[int], B: List[int]) -> int:\n        def check(x):\n            \"\"\"\n            Return min number of swaps \n            if one could make all elements in A or B equal to x.\n            Else return -1.\n            \"\"\"\n            # how many rotations should be done\n            # to have all elements in A equal to x\n            # and to have all elements in B equal to x\n            rotations_a = rotations_b = 0\n            for i in range(n):\n                # rotations coudn't be done\n                if A[i] != x and B[i] != x:\n                    return -1\n                # A[i] != x and B[i] == x\n                elif A[i] != x:\n                    rotations_a += 1\n                # A[i] == x and B[i] != x    \n                elif B[i] != x:\n                    rotations_b += 1\n            # min number of rotations to have all\n            # elements equal to x in A or B\n            return min(rotations_a, rotations_b)\n    \n        n = len(A)\n        rotations = check(A[0]) \n        # If one could make all elements in A or B equal to A[0]\n        if rotations != -1 or A[0] == B[0]:\n            return rotations \n        # If one could make all elements in A or B equal to B[0]\n        else:\n            return check(B[0])\n```\n\n```Java [sol1]\nclass Solution {\n    /*\n    Return min number of rotations \n    if one could make all elements in A or B equal to x.\n    Else return -1.\n    */\n    public int check(int x, int[] A, int[] B, int n) {\n        // how many rotations should be done\n        // to have all elements in A equal to x\n        // and to have all elements in B equal to x\n        int rotations_a = 0, rotations_b = 0;\n        for (int i = 0; i < n; i++) {\n            // rotations coudn't be done\n            if (A[i] != x && B[i] != x) return -1;\n            // A[i] != x and B[i] == x\n            else if (A[i] != x) rotations_a++;\n            // A[i] == x and B[i] != x    \n            else if (B[i] != x) rotations_b++;\n        }\n        // min number of rotations to have all\n        // elements equal to x in A or B\n        return Math.min(rotations_a, rotations_b);\n    }\n\n    public int minDominoRotations(int[] A, int[] B) {\n        int n = A.length;\n        int rotations = check(A[0], B, A, n);\n        // If one could make all elements in A or B equal to A[0]\n        if (rotations != -1 || A[0] == B[0]) return rotations;\n        // If one could make all elements in A or B equal to B[0]\n        else return check(B[0], B, A, n);\n    }\n}\n```\n\n```C++ [sol1]\nclass Solution {\n    public:\n    /*\n    Return min number of rotations \n    if one could make all elements in A or B equal to x.\n    Else return -1.\n    */\n    int check(int x, vector<int>& A, vector<int>& B, int n) {\n        // how many rotations should be done\n        // to have all elements in A equal to x\n        // and to have all elements in B equal to x\n        int rotations_a = 0, rotations_b = 0;\n        for (int i = 0; i < n; i++) {\n            // rotations coudn't be done\n            if (A[i] != x && B[i] != x) return -1;\n            // A[i] != x and B[i] == x\n            else if (A[i] != x) rotations_a++;\n            // A[i] == x and B[i] != x    \n            else if (B[i] != x) rotations_b++;\n        }\n        // min number of rotations to have all\n        // elements equal to x in A or B\n        return min(rotations_a, rotations_b);\n    }\n\n    int minDominoRotations(vector<int>& A, vector<int>& B) {\n        int n = A.size();\n        int rotations = check(A[0], B, A, n);\n        // If one could make all elements in A or B equal to A[0]\n        if (rotations != -1 || A[0] == B[0]) return rotations;\n        // If one could make all elements in A or B equal to B[0]\n        else return check(B[0], B, A, n);\n    }\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$。我们只会遍历所有的数组最多两次。\n\n* 空间复杂度：$O(1)$。"
}