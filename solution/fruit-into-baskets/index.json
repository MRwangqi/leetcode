{
	"titleSlug": "fruit-into-baskets",
	"slug": "shui-guo-cheng-lan-by-leetcode-solution-1uyu",
	"url": "https://leetcode-cn.com/problems/fruit-into-baskets/solution/shui-guo-cheng-lan-by-leetcode-solution-1uyu/",
	"content": "#### 方法一：滑动窗口\n\n**思路与算法**\n\n我们可以使用滑动窗口解决本题，$\\textit{left}$ 和 $\\textit{right}$ 分别表示满足要求的窗口的左右边界，同时我们使用哈希表存储这个窗口内的数以及出现的次数。\n\n我们每次将 $\\textit{right}$ 移动一个位置，并将 $\\textit{fruits}[\\textit{right}]$ 加入哈希表。如果此时哈希表不满足要求（即哈希表中出现超过两个键值对），那么我们需要不断移动 $\\textit{left}$，并将 $\\textit{fruits}[\\textit{left}]$ 从哈希表中移除，直到哈希表满足要求为止。\n\n需要注意的是，将 $\\textit{fruits}[\\textit{left}]$ 从哈希表中移除后，如果 $\\textit{fruits}[\\textit{left}]$ 在哈希表中的出现次数减少为 $0$，需要将对应的键值对从哈希表中移除。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int totalFruit(vector<int>& fruits) {\n        int n = fruits.size();\n        unordered_map<int, int> cnt;\n\n        int left = 0, ans = 0;\n        for (int right = 0; right < n; ++right) {\n            ++cnt[fruits[right]];\n            while (cnt.size() > 2) {\n                auto it = cnt.find(fruits[left]);\n                --it->second;\n                if (it->second == 0) {\n                    cnt.erase(it);\n                }\n                ++left;\n            }\n            ans = max(ans, right - left + 1);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int totalFruit(int[] fruits) {\n        int n = fruits.length;\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n\n        int left = 0, ans = 0;\n        for (int right = 0; right < n; ++right) {\n            cnt.put(fruits[right], cnt.getOrDefault(fruits[right], 0) + 1);\n            while (cnt.size() > 2) {\n                cnt.put(fruits[left], cnt.get(fruits[left]) - 1);\n                if (cnt.get(fruits[left]) == 0) {\n                    cnt.remove(fruits[left]);\n                }\n                ++left;\n            }\n            ans = Math.max(ans, right - left + 1);\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int TotalFruit(int[] fruits) {\n        int n = fruits.Length;\n        IDictionary<int, int> cnt = new Dictionary<int, int>();\n\n        int left = 0, ans = 0;\n        for (int right = 0; right < n; ++right) {\n            cnt.TryAdd(fruits[right], 0);\n            ++cnt[fruits[right]];\n            while (cnt.Count > 2) {\n                --cnt[fruits[left]];\n                if (cnt[fruits[left]] == 0) {\n                    cnt.Remove(fruits[left]);\n                }\n                ++left;\n            }\n            ans = Math.Max(ans, right - left + 1);\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def totalFruit(self, fruits: List[int]) -> int:\n        cnt = Counter()\n\n        left = ans = 0\n        for right, x in enumerate(fruits):\n            cnt[x] += 1\n            while len(cnt) > 2:\n                cnt[fruits[left]] -= 1\n                if cnt[fruits[left]] == 0:\n                    cnt.pop(fruits[left])\n                left += 1\n            ans = max(ans, right - left + 1)\n        \n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar totalFruit = function(fruits) {\n    const n = fruits.length;\n    const cnt = new Map();\n\n    let left = 0, ans = 0;\n    for (let right = 0; right < n; ++right) {\n        cnt.set(fruits[right], (cnt.get(fruits[right]) || 0) + 1);\n        while (cnt.size > 2) {\n            cnt.set(fruits[left], cnt.get(fruits[left]) - 1);\n            if (cnt.get(fruits[left]) == 0) {\n                cnt.delete(fruits[left]);\n            }\n            ++left;\n        }\n        ans = Math.max(ans, right - left + 1);\n    }\n    return ans;\n};\n```\n\n```C [sol1-C]\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n\ntypedef struct {\n    int key;\n    int val;\n    UT_hash_handle hh;\n} HashItem; \n\nHashItem *hashFindItem(HashItem **obj, int key) {\n    HashItem *pEntry = NULL;\n    HASH_FIND_INT(*obj, &key, pEntry);\n    return pEntry;\n}\n\nbool hashAddItem(HashItem **obj, int key, int val) {\n    if (hashFindItem(obj, key)) {\n        return false;\n    }\n    HashItem *pEntry = (HashItem *)malloc(sizeof(HashItem));\n    pEntry->key = key;\n    pEntry->val = val;\n    HASH_ADD_INT(*obj, key, pEntry);\n    return true;\n}\n\nbool hashSetItem(HashItem **obj, int key, int val) {\n    HashItem *pEntry = hashFindItem(obj, key);\n    if (!pEntry) {\n        hashAddItem(obj, key, val);\n    } else {\n        pEntry->val = val;\n    }\n    return true;\n}\n\nint hashGetItem(HashItem **obj, int key, int defaultVal) {\n    HashItem *pEntry = hashFindItem(obj, key);\n    if (!pEntry) {\n        return defaultVal;\n    }\n    return pEntry->val;\n}\n\nvoid hashFree(HashItem **obj) {\n    HashItem *curr = NULL, *tmp = NULL;\n    HASH_ITER(hh, *obj, curr, tmp) {\n        HASH_DEL(*obj, curr);  \n        free(curr);             \n    }\n}\n\nint totalFruit(int* fruits, int fruitsSize){\n    HashItem *cnt = NULL;\n    int left = 0, ans = 0;\n    for (int right = 0; right < fruitsSize; ++right) {\n        hashSetItem(&cnt, fruits[right], hashGetItem(&cnt, fruits[right], 0) + 1);\n        while (HASH_COUNT(cnt) > 2) {\n            HashItem *pEntry = hashFindItem(&cnt, fruits[left]);\n            pEntry->val--;\n            if (pEntry->val == 0) {\n                HASH_DEL(cnt, pEntry);\n                free(pEntry);\n            }\n            ++left;\n        }\n        ans = MAX(ans, right - left + 1);\n    }\n    hashFree(&cnt);\n    return ans;\n}\n```\n\n```go [sol1-Golang]\nfunc totalFruit(fruits []int) (ans int) {\n    cnt := map[int]int{}\n    left := 0\n    for right, x := range fruits {\n        cnt[x]++\n        for len(cnt) > 2 {\n            y := fruits[left]\n            cnt[y]--\n            if cnt[y] == 0 {\n                delete(cnt, y)\n            }\n            left++\n        }\n        ans = max(ans, right-left+1)\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if b > a {\n        return b\n    }\n    return a\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{fruits}$ 的长度。\n\n- 空间复杂度：$O(1)$。哈希表中最多会有三个键值对，可以看成使用了常数级别的空间。"
}