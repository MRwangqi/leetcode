{
	"titleSlug": "running-sum-of-1d-array",
	"slug": "yi-wei-shu-zu-de-dong-tai-he-by-leetcode-flkm",
	"url": "https://leetcode-cn.com/problems/running-sum-of-1d-array/solution/yi-wei-shu-zu-de-dong-tai-he-by-leetcode-flkm/",
	"content": "#### 方法一：原地修改\n\n**思路和算法**\n\n因为有 $\\textit{runningSum}[i] = \\sum_{i=0}^{i} \\textit{nums}[i]$。\n\n可以推导出：\n\n$$\n\\textit{runningSum}[i] =\n\\begin{cases}\n    \\textit{nums}[0], &i = 0 \\\\\n    \\textit{runningSum}[i-1] + \\textit{nums}[i], &i > 0\n\\end{cases}\n$$\n\n这样我们可以从下标 $1$ 开始遍历 $\\textit{nums}$ 数组，每次让 $\\textit{nums}[i]$ 变为 $\\textit{nums}[i-1] + \\textit{nums}[i]$ 即可（因为此时的 $\\textit{nums}[i-1]$ 即为 $\\textit{runningSum}[i-1]$）。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> runningSum(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 1; i < n; i++) {\n            nums[i] += nums[i - 1];\n        }\n        return nums;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] runningSum(int[] nums) {\n        int n = nums.length;\n        for (int i = 1; i < n; i++) {\n            nums[i] += nums[i - 1];\n        }\n        return nums;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] RunningSum(int[] nums) {\n        int n = nums.Length;\n        for (int i = 1; i < n; i++) {\n            nums[i] += nums[i - 1];\n        }\n        return nums;\n    }\n}\n```\n\n```C [sol1-C]\nint* runningSum(int* nums, int numsSize, int* returnSize) {\n    *returnSize = numsSize;\n    for (int i = 1; i < numsSize; i++) {\n        nums[i] += nums[i - 1];\n    }\n    return nums;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def runningSum(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        for i in range(1, n):\n            nums[i] += nums[i - 1]\n        return nums\n```\n\n```JavaScript [sol1-JavaScript]\nvar runningSum = function(nums) {\n    const n = nums.length;\n    for (let i = 1; i < n; i++) {\n        nums[i] += nums[i - 1];\n    }\n    return nums;\n};\n```\n\n```go [sol1-Golang]\nfunc runningSum(nums []int) []int {\n    n := len(nums)\n    for i := 1; i < n; i++ {\n        nums[i] += nums[i-1]\n    }\n    return nums\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是给定数组长度。\n\n- 空间复杂度：$O(1)$。我们只需要常数的空间保存若干变量。"
}