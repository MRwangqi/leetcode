{
	"titleSlug": "element-appearing-more-than-25-in-sorted-array",
	"slug": "you-xu-shu-zu-zhong-chu-xian-ci-shu-chao-guo-25d-3",
	"url": "https://leetcode-cn.com/problems/element-appearing-more-than-25-in-sorted-array/solution/you-xu-shu-zu-zhong-chu-xian-ci-shu-chao-guo-25d-3/",
	"content": "### 方法一：遍历\n\n由于数组 `arr` 已经有序，那么相同的数在 `arr` 中出现的位置也是连续的。因此我们可以对数组进行一次遍历，并统计每个数出现的次数。只要发现某个数出现的次数超过数组 `arr` 长度的 25%，那么这个数即为答案。\n\n在计算数组 `arr` 长度的 25% 时，会涉及到浮点数。我们可以用整数运算 `count * 4 > arr.length` 代替浮点数运算 `count > arr.length * 25%`，减少精度误差。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findSpecialInteger(vector<int>& arr) {\n        int n = arr.size();\n        int cur = arr[0], cnt = 0;\n        for (int i = 0; i < n; ++i) {\n            if (arr[i] == cur) {\n                ++cnt;\n                if (cnt * 4 > n) {\n                    return cur;\n                }\n            }\n            else {\n                cur = arr[i];\n                cnt = 1;\n            }\n        }\n        return -1;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n = len(arr)\n        cur, cnt = arr[0], 0\n        for i in range(n):\n            if arr[i] == cur:\n                cnt += 1\n                if cnt * 4 > n:\n                    return cur\n            else:\n                cur, cnt = arr[i], 1\n        return -1\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是数组 `arr` 的长度。\n\n- 空间复杂度：$O(1)$。\n\n### 方法二：二分查找\n\n根据题目要求，满足条件的整数 `x` 至少在数组 `arr` 中出现了 `span = arr.length / 4 + 1` 次，那么我们可以断定：数组 `arr` 中的元素 `arr[0], arr[span], arr[span * 2], ...` 一定包含 `x`。\n\n我们可以使用反证法证明上述的结论。假设 `arr[0], arr[span], arr[span * 2], ...` 均不为 `x`，由于数组 `arr` 已经有序，那么 `x` 只会连续地出现在 `arr[0], arr[span], arr[span * 2], ...` 中某两个相邻元素的间隔中，因此其出现的次数最多为 `span - 1` 次，这与它至少出现 `span` 次相矛盾。\n\n有了上述的结论，我们就可以依次枚举 `arr[0], arr[span], arr[span * 2], ...` 中的元素，并将每个元素在数组 `arr` 上进行二分查找，得到其在 `arr` 中出现的位置区间。如果该区间的长度至少为 `span`，那么我们就得到了答案。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int findSpecialInteger(vector<int>& arr) {\n        int n = arr.size();\n        int span = n / 4 + 1;\n        for (int i = 0; i < n; i += span) {\n            auto iter_l = lower_bound(arr.begin(), arr.end(), arr[i]);\n            auto iter_r = upper_bound(arr.begin(), arr.end(), arr[i]);\n            if (iter_r - iter_l >= span) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n};\n```\n\n```C++ [sol2-C++17]\nclass Solution {\npublic:\n    int findSpecialInteger(vector<int>& arr) {\n        int n = arr.size();\n        int span = n / 4 + 1;\n        for (int i = 0; i < n; i += span) {\n            auto [iter_l, iter_r] = equal_range(arr.begin(), arr.end(), arr[i]);\n            if (iter_r - iter_l >= span) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n = len(arr)\n        span = n // 4 + 1\n        for i in range(0, n, span):\n            iter_l = bisect.bisect_left(arr, arr[i])\n            iter_r = bisect.bisect_right(arr, arr[i])\n            if iter_r - iter_l >= span:\n                return arr[i]\n        return -1\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log N)$，其中 $N$ 是数组 `arr` 的长度。我们枚举的元素个数为至多为 $4$ 个，可以视作 $O(1)$。对于每个元素，我们需要在数组 `arr` 上进行二分查找，时间复杂度为 $O(\\log N)$。\n\n- 空间复杂度：$O(1)$。"
}