{
	"titleSlug": "maximum-number-of-tasks-you-can-assign",
	"slug": "ni-ke-yi-an-pai-de-zui-duo-ren-wu-shu-mu-p7dm",
	"url": "https://leetcode-cn.com/problems/maximum-number-of-tasks-you-can-assign/solution/ni-ke-yi-an-pai-de-zui-duo-ren-wu-shu-mu-p7dm/",
	"content": "#### 方法一：二分查找 + 贪心选择工人\n\n**提示 $1$**\n\n如果我们已经知道「一定」可以完成 $k$ 个任务，那么：\n\n- 我们可以在 $\\textit{tasks}$ 中选择 $k$ 个值**最小**的任务；\n\n- 我们可以在 $\\textit{workers}$ 中选择 $k$ 个值**最大**的工人。\n\n**提示 $2$**\n\n如果我们可以完成 $k$ 个任务，并且满足提示 $1$，那么一定可以完成 $k-1$ 个任务，并且可以选择 $k-1$ 个值最小的任务以及 $k-1$ 个值最大的工人，同样满足提示 $1$。\n\n**思路与算法**\n\n根据提示 $2$，我们就可以使用二分查找的方法找到 $k$ 的上界 $k'$，使得我们可以完成 $k'$ 个任务，但不能完成 $k'+1$ 个任务。我们找到的 $k'$ 即为答案。\n\n在二分查找的每一步中，当我们得到 $k$ 个值最小的任务以及 $k$ 个值最大的工人后，我们应该如何判断这些任务是否都可以完成呢？\n\n我们可以考虑值**最大**的那个任务，此时会出现两种情况：\n\n- 如果有工人的值大于等于该任务的值，那么我们一定不需要使用药丸，并且一定让值**最大**的工人完成该任务。\n\n    > 证明的思路为：由于我们考虑的是值最大的那个任务，因此所有能完成该任务的工人都能完成剩余的所有任务。因此如果一个值并非最大的工人（无论是否使用药丸）完成该任务，而值最大的工人完成了另一个任务，那么我们将这两个工人完成的任务交换，仍然是可行的。\n\n- 如果所有工人的值都小于该任务的值，那么我们必须使用药丸让一名工人完成任务，并且一定让值**最小**的工人完成该任务。\n\n    > 这里的值**最小**指的是在使用药丸能完成任务的前提下，值最小的工人。\n\n    > 证明的思路为：由于我们考虑的是值最大的那个任务，因此所有通过使用药丸能完成该任务的工人都能完成剩余的所有任务。如果一个值并非最小的工人使用药丸完成该任务，而值最小的工人（无论是否使用药丸）完成了另一个任务，那么我们将这两个工人完成的任务交换，仍然是可行的。\n\n因此，我们可以从大到小枚举每一个任务，并使用有序集合维护所有的工人。当枚举到任务的值为 $t$ 时：\n\n- 如果有序集合中最大的元素大于等于 $t$，那么我们将最大的元素从有序集合中删除。\n\n- 如果有序集合中最大的元素小于 $t$，那么我们在有序集合中找出最小的大于等于 $t - \\textit{strength}$ 的元素并删除。\n\n    对于这种情况，如果我们没有药丸剩余，或者有序集合中不存在大于等于 $t - \\textit{strength}$ 的元素，那么我们就无法完成所有任务。\n\n这样一来，我们就解决了二分查找后判断可行性的问题。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {\n        int n = tasks.size(), m = workers.size();\n        sort(tasks.begin(), tasks.end());\n        sort(workers.begin(), workers.end());\n        \n        auto check = [&](int mid) -> bool {\n            int p = pills;\n            // 工人的有序集合\n            multiset<int> ws;\n            for (int i = m - mid; i < m; ++i) {\n                ws.insert(workers[i]);\n            }\n            // 从大到小枚举每一个任务\n            for (int i = mid - 1; i >= 0; --i) {\n                // 如果有序集合中最大的元素大于等于 tasks[i]\n                if (auto it = prev(ws.end()); *it >= tasks[i]) {\n                    ws.erase(it);\n                }\n                else {\n                    if (!p) {\n                        return false;\n                    }\n                    auto rep = ws.lower_bound(tasks[i] - strength);\n                    if (rep == ws.end()) {\n                        return false;\n                    }\n                    --p;\n                    ws.erase(rep);\n                }\n            }\n            return true;\n        };\n        \n        int left = 1, right = min(m, n), ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (check(mid)) {\n                ans = mid;\n                left = mid + 1;\n            }\n            else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nfrom sortedcontainers import SortedList\n\nclass Solution:\n    def maxTaskAssign(self, tasks: List[int], workers: List[int], pills: int, strength: int) -> int:\n        n, m = len(tasks), len(workers)\n        tasks.sort()\n        workers.sort()\n\n        def check(mid: int) -> bool:\n            p = pills\n            #  工人的有序集合\n            ws = SortedList(workers[m - mid:])\n            # 从大到小枚举每一个任务\n            for i in range(mid - 1, -1, -1):\n                # 如果有序集合中最大的元素大于等于 tasks[i]\n                if ws[-1] >= tasks[i]:\n                    ws.pop()\n                else:\n                    if p == 0:\n                        return False\n                    rep = ws.bisect_left(tasks[i] - strength)\n                    if rep == len(ws):\n                        return False\n                    p -= 1\n                    ws.pop(rep)\n            return True\n\n        left, right, ans = 1, min(m, n), 0\n        while left <= right:\n            mid = (left + right) // 2\n            if check(mid):\n                ans = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n + m \\log m + \\min(m, n) \\log^2 \\min(m, n))$。\n\n    - 对数组 $\\textit{tasks}$ 排序需要 $O(n \\log n)$ 的时间；\n\n    - 对数组 $\\textit{workers}$ 排序需要 $O(m \\log m)$ 的时间；\n\n    - 二分查找的下界为 $1$，上界为 $m$ 和 $n$ 中的较小值，因此二分查找的次数为 $\\log \\min(m, n)$。每一次查找需要枚举 $\\min(m, n)$ 个任务，并且枚举的过程中需要对工人的有序集合进行删除操作，单次操作时间复杂度为 $\\log \\min(m, n)$。因此二分查找的总时间复杂度为 $O(\\min(m, n) \\log^2 \\min(m, n))$。\n\n- 空间复杂度：$O(\\log n + \\log m + \\min(m, n))$。\n\n    - 对数组 $\\textit{tasks}$ 排序需要 $O(\\log n)$ 的栈空间；\n\n    - 对数组 $\\textit{workers}$ 排序需要 $O(\\log m)$ 的栈空间；\n\n    - 二分查找中使用的有序集合需要 $O(\\min(m, n))$ 的空间。\n\n**扩展**\n\n可以发现，当我们从大到小枚举每一个任务时，如果我们维护了（在使用药丸的情况下）所有可以完成任务的工人，那么：\n\n- 如果有工人可以不使用药丸完成该任务，那么我们选择（删除）值最大的工人；\n\n- 如果所有工人都需要使用药丸才能完成该任务，那么我们选择（删除）值最小的工人。\n\n而随着任务值的减少，可以完成任务的工人只增不减，因此我们可以使用一个「双端队列」来维护所有可以（在使用药丸的情况下）所有可以完成任务的工人，此时要么队首的工人被选择（删除），要么队尾的工人被选择（删除），那么单次删除操作的时间复杂度由 $O(\\log \\min (m, n))$ 降低为 $O(1)$，总时间复杂度降低为：\n\n$$\nO(n \\log n + m \\log m + \\min(m, n) \\log \\min(m, n)) = O(n \\log n + m \\log m)\n$$\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {\n        int n = tasks.size(), m = workers.size();\n        sort(tasks.begin(), tasks.end());\n        sort(workers.begin(), workers.end());\n        \n        auto check = [&](int mid) -> bool {\n            int p = pills;\n            deque<int> ws;\n            int ptr = m - 1;\n            // 从大到小枚举每一个任务\n            for (int i = mid - 1; i >= 0; --i) {\n                while (ptr >= m - mid && workers[ptr] + strength >= tasks[i]) {\n                    ws.push_front(workers[ptr]);\n                    --ptr;\n                }\n                if (ws.empty()) {\n                    return false;\n                }\n                // 如果双端队列中最大的元素大于等于 tasks[i]\n                else if (ws.back() >= tasks[i]) {\n                    ws.pop_back();\n                }\n                else {\n                    if (!p) {\n                        return false;\n                    }\n                    --p;\n                    ws.pop_front();\n                }\n            }\n            return true;\n        };\n        \n        int left = 1, right = min(m, n), ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (check(mid)) {\n                ans = mid;\n                left = mid + 1;\n            }\n            else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol2-Python3]\nfrom sortedcontainers import SortedList\n\nclass Solution:\n    def maxTaskAssign(self, tasks: List[int], workers: List[int], pills: int, strength: int) -> int:\n        n, m = len(tasks), len(workers)\n        tasks.sort()\n        workers.sort()\n\n        def check(mid: int) -> bool:\n            p = pills\n            ws = deque()\n            ptr = m - 1\n            # 从大到小枚举每一个任务\n            for i in range(mid - 1, -1, -1):\n                while ptr >= m - mid and workers[ptr] + strength >= tasks[i]:\n                    ws.appendleft(workers[ptr])\n                    ptr -= 1\n                if not ws:\n                    return False\n                # 如果双端队列中最大的元素大于等于 tasks[i]\n                elif ws[-1] >= tasks[i]:\n                    ws.pop()\n                else:\n                    if p == 0:\n                        return False\n                    p -= 1\n                    ws.popleft()\n            return True\n\n        left, right, ans = 1, min(m, n), 0\n        while left <= right:\n            mid = (left + right) // 2\n            if check(mid):\n                ans = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return ans\n```"
}