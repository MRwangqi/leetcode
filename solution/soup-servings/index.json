{
	"titleSlug": "soup-servings",
	"slug": "fen-tang-by-leetcode",
	"url": "https://leetcode-cn.com/problems/soup-servings/solution/fen-tang-by-leetcode/",
	"content": "#### 动态规划：\n\n首先，由于四种分配操作都是 `25` 的倍数，因此我们可以将 `N` 除以 `25`（如果有余数，则补 `1`），并将分配操作变为 `(4, 0)`，`(3, 1)`，`(2, 2)` 和 `(1, 3)`。\n\n当 `N` 较小时，我们可以用动态规划来解决这个问题。设 `dp(i, j)` 表示汤 `A` 和汤 `B` 分别剩下 `i` 和 `j` 份时，所求的概率值。状态转移方程为：\n\n```\ndp(i, j) = 1/4 * (dp(i - 4, y) + dp(i - 3, y - 1) + dp(i - 2, y - 2) + dp(i - 1, y - 3))\n```\n\n边界条件为：\n\n```\ndp(i, j) = 0.5   if i <= 0 and j <= 0\ndp(i, j) = 1.0   if i <= 0 and j > 0\ndp(i, j) = 0.0   if i > 0 and j <= 0\n```\n\n即如果同时分配完（边界条件中的第一行），概率值为 `1.0` 的一半即为 `0.5`；如果汤 `A` 先分配完，概率值为 `1.0`；如果汤 `B` 先分配完，概率值为 `0.0`。\n\n这个动态规划的时间复杂度是 $O(N^2)$，即使将 `N` 除以 `25` 之后，仍然没法在短时间内得到答案，因此我们需要尝试一些别的思路。可以发现，分配操作有 `(4, 0)`，`(3, 1)`，`(2, 2)` 和 `(1, 3)` 四种，那么在一次分配中，汤 `A` 平均会少 `(4 + 3 + 2 + 1) / 4 = 2.5` 份，汤 `B` 平均会少 `(0 + 1 + 2 + 3) / 4 = 1.5` 份。因此在 `N` 非常大的时候，`A` 会有很大的概率比 `B` 先分配完，所有概率应该非常接近 `1`。事实上，当 `N >= 500 * 25` 时，所求概率已经大于 `0.999999` 了（可以通过上面的动态规划方法求出），它和 `1` 的误差（无论是绝对误差还是相对误差）都小于 `10^-6`。因此在 `N >= 500 * 25` 时，我们只需要输出 `1` 作为答案即可。在其它的情况下，我们使用动态规划计算出答案。\n\n```Java [sol1]\nclass Solution {\n    public double soupServings(int N) {\n        N = N/25 + (N%25 > 0 ? 1 : 0);\n        if (N >= 500) return 1.0;\n\n        double[][] memo = new double[N+1][N+1];\n        for (int s = 0; s <= 2*N; ++s) {\n            for (int i = 0; i <= N; ++i) {\n                int j = s-i;\n                if (j < 0 || j > N) continue;\n                double ans = 0.0;\n                if (i == 0) ans = 1.0;\n                if (i == 0 && j == 0) ans = 0.5;\n                if (i > 0 && j > 0) {\n                    ans = 0.25 * (memo[M(i-4)][j] + memo[M(i-3)][M(j-1)] +\n                                  memo[M(i-2)][M(j-2)] + memo[M(i-1)][M(j-3)]);\n                }\n                memo[i][j] = ans;\n\n            }\n        }\n        return memo[N][N];\n    }\n\n    public int M(int x) { return Math.max(0, x); }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def soupServings(self, N):\n        Q, R = divmod(N, 25)\n        N = Q + (R > 0)\n        if N >= 500: return 1\n\n        memo = {}\n        def dp(x, y):\n            if (x, y) not in memo:\n                if x <= 0 or y <= 0:\n                    ans = 0.5 if x<=0 and y<=0 else 1.0 if x<=0 else 0.0\n                else:\n                    ans = 0.25 * (dp(x-4,y)+dp(x-3,y-1)+dp(x-2,y-2)+dp(x-1,y-3))\n                memo[x, y] = ans\n            return memo[x, y]\n\n        return dp(N, N)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(1)$，因为存在常数 $C$，使得当 $N > C$ 时，所求的概率和 `1` 的误差在 `10^-6` 以内。\n\n* 空间复杂度：$O(1)$，原因同上。"
}