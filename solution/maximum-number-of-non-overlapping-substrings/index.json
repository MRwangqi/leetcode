{
	"titleSlug": "maximum-number-of-non-overlapping-substrings",
	"slug": "zui-duo-de-bu-zhong-die-zi-zi-fu-chuan-by-leetcode",
	"url": "https://leetcode-cn.com/problems/maximum-number-of-non-overlapping-substrings/solution/zui-duo-de-bu-zhong-die-zi-zi-fu-chuan-by-leetcode/",
	"content": "#### 方法一：贪心\n\n**思路与算法**\n\n由于题目要求「如果一个子字符串包含字符 $c$，那么 $s$ 中所有 $c$ 字符都应该在这个子字符串中」，且我们要使最后的总长度尽可能的小，因此最多不会有超过字符集大小 $\\Sigma$ 数量的子字符串。假设当前找到了包含字符 $a$ 的符合条件的最短字符串 $s[l_a, r_a]$，看起来 $s[l_a-1,r_a]$ 或者 $s[l_a,r_a +1]$ 也可能作为一个符合条件的字符串，但是我们要使最后的「长度和最小」，因此我们只需要关注包含每个字符的「最短字符串」即可。\n\n所以解决问题的第一步是需要预处理出字符集中每个字符对应的最短字符串，由于字符集很小，我们可以暴力处理这一部分的答案。我们先遍历字符串，确定字符 $i$ 第一次出现的位置 $l_i$ 和最后一次出现的位置 $r_i$，由于 $[l_i,r_i]$ 中间可能存在其他字符，因此为了满足题目的第二点要求，我们需要遍历 $[l_i,r_i]$ 中的所有字符，利用它们的左右端点来更新 $l_i$ 和 $r_i$，保证「如果一个子字符串包含字符 $c$，那么 $s$ 中所有 $c$ 字符都应该在这个子字符串中」。\n\n预处理完以后，我们将每个字符串的起始位置看作一个个线段 $[l_i,r_i]$，问题就转化成了**有一个 $[0, n-1]$ 的一维数轴，其中 $n=s.\\textit{length}$，我们需要用尽可能多的线段去覆盖这个数轴，且线段间互不相交，线段之和最小**。这是一个很经典的贪心问题，我们只需要将得到的线段按右端点为第一关键字，长度为第二关键字排序，然后从前往后遍历线段，每次遇到可以加入答案的线段，就贪心地将其加入答案数组即可。贪心思路的正确性可以考虑如下例子：对于两个线段 $[l_1,r_1]$ 和 $[l_2,r_2]$，其中 $r_2>r_1$ 且 $l_2 \\leq r_1$，如果我们选择 $[l_2,r_2]$ 这个线段，那么剩下可分配的数轴就变少了，这对于最后得到的答案一定是不会更优的，因此最佳的策略是贪心地选择第一个线段 $[l_1,r_1]$。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    struct Seg {\n        int left, right;\n        bool operator < (const Seg& rhs) const {\n            if (right == rhs.right) {\n            \treturn left > rhs.left;\n            }\n            return right < rhs.right;\n        }\n    };\n\n    vector<string> maxNumOfSubstrings(string s) {\n        vector<Seg> seg(26, (Seg){-1, -1});\n        // 预处理左右端点\n        for (int i = 0; i < s.length(); ++i) {\n            int char_idx = s[i] - 'a';\n            if (seg[char_idx].left == -1) {\n                seg[char_idx].left = seg[char_idx].right = i;\n            } else {\n                seg[char_idx].right = i;\n            }\n        }\n        for (int i = 0; i < 26; ++i) {\n            if (seg[i].left != -1) {\n                for (int j = seg[i].left; j <= seg[i].right; ++j) {\n                    int char_idx = s[j] - 'a';\n                    if (seg[i].left <= seg[char_idx].left && seg[char_idx].right <= seg[i].right) {\n                        continue;\n                    }\n                    seg[i].left = min(seg[i].left, seg[char_idx].left);\n                    seg[i].right = max(seg[i].right, seg[char_idx].right);\n                    j = seg[i].left;\n                }\n            }\n        }\n        // 贪心选取\n        sort(seg.begin(), seg.end());\n        vector<string> ans;\n        int end = -1;\n        for (auto& segment: seg) {\n            int left = segment.left, right = segment.right;\n            if (left == -1) {\n                continue;\n            }\n            if (end == -1 || left > end) {\n                end = right;\n                ans.emplace_back(s.substr(left, right - left + 1));\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<String> maxNumOfSubstrings(String s) {\n        Seg[] seg = new Seg[26];\n        for (int i = 0; i < 26; ++i) {\n            seg[i] = new Seg(-1, -1);\n        }\n        // 预处理左右端点\n        for (int i = 0; i < s.length(); ++i) {\n            int char_idx = s.charAt(i) - 'a';\n            if (seg[char_idx].left == -1) {\n                seg[char_idx].left = seg[char_idx].right = i;\n            } else {\n                seg[char_idx].right = i;\n            }\n        }\n        for (int i = 0; i < 26; ++i) {\n            if (seg[i].left != -1) {\n                for (int j = seg[i].left; j <= seg[i].right; ++j) {\n                    int char_idx = s.charAt(j) - 'a';\n                    if (seg[i].left <= seg[char_idx].left && seg[char_idx].right <= seg[i].right) {\n                        continue;\n                    }\n                    seg[i].left = Math.min(seg[i].left, seg[char_idx].left);\n                    seg[i].right = Math.max(seg[i].right, seg[char_idx].right);\n                    j = seg[i].left;\n                }\n            }\n        }\n        // 贪心选取\n        Arrays.sort(seg);\n        List<String> ans = new ArrayList<String>();\n        int end = -1;\n        for (Seg segment : seg) {\n            int left = segment.left, right = segment.right;\n            if (left == -1) {\n                continue;\n            }\n            if (end == -1 || left > end) {\n                end = right;\n                ans.add(s.substring(left, right + 1));\n            }\n        }\n        return ans;\n    }\n\n    class Seg implements Comparable<Seg> {\n        int left, right;\n\n        public Seg(int left, int right) {\n            this.left = left;\n            this.right = right;\n        }\n\n        public int compareTo(Seg rhs) {\n            if (right == rhs.right) {\n                return rhs.left - left;\n            }\n            return right - rhs.right;\n        }\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Seg:\n    def __init__(self, left=-1, right=-1):\n        self.left = left\n        self.right = right\n    \n    def __lt__(self, rhs):\n        return self.left > rhs.left if self.right == rhs.right else self.right < rhs.right\n\n\nclass Solution:\n    def maxNumOfSubstrings(self, s: str) -> List[str]:\n        seg = [Seg() for _ in range(26)]\n        # 预处理左右端点\n        for i in range(len(s)):\n            charIdx = ord(s[i]) - ord('a')\n            if seg[charIdx].left == -1:\n                seg[charIdx].left = seg[charIdx].right = i\n            else:\n                seg[charIdx].right = i\n\n        for i in range(26):\n            if seg[i].left != -1:\n                j = seg[i].left\n                while j <= seg[i].right:\n                    charIdx = ord(s[j]) - ord('a')\n                    if seg[i].left <= seg[charIdx].left and seg[charIdx].right <= seg[i].right:\n                        pass\n                    else:\n                        seg[i].left = min(seg[i].left, seg[charIdx].left)\n                        seg[i].right = max(seg[i].right, seg[charIdx].right)\n                        j = seg[i].left\n                    j += 1\n\n        # 贪心选取\n        seg.sort()\n        ans = list()\n        end = -1\n        for segment in seg:\n            left, right = segment.left, segment.right\n            if left == -1:\n                continue\n            if end == -1 or left > end:\n                end = right\n                ans.append(s[left:right+1])\n        \n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\Sigma + \\Sigma \\log \\Sigma)$，其中 $n$ 表示字符串的长度，$\\Sigma$ 表示字符串字符集的大小。预处理每个线段的左右端点需要 $O(n\\Sigma)$ 的时间，贪心选取需要 $O(\\Sigma \\log \\Sigma + \\Sigma)$ 的时间，因此总时间复杂度为 $O(n\\Sigma + \\Sigma \\log \\Sigma)$。\n\n- 空间复杂度：$O(\\Sigma)$。我们需要 $O(\\Sigma)$ 大小的空间来记录每个字符被包含的线段的左右端点。"
}