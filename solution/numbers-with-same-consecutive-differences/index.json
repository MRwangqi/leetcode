{
	"titleSlug": "numbers-with-same-consecutive-differences",
	"slug": "lian-xu-chai-xiang-tong-de-shu-zi-by-leetcode-2",
	"url": "https://leetcode-cn.com/problems/numbers-with-same-consecutive-differences/solution/lian-xu-chai-xiang-tong-de-shu-zi-by-leetcode-2/",
	"content": "####  方法一：暴力法\n让我们尝试着一个数字一个数字的构造答案。\n\n除了第一个数字外，每个数字最多有两种选择。这意味着 9 位的数字我们最多有 $9 * 2^8$ 的情况。该可能性足够小到可以使用暴力法去解决它。\n\n**算法：**\n\n一个 $N$ 位的数字可以看作 $N-1$ 位数字加上最后一个数字。如果 $N-1$ 位数字以数字 $d$ 结尾，则 $N$ 位数字将以 $d-K$ 或 $d+K$ 结尾（前提是这些数字在 $[0,9]$ 范围内）。我们将这些数字存储在 `Set` 中，以避免重复。\n\n另外，我们应该注意前导 0 -- 只有 1 位数字以 0 开头。\n\n```python [solution1-Python]\nclass Solution(object):\n    def numsSameConsecDiff(self, N, K):\n        ans = {x for x in range(1, 10)}\n        for _ in xrange(N-1):\n            ans2 = set()\n            for x in ans:\n                d = x % 10\n                if d - K >= 0:\n                    ans2.add(10*x + d-K)\n                if d + K <= 9:\n                    ans2.add(10*x + d+K)\n            ans = ans2\n\n        if N == 1:\n            ans.add(0)\n\n        return list(ans)\n```\n\n```java [solution1-Java]\nclass Solution {\n    public int[] numsSameConsecDiff(int N, int K) {\n        Set<Integer> cur = new HashSet();\n        for (int i = 1; i <= 9; ++i)\n            cur.add(i);\n\n        for (int steps = 1; steps <= N-1; ++steps) {\n            Set<Integer> cur2 = new HashSet();\n            for (int x: cur) {\n                int d = x % 10;\n                if (d-K >= 0)\n                    cur2.add(10*x + (d-K));\n                if (d+K <= 9)\n                    cur2.add(10*x + (d+K));\n            }\n\n            cur = cur2;\n        }\n\n        if (N == 1)\n            cur.add(0);\n\n        int[] ans = new int[cur.size()];\n        int t = 0;\n        for (int x: cur)\n            ans[t++] = x;\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(2^N)$。\n* 空间复杂度：$O(2^N)$。"
}