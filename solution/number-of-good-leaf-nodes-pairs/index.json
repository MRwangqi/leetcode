{
	"titleSlug": "number-of-good-leaf-nodes-pairs",
	"slug": "hao-xie-zi-jie-dian-dui-de-shu-liang-by-leetcode-s",
	"url": "https://leetcode-cn.com/problems/number-of-good-leaf-nodes-pairs/solution/hao-xie-zi-jie-dian-dui-de-shu-liang-by-leetcode-s/",
	"content": "#### 方法一：递归\n\n**思路与算法**\n\n对于二叉树的任意两个不同的叶子节点 $A$、$B$，一个重要的性质是：它们之间有且仅有一条最短路径。设两个叶子节点的最近公共祖先为 $P$，则最短路径的长度，等于 $A$ 到 $P$ 的距离，加上 $B$ 到 $P$ 的距离。\n\n于是，我们遍历所有非叶子节点 $P$，找到以 $P$ 为最近公共祖先的所有叶子节点对，并根据上面的等式，计算每一对之间的距离，并统计距离不超过 $\\textit{distance}$ 的节点对数目，就能够得到最终的答案。\n\n那么怎么计算每个叶子节点对之间的距离呢？关键是要知道：以 $P$ 为根节点的子树中的所有叶子节点，它们与 $P$ 之间的距离。于是，对于任意的节点 $P$，我们先通过递归的方式，统计叶子节点与 $P$ 的左孩子 $\\textit{left}$、右孩子 $\\textit{right}$ 之间的距离；这样，两个以 $P$ 为最近公共祖先的叶子节点 $A$、$B$，其中一个（例如 $A$）在以 $\\textit{left}$ 为根的子树中，另一个（例如 $B$）在以 $\\textit{right}$ 为根的子树中。$A$ 与 $B$ 之间的距离，就等于 $A$ 与 $\\textit{left}$ 之间的距离，加上 $B$ 与 $\\textit{right}$ 之间的距离，再加上 $2$。\n\n由于本题中约束 $\\textit{distance} \\le 10$，因此对于每个非叶子节点 $P$，只需开辟长度为 $\\textit{distance}+1$ 的数组  $\\textit{depths}$，其中 $\\textit{depths}[i]$ 表示与 $P$ 之间的距离为 $i$ 的叶子节点数目。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    // 对于 dfs(root,distance)，同时返回：\n    // 1）每个叶子节点与 root 之间的距离\n    // 2) 以 root 为根节点的子树中好叶子节点对的数量\n    pair<vector<int>, int> dfs(TreeNode* root, int distance) {\n        vector<int> depths(distance + 1, 0);\n        bool isLeaf = (!root->left && !root->right);\n        if (isLeaf) { \n            depths[0] = 1;\n            return make_pair(depths, 0);\n        }\n\n        vector<int> leftDepths(distance + 1, 0), rightDepths(distance + 1, 0);\n        int leftCount = 0, rightCount = 0;\n        if (root->left) {\n            tie(leftDepths, leftCount) = dfs(root->left, distance);\n        }\n        if (root->right) {\n            tie(rightDepths, rightCount) = dfs(root->right, distance);\n        }\n\n        for (int i = 0; i < distance; i++) {\n            depths[i + 1] += leftDepths[i];\n            depths[i + 1] += rightDepths[i];\n        }\n\n        int cnt = 0;\n        for (int i = 0; i <= distance; i++) {\n            for (int j = 0; j + i + 2 <= distance; j++) {\n                cnt += (leftDepths[i] * rightDepths[j]);\n            }\n        }\n        return make_pair(depths, cnt + leftCount + rightCount);\n    }\n\n    int countPairs(TreeNode* root, int distance) {\n        auto [depths, ret] = dfs(root, distance);\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int countPairs(TreeNode root, int distance) {\n        Pair pair = dfs(root, distance);\n        return pair.count;\n    }\n\n    // 对于 dfs(root,distance)，同时返回：\n    // 1）每个叶子节点与 root 之间的距离\n    // 2) 以 root 为根节点的子树中好叶子节点对的数量\n    public Pair dfs(TreeNode root, int distance) {\n        int[] depths = new int[distance + 1];\n        boolean isLeaf = root.left == null && root.right == null;\n        if (isLeaf) { \n            depths[0] = 1;\n            return new Pair(depths, 0);\n        }\n\n        int[] leftDepths = new int[distance + 1];\n        int[] rightDepths = new int[distance + 1];\n        int leftCount = 0, rightCount = 0;\n        if (root.left != null) {\n            Pair leftPair = dfs(root.left, distance);\n            leftDepths = leftPair.depths;\n            leftCount = leftPair.count;\n        }\n        if (root.right != null) {\n            Pair rightPair = dfs(root.right, distance);\n            rightDepths = rightPair.depths;\n            rightCount = rightPair.count;\n        }\n\n        for (int i = 0; i < distance; i++) {\n            depths[i + 1] += leftDepths[i];\n            depths[i + 1] += rightDepths[i];\n        }\n\n        int cnt = 0;\n        for (int i = 0; i <= distance; i++) {\n            for (int j = 0; j + i + 2 <= distance; j++) {\n                cnt += leftDepths[i] * rightDepths[j];\n            }\n        }\n        return new Pair(depths, cnt + leftCount + rightCount);\n    }\n}\n\nclass Pair {\n    int[] depths;\n    int count;\n\n    public Pair(int[] depths, int count) {\n        this.depths = depths;\n        this.count = count;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def countPairs(self, root: TreeNode, distance: int) -> int:\n        # 对于 dfs(root,distance)，同时返回：\n        # 每个叶子节点与 root 之间的距离\n        # 以 root 为根节点的子树中好叶子节点对的数量\n        def dfs(root: TreeNode, distance: int) -> (List[int], int):\n            depths = [0] * (distance + 1)\n            isLeaf = not root.left and not root.right\n            if isLeaf:\n                depths[0] = 1\n                return (depths, 0)\n            \n            leftDepths, rightDepths = [0] * (distance + 1), [0] * (distance + 1)\n            leftCount = rightCount = 0\n\n            if root.left:\n                leftDepths, leftCount = dfs(root.left, distance)\n            if root.right:\n                rightDepths, rightCount = dfs(root.right, distance)\n            \n            for i in range(distance):\n                depths[i + 1] += leftDepths[i]\n                depths[i + 1] += rightDepths[i]\n            \n            cnt = 0\n            for i in range(distance + 1):\n                for j in range(distance - i - 1):\n                    cnt += leftDepths[i] * rightDepths[j]\n            \n            return (depths, cnt + leftCount + rightCount)\n        \n\n        _, ret = dfs(root, distance)\n        return ret\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N \\cdot \\textit{distance}^2)$，其中 $N$ 为树中节点的数量。对于每个节点，我们至多需要遍历 $O(\\textit{distance}^2)$ 种好叶子节点对。\n\n- 空间复杂度：$O(H \\cdot \\textit{distance})$，其中 $H$ 为树的高度。对于每个节点，我们都需要额外开辟 $O(\\textit{distance})$ 的空间，而栈的最大深度为 $O(H)$。"
}