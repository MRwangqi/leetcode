{
	"titleSlug": "unique-binary-search-trees-ii",
	"slug": "bu-tong-de-er-cha-sou-suo-shu-ii-by-leetcode-solut",
	"url": "https://leetcode-cn.com/problems/unique-binary-search-trees-ii/solution/bu-tong-de-er-cha-sou-suo-shu-ii-by-leetcode-solut/",
	"content": "#### 方法一：回溯\n\n**思路与算法**\n\n二叉搜索树关键的性质是根节点的值大于左子树所有节点的值，小于右子树所有节点的值，且左子树和右子树也同样为二叉搜索树。因此在生成所有可行的二叉搜索树的时候，假设当前序列长度为 $n$，如果我们枚举根节点的值为 $i$，那么根据二叉搜索树的性质我们可以知道左子树的节点值的集合为 $[1 \\ldots i-1]$，右子树的节点值的集合为 $[i+1 \\ldots n]$。而左子树和右子树的生成相较于原问题是一个序列长度缩小的子问题，因此我们可以想到用回溯的方法来解决这道题目。\n\n我们定义 `generateTrees(start, end)` 函数表示当前值的集合为 $[\\textit{start},\\textit{end}]$，返回序列 $[\\textit{start},\\textit{end}]$ 生成的所有可行的二叉搜索树。按照上文的思路，我们考虑枚举 $[\\textit{start},\\textit{end}]$ 中的值 $i$ 为当前二叉搜索树的根，那么序列划分为了 $[\\textit{start},i-1]$ 和 $[i+1,\\textit{end}]$ 两部分。我们递归调用这两部分，即 `generateTrees(start, i - 1)` 和 `generateTrees(i + 1, end)`，获得所有可行的左子树和可行的右子树，那么最后一步我们只要从可行左子树集合中选一棵，再从可行右子树集合中选一棵拼接到根节点上，并将生成的二叉搜索树放入答案数组即可。\n\n递归的入口即为 `generateTrees(1, n)`，出口为当 $\\textit{start}>\\textit{end}$ 的时候，当前二叉搜索树为空，返回空节点即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int start, int end) {\n        if (start > end) {\n            return { nullptr };\n        }\n        vector<TreeNode*> allTrees;\n        // 枚举可行根节点\n        for (int i = start; i <= end; i++) {\n            // 获得所有可行的左子树集合\n            vector<TreeNode*> leftTrees = generateTrees(start, i - 1);\n\n            // 获得所有可行的右子树集合\n            vector<TreeNode*> rightTrees = generateTrees(i + 1, end);\n\n            // 从左子树集合中选出一棵左子树，从右子树集合中选出一棵右子树，拼接到根节点上\n            for (auto& left : leftTrees) {\n                for (auto& right : rightTrees) {\n                    TreeNode* currTree = new TreeNode(i);\n                    currTree->left = left;\n                    currTree->right = right;\n                    allTrees.emplace_back(currTree);\n                }\n            }\n        }\n        return allTrees;\n    }\n\n    vector<TreeNode*> generateTrees(int n) {\n        if (!n) {\n            return {};\n        }\n        return generateTrees(1, n);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<TreeNode> generateTrees(int n) {\n        if (n == 0) {\n            return new LinkedList<TreeNode>();\n        }\n        return generateTrees(1, n);\n    }\n\n    public List<TreeNode> generateTrees(int start, int end) {\n        List<TreeNode> allTrees = new LinkedList<TreeNode>();\n        if (start > end) {\n            allTrees.add(null);\n            return allTrees;\n        }\n\n        // 枚举可行根节点\n        for (int i = start; i <= end; i++) {\n            // 获得所有可行的左子树集合\n            List<TreeNode> leftTrees = generateTrees(start, i - 1);\n\n            // 获得所有可行的右子树集合\n            List<TreeNode> rightTrees = generateTrees(i + 1, end);\n\n            // 从左子树集合中选出一棵左子树，从右子树集合中选出一棵右子树，拼接到根节点上\n            for (TreeNode left : leftTrees) {\n                for (TreeNode right : rightTrees) {\n                    TreeNode currTree = new TreeNode(i);\n                    currTree.left = left;\n                    currTree.right = right;\n                    allTrees.add(currTree);\n                }\n            }\n        }\n        return allTrees;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:\n        def generateTrees(start, end):\n            if start > end:\n                return [None,]\n            \n            allTrees = []\n            for i in range(start, end + 1):  # 枚举可行根节点\n                # 获得所有可行的左子树集合\n                leftTrees = generateTrees(start, i - 1)\n                \n                # 获得所有可行的右子树集合\n                rightTrees = generateTrees(i + 1, end)\n                \n                # 从左子树集合中选出一棵左子树，从右子树集合中选出一棵右子树，拼接到根节点上\n                for l in leftTrees:\n                    for r in rightTrees:\n                        currTree = TreeNode(i)\n                        currTree.left = l\n                        currTree.right = r\n                        allTrees.append(currTree)\n            \n            return allTrees\n        \n        return generateTrees(1, n) if n else []\n```\n\n```C [sol1-C]\nstruct TreeNode** buildTree(int start, int end, int* returnSize) {\n    if (start > end) {\n        (*returnSize) = 1;\n        struct TreeNode** ret = malloc(sizeof(struct TreeNode*));\n        ret[0] = NULL;\n        return ret;\n    }\n    *returnSize = 0;\n    struct TreeNode** allTrees = malloc(0);\n    // 枚举可行根节点\n    for (int i = start; i <= end; i++) {\n        // 获得所有可行的左子树集合\n        int leftTreesSize;\n        struct TreeNode** leftTrees = buildTree(start, i - 1, &leftTreesSize);\n\n        // 获得所有可行的右子树集合\n        int rightTreesSize;\n        struct TreeNode** rightTrees = buildTree(i + 1, end, &rightTreesSize);\n\n        // 从左子树集合中选出一棵左子树，从右子树集合中选出一棵右子树，拼接到根节点上\n        for (int left = 0; left < leftTreesSize; left++) {\n            for (int right = 0; right < rightTreesSize; right++) {\n                struct TreeNode* currTree = malloc(sizeof(struct TreeNode));\n                currTree->val = i;\n                currTree->left = leftTrees[left];\n                currTree->right = rightTrees[right];\n\n                (*returnSize)++;\n                allTrees = realloc(allTrees, sizeof(struct TreeNode*) * (*returnSize));\n                allTrees[(*returnSize) - 1] = currTree;\n            }\n        }\n        free(rightTrees);\n        free(leftTrees);\n    }\n    return allTrees;\n}\n\nstruct TreeNode** generateTrees(int n, int* returnSize) {\n    if (!n) {\n        (*returnSize) = 0;\n        return NULL;\n    }\n    return buildTree(1, n, returnSize);\n}\n```\n\n```golang [sol1-Golang]\nfunc generateTrees(n int) []*TreeNode {\n    if n == 0 {\n        return nil\n    }\n    return helper(1, n)\n}\n\nfunc helper(start, end int) []*TreeNode {\n    if start > end {\n        return []*TreeNode{nil}\n    }\n    allTrees := []*TreeNode{}\n    // 枚举可行根节点\n    for i := start; i <= end; i++ {\n        // 获得所有可行的左子树集合\n        leftTrees := helper(start, i - 1)\n        // 获得所有可行的右子树集合\n        rightTrees := helper(i + 1, end)\n        // 从左子树集合中选出一棵左子树，从右子树集合中选出一棵右子树，拼接到根节点上\n        for _, left := range leftTrees {\n            for _, right := range rightTrees {\n                currTree := &TreeNode{i, nil, nil}\n                currTree.Left = left\n                currTree.Right = right\n                allTrees = append(allTrees, currTree)\n            }\n        }\n    }\n    return allTrees\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：整个算法的时间复杂度取决于「可行二叉搜索树的个数」，而对于 $n$ 个点生成的二叉搜索树数量等价于数学上第 $n$ 个「卡特兰数」，用 $G_n$ 表示。卡特兰数具体的细节请读者自行查询，这里不再赘述，只给出结论。生成一棵二叉搜索树需要 $O(n)$ 的时间复杂度，一共有 $G_n$ 棵二叉搜索树，也就是 $O(nG_n)$。而卡特兰数以 $\\frac{4^n}{n^{3/2}}$ 增长，因此总时间复杂度为 $O(\\frac{4^n}{n^{1/2}})$。\n\n- 空间复杂度：$n$ 个点生成的二叉搜索树有 $G_n$ 棵，每棵有 $n$ 个节点，因此存储的空间需要 $O(nG_n) = O(\\frac{4^n}{n^{1/2}})$ ，递归函数需要 $O(n)$ 的栈空间，因此总空间复杂度为 $O(\\frac{4^n}{n^{1/2}})$。"
}